args[0] = -l
args[1] = -refine
args[3] = -transfer
args[5] = -train
args[7] = -target
args[9] = -trees

% Starting a LEARNING run of bRDN.

% Calling SETUP.
% Running on host: thais-Inspiron-5457

% Switching to VarIndicator = uppercase.

% Unset'ing VarIndicator.

Resetting the LazyGroundNthArgumentClauseIndex.

% Calling ILPouterLoop from createRegressionOuterLooper.

% getInputArgWithDefaultValue: args=[train/train_pos.txt, train/train_neg.txt, train/train_bk.txt, train/train_facts.txt]
%  for N=0: args[N]=train/train_pos.txt

% getInputArgWithDefaultValue: args=[train/train_pos.txt, train/train_neg.txt, train/train_bk.txt, train/train_facts.txt]
%  for N=1: args[N]=train/train_neg.txt

% getInputArgWithDefaultValue: args=[train/train_pos.txt, train/train_neg.txt, train/train_bk.txt, train/train_facts.txt]
%  for N=2: args[N]=train/train_bk.txt

% getInputArgWithDefaultValue: args=[train/train_pos.txt, train/train_neg.txt, train/train_bk.txt, train/train_facts.txt]
%  for N=3: args[N]=train/train_facts.txt

% Welcome to the WILL ILP/SRL systems.


% Switching to VarIndicator = uppercase.

% Unset'ing VarIndicator.
% Reading background theory from dir: null
% Load '../background.txt'.

% Switching to VarIndicator = uppercase.

***** Warning: % Since this is the first setting of the notation for variables, will keep:
%   variableIndicator = uppercase *****


***** Warning: % Since this is the first setting of the notation for variables, will keep:
%   variableIndicator = uppercase *****

% [ LazyGroundClauseIndex ]  Building full index for mode/1 with 1 assertions.
% LoadAllModes() called.  Currently loaded modes: []
% [ LazyGroundClauseIndex ]  Building full index for sameAs/2 with 2 assertions.
% [ LazyGroundNthArgumentClauseIndex ]  Argument 1:  Building full index for exp/3.
% [ LazyGroundNthArgumentClauseIndex ]  Argument 0:  Building full index for log/3.
% LoadAllLibraries() called.  Currently loaded libraries: [listsInLogic, differentInLogic, modes_arithmeticInLogic, inlines_comparisonInLogic, modes_listsInLogic, inlines_differentInLogic, modes_differentInLogic, arithmeticInLogic, inlines_listsInLogic, modes_comparisonInLogic, comparisonInLogic, inlines_arithmeticInLogic]

%  Read the facts.
%  Have read 9.691 facts.
% Have read 397 examples from 'train' [train/train*].
% Have read 159.991 examples from 'train' [train/train*].

%  LearnOneClause initialized.

% The outer looper has been created.

% Initializing the ILP inner looper.

% NEW target:                 teamplayssport(D, E)
%  targetPred:                teamplayssport/2
%  targetArgTypes:            signature = [const, const], types = [+sportsteam, +sport]
%  targets:                   [teamplayssport(D, E)]
%  targetPredicates:          [teamplayssport/2]
%  targetArgSpecs:            [[D[+sportsteam], E[+sport]]]
%  variablesInTargets:        [[D, E]]

% Started collecting constants

% Collecting the types of constants.

%   *** WARNING ***  Constant 'clevelandindians' is already marked as being of types = [sportsteam];
%          type = 'athlete' may be added if not already known.
%  PredicateName = 'athleteplayssport', from 'athleteplayssport(clevelandindians, baseball)',
%  which has types = [signature = [const, const], types = [+athlete, +sport], signature = [const, const], types = [+athlete, -sport], signature = [const, const], types = [-athlete, +sport]]
%   Other warnings with this predicate and this new type are not reported in order to keep this printout small.  Use dontComplainAboutMultipleTypes to override.

% Looking at the training examples to see if any types of new constants can be inferred.

%   *** WARNING ***  Constant 'bostonceltics' is already marked as being of types = [sportsteam];
%          type = 'sport' may be added if not already known.
%  PredicateName = 'teamplayssport', from 'teamplayssport(stlouisblues, bostonceltics)',
%  which has types = [signature = [const, const], types = [+sportsteam, +sport], signature = [const, const], types = [+sportsteam, -sport], signature = [const, const], types = [-sportsteam, +sport], signature = [const, const], types = [+sportsteam, `sport], signature = [const, const], types = [`sportsteam, +sport]]
%   Other warnings with this predicate and this new type are not reported in order to keep this printout small.  Use dontComplainAboutMultipleTypes to override.
% Time to collect constants: 359 milliseconds
% Time to collect examples: 0 seconds

% Read 397 pos examples and 159.991 neg examples.
% Time to init learnOneClause: 388 milliseconds
% Old dirnull
Setting model dir

% Have 397 'raw' positive examples and kept 397.
% Have 159.991 'raw' negative examples and kept 159.991.

% processing backup's for teamplayssport
%  POS EX = 397
%  NEG EX = 159.991

% Memory usage by WILLSetup (just counts # targets?):
%  |backupPosExamples| = 1
%  |backupNegExamples| = 1
%  |predicatesAsFacts| = 0
%  |addedToFactBase|   = 0
train/models/
File: train/advice.txt doesnt exist.Hence no advice loaded
% Learning 10 trees in this iteration for teamplayssport

% Learn model for: teamplayssport
% Kept 397 of the 397 positive examples.
% Kept 788 of the 159.991 negative examples.
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.2227819615802311
Set score:0.0025
% Dataset size: 1.185
Computing probabilities
prob time:4 milliseconds
No hidden examples for : teamplayssport
Time to build dataset: 7 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.22278196158021457
Set score:0.0025
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Have these 10 positive seeds: 168 188 318 339 386 413 517 589 695 780

% The best node found: null

% target           = teamplayssport(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  teamplayssport(_, _).  [covers 1.185,0/1.185,0 pos, 0,0/0,0 neg]

% Finding mapping for predicates: [companyalsoknownas, acquired]
% Number of legal mappings: 8
% [ LazyGroundNthArgumentClauseIndex ]  Argument 0:  Building full index for teamplaysagainstteam/2.
%     Score = -263,984511 (regressionFit = 263,984510, penalties=1.23E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, _).  [covers 663,0/1.185,0 pos, 0,0/0,0 neg]
% [ LazyGroundNthArgumentClauseIndex ]  Argument 0:  Building full index for teamalsoknownas/2.
%     Score = -263,980053 (regressionFit = 263,980051, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, B), teamalsoknownas(B, _).  [covers 486,0/1.185,0 pos, 0,0/0,0 neg]
%     Score = -263,984511 (regressionFit = 263,984510, penalties=1.23E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, _).  [covers 663,0/1.185,0 pos, 0,0/0,0 neg]
% [ LazyGroundNthArgumentClauseIndex ]  Argument 1:  Building full index for teamalsoknownas/2.
%     Score = -263,995708 (regressionFit = 263,995706, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, B), teamalsoknownas(_, B).  [covers 503,0/1.185,0 pos, 0,0/0,0 neg]
% [ LazyGroundNthArgumentClauseIndex ]  Argument 1:  Building full index for teamplaysagainstteam/2.
%     Score = -263,980651 (regressionFit = 263,980650, penalties=1.23E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(_, A).  [covers 713,0/1.185,0 pos, 0,0/0,0 neg]
%     Score = -263,994463 (regressionFit = 263,994461, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(B, A), teamalsoknownas(B, _).  [covers 517,0/1.185,0 pos, 0,0/0,0 neg]
%     Score = -263,980651 (regressionFit = 263,980650, penalties=1.23E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(_, A).  [covers 713,0/1.185,0 pos, 0,0/0,0 neg]
%     Score = -263,994050 (regressionFit = 263,994048, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(B, A), teamalsoknownas(_, B).  [covers 513,0/1.185,0 pos, 0,0/0,0 neg]
%     Score = -263,946248 (regressionFit = 263,946247, penalties=1.23E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(A, _).  [covers 265,0/1.185,0 pos, 0,0/0,0 neg]
%     Score = -263,800015 (regressionFit = 263,800013, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(A, B), teamplaysagainstteam(B, _).  [covers 56,0/1.185,0 pos, 0,0/0,0 neg]
%     Score = -263,946248 (regressionFit = 263,946247, penalties=1.23E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(A, _).  [covers 265,0/1.185,0 pos, 0,0/0,0 neg]
%     Score = -263,849113 (regressionFit = 263,849111, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(A, B), teamplaysagainstteam(_, B).  [covers 60,0/1.185,0 pos, 0,0/0,0 neg]
%     Score = -263,991274 (regressionFit = 263,991273, penalties=1.23E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(_, A).  [covers 215,0/1.185,0 pos, 0,0/0,0 neg]
%     Score = -263,993331 (regressionFit = 263,993329, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamplaysagainstteam(B, _).  [covers 88,0/1.185,0 pos, 0,0/0,0 neg]
%     Score = -263,991274 (regressionFit = 263,991273, penalties=1.23E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(_, A).  [covers 215,0/1.185,0 pos, 0,0/0,0 neg]
%     Score = -263,993331 (regressionFit = 263,993329, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamplaysagainstteam(_, B).  [covers 88,0/1.185,0 pos, 0,0/0,0 neg]

% The best node found: teamplayssport(A, _) :- teamalsoknownas(A, B), teamplaysagainstteam(B, _).  [covers 56,0/1.185,0 pos, 0,0/0,0 neg]

% Expanding node at Level 0 with score = 1,797693e+308.
% Will extend: teamplayssport(A, _) :- teamalsoknownas(A, B), teamplaysagainstteam(B, _).  [covers 56,0/1.185,0 pos, 0,0/0,0 neg]
% Path: 0;
Comparing variance: 0.23852040816326628 to score=0.0025 #egs=56.0
Comparing variance: 0.2218271654528622 to score=0.0025 #egs=1129.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 56,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,238520)
%         ILP node to extend: teamplayssport(A, _) :- teamalsoknownas(A, B), teamplaysagainstteam(B, _).  [covers 56,0/1.185,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 1 and with score = -0,238520) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 1.129,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,221827)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 1 and with score = -0,221827) into the LAST position (#2) in the search queue.

% Time for loop #1: 383 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      teamplayssport(A, _) :- teamalsoknownas(A, B), teamplaysagainstteam(B, _).  [covers 56,0/1.185,0 pos, 0,0/0,0 neg]
% This clause covers 56 positive examples, of which 56 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'teamplayssport(A, _) :- teamalsoknownas(A, B), teamplaysagainstteam(B, _).  [covers 56,0/56,0 pos, 0,0/0,0 neg]'
%     Score = -263,800015 (regressionFit = 263,800013, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(A, B), teamplaysagainstteam(B, _).  [covers 56,0/56,0 pos, 0,0/0,0 neg]

% Have these 8 positive seeds: 0 10 20 26 34 39 43 52

% The best node found: null

% Finding mapping for predicates: [economicsectorcompany]
% Number of legal mappings: 1

% Finding mapping for predicates: [companyceo]
% Number of legal mappings: 3
% [ LazyGroundNthArgumentClauseIndex ]  Argument 1:  Building full index for athleteplaysforteam/2.
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(A, B), teamplaysagainstteam(B, C), athleteplaysforteam(_, C).  [covers 56,0/56,0 pos, 0,0/0,0 neg]
% [ LazyGroundNthArgumentClauseIndex ]  Argument 1:  Building full index for athleteledsportsteam/2.
%     Score = -13,269234 (regressionFit = 13,269231, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(A, B), teamplaysagainstteam(B, C), athleteledsportsteam(_, C).  [covers 52,0/56,0 pos, 0,0/0,0 neg]
% [ LazyGroundNthArgumentClauseIndex ]  Argument 0:  Building full index for teamplaysinleague/2.
%     Score = -13,269234 (regressionFit = 13,269231, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(A, B), teamplaysagainstteam(B, C), teamplaysinleague(C, _).  [covers 52,0/56,0 pos, 0,0/0,0 neg]

% The best node found: teamplayssport(A, _) :- teamalsoknownas(A, B), teamplaysagainstteam(B, C), athleteledsportsteam(_, C).  [covers 52,0/56,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,239.
% Will extend: teamplayssport(A, _) :- teamalsoknownas(A, B), teamplaysagainstteam(B, C), athleteledsportsteam(_, C).  [covers 52,0/56,0 pos, 0,0/0,0 neg]
% Path: 0;true
Comparing variance: 0.24075443786982242 to score=0.0025 #egs=52.0
Comparing variance: 0.18750000000000003 to score=0.0025 #egs=4.0
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 4,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,187500)
%         ILP node to extend: teamplayssport(A, _) :- teamalsoknownas(A, B), teamplaysagainstteam(B, _).  [covers 56,0/56,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -0,187500) into the LAST position (#2) in the search queue.

% Time for loop #2: 25 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #2, the best clause found is:
%      teamplayssport(A, _) :- teamalsoknownas(A, B), teamplaysagainstteam(B, C), athleteledsportsteam(_, C).  [covers 52,0/56,0 pos, 0,0/0,0 neg]
% This clause covers 52 positive examples, of which 52 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 7 positive seeds: 87 156 219 272 654 744 1060

% The best node found: null
%     Score = -250,440655 (regressionFit = 250,440654, penalties=1.23E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(_, A).  [covers 660,0/1.129,0 pos, 0,0/0,0 neg]

% The best node found: teamplayssport(A, _) :- teamplaysagainstteam(_, A).  [covers 660,0/1.129,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,222.
% Will extend: teamplayssport(A, _) :- teamplaysagainstteam(_, A).  [covers 660,0/1.129,0 pos, 0,0/0,0 neg]
% Path: 0;false
Comparing variance: 0.22222222222222465 to score=0.0025 #egs=660.0
Comparing variance: 0.221266497242696 to score=0.0025 #egs=469.0
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 469,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,221266)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 2 and with score = -0,221266) into position #1 in the search queue (new size=2).

% Time for loop #3: 35 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #3, the best clause found is:
%      teamplayssport(A, _) :- teamplaysagainstteam(_, A).  [covers 660,0/1.129,0 pos, 0,0/0,0 neg]
% This clause covers 660 positive examples, of which 660 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 9 positive seeds: 6 14 21 24 27 228 328 330 382

% The best node found: null

% Finding mapping for predicates: [cityhascompanyoffice]
% Number of legal mappings: 2
%     Score = -103,586311 (regressionFit = 103,586310, penalties=1.23E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, _).  [covers 21,0/469,0 pos, 0,0/0,0 neg]
%     Score = -103,443474 (regressionFit = 103,443472, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, _), athleteplaysforteam(_, A).  [covers 12,0/469,0 pos, 0,0/0,0 neg]
%     Score = -103,586311 (regressionFit = 103,586310, penalties=1.23E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, _).  [covers 21,0/469,0 pos, 0,0/0,0 neg]
%     Score = -103,586312 (regressionFit = 103,586310, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, _), teamplaysinleague(A, _).  [covers 21,0/469,0 pos, 0,0/0,0 neg]

% The best node found: teamplayssport(A, _) :- teamplaysagainstteam(A, _), athleteplaysforteam(_, A).  [covers 12,0/469,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,221.
% Will extend: teamplayssport(A, _) :- teamplaysagainstteam(A, _), athleteplaysforteam(_, A).  [covers 12,0/469,0 pos, 0,0/0,0 neg]
% Path: 0;false,false
Comparing variance: 0.13888888888888892 to score=0.0025 #egs=12.0
Comparing variance: 0.22270635722460058 to score=0.0025 #egs=457.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 12,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,138889)
%         ILP node to extend: teamplayssport(A, _) :- teamplaysagainstteam(A, _), athleteplaysforteam(_, A).  [covers 12,0/469,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -0,138889) into the LAST position (#2) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 457,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,222706)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 3 and with score = -0,222706) into position #1 in the search queue (new size=3).

% Time for loop #4: 19 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #4, the best clause found is:
%      teamplayssport(A, _) :- teamplaysagainstteam(A, _), athleteplaysforteam(_, A).  [covers 12,0/469,0 pos, 0,0/0,0 neg]
% This clause covers 12 positive examples, of which 12 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 10 positive seeds: 2 98 113 182 240 257 270 333 386 397

% The best node found: null
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(_, A).  [covers 0,0/457,0 pos, 0,0/0,0 neg]

% The best node found: teamplayssport(A, _) :- teamplaysagainstteam(_, A).  [covers 0,0/457,0 pos, 0,0/0,0 neg]

***** Warning: Have a bestNode that covers no positive examples.  That shouldn't happen.  Best node = teamplayssport(A, _) :- teamplaysagainstteam(_, A).  [covers 0,0/457,0 pos, 0,0/0,0 neg] *****


% Expanding node at Level 3 with score = -0,223.
% Will extend: teamplayssport(A, _) :- teamplaysagainstteam(_, A).  [covers 0,0/457,0 pos, 0,0/0,0 neg]
% Path: 0;false,false,false
Comparing variance: NaN to score=0.0025 #egs=0.0
Comparing variance: 0.2227063572246007 to score=0.0025 #egs=457.0
%   Creating a TRUE-branch and FALSE-branch leaves because level = 3 >= 3

% Time for loop #5: 10 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #5, the best clause found is:
%      teamplayssport(A, _) :- teamplaysagainstteam(_, A).  [covers 0,0/457,0 pos, 0,0/0,0 neg]
% This clause covers 0 positive examples, of which 0 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'teamplayssport(A, _) :- teamalsoknownas(A, B), teamplaysagainstteam(B, _).  [covers 56,0/4,0 pos, 0,0/0,0 neg]'
%     Score = -263,800015 (regressionFit = 263,800013, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(A, B), teamplaysagainstteam(B, _).  [covers 4,0/4,0 pos, 0,0/0,0 neg]

***** Warning: % Have only 4 positive examples, so cannot choose 10 of them. *****


% Have these 4 positive seeds: 0 1 2 3

% The best node found: null
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000008E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(A, B), teamplaysagainstteam(B, C), teamplaysagainstteam(C, _).  [covers 4,0/4,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.16E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(A, B), teamplaysagainstteam(B, C), teamplaysagainstteam(C, _), teamplaysagainstteam(_, A).  [covers 4,0/4,0 pos, 0,0/0,0 neg]

% The best node found: teamplayssport(A, _) :- teamalsoknownas(A, B), teamplaysagainstteam(B, C), teamplaysagainstteam(C, _), teamplaysagainstteam(_, A).  [covers 4,0/4,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,188.
% Will extend: teamplayssport(A, _) :- teamalsoknownas(A, B), teamplaysagainstteam(B, C), teamplaysagainstteam(C, _), teamplaysagainstteam(_, A).  [covers 4,0/4,0 pos, 0,0/0,0 neg]
% Path: 0;true,false
Comparing variance: 0.18750000000000003 to score=0.0025 #egs=4.0
Comparing variance: NaN to score=0.0025 #egs=0.0
%   Creating a TRUE-branch leaf because wgtedCountTrueBranchPos = 4,0 < 2.1 * minPosCov = 6,3
%   Creating a FALSE-branch leaf because wgtedCountFalseBranchPos = 0,0 < 2.1 * minPosCov = 6,3

% Time for loop #6: 5 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #6, the best clause found is:
%      teamplayssport(A, _) :- teamalsoknownas(A, B), teamplaysagainstteam(B, C), teamplaysagainstteam(C, _), teamplaysagainstteam(_, A).  [covers 4,0/4,0 pos, 0,0/0,0 neg]
% This clause covers 4 positive examples, of which 4 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'teamplayssport(A, _) :- teamplaysagainstteam(A, _), athleteplaysforteam(_, A).  [covers 12,0/12,0 pos, 0,0/0,0 neg]'
%     Score = -103,443474 (regressionFit = 103,443472, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, _), athleteplaysforteam(_, A).  [covers 12,0/12,0 pos, 0,0/0,0 neg]

% Have these 4 positive seeds: 0 2 7 10

% The best node found: null
%     Score = -Infinity (regressionFit = Infinity, penalties=3.450000000000001E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, _), athleteplaysforteam(_, A), teamalsoknownas(A, _).  [covers 0,0/12,0 pos, 0,0/0,0 neg]

% The best node found: teamplayssport(A, _) :- teamplaysagainstteam(A, _), athleteplaysforteam(_, A), teamalsoknownas(A, _).  [covers 0,0/12,0 pos, 0,0/0,0 neg]

***** Warning: Have a bestNode that covers no positive examples.  That shouldn't happen.  Best node = teamplayssport(A, _) :- teamplaysagainstteam(A, _), athleteplaysforteam(_, A), teamalsoknownas(A, _).  [covers 0,0/12,0 pos, 0,0/0,0 neg] *****


% Expanding node at Level 3 with score = -0,139.
% Will extend: teamplayssport(A, _) :- teamplaysagainstteam(A, _), athleteplaysforteam(_, A), teamalsoknownas(A, _).  [covers 0,0/12,0 pos, 0,0/0,0 neg]
% Path: 0;false,false,true
Comparing variance: NaN to score=0.0025 #egs=0.0
Comparing variance: 0.13888888888888892 to score=0.0025 #egs=12.0
%   Creating a TRUE-branch and FALSE-branch leaves because level = 3 >= 3

% Time for loop #7: 4 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #7, the best clause found is:
%      teamplayssport(A, _) :- teamplaysagainstteam(A, _), athleteplaysforteam(_, A), teamalsoknownas(A, _).  [covers 0,0/12,0 pos, 0,0/0,0 neg]
% This clause covers 0 positive examples, of which 0 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree #1 @ 13:14:23 10/22/21.  [Using 31.506.840 memory cells.]  %%%%%


% FOR teamplayssport(A, B):
%   if ( teamalsoknownas(A, C), teamplaysagainstteam(C, D) )
%   then if ( athleteledsportsteam(E, D) )
%   | then return 0.26199508894566564;  // std dev = 3,538, 52,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=21 */
%   | else if ( teamplaysagainstteam(D, F), teamplaysagainstteam(G, A) )
%   | | then return 0.10814893509951219;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( teamplaysagainstteam(H, A) )
%   | then return 0.19148226843284105;  // std dev = 12,111, 660,000 (wgt'ed) examples reached here.  /* #neg=440 #pos=220 */
%   | else if ( teamplaysagainstteam(A, I), athleteplaysforteam(J, A) )
%   | | then if ( teamalsoknownas(A, K) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.024815601766178853;  // std dev = 1,291, 12,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   | | else if ( teamplaysagainstteam(L, A) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.19294105763780123;  // std dev = 10,088, 457,000 (wgt'ed) examples reached here.  /* #neg=304 #pos=153 */


% Clauses:

teamplayssport(A, B, 0.26199508894566564) :- 
     teamalsoknownas(A, C), 
     teamplaysagainstteam(C, D), 
     athleteledsportsteam(E, D), 
     !. // Clause #1.

teamplayssport(A, B, 0.10814893509951219) :- 
     teamalsoknownas(A, C), 
     teamplaysagainstteam(C, D), 
     teamplaysagainstteam(D, E), 
     teamplaysagainstteam(F, A), 
     !. // Clause #2.

teamplayssport(A, B, 0) :- 
     teamalsoknownas(A, C), 
     teamplaysagainstteam(C, D), 
     !. // Clause #3.

teamplayssport(A, B, 0.19148226843284105) :- 
     teamplaysagainstteam(C, A), 
     !. // Clause #4.

teamplayssport(A, B, 0) :- 
     teamplaysagainstteam(A, C), 
     athleteplaysforteam(D, A), 
     teamalsoknownas(A, E), 
     !. // Clause #5.

teamplayssport(A, B, 0.024815601766178853) :- 
     teamplaysagainstteam(A, C), 
     athleteplaysforteam(D, A), 
     !. // Clause #6.

teamplayssport(A, B, 0) :- 
     teamplaysagainstteam(C, A), 
     !. // Clause #7.

teamplayssport(A, B, 0.19294105763780123) :- !. // Clause #8.


% The flattened versions of these clauses:

flattened_teamplayssport(a, underscore, 0.26199508894566564) :-  /* #neg=31 #pos=21 */ 
   teamalsoknownas(a, uniqueVar1),
   teamplaysagainstteam(uniqueVar1, uniqueVar2),
   athleteledsportsteam(underscore, uniqueVar2),
   !. // Flattened version of clause #1.

flattened_teamplayssport(a, underscore, 0.10814893509951219) :-  /* #neg=3 #pos=1 */ 
   teamalsoknownas(a, uniqueVar3),
   teamplaysagainstteam(uniqueVar3, uniqueVar4),
   teamplaysagainstteam(uniqueVar4, underscore),
   teamplaysagainstteam(underscore, a),
   !. // Flattened version of clause #2.

flattened_teamplayssport(a, underscore, 0) :- 
   teamalsoknownas(a, uniqueVar5),
   teamplaysagainstteam(uniqueVar5, underscore),
   !. // Flattened version of clause #3.

flattened_teamplayssport(a, underscore, 0.19148226843284105) :-  /* #neg=440 #pos=220 */ 
   teamplaysagainstteam(underscore, a),
   !. // Flattened version of clause #4.

flattened_teamplayssport(a, underscore, 0) :- 
   teamplaysagainstteam(a, underscore),
   athleteplaysforteam(underscore, a),
   teamalsoknownas(a, underscore),
   !. // Flattened version of clause #5.

flattened_teamplayssport(a, underscore, 0.024815601766178853) :-  /* #neg=10 #pos=2 */ 
   teamplaysagainstteam(a, underscore),
   athleteplaysforteam(underscore, a),
   !. // Flattened version of clause #6.

flattened_teamplayssport(a, underscore, 0) :- 
   teamplaysagainstteam(underscore, a),
   !. // Flattened version of clause #7.

flattened_teamplayssport(underscore, underscore, 0.19294105763780123) :-  /* #neg=304 #pos=153 */ 
   !. // Flattened version of clause #8.


% The unique flattened literals:
%   teamplaysagainstteam(uniqueVar1, uniqueVar2)
%   teamplaysagainstteam(uniqueVar3, uniqueVar4)
%   teamplaysagainstteam(uniqueVar5, underscore)
%   teamplaysagainstteam(a, underscore)
%   athleteledsportsteam(underscore, uniqueVar2)
%   teamalsoknownas(a, uniqueVar5)
%   teamalsoknownas(a, uniqueVar1)
%   teamalsoknownas(a, underscore)
%   teamplaysagainstteam(underscore, a)
%   teamplaysagainstteam(uniqueVar4, underscore)
%   teamalsoknownas(a, uniqueVar3)
%   athleteplaysforteam(underscore, a)

% Saving model in: train/models/bRDNs/teamplayssport.model.ckpt
% Time taken to learn 1 trees is 662 milliseconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.13888888888888892
Set score:0.0025
% Only 1185 out of 1185 converged.
% Kept 397 of the 397 positive examples.
% Kept 761 of the 159.991 negative examples.
% Dataset size: 1.158
Computing probabilities
prob time:37 milliseconds
No hidden examples for : teamplayssport
Time to build dataset: 141 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.22532902917580816
Set score:0.0025
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Have these 3 positive seeds: 139 229 639

% The best node found: null

% target           = teamplayssport(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  teamplayssport(_, _).  [covers 1.158,0/1.158,0 pos, 0,0/0,0 neg]
%     Score = -260,758615 (regressionFit = 260,758614, penalties=1.23E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(_, A).  [covers 682,0/1.158,0 pos, 0,0/0,0 neg]
%     Score = -260,791004 (regressionFit = 260,791001, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(B, A), athleteledsportsteam(_, B).  [covers 564,0/1.158,0 pos, 0,0/0,0 neg]

% The best node found: teamplayssport(A, _) :- teamplaysagainstteam(B, A), athleteledsportsteam(_, B).  [covers 564,0/1.158,0 pos, 0,0/0,0 neg]

% Expanding node at Level 0 with score = 1,797693e+308.
% Will extend: teamplayssport(A, _) :- teamplaysagainstteam(B, A), athleteledsportsteam(_, B).  [covers 564,0/1.158,0 pos, 0,0/0,0 neg]
% Path: 1;
Comparing variance: 0.22890125132970987 to score=0.0025 #egs=564.0
Comparing variance: 0.22170150783943407 to score=0.0025 #egs=594.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 564,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,228901)
%         ILP node to extend: teamplayssport(A, _) :- teamplaysagainstteam(B, A), athleteledsportsteam(_, B).  [covers 564,0/1.158,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 1 and with score = -0,228901) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 594,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,221702)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 1 and with score = -0,221702) into the LAST position (#2) in the search queue.

% Time for loop #1: 47 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      teamplayssport(A, _) :- teamplaysagainstteam(B, A), athleteledsportsteam(_, B).  [covers 564,0/1.158,0 pos, 0,0/0,0 neg]
% This clause covers 564 positive examples, of which 564 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'teamplayssport(A, _) :- teamplaysagainstteam(B, A), athleteledsportsteam(_, B).  [covers 564,0/564,0 pos, 0,0/0,0 neg]'
%     Score = -260,791004 (regressionFit = 260,791001, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(B, A), athleteledsportsteam(_, B).  [covers 564,0/564,0 pos, 0,0/0,0 neg]

% Have these 4 positive seeds: 70 194 214 221

% The best node found: null
%     Score = -129,090082 (regressionFit = 129,090078, penalties=3.35E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(B, A), athleteledsportsteam(_, B), athleteplaysforteam(_, A).  [covers 448,0/564,0 pos, 0,0/0,0 neg]
%     Score = -129,082338 (regressionFit = 129,082334, penalties=4.3600000000000015E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(B, A), athleteledsportsteam(_, B), athleteplaysforteam(_, A), athleteledsportsteam(_, A).  [covers 263,0/564,0 pos, 0,0/0,0 neg]

% The best node found: teamplayssport(A, _) :- teamplaysagainstteam(B, A), athleteledsportsteam(_, B), athleteplaysforteam(_, A), athleteledsportsteam(_, A).  [covers 263,0/564,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,229.
% Will extend: teamplayssport(A, _) :- teamplaysagainstteam(B, A), athleteledsportsteam(_, B), athleteplaysforteam(_, A), athleteledsportsteam(_, A).  [covers 263,0/564,0 pos, 0,0/0,0 neg]
% Path: 1;true
Comparing variance: 0.230814223800715 to score=0.0025 #egs=263.0
Comparing variance: 0.22717007537992706 to score=0.0025 #egs=301.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 263,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,230814)
%         ILP node to extend: teamplayssport(A, _) :- teamplaysagainstteam(B, A), athleteledsportsteam(_, B), athleteplaysforteam(_, A), athleteledsportsteam(_, A).  [covers 263,0/564,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -0,230814) into position #1 in the search queue (new size=2).
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 301,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,227170)
%         ILP node to extend: teamplayssport(A, _) :- teamplaysagainstteam(B, A), athleteledsportsteam(_, B).  [covers 564,0/564,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -0,227170) into position #2 in the search queue (new size=3).

% Time for loop #2: 75 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #2, the best clause found is:
%      teamplayssport(A, _) :- teamplaysagainstteam(B, A), athleteledsportsteam(_, B), athleteplaysforteam(_, A), athleteledsportsteam(_, A).  [covers 263,0/564,0 pos, 0,0/0,0 neg]
% This clause covers 263 positive examples, of which 263 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'teamplayssport(A, _) :- teamplaysagainstteam(B, A), athleteledsportsteam(_, B), athleteplaysforteam(_, A), athleteledsportsteam(_, A).  [covers 263,0/263,0 pos, 0,0/0,0 neg]'
%     Score = -129,082338 (regressionFit = 129,082334, penalties=4.3600000000000015E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(B, A), athleteledsportsteam(_, B), athleteplaysforteam(_, A), athleteledsportsteam(_, A).  [covers 263,0/263,0 pos, 0,0/0,0 neg]

% Have these 4 positive seeds: 42 45 46 49

% The best node found: null
%     Score = -60,629347 (regressionFit = 60,629342, penalties=5.47E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(B, A), athleteledsportsteam(_, B), athleteplaysforteam(_, A), athleteledsportsteam(_, A), teamalsoknownas(A, _).  [covers 51,0/263,0 pos, 0,0/0,0 neg]

% The best node found: teamplayssport(A, _) :- teamplaysagainstteam(B, A), athleteledsportsteam(_, B), athleteplaysforteam(_, A), athleteledsportsteam(_, A), teamalsoknownas(A, _).  [covers 51,0/263,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,231.
% Will extend: teamplayssport(A, _) :- teamplaysagainstteam(B, A), athleteledsportsteam(_, B), athleteplaysforteam(_, A), athleteledsportsteam(_, A), teamalsoknownas(A, _).  [covers 51,0/263,0 pos, 0,0/0,0 neg]
% Path: 1;true,true
Comparing variance: 0.22210695928436217 to score=0.0025 #egs=51.0
Comparing variance: 0.23255606977572044 to score=0.0025 #egs=212.0

% Time for loop #3: 823 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #3, the best clause found is:
%      teamplayssport(A, _) :- teamplaysagainstteam(B, A), athleteledsportsteam(_, B), athleteplaysforteam(_, A), athleteledsportsteam(_, A), teamalsoknownas(A, _).  [covers 51,0/263,0 pos, 0,0/0,0 neg]
% This clause covers 51 positive examples, of which 51 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'teamplayssport(A, _) :- teamplaysagainstteam(B, A), athleteledsportsteam(_, B).  [covers 564,0/301,0 pos, 0,0/0,0 neg]'
%     Score = -260,791004 (regressionFit = 260,791001, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(B, A), athleteledsportsteam(_, B).  [covers 301,0/301,0 pos, 0,0/0,0 neg]

% Have these 4 positive seeds: 25 54 171 224

% The best node found: null
% [ LazyGroundClauseIndex ]  Building full index for teamalsoknownas/2 with 316 assertions.
%     Score = -Infinity (regressionFit = Infinity, penalties=3.240000000000001E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(B, A), athleteledsportsteam(_, B), teamalsoknownas(B, B).  [covers 0,0/301,0 pos, 0,0/0,0 neg]

% The best node found: teamplayssport(A, _) :- teamplaysagainstteam(B, A), athleteledsportsteam(_, B), teamalsoknownas(B, B).  [covers 0,0/301,0 pos, 0,0/0,0 neg]

***** Warning: Have a bestNode that covers no positive examples.  That shouldn't happen.  Best node = teamplayssport(A, _) :- teamplaysagainstteam(B, A), athleteledsportsteam(_, B), teamalsoknownas(B, B).  [covers 0,0/301,0 pos, 0,0/0,0 neg] *****


% Expanding node at Level 2 with score = -0,227.
% Will extend: teamplayssport(A, _) :- teamplaysagainstteam(B, A), athleteledsportsteam(_, B), teamalsoknownas(B, B).  [covers 0,0/301,0 pos, 0,0/0,0 neg]
% Path: 1;true,false
Comparing variance: NaN to score=0.0025 #egs=0.0
Comparing variance: 0.2271700753799254 to score=0.0025 #egs=301.0
%   Creating a TRUE-branch leaf because wgtedCountTrueBranchPos = 0,0 < 2.1 * minPosCov = 6,3

% Time for loop #4: 26 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #4, the best clause found is:
%      teamplayssport(A, _) :- teamplaysagainstteam(B, A), athleteledsportsteam(_, B), teamalsoknownas(B, B).  [covers 0,0/301,0 pos, 0,0/0,0 neg]
% This clause covers 0 positive examples, of which 0 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 3 positive seeds: 148 218 530

% The best node found: null
%     Score = -131,607163 (regressionFit = 131,607162, penalties=1.23E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, _).  [covers 98,0/594,0 pos, 0,0/0,0 neg]
%     Score = -131,623134 (regressionFit = 131,623132, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, B), athleteledsportsteam(_, B).  [covers 10,0/594,0 pos, 0,0/0,0 neg]

% The best node found: teamplayssport(A, _) :- teamplaysagainstteam(A, B), athleteledsportsteam(_, B).  [covers 10,0/594,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,222.
% Will extend: teamplayssport(A, _) :- teamplaysagainstteam(A, B), athleteledsportsteam(_, B).  [covers 10,0/594,0 pos, 0,0/0,0 neg]
% Path: 1;false
Comparing variance: 0.2383396001211972 to score=0.0025 #egs=10.0
Comparing variance: 0.22130091731849544 to score=0.0025 #egs=584.0
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 584,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,221301)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 2 and with score = -0,221301) into the LAST position (#1) in the search queue.

% Time for loop #5: 8 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #5, the best clause found is:
%      teamplayssport(A, _) :- teamplaysagainstteam(A, B), athleteledsportsteam(_, B).  [covers 10,0/594,0 pos, 0,0/0,0 neg]
% This clause covers 10 positive examples, of which 10 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 4 positive seeds: 79 103 183 193

% The best node found: null
%     Score = -129,239170 (regressionFit = 129,239168, penalties=1.23E-6) for clause:  teamplayssport(A, _) :- athleteplaysforteam(_, A).  [covers 54,0/584,0 pos, 0,0/0,0 neg]

% The best node found: teamplayssport(A, _) :- athleteplaysforteam(_, A).  [covers 54,0/584,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,221.
% Will extend: teamplayssport(A, _) :- athleteplaysforteam(_, A).  [covers 54,0/584,0 pos, 0,0/0,0 neg]
% Path: 1;false,false
Comparing variance: 0.22222473096860526 to score=0.0025 #egs=54.0
Comparing variance: 0.22120572239955097 to score=0.0025 #egs=530.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 54,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,222225)
%         ILP node to extend: teamplayssport(A, _) :- athleteplaysforteam(_, A).  [covers 54,0/584,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -0,222225) into the LAST position (#1) in the search queue.

% Time for loop #6: 5 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #6, the best clause found is:
%      teamplayssport(A, _) :- athleteplaysforteam(_, A).  [covers 54,0/584,0 pos, 0,0/0,0 neg]
% This clause covers 54 positive examples, of which 54 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'teamplayssport(A, _) :- athleteplaysforteam(_, A).  [covers 54,0/54,0 pos, 0,0/0,0 neg]'
%     Score = -129,239170 (regressionFit = 129,239168, penalties=1.23E-6) for clause:  teamplayssport(A, _) :- athleteplaysforteam(_, A).  [covers 54,0/54,0 pos, 0,0/0,0 neg]

% Have these 4 positive seeds: 3 14 26 34

% The best node found: null
% [ LazyGroundNthArgumentClauseIndex ]  Argument 0:  Building full index for athleteplaysforteam/2.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  teamplayssport(A, _) :- athleteplaysforteam(B, A), athleteplaysforteam(B, _).  [covers 54,0/54,0 pos, 0,0/0,0 neg]

% The best node found: teamplayssport(A, _) :- athleteplaysforteam(B, A), athleteplaysforteam(B, _).  [covers 54,0/54,0 pos, 0,0/0,0 neg]

% Expanding node at Level 3 with score = -0,222.
% Will extend: teamplayssport(A, _) :- athleteplaysforteam(B, A), athleteplaysforteam(B, _).  [covers 54,0/54,0 pos, 0,0/0,0 neg]
% Path: 1;false,false,true
Comparing variance: 0.22222473096860526 to score=0.0025 #egs=54.0
Comparing variance: NaN to score=0.0025 #egs=0.0
%   Creating a TRUE-branch and FALSE-branch leaves because level = 3 >= 3

% Time for loop #7: 4 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #7, the best clause found is:
%      teamplayssport(A, _) :- athleteplaysforteam(B, A), athleteplaysforteam(B, _).  [covers 54,0/54,0 pos, 0,0/0,0 neg]
% This clause covers 54 positive examples, of which 54 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree #2 @ 13:14:24 10/22/21.  [Using 31.995.632 memory cells.]  %%%%%


% FOR teamplayssport(A, B):
%   if ( teamplaysagainstteam(C, A), athleteledsportsteam(D, C) )
%   then if ( athleteplaysforteam(E, A), athleteledsportsteam(F, A) )
%   | then if ( teamalsoknownas(A, G) )
%   | | then return 0.15847470304921268;  // std dev = 3,366, 51,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=17 */
%   | | else return 0.20113001953343326;  // std dev = 7,022, 212,000 (wgt'ed) examples reached here.  /* #neg=134 #pos=78 */
%   | else if ( teamalsoknownas(C, C) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.18154281778859668;  // std dev = 8,269, 301,000 (wgt'ed) examples reached here.  /* #neg=196 #pos=105 */
%   else if ( teamplaysagainstteam(A, H), athleteledsportsteam(I, H) )
%   | then return 0.24632264376067434;  // std dev = 1,544, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | else if ( athleteplaysforteam(J, A) )
%   | | then if ( athleteplaysforteam(J, K) )
%   | | | then return 0.16651253146641565;  // std dev = 3,464, 54,000 (wgt'ed) examples reached here.  /* #neg=36 #pos=18 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.1631099794896504;  // std dev = 10,828, 530,000 (wgt'ed) examples reached here.  /* #neg=355 #pos=175 */


% Clauses:

teamplayssport(A, B, 0.15847470304921268) :- 
     teamplaysagainstteam(C, A), 
     athleteledsportsteam(D, C), 
     athleteplaysforteam(E, A), 
     athleteledsportsteam(F, A), 
     teamalsoknownas(A, G), 
     !. // Clause #1.

teamplayssport(A, B, 0.20113001953343326) :- 
     teamplaysagainstteam(C, A), 
     athleteledsportsteam(D, C), 
     athleteplaysforteam(E, A), 
     athleteledsportsteam(F, A), 
     !. // Clause #2.

teamplayssport(A, B, 0) :- 
     teamplaysagainstteam(C, A), 
     athleteledsportsteam(D, C), 
     teamalsoknownas(C, C), 
     !. // Clause #3.

teamplayssport(A, B, 0.18154281778859668) :- 
     teamplaysagainstteam(C, A), 
     athleteledsportsteam(D, C), 
     !. // Clause #4.

teamplayssport(A, B, 0.24632264376067434) :- 
     teamplaysagainstteam(A, C), 
     athleteledsportsteam(D, C), 
     !. // Clause #5.

teamplayssport(A, B, 0.16651253146641565) :- 
     athleteplaysforteam(C, A), 
     athleteplaysforteam(C, D), 
     !. // Clause #6.

teamplayssport(A, B, 0) :- 
     athleteplaysforteam(C, A), 
     !. // Clause #7.

teamplayssport(A, B, 0.1631099794896504) :- !. // Clause #8.


% The flattened versions of these clauses:

flattened_teamplayssport(a, underscore, 0.15847470304921268) :-  /* #neg=34 #pos=17 */ 
   teamplaysagainstteam(uniqueVar6, a),
   athleteledsportsteam(underscore, uniqueVar6),
   athleteplaysforteam(underscore, a),
   athleteledsportsteam(underscore, a),
   teamalsoknownas(a, underscore),
   !. // Flattened version of clause #1.

flattened_teamplayssport(a, underscore, 0.20113001953343326) :-  /* #neg=134 #pos=78 */ 
   teamplaysagainstteam(uniqueVar7, a),
   athleteledsportsteam(underscore, uniqueVar7),
   athleteplaysforteam(underscore, a),
   athleteledsportsteam(underscore, a),
   !. // Flattened version of clause #2.

flattened_teamplayssport(a, underscore, 0) :- 
   teamplaysagainstteam(uniqueVar8, a),
   athleteledsportsteam(underscore, uniqueVar8),
   teamalsoknownas(uniqueVar8, uniqueVar8),
   !. // Flattened version of clause #3.

flattened_teamplayssport(a, underscore, 0.18154281778859668) :-  /* #neg=196 #pos=105 */ 
   teamplaysagainstteam(uniqueVar9, a),
   athleteledsportsteam(underscore, uniqueVar9),
   !. // Flattened version of clause #4.

flattened_teamplayssport(a, underscore, 0.24632264376067434) :-  /* #neg=6 #pos=4 */ 
   teamplaysagainstteam(a, uniqueVar10),
   athleteledsportsteam(underscore, uniqueVar10),
   !. // Flattened version of clause #5.

flattened_teamplayssport(a, underscore, 0.16651253146641565) :-  /* #neg=36 #pos=18 */ 
   athleteplaysforteam(uniqueVar11, a),
   athleteplaysforteam(uniqueVar11, underscore),
   !. // Flattened version of clause #6.

flattened_teamplayssport(a, underscore, 0) :- 
   athleteplaysforteam(underscore, a),
   !. // Flattened version of clause #7.

flattened_teamplayssport(underscore, underscore, 0.1631099794896504) :-  /* #neg=355 #pos=175 */ 
   !. // Flattened version of clause #8.


% The unique flattened literals:
%   teamalsoknownas(a, underscore)
%   teamalsoknownas(uniqueVar8, uniqueVar8)
%   athleteledsportsteam(underscore, uniqueVar6)
%   teamplaysagainstteam(uniqueVar9, a)
%   athleteledsportsteam(underscore, uniqueVar7)
%   teamplaysagainstteam(a, uniqueVar10)
%   athleteledsportsteam(underscore, uniqueVar9)
%   athleteledsportsteam(underscore, uniqueVar10)
%   athleteledsportsteam(underscore, a)
%   teamplaysagainstteam(uniqueVar7, a)
%   athleteplaysforteam(uniqueVar11, a)
%   athleteledsportsteam(underscore, uniqueVar8)
%   athleteplaysforteam(uniqueVar11, underscore)
%   teamplaysagainstteam(uniqueVar6, a)
%   teamplaysagainstteam(uniqueVar8, a)
%   athleteplaysforteam(underscore, a)

% Saving model in: train/models/bRDNs/teamplayssport.model.ckpt
% Time taken to learn 2 trees is 1,924 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.2222247309686053
Set score:0.0025
% Only 1158 out of 1158 converged.
% Kept 397 of the 397 positive examples.
% Kept 772 of the 159.991 negative examples.
% Dataset size: 1.169
Computing probabilities
prob time:826 milliseconds
No hidden examples for : teamplayssport
Time to build dataset: 877 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.22425476518264886
Set score:0.0025
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Have these 3 positive seeds: 288 781 1056

% The best node found: null

% target           = teamplayssport(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  teamplayssport(_, _).  [covers 1.169,0/1.169,0 pos, 0,0/0,0 neg]

% Finding mapping for predicates: [countryhascompanyoffice]
% Number of legal mappings: 1
%     Score = -262,057840 (regressionFit = 262,057839, penalties=1.23E-6) for clause:  teamplayssport(A, _) :- teamplaysinleague(A, _).  [covers 883,0/1.169,0 pos, 0,0/0,0 neg]

% The best node found: teamplayssport(A, _) :- teamplaysinleague(A, _).  [covers 883,0/1.169,0 pos, 0,0/0,0 neg]

% Expanding node at Level 0 with score = 1,797693e+308.
% Will extend: teamplayssport(A, _) :- teamplaysinleague(A, _).  [covers 883,0/1.169,0 pos, 0,0/0,0 neg]
% Path: 2;
Comparing variance: 0.22611676035842 to score=0.0025 #egs=883.0
Comparing variance: 0.21817041821890493 to score=0.0025 #egs=286.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 883,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,226117)
%         ILP node to extend: teamplayssport(A, _) :- teamplaysinleague(A, _).  [covers 883,0/1.169,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 1 and with score = -0,226117) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 286,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,218170)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 1 and with score = -0,218170) into the LAST position (#2) in the search queue.

% Time for loop #1: 9 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      teamplayssport(A, _) :- teamplaysinleague(A, _).  [covers 883,0/1.169,0 pos, 0,0/0,0 neg]
% This clause covers 883 positive examples, of which 883 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'teamplayssport(A, _) :- teamplaysinleague(A, _).  [covers 883,0/883,0 pos, 0,0/0,0 neg]'
%     Score = -262,057840 (regressionFit = 262,057839, penalties=1.23E-6) for clause:  teamplayssport(A, _) :- teamplaysinleague(A, _).  [covers 883,0/883,0 pos, 0,0/0,0 neg]

% Have these 4 positive seeds: 100 251 356 544

% The best node found: null
%     Score = -199,452989 (regressionFit = 199,452986, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysinleague(A, _), teamalsoknownas(A, _).  [covers 192,0/883,0 pos, 0,0/0,0 neg]

% The best node found: teamplayssport(A, _) :- teamplaysinleague(A, _), teamalsoknownas(A, _).  [covers 192,0/883,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,226.
% Will extend: teamplayssport(A, _) :- teamplaysinleague(A, _), teamalsoknownas(A, _).  [covers 192,0/883,0 pos, 0,0/0,0 neg]
% Path: 2;true
Comparing variance: 0.23438791958963312 to score=0.0025 #egs=192.0
Comparing variance: 0.22351737465002475 to score=0.0025 #egs=691.0
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 691,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,223517)
%         ILP node to extend: teamplayssport(A, _) :- teamplaysinleague(A, _).  [covers 883,0/883,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -0,223517) into position #1 in the search queue (new size=2).

% Time for loop #2: 8 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #2, the best clause found is:
%      teamplayssport(A, _) :- teamplaysinleague(A, _), teamalsoknownas(A, _).  [covers 192,0/883,0 pos, 0,0/0,0 neg]
% This clause covers 192 positive examples, of which 192 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'teamplayssport(A, _) :- teamplaysinleague(A, _).  [covers 883,0/691,0 pos, 0,0/0,0 neg]'
%     Score = -262,057840 (regressionFit = 262,057839, penalties=1.23E-6) for clause:  teamplayssport(A, _) :- teamplaysinleague(A, _).  [covers 691,0/691,0 pos, 0,0/0,0 neg]

% Have these 4 positive seeds: 12 144 285 525

% The best node found: null

% Finding mapping for predicates: [bankbankincountry]
% Number of legal mappings: 1
%     Score = -154,378840 (regressionFit = 154,378837, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysinleague(A, _), athleteplaysforteam(_, A).  [covers 415,0/691,0 pos, 0,0/0,0 neg]
% [ LazyGroundNthArgumentClauseIndex ]  Argument 1:  Building full index for athleteplaysinleague/2.
%     Score = -154,354590 (regressionFit = 154,354587, penalties=3.35E-6) for clause:  teamplayssport(A, _) :- teamplaysinleague(A, B), athleteplaysforteam(_, A), athleteplaysinleague(_, B).  [covers 393,0/691,0 pos, 0,0/0,0 neg]

% The best node found: teamplayssport(A, _) :- teamplaysinleague(A, B), athleteplaysforteam(_, A), athleteplaysinleague(_, B).  [covers 393,0/691,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,224.
% Will extend: teamplayssport(A, _) :- teamplaysinleague(A, B), athleteplaysforteam(_, A), athleteplaysinleague(_, B).  [covers 393,0/691,0 pos, 0,0/0,0 neg]
% Path: 2;true,false
Comparing variance: 0.22047239475716676 to score=0.0025 #egs=393.0
Comparing variance: 0.22721119325151717 to score=0.0025 #egs=298.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 393,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,220472)
%         ILP node to extend: teamplayssport(A, _) :- teamplaysinleague(A, B), athleteplaysforteam(_, A), athleteplaysinleague(_, B).  [covers 393,0/691,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -0,220472) into position #1 in the search queue (new size=2).
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 298,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,227211)
%         ILP node to extend: teamplayssport(A, _) :- teamplaysinleague(A, _).  [covers 691,0/691,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -0,227211) into position #1 in the search queue (new size=3).

% Time for loop #3: 53 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #3, the best clause found is:
%      teamplayssport(A, _) :- teamplaysinleague(A, B), athleteplaysforteam(_, A), athleteplaysinleague(_, B).  [covers 393,0/691,0 pos, 0,0/0,0 neg]
% This clause covers 393 positive examples, of which 393 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'teamplayssport(A, _) :- teamplaysinleague(A, _).  [covers 691,0/298,0 pos, 0,0/0,0 neg]'
%     Score = -262,057840 (regressionFit = 262,057839, penalties=1.23E-6) for clause:  teamplayssport(A, _) :- teamplaysinleague(A, _).  [covers 298,0/298,0 pos, 0,0/0,0 neg]

% Have these 4 positive seeds: 75 107 156 271

% The best node found: null
% [ LazyGroundNthArgumentClauseIndex ]  Argument 1:  Building full index for teamplaysinleague/2.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  teamplayssport(A, _) :- teamplaysinleague(A, B), teamplaysinleague(_, B).  [covers 298,0/298,0 pos, 0,0/0,0 neg]

% The best node found: teamplayssport(A, _) :- teamplaysinleague(A, B), teamplaysinleague(_, B).  [covers 298,0/298,0 pos, 0,0/0,0 neg]

% Expanding node at Level 3 with score = -0,227.
% Will extend: teamplayssport(A, _) :- teamplaysinleague(A, B), teamplaysinleague(_, B).  [covers 298,0/298,0 pos, 0,0/0,0 neg]
% Path: 2;true,false,false
Comparing variance: 0.22721119325151778 to score=0.0025 #egs=298.0
Comparing variance: NaN to score=0.0025 #egs=0.0
%   Creating a TRUE-branch and FALSE-branch leaves because level = 3 >= 3

% Time for loop #4: 49 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #4, the best clause found is:
%      teamplayssport(A, _) :- teamplaysinleague(A, B), teamplaysinleague(_, B).  [covers 298,0/298,0 pos, 0,0/0,0 neg]
% This clause covers 298 positive examples, of which 298 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'teamplayssport(A, _) :- teamplaysinleague(A, B), athleteplaysforteam(_, A), athleteplaysinleague(_, B).  [covers 393,0/393,0 pos, 0,0/0,0 neg]'
%     Score = -154,354590 (regressionFit = 154,354587, penalties=3.35E-6) for clause:  teamplayssport(A, _) :- teamplaysinleague(A, B), athleteplaysforteam(_, A), athleteplaysinleague(_, B).  [covers 393,0/393,0 pos, 0,0/0,0 neg]

% Have these 4 positive seeds: 44 47 137 269

% The best node found: null
%     Score = -Infinity (regressionFit = Infinity, penalties=4.3600000000000015E-6) for clause:  teamplayssport(A, _) :- teamplaysinleague(A, B), athleteplaysforteam(_, A), athleteplaysinleague(_, B), teamplaysinleague(_, B).  [covers 393,0/393,0 pos, 0,0/0,0 neg]

% The best node found: teamplayssport(A, _) :- teamplaysinleague(A, B), athleteplaysforteam(_, A), athleteplaysinleague(_, B), teamplaysinleague(_, B).  [covers 393,0/393,0 pos, 0,0/0,0 neg]

% Expanding node at Level 3 with score = -0,220.
% Will extend: teamplayssport(A, _) :- teamplaysinleague(A, B), athleteplaysforteam(_, A), athleteplaysinleague(_, B), teamplaysinleague(_, B).  [covers 393,0/393,0 pos, 0,0/0,0 neg]
% Path: 2;true,false,true
Comparing variance: 0.22047239475716676 to score=0.0025 #egs=393.0
Comparing variance: NaN to score=0.0025 #egs=0.0
%   Creating a TRUE-branch and FALSE-branch leaves because level = 3 >= 3

% Time for loop #5: 74 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #5, the best clause found is:
%      teamplayssport(A, _) :- teamplaysinleague(A, B), athleteplaysforteam(_, A), athleteplaysinleague(_, B), teamplaysinleague(_, B).  [covers 393,0/393,0 pos, 0,0/0,0 neg]
% This clause covers 393 positive examples, of which 393 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 2 positive seeds: 190 281

% The best node found: null
%     Score = -62,386101 (regressionFit = 62,386099, penalties=1.23E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(A, _).  [covers 60,0/286,0 pos, 0,0/0,0 neg]

% The best node found: teamplayssport(A, _) :- teamalsoknownas(A, _).  [covers 60,0/286,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,218.
% Will extend: teamplayssport(A, _) :- teamalsoknownas(A, _).  [covers 60,0/286,0 pos, 0,0/0,0 neg]
% Path: 2;false
Comparing variance: 0.2222290625065532 to score=0.0025 #egs=60.0
Comparing variance: 0.2170458214272889 to score=0.0025 #egs=226.0
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 226,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,217046)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 2 and with score = -0,217046) into the LAST position (#1) in the search queue.

% Time for loop #6: 2 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #6, the best clause found is:
%      teamplayssport(A, _) :- teamalsoknownas(A, _).  [covers 60,0/286,0 pos, 0,0/0,0 neg]
% This clause covers 60 positive examples, of which 60 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 4 positive seeds: 59 67 96 111

% The best node found: null
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(A, _).  [covers 0,0/226,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(A, B), athleteplaysforteam(_, B).  [covers 0,0/226,0 pos, 0,0/0,0 neg]

% The best node found: teamplayssport(A, _) :- teamalsoknownas(A, B), athleteplaysforteam(_, B).  [covers 0,0/226,0 pos, 0,0/0,0 neg]

***** Warning: Have a bestNode that covers no positive examples.  That shouldn't happen.  Best node = teamplayssport(A, _) :- teamalsoknownas(A, B), athleteplaysforteam(_, B).  [covers 0,0/226,0 pos, 0,0/0,0 neg] *****


% Expanding node at Level 2 with score = -0,217.
% Will extend: teamplayssport(A, _) :- teamalsoknownas(A, B), athleteplaysforteam(_, B).  [covers 0,0/226,0 pos, 0,0/0,0 neg]
% Path: 2;false,false
Comparing variance: NaN to score=0.0025 #egs=0.0
Comparing variance: 0.2170458214272889 to score=0.0025 #egs=226.0
%   Creating a TRUE-branch leaf because wgtedCountTrueBranchPos = 0,0 < 2.1 * minPosCov = 6,3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 226,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,217046)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 3 and with score = -0,217046) into the LAST position (#1) in the search queue.

% Time for loop #7: 3 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #7, the best clause found is:
%      teamplayssport(A, _) :- teamalsoknownas(A, B), athleteplaysforteam(_, B).  [covers 0,0/226,0 pos, 0,0/0,0 neg]
% This clause covers 0 positive examples, of which 0 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 4 positive seeds: 45 50 67 131

% The best node found: null
%     Score = -48,867143 (regressionFit = 48,867141, penalties=1.23E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, _).  [covers 48,0/226,0 pos, 0,0/0,0 neg]
%     Score = -48,947236 (regressionFit = 48,947234, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, B), athleteplaysforteam(_, B).  [covers 41,0/226,0 pos, 0,0/0,0 neg]

% The best node found: teamplayssport(A, _) :- teamplaysagainstteam(A, B), athleteplaysforteam(_, B).  [covers 41,0/226,0 pos, 0,0/0,0 neg]

% Expanding node at Level 3 with score = -0,217.
% Will extend: teamplayssport(A, _) :- teamplaysagainstteam(A, B), athleteplaysforteam(_, B).  [covers 41,0/226,0 pos, 0,0/0,0 neg]
% Path: 2;false,false,false
Comparing variance: 0.23203597345515153 to score=0.0025 #egs=41.0
Comparing variance: 0.2131554544710631 to score=0.0025 #egs=185.0
%   Creating a TRUE-branch and FALSE-branch leaves because level = 3 >= 3

% Time for loop #8: 5 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #8, the best clause found is:
%      teamplayssport(A, _) :- teamplaysagainstteam(A, B), athleteplaysforteam(_, B).  [covers 41,0/226,0 pos, 0,0/0,0 neg]
% This clause covers 41 positive examples, of which 41 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree #3 @ 13:14:26 10/22/21.  [Using 32.310.368 memory cells.]  %%%%%


% FOR teamplayssport(A, B):
%   if ( teamplaysinleague(A, C) )
%   then if ( teamalsoknownas(A, D) )
%   | then return 0.18065920217282425;  // std dev = 6,708, 192,000 (wgt'ed) examples reached here.  /* #neg=120 #pos=72 */
%   | else if ( athleteplaysforteam(E, A), athleteplaysinleague(F, C) )
%   | | then if ( teamplaysinleague(G, C) )
%   | | | then return 0.13318281223928247;  // std dev = 9,308, 393,000 (wgt'ed) examples reached here.  /* #neg=264 #pos=129 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( teamplaysinleague(H, C) )
%   | | | then return 0.15697242034234868;  // std dev = 8,229, 298,000 (wgt'ed) examples reached here.  /* #neg=194 #pos=104 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( teamalsoknownas(A, I) )
%   | then return 0.1422941561140874;  // std dev = 3,652, 60,000 (wgt'ed) examples reached here.  /* #neg=40 #pos=20 */
%   | else if ( teamalsoknownas(A, J), athleteplaysforteam(K, J) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( teamplaysagainstteam(A, L), athleteplaysforteam(M, L) )
%   | | | then return 0.17312627465648073;  // std dev = 3,084, 41,000 (wgt'ed) examples reached here.  /* #neg=26 #pos=15 */
%   | | | else return 0.11716050002523694;  // std dev = 6,280, 185,000 (wgt'ed) examples reached here.  /* #neg=128 #pos=57 */


% Clauses:

teamplayssport(A, B, 0.18065920217282425) :- 
     teamplaysinleague(A, C), 
     teamalsoknownas(A, D), 
     !. // Clause #1.

teamplayssport(A, B, 0.13318281223928247) :- 
     teamplaysinleague(A, C), 
     athleteplaysforteam(D, A), 
     athleteplaysinleague(E, C), 
     teamplaysinleague(F, C), 
     !. // Clause #2.

teamplayssport(A, B, 0) :- 
     teamplaysinleague(A, C), 
     athleteplaysforteam(D, A), 
     athleteplaysinleague(E, C), 
     !. // Clause #3.

teamplayssport(A, B, 0.15697242034234868) :- 
     teamplaysinleague(A, C), 
     teamplaysinleague(D, C), 
     !. // Clause #4.

teamplayssport(A, B, 0) :- 
     teamplaysinleague(A, C), 
     !. // Clause #5.

teamplayssport(A, B, 0.1422941561140874) :- 
     teamalsoknownas(A, C), 
     !. // Clause #6.

teamplayssport(A, B, 0) :- 
     teamalsoknownas(A, C), 
     athleteplaysforteam(D, C), 
     !. // Clause #7.

teamplayssport(A, B, 0.17312627465648073) :- 
     teamplaysagainstteam(A, C), 
     athleteplaysforteam(D, C), 
     !. // Clause #8.

teamplayssport(A, B, 0.11716050002523694) :- !. // Clause #9.


% The flattened versions of these clauses:

flattened_teamplayssport(a, underscore, 0.18065920217282425) :-  /* #neg=120 #pos=72 */ 
   teamplaysinleague(a, underscore),
   teamalsoknownas(a, underscore),
   !. // Flattened version of clause #1.

flattened_teamplayssport(a, underscore, 0.13318281223928247) :-  /* #neg=264 #pos=129 */ 
   teamplaysinleague(a, uniqueVar12),
   athleteplaysforteam(underscore, a),
   athleteplaysinleague(underscore, uniqueVar12),
   teamplaysinleague(underscore, uniqueVar12),
   !. // Flattened version of clause #2.

flattened_teamplayssport(a, underscore, 0) :- 
   teamplaysinleague(a, uniqueVar13),
   athleteplaysforteam(underscore, a),
   athleteplaysinleague(underscore, uniqueVar13),
   !. // Flattened version of clause #3.

flattened_teamplayssport(a, underscore, 0.15697242034234868) :-  /* #neg=194 #pos=104 */ 
   teamplaysinleague(a, uniqueVar14),
   teamplaysinleague(underscore, uniqueVar14),
   !. // Flattened version of clause #4.

flattened_teamplayssport(a, underscore, 0) :- 
   teamplaysinleague(a, underscore),
   !. // Flattened version of clause #5.

flattened_teamplayssport(a, underscore, 0.1422941561140874) :-  /* #neg=40 #pos=20 */ 
   teamalsoknownas(a, underscore),
   !. // Flattened version of clause #6.

flattened_teamplayssport(a, underscore, 0) :- 
   teamalsoknownas(a, uniqueVar15),
   athleteplaysforteam(underscore, uniqueVar15),
   !. // Flattened version of clause #7.

flattened_teamplayssport(a, underscore, 0.17312627465648073) :-  /* #neg=26 #pos=15 */ 
   teamplaysagainstteam(a, uniqueVar16),
   athleteplaysforteam(underscore, uniqueVar16),
   !. // Flattened version of clause #8.

flattened_teamplayssport(underscore, underscore, 0.11716050002523694) :-  /* #neg=128 #pos=57 */ 
   !. // Flattened version of clause #9.


% The unique flattened literals:
%   teamplaysinleague(underscore, uniqueVar14)
%   athleteplaysforteam(underscore, uniqueVar16)
%   teamplaysinleague(underscore, uniqueVar12)
%   teamalsoknownas(a, underscore)
%   teamplaysinleague(a, underscore)
%   teamalsoknownas(a, uniqueVar15)
%   athleteplaysinleague(underscore, uniqueVar12)
%   teamplaysinleague(a, uniqueVar12)
%   teamplaysinleague(a, uniqueVar13)
%   teamplaysinleague(a, uniqueVar14)
%   athleteplaysinleague(underscore, uniqueVar13)
%   athleteplaysforteam(underscore, uniqueVar15)
%   teamplaysagainstteam(a, uniqueVar16)
%   athleteplaysforteam(underscore, a)

% Saving model in: train/models/bRDNs/teamplayssport.model.ckpt
% Time taken to learn 3 trees is 3,883 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.2170458214272889
Set score:0.0025
% Only 1169 out of 1169 converged.
% Kept 397 of the 397 positive examples.
% Kept 823 of the 159.991 negative examples.
% Dataset size: 1.220
Computing probabilities
prob time:987 milliseconds
No hidden examples for : teamplayssport
Time to build dataset: 1 seconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.21968352452840675
Set score:0.0025
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Have these 3 positive seeds: 223 664 816

% The best node found: null

% target           = teamplayssport(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  teamplayssport(_, _).  [covers 1.220,0/1.220,0 pos, 0,0/0,0 neg]
%     Score = -267,987845 (regressionFit = 267,987843, penalties=1.23E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(_, A).  [covers 745,0/1.220,0 pos, 0,0/0,0 neg]

% The best node found: teamplayssport(A, _) :- teamplaysagainstteam(_, A).  [covers 745,0/1.220,0 pos, 0,0/0,0 neg]

% Expanding node at Level 0 with score = 1,797693e+308.
% Will extend: teamplayssport(A, _) :- teamplaysagainstteam(_, A).  [covers 745,0/1.220,0 pos, 0,0/0,0 neg]
% Path: 3;
Comparing variance: 0.219027107362955 to score=0.0025 #egs=745.0
Comparing variance: 0.2206582070013549 to score=0.0025 #egs=475.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 745,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,219027)
%         ILP node to extend: teamplayssport(A, _) :- teamplaysagainstteam(_, A).  [covers 745,0/1.220,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 1 and with score = -0,219027) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 475,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,220658)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 1 and with score = -0,220658) into position #1 in the search queue (new size=2).

% Time for loop #1: 10 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      teamplayssport(A, _) :- teamplaysagainstteam(_, A).  [covers 745,0/1.220,0 pos, 0,0/0,0 neg]
% This clause covers 745 positive examples, of which 745 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 4 positive seeds: 47 267 289 351

% The best node found: null
%     Score = -104,727649 (regressionFit = 104,727648, penalties=1.23E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, _).  [covers 19,0/475,0 pos, 0,0/0,0 neg]

% The best node found: teamplayssport(A, _) :- teamplaysagainstteam(A, _).  [covers 19,0/475,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,221.
% Will extend: teamplayssport(A, _) :- teamplaysagainstteam(A, _).  [covers 19,0/475,0 pos, 0,0/0,0 neg]
% Path: 3;false
Comparing variance: 0.19479233030954018 to score=0.0025 #egs=19.0
Comparing variance: 0.22154954692646212 to score=0.0025 #egs=456.0
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 456,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,221550)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 2 and with score = -0,221550) into position #1 in the search queue (new size=2).

% Time for loop #2: 2 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #2, the best clause found is:
%      teamplayssport(A, _) :- teamplaysagainstteam(A, _).  [covers 19,0/475,0 pos, 0,0/0,0 neg]
% This clause covers 19 positive examples, of which 19 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 3 positive seeds: 174 319 442

% The best node found: null
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, _).  [covers 0,0/456,0 pos, 0,0/0,0 neg]

% The best node found: teamplayssport(A, _) :- teamplaysagainstteam(A, _).  [covers 0,0/456,0 pos, 0,0/0,0 neg]

***** Warning: Have a bestNode that covers no positive examples.  That shouldn't happen.  Best node = teamplayssport(A, _) :- teamplaysagainstteam(A, _).  [covers 0,0/456,0 pos, 0,0/0,0 neg] *****


% Expanding node at Level 2 with score = -0,222.
% Will extend: teamplayssport(A, _) :- teamplaysagainstteam(A, _).  [covers 0,0/456,0 pos, 0,0/0,0 neg]
% Path: 3;false,false
Comparing variance: NaN to score=0.0025 #egs=0.0
Comparing variance: 0.22154954692646212 to score=0.0025 #egs=456.0
%   Creating a TRUE-branch leaf because wgtedCountTrueBranchPos = 0,0 < 2.1 * minPosCov = 6,3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 456,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,221550)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 3 and with score = -0,221550) into position #1 in the search queue (new size=2).

% Time for loop #3: 3 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #3, the best clause found is:
%      teamplayssport(A, _) :- teamplaysagainstteam(A, _).  [covers 0,0/456,0 pos, 0,0/0,0 neg]
% This clause covers 0 positive examples, of which 0 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 1 positive seeds: 145

% The best node found: null
%     Score = -100,931133 (regressionFit = 100,931132, penalties=1.23E-6) for clause:  teamplayssport(A, _) :- teamplaysinleague(A, _).  [covers 273,0/456,0 pos, 0,0/0,0 neg]
%     Score = -101,026559 (regressionFit = 101,026556, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysinleague(A, _), athleteledsportsteam(_, A).  [covers 6,0/456,0 pos, 0,0/0,0 neg]

% The best node found: teamplayssport(A, _) :- teamplaysinleague(A, _), athleteledsportsteam(_, A).  [covers 6,0/456,0 pos, 0,0/0,0 neg]

% Expanding node at Level 3 with score = -0,222.
% Will extend: teamplayssport(A, _) :- teamplaysinleague(A, _), athleteledsportsteam(_, A).  [covers 6,0/456,0 pos, 0,0/0,0 neg]
% Path: 3;false,false,false
Comparing variance: 0.22274123885252872 to score=0.0025 #egs=6.0
Comparing variance: 0.22153357552840353 to score=0.0025 #egs=450.0
%   Creating a TRUE-branch and FALSE-branch leaves because level = 3 >= 3

% Time for loop #4: 4 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #4, the best clause found is:
%      teamplayssport(A, _) :- teamplaysinleague(A, _), athleteledsportsteam(_, A).  [covers 6,0/456,0 pos, 0,0/0,0 neg]
% This clause covers 6 positive examples, of which 6 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'teamplayssport(A, _) :- teamplaysagainstteam(_, A).  [covers 745,0/745,0 pos, 0,0/0,0 neg]'
%     Score = -267,987845 (regressionFit = 267,987843, penalties=1.23E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(_, A).  [covers 745,0/745,0 pos, 0,0/0,0 neg]

% Have these 4 positive seeds: 29 223 333 444

% The best node found: null
%     Score = -163,173748 (regressionFit = 163,173745, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(B, A), teamplaysinleague(B, _).  [covers 729,0/745,0 pos, 0,0/0,0 neg]
%     Score = -163,175197 (regressionFit = 163,175194, penalties=3.35E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(B, A), teamplaysinleague(B, _), athleteledsportsteam(_, B).  [covers 617,0/745,0 pos, 0,0/0,0 neg]

% The best node found: teamplayssport(A, _) :- teamplaysagainstteam(B, A), teamplaysinleague(B, _), athleteledsportsteam(_, B).  [covers 617,0/745,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,219.
% Will extend: teamplayssport(A, _) :- teamplaysagainstteam(B, A), teamplaysinleague(B, _), athleteledsportsteam(_, B).  [covers 617,0/745,0 pos, 0,0/0,0 neg]
% Path: 3;true
Comparing variance: 0.219291995060212 to score=0.0025 #egs=617.0
Comparing variance: 0.217750258519611 to score=0.0025 #egs=128.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 617,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,219292)
%         ILP node to extend: teamplayssport(A, _) :- teamplaysagainstteam(B, A), teamplaysinleague(B, _), athleteledsportsteam(_, B).  [covers 617,0/745,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -0,219292) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 128,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,217750)
%         ILP node to extend: teamplayssport(A, _) :- teamplaysagainstteam(_, A).  [covers 745,0/745,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -0,217750) into the LAST position (#2) in the search queue.

% Time for loop #5: 20 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #5, the best clause found is:
%      teamplayssport(A, _) :- teamplaysagainstteam(B, A), teamplaysinleague(B, _), athleteledsportsteam(_, B).  [covers 617,0/745,0 pos, 0,0/0,0 neg]
% This clause covers 617 positive examples, of which 617 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'teamplayssport(A, _) :- teamplaysagainstteam(B, A), teamplaysinleague(B, _), athleteledsportsteam(_, B).  [covers 617,0/617,0 pos, 0,0/0,0 neg]'
%     Score = -163,175197 (regressionFit = 163,175194, penalties=3.35E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(B, A), teamplaysinleague(B, _), athleteledsportsteam(_, B).  [covers 617,0/617,0 pos, 0,0/0,0 neg]

% Have these 4 positive seeds: 110 156 385 610

% The best node found: null

% Finding mapping for predicates: [bankboughtbank]
% Number of legal mappings: 1
Created a leaf under (teamplayssport(D, E) :- teamplaysinleague(C, D), athleteledsportsteam(E, C))

% Working on expanding this node: 'teamplayssport(A, _) :- teamplaysagainstteam(_, A).  [covers 745,0/128,0 pos, 0,0/0,0 neg]'
%     Score = -267,987845 (regressionFit = 267,987843, penalties=1.23E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(_, A).  [covers 128,0/128,0 pos, 0,0/0,0 neg]

% Have these 4 positive seeds: 2 11 49 73

% The best node found: null
Created a leaf under (teamplayssport(D, E) :- teamplaysinleague(C, D), athleteledsportsteam(E, C))

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree #4 @ 13:14:28 10/22/21.  [Using 32.575.488 memory cells.]  %%%%%


% FOR teamplayssport(A, B):
%   if ( teamplaysagainstteam(C, A) )
%   then if ( teamplaysinleague(C, D), athleteledsportsteam(E, C) )
%   | then return 0.1041565897225886;  // std dev = 0,468, 617,000 (wgt'ed) examples reached here.  /* #neg=417 #pos=200 */
%   | else return 0.10406228651707528;  // std dev = 0,467, 128,000 (wgt'ed) examples reached here.  /* #neg=87 #pos=41 */
%   else if ( teamplaysagainstteam(A, F) )
%   | then return 0.04808383459090473;  // std dev = 1,924, 19,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | else if ( teamplaysagainstteam(A, G) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( teamplaysinleague(A, H), athleteledsportsteam(I, A) )
%   | | | then return 0.11388279318430572;  // std dev = 1,156, 6,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return 0.11638181312365282;  // std dev = 9,984, 450,000 (wgt'ed) examples reached here.  /* #neg=301 #pos=149 */


% Clauses:

teamplayssport(A, B, 0.1041565897225886) :- 
     teamplaysagainstteam(C, A), 
     teamplaysinleague(C, D), 
     athleteledsportsteam(E, C), 
     !. // Clause #1.

teamplayssport(A, B, 0.10406228651707528) :- 
     teamplaysagainstteam(C, A), 
     !. // Clause #2.

teamplayssport(A, B, 0.04808383459090473) :- 
     teamplaysagainstteam(A, C), 
     !. // Clause #3.

teamplayssport(A, B, 0) :- 
     teamplaysagainstteam(A, C), 
     !. // Clause #4.

teamplayssport(A, B, 0.11388279318430572) :- 
     teamplaysinleague(A, C), 
     athleteledsportsteam(D, A), 
     !. // Clause #5.

teamplayssport(A, B, 0.11638181312365282) :- !. // Clause #6.


% The flattened versions of these clauses:

flattened_teamplayssport(a, underscore, 0.1041565897225886) :-  /* #neg=417 #pos=200 */ 
   teamplaysagainstteam(uniqueVar17, a),
   teamplaysinleague(uniqueVar17, underscore),
   athleteledsportsteam(underscore, uniqueVar17),
   !. // Flattened version of clause #1.

flattened_teamplayssport(a, underscore, 0.10406228651707528) :-  /* #neg=87 #pos=41 */ 
   teamplaysagainstteam(underscore, a),
   !. // Flattened version of clause #2.

flattened_teamplayssport(a, underscore, 0.04808383459090473) :-  /* #neg=14 #pos=5 */ 
   teamplaysagainstteam(a, underscore),
   !. // Flattened version of clause #3.

flattened_teamplayssport(a, underscore, 0) :- 
   teamplaysagainstteam(a, underscore),
   !. // Flattened version of clause #4.

flattened_teamplayssport(a, underscore, 0.11388279318430572) :-  /* #neg=4 #pos=2 */ 
   teamplaysinleague(a, underscore),
   athleteledsportsteam(underscore, a),
   !. // Flattened version of clause #5.

flattened_teamplayssport(underscore, underscore, 0.11638181312365282) :-  /* #neg=301 #pos=149 */ 
   !. // Flattened version of clause #6.


% The unique flattened literals:
%   teamplaysagainstteam(a, underscore)
%   teamplaysagainstteam(uniqueVar17, a)
%   athleteledsportsteam(underscore, a)
%   athleteledsportsteam(underscore, uniqueVar17)
%   teamplaysagainstteam(underscore, a)
%   teamplaysinleague(a, underscore)
%   teamplaysinleague(uniqueVar17, underscore)

% Saving model in: train/models/bRDNs/teamplayssport.model.ckpt
% Time taken to learn 4 trees is 5,959 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.2177502585196109
Set score:0.0025
% Only 1220 out of 1220 converged.
% Kept 397 of the 397 positive examples.
% Kept 797 of the 159.991 negative examples.
% Dataset size: 1.194
Computing probabilities
prob time:720 milliseconds
No hidden examples for : teamplayssport
Time to build dataset: 761 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.22202135612004828
Set score:0.0025
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Have these 4 positive seeds: 352 484 643 700

% The best node found: null

% target           = teamplayssport(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  teamplayssport(_, _).  [covers 1.194,0/1.194,0 pos, 0,0/0,0 neg]
%     Score = -264,721239 (regressionFit = 264,721238, penalties=1.23E-6) for clause:  teamplayssport(A, _) :- teamplaysinleague(A, _).  [covers 940,0/1.194,0 pos, 0,0/0,0 neg]

% The best node found: teamplayssport(A, _) :- teamplaysinleague(A, _).  [covers 940,0/1.194,0 pos, 0,0/0,0 neg]

% Expanding node at Level 0 with score = 1,797693e+308.
% Will extend: teamplayssport(A, _) :- teamplaysinleague(A, _).  [covers 940,0/1.194,0 pos, 0,0/0,0 neg]
% Path: 4;
Comparing variance: 0.21915454704901122 to score=0.0025 #egs=940.0
Comparing variance: 0.231165209899407 to score=0.0025 #egs=254.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 940,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,219155)
%         ILP node to extend: teamplayssport(A, _) :- teamplaysinleague(A, _).  [covers 940,0/1.194,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 1 and with score = -0,219155) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 254,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,231165)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 1 and with score = -0,231165) into position #1 in the search queue (new size=2).

% Time for loop #1: 6 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      teamplayssport(A, _) :- teamplaysinleague(A, _).  [covers 940,0/1.194,0 pos, 0,0/0,0 neg]
% This clause covers 940 positive examples, of which 940 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 4 positive seeds: 39 118 134 206

% The best node found: null
%     Score = -58,643778 (regressionFit = 58,643777, penalties=1.23E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, _).  [covers 65,0/254,0 pos, 0,0/0,0 neg]
%     Score = -58,643779 (regressionFit = 58,643777, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, _), teamplaysagainstteam(_, A).  [covers 65,0/254,0 pos, 0,0/0,0 neg]

% The best node found: teamplayssport(A, _) :- teamplaysagainstteam(A, _), teamplaysagainstteam(_, A).  [covers 65,0/254,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,231.
% Will extend: teamplayssport(A, _) :- teamplaysagainstteam(A, _), teamplaysagainstteam(_, A).  [covers 65,0/254,0 pos, 0,0/0,0 neg]
% Path: 4;false
Comparing variance: 0.22425198736078625 to score=0.0025 #egs=65.0
Comparing variance: 0.23316083527267803 to score=0.0025 #egs=189.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 65,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,224252)
%         ILP node to extend: teamplayssport(A, _) :- teamplaysagainstteam(A, _), teamplaysagainstteam(_, A).  [covers 65,0/254,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -0,224252) into position #1 in the search queue (new size=2).
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 189,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,233161)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 2 and with score = -0,233161) into position #1 in the search queue (new size=3).

% Time for loop #2: 3 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #2, the best clause found is:
%      teamplayssport(A, _) :- teamplaysagainstteam(A, _), teamplaysagainstteam(_, A).  [covers 65,0/254,0 pos, 0,0/0,0 neg]
% This clause covers 65 positive examples, of which 65 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 4 positive seeds: 12 20 60 127

% The best node found: null
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, _).  [covers 0,0/189,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, B), athleteledsportsteam(_, B).  [covers 0,0/189,0 pos, 0,0/0,0 neg]

% The best node found: teamplayssport(A, _) :- teamplaysagainstteam(A, B), athleteledsportsteam(_, B).  [covers 0,0/189,0 pos, 0,0/0,0 neg]

***** Warning: Have a bestNode that covers no positive examples.  That shouldn't happen.  Best node = teamplayssport(A, _) :- teamplaysagainstteam(A, B), athleteledsportsteam(_, B).  [covers 0,0/189,0 pos, 0,0/0,0 neg] *****


% Expanding node at Level 2 with score = -0,233.
% Will extend: teamplayssport(A, _) :- teamplaysagainstteam(A, B), athleteledsportsteam(_, B).  [covers 0,0/189,0 pos, 0,0/0,0 neg]
% Path: 4;false,false
Comparing variance: NaN to score=0.0025 #egs=0.0
Comparing variance: 0.23316083527267803 to score=0.0025 #egs=189.0
%   Creating a TRUE-branch leaf because wgtedCountTrueBranchPos = 0,0 < 2.1 * minPosCov = 6,3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 189,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,233161)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 3 and with score = -0,233161) into position #1 in the search queue (new size=3).

% Time for loop #3: 2 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #3, the best clause found is:
%      teamplayssport(A, _) :- teamplaysagainstteam(A, B), athleteledsportsteam(_, B).  [covers 0,0/189,0 pos, 0,0/0,0 neg]
% This clause covers 0 positive examples, of which 0 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 4 positive seeds: 50 134 139 164

% The best node found: null
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, _).  [covers 0,0/189,0 pos, 0,0/0,0 neg]

% The best node found: teamplayssport(A, _) :- teamplaysagainstteam(A, _).  [covers 0,0/189,0 pos, 0,0/0,0 neg]

***** Warning: Have a bestNode that covers no positive examples.  That shouldn't happen.  Best node = teamplayssport(A, _) :- teamplaysagainstteam(A, _).  [covers 0,0/189,0 pos, 0,0/0,0 neg] *****


% Expanding node at Level 3 with score = -0,233.
% Will extend: teamplayssport(A, _) :- teamplaysagainstteam(A, _).  [covers 0,0/189,0 pos, 0,0/0,0 neg]
% Path: 4;false,false,false
Comparing variance: NaN to score=0.0025 #egs=0.0
Comparing variance: 0.23316083527267803 to score=0.0025 #egs=189.0
%   Creating a TRUE-branch and FALSE-branch leaves because level = 3 >= 3

% Time for loop #4: 2 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #4, the best clause found is:
%      teamplayssport(A, _) :- teamplaysagainstteam(A, _).  [covers 0,0/189,0 pos, 0,0/0,0 neg]
% This clause covers 0 positive examples, of which 0 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'teamplayssport(A, _) :- teamplaysagainstteam(A, _), teamplaysagainstteam(_, A).  [covers 65,0/65,0 pos, 0,0/0,0 neg]'
%     Score = -58,643779 (regressionFit = 58,643777, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, _), teamplaysagainstteam(_, A).  [covers 65,0/65,0 pos, 0,0/0,0 neg]

% Have these 4 positive seeds: 8 14 15 48

% The best node found: null
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, _), teamplaysagainstteam(B, A), teamplaysagainstteam(_, B).  [covers 65,0/65,0 pos, 0,0/0,0 neg]
%     Score = -14,575987 (regressionFit = 14,575982, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, _), teamplaysagainstteam(B, A), teamplaysagainstteam(_, B), athleteledsportsteam(_, B).  [covers 35,0/65,0 pos, 0,0/0,0 neg]

% The best node found: teamplayssport(A, _) :- teamplaysagainstteam(A, _), teamplaysagainstteam(B, A), teamplaysagainstteam(_, B), athleteledsportsteam(_, B).  [covers 35,0/65,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,224.
% Will extend: teamplayssport(A, _) :- teamplaysagainstteam(A, _), teamplaysagainstteam(B, A), teamplaysagainstteam(_, B), athleteledsportsteam(_, B).  [covers 35,0/65,0 pos, 0,0/0,0 neg]
% Path: 4;false,true
Comparing variance: 0.22531286935463724 to score=0.0025 #egs=35.0
Comparing variance: 0.2230010621899721 to score=0.0025 #egs=30.0

% Time for loop #5: 9 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #5, the best clause found is:
%      teamplayssport(A, _) :- teamplaysagainstteam(A, _), teamplaysagainstteam(B, A), teamplaysagainstteam(_, B), athleteledsportsteam(_, B).  [covers 35,0/65,0 pos, 0,0/0,0 neg]
% This clause covers 35 positive examples, of which 35 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'teamplayssport(A, _) :- teamplaysinleague(A, _).  [covers 940,0/940,0 pos, 0,0/0,0 neg]'
%     Score = -264,721239 (regressionFit = 264,721238, penalties=1.23E-6) for clause:  teamplayssport(A, _) :- teamplaysinleague(A, _).  [covers 940,0/940,0 pos, 0,0/0,0 neg]

% Have these 3 positive seeds: 158 492 839

% The best node found: null
%     Score = -206,004702 (regressionFit = 206,004700, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysinleague(A, _), teamplaysagainstteam(_, A).  [covers 654,0/940,0 pos, 0,0/0,0 neg]

% The best node found: teamplayssport(A, _) :- teamplaysinleague(A, _), teamplaysagainstteam(_, A).  [covers 654,0/940,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,219.
% Will extend: teamplayssport(A, _) :- teamplaysinleague(A, _), teamplaysagainstteam(_, A).  [covers 654,0/940,0 pos, 0,0/0,0 neg]
% Path: 4;true
Comparing variance: 0.21911029431352178 to score=0.0025 #egs=654.0
Comparing variance: 0.21925373250994223 to score=0.0025 #egs=286.0

% Time for loop #6: 13 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #6, the best clause found is:
%      teamplayssport(A, _) :- teamplaysinleague(A, _), teamplaysagainstteam(_, A).  [covers 654,0/940,0 pos, 0,0/0,0 neg]
% This clause covers 654 positive examples, of which 654 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree #5 @ 13:14:30 10/22/21.  [Using 32.802.080 memory cells.]  %%%%%


% FOR teamplayssport(A, B):
%   if ( teamplaysinleague(A, C) )
%   then if ( teamplaysagainstteam(D, A) )
%   | then return 0.0864182815311815;  // std dev = 11,971, 654,000 (wgt'ed) examples reached here.  /* #neg=442 #pos=212 */
%   | else return 0.08811707848447813;  // std dev = 7,919, 286,000 (wgt'ed) examples reached here.  /* #neg=193 #pos=93 */
%   else if ( teamplaysagainstteam(A, E), teamplaysagainstteam(F, A) )
%   | then if ( teamplaysagainstteam(G, F), athleteledsportsteam(H, F) )
%   | | then return 0.10362288445245824;  // std dev = 2,808, 35,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=12 */
%   | | else return 0.09866616250607615;  // std dev = 2,587, 30,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=10 */
%   | else if ( teamplaysagainstteam(A, I), athleteledsportsteam(J, I) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( teamplaysagainstteam(A, K) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.13996800144014984;  // std dev = 6,638, 189,000 (wgt'ed) examples reached here.  /* #neg=119 #pos=70 */


% Clauses:

teamplayssport(A, B, 0.0864182815311815) :- 
     teamplaysinleague(A, C), 
     teamplaysagainstteam(D, A), 
     !. // Clause #1.

teamplayssport(A, B, 0.08811707848447813) :- 
     teamplaysinleague(A, C), 
     !. // Clause #2.

teamplayssport(A, B, 0.10362288445245824) :- 
     teamplaysagainstteam(A, C), 
     teamplaysagainstteam(D, A), 
     teamplaysagainstteam(E, D), 
     athleteledsportsteam(F, D), 
     !. // Clause #3.

teamplayssport(A, B, 0.09866616250607615) :- 
     teamplaysagainstteam(A, C), 
     teamplaysagainstteam(D, A), 
     !. // Clause #4.

teamplayssport(A, B, 0) :- 
     teamplaysagainstteam(A, C), 
     athleteledsportsteam(D, C), 
     !. // Clause #5.

teamplayssport(A, B, 0) :- 
     teamplaysagainstteam(A, C), 
     !. // Clause #6.

teamplayssport(A, B, 0.13996800144014984) :- !. // Clause #7.


% The flattened versions of these clauses:

flattened_teamplayssport(a, underscore, 0.0864182815311815) :-  /* #neg=442 #pos=212 */ 
   teamplaysinleague(a, underscore),
   teamplaysagainstteam(underscore, a),
   !. // Flattened version of clause #1.

flattened_teamplayssport(a, underscore, 0.08811707848447813) :-  /* #neg=193 #pos=93 */ 
   teamplaysinleague(a, underscore),
   !. // Flattened version of clause #2.

flattened_teamplayssport(a, underscore, 0.10362288445245824) :-  /* #neg=23 #pos=12 */ 
   teamplaysagainstteam(a, underscore),
   teamplaysagainstteam(uniqueVar18, a),
   teamplaysagainstteam(underscore, uniqueVar18),
   athleteledsportsteam(underscore, uniqueVar18),
   !. // Flattened version of clause #3.

flattened_teamplayssport(a, underscore, 0.09866616250607615) :-  /* #neg=20 #pos=10 */ 
   teamplaysagainstteam(a, underscore),
   teamplaysagainstteam(underscore, a),
   !. // Flattened version of clause #4.

flattened_teamplayssport(a, underscore, 0) :- 
   teamplaysagainstteam(a, uniqueVar19),
   athleteledsportsteam(underscore, uniqueVar19),
   !. // Flattened version of clause #5.

flattened_teamplayssport(a, underscore, 0) :- 
   teamplaysagainstteam(a, underscore),
   !. // Flattened version of clause #6.

flattened_teamplayssport(underscore, underscore, 0.13996800144014984) :-  /* #neg=119 #pos=70 */ 
   !. // Flattened version of clause #7.


% The unique flattened literals:
%   teamplaysagainstteam(underscore, uniqueVar18)
%   teamplaysagainstteam(a, uniqueVar19)
%   teamplaysagainstteam(a, underscore)
%   teamplaysagainstteam(underscore, a)
%   teamplaysinleague(a, underscore)
%   teamplaysagainstteam(uniqueVar18, a)
%   athleteledsportsteam(underscore, uniqueVar19)
%   athleteledsportsteam(underscore, uniqueVar18)

% Saving model in: train/models/bRDNs/teamplayssport.model.ckpt
% Time taken to learn 5 trees is 7,795 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.21915454704901124
Set score:0.0025
% Only 1194 out of 1194 converged.
% Kept 397 of the 397 positive examples.
% Kept 789 of the 159.991 negative examples.
% Dataset size: 1.186
Computing probabilities
prob time:872 milliseconds
No hidden examples for : teamplayssport
Time to build dataset: 916 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.22262605549344633
Set score:0.0025
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Have these 2 positive seeds: 323 1119

% The best node found: null

% target           = teamplayssport(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  teamplayssport(_, _).  [covers 1.186,0/1.186,0 pos, 0,0/0,0 neg]
%     Score = -264,031707 (regressionFit = 264,031706, penalties=1.23E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(_, A).  [covers 718,0/1.186,0 pos, 0,0/0,0 neg]
%     Score = -264,019041 (regressionFit = 264,019038, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(B, A), athleteledsportsteam(_, B).  [covers 591,0/1.186,0 pos, 0,0/0,0 neg]

% The best node found: teamplayssport(A, _) :- teamplaysagainstteam(B, A), athleteledsportsteam(_, B).  [covers 591,0/1.186,0 pos, 0,0/0,0 neg]

% Expanding node at Level 0 with score = 1,797693e+308.
% Will extend: teamplayssport(A, _) :- teamplaysagainstteam(B, A), athleteledsportsteam(_, B).  [covers 591,0/1.186,0 pos, 0,0/0,0 neg]
% Path: 5;
Comparing variance: 0.22380363235455758 to score=0.0025 #egs=591.0
Comparing variance: 0.22143040632581792 to score=0.0025 #egs=595.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 591,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,223804)
%         ILP node to extend: teamplayssport(A, _) :- teamplaysagainstteam(B, A), athleteledsportsteam(_, B).  [covers 591,0/1.186,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 1 and with score = -0,223804) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 595,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,221430)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 1 and with score = -0,221430) into the LAST position (#2) in the search queue.

% Time for loop #1: 28 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      teamplayssport(A, _) :- teamplaysagainstteam(B, A), athleteledsportsteam(_, B).  [covers 591,0/1.186,0 pos, 0,0/0,0 neg]
% This clause covers 591 positive examples, of which 591 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'teamplayssport(A, _) :- teamplaysagainstteam(B, A), athleteledsportsteam(_, B).  [covers 591,0/591,0 pos, 0,0/0,0 neg]'
%     Score = -264,019041 (regressionFit = 264,019038, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(B, A), athleteledsportsteam(_, B).  [covers 591,0/591,0 pos, 0,0/0,0 neg]

% Have these 4 positive seeds: 11 209 303 388

% The best node found: null
%     Score = -132,103811 (regressionFit = 132,103808, penalties=3.35E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(B, A), athleteledsportsteam(_, B), teamalsoknownas(B, _).  [covers 400,0/591,0 pos, 0,0/0,0 neg]
%     Score = -132,075730 (regressionFit = 132,075726, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(B, A), athleteledsportsteam(_, B), teamalsoknownas(B, C), teamplaysagainstteam(_, C).  [covers 387,0/591,0 pos, 0,0/0,0 neg]

% The best node found: teamplayssport(A, _) :- teamplaysagainstteam(B, A), athleteledsportsteam(_, B), teamalsoknownas(B, C), teamplaysagainstteam(_, C).  [covers 387,0/591,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,224.
% Will extend: teamplayssport(A, _) :- teamplaysagainstteam(B, A), athleteledsportsteam(_, B), teamalsoknownas(B, C), teamplaysagainstteam(_, C).  [covers 387,0/591,0 pos, 0,0/0,0 neg]
% Path: 5;true
Comparing variance: 0.22773528330473264 to score=0.0025 #egs=387.0
Comparing variance: 0.2154027993290547 to score=0.0025 #egs=204.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 387,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,227735)
%         ILP node to extend: teamplayssport(A, _) :- teamplaysagainstteam(B, A), athleteledsportsteam(_, B), teamalsoknownas(B, C), teamplaysagainstteam(_, C).  [covers 387,0/591,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -0,227735) into position #1 in the search queue (new size=2).

% Time for loop #2: 66 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #2, the best clause found is:
%      teamplayssport(A, _) :- teamplaysagainstteam(B, A), athleteledsportsteam(_, B), teamalsoknownas(B, C), teamplaysagainstteam(_, C).  [covers 387,0/591,0 pos, 0,0/0,0 neg]
% This clause covers 387 positive examples, of which 387 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'teamplayssport(A, _) :- teamplaysagainstteam(B, A), athleteledsportsteam(_, B), teamalsoknownas(B, C), teamplaysagainstteam(_, C).  [covers 387,0/387,0 pos, 0,0/0,0 neg]'
%     Score = -132,075730 (regressionFit = 132,075726, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(B, A), athleteledsportsteam(_, B), teamalsoknownas(B, C), teamplaysagainstteam(_, C).  [covers 387,0/387,0 pos, 0,0/0,0 neg]

% Have these 4 positive seeds: 5 41 207 216

% The best node found: null
%     Score = -Infinity (regressionFit = Infinity, penalties=5.060000000000001E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(B, A), athleteledsportsteam(_, B), teamalsoknownas(B, C), teamplaysagainstteam(D, C), teamalsoknownas(D, D).  [covers 0,0/387,0 pos, 0,0/0,0 neg]

% The best node found: teamplayssport(A, _) :- teamplaysagainstteam(B, A), athleteledsportsteam(_, B), teamalsoknownas(B, C), teamplaysagainstteam(D, C), teamalsoknownas(D, D).  [covers 0,0/387,0 pos, 0,0/0,0 neg]

***** Warning: Have a bestNode that covers no positive examples.  That shouldn't happen.  Best node = teamplayssport(A, _) :- teamplaysagainstteam(B, A), athleteledsportsteam(_, B), teamalsoknownas(B, C), teamplaysagainstteam(D, C), teamalsoknownas(D, D).  [covers 0,0/387,0 pos, 0,0/0,0 neg] *****


% Expanding node at Level 2 with score = -0,228.
% Will extend: teamplayssport(A, _) :- teamplaysagainstteam(B, A), athleteledsportsteam(_, B), teamalsoknownas(B, C), teamplaysagainstteam(D, C), teamalsoknownas(D, D).  [covers 0,0/387,0 pos, 0,0/0,0 neg]
% Path: 5;true,true
Comparing variance: NaN to score=0.0025 #egs=0.0
Comparing variance: 0.22773528330473264 to score=0.0025 #egs=387.0
%   Creating a TRUE-branch leaf because wgtedCountTrueBranchPos = 0,0 < 2.1 * minPosCov = 6,3

% Time for loop #3: 316 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #3, the best clause found is:
%      teamplayssport(A, _) :- teamplaysagainstteam(B, A), athleteledsportsteam(_, B), teamalsoknownas(B, C), teamplaysagainstteam(D, C), teamalsoknownas(D, D).  [covers 0,0/387,0 pos, 0,0/0,0 neg]
% This clause covers 0 positive examples, of which 0 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 4 positive seeds: 63 202 224 437

% The best node found: null
%     Score = -131,748008 (regressionFit = 131,748007, penalties=1.23E-6) for clause:  teamplayssport(A, _) :- athleteplaysforteam(_, A).  [covers 66,0/595,0 pos, 0,0/0,0 neg]

% The best node found: teamplayssport(A, _) :- athleteplaysforteam(_, A).  [covers 66,0/595,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,221.
% Will extend: teamplayssport(A, _) :- athleteplaysforteam(_, A).  [covers 66,0/595,0 pos, 0,0/0,0 neg]
% Path: 5;false
Comparing variance: 0.216492191210422 to score=0.0025 #egs=66.0
Comparing variance: 0.22204068460574883 to score=0.0025 #egs=529.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 66,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,216492)
%         ILP node to extend: teamplayssport(A, _) :- athleteplaysforteam(_, A).  [covers 66,0/595,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -0,216492) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 529,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,222041)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 2 and with score = -0,222041) into position #1 in the search queue (new size=2).

% Time for loop #4: 3 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #4, the best clause found is:
%      teamplayssport(A, _) :- athleteplaysforteam(_, A).  [covers 66,0/595,0 pos, 0,0/0,0 neg]
% This clause covers 66 positive examples, of which 66 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 4 positive seeds: 42 59 146 283

% The best node found: null
%     Score = -Infinity (regressionFit = Infinity, penalties=1.4400000000000002E-6) for clause:  teamplayssport(_, _) :- athleteledsportsteam(_, _).  [covers 529,0/529,0 pos, 0,0/0,0 neg]

% The best node found: teamplayssport(_, _) :- athleteledsportsteam(_, _).  [covers 529,0/529,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,222.
% Will extend: teamplayssport(_, _) :- athleteledsportsteam(_, _).  [covers 529,0/529,0 pos, 0,0/0,0 neg]
% Path: 5;false,false
Comparing variance: 0.22204068460574883 to score=0.0025 #egs=529.0
Comparing variance: NaN to score=0.0025 #egs=0.0
%   Creating a FALSE-branch leaf because wgtedCountFalseBranchPos = 0,0 < 2.1 * minPosCov = 6,3

% Time for loop #5: 118 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #5, the best clause found is:
%      teamplayssport(_, _) :- athleteledsportsteam(_, _).  [covers 529,0/529,0 pos, 0,0/0,0 neg]
% This clause covers 529 positive examples, of which 529 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'teamplayssport(A, _) :- athleteplaysforteam(_, A).  [covers 66,0/66,0 pos, 0,0/0,0 neg]'
%     Score = -131,748008 (regressionFit = 131,748007, penalties=1.23E-6) for clause:  teamplayssport(A, _) :- athleteplaysforteam(_, A).  [covers 66,0/66,0 pos, 0,0/0,0 neg]

% Have these 2 positive seeds: 43 54

% The best node found: null
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  teamplayssport(A, _) :- athleteplaysforteam(B, A), athleteplaysforteam(B, _).  [covers 66,0/66,0 pos, 0,0/0,0 neg]

% The best node found: teamplayssport(A, _) :- athleteplaysforteam(B, A), athleteplaysforteam(B, _).  [covers 66,0/66,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,216.
% Will extend: teamplayssport(A, _) :- athleteplaysforteam(B, A), athleteplaysforteam(B, _).  [covers 66,0/66,0 pos, 0,0/0,0 neg]
% Path: 5;false,true
Comparing variance: 0.216492191210422 to score=0.0025 #egs=66.0
Comparing variance: NaN to score=0.0025 #egs=0.0
%   Creating a FALSE-branch leaf because wgtedCountFalseBranchPos = 0,0 < 2.1 * minPosCov = 6,3

% Time for loop #6: 2 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #6, the best clause found is:
%      teamplayssport(A, _) :- athleteplaysforteam(B, A), athleteplaysforteam(B, _).  [covers 66,0/66,0 pos, 0,0/0,0 neg]
% This clause covers 66 positive examples, of which 66 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree #6 @ 13:14:32 10/22/21.  [Using 32.972.032 memory cells.]  %%%%%


% FOR teamplayssport(A, B):
%   if ( teamplaysagainstteam(C, A), athleteledsportsteam(D, C) )
%   then if ( teamalsoknownas(C, E), teamplaysagainstteam(F, E) )
%   | then if ( teamalsoknownas(F, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.0973230676719184;  // std dev = 9,388, 387,000 (wgt'ed) examples reached here.  /* #neg=251 #pos=136 */
%   | else return 0.05938950680272647;  // std dev = 6,629, 204,000 (wgt'ed) examples reached here.  /* #neg=140 #pos=64 */
%   else if ( athleteplaysforteam(G, A) )
%   | then if ( athleteplaysforteam(G, H) )
%   | | then return 0.07056101177176896;  // std dev = 3,780, 66,000 (wgt'ed) examples reached here.  /* #neg=45 #pos=21 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( athleteledsportsteam(I, J) )
%   | | then return 0.07781180274987723;  // std dev = 10,838, 529,000 (wgt'ed) examples reached here.  /* #neg=353 #pos=176 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


% Clauses:

teamplayssport(A, B, 0) :- 
     teamplaysagainstteam(C, A), 
     athleteledsportsteam(D, C), 
     teamalsoknownas(C, E), 
     teamplaysagainstteam(F, E), 
     teamalsoknownas(F, F), 
     !. // Clause #1.

teamplayssport(A, B, 0.0973230676719184) :- 
     teamplaysagainstteam(C, A), 
     athleteledsportsteam(D, C), 
     teamalsoknownas(C, E), 
     teamplaysagainstteam(F, E), 
     !. // Clause #2.

teamplayssport(A, B, 0.05938950680272647) :- 
     teamplaysagainstteam(C, A), 
     athleteledsportsteam(D, C), 
     !. // Clause #3.

teamplayssport(A, B, 0.07056101177176896) :- 
     athleteplaysforteam(C, A), 
     athleteplaysforteam(C, D), 
     !. // Clause #4.

teamplayssport(A, B, 0) :- 
     athleteplaysforteam(C, A), 
     !. // Clause #5.

teamplayssport(A, B, 0.07781180274987723) :- 
     athleteledsportsteam(C, D), 
     !. // Clause #6.

teamplayssport(A, B, 0) :- !. // Clause #7.


% The flattened versions of these clauses:

flattened_teamplayssport(a, underscore, 0) :- 
   teamplaysagainstteam(uniqueVar20, a),
   athleteledsportsteam(underscore, uniqueVar20),
   teamalsoknownas(uniqueVar20, uniqueVar21),
   teamplaysagainstteam(uniqueVar22, uniqueVar21),
   teamalsoknownas(uniqueVar22, uniqueVar22),
   !. // Flattened version of clause #1.

flattened_teamplayssport(a, underscore, 0.0973230676719184) :-  /* #neg=251 #pos=136 */ 
   teamplaysagainstteam(uniqueVar23, a),
   athleteledsportsteam(underscore, uniqueVar23),
   teamalsoknownas(uniqueVar23, uniqueVar24),
   teamplaysagainstteam(underscore, uniqueVar24),
   !. // Flattened version of clause #2.

flattened_teamplayssport(a, underscore, 0.05938950680272647) :-  /* #neg=140 #pos=64 */ 
   teamplaysagainstteam(uniqueVar25, a),
   athleteledsportsteam(underscore, uniqueVar25),
   !. // Flattened version of clause #3.

flattened_teamplayssport(a, underscore, 0.07056101177176896) :-  /* #neg=45 #pos=21 */ 
   athleteplaysforteam(uniqueVar26, a),
   athleteplaysforteam(uniqueVar26, underscore),
   !. // Flattened version of clause #4.

flattened_teamplayssport(a, underscore, 0) :- 
   athleteplaysforteam(underscore, a),
   !. // Flattened version of clause #5.

flattened_teamplayssport(underscore, underscore, 0.07781180274987723) :-  /* #neg=353 #pos=176 */ 
   athleteledsportsteam(underscore, underscore),
   !. // Flattened version of clause #6.

flattened_teamplayssport(underscore, underscore, 0) :- 
   !. // Flattened version of clause #7.


% The unique flattened literals:
%   teamplaysagainstteam(uniqueVar25, a)
%   athleteledsportsteam(underscore, underscore)
%   teamplaysagainstteam(underscore, uniqueVar24)
%   teamplaysagainstteam(uniqueVar22, uniqueVar21)
%   teamalsoknownas(uniqueVar23, uniqueVar24)
%   teamplaysagainstteam(uniqueVar23, a)
%   teamalsoknownas(uniqueVar22, uniqueVar22)
%   athleteledsportsteam(underscore, uniqueVar25)
%   athleteplaysforteam(uniqueVar26, a)
%   athleteledsportsteam(underscore, uniqueVar20)
%   athleteplaysforteam(uniqueVar26, underscore)
%   teamplaysagainstteam(uniqueVar20, a)
%   athleteplaysforteam(underscore, a)
%   teamalsoknownas(uniqueVar20, uniqueVar21)
%   athleteledsportsteam(underscore, uniqueVar23)

% Saving model in: train/models/bRDNs/teamplayssport.model.ckpt
% Time taken to learn 6 trees is 10,083 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.216492191210422
Set score:0.0025
% Only 1186 out of 1186 converged.
% Kept 397 of the 397 positive examples.
% Kept 724 of the 159.991 negative examples.
% Dataset size: 1.121
Computing probabilities
prob time:1 seconds
No hidden examples for : teamplayssport
Time to build dataset: 1 seconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.22864482353998136
Set score:0.0025
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Have these 3 positive seeds: 284 439 719

% The best node found: null

% target           = teamplayssport(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  teamplayssport(_, _).  [covers 1.121,0/1.121,0 pos, 0,0/0,0 neg]
%     Score = -256,097067 (regressionFit = 256,097066, penalties=1.23E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(_, A).  [covers 701,0/1.121,0 pos, 0,0/0,0 neg]
%     Score = -256,104913 (regressionFit = 256,104911, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(B, A), athleteplaysforteam(_, B).  [covers 675,0/1.121,0 pos, 0,0/0,0 neg]

% The best node found: teamplayssport(A, _) :- teamplaysagainstteam(B, A), athleteplaysforteam(_, B).  [covers 675,0/1.121,0 pos, 0,0/0,0 neg]

% Expanding node at Level 0 with score = 1,797693e+308.
% Will extend: teamplayssport(A, _) :- teamplaysagainstteam(B, A), athleteplaysforteam(_, B).  [covers 675,0/1.121,0 pos, 0,0/0,0 neg]
% Path: 6;
Comparing variance: 0.22563444870632737 to score=0.0025 #egs=675.0
Comparing variance: 0.23273914326838982 to score=0.0025 #egs=446.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 675,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,225634)
%         ILP node to extend: teamplayssport(A, _) :- teamplaysagainstteam(B, A), athleteplaysforteam(_, B).  [covers 675,0/1.121,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 1 and with score = -0,225634) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 446,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,232739)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 1 and with score = -0,232739) into position #1 in the search queue (new size=2).

% Time for loop #1: 18 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      teamplayssport(A, _) :- teamplaysagainstteam(B, A), athleteplaysforteam(_, B).  [covers 675,0/1.121,0 pos, 0,0/0,0 neg]
% This clause covers 675 positive examples, of which 675 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 2 positive seeds: 40 202

% The best node found: null

% Finding mapping for predicates: [bankchiefexecutiveceo]
% Number of legal mappings: 1
%     Score = -Infinity (regressionFit = Infinity, penalties=1.4400000000000002E-6) for clause:  teamplayssport(_, _) :- athleteledsportsteam(_, _).  [covers 446,0/446,0 pos, 0,0/0,0 neg]

% The best node found: teamplayssport(_, _) :- athleteledsportsteam(_, _).  [covers 446,0/446,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,233.
% Will extend: teamplayssport(_, _) :- athleteledsportsteam(_, _).  [covers 446,0/446,0 pos, 0,0/0,0 neg]
% Path: 6;false
Comparing variance: 0.23273914326838982 to score=0.0025 #egs=446.0
Comparing variance: NaN to score=0.0025 #egs=0.0
%   Creating a FALSE-branch leaf because wgtedCountFalseBranchPos = 0,0 < 2.1 * minPosCov = 6,3

% Time for loop #2: 105 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #2, the best clause found is:
%      teamplayssport(_, _) :- athleteledsportsteam(_, _).  [covers 446,0/446,0 pos, 0,0/0,0 neg]
% This clause covers 446 positive examples, of which 446 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'teamplayssport(A, _) :- teamplaysagainstteam(B, A), athleteplaysforteam(_, B).  [covers 675,0/675,0 pos, 0,0/0,0 neg]'
%     Score = -256,104913 (regressionFit = 256,104911, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(B, A), athleteplaysforteam(_, B).  [covers 675,0/675,0 pos, 0,0/0,0 neg]

% Have these 4 positive seeds: 252 343 391 559

% The best node found: null
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(B, A), athleteplaysforteam(_, B), teamplaysagainstteam(_, B).  [covers 675,0/675,0 pos, 0,0/0,0 neg]
%     Score = -152,270221 (regressionFit = 152,270216, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(B, A), athleteplaysforteam(_, B), teamplaysagainstteam(_, B), teamplaysagainstteam(A, _).  [covers 623,0/675,0 pos, 0,0/0,0 neg]

% The best node found: teamplayssport(A, _) :- teamplaysagainstteam(B, A), athleteplaysforteam(_, B), teamplaysagainstteam(_, B), teamplaysagainstteam(A, _).  [covers 623,0/675,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,226.
% Will extend: teamplayssport(A, _) :- teamplaysagainstteam(B, A), athleteplaysforteam(_, B), teamplaysagainstteam(_, B), teamplaysagainstteam(A, _).  [covers 623,0/675,0 pos, 0,0/0,0 neg]
% Path: 6;true
Comparing variance: 0.2250669742237526 to score=0.0025 #egs=623.0
Comparing variance: 0.2317979101573622 to score=0.0025 #egs=52.0
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 52,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,231798)
%         ILP node to extend: teamplayssport(A, _) :- teamplaysagainstteam(B, A), athleteplaysforteam(_, B).  [covers 675,0/675,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -0,231798) into the LAST position (#1) in the search queue.

% Time for loop #3: 40 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #3, the best clause found is:
%      teamplayssport(A, _) :- teamplaysagainstteam(B, A), athleteplaysforteam(_, B), teamplaysagainstteam(_, B), teamplaysagainstteam(A, _).  [covers 623,0/675,0 pos, 0,0/0,0 neg]
% This clause covers 623 positive examples, of which 623 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'teamplayssport(A, _) :- teamplaysagainstteam(B, A), athleteplaysforteam(_, B).  [covers 675,0/52,0 pos, 0,0/0,0 neg]'
%     Score = -256,104913 (regressionFit = 256,104911, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(B, A), athleteplaysforteam(_, B).  [covers 52,0/52,0 pos, 0,0/0,0 neg]

% Have these 4 positive seeds: 3 11 20 42

% The best node found: null
%     Score = -11,999372 (regressionFit = 11,999368, penalties=3.35E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(B, A), athleteplaysforteam(_, B), athleteledsportsteam(_, A).  [covers 4,0/52,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.4600000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(B, A), athleteplaysforteam(_, B), athleteledsportsteam(_, A), teamalsoknownas(B, _).  [covers 0,0/52,0 pos, 0,0/0,0 neg]

% The best node found: teamplayssport(A, _) :- teamplaysagainstteam(B, A), athleteplaysforteam(_, B), athleteledsportsteam(_, A), teamalsoknownas(B, _).  [covers 0,0/52,0 pos, 0,0/0,0 neg]

***** Warning: Have a bestNode that covers no positive examples.  That shouldn't happen.  Best node = teamplayssport(A, _) :- teamplaysagainstteam(B, A), athleteplaysforteam(_, B), athleteledsportsteam(_, A), teamalsoknownas(B, _).  [covers 0,0/52,0 pos, 0,0/0,0 neg] *****


% Expanding node at Level 2 with score = -0,232.
% Will extend: teamplayssport(A, _) :- teamplaysagainstteam(B, A), athleteplaysforteam(_, B), athleteledsportsteam(_, A), teamalsoknownas(B, _).  [covers 0,0/52,0 pos, 0,0/0,0 neg]
% Path: 6;true,false
Comparing variance: NaN to score=0.0025 #egs=0.0
Comparing variance: 0.23179791015736217 to score=0.0025 #egs=52.0
%   Creating a TRUE-branch leaf because wgtedCountTrueBranchPos = 0,0 < 2.1 * minPosCov = 6,3

% Time for loop #4: 2 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #4, the best clause found is:
%      teamplayssport(A, _) :- teamplaysagainstteam(B, A), athleteplaysforteam(_, B), athleteledsportsteam(_, A), teamalsoknownas(B, _).  [covers 0,0/52,0 pos, 0,0/0,0 neg]
% This clause covers 0 positive examples, of which 0 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree #7 @ 13:14:35 10/22/21.  [Using 33.079.552 memory cells.]  %%%%%


% FOR teamplayssport(A, B):
%   if ( teamplaysagainstteam(C, A), athleteplaysforteam(D, C) )
%   then if ( teamplaysagainstteam(E, C), teamplaysagainstteam(A, F) )
%   | then return 0.07131959348866533;  // std dev = 11,841, 623,000 (wgt'ed) examples reached here.  /* #neg=410 #pos=213 */
%   | else if ( athleteledsportsteam(G, A), teamalsoknownas(C, H) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.09755597340236112;  // std dev = 3,472, 52,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=19 */
%   else if ( athleteledsportsteam(I, J) )
%   | then return 0.10103249485838253;  // std dev = 10,188, 446,000 (wgt'ed) examples reached here.  /* #neg=281 #pos=165 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


% Clauses:

teamplayssport(A, B, 0.07131959348866533) :- 
     teamplaysagainstteam(C, A), 
     athleteplaysforteam(D, C), 
     teamplaysagainstteam(E, C), 
     teamplaysagainstteam(A, F), 
     !. // Clause #1.

teamplayssport(A, B, 0) :- 
     teamplaysagainstteam(C, A), 
     athleteplaysforteam(D, C), 
     athleteledsportsteam(E, A), 
     teamalsoknownas(C, F), 
     !. // Clause #2.

teamplayssport(A, B, 0.09755597340236112) :- 
     teamplaysagainstteam(C, A), 
     athleteplaysforteam(D, C), 
     !. // Clause #3.

teamplayssport(A, B, 0.10103249485838253) :- 
     athleteledsportsteam(C, D), 
     !. // Clause #4.

teamplayssport(A, B, 0) :- !. // Clause #5.


% The flattened versions of these clauses:

flattened_teamplayssport(a, underscore, 0.07131959348866533) :-  /* #neg=410 #pos=213 */ 
   teamplaysagainstteam(uniqueVar27, a),
   athleteplaysforteam(underscore, uniqueVar27),
   teamplaysagainstteam(underscore, uniqueVar27),
   teamplaysagainstteam(a, underscore),
   !. // Flattened version of clause #1.

flattened_teamplayssport(a, underscore, 0) :- 
   teamplaysagainstteam(uniqueVar28, a),
   athleteplaysforteam(underscore, uniqueVar28),
   athleteledsportsteam(underscore, a),
   teamalsoknownas(uniqueVar28, underscore),
   !. // Flattened version of clause #2.

flattened_teamplayssport(a, underscore, 0.09755597340236112) :-  /* #neg=33 #pos=19 */ 
   teamplaysagainstteam(uniqueVar29, a),
   athleteplaysforteam(underscore, uniqueVar29),
   !. // Flattened version of clause #3.

flattened_teamplayssport(underscore, underscore, 0.10103249485838253) :-  /* #neg=281 #pos=165 */ 
   athleteledsportsteam(underscore, underscore),
   !. // Flattened version of clause #4.

flattened_teamplayssport(underscore, underscore, 0) :- 
   !. // Flattened version of clause #5.


% The unique flattened literals:
%   teamalsoknownas(uniqueVar28, underscore)
%   teamplaysagainstteam(a, underscore)
%   teamplaysagainstteam(uniqueVar28, a)
%   athleteplaysforteam(underscore, uniqueVar27)
%   athleteledsportsteam(underscore, a)
%   athleteplaysforteam(underscore, uniqueVar29)
%   athleteledsportsteam(underscore, underscore)
%   teamplaysagainstteam(underscore, uniqueVar27)
%   teamplaysagainstteam(uniqueVar29, a)
%   teamplaysagainstteam(uniqueVar27, a)
%   athleteplaysforteam(underscore, uniqueVar28)

% Saving model in: train/models/bRDNs/teamplayssport.model.ckpt
% Time taken to learn 7 trees is 12,956 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.2317979101573622
Set score:0.0025
% Only 1121 out of 1121 converged.
% Kept 397 of the 397 positive examples.
% Kept 756 of the 159.991 negative examples.
% Dataset size: 1.153
Computing probabilities
prob time:2 seconds
No hidden examples for : teamplayssport
Time to build dataset: 2 seconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.22565562250175675
Set score:0.0025
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Have these 4 positive seeds: 8 27 684 834

% The best node found: null

% target           = teamplayssport(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  teamplayssport(_, _).  [covers 1.153,0/1.153,0 pos, 0,0/0,0 neg]
%     Score = -260,180864 (regressionFit = 260,180862, penalties=1.23E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, _).  [covers 655,0/1.153,0 pos, 0,0/0,0 neg]
%     Score = -260,178285 (regressionFit = 260,178283, penalties=2.1400000000000003E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, B), teamplaysagainstteam(B, _).  [covers 647,0/1.153,0 pos, 0,0/0,0 neg]

% The best node found: teamplayssport(A, _) :- teamplaysagainstteam(A, B), teamplaysagainstteam(B, _).  [covers 647,0/1.153,0 pos, 0,0/0,0 neg]

% Expanding node at Level 0 with score = 1,797693e+308.
% Will extend: teamplayssport(A, _) :- teamplaysagainstteam(A, B), teamplaysagainstteam(B, _).  [covers 647,0/1.153,0 pos, 0,0/0,0 neg]
% Path: 7;
Comparing variance: 0.225288840129952 to score=0.0025 #egs=647.0
Comparing variance: 0.22611937474400193 to score=0.0025 #egs=506.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 647,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,225289)
%         ILP node to extend: teamplayssport(A, _) :- teamplaysagainstteam(A, B), teamplaysagainstteam(B, _).  [covers 647,0/1.153,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 1 and with score = -0,225289) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 506,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,226119)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 1 and with score = -0,226119) into position #1 in the search queue (new size=2).

% Time for loop #1: 23 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      teamplayssport(A, _) :- teamplaysagainstteam(A, B), teamplaysagainstteam(B, _).  [covers 647,0/1.153,0 pos, 0,0/0,0 neg]
% This clause covers 647 positive examples, of which 647 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 4 positive seeds: 184 187 234 302

% The best node found: null
%     Score = -114,346898 (regressionFit = 114,346897, penalties=1.23E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(_, A).  [covers 73,0/506,0 pos, 0,0/0,0 neg]
%     Score = -114,415251 (regressionFit = 114,415248, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(_, A), athleteplaysforteam(_, A).  [covers 24,0/506,0 pos, 0,0/0,0 neg]

% The best node found: teamplayssport(A, _) :- teamplaysagainstteam(_, A), athleteplaysforteam(_, A).  [covers 24,0/506,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,226.
% Will extend: teamplayssport(A, _) :- teamplaysagainstteam(_, A), athleteplaysforteam(_, A).  [covers 24,0/506,0 pos, 0,0/0,0 neg]
% Path: 7;false
Comparing variance: 0.22177567488936992 to score=0.0025 #egs=24.0
Comparing variance: 0.22633326200700585 to score=0.0025 #egs=482.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 24,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,221776)
%         ILP node to extend: teamplayssport(A, _) :- teamplaysagainstteam(_, A), athleteplaysforteam(_, A).  [covers 24,0/506,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -0,221776) into the LAST position (#2) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 482,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,226333)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 2 and with score = -0,226333) into position #1 in the search queue (new size=3).

% Time for loop #2: 5 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #2, the best clause found is:
%      teamplayssport(A, _) :- teamplaysagainstteam(_, A), athleteplaysforteam(_, A).  [covers 24,0/506,0 pos, 0,0/0,0 neg]
% This clause covers 24 positive examples, of which 24 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 4 positive seeds: 25 35 197 253

% The best node found: null
%     Score = -109,027602 (regressionFit = 109,027601, penalties=1.23E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, _).  [covers 8,0/482,0 pos, 0,0/0,0 neg]

% The best node found: teamplayssport(A, _) :- teamplaysagainstteam(A, _).  [covers 8,0/482,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,226.
% Will extend: teamplayssport(A, _) :- teamplaysagainstteam(A, _).  [covers 8,0/482,0 pos, 0,0/0,0 neg]
% Path: 7;false,false
Comparing variance: 0.18685498904865136 to score=0.0025 #egs=8.0
Comparing variance: 0.22686236424702555 to score=0.0025 #egs=474.0
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 474,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,226862)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 3 and with score = -0,226862) into position #1 in the search queue (new size=3).

% Time for loop #3: 4 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #3, the best clause found is:
%      teamplayssport(A, _) :- teamplaysagainstteam(A, _).  [covers 8,0/482,0 pos, 0,0/0,0 neg]
% This clause covers 8 positive examples, of which 8 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 4 positive seeds: 43 59 75 417

% The best node found: null
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, _).  [covers 0,0/474,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, _), athleteledsportsteam(_, A).  [covers 0,0/474,0 pos, 0,0/0,0 neg]

% The best node found: teamplayssport(A, _) :- teamplaysagainstteam(A, _), athleteledsportsteam(_, A).  [covers 0,0/474,0 pos, 0,0/0,0 neg]

***** Warning: Have a bestNode that covers no positive examples.  That shouldn't happen.  Best node = teamplayssport(A, _) :- teamplaysagainstteam(A, _), athleteledsportsteam(_, A).  [covers 0,0/474,0 pos, 0,0/0,0 neg] *****


% Expanding node at Level 3 with score = -0,227.
% Will extend: teamplayssport(A, _) :- teamplaysagainstteam(A, _), athleteledsportsteam(_, A).  [covers 0,0/474,0 pos, 0,0/0,0 neg]
% Path: 7;false,false,false
Comparing variance: NaN to score=0.0025 #egs=0.0
Comparing variance: 0.22686236424702555 to score=0.0025 #egs=474.0
%   Creating a TRUE-branch and FALSE-branch leaves because level = 3 >= 3

% Time for loop #4: 3 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #4, the best clause found is:
%      teamplayssport(A, _) :- teamplaysagainstteam(A, _), athleteledsportsteam(_, A).  [covers 0,0/474,0 pos, 0,0/0,0 neg]
% This clause covers 0 positive examples, of which 0 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'teamplayssport(A, _) :- teamplaysagainstteam(A, B), teamplaysagainstteam(B, _).  [covers 647,0/647,0 pos, 0,0/0,0 neg]'
%     Score = -260,178285 (regressionFit = 260,178283, penalties=2.1400000000000003E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, B), teamplaysagainstteam(B, _).  [covers 647,0/647,0 pos, 0,0/0,0 neg]

% Have these 3 positive seeds: 344 478 479

% The best node found: null
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, B), teamplaysagainstteam(B, C), teamplaysagainstteam(C, _).  [covers 647,0/647,0 pos, 0,0/0,0 neg]
%     Score = -145,601065 (regressionFit = 145,601061, penalties=4.16E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, B), teamplaysagainstteam(B, C), teamplaysagainstteam(C, _), teamplaysinleague(B, _).  [covers 636,0/647,0 pos, 0,0/0,0 neg]

% The best node found: teamplayssport(A, _) :- teamplaysagainstteam(A, B), teamplaysagainstteam(B, C), teamplaysagainstteam(C, _), teamplaysinleague(B, _).  [covers 636,0/647,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,225.
% Will extend: teamplayssport(A, _) :- teamplaysagainstteam(A, B), teamplaysagainstteam(B, C), teamplaysagainstteam(C, _), teamplaysinleague(B, _).  [covers 636,0/647,0 pos, 0,0/0,0 neg]
% Path: 7;true
Comparing variance: 0.22465783055485983 to score=0.0025 #egs=636.0
Comparing variance: 0.24715282730027816 to score=0.0025 #egs=11.0
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 11,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,247153)
%         ILP node to extend: teamplayssport(A, _) :- teamplaysagainstteam(A, B), teamplaysagainstteam(B, _).  [covers 647,0/647,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -0,247153) into position #1 in the search queue (new size=2).

% Time for loop #5: 45 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #5, the best clause found is:
%      teamplayssport(A, _) :- teamplaysagainstteam(A, B), teamplaysagainstteam(B, C), teamplaysagainstteam(C, _), teamplaysinleague(B, _).  [covers 636,0/647,0 pos, 0,0/0,0 neg]
% This clause covers 636 positive examples, of which 636 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'teamplayssport(A, _) :- teamplaysagainstteam(A, B), teamplaysagainstteam(B, _).  [covers 647,0/11,0 pos, 0,0/0,0 neg]'
%     Score = -260,178285 (regressionFit = 260,178283, penalties=2.1400000000000003E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, B), teamplaysagainstteam(B, _).  [covers 11,0/11,0 pos, 0,0/0,0 neg]

% Have these 4 positive seeds: 0 2 5 8

% The best node found: null
%     Score = -2,670927 (regressionFit = 2,670924, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, B), teamplaysagainstteam(B, _), athleteplaysforteam(_, A).  [covers 8,0/11,0 pos, 0,0/0,0 neg]

% The best node found: teamplayssport(A, _) :- teamplaysagainstteam(A, B), teamplaysagainstteam(B, _), athleteplaysforteam(_, A).  [covers 8,0/11,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,247.
% Will extend: teamplayssport(A, _) :- teamplaysagainstteam(A, B), teamplaysagainstteam(B, _), athleteplaysforteam(_, A).  [covers 8,0/11,0 pos, 0,0/0,0 neg]
% Path: 7;true,false
Comparing variance: 0.25053212920110246 to score=0.0025 #egs=8.0
Comparing variance: 0.22222222222222224 to score=0.0025 #egs=3.0
%   Creating a FALSE-branch leaf because wgtedCountFalseBranchPos = 3,0 < 2.1 * minPosCov = 6,3

% Time for loop #6: 2 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #6, the best clause found is:
%      teamplayssport(A, _) :- teamplaysagainstteam(A, B), teamplaysagainstteam(B, _), athleteplaysforteam(_, A).  [covers 8,0/11,0 pos, 0,0/0,0 neg]
% This clause covers 8 positive examples, of which 8 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'teamplayssport(A, _) :- teamplaysagainstteam(_, A), athleteplaysforteam(_, A).  [covers 24,0/24,0 pos, 0,0/0,0 neg]'
%     Score = -114,415251 (regressionFit = 114,415248, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(_, A), athleteplaysforteam(_, A).  [covers 24,0/24,0 pos, 0,0/0,0 neg]

% Have these 4 positive seeds: 4 6 7 8

% The best node found: null
Created a leaf under (teamplayssport(D, E) :- teamplaysagainstteam(H, D), athleteplaysforteam(I, D))

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree #8 @ 13:14:38 10/22/21.  [Using 33.360.176 memory cells.]  %%%%%


% FOR teamplayssport(A, B):
%   if ( teamplaysagainstteam(A, C), teamplaysagainstteam(C, D) )
%   then if ( teamplaysagainstteam(D, E), teamplaysinleague(C, F) )
%   | then return 0.05678292372437425;  // std dev = 11,953, 636,000 (wgt'ed) examples reached here.  /* #neg=419 #pos=217 */
%   | else if ( athleteplaysforteam(G, A) )
%   | | then return 0.21908623206982816;  // std dev = 1,416, 8,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | else return 0.07113756412729182;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else if ( teamplaysagainstteam(H, A), athleteplaysforteam(I, A) )
%   | then return 0.04903048666584941;  // std dev = 0,471, 24,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=8 */
%   | else if ( teamplaysagainstteam(A, J) )
%   | | then return -0.03327068587927145;  // std dev = 1,223, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else if ( teamplaysagainstteam(A, K), athleteledsportsteam(L, A) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.05764775538930694;  // std dev = 10,370, 474,000 (wgt'ed) examples reached here.  /* #neg=309 #pos=165 */


% Clauses:

teamplayssport(A, B, 0.05678292372437425) :- 
     teamplaysagainstteam(A, C), 
     teamplaysagainstteam(C, D), 
     teamplaysagainstteam(D, E), 
     teamplaysinleague(C, F), 
     !. // Clause #1.

teamplayssport(A, B, 0.21908623206982816) :- 
     teamplaysagainstteam(A, C), 
     teamplaysagainstteam(C, D), 
     athleteplaysforteam(E, A), 
     !. // Clause #2.

teamplayssport(A, B, 0.07113756412729182) :- 
     teamplaysagainstteam(A, C), 
     teamplaysagainstteam(C, D), 
     !. // Clause #3.

teamplayssport(A, B, 0.04903048666584941) :- 
     teamplaysagainstteam(C, A), 
     athleteplaysforteam(D, A), 
     !. // Clause #4.

teamplayssport(A, B, -0.03327068587927145) :- 
     teamplaysagainstteam(A, C), 
     !. // Clause #5.

teamplayssport(A, B, 0) :- 
     teamplaysagainstteam(A, C), 
     athleteledsportsteam(D, A), 
     !. // Clause #6.

teamplayssport(A, B, 0.05764775538930694) :- !. // Clause #7.


% The flattened versions of these clauses:

flattened_teamplayssport(a, underscore, 0.05678292372437425) :-  /* #neg=419 #pos=217 */ 
   teamplaysagainstteam(a, uniqueVar30),
   teamplaysagainstteam(uniqueVar30, uniqueVar31),
   teamplaysagainstteam(uniqueVar31, underscore),
   teamplaysinleague(uniqueVar30, underscore),
   !. // Flattened version of clause #1.

flattened_teamplayssport(a, underscore, 0.21908623206982816) :-  /* #neg=4 #pos=4 */ 
   teamplaysagainstteam(a, uniqueVar32),
   teamplaysagainstteam(uniqueVar32, underscore),
   athleteplaysforteam(underscore, a),
   !. // Flattened version of clause #2.

flattened_teamplayssport(a, underscore, 0.07113756412729182) :-  /* #neg=2 #pos=1 */ 
   teamplaysagainstteam(a, uniqueVar33),
   teamplaysagainstteam(uniqueVar33, underscore),
   !. // Flattened version of clause #3.

flattened_teamplayssport(a, underscore, 0.04903048666584941) :-  /* #neg=16 #pos=8 */ 
   teamplaysagainstteam(underscore, a),
   athleteplaysforteam(underscore, a),
   !. // Flattened version of clause #4.

flattened_teamplayssport(a, underscore, -0.03327068587927145) :-  /* #neg=6 #pos=2 */ 
   teamplaysagainstteam(a, underscore),
   !. // Flattened version of clause #5.

flattened_teamplayssport(a, underscore, 0) :- 
   teamplaysagainstteam(a, underscore),
   athleteledsportsteam(underscore, a),
   !. // Flattened version of clause #6.

flattened_teamplayssport(underscore, underscore, 0.05764775538930694) :-  /* #neg=309 #pos=165 */ 
   !. // Flattened version of clause #7.


% The unique flattened literals:
%   teamplaysagainstteam(a, underscore)
%   teamplaysagainstteam(a, uniqueVar32)
%   teamplaysagainstteam(uniqueVar32, underscore)
%   teamplaysagainstteam(uniqueVar31, underscore)
%   athleteledsportsteam(underscore, a)
%   teamplaysinleague(uniqueVar30, underscore)
%   teamplaysagainstteam(underscore, a)
%   teamplaysagainstteam(uniqueVar33, underscore)
%   teamplaysagainstteam(uniqueVar30, uniqueVar31)
%   teamplaysagainstteam(a, uniqueVar30)
%   athleteplaysforteam(underscore, a)
%   teamplaysagainstteam(a, uniqueVar33)

% Saving model in: train/models/bRDNs/teamplayssport.model.ckpt
% Time taken to learn 8 trees is 16,203 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.22177567488936994
Set score:0.0025
% Only 1153 out of 1153 converged.
% Kept 397 of the 397 positive examples.
% Kept 800 of the 159.991 negative examples.
% Dataset size: 1.197
Computing probabilities
prob time:1 seconds
No hidden examples for : teamplayssport
Time to build dataset: 1 seconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.22190152339915073
Set score:0.0025
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Have these 2 positive seeds: 177 989

% The best node found: null

% target           = teamplayssport(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  teamplayssport(_, _).  [covers 1.197,0/1.197,0 pos, 0,0/0,0 neg]
%     Score = -265,611980 (regressionFit = 265,611979, penalties=1.23E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(_, A).  [covers 734,0/1.197,0 pos, 0,0/0,0 neg]

% The best node found: teamplayssport(A, _) :- teamplaysagainstteam(_, A).  [covers 734,0/1.197,0 pos, 0,0/0,0 neg]

% Expanding node at Level 0 with score = 1,797693e+308.
% Will extend: teamplayssport(A, _) :- teamplaysagainstteam(_, A).  [covers 734,0/1.197,0 pos, 0,0/0,0 neg]
% Path: 8;
Comparing variance: 0.2207833102430474 to score=0.0025 #egs=734.0
Comparing variance: 0.2236652901492438 to score=0.0025 #egs=463.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 734,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,220783)
%         ILP node to extend: teamplayssport(A, _) :- teamplaysagainstteam(_, A).  [covers 734,0/1.197,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 1 and with score = -0,220783) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 463,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,223665)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 1 and with score = -0,223665) into position #1 in the search queue (new size=2).

% Time for loop #1: 7 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      teamplayssport(A, _) :- teamplaysagainstteam(_, A).  [covers 734,0/1.197,0 pos, 0,0/0,0 neg]
% This clause covers 734 positive examples, of which 734 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 3 positive seeds: 176 265 435

% The best node found: null
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(_, A).  [covers 0,0/463,0 pos, 0,0/0,0 neg]

% The best node found: teamplayssport(A, _) :- teamplaysagainstteam(_, A).  [covers 0,0/463,0 pos, 0,0/0,0 neg]

***** Warning: Have a bestNode that covers no positive examples.  That shouldn't happen.  Best node = teamplayssport(A, _) :- teamplaysagainstteam(_, A).  [covers 0,0/463,0 pos, 0,0/0,0 neg] *****


% Expanding node at Level 1 with score = -0,224.
% Will extend: teamplayssport(A, _) :- teamplaysagainstteam(_, A).  [covers 0,0/463,0 pos, 0,0/0,0 neg]
% Path: 8;false
Comparing variance: NaN to score=0.0025 #egs=0.0
Comparing variance: 0.2236652901492438 to score=0.0025 #egs=463.0
%   Creating a TRUE-branch leaf because wgtedCountTrueBranchPos = 0,0 < 2.1 * minPosCov = 6,3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 463,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,223665)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 2 and with score = -0,223665) into position #1 in the search queue (new size=2).

% Time for loop #2: 1 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #2, the best clause found is:
%      teamplayssport(A, _) :- teamplaysagainstteam(_, A).  [covers 0,0/463,0 pos, 0,0/0,0 neg]
% This clause covers 0 positive examples, of which 0 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 4 positive seeds: 155 168 317 359

% The best node found: null
%     Score = -103,432698 (regressionFit = 103,432697, penalties=1.23E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, _).  [covers 12,0/463,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, B), teamalsoknownas(B, _).  [covers 1,0/463,0 pos, 0,0/0,0 neg]

% The best node found: teamplayssport(A, _) :- teamplaysagainstteam(A, B), teamalsoknownas(B, _).  [covers 1,0/463,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,224.
% Will extend: teamplayssport(A, _) :- teamplaysagainstteam(A, B), teamalsoknownas(B, _).  [covers 1,0/463,0 pos, 0,0/0,0 neg]
% Path: 8;false,false
Comparing variance: 0.0 to score=0.0025 #egs=1.0
Comparing variance: 0.2230789351541553 to score=0.0025 #egs=462.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 1,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,000000)
%         ILP node to extend: teamplayssport(A, _) :- teamplaysagainstteam(A, B), teamalsoknownas(B, _).  [covers 1,0/463,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -0,000000) into the LAST position (#2) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 462,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,223079)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 3 and with score = -0,223079) into position #1 in the search queue (new size=3).

% Time for loop #3: 3 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #3, the best clause found is:
%      teamplayssport(A, _) :- teamplaysagainstteam(A, B), teamalsoknownas(B, _).  [covers 1,0/463,0 pos, 0,0/0,0 neg]
% This clause covers 1 positive examples, of which 1 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 4 positive seeds: 33 46 74 337

% The best node found: null
%     Score = -102,943180 (regressionFit = 102,943179, penalties=1.23E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(A, _).  [covers 131,0/462,0 pos, 0,0/0,0 neg]

% The best node found: teamplayssport(A, _) :- teamalsoknownas(A, _).  [covers 131,0/462,0 pos, 0,0/0,0 neg]

% Expanding node at Level 3 with score = -0,223.
% Will extend: teamplayssport(A, _) :- teamalsoknownas(A, _).  [covers 131,0/462,0 pos, 0,0/0,0 neg]
% Path: 8;false,false,false
Comparing variance: 0.21516111968047347 to score=0.0025 #egs=131.0
Comparing variance: 0.22585218240067098 to score=0.0025 #egs=331.0
%   Creating a TRUE-branch and FALSE-branch leaves because level = 3 >= 3

% Time for loop #4: 2 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #4, the best clause found is:
%      teamplayssport(A, _) :- teamalsoknownas(A, _).  [covers 131,0/462,0 pos, 0,0/0,0 neg]
% This clause covers 131 positive examples, of which 131 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'teamplayssport(A, _) :- teamplaysagainstteam(_, A).  [covers 734,0/734,0 pos, 0,0/0,0 neg]'
%     Score = -265,611980 (regressionFit = 265,611979, penalties=1.23E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(_, A).  [covers 734,0/734,0 pos, 0,0/0,0 neg]

% Have these 3 positive seeds: 57 242 544

% The best node found: null
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(B, A), teamplaysagainstteam(B, _).  [covers 734,0/734,0 pos, 0,0/0,0 neg]

% The best node found: teamplayssport(A, _) :- teamplaysagainstteam(B, A), teamplaysagainstteam(B, _).  [covers 734,0/734,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,221.
% Will extend: teamplayssport(A, _) :- teamplaysagainstteam(B, A), teamplaysagainstteam(B, _).  [covers 734,0/734,0 pos, 0,0/0,0 neg]
% Path: 8;true
Comparing variance: 0.2207833102430474 to score=0.0025 #egs=734.0
Comparing variance: NaN to score=0.0025 #egs=0.0
%   Creating a FALSE-branch leaf because wgtedCountFalseBranchPos = 0,0 < 2.1 * minPosCov = 6,3

% Time for loop #5: 17 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #5, the best clause found is:
%      teamplayssport(A, _) :- teamplaysagainstteam(B, A), teamplaysagainstteam(B, _).  [covers 734,0/734,0 pos, 0,0/0,0 neg]
% This clause covers 734 positive examples, of which 734 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

***** Warning: % Should not set minPosCoverage (3,0) to more than the total weight on the positive examples (1,0).  Will use the maximum possible value. *****


% Working on expanding this node: 'teamplayssport(A, _) :- teamplaysagainstteam(A, B), teamalsoknownas(B, _).  [covers 1,0/1,0 pos, 0,0/0,0 neg]'
%     Score = -103,062470 (regressionFit = 103,062468, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, B), teamalsoknownas(B, _).  [covers 1,0/1,0 pos, 0,0/0,0 neg]

***** Warning: % Have only 1 positive examples, so cannot choose 4 of them. *****


% Have these 1 positive seeds: 0

***** Warning: % Should not set minPosCoverage (3,0) to more than the total weight on the positive examples (1,0).  Will use the maximum possible value. *****


% The best node found: null
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, B), teamalsoknownas(B, _), teamalsoknownas(A, _).  [covers 0,0/1,0 pos, 0,0/0,0 neg]

% The best node found: teamplayssport(A, _) :- teamplaysagainstteam(A, B), teamalsoknownas(B, _), teamalsoknownas(A, _).  [covers 0,0/1,0 pos, 0,0/0,0 neg]

***** Warning: Have a bestNode that covers no positive examples.  That shouldn't happen.  Best node = teamplayssport(A, _) :- teamplaysagainstteam(A, B), teamalsoknownas(B, _), teamalsoknownas(A, _).  [covers 0,0/1,0 pos, 0,0/0,0 neg] *****


% Expanding node at Level 3 with score = -0,000.
% Will extend: teamplayssport(A, _) :- teamplaysagainstteam(A, B), teamalsoknownas(B, _), teamalsoknownas(A, _).  [covers 0,0/1,0 pos, 0,0/0,0 neg]
% Path: 8;false,false,true
Comparing variance: NaN to score=0.0025 #egs=0.0
Comparing variance: 0.0 to score=0.0025 #egs=1.0
%   Creating a TRUE-branch and FALSE-branch leaves because level = 3 >= 3

% Time for loop #6: 1 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #6, the best clause found is:
%      teamplayssport(A, _) :- teamplaysagainstteam(A, B), teamalsoknownas(B, _), teamalsoknownas(A, _).  [covers 0,0/1,0 pos, 0,0/0,0 neg]
% This clause covers 0 positive examples, of which 0 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree #9 @ 13:14:41 10/22/21.  [Using 33.540.568 memory cells.]  %%%%%


% FOR teamplayssport(A, B):
%   if ( teamplaysagainstteam(C, A) )
%   then if ( teamplaysagainstteam(C, D) )
%   | then return 0.030818053116894548;  // std dev = 12,730, 734,000 (wgt'ed) examples reached here.  /* #neg=493 #pos=241 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( teamplaysagainstteam(E, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( teamplaysagainstteam(A, F), teamalsoknownas(F, G) )
%   | | then if ( teamalsoknownas(A, H) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.7371294079937134;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( teamalsoknownas(A, I) )
%   | | | then return 0.007576047725512209;  // std dev = 5,309, 131,000 (wgt'ed) examples reached here.  /* #neg=90 #pos=41 */
%   | | | else return 0.043227031702530526;  // std dev = 8,646, 331,000 (wgt'ed) examples reached here.  /* #neg=217 #pos=114 */


% Clauses:

teamplayssport(A, B, 0.030818053116894548) :- 
     teamplaysagainstteam(C, A), 
     teamplaysagainstteam(C, D), 
     !. // Clause #1.

teamplayssport(A, B, 0) :- 
     teamplaysagainstteam(C, A), 
     !. // Clause #2.

teamplayssport(A, B, 0) :- 
     teamplaysagainstteam(C, A), 
     !. // Clause #3.

teamplayssport(A, B, 0) :- 
     teamplaysagainstteam(A, C), 
     teamalsoknownas(C, D), 
     teamalsoknownas(A, E), 
     !. // Clause #4.

teamplayssport(A, B, 0.7371294079937134) :- 
     teamplaysagainstteam(A, C), 
     teamalsoknownas(C, D), 
     !. // Clause #5.

teamplayssport(A, B, 0.007576047725512209) :- 
     teamalsoknownas(A, C), 
     !. // Clause #6.

teamplayssport(A, B, 0.043227031702530526) :- !. // Clause #7.


% The flattened versions of these clauses:

flattened_teamplayssport(a, underscore, 0.030818053116894548) :-  /* #neg=493 #pos=241 */ 
   teamplaysagainstteam(uniqueVar34, a),
   teamplaysagainstteam(uniqueVar34, underscore),
   !. // Flattened version of clause #1.

flattened_teamplayssport(a, underscore, 0) :- 
   teamplaysagainstteam(underscore, a),
   !. // Flattened version of clause #2.

flattened_teamplayssport(a, underscore, 0) :- 
   teamplaysagainstteam(underscore, a),
   !. // Flattened version of clause #3.

flattened_teamplayssport(a, underscore, 0) :- 
   teamplaysagainstteam(a, uniqueVar35),
   teamalsoknownas(uniqueVar35, underscore),
   teamalsoknownas(a, underscore),
   !. // Flattened version of clause #4.

flattened_teamplayssport(a, underscore, 0.7371294079937134) :-  /* #pos=1 */ 
   teamplaysagainstteam(a, uniqueVar36),
   teamalsoknownas(uniqueVar36, underscore),
   !. // Flattened version of clause #5.

flattened_teamplayssport(a, underscore, 0.007576047725512209) :-  /* #neg=90 #pos=41 */ 
   teamalsoknownas(a, underscore),
   !. // Flattened version of clause #6.

flattened_teamplayssport(underscore, underscore, 0.043227031702530526) :-  /* #neg=217 #pos=114 */ 
   !. // Flattened version of clause #7.


% The unique flattened literals:
%   teamplaysagainstteam(uniqueVar34, a)
%   teamalsoknownas(uniqueVar35, underscore)
%   teamalsoknownas(a, underscore)
%   teamplaysagainstteam(underscore, a)
%   teamplaysagainstteam(uniqueVar34, underscore)
%   teamplaysagainstteam(a, uniqueVar35)
%   teamalsoknownas(uniqueVar36, underscore)
%   teamplaysagainstteam(a, uniqueVar36)

% Saving model in: train/models/bRDNs/teamplayssport.model.ckpt
% Time taken to learn 9 trees is 18,980 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.0
Set score:0.0
% Only 1197 out of 1197 converged.
% Kept 397 of the 397 positive examples.
% Kept 747 of the 159.991 negative examples.
% Dataset size: 1.144
Computing probabilities
prob time:1 seconds
No hidden examples for : teamplayssport
Time to build dataset: 2 seconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.2265897622293591
Set score:0.0
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.
% Have selected pos example #524 as the next seed: teamplayssport(duquesneuniversity, brewers)

% The best node found: null

% target           = teamplayssport(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  teamplayssport(_, _).  [covers 1.144,0/1.144,0 pos, 0,0/0,0 neg]
%     Score = -259,184711 (regressionFit = 259,184710, penalties=1.23E-6) for clause:  teamplayssport(A, _) :- athleteplaysforteam(_, A).  [covers 510,0/1.144,0 pos, 0,0/0,0 neg]

% The best node found: teamplayssport(A, _) :- athleteplaysforteam(_, A).  [covers 510,0/1.144,0 pos, 0,0/0,0 neg]

% Expanding node at Level 0 with score = 1,797693e+308.
% Will extend: teamplayssport(A, _) :- athleteplaysforteam(_, A).  [covers 510,0/1.144,0 pos, 0,0/0,0 neg]
% Path: 9;
Comparing variance: 0.227682277589132 to score=0.0 #egs=510.0
Comparing variance: 0.22565733147203793 to score=0.0 #egs=634.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 510,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,227682)
%         ILP node to extend: teamplayssport(A, _) :- athleteplaysforteam(_, A).  [covers 510,0/1.144,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 1 and with score = -0,227682) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 634,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,225657)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 1 and with score = -0,225657) into the LAST position (#2) in the search queue.

% Time for loop #1: 5 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      teamplayssport(A, _) :- athleteplaysforteam(_, A).  [covers 510,0/1.144,0 pos, 0,0/0,0 neg]
% This clause covers 510 positive examples, of which 510 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'teamplayssport(A, _) :- athleteplaysforteam(_, A).  [covers 510,0/510,0 pos, 0,0/0,0 neg]'
%     Score = -259,184711 (regressionFit = 259,184710, penalties=1.23E-6) for clause:  teamplayssport(A, _) :- athleteplaysforteam(_, A).  [covers 510,0/510,0 pos, 0,0/0,0 neg]
% Have selected pos example #480 as the next seed: teamplayssport(bucs, new)

% The best node found: null
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  teamplayssport(A, _) :- athleteplaysforteam(B, A), athleteplaysforteam(B, _).  [covers 510,0/510,0 pos, 0,0/0,0 neg]

% The best node found: teamplayssport(A, _) :- athleteplaysforteam(B, A), athleteplaysforteam(B, _).  [covers 510,0/510,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,228.
% Will extend: teamplayssport(A, _) :- athleteplaysforteam(B, A), athleteplaysforteam(B, _).  [covers 510,0/510,0 pos, 0,0/0,0 neg]
% Path: 9;true
Comparing variance: 0.227682277589132 to score=0.0 #egs=510.0
Comparing variance: NaN to score=0.0 #egs=0.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 510,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,227682)
%         ILP node to extend: teamplayssport(A, _) :- athleteplaysforteam(B, A), athleteplaysforteam(B, _).  [covers 510,0/510,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -0,227682) into position #1 in the search queue (new size=2).
%   Creating a FALSE-branch leaf because wgtedCountFalseBranchPos = 0,0 < 2.1 * minPosCov = 6,3

% Time for loop #2: 5 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #2, the best clause found is:
%      teamplayssport(A, _) :- athleteplaysforteam(B, A), athleteplaysforteam(B, _).  [covers 510,0/510,0 pos, 0,0/0,0 neg]
% This clause covers 510 positive examples, of which 510 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'teamplayssport(A, _) :- athleteplaysforteam(B, A), athleteplaysforteam(B, _).  [covers 510,0/510,0 pos, 0,0/0,0 neg]'
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  teamplayssport(A, _) :- athleteplaysforteam(B, A), athleteplaysforteam(B, _).  [covers 510,0/510,0 pos, 0,0/0,0 neg]
% Have selected pos example #79 as the next seed: teamplayssport(magic, basketball)

% The best node found: null
%     Score = -116,089938 (regressionFit = 116,089935, penalties=3.1500000000000008E-6) for clause:  teamplayssport(A, _) :- athleteplaysforteam(B, A), athleteplaysforteam(B, C), teamplaysinleague(C, _).  [covers 483,0/510,0 pos, 0,0/0,0 neg]

% The best node found: teamplayssport(A, _) :- athleteplaysforteam(B, A), athleteplaysforteam(B, C), teamplaysinleague(C, _).  [covers 483,0/510,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,228.
% Will extend: teamplayssport(A, _) :- athleteplaysforteam(B, A), athleteplaysforteam(B, C), teamplaysinleague(C, _).  [covers 483,0/510,0 pos, 0,0/0,0 neg]
% Path: 9;true,true
Comparing variance: 0.22788688173991412 to score=0.0 #egs=483.0
Comparing variance: 0.2229841114533744 to score=0.0 #egs=27.0

% Time for loop #3: 5 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #3, the best clause found is:
%      teamplayssport(A, _) :- athleteplaysforteam(B, A), athleteplaysforteam(B, C), teamplaysinleague(C, _).  [covers 483,0/510,0 pos, 0,0/0,0 neg]
% This clause covers 483 positive examples, of which 483 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.
% Have selected pos example #618 as the next seed: teamplayssport(wakeforestuniversity, duquesneuniversity)

% The best node found: null
%     Score = -143,065379 (regressionFit = 143,065378, penalties=1.23E-6) for clause:  teamplayssport(A, _) :- athleteledsportsteam(_, A).  [covers 32,0/634,0 pos, 0,0/0,0 neg]

% The best node found: teamplayssport(A, _) :- athleteledsportsteam(_, A).  [covers 32,0/634,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,226.
% Will extend: teamplayssport(A, _) :- athleteledsportsteam(_, A).  [covers 32,0/634,0 pos, 0,0/0,0 neg]
% Path: 9;false
Comparing variance: 0.22528068689670633 to score=0.0 #egs=32.0
Comparing variance: 0.2256750756472652 to score=0.0 #egs=602.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 32,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,225281)
%         ILP node to extend: teamplayssport(A, _) :- athleteledsportsteam(_, A).  [covers 32,0/634,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -0,225281) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 602,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,225675)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 2 and with score = -0,225675) into position #1 in the search queue (new size=2).

% Time for loop #4: 2 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #4, the best clause found is:
%      teamplayssport(A, _) :- athleteledsportsteam(_, A).  [covers 32,0/634,0 pos, 0,0/0,0 neg]
% This clause covers 32 positive examples, of which 32 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.
% Have selected pos example #571 as the next seed: teamplayssport(saintlouisuniversity, oaklandraiders)

% The best node found: null
%     Score = -135,815813 (regressionFit = 135,815811, penalties=1.23E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(A, _).  [covers 163,0/602,0 pos, 0,0/0,0 neg]
%     Score = -135,639307 (regressionFit = 135,639305, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(A, _), teamplaysagainstteam(A, _).  [covers 26,0/602,0 pos, 0,0/0,0 neg]

% The best node found: teamplayssport(A, _) :- teamalsoknownas(A, _), teamplaysagainstteam(A, _).  [covers 26,0/602,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,226.
% Will extend: teamplayssport(A, _) :- teamalsoknownas(A, _), teamplaysagainstteam(A, _).  [covers 26,0/602,0 pos, 0,0/0,0 neg]
% Path: 9;false,false
Comparing variance: 0.2438137591373119 to score=0.0 #egs=26.0
Comparing variance: 0.2244794215254866 to score=0.0 #egs=576.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 26,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,243814)
%         ILP node to extend: teamplayssport(A, _) :- teamalsoknownas(A, _), teamplaysagainstteam(A, _).  [covers 26,0/602,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -0,243814) into position #1 in the search queue (new size=2).

% Time for loop #5: 3 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #5, the best clause found is:
%      teamplayssport(A, _) :- teamalsoknownas(A, _), teamplaysagainstteam(A, _).  [covers 26,0/602,0 pos, 0,0/0,0 neg]
% This clause covers 26 positive examples, of which 26 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'teamplayssport(A, _) :- teamalsoknownas(A, _), teamplaysagainstteam(A, _).  [covers 26,0/26,0 pos, 0,0/0,0 neg]'
%     Score = -135,639307 (regressionFit = 135,639305, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(A, _), teamplaysagainstteam(A, _).  [covers 26,0/26,0 pos, 0,0/0,0 neg]
% Have selected pos example #14 as the next seed: teamplayssport(coloradostateuniversity, hawkeyes)

% The best node found: null
Created a leaf under (teamplayssport(D, E) :- teamalsoknownas(D, J), teamplaysagainstteam(D, K))

% Working on expanding this node: 'teamplayssport(A, _) :- athleteledsportsteam(_, A).  [covers 32,0/32,0 pos, 0,0/0,0 neg]'
%     Score = -143,065379 (regressionFit = 143,065378, penalties=1.23E-6) for clause:  teamplayssport(A, _) :- athleteledsportsteam(_, A).  [covers 32,0/32,0 pos, 0,0/0,0 neg]
% Have selected pos example #12 as the next seed: teamplayssport(neworleanshornets, southernmethodistuniversity)

% The best node found: null
%     Score = -Infinity (regressionFit = Infinity, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- athleteledsportsteam(_, A), teamalsoknownas(A, _).  [covers 0,0/32,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.450000000000001E-6) for clause:  teamplayssport(A, _) :- athleteledsportsteam(_, A), teamalsoknownas(A, _), teamplaysinleague(A, _).  [covers 0,0/32,0 pos, 0,0/0,0 neg]

% The best node found: teamplayssport(A, _) :- athleteledsportsteam(_, A), teamalsoknownas(A, _), teamplaysinleague(A, _).  [covers 0,0/32,0 pos, 0,0/0,0 neg]

***** Warning: Have a bestNode that covers no positive examples.  That shouldn't happen.  Best node = teamplayssport(A, _) :- athleteledsportsteam(_, A), teamalsoknownas(A, _), teamplaysinleague(A, _).  [covers 0,0/32,0 pos, 0,0/0,0 neg] *****


% Expanding node at Level 2 with score = -0,225.
% Will extend: teamplayssport(A, _) :- athleteledsportsteam(_, A), teamalsoknownas(A, _), teamplaysinleague(A, _).  [covers 0,0/32,0 pos, 0,0/0,0 neg]
% Path: 9;false,true
Comparing variance: NaN to score=0.0 #egs=0.0
Comparing variance: 0.22528068689670633 to score=0.0 #egs=32.0
%   Creating a TRUE-branch leaf because wgtedCountTrueBranchPos = 0,0 < 2.1 * minPosCov = 6,3

% Time for loop #7: 1 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #7, the best clause found is:
%      teamplayssport(A, _) :- athleteledsportsteam(_, A), teamalsoknownas(A, _), teamplaysinleague(A, _).  [covers 0,0/32,0 pos, 0,0/0,0 neg]
% This clause covers 0 positive examples, of which 0 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree #10 @ 13:14:44 10/22/21.  [Using 33.709.528 memory cells.]  %%%%%


% FOR teamplayssport(A, B):
%   if ( athleteplaysforteam(C, A) )
%   then if ( athleteplaysforteam(C, D) )
%   | then if ( teamplaysinleague(D, E) )
%   | | then return 0.048754326116184146;  // std dev = 10,491, 483,000 (wgt'ed) examples reached here.  /* #neg=313 #pos=170 */
%   | | else return 0.01564765804863692;  // std dev = 2,454, 27,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=9 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( athleteledsportsteam(F, A) )
%   | then if ( teamalsoknownas(A, G), teamplaysinleague(A, H) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.04241457919109211;  // std dev = 2,685, 32,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=11 */
%   | else if ( teamalsoknownas(A, I), teamplaysagainstteam(A, J) )
%   | | then return 0.1250796669328336;  // std dev = 0,494, 26,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=11 */
%   | | else return 0.031663672155692574;  // std dev = 11,371, 576,000 (wgt'ed) examples reached here.  /* #neg=380 #pos=196 */


% Clauses:

teamplayssport(A, B, 0.048754326116184146) :- 
     athleteplaysforteam(C, A), 
     athleteplaysforteam(C, D), 
     teamplaysinleague(D, E), 
     !. // Clause #1.

teamplayssport(A, B, 0.01564765804863692) :- 
     athleteplaysforteam(C, A), 
     athleteplaysforteam(C, D), 
     !. // Clause #2.

teamplayssport(A, B, 0) :- 
     athleteplaysforteam(C, A), 
     !. // Clause #3.

teamplayssport(A, B, 0) :- 
     athleteledsportsteam(C, A), 
     teamalsoknownas(A, D), 
     teamplaysinleague(A, E), 
     !. // Clause #4.

teamplayssport(A, B, 0.04241457919109211) :- 
     athleteledsportsteam(C, A), 
     !. // Clause #5.

teamplayssport(A, B, 0.1250796669328336) :- 
     teamalsoknownas(A, C), 
     teamplaysagainstteam(A, D), 
     !. // Clause #6.

teamplayssport(A, B, 0.031663672155692574) :- !. // Clause #7.


% The flattened versions of these clauses:

flattened_teamplayssport(a, underscore, 0.048754326116184146) :-  /* #neg=313 #pos=170 */ 
   athleteplaysforteam(uniqueVar37, a),
   athleteplaysforteam(uniqueVar37, uniqueVar38),
   teamplaysinleague(uniqueVar38, underscore),
   !. // Flattened version of clause #1.

flattened_teamplayssport(a, underscore, 0.01564765804863692) :-  /* #neg=18 #pos=9 */ 
   athleteplaysforteam(uniqueVar39, a),
   athleteplaysforteam(uniqueVar39, underscore),
   !. // Flattened version of clause #2.

flattened_teamplayssport(a, underscore, 0) :- 
   athleteplaysforteam(underscore, a),
   !. // Flattened version of clause #3.

flattened_teamplayssport(a, underscore, 0) :- 
   athleteledsportsteam(underscore, a),
   teamalsoknownas(a, underscore),
   teamplaysinleague(a, underscore),
   !. // Flattened version of clause #4.

flattened_teamplayssport(a, underscore, 0.04241457919109211) :-  /* #neg=21 #pos=11 */ 
   athleteledsportsteam(underscore, a),
   !. // Flattened version of clause #5.

flattened_teamplayssport(a, underscore, 0.1250796669328336) :-  /* #neg=15 #pos=11 */ 
   teamalsoknownas(a, underscore),
   teamplaysagainstteam(a, underscore),
   !. // Flattened version of clause #6.

flattened_teamplayssport(underscore, underscore, 0.031663672155692574) :-  /* #neg=380 #pos=196 */ 
   !. // Flattened version of clause #7.


% The unique flattened literals:
%   teamplaysagainstteam(a, underscore)
%   athleteplaysforteam(uniqueVar37, a)
%   athleteledsportsteam(underscore, a)
%   athleteplaysforteam(uniqueVar39, underscore)
%   teamalsoknownas(a, underscore)
%   teamplaysinleague(a, underscore)
%   athleteplaysforteam(uniqueVar37, uniqueVar38)
%   teamplaysinleague(uniqueVar38, underscore)
%   athleteplaysforteam(underscore, a)
%   athleteplaysforteam(uniqueVar39, a)

% Saving model in: train/models/bRDNs/teamplayssport.model.ckpt
% Saving model in: train/models/bRDNs/teamplayssport.model


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%  Final call for computing score for teamplayssport.  %%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

stepLength_tree1(1.0).
stepLength_tree2(1.0).
stepLength_tree3(1.0).
stepLength_tree4(1.0).
stepLength_tree5(1.0).
stepLength_tree6(1.0).
stepLength_tree7(1.0).
stepLength_tree8(1.0).
stepLength_tree9(1.0).
stepLength_tree10(1.0).

logPrior(-1.8).
teamplayssport(D, E, Total) :- // A general accessor. 
   teamplayssport(D, E, 1000000, Total), !.
teamplayssport(D, E, Total) :- waitHere("This should not fail", teamplayssport(D, E, Total)).

teamplayssport(D, E, TreesToUse, Total) :- // A tree-limited accessor (e.g., for tuning the number of trees to use).
   logPrior(LogPrior),
   getScore_teamplayssport_tree1(D, E, TreesToUse, Total1),
   getScore_teamplayssport_tree2(D, E, TreesToUse, Total2),
   getScore_teamplayssport_tree3(D, E, TreesToUse, Total3),
   getScore_teamplayssport_tree4(D, E, TreesToUse, Total4),
   getScore_teamplayssport_tree5(D, E, TreesToUse, Total5),
   getScore_teamplayssport_tree6(D, E, TreesToUse, Total6),
   getScore_teamplayssport_tree7(D, E, TreesToUse, Total7),
   getScore_teamplayssport_tree8(D, E, TreesToUse, Total8),
   getScore_teamplayssport_tree9(D, E, TreesToUse, Total9),
   getScore_teamplayssport_tree10(D, E, TreesToUse, Total10),
   Total is LogPrior + Total1 + Total2 + Total3 + Total4 + Total5 + Total6 + Total7 + Total8 + Total9 + Total10,
   !.
teamplayssport(D, E, TreesToUse, Total) :- waitHere("This should not fail", teamplayssport(D, E, TreesToUse, Total)).

getScore_teamplayssport_tree1(D, E, TreesToUse, 0.0) :- 1 > TreesToUse, !.
getScore_teamplayssport_tree1(D, E, TreesToUse, Total1) :- teamplayssport_tree1(D, E, Total), stepLength_tree1(StepLen), Total1 is Total * StepLen.

getScore_teamplayssport_tree2(D, E, TreesToUse, 0.0) :- 2 > TreesToUse, !.
getScore_teamplayssport_tree2(D, E, TreesToUse, Total2) :- teamplayssport_tree2(D, E, Total), stepLength_tree2(StepLen), Total2 is Total * StepLen.

getScore_teamplayssport_tree3(D, E, TreesToUse, 0.0) :- 3 > TreesToUse, !.
getScore_teamplayssport_tree3(D, E, TreesToUse, Total3) :- teamplayssport_tree3(D, E, Total), stepLength_tree3(StepLen), Total3 is Total * StepLen.

getScore_teamplayssport_tree4(D, E, TreesToUse, 0.0) :- 4 > TreesToUse, !.
getScore_teamplayssport_tree4(D, E, TreesToUse, Total4) :- teamplayssport_tree4(D, E, Total), stepLength_tree4(StepLen), Total4 is Total * StepLen.

getScore_teamplayssport_tree5(D, E, TreesToUse, 0.0) :- 5 > TreesToUse, !.
getScore_teamplayssport_tree5(D, E, TreesToUse, Total5) :- teamplayssport_tree5(D, E, Total), stepLength_tree5(StepLen), Total5 is Total * StepLen.

getScore_teamplayssport_tree6(D, E, TreesToUse, 0.0) :- 6 > TreesToUse, !.
getScore_teamplayssport_tree6(D, E, TreesToUse, Total6) :- teamplayssport_tree6(D, E, Total), stepLength_tree6(StepLen), Total6 is Total * StepLen.

getScore_teamplayssport_tree7(D, E, TreesToUse, 0.0) :- 7 > TreesToUse, !.
getScore_teamplayssport_tree7(D, E, TreesToUse, Total7) :- teamplayssport_tree7(D, E, Total), stepLength_tree7(StepLen), Total7 is Total * StepLen.

getScore_teamplayssport_tree8(D, E, TreesToUse, 0.0) :- 8 > TreesToUse, !.
getScore_teamplayssport_tree8(D, E, TreesToUse, Total8) :- teamplayssport_tree8(D, E, Total), stepLength_tree8(StepLen), Total8 is Total * StepLen.

getScore_teamplayssport_tree9(D, E, TreesToUse, 0.0) :- 9 > TreesToUse, !.
getScore_teamplayssport_tree9(D, E, TreesToUse, Total9) :- teamplayssport_tree9(D, E, Total), stepLength_tree9(StepLen), Total9 is Total * StepLen.

getScore_teamplayssport_tree10(D, E, TreesToUse, 0.0) :- 10 > TreesToUse, !.
getScore_teamplayssport_tree10(D, E, TreesToUse, Total10) :- teamplayssport_tree10(D, E, Total), stepLength_tree10(StepLen), Total10 is Total * StepLen.

flattenedLiteralsInThisSetOfTrees(teamplayssport, 87, [
   teamplaysagainstteam(uniqueVar17, a),
   athleteledsportsteam(underscore, underscore),
   teamplaysinleague(a, underscore),
   teamalsoknownas(a, uniqueVar15),
   teamplaysagainstteam(uniqueVar33, underscore),
   teamplaysagainstteam(uniqueVar4, underscore),
   athleteledsportsteam(underscore, uniqueVar6),
   teamalsoknownas(uniqueVar22, uniqueVar22),
   athleteledsportsteam(underscore, uniqueVar7),
   teamplaysagainstteam(a, uniqueVar33),
   athleteledsportsteam(underscore, uniqueVar10),
   athleteplaysforteam(uniqueVar26, a),
   athleteplaysforteam(uniqueVar11, underscore),
   athleteledsportsteam(underscore, uniqueVar20),
   athleteledsportsteam(underscore, uniqueVar19),
   teamplaysagainstteam(a, uniqueVar35),
   athleteplaysforteam(uniqueVar37, uniqueVar38),
   teamplaysagainstteam(a, uniqueVar36),
   teamalsoknownas(uniqueVar20, uniqueVar21),
   teamalsoknownas(uniqueVar35, underscore),
   teamalsoknownas(a, underscore),
   teamplaysagainstteam(uniqueVar18, a),
   teamplaysagainstteam(uniqueVar22, uniqueVar21),
   teamplaysagainstteam(uniqueVar23, a),
   teamplaysagainstteam(uniqueVar30, uniqueVar31),
   teamalsoknownas(a, uniqueVar3),
   athleteplaysforteam(uniqueVar39, a),
   teamplaysagainstteam(underscore, uniqueVar18),
   teamplaysagainstteam(uniqueVar34, a),
   teamplaysinleague(a, uniqueVar14),
   teamalsoknownas(a, uniqueVar1),
   athleteledsportsteam(underscore, a),
   teamplaysagainstteam(uniqueVar7, a),
   athleteledsportsteam(underscore, uniqueVar25),
   teamplaysagainstteam(uniqueVar31, underscore),
   athleteplaysforteam(uniqueVar37, a),
   athleteledsportsteam(underscore, uniqueVar8),
   athleteplaysinleague(underscore, uniqueVar13),
   teamplaysagainstteam(uniqueVar8, a),
   athleteplaysforteam(uniqueVar26, underscore),
   teamplaysagainstteam(uniqueVar29, a),
   teamplaysagainstteam(a, uniqueVar30),
   teamplaysagainstteam(uniqueVar25, a),
   teamplaysagainstteam(uniqueVar5, underscore),
   teamplaysagainstteam(a, underscore),
   athleteplaysforteam(underscore, uniqueVar27),
   athleteplaysforteam(underscore, uniqueVar16),
   teamplaysinleague(underscore, uniqueVar12),
   athleteledsportsteam(underscore, uniqueVar17),
   teamplaysagainstteam(underscore, uniqueVar24),
   teamplaysinleague(uniqueVar30, underscore),
   teamalsoknownas(uniqueVar23, uniqueVar24),
   teamplaysagainstteam(uniqueVar34, underscore),
   teamplaysinleague(uniqueVar17, underscore),
   athleteplaysinleague(underscore, uniqueVar12),
   teamplaysagainstteam(a, uniqueVar10),
   teamplaysagainstteam(a, uniqueVar19),
   teamalsoknownas(uniqueVar28, underscore),
   teamplaysagainstteam(uniqueVar3, uniqueVar4),
   teamplaysagainstteam(uniqueVar28, a),
   teamplaysinleague(a, uniqueVar13),
   teamplaysagainstteam(uniqueVar32, underscore),
   athleteplaysforteam(underscore, uniqueVar15),
   teamplaysagainstteam(underscore, uniqueVar27),
   teamplaysagainstteam(uniqueVar6, a),
   teamalsoknownas(uniqueVar36, underscore),
   teamplaysinleague(uniqueVar38, underscore),
   athleteplaysforteam(underscore, uniqueVar28),
   teamplaysagainstteam(uniqueVar1, uniqueVar2),
   teamplaysinleague(underscore, uniqueVar14),
   athleteledsportsteam(underscore, uniqueVar2),
   teamalsoknownas(uniqueVar8, uniqueVar8),
   athleteplaysforteam(underscore, uniqueVar29),
   teamplaysagainstteam(uniqueVar9, a),
   athleteledsportsteam(underscore, uniqueVar18),
   teamplaysinleague(a, uniqueVar12),
   athleteledsportsteam(underscore, uniqueVar9),
   teamalsoknownas(a, uniqueVar5),
   teamplaysagainstteam(a, uniqueVar32),
   athleteplaysforteam(uniqueVar11, a),
   athleteplaysforteam(uniqueVar39, underscore),
   teamplaysagainstteam(underscore, a),
   teamplaysagainstteam(a, uniqueVar16),
   athleteplaysforteam(underscore, a),
   teamplaysagainstteam(uniqueVar20, a),
   athleteledsportsteam(underscore, uniqueVar23),
   teamplaysagainstteam(uniqueVar27, a)]).
% Time taken to learn model for 'teamplayssport': 22,254 seconds.
% Saving model in: train/models/bRDNs/teamplayssport.model
cached groundings hit: 0
Misses: 0

% Total learning time (10 trees): 24,023 seconds.
