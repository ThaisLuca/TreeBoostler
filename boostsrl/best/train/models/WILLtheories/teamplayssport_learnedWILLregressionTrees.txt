usePrologVariables: true.

% maxTreeDepthInNodes                 = 3
% maxTreeDepthInLiterals              = 12
% maxNumberOfLiteralsAtAnInteriorNode = 2
% maxFreeBridgersInBody               = 1
% maxNumberOfClauses                  = 8
% maxNodesToConsider                  = 10
% maxNodesToCreate                    = 10.000
% maxAcceptableNodeScoreToStop        = 0,003
% negPosRatio                         = 2,000
% testNegPosRatio                     = -1,000
% # of pos examples                   = 1.185
% # of neg examples                   = 0



%%%%%  WILL-Produced Tree #1 @ 13:14:23 10/22/21.  [Using 31.506.840 memory cells.]  %%%%%

% FOR teamplayssport(A, B):
%   if ( teamalsoknownas(A, C), teamplaysagainstteam(C, D) )
%   then if ( athleteledsportsteam(E, D) )
%   | then return 0.26199508894566564;  // std dev = 3,538, 52,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=21 */
%   | else if ( teamplaysagainstteam(D, F), teamplaysagainstteam(G, A) )
%   | | then return 0.10814893509951219;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( teamplaysagainstteam(H, A) )
%   | then return 0.19148226843284105;  // std dev = 12,111, 660,000 (wgt'ed) examples reached here.  /* #neg=440 #pos=220 */
%   | else if ( teamplaysagainstteam(A, I), athleteplaysforteam(J, A) )
%   | | then if ( teamalsoknownas(A, K) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.024815601766178853;  // std dev = 1,291, 12,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   | | else if ( teamplaysagainstteam(L, A) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.19294105763780123;  // std dev = 10,088, 457,000 (wgt'ed) examples reached here.  /* #neg=304 #pos=153 */


% Clauses:

teamplayssport(A, B, 0.26199508894566564) :- 
     teamalsoknownas(A, C), 
     teamplaysagainstteam(C, D), 
     athleteledsportsteam(E, D), 
     !. // Clause #1.

teamplayssport(A, B, 0.10814893509951219) :- 
     teamalsoknownas(A, C), 
     teamplaysagainstteam(C, D), 
     teamplaysagainstteam(D, E), 
     teamplaysagainstteam(F, A), 
     !. // Clause #2.

teamplayssport(A, B, 0) :- 
     teamalsoknownas(A, C), 
     teamplaysagainstteam(C, D), 
     !. // Clause #3.

teamplayssport(A, B, 0.19148226843284105) :- 
     teamplaysagainstteam(C, A), 
     !. // Clause #4.

teamplayssport(A, B, 0) :- 
     teamplaysagainstteam(A, C), 
     athleteplaysforteam(D, A), 
     teamalsoknownas(A, E), 
     !. // Clause #5.

teamplayssport(A, B, 0.024815601766178853) :- 
     teamplaysagainstteam(A, C), 
     athleteplaysforteam(D, A), 
     !. // Clause #6.

teamplayssport(A, B, 0) :- 
     teamplaysagainstteam(C, A), 
     !. // Clause #7.

teamplayssport(A, B, 0.19294105763780123) :- !. // Clause #8.


% The flattened versions of these clauses:

flattened_teamplayssport(a, underscore, 0.26199508894566564) :-  /* #neg=31 #pos=21 */ 
   teamalsoknownas(a, uniqueVar1),
   teamplaysagainstteam(uniqueVar1, uniqueVar2),
   athleteledsportsteam(underscore, uniqueVar2),
   !. // Flattened version of clause #1.

flattened_teamplayssport(a, underscore, 0.10814893509951219) :-  /* #neg=3 #pos=1 */ 
   teamalsoknownas(a, uniqueVar3),
   teamplaysagainstteam(uniqueVar3, uniqueVar4),
   teamplaysagainstteam(uniqueVar4, underscore),
   teamplaysagainstteam(underscore, a),
   !. // Flattened version of clause #2.

flattened_teamplayssport(a, underscore, 0) :- 
   teamalsoknownas(a, uniqueVar5),
   teamplaysagainstteam(uniqueVar5, underscore),
   !. // Flattened version of clause #3.

flattened_teamplayssport(a, underscore, 0.19148226843284105) :-  /* #neg=440 #pos=220 */ 
   teamplaysagainstteam(underscore, a),
   !. // Flattened version of clause #4.

flattened_teamplayssport(a, underscore, 0) :- 
   teamplaysagainstteam(a, underscore),
   athleteplaysforteam(underscore, a),
   teamalsoknownas(a, underscore),
   !. // Flattened version of clause #5.

flattened_teamplayssport(a, underscore, 0.024815601766178853) :-  /* #neg=10 #pos=2 */ 
   teamplaysagainstteam(a, underscore),
   athleteplaysforteam(underscore, a),
   !. // Flattened version of clause #6.

flattened_teamplayssport(a, underscore, 0) :- 
   teamplaysagainstteam(underscore, a),
   !. // Flattened version of clause #7.

flattened_teamplayssport(underscore, underscore, 0.19294105763780123) :-  /* #neg=304 #pos=153 */ 
   !. // Flattened version of clause #8.


% The unique flattened literals:
%   teamplaysagainstteam(uniqueVar1, uniqueVar2)
%   teamplaysagainstteam(uniqueVar3, uniqueVar4)
%   teamplaysagainstteam(uniqueVar5, underscore)
%   teamplaysagainstteam(a, underscore)
%   athleteledsportsteam(underscore, uniqueVar2)
%   teamalsoknownas(a, uniqueVar5)
%   teamalsoknownas(a, uniqueVar1)
%   teamalsoknownas(a, underscore)
%   teamplaysagainstteam(underscore, a)
%   teamplaysagainstteam(uniqueVar4, underscore)
%   teamalsoknownas(a, uniqueVar3)
%   athleteplaysforteam(underscore, a)

%%%%%  WILL-Produced Tree #2 @ 13:14:24 10/22/21.  [Using 31.995.632 memory cells.]  %%%%%

% FOR teamplayssport(A, B):
%   if ( teamplaysagainstteam(C, A), athleteledsportsteam(D, C) )
%   then if ( athleteplaysforteam(E, A), athleteledsportsteam(F, A) )
%   | then if ( teamalsoknownas(A, G) )
%   | | then return 0.15847470304921268;  // std dev = 3,366, 51,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=17 */
%   | | else return 0.20113001953343326;  // std dev = 7,022, 212,000 (wgt'ed) examples reached here.  /* #neg=134 #pos=78 */
%   | else if ( teamalsoknownas(C, C) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.18154281778859668;  // std dev = 8,269, 301,000 (wgt'ed) examples reached here.  /* #neg=196 #pos=105 */
%   else if ( teamplaysagainstteam(A, H), athleteledsportsteam(I, H) )
%   | then return 0.24632264376067434;  // std dev = 1,544, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | else if ( athleteplaysforteam(J, A) )
%   | | then if ( athleteplaysforteam(J, K) )
%   | | | then return 0.16651253146641565;  // std dev = 3,464, 54,000 (wgt'ed) examples reached here.  /* #neg=36 #pos=18 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.1631099794896504;  // std dev = 10,828, 530,000 (wgt'ed) examples reached here.  /* #neg=355 #pos=175 */


% Clauses:

teamplayssport(A, B, 0.15847470304921268) :- 
     teamplaysagainstteam(C, A), 
     athleteledsportsteam(D, C), 
     athleteplaysforteam(E, A), 
     athleteledsportsteam(F, A), 
     teamalsoknownas(A, G), 
     !. // Clause #1.

teamplayssport(A, B, 0.20113001953343326) :- 
     teamplaysagainstteam(C, A), 
     athleteledsportsteam(D, C), 
     athleteplaysforteam(E, A), 
     athleteledsportsteam(F, A), 
     !. // Clause #2.

teamplayssport(A, B, 0) :- 
     teamplaysagainstteam(C, A), 
     athleteledsportsteam(D, C), 
     teamalsoknownas(C, C), 
     !. // Clause #3.

teamplayssport(A, B, 0.18154281778859668) :- 
     teamplaysagainstteam(C, A), 
     athleteledsportsteam(D, C), 
     !. // Clause #4.

teamplayssport(A, B, 0.24632264376067434) :- 
     teamplaysagainstteam(A, C), 
     athleteledsportsteam(D, C), 
     !. // Clause #5.

teamplayssport(A, B, 0.16651253146641565) :- 
     athleteplaysforteam(C, A), 
     athleteplaysforteam(C, D), 
     !. // Clause #6.

teamplayssport(A, B, 0) :- 
     athleteplaysforteam(C, A), 
     !. // Clause #7.

teamplayssport(A, B, 0.1631099794896504) :- !. // Clause #8.


% The flattened versions of these clauses:

flattened_teamplayssport(a, underscore, 0.15847470304921268) :-  /* #neg=34 #pos=17 */ 
   teamplaysagainstteam(uniqueVar6, a),
   athleteledsportsteam(underscore, uniqueVar6),
   athleteplaysforteam(underscore, a),
   athleteledsportsteam(underscore, a),
   teamalsoknownas(a, underscore),
   !. // Flattened version of clause #1.

flattened_teamplayssport(a, underscore, 0.20113001953343326) :-  /* #neg=134 #pos=78 */ 
   teamplaysagainstteam(uniqueVar7, a),
   athleteledsportsteam(underscore, uniqueVar7),
   athleteplaysforteam(underscore, a),
   athleteledsportsteam(underscore, a),
   !. // Flattened version of clause #2.

flattened_teamplayssport(a, underscore, 0) :- 
   teamplaysagainstteam(uniqueVar8, a),
   athleteledsportsteam(underscore, uniqueVar8),
   teamalsoknownas(uniqueVar8, uniqueVar8),
   !. // Flattened version of clause #3.

flattened_teamplayssport(a, underscore, 0.18154281778859668) :-  /* #neg=196 #pos=105 */ 
   teamplaysagainstteam(uniqueVar9, a),
   athleteledsportsteam(underscore, uniqueVar9),
   !. // Flattened version of clause #4.

flattened_teamplayssport(a, underscore, 0.24632264376067434) :-  /* #neg=6 #pos=4 */ 
   teamplaysagainstteam(a, uniqueVar10),
   athleteledsportsteam(underscore, uniqueVar10),
   !. // Flattened version of clause #5.

flattened_teamplayssport(a, underscore, 0.16651253146641565) :-  /* #neg=36 #pos=18 */ 
   athleteplaysforteam(uniqueVar11, a),
   athleteplaysforteam(uniqueVar11, underscore),
   !. // Flattened version of clause #6.

flattened_teamplayssport(a, underscore, 0) :- 
   athleteplaysforteam(underscore, a),
   !. // Flattened version of clause #7.

flattened_teamplayssport(underscore, underscore, 0.1631099794896504) :-  /* #neg=355 #pos=175 */ 
   !. // Flattened version of clause #8.


% The unique flattened literals:
%   teamalsoknownas(a, underscore)
%   teamalsoknownas(uniqueVar8, uniqueVar8)
%   athleteledsportsteam(underscore, uniqueVar6)
%   teamplaysagainstteam(uniqueVar9, a)
%   athleteledsportsteam(underscore, uniqueVar7)
%   teamplaysagainstteam(a, uniqueVar10)
%   athleteledsportsteam(underscore, uniqueVar9)
%   athleteledsportsteam(underscore, uniqueVar10)
%   athleteledsportsteam(underscore, a)
%   teamplaysagainstteam(uniqueVar7, a)
%   athleteplaysforteam(uniqueVar11, a)
%   athleteledsportsteam(underscore, uniqueVar8)
%   athleteplaysforteam(uniqueVar11, underscore)
%   teamplaysagainstteam(uniqueVar6, a)
%   teamplaysagainstteam(uniqueVar8, a)
%   athleteplaysforteam(underscore, a)

%%%%%  WILL-Produced Tree #3 @ 13:14:26 10/22/21.  [Using 32.310.368 memory cells.]  %%%%%

% FOR teamplayssport(A, B):
%   if ( teamplaysinleague(A, C) )
%   then if ( teamalsoknownas(A, D) )
%   | then return 0.18065920217282425;  // std dev = 6,708, 192,000 (wgt'ed) examples reached here.  /* #neg=120 #pos=72 */
%   | else if ( athleteplaysforteam(E, A), athleteplaysinleague(F, C) )
%   | | then if ( teamplaysinleague(G, C) )
%   | | | then return 0.13318281223928247;  // std dev = 9,308, 393,000 (wgt'ed) examples reached here.  /* #neg=264 #pos=129 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( teamplaysinleague(H, C) )
%   | | | then return 0.15697242034234868;  // std dev = 8,229, 298,000 (wgt'ed) examples reached here.  /* #neg=194 #pos=104 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( teamalsoknownas(A, I) )
%   | then return 0.1422941561140874;  // std dev = 3,652, 60,000 (wgt'ed) examples reached here.  /* #neg=40 #pos=20 */
%   | else if ( teamalsoknownas(A, J), athleteplaysforteam(K, J) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( teamplaysagainstteam(A, L), athleteplaysforteam(M, L) )
%   | | | then return 0.17312627465648073;  // std dev = 3,084, 41,000 (wgt'ed) examples reached here.  /* #neg=26 #pos=15 */
%   | | | else return 0.11716050002523694;  // std dev = 6,280, 185,000 (wgt'ed) examples reached here.  /* #neg=128 #pos=57 */


% Clauses:

teamplayssport(A, B, 0.18065920217282425) :- 
     teamplaysinleague(A, C), 
     teamalsoknownas(A, D), 
     !. // Clause #1.

teamplayssport(A, B, 0.13318281223928247) :- 
     teamplaysinleague(A, C), 
     athleteplaysforteam(D, A), 
     athleteplaysinleague(E, C), 
     teamplaysinleague(F, C), 
     !. // Clause #2.

teamplayssport(A, B, 0) :- 
     teamplaysinleague(A, C), 
     athleteplaysforteam(D, A), 
     athleteplaysinleague(E, C), 
     !. // Clause #3.

teamplayssport(A, B, 0.15697242034234868) :- 
     teamplaysinleague(A, C), 
     teamplaysinleague(D, C), 
     !. // Clause #4.

teamplayssport(A, B, 0) :- 
     teamplaysinleague(A, C), 
     !. // Clause #5.

teamplayssport(A, B, 0.1422941561140874) :- 
     teamalsoknownas(A, C), 
     !. // Clause #6.

teamplayssport(A, B, 0) :- 
     teamalsoknownas(A, C), 
     athleteplaysforteam(D, C), 
     !. // Clause #7.

teamplayssport(A, B, 0.17312627465648073) :- 
     teamplaysagainstteam(A, C), 
     athleteplaysforteam(D, C), 
     !. // Clause #8.

teamplayssport(A, B, 0.11716050002523694) :- !. // Clause #9.


% The flattened versions of these clauses:

flattened_teamplayssport(a, underscore, 0.18065920217282425) :-  /* #neg=120 #pos=72 */ 
   teamplaysinleague(a, underscore),
   teamalsoknownas(a, underscore),
   !. // Flattened version of clause #1.

flattened_teamplayssport(a, underscore, 0.13318281223928247) :-  /* #neg=264 #pos=129 */ 
   teamplaysinleague(a, uniqueVar12),
   athleteplaysforteam(underscore, a),
   athleteplaysinleague(underscore, uniqueVar12),
   teamplaysinleague(underscore, uniqueVar12),
   !. // Flattened version of clause #2.

flattened_teamplayssport(a, underscore, 0) :- 
   teamplaysinleague(a, uniqueVar13),
   athleteplaysforteam(underscore, a),
   athleteplaysinleague(underscore, uniqueVar13),
   !. // Flattened version of clause #3.

flattened_teamplayssport(a, underscore, 0.15697242034234868) :-  /* #neg=194 #pos=104 */ 
   teamplaysinleague(a, uniqueVar14),
   teamplaysinleague(underscore, uniqueVar14),
   !. // Flattened version of clause #4.

flattened_teamplayssport(a, underscore, 0) :- 
   teamplaysinleague(a, underscore),
   !. // Flattened version of clause #5.

flattened_teamplayssport(a, underscore, 0.1422941561140874) :-  /* #neg=40 #pos=20 */ 
   teamalsoknownas(a, underscore),
   !. // Flattened version of clause #6.

flattened_teamplayssport(a, underscore, 0) :- 
   teamalsoknownas(a, uniqueVar15),
   athleteplaysforteam(underscore, uniqueVar15),
   !. // Flattened version of clause #7.

flattened_teamplayssport(a, underscore, 0.17312627465648073) :-  /* #neg=26 #pos=15 */ 
   teamplaysagainstteam(a, uniqueVar16),
   athleteplaysforteam(underscore, uniqueVar16),
   !. // Flattened version of clause #8.

flattened_teamplayssport(underscore, underscore, 0.11716050002523694) :-  /* #neg=128 #pos=57 */ 
   !. // Flattened version of clause #9.


% The unique flattened literals:
%   teamplaysinleague(underscore, uniqueVar14)
%   athleteplaysforteam(underscore, uniqueVar16)
%   teamplaysinleague(underscore, uniqueVar12)
%   teamalsoknownas(a, underscore)
%   teamplaysinleague(a, underscore)
%   teamalsoknownas(a, uniqueVar15)
%   athleteplaysinleague(underscore, uniqueVar12)
%   teamplaysinleague(a, uniqueVar12)
%   teamplaysinleague(a, uniqueVar13)
%   teamplaysinleague(a, uniqueVar14)
%   athleteplaysinleague(underscore, uniqueVar13)
%   athleteplaysforteam(underscore, uniqueVar15)
%   teamplaysagainstteam(a, uniqueVar16)
%   athleteplaysforteam(underscore, a)

%%%%%  WILL-Produced Tree #4 @ 13:14:28 10/22/21.  [Using 32.575.488 memory cells.]  %%%%%

% FOR teamplayssport(A, B):
%   if ( teamplaysagainstteam(C, A) )
%   then if ( teamplaysinleague(C, D), athleteledsportsteam(E, C) )
%   | then return 0.1041565897225886;  // std dev = 0,468, 617,000 (wgt'ed) examples reached here.  /* #neg=417 #pos=200 */
%   | else return 0.10406228651707528;  // std dev = 0,467, 128,000 (wgt'ed) examples reached here.  /* #neg=87 #pos=41 */
%   else if ( teamplaysagainstteam(A, F) )
%   | then return 0.04808383459090473;  // std dev = 1,924, 19,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | else if ( teamplaysagainstteam(A, G) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( teamplaysinleague(A, H), athleteledsportsteam(I, A) )
%   | | | then return 0.11388279318430572;  // std dev = 1,156, 6,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return 0.11638181312365282;  // std dev = 9,984, 450,000 (wgt'ed) examples reached here.  /* #neg=301 #pos=149 */


% Clauses:

teamplayssport(A, B, 0.1041565897225886) :- 
     teamplaysagainstteam(C, A), 
     teamplaysinleague(C, D), 
     athleteledsportsteam(E, C), 
     !. // Clause #1.

teamplayssport(A, B, 0.10406228651707528) :- 
     teamplaysagainstteam(C, A), 
     !. // Clause #2.

teamplayssport(A, B, 0.04808383459090473) :- 
     teamplaysagainstteam(A, C), 
     !. // Clause #3.

teamplayssport(A, B, 0) :- 
     teamplaysagainstteam(A, C), 
     !. // Clause #4.

teamplayssport(A, B, 0.11388279318430572) :- 
     teamplaysinleague(A, C), 
     athleteledsportsteam(D, A), 
     !. // Clause #5.

teamplayssport(A, B, 0.11638181312365282) :- !. // Clause #6.


% The flattened versions of these clauses:

flattened_teamplayssport(a, underscore, 0.1041565897225886) :-  /* #neg=417 #pos=200 */ 
   teamplaysagainstteam(uniqueVar17, a),
   teamplaysinleague(uniqueVar17, underscore),
   athleteledsportsteam(underscore, uniqueVar17),
   !. // Flattened version of clause #1.

flattened_teamplayssport(a, underscore, 0.10406228651707528) :-  /* #neg=87 #pos=41 */ 
   teamplaysagainstteam(underscore, a),
   !. // Flattened version of clause #2.

flattened_teamplayssport(a, underscore, 0.04808383459090473) :-  /* #neg=14 #pos=5 */ 
   teamplaysagainstteam(a, underscore),
   !. // Flattened version of clause #3.

flattened_teamplayssport(a, underscore, 0) :- 
   teamplaysagainstteam(a, underscore),
   !. // Flattened version of clause #4.

flattened_teamplayssport(a, underscore, 0.11388279318430572) :-  /* #neg=4 #pos=2 */ 
   teamplaysinleague(a, underscore),
   athleteledsportsteam(underscore, a),
   !. // Flattened version of clause #5.

flattened_teamplayssport(underscore, underscore, 0.11638181312365282) :-  /* #neg=301 #pos=149 */ 
   !. // Flattened version of clause #6.


% The unique flattened literals:
%   teamplaysagainstteam(a, underscore)
%   teamplaysagainstteam(uniqueVar17, a)
%   athleteledsportsteam(underscore, a)
%   athleteledsportsteam(underscore, uniqueVar17)
%   teamplaysagainstteam(underscore, a)
%   teamplaysinleague(a, underscore)
%   teamplaysinleague(uniqueVar17, underscore)

%%%%%  WILL-Produced Tree #5 @ 13:14:30 10/22/21.  [Using 32.802.080 memory cells.]  %%%%%

% FOR teamplayssport(A, B):
%   if ( teamplaysinleague(A, C) )
%   then if ( teamplaysagainstteam(D, A) )
%   | then return 0.0864182815311815;  // std dev = 11,971, 654,000 (wgt'ed) examples reached here.  /* #neg=442 #pos=212 */
%   | else return 0.08811707848447813;  // std dev = 7,919, 286,000 (wgt'ed) examples reached here.  /* #neg=193 #pos=93 */
%   else if ( teamplaysagainstteam(A, E), teamplaysagainstteam(F, A) )
%   | then if ( teamplaysagainstteam(G, F), athleteledsportsteam(H, F) )
%   | | then return 0.10362288445245824;  // std dev = 2,808, 35,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=12 */
%   | | else return 0.09866616250607615;  // std dev = 2,587, 30,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=10 */
%   | else if ( teamplaysagainstteam(A, I), athleteledsportsteam(J, I) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( teamplaysagainstteam(A, K) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.13996800144014984;  // std dev = 6,638, 189,000 (wgt'ed) examples reached here.  /* #neg=119 #pos=70 */


% Clauses:

teamplayssport(A, B, 0.0864182815311815) :- 
     teamplaysinleague(A, C), 
     teamplaysagainstteam(D, A), 
     !. // Clause #1.

teamplayssport(A, B, 0.08811707848447813) :- 
     teamplaysinleague(A, C), 
     !. // Clause #2.

teamplayssport(A, B, 0.10362288445245824) :- 
     teamplaysagainstteam(A, C), 
     teamplaysagainstteam(D, A), 
     teamplaysagainstteam(E, D), 
     athleteledsportsteam(F, D), 
     !. // Clause #3.

teamplayssport(A, B, 0.09866616250607615) :- 
     teamplaysagainstteam(A, C), 
     teamplaysagainstteam(D, A), 
     !. // Clause #4.

teamplayssport(A, B, 0) :- 
     teamplaysagainstteam(A, C), 
     athleteledsportsteam(D, C), 
     !. // Clause #5.

teamplayssport(A, B, 0) :- 
     teamplaysagainstteam(A, C), 
     !. // Clause #6.

teamplayssport(A, B, 0.13996800144014984) :- !. // Clause #7.


% The flattened versions of these clauses:

flattened_teamplayssport(a, underscore, 0.0864182815311815) :-  /* #neg=442 #pos=212 */ 
   teamplaysinleague(a, underscore),
   teamplaysagainstteam(underscore, a),
   !. // Flattened version of clause #1.

flattened_teamplayssport(a, underscore, 0.08811707848447813) :-  /* #neg=193 #pos=93 */ 
   teamplaysinleague(a, underscore),
   !. // Flattened version of clause #2.

flattened_teamplayssport(a, underscore, 0.10362288445245824) :-  /* #neg=23 #pos=12 */ 
   teamplaysagainstteam(a, underscore),
   teamplaysagainstteam(uniqueVar18, a),
   teamplaysagainstteam(underscore, uniqueVar18),
   athleteledsportsteam(underscore, uniqueVar18),
   !. // Flattened version of clause #3.

flattened_teamplayssport(a, underscore, 0.09866616250607615) :-  /* #neg=20 #pos=10 */ 
   teamplaysagainstteam(a, underscore),
   teamplaysagainstteam(underscore, a),
   !. // Flattened version of clause #4.

flattened_teamplayssport(a, underscore, 0) :- 
   teamplaysagainstteam(a, uniqueVar19),
   athleteledsportsteam(underscore, uniqueVar19),
   !. // Flattened version of clause #5.

flattened_teamplayssport(a, underscore, 0) :- 
   teamplaysagainstteam(a, underscore),
   !. // Flattened version of clause #6.

flattened_teamplayssport(underscore, underscore, 0.13996800144014984) :-  /* #neg=119 #pos=70 */ 
   !. // Flattened version of clause #7.


% The unique flattened literals:
%   teamplaysagainstteam(underscore, uniqueVar18)
%   teamplaysagainstteam(a, uniqueVar19)
%   teamplaysagainstteam(a, underscore)
%   teamplaysagainstteam(underscore, a)
%   teamplaysinleague(a, underscore)
%   teamplaysagainstteam(uniqueVar18, a)
%   athleteledsportsteam(underscore, uniqueVar19)
%   athleteledsportsteam(underscore, uniqueVar18)

%%%%%  WILL-Produced Tree #6 @ 13:14:32 10/22/21.  [Using 32.972.032 memory cells.]  %%%%%

% FOR teamplayssport(A, B):
%   if ( teamplaysagainstteam(C, A), athleteledsportsteam(D, C) )
%   then if ( teamalsoknownas(C, E), teamplaysagainstteam(F, E) )
%   | then if ( teamalsoknownas(F, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.0973230676719184;  // std dev = 9,388, 387,000 (wgt'ed) examples reached here.  /* #neg=251 #pos=136 */
%   | else return 0.05938950680272647;  // std dev = 6,629, 204,000 (wgt'ed) examples reached here.  /* #neg=140 #pos=64 */
%   else if ( athleteplaysforteam(G, A) )
%   | then if ( athleteplaysforteam(G, H) )
%   | | then return 0.07056101177176896;  // std dev = 3,780, 66,000 (wgt'ed) examples reached here.  /* #neg=45 #pos=21 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( athleteledsportsteam(I, J) )
%   | | then return 0.07781180274987723;  // std dev = 10,838, 529,000 (wgt'ed) examples reached here.  /* #neg=353 #pos=176 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


% Clauses:

teamplayssport(A, B, 0) :- 
     teamplaysagainstteam(C, A), 
     athleteledsportsteam(D, C), 
     teamalsoknownas(C, E), 
     teamplaysagainstteam(F, E), 
     teamalsoknownas(F, F), 
     !. // Clause #1.

teamplayssport(A, B, 0.0973230676719184) :- 
     teamplaysagainstteam(C, A), 
     athleteledsportsteam(D, C), 
     teamalsoknownas(C, E), 
     teamplaysagainstteam(F, E), 
     !. // Clause #2.

teamplayssport(A, B, 0.05938950680272647) :- 
     teamplaysagainstteam(C, A), 
     athleteledsportsteam(D, C), 
     !. // Clause #3.

teamplayssport(A, B, 0.07056101177176896) :- 
     athleteplaysforteam(C, A), 
     athleteplaysforteam(C, D), 
     !. // Clause #4.

teamplayssport(A, B, 0) :- 
     athleteplaysforteam(C, A), 
     !. // Clause #5.

teamplayssport(A, B, 0.07781180274987723) :- 
     athleteledsportsteam(C, D), 
     !. // Clause #6.

teamplayssport(A, B, 0) :- !. // Clause #7.


% The flattened versions of these clauses:

flattened_teamplayssport(a, underscore, 0) :- 
   teamplaysagainstteam(uniqueVar20, a),
   athleteledsportsteam(underscore, uniqueVar20),
   teamalsoknownas(uniqueVar20, uniqueVar21),
   teamplaysagainstteam(uniqueVar22, uniqueVar21),
   teamalsoknownas(uniqueVar22, uniqueVar22),
   !. // Flattened version of clause #1.

flattened_teamplayssport(a, underscore, 0.0973230676719184) :-  /* #neg=251 #pos=136 */ 
   teamplaysagainstteam(uniqueVar23, a),
   athleteledsportsteam(underscore, uniqueVar23),
   teamalsoknownas(uniqueVar23, uniqueVar24),
   teamplaysagainstteam(underscore, uniqueVar24),
   !. // Flattened version of clause #2.

flattened_teamplayssport(a, underscore, 0.05938950680272647) :-  /* #neg=140 #pos=64 */ 
   teamplaysagainstteam(uniqueVar25, a),
   athleteledsportsteam(underscore, uniqueVar25),
   !. // Flattened version of clause #3.

flattened_teamplayssport(a, underscore, 0.07056101177176896) :-  /* #neg=45 #pos=21 */ 
   athleteplaysforteam(uniqueVar26, a),
   athleteplaysforteam(uniqueVar26, underscore),
   !. // Flattened version of clause #4.

flattened_teamplayssport(a, underscore, 0) :- 
   athleteplaysforteam(underscore, a),
   !. // Flattened version of clause #5.

flattened_teamplayssport(underscore, underscore, 0.07781180274987723) :-  /* #neg=353 #pos=176 */ 
   athleteledsportsteam(underscore, underscore),
   !. // Flattened version of clause #6.

flattened_teamplayssport(underscore, underscore, 0) :- 
   !. // Flattened version of clause #7.


% The unique flattened literals:
%   teamplaysagainstteam(uniqueVar25, a)
%   athleteledsportsteam(underscore, underscore)
%   teamplaysagainstteam(underscore, uniqueVar24)
%   teamplaysagainstteam(uniqueVar22, uniqueVar21)
%   teamalsoknownas(uniqueVar23, uniqueVar24)
%   teamplaysagainstteam(uniqueVar23, a)
%   teamalsoknownas(uniqueVar22, uniqueVar22)
%   athleteledsportsteam(underscore, uniqueVar25)
%   athleteplaysforteam(uniqueVar26, a)
%   athleteledsportsteam(underscore, uniqueVar20)
%   athleteplaysforteam(uniqueVar26, underscore)
%   teamplaysagainstteam(uniqueVar20, a)
%   athleteplaysforteam(underscore, a)
%   teamalsoknownas(uniqueVar20, uniqueVar21)
%   athleteledsportsteam(underscore, uniqueVar23)

%%%%%  WILL-Produced Tree #7 @ 13:14:35 10/22/21.  [Using 33.079.552 memory cells.]  %%%%%

% FOR teamplayssport(A, B):
%   if ( teamplaysagainstteam(C, A), athleteplaysforteam(D, C) )
%   then if ( teamplaysagainstteam(E, C), teamplaysagainstteam(A, F) )
%   | then return 0.07131959348866533;  // std dev = 11,841, 623,000 (wgt'ed) examples reached here.  /* #neg=410 #pos=213 */
%   | else if ( athleteledsportsteam(G, A), teamalsoknownas(C, H) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.09755597340236112;  // std dev = 3,472, 52,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=19 */
%   else if ( athleteledsportsteam(I, J) )
%   | then return 0.10103249485838253;  // std dev = 10,188, 446,000 (wgt'ed) examples reached here.  /* #neg=281 #pos=165 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


% Clauses:

teamplayssport(A, B, 0.07131959348866533) :- 
     teamplaysagainstteam(C, A), 
     athleteplaysforteam(D, C), 
     teamplaysagainstteam(E, C), 
     teamplaysagainstteam(A, F), 
     !. // Clause #1.

teamplayssport(A, B, 0) :- 
     teamplaysagainstteam(C, A), 
     athleteplaysforteam(D, C), 
     athleteledsportsteam(E, A), 
     teamalsoknownas(C, F), 
     !. // Clause #2.

teamplayssport(A, B, 0.09755597340236112) :- 
     teamplaysagainstteam(C, A), 
     athleteplaysforteam(D, C), 
     !. // Clause #3.

teamplayssport(A, B, 0.10103249485838253) :- 
     athleteledsportsteam(C, D), 
     !. // Clause #4.

teamplayssport(A, B, 0) :- !. // Clause #5.


% The flattened versions of these clauses:

flattened_teamplayssport(a, underscore, 0.07131959348866533) :-  /* #neg=410 #pos=213 */ 
   teamplaysagainstteam(uniqueVar27, a),
   athleteplaysforteam(underscore, uniqueVar27),
   teamplaysagainstteam(underscore, uniqueVar27),
   teamplaysagainstteam(a, underscore),
   !. // Flattened version of clause #1.

flattened_teamplayssport(a, underscore, 0) :- 
   teamplaysagainstteam(uniqueVar28, a),
   athleteplaysforteam(underscore, uniqueVar28),
   athleteledsportsteam(underscore, a),
   teamalsoknownas(uniqueVar28, underscore),
   !. // Flattened version of clause #2.

flattened_teamplayssport(a, underscore, 0.09755597340236112) :-  /* #neg=33 #pos=19 */ 
   teamplaysagainstteam(uniqueVar29, a),
   athleteplaysforteam(underscore, uniqueVar29),
   !. // Flattened version of clause #3.

flattened_teamplayssport(underscore, underscore, 0.10103249485838253) :-  /* #neg=281 #pos=165 */ 
   athleteledsportsteam(underscore, underscore),
   !. // Flattened version of clause #4.

flattened_teamplayssport(underscore, underscore, 0) :- 
   !. // Flattened version of clause #5.


% The unique flattened literals:
%   teamalsoknownas(uniqueVar28, underscore)
%   teamplaysagainstteam(a, underscore)
%   teamplaysagainstteam(uniqueVar28, a)
%   athleteplaysforteam(underscore, uniqueVar27)
%   athleteledsportsteam(underscore, a)
%   athleteplaysforteam(underscore, uniqueVar29)
%   athleteledsportsteam(underscore, underscore)
%   teamplaysagainstteam(underscore, uniqueVar27)
%   teamplaysagainstteam(uniqueVar29, a)
%   teamplaysagainstteam(uniqueVar27, a)
%   athleteplaysforteam(underscore, uniqueVar28)

%%%%%  WILL-Produced Tree #8 @ 13:14:38 10/22/21.  [Using 33.360.176 memory cells.]  %%%%%

% FOR teamplayssport(A, B):
%   if ( teamplaysagainstteam(A, C), teamplaysagainstteam(C, D) )
%   then if ( teamplaysagainstteam(D, E), teamplaysinleague(C, F) )
%   | then return 0.05678292372437425;  // std dev = 11,953, 636,000 (wgt'ed) examples reached here.  /* #neg=419 #pos=217 */
%   | else if ( athleteplaysforteam(G, A) )
%   | | then return 0.21908623206982816;  // std dev = 1,416, 8,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | else return 0.07113756412729182;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else if ( teamplaysagainstteam(H, A), athleteplaysforteam(I, A) )
%   | then return 0.04903048666584941;  // std dev = 0,471, 24,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=8 */
%   | else if ( teamplaysagainstteam(A, J) )
%   | | then return -0.03327068587927145;  // std dev = 1,223, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else if ( teamplaysagainstteam(A, K), athleteledsportsteam(L, A) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.05764775538930694;  // std dev = 10,370, 474,000 (wgt'ed) examples reached here.  /* #neg=309 #pos=165 */


% Clauses:

teamplayssport(A, B, 0.05678292372437425) :- 
     teamplaysagainstteam(A, C), 
     teamplaysagainstteam(C, D), 
     teamplaysagainstteam(D, E), 
     teamplaysinleague(C, F), 
     !. // Clause #1.

teamplayssport(A, B, 0.21908623206982816) :- 
     teamplaysagainstteam(A, C), 
     teamplaysagainstteam(C, D), 
     athleteplaysforteam(E, A), 
     !. // Clause #2.

teamplayssport(A, B, 0.07113756412729182) :- 
     teamplaysagainstteam(A, C), 
     teamplaysagainstteam(C, D), 
     !. // Clause #3.

teamplayssport(A, B, 0.04903048666584941) :- 
     teamplaysagainstteam(C, A), 
     athleteplaysforteam(D, A), 
     !. // Clause #4.

teamplayssport(A, B, -0.03327068587927145) :- 
     teamplaysagainstteam(A, C), 
     !. // Clause #5.

teamplayssport(A, B, 0) :- 
     teamplaysagainstteam(A, C), 
     athleteledsportsteam(D, A), 
     !. // Clause #6.

teamplayssport(A, B, 0.05764775538930694) :- !. // Clause #7.


% The flattened versions of these clauses:

flattened_teamplayssport(a, underscore, 0.05678292372437425) :-  /* #neg=419 #pos=217 */ 
   teamplaysagainstteam(a, uniqueVar30),
   teamplaysagainstteam(uniqueVar30, uniqueVar31),
   teamplaysagainstteam(uniqueVar31, underscore),
   teamplaysinleague(uniqueVar30, underscore),
   !. // Flattened version of clause #1.

flattened_teamplayssport(a, underscore, 0.21908623206982816) :-  /* #neg=4 #pos=4 */ 
   teamplaysagainstteam(a, uniqueVar32),
   teamplaysagainstteam(uniqueVar32, underscore),
   athleteplaysforteam(underscore, a),
   !. // Flattened version of clause #2.

flattened_teamplayssport(a, underscore, 0.07113756412729182) :-  /* #neg=2 #pos=1 */ 
   teamplaysagainstteam(a, uniqueVar33),
   teamplaysagainstteam(uniqueVar33, underscore),
   !. // Flattened version of clause #3.

flattened_teamplayssport(a, underscore, 0.04903048666584941) :-  /* #neg=16 #pos=8 */ 
   teamplaysagainstteam(underscore, a),
   athleteplaysforteam(underscore, a),
   !. // Flattened version of clause #4.

flattened_teamplayssport(a, underscore, -0.03327068587927145) :-  /* #neg=6 #pos=2 */ 
   teamplaysagainstteam(a, underscore),
   !. // Flattened version of clause #5.

flattened_teamplayssport(a, underscore, 0) :- 
   teamplaysagainstteam(a, underscore),
   athleteledsportsteam(underscore, a),
   !. // Flattened version of clause #6.

flattened_teamplayssport(underscore, underscore, 0.05764775538930694) :-  /* #neg=309 #pos=165 */ 
   !. // Flattened version of clause #7.


% The unique flattened literals:
%   teamplaysagainstteam(a, underscore)
%   teamplaysagainstteam(a, uniqueVar32)
%   teamplaysagainstteam(uniqueVar32, underscore)
%   teamplaysagainstteam(uniqueVar31, underscore)
%   athleteledsportsteam(underscore, a)
%   teamplaysinleague(uniqueVar30, underscore)
%   teamplaysagainstteam(underscore, a)
%   teamplaysagainstteam(uniqueVar33, underscore)
%   teamplaysagainstteam(uniqueVar30, uniqueVar31)
%   teamplaysagainstteam(a, uniqueVar30)
%   athleteplaysforteam(underscore, a)
%   teamplaysagainstteam(a, uniqueVar33)

%%%%%  WILL-Produced Tree #9 @ 13:14:41 10/22/21.  [Using 33.540.568 memory cells.]  %%%%%

% FOR teamplayssport(A, B):
%   if ( teamplaysagainstteam(C, A) )
%   then if ( teamplaysagainstteam(C, D) )
%   | then return 0.030818053116894548;  // std dev = 12,730, 734,000 (wgt'ed) examples reached here.  /* #neg=493 #pos=241 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( teamplaysagainstteam(E, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( teamplaysagainstteam(A, F), teamalsoknownas(F, G) )
%   | | then if ( teamalsoknownas(A, H) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.7371294079937134;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( teamalsoknownas(A, I) )
%   | | | then return 0.007576047725512209;  // std dev = 5,309, 131,000 (wgt'ed) examples reached here.  /* #neg=90 #pos=41 */
%   | | | else return 0.043227031702530526;  // std dev = 8,646, 331,000 (wgt'ed) examples reached here.  /* #neg=217 #pos=114 */


% Clauses:

teamplayssport(A, B, 0.030818053116894548) :- 
     teamplaysagainstteam(C, A), 
     teamplaysagainstteam(C, D), 
     !. // Clause #1.

teamplayssport(A, B, 0) :- 
     teamplaysagainstteam(C, A), 
     !. // Clause #2.

teamplayssport(A, B, 0) :- 
     teamplaysagainstteam(C, A), 
     !. // Clause #3.

teamplayssport(A, B, 0) :- 
     teamplaysagainstteam(A, C), 
     teamalsoknownas(C, D), 
     teamalsoknownas(A, E), 
     !. // Clause #4.

teamplayssport(A, B, 0.7371294079937134) :- 
     teamplaysagainstteam(A, C), 
     teamalsoknownas(C, D), 
     !. // Clause #5.

teamplayssport(A, B, 0.007576047725512209) :- 
     teamalsoknownas(A, C), 
     !. // Clause #6.

teamplayssport(A, B, 0.043227031702530526) :- !. // Clause #7.


% The flattened versions of these clauses:

flattened_teamplayssport(a, underscore, 0.030818053116894548) :-  /* #neg=493 #pos=241 */ 
   teamplaysagainstteam(uniqueVar34, a),
   teamplaysagainstteam(uniqueVar34, underscore),
   !. // Flattened version of clause #1.

flattened_teamplayssport(a, underscore, 0) :- 
   teamplaysagainstteam(underscore, a),
   !. // Flattened version of clause #2.

flattened_teamplayssport(a, underscore, 0) :- 
   teamplaysagainstteam(underscore, a),
   !. // Flattened version of clause #3.

flattened_teamplayssport(a, underscore, 0) :- 
   teamplaysagainstteam(a, uniqueVar35),
   teamalsoknownas(uniqueVar35, underscore),
   teamalsoknownas(a, underscore),
   !. // Flattened version of clause #4.

flattened_teamplayssport(a, underscore, 0.7371294079937134) :-  /* #pos=1 */ 
   teamplaysagainstteam(a, uniqueVar36),
   teamalsoknownas(uniqueVar36, underscore),
   !. // Flattened version of clause #5.

flattened_teamplayssport(a, underscore, 0.007576047725512209) :-  /* #neg=90 #pos=41 */ 
   teamalsoknownas(a, underscore),
   !. // Flattened version of clause #6.

flattened_teamplayssport(underscore, underscore, 0.043227031702530526) :-  /* #neg=217 #pos=114 */ 
   !. // Flattened version of clause #7.


% The unique flattened literals:
%   teamplaysagainstteam(uniqueVar34, a)
%   teamalsoknownas(uniqueVar35, underscore)
%   teamalsoknownas(a, underscore)
%   teamplaysagainstteam(underscore, a)
%   teamplaysagainstteam(uniqueVar34, underscore)
%   teamplaysagainstteam(a, uniqueVar35)
%   teamalsoknownas(uniqueVar36, underscore)
%   teamplaysagainstteam(a, uniqueVar36)

%%%%%  WILL-Produced Tree #10 @ 13:14:44 10/22/21.  [Using 33.709.528 memory cells.]  %%%%%

% FOR teamplayssport(A, B):
%   if ( athleteplaysforteam(C, A) )
%   then if ( athleteplaysforteam(C, D) )
%   | then if ( teamplaysinleague(D, E) )
%   | | then return 0.048754326116184146;  // std dev = 10,491, 483,000 (wgt'ed) examples reached here.  /* #neg=313 #pos=170 */
%   | | else return 0.01564765804863692;  // std dev = 2,454, 27,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=9 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( athleteledsportsteam(F, A) )
%   | then if ( teamalsoknownas(A, G), teamplaysinleague(A, H) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.04241457919109211;  // std dev = 2,685, 32,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=11 */
%   | else if ( teamalsoknownas(A, I), teamplaysagainstteam(A, J) )
%   | | then return 0.1250796669328336;  // std dev = 0,494, 26,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=11 */
%   | | else return 0.031663672155692574;  // std dev = 11,371, 576,000 (wgt'ed) examples reached here.  /* #neg=380 #pos=196 */


% Clauses:

teamplayssport(A, B, 0.048754326116184146) :- 
     athleteplaysforteam(C, A), 
     athleteplaysforteam(C, D), 
     teamplaysinleague(D, E), 
     !. // Clause #1.

teamplayssport(A, B, 0.01564765804863692) :- 
     athleteplaysforteam(C, A), 
     athleteplaysforteam(C, D), 
     !. // Clause #2.

teamplayssport(A, B, 0) :- 
     athleteplaysforteam(C, A), 
     !. // Clause #3.

teamplayssport(A, B, 0) :- 
     athleteledsportsteam(C, A), 
     teamalsoknownas(A, D), 
     teamplaysinleague(A, E), 
     !. // Clause #4.

teamplayssport(A, B, 0.04241457919109211) :- 
     athleteledsportsteam(C, A), 
     !. // Clause #5.

teamplayssport(A, B, 0.1250796669328336) :- 
     teamalsoknownas(A, C), 
     teamplaysagainstteam(A, D), 
     !. // Clause #6.

teamplayssport(A, B, 0.031663672155692574) :- !. // Clause #7.


% The flattened versions of these clauses:

flattened_teamplayssport(a, underscore, 0.048754326116184146) :-  /* #neg=313 #pos=170 */ 
   athleteplaysforteam(uniqueVar37, a),
   athleteplaysforteam(uniqueVar37, uniqueVar38),
   teamplaysinleague(uniqueVar38, underscore),
   !. // Flattened version of clause #1.

flattened_teamplayssport(a, underscore, 0.01564765804863692) :-  /* #neg=18 #pos=9 */ 
   athleteplaysforteam(uniqueVar39, a),
   athleteplaysforteam(uniqueVar39, underscore),
   !. // Flattened version of clause #2.

flattened_teamplayssport(a, underscore, 0) :- 
   athleteplaysforteam(underscore, a),
   !. // Flattened version of clause #3.

flattened_teamplayssport(a, underscore, 0) :- 
   athleteledsportsteam(underscore, a),
   teamalsoknownas(a, underscore),
   teamplaysinleague(a, underscore),
   !. // Flattened version of clause #4.

flattened_teamplayssport(a, underscore, 0.04241457919109211) :-  /* #neg=21 #pos=11 */ 
   athleteledsportsteam(underscore, a),
   !. // Flattened version of clause #5.

flattened_teamplayssport(a, underscore, 0.1250796669328336) :-  /* #neg=15 #pos=11 */ 
   teamalsoknownas(a, underscore),
   teamplaysagainstteam(a, underscore),
   !. // Flattened version of clause #6.

flattened_teamplayssport(underscore, underscore, 0.031663672155692574) :-  /* #neg=380 #pos=196 */ 
   !. // Flattened version of clause #7.


% The unique flattened literals:
%   teamplaysagainstteam(a, underscore)
%   athleteplaysforteam(uniqueVar37, a)
%   athleteledsportsteam(underscore, a)
%   athleteplaysforteam(uniqueVar39, underscore)
%   teamalsoknownas(a, underscore)
%   teamplaysinleague(a, underscore)
%   athleteplaysforteam(uniqueVar37, uniqueVar38)
%   teamplaysinleague(uniqueVar38, underscore)
%   athleteplaysforteam(underscore, a)
%   athleteplaysforteam(uniqueVar39, a)


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%  Final call for computing score for teamplayssport.  %%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

stepLength_tree1(1.0).
stepLength_tree2(1.0).
stepLength_tree3(1.0).
stepLength_tree4(1.0).
stepLength_tree5(1.0).
stepLength_tree6(1.0).
stepLength_tree7(1.0).
stepLength_tree8(1.0).
stepLength_tree9(1.0).
stepLength_tree10(1.0).

logPrior(-1.8).
teamplayssport(D, E, Total) :- // A general accessor. 
   teamplayssport(D, E, 1000000, Total), !.
teamplayssport(D, E, Total) :- waitHere("This should not fail", teamplayssport(D, E, Total)).

teamplayssport(D, E, TreesToUse, Total) :- // A tree-limited accessor (e.g., for tuning the number of trees to use).
   logPrior(LogPrior),
   getScore_teamplayssport_tree1(D, E, TreesToUse, Total1),
   getScore_teamplayssport_tree2(D, E, TreesToUse, Total2),
   getScore_teamplayssport_tree3(D, E, TreesToUse, Total3),
   getScore_teamplayssport_tree4(D, E, TreesToUse, Total4),
   getScore_teamplayssport_tree5(D, E, TreesToUse, Total5),
   getScore_teamplayssport_tree6(D, E, TreesToUse, Total6),
   getScore_teamplayssport_tree7(D, E, TreesToUse, Total7),
   getScore_teamplayssport_tree8(D, E, TreesToUse, Total8),
   getScore_teamplayssport_tree9(D, E, TreesToUse, Total9),
   getScore_teamplayssport_tree10(D, E, TreesToUse, Total10),
   Total is LogPrior + Total1 + Total2 + Total3 + Total4 + Total5 + Total6 + Total7 + Total8 + Total9 + Total10,
   !.
teamplayssport(D, E, TreesToUse, Total) :- waitHere("This should not fail", teamplayssport(D, E, TreesToUse, Total)).

getScore_teamplayssport_tree1(D, E, TreesToUse, 0.0) :- 1 > TreesToUse, !.
getScore_teamplayssport_tree1(D, E, TreesToUse, Total1) :- teamplayssport_tree1(D, E, Total), stepLength_tree1(StepLen), Total1 is Total * StepLen.

getScore_teamplayssport_tree2(D, E, TreesToUse, 0.0) :- 2 > TreesToUse, !.
getScore_teamplayssport_tree2(D, E, TreesToUse, Total2) :- teamplayssport_tree2(D, E, Total), stepLength_tree2(StepLen), Total2 is Total * StepLen.

getScore_teamplayssport_tree3(D, E, TreesToUse, 0.0) :- 3 > TreesToUse, !.
getScore_teamplayssport_tree3(D, E, TreesToUse, Total3) :- teamplayssport_tree3(D, E, Total), stepLength_tree3(StepLen), Total3 is Total * StepLen.

getScore_teamplayssport_tree4(D, E, TreesToUse, 0.0) :- 4 > TreesToUse, !.
getScore_teamplayssport_tree4(D, E, TreesToUse, Total4) :- teamplayssport_tree4(D, E, Total), stepLength_tree4(StepLen), Total4 is Total * StepLen.

getScore_teamplayssport_tree5(D, E, TreesToUse, 0.0) :- 5 > TreesToUse, !.
getScore_teamplayssport_tree5(D, E, TreesToUse, Total5) :- teamplayssport_tree5(D, E, Total), stepLength_tree5(StepLen), Total5 is Total * StepLen.

getScore_teamplayssport_tree6(D, E, TreesToUse, 0.0) :- 6 > TreesToUse, !.
getScore_teamplayssport_tree6(D, E, TreesToUse, Total6) :- teamplayssport_tree6(D, E, Total), stepLength_tree6(StepLen), Total6 is Total * StepLen.

getScore_teamplayssport_tree7(D, E, TreesToUse, 0.0) :- 7 > TreesToUse, !.
getScore_teamplayssport_tree7(D, E, TreesToUse, Total7) :- teamplayssport_tree7(D, E, Total), stepLength_tree7(StepLen), Total7 is Total * StepLen.

getScore_teamplayssport_tree8(D, E, TreesToUse, 0.0) :- 8 > TreesToUse, !.
getScore_teamplayssport_tree8(D, E, TreesToUse, Total8) :- teamplayssport_tree8(D, E, Total), stepLength_tree8(StepLen), Total8 is Total * StepLen.

getScore_teamplayssport_tree9(D, E, TreesToUse, 0.0) :- 9 > TreesToUse, !.
getScore_teamplayssport_tree9(D, E, TreesToUse, Total9) :- teamplayssport_tree9(D, E, Total), stepLength_tree9(StepLen), Total9 is Total * StepLen.

getScore_teamplayssport_tree10(D, E, TreesToUse, 0.0) :- 10 > TreesToUse, !.
getScore_teamplayssport_tree10(D, E, TreesToUse, Total10) :- teamplayssport_tree10(D, E, Total), stepLength_tree10(StepLen), Total10 is Total * StepLen.

flattenedLiteralsInThisSetOfTrees(teamplayssport, 87, [
   teamplaysagainstteam(uniqueVar17, a),
   athleteledsportsteam(underscore, underscore),
   teamplaysinleague(a, underscore),
   teamalsoknownas(a, uniqueVar15),
   teamplaysagainstteam(uniqueVar33, underscore),
   teamplaysagainstteam(uniqueVar4, underscore),
   athleteledsportsteam(underscore, uniqueVar6),
   teamalsoknownas(uniqueVar22, uniqueVar22),
   athleteledsportsteam(underscore, uniqueVar7),
   teamplaysagainstteam(a, uniqueVar33),
   athleteledsportsteam(underscore, uniqueVar10),
   athleteplaysforteam(uniqueVar26, a),
   athleteplaysforteam(uniqueVar11, underscore),
   athleteledsportsteam(underscore, uniqueVar20),
   athleteledsportsteam(underscore, uniqueVar19),
   teamplaysagainstteam(a, uniqueVar35),
   athleteplaysforteam(uniqueVar37, uniqueVar38),
   teamplaysagainstteam(a, uniqueVar36),
   teamalsoknownas(uniqueVar20, uniqueVar21),
   teamalsoknownas(uniqueVar35, underscore),
   teamalsoknownas(a, underscore),
   teamplaysagainstteam(uniqueVar18, a),
   teamplaysagainstteam(uniqueVar22, uniqueVar21),
   teamplaysagainstteam(uniqueVar23, a),
   teamplaysagainstteam(uniqueVar30, uniqueVar31),
   teamalsoknownas(a, uniqueVar3),
   athleteplaysforteam(uniqueVar39, a),
   teamplaysagainstteam(underscore, uniqueVar18),
   teamplaysagainstteam(uniqueVar34, a),
   teamplaysinleague(a, uniqueVar14),
   teamalsoknownas(a, uniqueVar1),
   athleteledsportsteam(underscore, a),
   teamplaysagainstteam(uniqueVar7, a),
   athleteledsportsteam(underscore, uniqueVar25),
   teamplaysagainstteam(uniqueVar31, underscore),
   athleteplaysforteam(uniqueVar37, a),
   athleteledsportsteam(underscore, uniqueVar8),
   athleteplaysinleague(underscore, uniqueVar13),
   teamplaysagainstteam(uniqueVar8, a),
   athleteplaysforteam(uniqueVar26, underscore),
   teamplaysagainstteam(uniqueVar29, a),
   teamplaysagainstteam(a, uniqueVar30),
   teamplaysagainstteam(uniqueVar25, a),
   teamplaysagainstteam(uniqueVar5, underscore),
   teamplaysagainstteam(a, underscore),
   athleteplaysforteam(underscore, uniqueVar27),
   athleteplaysforteam(underscore, uniqueVar16),
   teamplaysinleague(underscore, uniqueVar12),
   athleteledsportsteam(underscore, uniqueVar17),
   teamplaysagainstteam(underscore, uniqueVar24),
   teamplaysinleague(uniqueVar30, underscore),
   teamalsoknownas(uniqueVar23, uniqueVar24),
   teamplaysagainstteam(uniqueVar34, underscore),
   teamplaysinleague(uniqueVar17, underscore),
   athleteplaysinleague(underscore, uniqueVar12),
   teamplaysagainstteam(a, uniqueVar10),
   teamplaysagainstteam(a, uniqueVar19),
   teamalsoknownas(uniqueVar28, underscore),
   teamplaysagainstteam(uniqueVar3, uniqueVar4),
   teamplaysagainstteam(uniqueVar28, a),
   teamplaysinleague(a, uniqueVar13),
   teamplaysagainstteam(uniqueVar32, underscore),
   athleteplaysforteam(underscore, uniqueVar15),
   teamplaysagainstteam(underscore, uniqueVar27),
   teamplaysagainstteam(uniqueVar6, a),
   teamalsoknownas(uniqueVar36, underscore),
   teamplaysinleague(uniqueVar38, underscore),
   athleteplaysforteam(underscore, uniqueVar28),
   teamplaysagainstteam(uniqueVar1, uniqueVar2),
   teamplaysinleague(underscore, uniqueVar14),
   athleteledsportsteam(underscore, uniqueVar2),
   teamalsoknownas(uniqueVar8, uniqueVar8),
   athleteplaysforteam(underscore, uniqueVar29),
   teamplaysagainstteam(uniqueVar9, a),
   athleteledsportsteam(underscore, uniqueVar18),
   teamplaysinleague(a, uniqueVar12),
   athleteledsportsteam(underscore, uniqueVar9),
   teamalsoknownas(a, uniqueVar5),
   teamplaysagainstteam(a, uniqueVar32),
   athleteplaysforteam(uniqueVar11, a),
   athleteplaysforteam(uniqueVar39, underscore),
   teamplaysagainstteam(underscore, a),
   teamplaysagainstteam(a, uniqueVar16),
   athleteplaysforteam(underscore, a),
   teamplaysagainstteam(uniqueVar20, a),
   athleteledsportsteam(underscore, uniqueVar23),
   teamplaysagainstteam(uniqueVar27, a)]).
