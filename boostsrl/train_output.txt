args[0] = -l
args[1] = -refine
args[3] = -train
args[5] = -target
args[7] = -trees

% Starting a LEARNING run of bRDN.

% Calling SETUP.
% Running on host: thais-Inspiron-5457

% Switching to VarIndicator = uppercase.

% Unset'ing VarIndicator.

Resetting the LazyGroundNthArgumentClauseIndex.

% Calling ILPouterLoop from createRegressionOuterLooper.

% getInputArgWithDefaultValue: args=[train/train_pos.txt, train/train_neg.txt, train/train_bk.txt, train/train_facts.txt]
%  for N=0: args[N]=train/train_pos.txt

% getInputArgWithDefaultValue: args=[train/train_pos.txt, train/train_neg.txt, train/train_bk.txt, train/train_facts.txt]
%  for N=1: args[N]=train/train_neg.txt

% getInputArgWithDefaultValue: args=[train/train_pos.txt, train/train_neg.txt, train/train_bk.txt, train/train_facts.txt]
%  for N=2: args[N]=train/train_bk.txt

% getInputArgWithDefaultValue: args=[train/train_pos.txt, train/train_neg.txt, train/train_bk.txt, train/train_facts.txt]
%  for N=3: args[N]=train/train_facts.txt

% Welcome to the WILL ILP/SRL systems.


% Switching to VarIndicator = uppercase.

% Unset'ing VarIndicator.
% Reading background theory from dir: null
% Load '../background.txt'.

% Switching to VarIndicator = uppercase.

***** Warning: % Since this is the first setting of the notation for variables, will keep:
%   variableIndicator = uppercase *****


***** Warning: % Since this is the first setting of the notation for variables, will keep:
%   variableIndicator = uppercase *****

% [ LazyGroundClauseIndex ]  Building full index for mode/1 with 1 assertions.
% LoadAllModes() called.  Currently loaded modes: []
% [ LazyGroundClauseIndex ]  Building full index for sameAs/2 with 2 assertions.
% [ LazyGroundNthArgumentClauseIndex ]  Argument 1:  Building full index for exp/3.
% [ LazyGroundNthArgumentClauseIndex ]  Argument 0:  Building full index for log/3.
% LoadAllLibraries() called.  Currently loaded libraries: [listsInLogic, differentInLogic, modes_arithmeticInLogic, inlines_comparisonInLogic, modes_listsInLogic, inlines_differentInLogic, modes_differentInLogic, arithmeticInLogic, inlines_listsInLogic, modes_comparisonInLogic, comparisonInLogic, inlines_arithmeticInLogic]

%  Read the facts.
%  Have read 9.691 facts.
% Have read 397 examples from 'train' [train/train*].
% Have read 159.991 examples from 'train' [train/train*].

%  LearnOneClause initialized.

% The outer looper has been created.

% Initializing the ILP inner looper.

% NEW target:                 teamplayssport(D, E)
%  targetPred:                teamplayssport/2
%  targetArgTypes:            signature = [const, const], types = [+sportsteam, +sport]
%  targets:                   [teamplayssport(D, E)]
%  targetPredicates:          [teamplayssport/2]
%  targetArgSpecs:            [[D[+sportsteam], E[+sport]]]
%  variablesInTargets:        [[D, E]]

% Started collecting constants

% Collecting the types of constants.

%   *** WARNING ***  Constant 'clevelandindians' is already marked as being of types = [sportsteam];
%          type = 'athlete' may be added if not already known.
%  PredicateName = 'athleteplayssport', from 'athleteplayssport(clevelandindians, baseball)',
%  which has types = [signature = [const, const], types = [+athlete, +sport], signature = [const, const], types = [+athlete, -sport], signature = [const, const], types = [-athlete, +sport]]
%   Other warnings with this predicate and this new type are not reported in order to keep this printout small.  Use dontComplainAboutMultipleTypes to override.

% Looking at the training examples to see if any types of new constants can be inferred.

%   *** WARNING ***  Constant 'bostonceltics' is already marked as being of types = [sportsteam];
%          type = 'sport' may be added if not already known.
%  PredicateName = 'teamplayssport', from 'teamplayssport(stlouisblues, bostonceltics)',
%  which has types = [signature = [const, const], types = [+sportsteam, +sport], signature = [const, const], types = [+sportsteam, -sport], signature = [const, const], types = [-sportsteam, +sport], signature = [const, const], types = [+sportsteam, `sport], signature = [const, const], types = [`sportsteam, +sport]]
%   Other warnings with this predicate and this new type are not reported in order to keep this printout small.  Use dontComplainAboutMultipleTypes to override.
% Time to collect constants: 258 milliseconds
% Time to collect examples: 0 seconds

% Read 397 pos examples and 159.991 neg examples.
% Time to init learnOneClause: 292 milliseconds
% Old dirnull
Setting model dir

% Have 397 'raw' positive examples and kept 397.
% Have 159.991 'raw' negative examples and kept 159.991.

% processing backup's for teamplayssport
%  POS EX = 397
%  NEG EX = 159.991

% Memory usage by WILLSetup (just counts # targets?):
%  |backupPosExamples| = 1
%  |backupNegExamples| = 1
%  |predicatesAsFacts| = 0
%  |addedToFactBase|   = 0
train/models/
File: train/advice.txt doesnt exist.Hence no advice loaded
% Learning 10 trees in this iteration for teamplayssport

% Learn model for: teamplayssport
% Kept 397 of the 397 positive examples.
% Kept 832 of the 159.991 negative examples.
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.21868050456787125
Set score:0.0025
% Dataset size: 1.229
Computing probabilities
prob time:4 milliseconds
No hidden examples for : teamplayssport
Time to build dataset: 7 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.21868050456785432
Set score:0.0025
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Have these 10 positive seeds: 22 29 62 135 281 403 520 540 543 646
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% LearnOneClause Parameters:
%   Targets (5):
%    teamplayssport(+sportsteam, +sport),
%    teamplayssport(+sportsteam, -sport),
%    teamplayssport(-sportsteam, +sport),
%    teamplayssport(+sportsteam, `sport),
%    teamplayssport(`sportsteam, +sport)
%  Modes (57):
%    athleteledsportsteam(+athlete, +sportsteam),
%    athleteledsportsteam(+athlete, -sportsteam),
%    athleteledsportsteam(-athlete, +sportsteam),
%    athleteplaysforteam(+athlete, +sportsteam),
%    athleteplaysforteam(+athlete, -sportsteam),
%    athleteplaysforteam(-athlete, +sportsteam),
%    athleteplaysinleague(+athlete, +sportsleague),
%    athleteplaysinleague(+athlete, -sportsleague),
%    athleteplaysinleague(-athlete, +sportsleague),
%    athleteplayssport(+athlete, +sport),
%    athleteplayssport(+athlete, -sport),
%    athleteplayssport(-athlete, +sport),
%    teamalsoknownas(+sportsteam, +sportsteam),
%    teamalsoknownas(+sportsteam, -sportsteam),
%    teamalsoknownas(-sportsteam, +sportsteam),
%    teamplaysagainstteam(+sportsteam, +sportsteam),
%    teamplaysagainstteam(+sportsteam, -sportsteam),
%    teamplaysagainstteam(-sportsteam, +sportsteam),
%    teamplaysinleague(+sportsteam, +sportsleague),
%    teamplaysinleague(+sportsteam, -sportsleague),
%    teamplaysinleague(-sportsteam, +sportsleague),
%    addList(+willList, #willNumber),
%    multiplyList(+willList, #willNumber),
%    abs(+willNumber, &willNumber),
%    minus(+willNumber, &willNumber),
%    minus(+willNumber, +willNumber, &willNumber),
%    plus(+willNumber, +willNumber, &willNumber),
%    mult(+willNumber, +willNumber, &willNumber),
%    div(+willNumber, +willNumber, &willNumber),
%    allNumbers(+willList),
%    positiveNumber(+willNumber),
%    negativeNumber(+willNumber),
%    in0toDot001(+willNumber),
%    in0toDot01(+willNumber),
%    in0toDot1(+willNumber),
%    in0to1(+willNumber),
%    in0to10(+willNumber),
%    in0to100(+willNumber),
%    in0to1000(+willNumber),
%    equalWithTolerance(+willNumber, +willNumber, &willNumber),
%    greaterOrEqualDifference(+willNumber, +willNumber, &willNumber),
%    smallerOrEqualDifference(+willNumber, +willNumber, &willNumber),
%    isaEqualTolerance(+willNumber),
%    lessThan(+willNumber, +willNumber),
%    greaterThan(+willNumber, +willNumber),
%    lessThanOrEqual(+willNumber, +willNumber),
%    greaterThanOrEqual(+willNumber, +willNumber),
%    inBetweenOO(+willNumber, +willNumber, +willNumber),
%    inBetweenCO(+willNumber, +willNumber, +willNumber),
%    inBetweenOC(+willNumber, +willNumber, +willNumber),
%    inBetweenCC(+willNumber, +willNumber, +willNumber),
%    memberOfList(+willAnything, +willList),
%    firstInList(+willList, &willAnything),
%    restOfList(+willList, &willList),
%    positionInList(+willAnything, +willList, &willNumber),
%    nthInList(+willNumber, +willList, &willAnything),
%    lengthOfList(+willList, &willNumber)

% target           = teamplayssport(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  teamplayssport(_, _).  [covers 1.229,0/1.229,0 pos, 0,0/0,0 neg]
% Most-general root: teamplayssport(_, _).  [covers 1.229,0/1.229,0 pos, 0,0/0,0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #1, bodyLen=0] 'teamplayssport(_, _).  [covers 1.229,0/1.229,0 pos, 0,0/0,0 neg]' score=-Infinity
% [ LazyGroundNthArgumentClauseIndex ]  Argument 1:  Building full index for athleteledsportsteam/2.
% [ LazyGroundNthArgumentClauseIndex ]  Argument 1:  Building full index for athleteplaysforteam/2.
% [ LazyGroundNthArgumentClauseIndex ]  Argument 1:  Building full index for athleteplayssport/2.
% [ LazyGroundClauseIndex ]  Building full index for teamalsoknownas/2 with 316 assertions.
% [ LazyGroundNthArgumentClauseIndex ]  Argument 0:  Building full index for teamalsoknownas/2.
% [ LazyGroundNthArgumentClauseIndex ]  Argument 1:  Building full index for teamalsoknownas/2.
% [ LazyGroundClauseIndex ]  Building full index for teamplaysagainstteam/2 with 2.874 assertions.
% [ LazyGroundNthArgumentClauseIndex ]  Argument 0:  Building full index for teamplaysagainstteam/2.
% [ LazyGroundNthArgumentClauseIndex ]  Argument 1:  Building full index for teamplaysagainstteam/2.
% [ LazyGroundNthArgumentClauseIndex ]  Argument 0:  Building full index for teamplaysinleague/2.
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 4 variant children.  Sending 7 items to OPEN for evaluation and possible insertion.
% Have created 7 valid-on-seeds descendants and have picked up 2 bad extensions.
%     Score = -268,752629 (regressionFit = 268,752628, penalties=1.23E-6) for clause:  teamplayssport(A, _) :- athleteledsportsteam(_, A).  [covers 338,0/1.229,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -268,752629): teamplayssport(A, _) :- athleteledsportsteam(_, A).  [covers 338,0/1.229,0 pos, 0,0/0,0 neg]
%     Score = -268,746561 (regressionFit = 268,746559, penalties=1.23E-6) for clause:  teamplayssport(A, _) :- athleteplaysforteam(_, A).  [covers 560,0/1.229,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -268,746561): teamplayssport(A, _) :- athleteplaysforteam(_, A).  [covers 560,0/1.229,0 pos, 0,0/0,0 neg]
%     Score = -17,438903 (regressionFit = 17,438902, penalties=1.23E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(_, A).  [covers 409,0/1.229,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -17,438903): teamplayssport(_, A) :- athleteplayssport(_, A).  [covers 409,0/1.229,0 pos, 0,0/0,0 neg]
%     Score = -268,756779 (regressionFit = 268,756778, penalties=1.23E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(A, _).  [covers 283,0/1.229,0 pos, 0,0/0,0 neg]
%     Score = -268,751149 (regressionFit = 268,751148, penalties=1.23E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, _).  [covers 698,0/1.229,0 pos, 0,0/0,0 neg]
%     Score = -268,755275 (regressionFit = 268,755274, penalties=1.23E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(_, A).  [covers 749,0/1.229,0 pos, 0,0/0,0 neg]
%     Score = -268,756058 (regressionFit = 268,756057, penalties=1.23E-6) for clause:  teamplayssport(A, _) :- teamplaysinleague(A, _).  [covers 942,0/1.229,0 pos, 0,0/0,0 neg]

% Consider expanding [#2 of outerLoop #1, bodyLen=1] 'teamplayssport(_, A) :- athleteplayssport(_, A).  [covers 409,0/1.229,0 pos, 0,0/0,0 neg]' score=-17.438903370856647
% [ LazyGroundClauseIndex ]  Building full index for athleteledsportsteam/2 with 421 assertions.
% [ LazyGroundNthArgumentClauseIndex ]  Argument 0:  Building full index for athleteledsportsteam/2.
% [ LazyGroundClauseIndex ]  Building full index for athleteplaysforteam/2 with 1.458 assertions.
% [ LazyGroundNthArgumentClauseIndex ]  Argument 0:  Building full index for athleteplaysforteam/2.
% [ LazyGroundNthArgumentClauseIndex ]  Argument 0:  Building full index for athleteplaysinleague/2.
% [ LazyGroundNthArgumentClauseIndex ]  Argument 0:  Building full index for athleteplayssport/2.
%  At # nodes expanded = 2, |OPEN| = 6.  Pruned 8 variant children.  Sending 11 items to OPEN for evaluation and possible insertion.
% Have created 11 valid-on-seeds descendants and have picked up 3 bad extensions.
%     Score = -27,311686 (regressionFit = 27,311684, penalties=2.24E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteledsportsteam(B, _).  [covers 379,0/1.229,0 pos, 0,0/0,0 neg]
%     Score = -220,322995 (regressionFit = 220,322993, penalties=2.24E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), athleteledsportsteam(_, A).  [covers 113,0/1.229,0 pos, 0,0/0,0 neg]
%     Score = -222,647889 (regressionFit = 222,647887, penalties=2.0300000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysforteam(C, A).  [covers 93,0/1.229,0 pos, 0,0/0,0 neg]
%     Score = -28,311442 (regressionFit = 28,311440, penalties=2.24E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysforteam(B, _).  [covers 384,0/1.229,0 pos, 0,0/0,0 neg]
%     Score = -181,539016 (regressionFit = 181,539014, penalties=2.24E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), athleteplaysforteam(_, A).  [covers 187,0/1.229,0 pos, 0,0/0,0 neg]
%     Score = -14,754076 (regressionFit = 14,754074, penalties=2.24E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _).  [covers 400,0/1.229,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -14,754076): teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _).  [covers 400,0/1.229,0 pos, 0,0/0,0 neg]
%     Score = -17,438904 (regressionFit = 17,438902, penalties=2.24E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(_, A), athleteplayssport(_, A).  [covers 409,0/1.229,0 pos, 0,0/0,0 neg]
%     Score = -226,405579 (regressionFit = 226,405577, penalties=2.24E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(A, _).  [covers 94,0/1.229,0 pos, 0,0/0,0 neg]
%     Score = -156,470994 (regressionFit = 156,470992, penalties=2.24E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(A, _).  [covers 235,0/1.229,0 pos, 0,0/0,0 neg]
%     Score = -144,777678 (regressionFit = 144,777676, penalties=2.24E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(_, A).  [covers 252,0/1.229,0 pos, 0,0/0,0 neg]
%     Score = -95,071141 (regressionFit = 95,071138, penalties=2.24E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _).  [covers 316,0/1.229,0 pos, 0,0/0,0 neg]

% Consider expanding [#3 of outerLoop #1, bodyLen=1] 'teamplayssport(A, _) :- athleteplaysforteam(_, A).  [covers 560,0/1.229,0 pos, 0,0/0,0 neg]' score=-268.746560593659
% [ LazyGroundClauseIndex ]  Building full index for athleteplayssport/2 with 1.718 assertions.
%  At # nodes expanded = 3, |OPEN| = 5.  Pruned 8 variant children.  Sending 11 items to OPEN for evaluation and possible insertion.
% Have created 11 valid-on-seeds descendants and have picked up 2 bad extensions.
%     Score = -268,756785 (regressionFit = 268,756783, penalties=2.1300000000000004E-6) for clause:  teamplayssport(A, _) :- athleteplaysforteam(B, A), athleteledsportsteam(B, A).  [covers 268,0/1.229,0 pos, 0,0/0,0 neg]
%     Score = -268,729526 (regressionFit = 268,729524, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- athleteplaysforteam(B, A), athleteledsportsteam(B, _).  [covers 327,0/1.229,0 pos, 0,0/0,0 neg]
%     Score = -268,755930 (regressionFit = 268,755927, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- athleteplaysforteam(_, A), athleteledsportsteam(_, A).  [covers 298,0/1.229,0 pos, 0,0/0,0 neg]
%     Score = -268,746562 (regressionFit = 268,746559, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- athleteplaysforteam(_, A), athleteplaysforteam(_, A).  [covers 560,0/1.229,0 pos, 0,0/0,0 neg]
%     Score = -268,724977 (regressionFit = 268,724975, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- athleteplaysforteam(B, A), athleteplaysinleague(B, _).  [covers 390,0/1.229,0 pos, 0,0/0,0 neg]
%     Score = -222,647889 (regressionFit = 222,647887, penalties=2.0300000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplaysforteam(C, A), athleteplayssport(C, B).  [covers 93,0/1.229,0 pos, 0,0/0,0 neg]
%     Score = -268,728748 (regressionFit = 268,728746, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- athleteplaysforteam(B, A), athleteplayssport(B, _).  [covers 377,0/1.229,0 pos, 0,0/0,0 neg]
%     Score = -181,539016 (regressionFit = 181,539014, penalties=2.24E-6) for clause:  teamplayssport(A, B) :- athleteplaysforteam(_, A), athleteplayssport(_, B).  [covers 187,0/1.229,0 pos, 0,0/0,0 neg]
%     Score = -268,746597 (regressionFit = 268,746595, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- athleteplaysforteam(_, A), teamplaysagainstteam(A, _).  [covers 529,0/1.229,0 pos, 0,0/0,0 neg]
%     Score = -268,752133 (regressionFit = 268,752130, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- athleteplaysforteam(_, A), teamplaysagainstteam(_, A).  [covers 546,0/1.229,0 pos, 0,0/0,0 neg]
%     Score = -268,737706 (regressionFit = 268,737704, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- athleteplaysforteam(_, A), teamplaysinleague(A, _).  [covers 534,0/1.229,0 pos, 0,0/0,0 neg]

% Consider expanding [#4 of outerLoop #1, bodyLen=1] 'teamplayssport(A, _) :- teamplaysagainstteam(A, _).  [covers 698,0/1.229,0 pos, 0,0/0,0 neg]' score=-268.7511492504437
%  At # nodes expanded = 4, |OPEN| = 4.  Pruned 14 variant children.  Sending 14 items to OPEN for evaluation and possible insertion.
% Have created 14 valid-on-seeds descendants and have picked up 6 bad extensions.
%     Score = -268,747752 (regressionFit = 268,747750, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, _), athleteledsportsteam(_, A).  [covers 330,0/1.229,0 pos, 0,0/0,0 neg]
%     Score = -268,631772 (regressionFit = 268,631770, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, B), athleteledsportsteam(_, B).  [covers 592,0/1.229,0 pos, 0,0/0,0 neg]
%     Score = -268,746597 (regressionFit = 268,746595, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, _), athleteplaysforteam(_, A).  [covers 529,0/1.229,0 pos, 0,0/0,0 neg]
%     Score = -268,748621 (regressionFit = 268,748619, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, B), athleteplaysforteam(_, B).  [covers 674,0/1.229,0 pos, 0,0/0,0 neg]
%     Score = -156,470994 (regressionFit = 156,470992, penalties=2.24E-6) for clause:  teamplayssport(A, B) :- teamplaysagainstteam(A, _), athleteplayssport(_, B).  [covers 235,0/1.229,0 pos, 0,0/0,0 neg]
%     Score = -268,706593 (regressionFit = 268,706590, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, B), teamalsoknownas(B, _).  [covers 523,0/1.229,0 pos, 0,0/0,0 neg]
%     Score = -268,730791 (regressionFit = 268,730789, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, B), teamalsoknownas(_, B).  [covers 529,0/1.229,0 pos, 0,0/0,0 neg]
%     Score = -268,750155 (regressionFit = 268,750153, penalties=2.0300000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, B), teamplaysagainstteam(B, A).  [covers 655,0/1.229,0 pos, 0,0/0,0 neg]
%     Score = -268,751150 (regressionFit = 268,751148, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, _), teamplaysagainstteam(A, _).  [covers 698,0/1.229,0 pos, 0,0/0,0 neg]
%     Score = -268,746925 (regressionFit = 268,746923, penalties=2.1400000000000003E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, B), teamplaysagainstteam(B, _).  [covers 693,0/1.229,0 pos, 0,0/0,0 neg]
%     Score = -268,755171 (regressionFit = 268,755169, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, _), teamplaysagainstteam(_, A).  [covers 681,0/1.229,0 pos, 0,0/0,0 neg]
%     Score = -268,751150 (regressionFit = 268,751148, penalties=2.1400000000000003E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, B), teamplaysagainstteam(_, B).  [covers 698,0/1.229,0 pos, 0,0/0,0 neg]
%     Score = -268,726583 (regressionFit = 268,726581, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, _), teamplaysinleague(A, _).  [covers 635,0/1.229,0 pos, 0,0/0,0 neg]
%     Score = -268,736100 (regressionFit = 268,736098, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, B), teamplaysinleague(B, _).  [covers 686,0/1.229,0 pos, 0,0/0,0 neg]

% Consider expanding [#5 of outerLoop #1, bodyLen=1] 'teamplayssport(A, _) :- athleteledsportsteam(_, A).  [covers 338,0/1.229,0 pos, 0,0/0,0 neg]' score=-268.7526294185279
%  At # nodes expanded = 5, |OPEN| = 3.  Pruned 8 variant children.  Sending 10 items to OPEN for evaluation and possible insertion.
% Have created 10 valid-on-seeds descendants and have picked up 3 bad extensions.
%     Score = -268,752630 (regressionFit = 268,752628, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- athleteledsportsteam(_, A), athleteledsportsteam(_, A).  [covers 338,0/1.229,0 pos, 0,0/0,0 neg]
%     Score = -268,756785 (regressionFit = 268,756783, penalties=2.1300000000000004E-6) for clause:  teamplayssport(A, _) :- athleteledsportsteam(B, A), athleteplaysforteam(B, A).  [covers 268,0/1.229,0 pos, 0,0/0,0 neg]
%     Score = -268,747275 (regressionFit = 268,747272, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- athleteledsportsteam(B, A), athleteplaysforteam(B, _).  [covers 327,0/1.229,0 pos, 0,0/0,0 neg]
%     Score = -268,755930 (regressionFit = 268,755927, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- athleteledsportsteam(_, A), athleteplaysforteam(_, A).  [covers 298,0/1.229,0 pos, 0,0/0,0 neg]
%     Score = -268,753832 (regressionFit = 268,753830, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- athleteledsportsteam(B, A), athleteplaysinleague(B, _).  [covers 291,0/1.229,0 pos, 0,0/0,0 neg]
%     Score = -268,752839 (regressionFit = 268,752837, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- athleteledsportsteam(B, A), athleteplayssport(B, _).  [covers 282,0/1.229,0 pos, 0,0/0,0 neg]
%     Score = -220,322995 (regressionFit = 220,322993, penalties=2.24E-6) for clause:  teamplayssport(A, B) :- athleteledsportsteam(_, A), athleteplayssport(_, B).  [covers 113,0/1.229,0 pos, 0,0/0,0 neg]
%     Score = -268,747752 (regressionFit = 268,747750, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- athleteledsportsteam(_, A), teamplaysagainstteam(A, _).  [covers 330,0/1.229,0 pos, 0,0/0,0 neg]
%     Score = -268,748216 (regressionFit = 268,748214, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- athleteledsportsteam(_, A), teamplaysagainstteam(_, A).  [covers 333,0/1.229,0 pos, 0,0/0,0 neg]
%     Score = -268,748666 (regressionFit = 268,748664, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- athleteledsportsteam(_, A), teamplaysinleague(A, _).  [covers 336,0/1.229,0 pos, 0,0/0,0 neg]

% Consider expanding [#6 of outerLoop #1, bodyLen=1] 'teamplayssport(A, _) :- teamplaysagainstteam(_, A).  [covers 749,0/1.229,0 pos, 0,0/0,0 neg]' score=-268.75527492826734
%  At # nodes expanded = 6, |OPEN| = 2.  Pruned 14 variant children.  Sending 14 items to OPEN for evaluation and possible insertion.
% Have created 14 valid-on-seeds descendants and have picked up 6 bad extensions.
%     Score = -268,748216 (regressionFit = 268,748214, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(_, A), athleteledsportsteam(_, A).  [covers 333,0/1.229,0 pos, 0,0/0,0 neg]
%     Score = -268,693077 (regressionFit = 268,693075, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(B, A), athleteledsportsteam(_, B).  [covers 633,0/1.229,0 pos, 0,0/0,0 neg]
%     Score = -268,752133 (regressionFit = 268,752130, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(_, A), athleteplaysforteam(_, A).  [covers 546,0/1.229,0 pos, 0,0/0,0 neg]
%     Score = -268,717355 (regressionFit = 268,717353, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(B, A), athleteplaysforteam(_, B).  [covers 729,0/1.229,0 pos, 0,0/0,0 neg]
%     Score = -144,777678 (regressionFit = 144,777676, penalties=2.24E-6) for clause:  teamplayssport(A, B) :- teamplaysagainstteam(_, A), athleteplayssport(_, B).  [covers 252,0/1.229,0 pos, 0,0/0,0 neg]
%     Score = -268,687749 (regressionFit = 268,687747, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(B, A), teamalsoknownas(B, _).  [covers 553,0/1.229,0 pos, 0,0/0,0 neg]
%     Score = -268,625942 (regressionFit = 268,625940, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(B, A), teamalsoknownas(_, B).  [covers 549,0/1.229,0 pos, 0,0/0,0 neg]
%     Score = -268,750155 (regressionFit = 268,750153, penalties=2.0300000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(B, A), teamplaysagainstteam(A, B).  [covers 655,0/1.229,0 pos, 0,0/0,0 neg]
%     Score = -268,755171 (regressionFit = 268,755169, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(_, A), teamplaysagainstteam(A, _).  [covers 681,0/1.229,0 pos, 0,0/0,0 neg]
%     Score = -268,755276 (regressionFit = 268,755274, penalties=2.1400000000000003E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(B, A), teamplaysagainstteam(B, _).  [covers 749,0/1.229,0 pos, 0,0/0,0 neg]
%     Score = -268,755276 (regressionFit = 268,755274, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(_, A), teamplaysagainstteam(_, A).  [covers 749,0/1.229,0 pos, 0,0/0,0 neg]
%     Score = -268,755276 (regressionFit = 268,755274, penalties=2.1400000000000003E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(B, A), teamplaysagainstteam(_, B).  [covers 749,0/1.229,0 pos, 0,0/0,0 neg]
%     Score = -268,738034 (regressionFit = 268,738032, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(_, A), teamplaysinleague(A, _).  [covers 664,0/1.229,0 pos, 0,0/0,0 neg]
%     Score = -268,743808 (regressionFit = 268,743806, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(B, A), teamplaysinleague(B, _).  [covers 737,0/1.229,0 pos, 0,0/0,0 neg]

% Consider expanding [#7 of outerLoop #1, bodyLen=1] 'teamplayssport(A, _) :- teamplaysinleague(A, _).  [covers 942,0/1.229,0 pos, 0,0/0,0 neg]' score=-268.75605810358246
% [ LazyGroundNthArgumentClauseIndex ]  Argument 1:  Building full index for athleteplaysinleague/2.
% [ LazyGroundNthArgumentClauseIndex ]  Argument 1:  Building full index for teamplaysinleague/2.
%  At # nodes expanded = 7, |OPEN| = 1.  Pruned 4 variant children.  Sending 7 items to OPEN for evaluation and possible insertion.
% Have created 7 valid-on-seeds descendants and have picked up 2 bad extensions.
%     Score = -268,748666 (regressionFit = 268,748664, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysinleague(A, _), athleteledsportsteam(_, A).  [covers 336,0/1.229,0 pos, 0,0/0,0 neg]
%     Score = -268,737706 (regressionFit = 268,737704, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysinleague(A, _), athleteplaysforteam(_, A).  [covers 534,0/1.229,0 pos, 0,0/0,0 neg]
%     Score = -268,735027 (regressionFit = 268,735025, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysinleague(A, B), athleteplaysinleague(_, B).  [covers 714,0/1.229,0 pos, 0,0/0,0 neg]
%     Score = -95,071141 (regressionFit = 95,071138, penalties=2.24E-6) for clause:  teamplayssport(A, B) :- teamplaysinleague(A, _), athleteplayssport(_, B).  [covers 316,0/1.229,0 pos, 0,0/0,0 neg]
%     Score = -268,726583 (regressionFit = 268,726581, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysinleague(A, _), teamplaysagainstteam(A, _).  [covers 635,0/1.229,0 pos, 0,0/0,0 neg]
%     Score = -268,738034 (regressionFit = 268,738032, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysinleague(A, _), teamplaysagainstteam(_, A).  [covers 664,0/1.229,0 pos, 0,0/0,0 neg]
%     Score = -268,756059 (regressionFit = 268,756057, penalties=2.1400000000000003E-6) for clause:  teamplayssport(A, _) :- teamplaysinleague(A, B), teamplaysinleague(_, B).  [covers 942,0/1.229,0 pos, 0,0/0,0 neg]

% Consider expanding [#8 of outerLoop #1, bodyLen=1] 'teamplayssport(A, _) :- teamalsoknownas(A, _).  [covers 283,0/1.229,0 pos, 0,0/0,0 neg]' score=-268.7567788841006
%  At # nodes expanded = 8, |OPEN| = 0.  Pruned 14 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants and have picked up 12 bad extensions.
%     Score = -226,405579 (regressionFit = 226,405577, penalties=2.24E-6) for clause:  teamplayssport(A, B) :- teamalsoknownas(A, _), athleteplayssport(_, B).  [covers 94,0/1.229,0 pos, 0,0/0,0 neg]
%     Score = -268,736687 (regressionFit = 268,736685, penalties=2.1400000000000003E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(A, B), teamalsoknownas(B, _).  [covers 251,0/1.229,0 pos, 0,0/0,0 neg]
%     Score = -268,756780 (regressionFit = 268,756778, penalties=2.1400000000000003E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(A, B), teamalsoknownas(_, B).  [covers 283,0/1.229,0 pos, 0,0/0,0 neg]
%     Score = -268,750888 (regressionFit = 268,750886, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(A, B), teamplaysinleague(B, _).  [covers 267,0/1.229,0 pos, 0,0/0,0 neg]

% The best node found: teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _).  [covers 400,0/1.229,0 pos, 0,0/0,0 neg]

% The best node found: teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _).  [covers 400,0/1.229,0 pos, 0,0/0,0 neg]

% Expanding node at Level 0 with score = 1,797693e+308.
% Will extend: teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _).  [covers 400,0/1.229,0 pos, 0,0/0,0 neg]
% Path: 0;
Comparing variance: 0.02199375000000515 to score=0.0025 #egs=400.0
Comparing variance: 0.007185252335060947 to score=0.0025 #egs=829.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 400,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,021994)
%         ILP node to extend: teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _).  [covers 400,0/1.229,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 1 and with score = -0,021994) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 829,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,007185)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 1 and with score = -0,007185) into the LAST position (#2) in the search queue.

% Time for loop #1: 2,501 seconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _).  [covers 400,0/1.229,0 pos, 0,0/0,0 neg]
% This clause covers 400 positive examples, of which 400 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _).  [covers 400,0/400,0 pos, 0,0/0,0 neg]'
%     Score = -14,754076 (regressionFit = 14,754074, penalties=2.24E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _).  [covers 400,0/400,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 49 89 115 124 160 196 255 293 356 378
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Consider expanding [#1 of outerLoop #2, bodyLen=2] 'teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _).  [covers 400,0/400,0 pos, 0,0/0,0 neg]' score=-14.754076425767586
% [ LazyGroundClauseIndex ]  Building full index for teamplaysinleague/2 with 1.502 assertions.
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 10 variant children.  Sending 15 items to OPEN for evaluation and possible insertion.
% Have created 15 valid-on-seeds descendants and have picked up 2 bad extensions.
%     Score = -8,753052 (regressionFit = 8,753049, penalties=3.1400000000000004E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, A).  [covers 72,0/400,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -8,753052): teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, A).  [covers 72,0/400,0 pos, 0,0/0,0 neg]
%     Score = -8,172136 (regressionFit = 8,172132, penalties=3.35E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteledsportsteam(B, _).  [covers 379,0/400,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -8,172136): teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteledsportsteam(B, _).  [covers 379,0/400,0 pos, 0,0/0,0 neg]
%     Score = -8,794921 (regressionFit = 8,794918, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(_, A).  [covers 109,0/400,0 pos, 0,0/0,0 neg]
%     Score = -8,738713 (regressionFit = 8,738710, penalties=3.1400000000000004E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteplaysforteam(C, A).  [covers 90,0/400,0 pos, 0,0/0,0 neg]
%     Score = -8,172136 (regressionFit = 8,172132, penalties=3.35E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteplaysforteam(B, _).  [covers 379,0/400,0 pos, 0,0/0,0 neg]
%     Score = -8,797412 (regressionFit = 8,797409, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteplaysforteam(_, A).  [covers 182,0/400,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000008E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, C), athleteplaysinleague(_, C).  [covers 400,0/400,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteplayssport(_, A).  [covers 400,0/400,0 pos, 0,0/0,0 neg]
%     Score = -8,797434 (regressionFit = 8,797431, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(A, _).  [covers 92,0/400,0 pos, 0,0/0,0 neg]
%     Score = -8,795057 (regressionFit = 8,795054, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(_, A).  [covers 72,0/400,0 pos, 0,0/0,0 neg]
%     Score = -8,762638 (regressionFit = 8,762634, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(A, _).  [covers 229,0/400,0 pos, 0,0/0,0 neg]
%     Score = -8,774842 (regressionFit = 8,774839, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(_, A).  [covers 246,0/400,0 pos, 0,0/0,0 neg]
%     Score = -8,755054 (regressionFit = 8,755051, penalties=3.0400000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), teamplaysinleague(A, D).  [covers 180,0/400,0 pos, 0,0/0,0 neg]
%     Score = -8,797494 (regressionFit = 8,797491, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysinleague(A, _).  [covers 310,0/400,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, C), teamplaysinleague(_, C).  [covers 400,0/400,0 pos, 0,0/0,0 neg]

% Consider expanding [#2 of outerLoop #2, bodyLen=3] 'teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteledsportsteam(B, _).  [covers 379,0/400,0 pos, 0,0/0,0 neg]' score=-8.172135527410948
%  At # nodes expanded = 2, |OPEN| = 14.  Pruned 26 variant children.  Sending 26 items to OPEN for evaluation and possible insertion.
% Have created 26 valid-on-seeds descendants and have picked up 6 bad extensions.
%     Score = -8,172137 (regressionFit = 8,172132, penalties=4.3600000000000015E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteledsportsteam(B, _), athleteledsportsteam(B, _).  [covers 379,0/400,0 pos, 0,0/0,0 neg]
%     Score = -8,773531 (regressionFit = 8,773527, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), athleteledsportsteam(_, A).  [covers 105,0/400,0 pos, 0,0/0,0 neg]
%     Score = -8,172136 (regressionFit = 8,172132, penalties=4.260000000000001E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteledsportsteam(B, C), athleteledsportsteam(_, C).  [covers 379,0/400,0 pos, 0,0/0,0 neg]
%     Score = -8,757489 (regressionFit = 8,757485, penalties=4.250000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), athleteplaysforteam(C, A).  [covers 66,0/400,0 pos, 0,0/0,0 neg]
%     Score = -8,172136 (regressionFit = 8,172132, penalties=4.250000000000001E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteledsportsteam(B, C), athleteplaysforteam(B, C).  [covers 379,0/400,0 pos, 0,0/0,0 neg]
%     Score = -8,172137 (regressionFit = 8,172132, penalties=4.4600000000000005E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteledsportsteam(B, _), athleteplaysforteam(B, _).  [covers 379,0/400,0 pos, 0,0/0,0 neg]
%     Score = -8,760202 (regressionFit = 8,760197, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), athleteplaysforteam(_, A).  [covers 174,0/400,0 pos, 0,0/0,0 neg]
%     Score = -8,172137 (regressionFit = 8,172132, penalties=4.360000000000001E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteledsportsteam(B, C), athleteplaysforteam(_, C).  [covers 379,0/400,0 pos, 0,0/0,0 neg]
%     Score = -8,172136 (regressionFit = 8,172132, penalties=4.260000000000001E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, C), athleteledsportsteam(B, _), athleteplaysinleague(_, C).  [covers 379,0/400,0 pos, 0,0/0,0 neg]
%     Score = -8,172137 (regressionFit = 8,172132, penalties=4.3600000000000015E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteledsportsteam(B, _), athleteplayssport(_, A).  [covers 379,0/400,0 pos, 0,0/0,0 neg]
%     Score = -8,791778 (regressionFit = 8,791774, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), teamalsoknownas(A, D).  [covers 11,0/400,0 pos, 0,0/0,0 neg]
%     Score = -8,786063 (regressionFit = 8,786059, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamalsoknownas(A, _).  [covers 83,0/400,0 pos, 0,0/0,0 neg]
%     Score = -8,172137 (regressionFit = 8,172132, penalties=4.360000000000001E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteledsportsteam(B, C), teamalsoknownas(C, _).  [covers 379,0/400,0 pos, 0,0/0,0 neg]
%     Score = -8,793575 (regressionFit = 8,793571, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamalsoknownas(_, A).  [covers 65,0/400,0 pos, 0,0/0,0 neg]
%     Score = -8,172137 (regressionFit = 8,172132, penalties=4.360000000000001E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteledsportsteam(B, C), teamalsoknownas(_, C).  [covers 379,0/400,0 pos, 0,0/0,0 neg]
%     Score = -8,670736 (regressionFit = 8,670732, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), teamplaysagainstteam(A, D).  [covers 154,0/400,0 pos, 0,0/0,0 neg]
%     Score = -8,659668 (regressionFit = 8,659664, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), teamplaysagainstteam(D, A).  [covers 162,0/400,0 pos, 0,0/0,0 neg]
%     Score = -8,790451 (regressionFit = 8,790446, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamplaysagainstteam(A, _).  [covers 215,0/400,0 pos, 0,0/0,0 neg]
%     Score = -8,172137 (regressionFit = 8,172132, penalties=4.360000000000001E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteledsportsteam(B, C), teamplaysagainstteam(C, _).  [covers 379,0/400,0 pos, 0,0/0,0 neg]
%     Score = -8,784480 (regressionFit = 8,784476, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamplaysagainstteam(_, A).  [covers 228,0/400,0 pos, 0,0/0,0 neg]
%     Score = -8,172137 (regressionFit = 8,172132, penalties=4.360000000000001E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteledsportsteam(B, C), teamplaysagainstteam(_, C).  [covers 379,0/400,0 pos, 0,0/0,0 neg]
%     Score = -8,706098 (regressionFit = 8,706094, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), athleteledsportsteam(C, _), teamplaysinleague(A, D).  [covers 178,0/400,0 pos, 0,0/0,0 neg]
%     Score = -8,172136 (regressionFit = 8,172132, penalties=4.15E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, C), athleteledsportsteam(B, D), teamplaysinleague(D, C).  [covers 379,0/400,0 pos, 0,0/0,0 neg]
%     Score = -8,701215 (regressionFit = 8,701211, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamplaysinleague(A, _).  [covers 298,0/400,0 pos, 0,0/0,0 neg]
%     Score = -8,172137 (regressionFit = 8,172132, penalties=4.360000000000001E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteledsportsteam(B, C), teamplaysinleague(C, _).  [covers 379,0/400,0 pos, 0,0/0,0 neg]
%     Score = -8,172137 (regressionFit = 8,172132, penalties=4.360000000000001E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, C), athleteledsportsteam(B, _), teamplaysinleague(_, C).  [covers 379,0/400,0 pos, 0,0/0,0 neg]

% Consider expanding [#3 of outerLoop #2, bodyLen=3] 'teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteplaysforteam(B, _).  [covers 379,0/400,0 pos, 0,0/0,0 neg]' score=-8.172135527410948
%  At # nodes expanded = 3, |OPEN| = 13.  Pruned 26 variant children.  Sending 26 items to OPEN for evaluation and possible insertion.
% Have created 26 valid-on-seeds descendants and have picked up 6 bad extensions.
%     Score = -8,755291 (regressionFit = 8,755287, penalties=4.250000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteplaysforteam(C, _), athleteledsportsteam(C, A).  [covers 69,0/400,0 pos, 0,0/0,0 neg]
%     Score = -8,172136 (regressionFit = 8,172132, penalties=4.250000000000001E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteplaysforteam(B, C), athleteledsportsteam(B, C).  [covers 379,0/400,0 pos, 0,0/0,0 neg]
%     Score = -8,172137 (regressionFit = 8,172132, penalties=4.4600000000000005E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteplaysforteam(B, _), athleteledsportsteam(B, _).  [covers 379,0/400,0 pos, 0,0/0,0 neg]
%     Score = -8,773531 (regressionFit = 8,773527, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteplaysforteam(C, _), athleteledsportsteam(_, A).  [covers 105,0/400,0 pos, 0,0/0,0 neg]
%     Score = -8,172137 (regressionFit = 8,172132, penalties=4.360000000000001E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteplaysforteam(B, C), athleteledsportsteam(_, C).  [covers 379,0/400,0 pos, 0,0/0,0 neg]
%     Score = -8,172137 (regressionFit = 8,172132, penalties=4.3600000000000015E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteplaysforteam(B, _), athleteplaysforteam(B, _).  [covers 379,0/400,0 pos, 0,0/0,0 neg]
%     Score = -8,760202 (regressionFit = 8,760197, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteplaysforteam(C, _), athleteplaysforteam(_, A).  [covers 174,0/400,0 pos, 0,0/0,0 neg]
%     Score = -8,172136 (regressionFit = 8,172132, penalties=4.260000000000001E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteplaysforteam(B, C), athleteplaysforteam(_, C).  [covers 379,0/400,0 pos, 0,0/0,0 neg]
%     Score = -8,172136 (regressionFit = 8,172132, penalties=4.260000000000001E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, C), athleteplaysforteam(B, _), athleteplaysinleague(_, C).  [covers 379,0/400,0 pos, 0,0/0,0 neg]
%     Score = -8,172137 (regressionFit = 8,172132, penalties=4.3600000000000015E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteplaysforteam(B, _), athleteplayssport(_, A).  [covers 379,0/400,0 pos, 0,0/0,0 neg]
%     Score = -8,790160 (regressionFit = 8,790155, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteplaysforteam(C, D), teamalsoknownas(A, D).  [covers 14,0/400,0 pos, 0,0/0,0 neg]
%     Score = -8,786063 (regressionFit = 8,786059, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteplaysforteam(C, _), teamalsoknownas(A, _).  [covers 83,0/400,0 pos, 0,0/0,0 neg]
%     Score = -8,172137 (regressionFit = 8,172132, penalties=4.360000000000001E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteplaysforteam(B, C), teamalsoknownas(C, _).  [covers 379,0/400,0 pos, 0,0/0,0 neg]
%     Score = -8,793575 (regressionFit = 8,793571, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteplaysforteam(C, _), teamalsoknownas(_, A).  [covers 65,0/400,0 pos, 0,0/0,0 neg]
%     Score = -8,172137 (regressionFit = 8,172132, penalties=4.360000000000001E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteplaysforteam(B, C), teamalsoknownas(_, C).  [covers 379,0/400,0 pos, 0,0/0,0 neg]
%     Score = -8,646292 (regressionFit = 8,646288, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteplaysforteam(C, D), teamplaysagainstteam(A, D).  [covers 171,0/400,0 pos, 0,0/0,0 neg]
%     Score = -8,636775 (regressionFit = 8,636771, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteplaysforteam(C, D), teamplaysagainstteam(D, A).  [covers 177,0/400,0 pos, 0,0/0,0 neg]
%     Score = -8,790451 (regressionFit = 8,790446, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteplaysforteam(C, _), teamplaysagainstteam(A, _).  [covers 215,0/400,0 pos, 0,0/0,0 neg]
%     Score = -8,172137 (regressionFit = 8,172132, penalties=4.360000000000001E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteplaysforteam(B, C), teamplaysagainstteam(C, _).  [covers 379,0/400,0 pos, 0,0/0,0 neg]
%     Score = -8,784480 (regressionFit = 8,784476, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteplaysforteam(C, _), teamplaysagainstteam(_, A).  [covers 228,0/400,0 pos, 0,0/0,0 neg]
%     Score = -8,172137 (regressionFit = 8,172132, penalties=4.360000000000001E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteplaysforteam(B, C), teamplaysagainstteam(_, C).  [covers 379,0/400,0 pos, 0,0/0,0 neg]
%     Score = -8,706098 (regressionFit = 8,706094, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), athleteplaysforteam(C, _), teamplaysinleague(A, D).  [covers 178,0/400,0 pos, 0,0/0,0 neg]
%     Score = -8,172136 (regressionFit = 8,172132, penalties=4.15E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, C), athleteplaysforteam(B, D), teamplaysinleague(D, C).  [covers 379,0/400,0 pos, 0,0/0,0 neg]
%     Score = -8,701215 (regressionFit = 8,701211, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteplaysforteam(C, _), teamplaysinleague(A, _).  [covers 298,0/400,0 pos, 0,0/0,0 neg]
%     Score = -8,172137 (regressionFit = 8,172132, penalties=4.360000000000001E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteplaysforteam(B, C), teamplaysinleague(C, _).  [covers 379,0/400,0 pos, 0,0/0,0 neg]
%     Score = -8,172137 (regressionFit = 8,172132, penalties=4.360000000000001E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, C), athleteplaysforteam(B, _), teamplaysinleague(_, C).  [covers 379,0/400,0 pos, 0,0/0,0 neg]

% Consider expanding [#4 of outerLoop #2, bodyLen=3] 'teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteplaysforteam(C, A).  [covers 90,0/400,0 pos, 0,0/0,0 neg]' score=-8.738712817420502
%  At # nodes expanded = 4, |OPEN| = 12.  Pruned 8 variant children.  Sending 9 items to OPEN for evaluation and possible insertion.
% Have created 9 valid-on-seeds descendants and have picked up 2 bad extensions.
%     Score = -8,767912 (regressionFit = 8,767908, penalties=4.14E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteplaysforteam(C, A), athleteledsportsteam(C, A).  [covers 51,0/400,0 pos, 0,0/0,0 neg]
%     Score = -8,738714 (regressionFit = 8,738710, penalties=4.150000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteplaysforteam(C, A), athleteplaysforteam(_, A).  [covers 90,0/400,0 pos, 0,0/0,0 neg]
%     Score = -8,738714 (regressionFit = 8,738710, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), athleteplaysforteam(C, A), athleteplaysinleague(_, D).  [covers 90,0/400,0 pos, 0,0/0,0 neg]
%     Score = -8,738714 (regressionFit = 8,738710, penalties=4.150000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteplaysforteam(C, A), athleteplayssport(_, B).  [covers 90,0/400,0 pos, 0,0/0,0 neg]
%     Score = -8,788516 (regressionFit = 8,788512, penalties=4.250000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteplaysforteam(C, A), teamalsoknownas(A, _).  [covers 17,0/400,0 pos, 0,0/0,0 neg]
%     Score = -8,739554 (regressionFit = 8,739550, penalties=4.250000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteplaysforteam(C, A), teamplaysagainstteam(A, _).  [covers 89,0/400,0 pos, 0,0/0,0 neg]
%     Score = -8,738714 (regressionFit = 8,738710, penalties=4.250000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteplaysforteam(C, A), teamplaysagainstteam(_, A).  [covers 90,0/400,0 pos, 0,0/0,0 neg]
%     Score = -8,742042 (regressionFit = 8,742038, penalties=4.040000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), athleteplaysforteam(C, A), teamplaysinleague(A, D).  [covers 86,0/400,0 pos, 0,0/0,0 neg]
%     Score = -8,738714 (regressionFit = 8,738710, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), athleteplaysforteam(C, A), teamplaysinleague(_, D).  [covers 90,0/400,0 pos, 0,0/0,0 neg]

% Consider expanding [#5 of outerLoop #2, bodyLen=3] 'teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, A).  [covers 72,0/400,0 pos, 0,0/0,0 neg]' score=-8.753051920488819
%  At # nodes expanded = 5, |OPEN| = 11.  Pruned 8 variant children.  Sending 9 items to OPEN for evaluation and possible insertion.
% Have created 9 valid-on-seeds descendants and have picked up 2 bad extensions.
%     Score = -8,767912 (regressionFit = 8,767908, penalties=4.14E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, A), athleteplaysforteam(C, A).  [covers 51,0/400,0 pos, 0,0/0,0 neg]
%     Score = -8,758213 (regressionFit = 8,758209, penalties=4.250000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, A), athleteplaysforteam(_, A).  [covers 65,0/400,0 pos, 0,0/0,0 neg]
%     Score = -8,753053 (regressionFit = 8,753049, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), athleteledsportsteam(C, A), athleteplaysinleague(_, D).  [covers 72,0/400,0 pos, 0,0/0,0 neg]
%     Score = -8,753053 (regressionFit = 8,753049, penalties=4.150000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, A), athleteplayssport(_, B).  [covers 72,0/400,0 pos, 0,0/0,0 neg]
%     Score = -8,790160 (regressionFit = 8,790155, penalties=4.250000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, A), teamalsoknownas(A, _).  [covers 14,0/400,0 pos, 0,0/0,0 neg]
%     Score = -8,753804 (regressionFit = 8,753799, penalties=4.250000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, A), teamplaysagainstteam(A, _).  [covers 71,0/400,0 pos, 0,0/0,0 neg]
%     Score = -8,753804 (regressionFit = 8,753799, penalties=4.250000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, A), teamplaysagainstteam(_, A).  [covers 71,0/400,0 pos, 0,0/0,0 neg]
%     Score = -8,754549 (regressionFit = 8,754545, penalties=4.040000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), athleteledsportsteam(C, A), teamplaysinleague(A, D).  [covers 70,0/400,0 pos, 0,0/0,0 neg]
%     Score = -8,753804 (regressionFit = 8,753799, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), athleteledsportsteam(C, A), teamplaysinleague(_, D).  [covers 71,0/400,0 pos, 0,0/0,0 neg]

% Consider expanding [#6 of outerLoop #2, bodyLen=3] 'teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), teamplaysinleague(A, D).  [covers 180,0/400,0 pos, 0,0/0,0 neg]' score=-8.755053545052878
%  At # nodes expanded = 6, |OPEN| = 10.  Pruned 8 variant children.  Sending 12 items to OPEN for evaluation and possible insertion.
% Have created 12 valid-on-seeds descendants and have picked up 2 bad extensions.
%     Score = -8,754549 (regressionFit = 8,754545, penalties=4.040000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), teamplaysinleague(A, D), athleteledsportsteam(C, A).  [covers 70,0/400,0 pos, 0,0/0,0 neg]
%     Score = -8,706098 (regressionFit = 8,706094, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), teamplaysinleague(A, D), athleteledsportsteam(C, _).  [covers 178,0/400,0 pos, 0,0/0,0 neg]
%     Score = -8,737017 (regressionFit = 8,737013, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), teamplaysinleague(A, D), athleteledsportsteam(_, A).  [covers 92,0/400,0 pos, 0,0/0,0 neg]
%     Score = -8,742042 (regressionFit = 8,742038, penalties=4.040000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), teamplaysinleague(A, D), athleteplaysforteam(C, A).  [covers 86,0/400,0 pos, 0,0/0,0 neg]
%     Score = -8,706098 (regressionFit = 8,706094, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), teamplaysinleague(A, D), athleteplaysforteam(C, _).  [covers 178,0/400,0 pos, 0,0/0,0 neg]
%     Score = -8,695493 (regressionFit = 8,695489, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), teamplaysinleague(A, D), athleteplaysforteam(_, A).  [covers 134,0/400,0 pos, 0,0/0,0 neg]
%     Score = -8,755055 (regressionFit = 8,755051, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), teamplaysinleague(A, D), athleteplaysinleague(_, D).  [covers 180,0/400,0 pos, 0,0/0,0 neg]
%     Score = -8,755055 (regressionFit = 8,755051, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), teamplaysinleague(A, D), athleteplayssport(_, B).  [covers 180,0/400,0 pos, 0,0/0,0 neg]
%     Score = -8,786846 (regressionFit = 8,786842, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), teamplaysinleague(A, D), teamalsoknownas(A, _).  [covers 20,0/400,0 pos, 0,0/0,0 neg]
%     Score = -8,771527 (regressionFit = 8,771523, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), teamplaysinleague(A, D), teamplaysagainstteam(A, _).  [covers 159,0/400,0 pos, 0,0/0,0 neg]
%     Score = -8,768713 (regressionFit = 8,768709, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), teamplaysinleague(A, D), teamplaysagainstteam(_, A).  [covers 163,0/400,0 pos, 0,0/0,0 neg]
%     Score = -8,755055 (regressionFit = 8,755051, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), teamplaysinleague(A, D), teamplaysinleague(_, D).  [covers 180,0/400,0 pos, 0,0/0,0 neg]

% Consider expanding [#7 of outerLoop #2, bodyLen=3] 'teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(A, _).  [covers 229,0/400,0 pos, 0,0/0,0 neg]' score=-8.762637638010185
%  At # nodes expanded = 7, |OPEN| = 9.  Pruned 26 variant children.  Sending 26 items to OPEN for evaluation and possible insertion.
% Have created 26 valid-on-seeds descendants and have picked up 5 bad extensions.
%     Score = -8,753804 (regressionFit = 8,753799, penalties=4.250000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(A, _), athleteledsportsteam(C, A).  [covers 71,0/400,0 pos, 0,0/0,0 neg]
%     Score = -8,670736 (regressionFit = 8,670732, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(A, D), athleteledsportsteam(C, D).  [covers 154,0/400,0 pos, 0,0/0,0 neg]
%     Score = -8,790451 (regressionFit = 8,790446, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(A, _), athleteledsportsteam(C, _).  [covers 215,0/400,0 pos, 0,0/0,0 neg]
%     Score = -8,795602 (regressionFit = 8,795597, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(A, _), athleteledsportsteam(_, A).  [covers 106,0/400,0 pos, 0,0/0,0 neg]
%     Score = -8,767673 (regressionFit = 8,767669, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(A, D), athleteledsportsteam(_, D).  [covers 190,0/400,0 pos, 0,0/0,0 neg]
%     Score = -8,739554 (regressionFit = 8,739550, penalties=4.250000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(A, _), athleteplaysforteam(C, A).  [covers 89,0/400,0 pos, 0,0/0,0 neg]
%     Score = -8,646292 (regressionFit = 8,646288, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(A, D), athleteplaysforteam(C, D).  [covers 171,0/400,0 pos, 0,0/0,0 neg]
%     Score = -8,790451 (regressionFit = 8,790446, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(A, _), athleteplaysforteam(C, _).  [covers 215,0/400,0 pos, 0,0/0,0 neg]
%     Score = -8,797332 (regressionFit = 8,797328, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(A, _), athleteplaysforteam(_, A).  [covers 172,0/400,0 pos, 0,0/0,0 neg]
%     Score = -8,755938 (regressionFit = 8,755934, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(A, D), athleteplaysforteam(_, D).  [covers 221,0/400,0 pos, 0,0/0,0 neg]
%     Score = -8,762639 (regressionFit = 8,762634, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), teamplaysagainstteam(A, _), athleteplaysinleague(_, D).  [covers 229,0/400,0 pos, 0,0/0,0 neg]
%     Score = -8,762639 (regressionFit = 8,762634, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(A, _), athleteplayssport(_, B).  [covers 229,0/400,0 pos, 0,0/0,0 neg]
%     Score = -8,788516 (regressionFit = 8,788512, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(A, D), teamalsoknownas(A, D).  [covers 17,0/400,0 pos, 0,0/0,0 neg]
%     Score = -8,797341 (regressionFit = 8,797337, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(A, _), teamalsoknownas(A, _).  [covers 41,0/400,0 pos, 0,0/0,0 neg]
%     Score = -8,782229 (regressionFit = 8,782225, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(A, D), teamalsoknownas(D, _).  [covers 168,0/400,0 pos, 0,0/0,0 neg]
%     Score = -8,763431 (regressionFit = 8,763427, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(A, D), teamalsoknownas(_, D).  [covers 170,0/400,0 pos, 0,0/0,0 neg]
%     Score = -8,750475 (regressionFit = 8,750471, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(A, D), teamplaysagainstteam(D, A).  [covers 215,0/400,0 pos, 0,0/0,0 neg]
%     Score = -8,762639 (regressionFit = 8,762634, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(A, _), teamplaysagainstteam(A, _).  [covers 229,0/400,0 pos, 0,0/0,0 neg]
%     Score = -8,761024 (regressionFit = 8,761020, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(A, D), teamplaysagainstteam(D, _).  [covers 227,0/400,0 pos, 0,0/0,0 neg]
%     Score = -8,758527 (regressionFit = 8,758523, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(A, _), teamplaysagainstteam(_, A).  [covers 224,0/400,0 pos, 0,0/0,0 neg]
%     Score = -8,762639 (regressionFit = 8,762634, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(A, D), teamplaysagainstteam(_, D).  [covers 229,0/400,0 pos, 0,0/0,0 neg]
%     Score = -8,771527 (regressionFit = 8,771523, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), teamplaysagainstteam(A, _), teamplaysinleague(A, D).  [covers 159,0/400,0 pos, 0,0/0,0 neg]
%     Score = -8,797307 (regressionFit = 8,797303, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), teamplaysagainstteam(A, E), teamplaysinleague(E, D).  [covers 184,0/400,0 pos, 0,0/0,0 neg]
%     Score = -8,743594 (regressionFit = 8,743590, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(A, _), teamplaysinleague(A, _).  [covers 208,0/400,0 pos, 0,0/0,0 neg]
%     Score = -8,758527 (regressionFit = 8,758523, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(A, D), teamplaysinleague(D, _).  [covers 224,0/400,0 pos, 0,0/0,0 neg]
%     Score = -8,762639 (regressionFit = 8,762634, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), teamplaysagainstteam(A, _), teamplaysinleague(_, D).  [covers 229,0/400,0 pos, 0,0/0,0 neg]

% Consider expanding [#8 of outerLoop #2, bodyLen=3] 'teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(_, A).  [covers 246,0/400,0 pos, 0,0/0,0 neg]' score=-8.774842232158116
%  At # nodes expanded = 8, |OPEN| = 8.  Pruned 26 variant children.  Sending 26 items to OPEN for evaluation and possible insertion.
% Have created 26 valid-on-seeds descendants and have picked up 5 bad extensions.
%     Score = -8,753804 (regressionFit = 8,753799, penalties=4.250000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(_, A), athleteledsportsteam(C, A).  [covers 71,0/400,0 pos, 0,0/0,0 neg]
%     Score = -8,659668 (regressionFit = 8,659664, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(D, A), athleteledsportsteam(C, D).  [covers 162,0/400,0 pos, 0,0/0,0 neg]
%     Score = -8,784480 (regressionFit = 8,784476, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(_, A), athleteledsportsteam(C, _).  [covers 228,0/400,0 pos, 0,0/0,0 neg]
%     Score = -8,795386 (regressionFit = 8,795381, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(_, A), athleteledsportsteam(_, A).  [covers 107,0/400,0 pos, 0,0/0,0 neg]
%     Score = -8,778241 (regressionFit = 8,778236, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(D, A), athleteledsportsteam(_, D).  [covers 205,0/400,0 pos, 0,0/0,0 neg]
%     Score = -8,738714 (regressionFit = 8,738710, penalties=4.250000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(_, A), athleteplaysforteam(C, A).  [covers 90,0/400,0 pos, 0,0/0,0 neg]
%     Score = -8,636775 (regressionFit = 8,636771, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(D, A), athleteplaysforteam(C, D).  [covers 177,0/400,0 pos, 0,0/0,0 neg]
%     Score = -8,784480 (regressionFit = 8,784476, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(_, A), athleteplaysforteam(C, _).  [covers 228,0/400,0 pos, 0,0/0,0 neg]
%     Score = -8,797504 (regressionFit = 8,797500, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(_, A), athleteplaysforteam(_, A).  [covers 178,0/400,0 pos, 0,0/0,0 neg]
%     Score = -8,768713 (regressionFit = 8,768709, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(D, A), athleteplaysforteam(_, D).  [covers 237,0/400,0 pos, 0,0/0,0 neg]
%     Score = -8,774843 (regressionFit = 8,774839, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), teamplaysagainstteam(_, A), athleteplaysinleague(_, D).  [covers 246,0/400,0 pos, 0,0/0,0 neg]
%     Score = -8,774843 (regressionFit = 8,774839, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(_, A), athleteplayssport(_, B).  [covers 246,0/400,0 pos, 0,0/0,0 neg]
%     Score = -8,788516 (regressionFit = 8,788512, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(D, A), teamalsoknownas(A, D).  [covers 17,0/400,0 pos, 0,0/0,0 neg]
%     Score = -8,797015 (regressionFit = 8,797011, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(_, A), teamalsoknownas(A, _).  [covers 51,0/400,0 pos, 0,0/0,0 neg]
%     Score = -8,787012 (regressionFit = 8,787008, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(D, A), teamalsoknownas(D, _).  [covers 177,0/400,0 pos, 0,0/0,0 neg]
%     Score = -8,788988 (regressionFit = 8,788984, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(D, A), teamalsoknownas(_, D).  [covers 174,0/400,0 pos, 0,0/0,0 neg]
%     Score = -8,750475 (regressionFit = 8,750471, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(D, A), teamplaysagainstteam(A, D).  [covers 215,0/400,0 pos, 0,0/0,0 neg]
%     Score = -8,758527 (regressionFit = 8,758523, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(_, A), teamplaysagainstteam(A, _).  [covers 224,0/400,0 pos, 0,0/0,0 neg]
%     Score = -8,774843 (regressionFit = 8,774839, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(D, A), teamplaysagainstteam(D, _).  [covers 246,0/400,0 pos, 0,0/0,0 neg]
%     Score = -8,774843 (regressionFit = 8,774839, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(_, A), teamplaysagainstteam(_, A).  [covers 246,0/400,0 pos, 0,0/0,0 neg]
%     Score = -8,774843 (regressionFit = 8,774839, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(D, A), teamplaysagainstteam(_, D).  [covers 246,0/400,0 pos, 0,0/0,0 neg]
%     Score = -8,768713 (regressionFit = 8,768709, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), teamplaysagainstteam(_, A), teamplaysinleague(A, D).  [covers 163,0/400,0 pos, 0,0/0,0 neg]
%     Score = -8,796330 (regressionFit = 8,796325, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), teamplaysagainstteam(E, A), teamplaysinleague(E, D).  [covers 193,0/400,0 pos, 0,0/0,0 neg]
%     Score = -8,753256 (regressionFit = 8,753251, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(_, A), teamplaysinleague(A, _).  [covers 218,0/400,0 pos, 0,0/0,0 neg]
%     Score = -8,771528 (regressionFit = 8,771523, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(D, A), teamplaysinleague(D, _).  [covers 241,0/400,0 pos, 0,0/0,0 neg]
%     Score = -8,774843 (regressionFit = 8,774839, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), teamplaysagainstteam(_, A), teamplaysinleague(_, D).  [covers 246,0/400,0 pos, 0,0/0,0 neg]

% Consider expanding [#9 of outerLoop #2, bodyLen=3] 'teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(_, A).  [covers 109,0/400,0 pos, 0,0/0,0 neg]' score=-8.794921122569926
% [ LazyGroundClauseIndex ]  Building full index for athleteplaysinleague/2 with 1.005 assertions.
%  At # nodes expanded = 9, |OPEN| = 7.  Pruned 16 variant children.  Sending 16 items to OPEN for evaluation and possible insertion.
% Have created 16 valid-on-seeds descendants and have picked up 3 bad extensions.
%     Score = -8,773531 (regressionFit = 8,773527, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(_, A), athleteledsportsteam(C, _).  [covers 105,0/400,0 pos, 0,0/0,0 neg]
%     Score = -8,757489 (regressionFit = 8,757485, penalties=4.250000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(_, A), athleteplaysforteam(C, A).  [covers 66,0/400,0 pos, 0,0/0,0 neg]
%     Score = -8,797478 (regressionFit = 8,797473, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(D, A), athleteplaysforteam(D, A).  [covers 87,0/400,0 pos, 0,0/0,0 neg]
%     Score = -8,773531 (regressionFit = 8,773527, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(_, A), athleteplaysforteam(C, _).  [covers 105,0/400,0 pos, 0,0/0,0 neg]
%     Score = -8,796936 (regressionFit = 8,796932, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(_, A), athleteplaysforteam(_, A).  [covers 98,0/400,0 pos, 0,0/0,0 neg]
%     Score = -8,742861 (regressionFit = 8,742857, penalties=3.95E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), athleteledsportsteam(E, A), athleteplaysinleague(E, D).  [covers 85,0/400,0 pos, 0,0/0,0 neg]
%     Score = -8,797320 (regressionFit = 8,797316, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(D, A), athleteplaysinleague(D, _).  [covers 94,0/400,0 pos, 0,0/0,0 neg]
%     Score = -8,794922 (regressionFit = 8,794918, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), athleteledsportsteam(_, A), athleteplaysinleague(_, D).  [covers 109,0/400,0 pos, 0,0/0,0 neg]
%     Score = -8,751538 (regressionFit = 8,751534, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(D, A), athleteplayssport(D, B).  [covers 74,0/400,0 pos, 0,0/0,0 neg]
%     Score = -8,794922 (regressionFit = 8,794918, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(_, A), athleteplayssport(_, B).  [covers 109,0/400,0 pos, 0,0/0,0 neg]
%     Score = -8,787962 (regressionFit = 8,787958, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(_, A), teamalsoknownas(A, _).  [covers 18,0/400,0 pos, 0,0/0,0 neg]
%     Score = -8,795602 (regressionFit = 8,795597, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(_, A), teamplaysagainstteam(A, _).  [covers 106,0/400,0 pos, 0,0/0,0 neg]
%     Score = -8,795386 (regressionFit = 8,795381, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(_, A), teamplaysagainstteam(_, A).  [covers 107,0/400,0 pos, 0,0/0,0 neg]
%     Score = -8,737017 (regressionFit = 8,737013, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), athleteledsportsteam(_, A), teamplaysinleague(A, D).  [covers 92,0/400,0 pos, 0,0/0,0 neg]
%     Score = -8,795159 (regressionFit = 8,795155, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(_, A), teamplaysinleague(A, _).  [covers 108,0/400,0 pos, 0,0/0,0 neg]
%     Score = -8,794922 (regressionFit = 8,794918, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), athleteledsportsteam(_, A), teamplaysinleague(_, D).  [covers 109,0/400,0 pos, 0,0/0,0 neg]

***** Warning: #1 TOO MANY NODES CONSIDERED (i.e., 'expanded') for 'LearnOneClause': nodesConsidered = 10 and maxNodesToConsider = 10. *****


% The best node found: teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteledsportsteam(B, _).  [covers 379,0/400,0 pos, 0,0/0,0 neg]

% The best node found: teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteledsportsteam(B, _).  [covers 379,0/400,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,022.
% Will extend: teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteledsportsteam(B, _).  [covers 379,0/400,0 pos, 0,0/0,0 neg]
% Path: 0;true
Comparing variance: 0.013018567122205059 to score=0.0025 #egs=379.0
Comparing variance: 0.15419501133786812 to score=0.0025 #egs=21.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 379,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,013019)
%         ILP node to extend: teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteledsportsteam(B, _).  [covers 379,0/400,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -0,013019) into position #1 in the search queue (new size=2).
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 21,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,154195)
%         ILP node to extend: teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _).  [covers 400,0/400,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -0,154195) into position #1 in the search queue (new size=3).

% Time for loop #2: 8,664 seconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #2, the best clause found is:
%      teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteledsportsteam(B, _).  [covers 379,0/400,0 pos, 0,0/0,0 neg]
% This clause covers 379 positive examples, of which 379 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _).  [covers 400,0/21,0 pos, 0,0/0,0 neg]'
%     Score = -14,754076 (regressionFit = 14,754074, penalties=2.24E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _).  [covers 21,0/21,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 0 1 3 4 6 8 9 11 13 16
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Consider expanding [#1 of outerLoop #3, bodyLen=2] 'teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _).  [covers 21,0/21,0 pos, 0,0/0,0 neg]' score=-14.754076425767586
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 10 variant children.  Sending 10 items to OPEN for evaluation and possible insertion.
% Have created 10 valid-on-seeds descendants and have picked up 7 bad extensions.
%     Score = -3,220591 (regressionFit = 3,220588, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(_, A).  [covers 4,0/21,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -3,220591): teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(_, A).  [covers 4,0/21,0 pos, 0,0/0,0 neg]
%     Score = -3,192311 (regressionFit = 3,192308, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteplaysforteam(_, A).  [covers 8,0/21,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -3,192311): teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteplaysforteam(_, A).  [covers 8,0/21,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000008E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, C), athleteplaysinleague(_, C).  [covers 21,0/21,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteplayssport(_, A).  [covers 21,0/21,0 pos, 0,0/0,0 neg]
%     Score = -3,138892 (regressionFit = 3,138889, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(A, _).  [covers 9,0/21,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -3,138892): teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(A, _).  [covers 9,0/21,0 pos, 0,0/0,0 neg]
%     Score = -3,214289 (regressionFit = 3,214286, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(_, A).  [covers 7,0/21,0 pos, 0,0/0,0 neg]
%     Score = -3,214289 (regressionFit = 3,214286, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(A, _).  [covers 14,0/21,0 pos, 0,0/0,0 neg]
%     Score = -3,166670 (regressionFit = 3,166667, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(_, A).  [covers 18,0/21,0 pos, 0,0/0,0 neg]
%     Score = -3,138892 (regressionFit = 3,138889, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysinleague(A, _).  [covers 12,0/21,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, C), teamplaysinleague(_, C).  [covers 21,0/21,0 pos, 0,0/0,0 neg]

% Consider expanding [#2 of outerLoop #3, bodyLen=3] 'teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(A, _).  [covers 9,0/21,0 pos, 0,0/0,0 neg]' score=-3.1388921388888846
%  At # nodes expanded = 2, |OPEN| = 9.  Pruned 26 variant children.  Sending 20 items to OPEN for evaluation and possible insertion.
% Have created 20 valid-on-seeds descendants and have picked up 10 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(A, _), athleteledsportsteam(_, A).  [covers 1,0/21,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(A, D), athleteledsportsteam(_, D).  [covers 2,0/21,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(A, _), athleteplaysforteam(_, A).  [covers 1,0/21,0 pos, 0,0/0,0 neg]
%     Score = -3,111115 (regressionFit = 3,111111, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(A, D), athleteplaysforteam(_, D).  [covers 3,0/21,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -3,111115): teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(A, D), athleteplaysforteam(_, D).  [covers 3,0/21,0 pos, 0,0/0,0 neg]
%     Score = -3,138893 (regressionFit = 3,138889, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), teamalsoknownas(A, _), athleteplaysinleague(_, D).  [covers 9,0/21,0 pos, 0,0/0,0 neg]
%     Score = -3,138893 (regressionFit = 3,138889, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(A, _), athleteplayssport(_, B).  [covers 9,0/21,0 pos, 0,0/0,0 neg]
%     Score = -3,000004 (regressionFit = 3,000000, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(A, D), teamalsoknownas(D, A).  [covers 5,0/21,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -3,000004): teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(A, D), teamalsoknownas(D, A).  [covers 5,0/21,0 pos, 0,0/0,0 neg]
%     Score = -3,138893 (regressionFit = 3,138889, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(A, _), teamalsoknownas(A, _).  [covers 9,0/21,0 pos, 0,0/0,0 neg]
%     Score = -3,182696 (regressionFit = 3,182692, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(A, D), teamalsoknownas(D, _).  [covers 8,0/21,0 pos, 0,0/0,0 neg]
%     Score = -3,000004 (regressionFit = 3,000000, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(A, _), teamalsoknownas(_, A).  [covers 5,0/21,0 pos, 0,0/0,0 neg]
%     Score = -3,138893 (regressionFit = 3,138889, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(A, D), teamalsoknownas(_, D).  [covers 9,0/21,0 pos, 0,0/0,0 neg]
%     Score = -3,111115 (regressionFit = 3,111111, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(A, D), teamplaysagainstteam(A, D).  [covers 3,0/21,0 pos, 0,0/0,0 neg]
%     Score = -3,111115 (regressionFit = 3,111111, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(A, D), teamplaysagainstteam(D, A).  [covers 3,0/21,0 pos, 0,0/0,0 neg]
%     Score = -3,000004 (regressionFit = 3,000000, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(A, _), teamplaysagainstteam(A, _).  [covers 5,0/21,0 pos, 0,0/0,0 neg]
%     Score = -3,058828 (regressionFit = 3,058824, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(A, D), teamplaysagainstteam(D, _).  [covers 4,0/21,0 pos, 0,0/0,0 neg]
%     Score = -2,933338 (regressionFit = 2,933333, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(A, _), teamplaysagainstteam(_, A).  [covers 6,0/21,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -2,933338): teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(A, _), teamplaysagainstteam(_, A).  [covers 6,0/21,0 pos, 0,0/0,0 neg]
%     Score = -3,058828 (regressionFit = 3,058824, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(A, D), teamplaysagainstteam(_, D).  [covers 4,0/21,0 pos, 0,0/0,0 neg]
%     Score = -3,000004 (regressionFit = 3,000000, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(A, _), teamplaysinleague(A, _).  [covers 5,0/21,0 pos, 0,0/0,0 neg]
%     Score = -3,182697 (regressionFit = 3,182692, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(A, D), teamplaysinleague(D, _).  [covers 8,0/21,0 pos, 0,0/0,0 neg]
%     Score = -3,138893 (regressionFit = 3,138889, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), teamalsoknownas(A, _), teamplaysinleague(_, D).  [covers 9,0/21,0 pos, 0,0/0,0 neg]

% Consider expanding [#3 of outerLoop #3, bodyLen=3] 'teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysinleague(A, _).  [covers 12,0/21,0 pos, 0,0/0,0 neg]' score=-3.1388921388888846
%  At # nodes expanded = 3, |OPEN| = 8.  Pruned 12 variant children.  Sending 11 items to OPEN for evaluation and possible insertion.
% Have created 11 valid-on-seeds descendants and have picked up 6 bad extensions.
%     Score = -3,166671 (regressionFit = 3,166667, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysinleague(A, _), athleteledsportsteam(_, A).  [covers 3,0/21,0 pos, 0,0/0,0 neg]
%     Score = -2,764710 (regressionFit = 2,764706, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysinleague(A, _), athleteplaysforteam(_, A).  [covers 4,0/21,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -2,764710): teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysinleague(A, _), athleteplaysforteam(_, A).  [covers 4,0/21,0 pos, 0,0/0,0 neg]
%     Score = -3,138893 (regressionFit = 3,138889, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), teamplaysinleague(A, _), athleteplaysinleague(_, D).  [covers 12,0/21,0 pos, 0,0/0,0 neg]
%     Score = -2,798081 (regressionFit = 2,798077, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysinleague(A, D), athleteplaysinleague(_, D).  [covers 8,0/21,0 pos, 0,0/0,0 neg]
%     Score = -3,138893 (regressionFit = 3,138889, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysinleague(A, _), athleteplayssport(_, B).  [covers 12,0/21,0 pos, 0,0/0,0 neg]
%     Score = -3,000004 (regressionFit = 3,000000, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysinleague(A, _), teamalsoknownas(A, _).  [covers 5,0/21,0 pos, 0,0/0,0 neg]
%     Score = -3,237504 (regressionFit = 3,237500, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysinleague(A, _), teamalsoknownas(_, A).  [covers 5,0/21,0 pos, 0,0/0,0 neg]
%     Score = -2,798081 (regressionFit = 2,798077, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysinleague(A, _), teamplaysagainstteam(A, _).  [covers 8,0/21,0 pos, 0,0/0,0 neg]
%     Score = -3,081823 (regressionFit = 3,081818, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysinleague(A, _), teamplaysagainstteam(_, A).  [covers 11,0/21,0 pos, 0,0/0,0 neg]
%     Score = -3,138893 (regressionFit = 3,138889, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), teamplaysinleague(A, _), teamplaysinleague(_, D).  [covers 12,0/21,0 pos, 0,0/0,0 neg]
%     Score = -3,138893 (regressionFit = 3,138889, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysinleague(A, D), teamplaysinleague(_, D).  [covers 12,0/21,0 pos, 0,0/0,0 neg]

% Consider expanding [#4 of outerLoop #3, bodyLen=3] 'teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(_, A).  [covers 18,0/21,0 pos, 0,0/0,0 neg]' score=-3.1666699166666614
%  At # nodes expanded = 4, |OPEN| = 7.  Pruned 26 variant children.  Sending 21 items to OPEN for evaluation and possible insertion.
% Have created 21 valid-on-seeds descendants and have picked up 9 bad extensions.
%     Score = -3,220593 (regressionFit = 3,220588, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(_, A), athleteledsportsteam(_, A).  [covers 4,0/21,0 pos, 0,0/0,0 neg]
%     Score = -3,009095 (regressionFit = 3,009091, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(D, A), athleteledsportsteam(_, D).  [covers 10,0/21,0 pos, 0,0/0,0 neg]
%     Score = -3,192312 (regressionFit = 3,192308, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(_, A), athleteplaysforteam(_, A).  [covers 8,0/21,0 pos, 0,0/0,0 neg]
%     Score = -3,182697 (regressionFit = 3,182692, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(D, A), athleteplaysforteam(_, D).  [covers 13,0/21,0 pos, 0,0/0,0 neg]
%     Score = -3,166671 (regressionFit = 3,166667, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), teamplaysagainstteam(_, A), athleteplaysinleague(_, D).  [covers 18,0/21,0 pos, 0,0/0,0 neg]
%     Score = -3,166671 (regressionFit = 3,166667, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(_, A), athleteplayssport(_, B).  [covers 18,0/21,0 pos, 0,0/0,0 neg]
%     Score = -3,111115 (regressionFit = 3,111111, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(D, A), teamalsoknownas(A, D).  [covers 3,0/21,0 pos, 0,0/0,0 neg]
%     Score = -3,220592 (regressionFit = 3,220588, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(D, A), teamalsoknownas(D, A).  [covers 4,0/21,0 pos, 0,0/0,0 neg]
%     Score = -2,933338 (regressionFit = 2,933333, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(_, A), teamalsoknownas(A, _).  [covers 6,0/21,0 pos, 0,0/0,0 neg]
%     Score = -3,138893 (regressionFit = 3,138889, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(D, A), teamalsoknownas(D, _).  [covers 12,0/21,0 pos, 0,0/0,0 neg]
%     Score = -3,237504 (regressionFit = 3,237500, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(_, A), teamalsoknownas(_, A).  [covers 5,0/21,0 pos, 0,0/0,0 neg]
%     Score = -3,138893 (regressionFit = 3,138889, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(D, A), teamalsoknownas(_, D).  [covers 9,0/21,0 pos, 0,0/0,0 neg]
%     Score = -3,182696 (regressionFit = 3,182692, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(D, A), teamplaysagainstteam(A, D).  [covers 13,0/21,0 pos, 0,0/0,0 neg]
%     Score = -3,214290 (regressionFit = 3,214286, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(_, A), teamplaysagainstteam(A, _).  [covers 14,0/21,0 pos, 0,0/0,0 neg]
%     Score = -3,166671 (regressionFit = 3,166667, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(D, A), teamplaysagainstteam(D, _).  [covers 18,0/21,0 pos, 0,0/0,0 neg]
%     Score = -3,166671 (regressionFit = 3,166667, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(_, A), teamplaysagainstteam(_, A).  [covers 18,0/21,0 pos, 0,0/0,0 neg]
%     Score = -3,166671 (regressionFit = 3,166667, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(D, A), teamplaysagainstteam(_, D).  [covers 18,0/21,0 pos, 0,0/0,0 neg]
%     Score = -2,444448 (regressionFit = 2,444444, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), teamplaysagainstteam(E, A), teamplaysinleague(E, D).  [covers 3,0/21,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -2,444448): teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), teamplaysagainstteam(E, A), teamplaysinleague(E, D).  [covers 3,0/21,0 pos, 0,0/0,0 neg]
%     Score = -3,081823 (regressionFit = 3,081818, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(_, A), teamplaysinleague(A, _).  [covers 11,0/21,0 pos, 0,0/0,0 neg]
%     Score = -3,214290 (regressionFit = 3,214286, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(D, A), teamplaysinleague(D, _).  [covers 14,0/21,0 pos, 0,0/0,0 neg]
%     Score = -3,166671 (regressionFit = 3,166667, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), teamplaysagainstteam(_, A), teamplaysinleague(_, D).  [covers 18,0/21,0 pos, 0,0/0,0 neg]

% Consider expanding [#5 of outerLoop #3, bodyLen=3] 'teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteplaysforteam(_, A).  [covers 8,0/21,0 pos, 0,0/0,0 neg]' score=-3.192310942307688
%  At # nodes expanded = 5, |OPEN| = 6.  Pruned 16 variant children.  Sending 11 items to OPEN for evaluation and possible insertion.
% Have created 11 valid-on-seeds descendants and have picked up 7 bad extensions.
%     Score = -3,220592 (regressionFit = 3,220588, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteplaysforteam(D, A), athleteledsportsteam(D, A).  [covers 4,0/21,0 pos, 0,0/0,0 neg]
%     Score = -3,220593 (regressionFit = 3,220588, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteplaysforteam(_, A), athleteledsportsteam(_, A).  [covers 4,0/21,0 pos, 0,0/0,0 neg]
%     Score = -3,192312 (regressionFit = 3,192308, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteplaysforteam(_, A), athleteplaysforteam(_, A).  [covers 8,0/21,0 pos, 0,0/0,0 neg]
%     Score = -3,192312 (regressionFit = 3,192308, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), athleteplaysforteam(_, A), athleteplaysinleague(_, D).  [covers 8,0/21,0 pos, 0,0/0,0 neg]
%     Score = -3,192312 (regressionFit = 3,192308, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteplaysforteam(_, A), athleteplayssport(_, B).  [covers 8,0/21,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteplaysforteam(_, A), teamalsoknownas(A, _).  [covers 1,0/21,0 pos, 0,0/0,0 neg]
%     Score = -3,166671 (regressionFit = 3,166667, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteplaysforteam(_, A), teamalsoknownas(_, A).  [covers 3,0/21,0 pos, 0,0/0,0 neg]
%     Score = -3,192312 (regressionFit = 3,192308, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteplaysforteam(_, A), teamplaysagainstteam(A, _).  [covers 8,0/21,0 pos, 0,0/0,0 neg]
%     Score = -3,192312 (regressionFit = 3,192308, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteplaysforteam(_, A), teamplaysagainstteam(_, A).  [covers 8,0/21,0 pos, 0,0/0,0 neg]
%     Score = -2,764710 (regressionFit = 2,764706, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteplaysforteam(_, A), teamplaysinleague(A, _).  [covers 4,0/21,0 pos, 0,0/0,0 neg]
%     Score = -3,192312 (regressionFit = 3,192308, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), athleteplaysforteam(_, A), teamplaysinleague(_, D).  [covers 8,0/21,0 pos, 0,0/0,0 neg]

% Consider expanding [#6 of outerLoop #3, bodyLen=3] 'teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(_, A).  [covers 7,0/21,0 pos, 0,0/0,0 neg]' score=-3.2142889642857093
%  At # nodes expanded = 6, |OPEN| = 5.  Pruned 26 variant children.  Sending 19 items to OPEN for evaluation and possible insertion.
% Have created 19 valid-on-seeds descendants and have picked up 10 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(_, A), athleteledsportsteam(_, A).  [covers 2,0/21,0 pos, 0,0/0,0 neg]
%     Score = -3,166671 (regressionFit = 3,166667, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(D, A), athleteledsportsteam(_, D).  [covers 3,0/21,0 pos, 0,0/0,0 neg]
%     Score = -3,166671 (regressionFit = 3,166667, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(_, A), athleteplaysforteam(_, A).  [covers 3,0/21,0 pos, 0,0/0,0 neg]
%     Score = -3,166671 (regressionFit = 3,166667, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(D, A), athleteplaysforteam(_, D).  [covers 3,0/21,0 pos, 0,0/0,0 neg]
%     Score = -3,214290 (regressionFit = 3,214286, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), teamalsoknownas(_, A), athleteplaysinleague(_, D).  [covers 7,0/21,0 pos, 0,0/0,0 neg]
%     Score = -3,214290 (regressionFit = 3,214286, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(_, A), athleteplayssport(_, B).  [covers 7,0/21,0 pos, 0,0/0,0 neg]
%     Score = -3,000004 (regressionFit = 3,000000, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(D, A), teamalsoknownas(A, D).  [covers 5,0/21,0 pos, 0,0/0,0 neg]
%     Score = -3,000004 (regressionFit = 3,000000, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(_, A), teamalsoknownas(A, _).  [covers 5,0/21,0 pos, 0,0/0,0 neg]
%     Score = -3,214290 (regressionFit = 3,214286, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(D, A), teamalsoknownas(D, _).  [covers 7,0/21,0 pos, 0,0/0,0 neg]
%     Score = -3,000004 (regressionFit = 3,000000, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(D, A), teamalsoknownas(_, D).  [covers 5,0/21,0 pos, 0,0/0,0 neg]
%     Score = -3,220592 (regressionFit = 3,220588, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(D, A), teamplaysagainstteam(A, D).  [covers 4,0/21,0 pos, 0,0/0,0 neg]
%     Score = -3,220592 (regressionFit = 3,220588, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(D, A), teamplaysagainstteam(D, A).  [covers 4,0/21,0 pos, 0,0/0,0 neg]
%     Score = -3,237504 (regressionFit = 3,237500, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(_, A), teamplaysagainstteam(A, _).  [covers 5,0/21,0 pos, 0,0/0,0 neg]
%     Score = -3,237504 (regressionFit = 3,237500, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(D, A), teamplaysagainstteam(D, _).  [covers 5,0/21,0 pos, 0,0/0,0 neg]
%     Score = -3,237504 (regressionFit = 3,237500, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(_, A), teamplaysagainstteam(_, A).  [covers 5,0/21,0 pos, 0,0/0,0 neg]
%     Score = -3,237504 (regressionFit = 3,237500, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(D, A), teamplaysagainstteam(_, D).  [covers 5,0/21,0 pos, 0,0/0,0 neg]
%     Score = -3,237504 (regressionFit = 3,237500, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(_, A), teamplaysinleague(A, _).  [covers 5,0/21,0 pos, 0,0/0,0 neg]
%     Score = -3,233338 (regressionFit = 3,233333, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(D, A), teamplaysinleague(D, _).  [covers 6,0/21,0 pos, 0,0/0,0 neg]
%     Score = -3,214290 (regressionFit = 3,214286, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), teamalsoknownas(_, A), teamplaysinleague(_, D).  [covers 7,0/21,0 pos, 0,0/0,0 neg]

% Consider expanding [#7 of outerLoop #3, bodyLen=3] 'teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(A, _).  [covers 14,0/21,0 pos, 0,0/0,0 neg]' score=-3.2142889642857093
%  At # nodes expanded = 7, |OPEN| = 4.  Pruned 26 variant children.  Sending 21 items to OPEN for evaluation and possible insertion.
% Have created 21 valid-on-seeds descendants and have picked up 9 bad extensions.
%     Score = -3,220593 (regressionFit = 3,220588, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(A, _), athleteledsportsteam(_, A).  [covers 4,0/21,0 pos, 0,0/0,0 neg]
%     Score = -2,798081 (regressionFit = 2,798077, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(A, D), athleteledsportsteam(_, D).  [covers 8,0/21,0 pos, 0,0/0,0 neg]
%     Score = -3,192312 (regressionFit = 3,192308, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(A, _), athleteplaysforteam(_, A).  [covers 8,0/21,0 pos, 0,0/0,0 neg]
%     Score = -3,138893 (regressionFit = 3,138889, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(A, D), athleteplaysforteam(_, D).  [covers 12,0/21,0 pos, 0,0/0,0 neg]
%     Score = -3,214290 (regressionFit = 3,214286, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), teamplaysagainstteam(A, _), athleteplaysinleague(_, D).  [covers 14,0/21,0 pos, 0,0/0,0 neg]
%     Score = -3,214290 (regressionFit = 3,214286, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(A, _), athleteplayssport(_, B).  [covers 14,0/21,0 pos, 0,0/0,0 neg]
%     Score = -3,111115 (regressionFit = 3,111111, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(A, D), teamalsoknownas(A, D).  [covers 3,0/21,0 pos, 0,0/0,0 neg]
%     Score = -3,220592 (regressionFit = 3,220588, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(A, D), teamalsoknownas(D, A).  [covers 4,0/21,0 pos, 0,0/0,0 neg]
%     Score = -3,000004 (regressionFit = 3,000000, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(A, _), teamalsoknownas(A, _).  [covers 5,0/21,0 pos, 0,0/0,0 neg]
%     Score = -3,138893 (regressionFit = 3,138889, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(A, D), teamalsoknownas(D, _).  [covers 12,0/21,0 pos, 0,0/0,0 neg]
%     Score = -3,237504 (regressionFit = 3,237500, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(A, _), teamalsoknownas(_, A).  [covers 5,0/21,0 pos, 0,0/0,0 neg]
%     Score = -2,769235 (regressionFit = 2,769231, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(A, D), teamalsoknownas(_, D).  [covers 8,0/21,0 pos, 0,0/0,0 neg]
%     Score = -3,182696 (regressionFit = 3,182692, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(A, D), teamplaysagainstteam(D, A).  [covers 13,0/21,0 pos, 0,0/0,0 neg]
%     Score = -3,214290 (regressionFit = 3,214286, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(A, _), teamplaysagainstteam(A, _).  [covers 14,0/21,0 pos, 0,0/0,0 neg]
%     Score = -3,214290 (regressionFit = 3,214286, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(A, D), teamplaysagainstteam(D, _).  [covers 14,0/21,0 pos, 0,0/0,0 neg]
%     Score = -3,214290 (regressionFit = 3,214286, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(A, _), teamplaysagainstteam(_, A).  [covers 14,0/21,0 pos, 0,0/0,0 neg]
%     Score = -3,214290 (regressionFit = 3,214286, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(A, D), teamplaysagainstteam(_, D).  [covers 14,0/21,0 pos, 0,0/0,0 neg]
%     Score = -2,444448 (regressionFit = 2,444444, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), teamplaysagainstteam(A, E), teamplaysinleague(E, D).  [covers 3,0/21,0 pos, 0,0/0,0 neg]
%     Score = -2,798081 (regressionFit = 2,798077, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(A, _), teamplaysinleague(A, _).  [covers 8,0/21,0 pos, 0,0/0,0 neg]
%     Score = -3,009095 (regressionFit = 3,009091, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(A, D), teamplaysinleague(D, _).  [covers 10,0/21,0 pos, 0,0/0,0 neg]
%     Score = -3,214290 (regressionFit = 3,214286, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), teamplaysagainstteam(A, _), teamplaysinleague(_, D).  [covers 14,0/21,0 pos, 0,0/0,0 neg]

% Consider expanding [#8 of outerLoop #3, bodyLen=3] 'teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(_, A).  [covers 4,0/21,0 pos, 0,0/0,0 neg]' score=-3.220591485294113
%  At # nodes expanded = 8, |OPEN| = 3.  Pruned 16 variant children.  Sending 10 items to OPEN for evaluation and possible insertion.
% Have created 10 valid-on-seeds descendants and have picked up 7 bad extensions.
%     Score = -3,220592 (regressionFit = 3,220588, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(D, A), athleteplaysforteam(D, A).  [covers 4,0/21,0 pos, 0,0/0,0 neg]
%     Score = -3,220593 (regressionFit = 3,220588, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(_, A), athleteplaysforteam(_, A).  [covers 4,0/21,0 pos, 0,0/0,0 neg]
%     Score = -3,220592 (regressionFit = 3,220588, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), athleteledsportsteam(_, A), athleteplaysinleague(_, D).  [covers 4,0/21,0 pos, 0,0/0,0 neg]
%     Score = -3,220592 (regressionFit = 3,220588, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(_, A), athleteplayssport(_, B).  [covers 4,0/21,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(_, A), teamalsoknownas(A, _).  [covers 1,0/21,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(_, A), teamalsoknownas(_, A).  [covers 2,0/21,0 pos, 0,0/0,0 neg]
%     Score = -3,220593 (regressionFit = 3,220588, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(_, A), teamplaysagainstteam(A, _).  [covers 4,0/21,0 pos, 0,0/0,0 neg]
%     Score = -3,220593 (regressionFit = 3,220588, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(_, A), teamplaysagainstteam(_, A).  [covers 4,0/21,0 pos, 0,0/0,0 neg]
%     Score = -3,166671 (regressionFit = 3,166667, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(_, A), teamplaysinleague(A, _).  [covers 3,0/21,0 pos, 0,0/0,0 neg]
%     Score = -3,220592 (regressionFit = 3,220588, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), athleteledsportsteam(_, A), teamplaysinleague(_, D).  [covers 4,0/21,0 pos, 0,0/0,0 neg]

% Consider expanding [#9 of outerLoop #3, bodyLen=3] 'teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, C), athleteplaysinleague(_, C).  [covers 21,0/21,0 pos, 0,0/0,0 neg]' score=-Infinity
%  At # nodes expanded = 9, |OPEN| = 2.  Pruned 16 variant children.  Sending 13 items to OPEN for evaluation and possible insertion.
% Have created 13 valid-on-seeds descendants and have picked up 8 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=4.160000000000001E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, C), athleteplaysinleague(D, C), athleteledsportsteam(D, _).  [covers 21,0/21,0 pos, 0,0/0,0 neg]
%     Score = -3,220592 (regressionFit = 3,220588, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), athleteplaysinleague(_, D), athleteledsportsteam(_, A).  [covers 4,0/21,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.160000000000001E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, C), athleteplaysinleague(D, C), athleteplaysforteam(D, _).  [covers 21,0/21,0 pos, 0,0/0,0 neg]
%     Score = -3,192312 (regressionFit = 3,192308, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), athleteplaysinleague(_, D), athleteplaysforteam(_, A).  [covers 8,0/21,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.16E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, C), athleteplaysinleague(_, C), athleteplaysinleague(_, C).  [covers 21,0/21,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.060000000000001E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, C), athleteplaysinleague(D, C), athleteplayssport(D, _).  [covers 21,0/21,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.16E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, C), athleteplaysinleague(_, C), athleteplayssport(_, A).  [covers 21,0/21,0 pos, 0,0/0,0 neg]
%     Score = -3,138893 (regressionFit = 3,138889, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), athleteplaysinleague(_, D), teamalsoknownas(A, _).  [covers 9,0/21,0 pos, 0,0/0,0 neg]
%     Score = -3,214290 (regressionFit = 3,214286, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), athleteplaysinleague(_, D), teamalsoknownas(_, A).  [covers 7,0/21,0 pos, 0,0/0,0 neg]
%     Score = -3,214290 (regressionFit = 3,214286, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), athleteplaysinleague(_, D), teamplaysagainstteam(A, _).  [covers 14,0/21,0 pos, 0,0/0,0 neg]
%     Score = -3,166671 (regressionFit = 3,166667, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), athleteplaysinleague(_, D), teamplaysagainstteam(_, A).  [covers 18,0/21,0 pos, 0,0/0,0 neg]
%     Score = -3,138893 (regressionFit = 3,138889, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), athleteplaysinleague(_, D), teamplaysinleague(A, _).  [covers 12,0/21,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.260000000000001E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, C), athleteplaysinleague(_, C), teamplaysinleague(_, C).  [covers 21,0/21,0 pos, 0,0/0,0 neg]

***** Warning: #2 TOO MANY NODES CONSIDERED (i.e., 'expanded') for 'LearnOneClause': nodesConsidered = 10 and maxNodesToConsider = 10. *****


% The best node found: teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), teamplaysagainstteam(E, A), teamplaysinleague(E, D).  [covers 3,0/21,0 pos, 0,0/0,0 neg]

% The best node found: teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), teamplaysagainstteam(E, A), teamplaysinleague(E, D).  [covers 3,0/21,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,154.
% Will extend: teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), teamplaysagainstteam(E, A), teamplaysinleague(E, D).  [covers 3,0/21,0 pos, 0,0/0,0 neg]
% Path: 0;true,false
Comparing variance: 0.22222222222222224 to score=0.0025 #egs=3.0
Comparing variance: 0.09876543209876527 to score=0.0025 #egs=18.0
%   Creating a TRUE-branch leaf because wgtedCountTrueBranchPos = 3,0 < 2.1 * minPosCov = 6,3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 18,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,098765)
%         ILP node to extend: teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _).  [covers 21,0/21,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -0,098765) into position #1 in the search queue (new size=3).

% Time for loop #3: 839 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #3, the best clause found is:
%      teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), teamplaysagainstteam(E, A), teamplaysinleague(E, D).  [covers 3,0/21,0 pos, 0,0/0,0 neg]
% This clause covers 3 positive examples, of which 3 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _).  [covers 21,0/18,0 pos, 0,0/0,0 neg]'
%     Score = -14,754076 (regressionFit = 14,754074, penalties=2.24E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _).  [covers 18,0/18,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 0 1 3 5 7 10 12 13 14 16
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Consider expanding [#1 of outerLoop #4, bodyLen=2] 'teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _).  [covers 18,0/18,0 pos, 0,0/0,0 neg]' score=-14.754076425767586
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 10 variant children.  Sending 10 items to OPEN for evaluation and possible insertion.
% Have created 10 valid-on-seeds descendants and have picked up 12 bad extensions.
%     Score = -1,733337 (regressionFit = 1,733333, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(_, A).  [covers 3,0/18,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -1,733337): teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(_, A).  [covers 3,0/18,0 pos, 0,0/0,0 neg]
%     Score = -1,766237 (regressionFit = 1,766234, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteplaysforteam(_, A).  [covers 7,0/18,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000008E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, C), athleteplaysinleague(_, C).  [covers 18,0/18,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteplayssport(_, A).  [covers 18,0/18,0 pos, 0,0/0,0 neg]
%     Score = -1,775003 (regressionFit = 1,775000, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(A, _).  [covers 8,0/18,0 pos, 0,0/0,0 neg]
%     Score = -1,692311 (regressionFit = 1,692308, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(_, A).  [covers 5,0/18,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -1,692311): teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(_, A).  [covers 5,0/18,0 pos, 0,0/0,0 neg]
%     Score = -1,766237 (regressionFit = 1,766234, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(A, _).  [covers 11,0/18,0 pos, 0,0/0,0 neg]
%     Score = -1,600003 (regressionFit = 1,600000, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(_, A).  [covers 15,0/18,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -1,600003): teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(_, A).  [covers 15,0/18,0 pos, 0,0/0,0 neg]
%     Score = -1,777781 (regressionFit = 1,777778, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysinleague(A, _).  [covers 9,0/18,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, C), teamplaysinleague(_, C).  [covers 18,0/18,0 pos, 0,0/0,0 neg]

% Consider expanding [#2 of outerLoop #4, bodyLen=3] 'teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(_, A).  [covers 15,0/18,0 pos, 0,0/0,0 neg]' score=-1.600003249999995
%  At # nodes expanded = 2, |OPEN| = 9.  Pruned 26 variant children.  Sending 20 items to OPEN for evaluation and possible insertion.
% Have created 20 valid-on-seeds descendants and have picked up 10 bad extensions.
%     Score = -1,733338 (regressionFit = 1,733333, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(_, A), athleteledsportsteam(_, A).  [covers 3,0/18,0 pos, 0,0/0,0 neg]
%     Score = -1,766238 (regressionFit = 1,766234, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(D, A), athleteledsportsteam(_, D).  [covers 7,0/18,0 pos, 0,0/0,0 neg]
%     Score = -1,766238 (regressionFit = 1,766234, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(_, A), athleteplaysforteam(_, A).  [covers 7,0/18,0 pos, 0,0/0,0 neg]
%     Score = -1,775004 (regressionFit = 1,775000, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(D, A), athleteplaysforteam(_, D).  [covers 10,0/18,0 pos, 0,0/0,0 neg]
%     Score = -1,600004 (regressionFit = 1,600000, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), teamplaysagainstteam(_, A), athleteplaysinleague(_, D).  [covers 15,0/18,0 pos, 0,0/0,0 neg]
%     Score = -1,600004 (regressionFit = 1,600000, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(_, A), athleteplayssport(_, B).  [covers 15,0/18,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(D, A), teamalsoknownas(A, D).  [covers 2,0/18,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(D, A), teamalsoknownas(D, A).  [covers 2,0/18,0 pos, 0,0/0,0 neg]
%     Score = -1,692312 (regressionFit = 1,692308, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(_, A), teamalsoknownas(A, _).  [covers 5,0/18,0 pos, 0,0/0,0 neg]
%     Score = -1,777782 (regressionFit = 1,777778, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(D, A), teamalsoknownas(D, _).  [covers 9,0/18,0 pos, 0,0/0,0 neg]
%     Score = -1,733338 (regressionFit = 1,733333, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(_, A), teamalsoknownas(_, A).  [covers 3,0/18,0 pos, 0,0/0,0 neg]
%     Score = -1,775004 (regressionFit = 1,775000, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(D, A), teamalsoknownas(_, D).  [covers 8,0/18,0 pos, 0,0/0,0 neg]
%     Score = -1,775004 (regressionFit = 1,775000, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(D, A), teamplaysagainstteam(A, D).  [covers 10,0/18,0 pos, 0,0/0,0 neg]
%     Score = -1,766238 (regressionFit = 1,766234, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(_, A), teamplaysagainstteam(A, _).  [covers 11,0/18,0 pos, 0,0/0,0 neg]
%     Score = -1,600004 (regressionFit = 1,600000, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(D, A), teamplaysagainstteam(D, _).  [covers 15,0/18,0 pos, 0,0/0,0 neg]
%     Score = -1,600004 (regressionFit = 1,600000, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(_, A), teamplaysagainstteam(_, A).  [covers 15,0/18,0 pos, 0,0/0,0 neg]
%     Score = -1,600004 (regressionFit = 1,600000, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(D, A), teamplaysagainstteam(_, D).  [covers 15,0/18,0 pos, 0,0/0,0 neg]
%     Score = -1,775004 (regressionFit = 1,775000, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(_, A), teamplaysinleague(A, _).  [covers 8,0/18,0 pos, 0,0/0,0 neg]
%     Score = -1,766238 (regressionFit = 1,766234, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(D, A), teamplaysinleague(D, _).  [covers 11,0/18,0 pos, 0,0/0,0 neg]
%     Score = -1,600004 (regressionFit = 1,600000, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), teamplaysagainstteam(_, A), teamplaysinleague(_, D).  [covers 15,0/18,0 pos, 0,0/0,0 neg]

% Consider expanding [#3 of outerLoop #4, bodyLen=3] 'teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(_, A).  [covers 5,0/18,0 pos, 0,0/0,0 neg]' score=-1.692310942307689
%  At # nodes expanded = 3, |OPEN| = 8.  Pruned 26 variant children.  Sending 21 items to OPEN for evaluation and possible insertion.
% Have created 21 valid-on-seeds descendants and have picked up 9 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(_, A), athleteledsportsteam(_, A).  [covers 1,0/18,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(D, A), athleteledsportsteam(_, D).  [covers 1,0/18,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(_, A), athleteplaysforteam(_, A).  [covers 2,0/18,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(D, A), athleteplaysforteam(_, D).  [covers 1,0/18,0 pos, 0,0/0,0 neg]
%     Score = -1,692312 (regressionFit = 1,692308, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), teamalsoknownas(_, A), athleteplaysinleague(_, D).  [covers 5,0/18,0 pos, 0,0/0,0 neg]
%     Score = -1,692312 (regressionFit = 1,692308, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(_, A), athleteplayssport(_, B).  [covers 5,0/18,0 pos, 0,0/0,0 neg]
%     Score = -1,714290 (regressionFit = 1,714286, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(D, A), teamalsoknownas(A, D).  [covers 4,0/18,0 pos, 0,0/0,0 neg]
%     Score = -1,714290 (regressionFit = 1,714286, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(_, A), teamalsoknownas(A, _).  [covers 4,0/18,0 pos, 0,0/0,0 neg]
%     Score = -1,692312 (regressionFit = 1,692308, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(D, A), teamalsoknownas(D, _).  [covers 5,0/18,0 pos, 0,0/0,0 neg]
%     Score = -1,692312 (regressionFit = 1,692308, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(_, A), teamalsoknownas(_, A).  [covers 5,0/18,0 pos, 0,0/0,0 neg]
%     Score = -1,714290 (regressionFit = 1,714286, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(D, A), teamalsoknownas(_, D).  [covers 4,0/18,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(D, A), teamplaysagainstteam(A, D).  [covers 2,0/18,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(D, A), teamplaysagainstteam(D, A).  [covers 2,0/18,0 pos, 0,0/0,0 neg]
%     Score = -1,733338 (regressionFit = 1,733333, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(_, A), teamplaysagainstteam(A, _).  [covers 3,0/18,0 pos, 0,0/0,0 neg]
%     Score = -1,733338 (regressionFit = 1,733333, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(D, A), teamplaysagainstteam(D, _).  [covers 3,0/18,0 pos, 0,0/0,0 neg]
%     Score = -1,733338 (regressionFit = 1,733333, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(_, A), teamplaysagainstteam(_, A).  [covers 3,0/18,0 pos, 0,0/0,0 neg]
%     Score = -1,733338 (regressionFit = 1,733333, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(D, A), teamplaysagainstteam(_, D).  [covers 3,0/18,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), teamalsoknownas(E, A), teamplaysinleague(E, D).  [covers 1,0/18,0 pos, 0,0/0,0 neg]
%     Score = -1,733338 (regressionFit = 1,733333, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(_, A), teamplaysinleague(A, _).  [covers 3,0/18,0 pos, 0,0/0,0 neg]
%     Score = -1,714290 (regressionFit = 1,714286, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(D, A), teamplaysinleague(D, _).  [covers 4,0/18,0 pos, 0,0/0,0 neg]
%     Score = -1,692312 (regressionFit = 1,692308, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), teamalsoknownas(_, A), teamplaysinleague(_, D).  [covers 5,0/18,0 pos, 0,0/0,0 neg]

% Consider expanding [#4 of outerLoop #4, bodyLen=3] 'teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(_, A).  [covers 3,0/18,0 pos, 0,0/0,0 neg]' score=-1.7333365833333303
%  At # nodes expanded = 4, |OPEN| = 7.  Pruned 16 variant children.  Sending 10 items to OPEN for evaluation and possible insertion.
% Have created 10 valid-on-seeds descendants and have picked up 7 bad extensions.
%     Score = -1,733337 (regressionFit = 1,733333, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(D, A), athleteplaysforteam(D, A).  [covers 3,0/18,0 pos, 0,0/0,0 neg]
%     Score = -1,733338 (regressionFit = 1,733333, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(_, A), athleteplaysforteam(_, A).  [covers 3,0/18,0 pos, 0,0/0,0 neg]
%     Score = -1,733337 (regressionFit = 1,733333, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), athleteledsportsteam(_, A), athleteplaysinleague(_, D).  [covers 3,0/18,0 pos, 0,0/0,0 neg]
%     Score = -1,733338 (regressionFit = 1,733333, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(_, A), athleteplayssport(_, B).  [covers 3,0/18,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(_, A), teamalsoknownas(A, _).  [covers 1,0/18,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(_, A), teamalsoknownas(_, A).  [covers 1,0/18,0 pos, 0,0/0,0 neg]
%     Score = -1,733338 (regressionFit = 1,733333, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(_, A), teamplaysagainstteam(A, _).  [covers 3,0/18,0 pos, 0,0/0,0 neg]
%     Score = -1,733338 (regressionFit = 1,733333, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(_, A), teamplaysagainstteam(_, A).  [covers 3,0/18,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(_, A), teamplaysinleague(A, _).  [covers 2,0/18,0 pos, 0,0/0,0 neg]
%     Score = -1,733338 (regressionFit = 1,733333, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), athleteledsportsteam(_, A), teamplaysinleague(_, D).  [covers 3,0/18,0 pos, 0,0/0,0 neg]

% Consider expanding [#5 of outerLoop #4, bodyLen=3] 'teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteplaysforteam(_, A).  [covers 7,0/18,0 pos, 0,0/0,0 neg]' score=-1.7662370162337637
%  At # nodes expanded = 5, |OPEN| = 6.  Pruned 16 variant children.  Sending 13 items to OPEN for evaluation and possible insertion.
% Have created 13 valid-on-seeds descendants and have picked up 7 bad extensions.
%     Score = -1,733337 (regressionFit = 1,733333, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteplaysforteam(D, A), athleteledsportsteam(D, A).  [covers 3,0/18,0 pos, 0,0/0,0 neg]
%     Score = -1,733338 (regressionFit = 1,733333, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteplaysforteam(_, A), athleteledsportsteam(_, A).  [covers 3,0/18,0 pos, 0,0/0,0 neg]
%     Score = -1,766238 (regressionFit = 1,766234, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteplaysforteam(_, A), athleteplaysforteam(_, A).  [covers 7,0/18,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteplaysforteam(D, A), athleteplaysinleague(D, _).  [covers 1,0/18,0 pos, 0,0/0,0 neg]
%     Score = -1,766238 (regressionFit = 1,766234, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), athleteplaysforteam(_, A), athleteplaysinleague(_, D).  [covers 7,0/18,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteplaysforteam(D, A), athleteplayssport(D, _).  [covers 1,0/18,0 pos, 0,0/0,0 neg]
%     Score = -1,766238 (regressionFit = 1,766234, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteplaysforteam(_, A), athleteplayssport(_, B).  [covers 7,0/18,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteplaysforteam(_, A), teamalsoknownas(A, _).  [covers 1,0/18,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteplaysforteam(_, A), teamalsoknownas(_, A).  [covers 2,0/18,0 pos, 0,0/0,0 neg]
%     Score = -1,766238 (regressionFit = 1,766234, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteplaysforteam(_, A), teamplaysagainstteam(A, _).  [covers 7,0/18,0 pos, 0,0/0,0 neg]
%     Score = -1,766238 (regressionFit = 1,766234, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteplaysforteam(_, A), teamplaysagainstteam(_, A).  [covers 7,0/18,0 pos, 0,0/0,0 neg]
%     Score = -1,600004 (regressionFit = 1,600000, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteplaysforteam(_, A), teamplaysinleague(A, _).  [covers 3,0/18,0 pos, 0,0/0,0 neg]
%     Score = -1,766238 (regressionFit = 1,766234, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), athleteplaysforteam(_, A), teamplaysinleague(_, D).  [covers 7,0/18,0 pos, 0,0/0,0 neg]

% Consider expanding [#6 of outerLoop #4, bodyLen=3] 'teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(A, _).  [covers 11,0/18,0 pos, 0,0/0,0 neg]' score=-1.7662370162337637
%  At # nodes expanded = 6, |OPEN| = 5.  Pruned 26 variant children.  Sending 20 items to OPEN for evaluation and possible insertion.
% Have created 20 valid-on-seeds descendants and have picked up 10 bad extensions.
%     Score = -1,733338 (regressionFit = 1,733333, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(A, _), athleteledsportsteam(_, A).  [covers 3,0/18,0 pos, 0,0/0,0 neg]
%     Score = -1,723081 (regressionFit = 1,723077, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(A, D), athleteledsportsteam(_, D).  [covers 5,0/18,0 pos, 0,0/0,0 neg]
%     Score = -1,766238 (regressionFit = 1,766234, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(A, _), athleteplaysforteam(_, A).  [covers 7,0/18,0 pos, 0,0/0,0 neg]
%     Score = -1,777782 (regressionFit = 1,777778, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(A, D), athleteplaysforteam(_, D).  [covers 9,0/18,0 pos, 0,0/0,0 neg]
%     Score = -1,766238 (regressionFit = 1,766234, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), teamplaysagainstteam(A, _), athleteplaysinleague(_, D).  [covers 11,0/18,0 pos, 0,0/0,0 neg]
%     Score = -1,766238 (regressionFit = 1,766234, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(A, _), athleteplayssport(_, B).  [covers 11,0/18,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(A, D), teamalsoknownas(A, D).  [covers 2,0/18,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(A, D), teamalsoknownas(D, A).  [covers 2,0/18,0 pos, 0,0/0,0 neg]
%     Score = -1,714290 (regressionFit = 1,714286, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(A, _), teamalsoknownas(A, _).  [covers 4,0/18,0 pos, 0,0/0,0 neg]
%     Score = -1,777782 (regressionFit = 1,777778, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(A, D), teamalsoknownas(D, _).  [covers 9,0/18,0 pos, 0,0/0,0 neg]
%     Score = -1,733338 (regressionFit = 1,733333, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(A, _), teamalsoknownas(_, A).  [covers 3,0/18,0 pos, 0,0/0,0 neg]
%     Score = -1,636368 (regressionFit = 1,636364, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(A, D), teamalsoknownas(_, D).  [covers 7,0/18,0 pos, 0,0/0,0 neg]
%     Score = -1,775004 (regressionFit = 1,775000, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(A, D), teamplaysagainstteam(D, A).  [covers 10,0/18,0 pos, 0,0/0,0 neg]
%     Score = -1,766238 (regressionFit = 1,766234, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(A, _), teamplaysagainstteam(A, _).  [covers 11,0/18,0 pos, 0,0/0,0 neg]
%     Score = -1,766238 (regressionFit = 1,766234, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(A, D), teamplaysagainstteam(D, _).  [covers 11,0/18,0 pos, 0,0/0,0 neg]
%     Score = -1,766238 (regressionFit = 1,766234, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(A, _), teamplaysagainstteam(_, A).  [covers 11,0/18,0 pos, 0,0/0,0 neg]
%     Score = -1,766238 (regressionFit = 1,766234, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(A, D), teamplaysagainstteam(_, D).  [covers 11,0/18,0 pos, 0,0/0,0 neg]
%     Score = -1,723081 (regressionFit = 1,723077, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(A, _), teamplaysinleague(A, _).  [covers 5,0/18,0 pos, 0,0/0,0 neg]
%     Score = -1,766238 (regressionFit = 1,766234, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(A, D), teamplaysinleague(D, _).  [covers 7,0/18,0 pos, 0,0/0,0 neg]
%     Score = -1,766238 (regressionFit = 1,766234, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), teamplaysagainstteam(A, _), teamplaysinleague(_, D).  [covers 11,0/18,0 pos, 0,0/0,0 neg]

% Consider expanding [#7 of outerLoop #4, bodyLen=3] 'teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(A, _).  [covers 8,0/18,0 pos, 0,0/0,0 neg]' score=-1.775003249999996
%  At # nodes expanded = 7, |OPEN| = 4.  Pruned 26 variant children.  Sending 20 items to OPEN for evaluation and possible insertion.
% Have created 20 valid-on-seeds descendants and have picked up 10 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(A, _), athleteledsportsteam(_, A).  [covers 1,0/18,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(A, D), athleteledsportsteam(_, D).  [covers 1,0/18,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(A, _), athleteplaysforteam(_, A).  [covers 1,0/18,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(A, D), athleteplaysforteam(_, D).  [covers 2,0/18,0 pos, 0,0/0,0 neg]
%     Score = -1,775004 (regressionFit = 1,775000, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), teamalsoknownas(A, _), athleteplaysinleague(_, D).  [covers 8,0/18,0 pos, 0,0/0,0 neg]
%     Score = -1,775004 (regressionFit = 1,775000, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(A, _), athleteplayssport(_, B).  [covers 8,0/18,0 pos, 0,0/0,0 neg]
%     Score = -1,714290 (regressionFit = 1,714286, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(A, D), teamalsoknownas(D, A).  [covers 4,0/18,0 pos, 0,0/0,0 neg]
%     Score = -1,775004 (regressionFit = 1,775000, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(A, _), teamalsoknownas(A, _).  [covers 8,0/18,0 pos, 0,0/0,0 neg]
%     Score = -1,766238 (regressionFit = 1,766234, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(A, D), teamalsoknownas(D, _).  [covers 7,0/18,0 pos, 0,0/0,0 neg]
%     Score = -1,714290 (regressionFit = 1,714286, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(A, _), teamalsoknownas(_, A).  [covers 4,0/18,0 pos, 0,0/0,0 neg]
%     Score = -1,775004 (regressionFit = 1,775000, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(A, D), teamalsoknownas(_, D).  [covers 8,0/18,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(A, D), teamplaysagainstteam(A, D).  [covers 2,0/18,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(A, D), teamplaysagainstteam(D, A).  [covers 2,0/18,0 pos, 0,0/0,0 neg]
%     Score = -1,714290 (regressionFit = 1,714286, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(A, _), teamplaysagainstteam(A, _).  [covers 4,0/18,0 pos, 0,0/0,0 neg]
%     Score = -1,733338 (regressionFit = 1,733333, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(A, D), teamplaysagainstteam(D, _).  [covers 3,0/18,0 pos, 0,0/0,0 neg]
%     Score = -1,692312 (regressionFit = 1,692308, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(A, _), teamplaysagainstteam(_, A).  [covers 5,0/18,0 pos, 0,0/0,0 neg]
%     Score = -1,733338 (regressionFit = 1,733333, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(A, D), teamplaysagainstteam(_, D).  [covers 3,0/18,0 pos, 0,0/0,0 neg]
%     Score = -1,714290 (regressionFit = 1,714286, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(A, _), teamplaysinleague(A, _).  [covers 4,0/18,0 pos, 0,0/0,0 neg]
%     Score = -1,766238 (regressionFit = 1,766234, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(A, D), teamplaysinleague(D, _).  [covers 7,0/18,0 pos, 0,0/0,0 neg]
%     Score = -1,775004 (regressionFit = 1,775000, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), teamalsoknownas(A, _), teamplaysinleague(_, D).  [covers 8,0/18,0 pos, 0,0/0,0 neg]

% Consider expanding [#8 of outerLoop #4, bodyLen=3] 'teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysinleague(A, _).  [covers 9,0/18,0 pos, 0,0/0,0 neg]' score=-1.777781027777775
%  At # nodes expanded = 8, |OPEN| = 3.  Pruned 12 variant children.  Sending 11 items to OPEN for evaluation and possible insertion.
% Have created 11 valid-on-seeds descendants and have picked up 6 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysinleague(A, _), athleteledsportsteam(_, A).  [covers 2,0/18,0 pos, 0,0/0,0 neg]
%     Score = -1,600004 (regressionFit = 1,600000, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysinleague(A, _), athleteplaysforteam(_, A).  [covers 3,0/18,0 pos, 0,0/0,0 neg]
%     Score = -1,777782 (regressionFit = 1,777778, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), teamplaysinleague(A, _), athleteplaysinleague(_, D).  [covers 9,0/18,0 pos, 0,0/0,0 neg]
%     Score = -1,750004 (regressionFit = 1,750000, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysinleague(A, D), athleteplaysinleague(_, D).  [covers 6,0/18,0 pos, 0,0/0,0 neg]
%     Score = -1,777782 (regressionFit = 1,777778, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysinleague(A, _), athleteplayssport(_, B).  [covers 9,0/18,0 pos, 0,0/0,0 neg]
%     Score = -1,714290 (regressionFit = 1,714286, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysinleague(A, _), teamalsoknownas(A, _).  [covers 4,0/18,0 pos, 0,0/0,0 neg]
%     Score = -1,733338 (regressionFit = 1,733333, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysinleague(A, _), teamalsoknownas(_, A).  [covers 3,0/18,0 pos, 0,0/0,0 neg]
%     Score = -1,723081 (regressionFit = 1,723077, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysinleague(A, _), teamplaysagainstteam(A, _).  [covers 5,0/18,0 pos, 0,0/0,0 neg]
%     Score = -1,775004 (regressionFit = 1,775000, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysinleague(A, _), teamplaysagainstteam(_, A).  [covers 8,0/18,0 pos, 0,0/0,0 neg]
%     Score = -1,777782 (regressionFit = 1,777778, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), teamplaysinleague(A, _), teamplaysinleague(_, D).  [covers 9,0/18,0 pos, 0,0/0,0 neg]
%     Score = -1,777782 (regressionFit = 1,777778, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysinleague(A, D), teamplaysinleague(_, D).  [covers 9,0/18,0 pos, 0,0/0,0 neg]

% Consider expanding [#9 of outerLoop #4, bodyLen=3] 'teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, C), athleteplaysinleague(_, C).  [covers 18,0/18,0 pos, 0,0/0,0 neg]' score=-Infinity
%  At # nodes expanded = 9, |OPEN| = 2.  Pruned 16 variant children.  Sending 13 items to OPEN for evaluation and possible insertion.
% Have created 13 valid-on-seeds descendants and have picked up 8 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=4.160000000000001E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, C), athleteplaysinleague(D, C), athleteledsportsteam(D, _).  [covers 18,0/18,0 pos, 0,0/0,0 neg]
%     Score = -1,733337 (regressionFit = 1,733333, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), athleteplaysinleague(_, D), athleteledsportsteam(_, A).  [covers 3,0/18,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.160000000000001E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, C), athleteplaysinleague(D, C), athleteplaysforteam(D, _).  [covers 18,0/18,0 pos, 0,0/0,0 neg]
%     Score = -1,766238 (regressionFit = 1,766234, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), athleteplaysinleague(_, D), athleteplaysforteam(_, A).  [covers 7,0/18,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.16E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, C), athleteplaysinleague(_, C), athleteplaysinleague(_, C).  [covers 18,0/18,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.060000000000001E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, C), athleteplaysinleague(D, C), athleteplayssport(D, _).  [covers 18,0/18,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.16E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, C), athleteplaysinleague(_, C), athleteplayssport(_, A).  [covers 18,0/18,0 pos, 0,0/0,0 neg]
%     Score = -1,775004 (regressionFit = 1,775000, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), athleteplaysinleague(_, D), teamalsoknownas(A, _).  [covers 8,0/18,0 pos, 0,0/0,0 neg]
%     Score = -1,692312 (regressionFit = 1,692308, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), athleteplaysinleague(_, D), teamalsoknownas(_, A).  [covers 5,0/18,0 pos, 0,0/0,0 neg]
%     Score = -1,766238 (regressionFit = 1,766234, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), athleteplaysinleague(_, D), teamplaysagainstteam(A, _).  [covers 11,0/18,0 pos, 0,0/0,0 neg]
%     Score = -1,600004 (regressionFit = 1,600000, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), athleteplaysinleague(_, D), teamplaysagainstteam(_, A).  [covers 15,0/18,0 pos, 0,0/0,0 neg]
%     Score = -1,777782 (regressionFit = 1,777778, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), athleteplaysinleague(_, D), teamplaysinleague(A, _).  [covers 9,0/18,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.260000000000001E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, C), athleteplaysinleague(_, C), teamplaysinleague(_, C).  [covers 18,0/18,0 pos, 0,0/0,0 neg]

***** Warning: #3 TOO MANY NODES CONSIDERED (i.e., 'expanded') for 'LearnOneClause': nodesConsidered = 10 and maxNodesToConsider = 10. *****


% The best node found: teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(_, A).  [covers 15,0/18,0 pos, 0,0/0,0 neg]

% The best node found: teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(_, A).  [covers 15,0/18,0 pos, 0,0/0,0 neg]

% Expanding node at Level 3 with score = -0,099.
% Will extend: teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(_, A).  [covers 15,0/18,0 pos, 0,0/0,0 neg]
% Path: 0;true,false,false
Comparing variance: 0.06222222222222188 to score=0.0025 #egs=15.0
Comparing variance: 0.22222222222222224 to score=0.0025 #egs=3.0
%   Creating a TRUE-branch and FALSE-branch leaves because level = 3 >= 3

% Time for loop #4: 678 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #4, the best clause found is:
%      teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(_, A).  [covers 15,0/18,0 pos, 0,0/0,0 neg]
% This clause covers 15 positive examples, of which 15 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteledsportsteam(B, _).  [covers 379,0/379,0 pos, 0,0/0,0 neg]'
%     Score = -8,172136 (regressionFit = 8,172132, penalties=3.35E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteledsportsteam(B, _).  [covers 379,0/379,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 61 172 185 219 263 266 284 302 304 364
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Consider expanding [#1 of outerLoop #5, bodyLen=3] 'teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteledsportsteam(B, _).  [covers 379,0/379,0 pos, 0,0/0,0 neg]' score=-8.172135527410948
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 26 variant children.  Sending 25 items to OPEN for evaluation and possible insertion.
% Have created 25 valid-on-seeds descendants and have picked up 13 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=4.3600000000000015E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteledsportsteam(B, _), athleteledsportsteam(B, _).  [covers 379,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,932086 (regressionFit = 4,932082, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), athleteledsportsteam(_, A).  [covers 105,0/379,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -4,932086): teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), athleteledsportsteam(_, A).  [covers 105,0/379,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.260000000000001E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteledsportsteam(B, C), athleteledsportsteam(_, C).  [covers 379,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,920132 (regressionFit = 4,920128, penalties=4.250000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), athleteplaysforteam(C, A).  [covers 66,0/379,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -4,920132): teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), athleteplaysforteam(C, A).  [covers 66,0/379,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.250000000000001E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteledsportsteam(B, C), athleteplaysforteam(B, C).  [covers 379,0/379,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.4600000000000005E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteledsportsteam(B, _), athleteplaysforteam(B, _).  [covers 379,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,933113 (regressionFit = 4,933109, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), athleteplaysforteam(_, A).  [covers 174,0/379,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.360000000000001E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteledsportsteam(B, C), athleteplaysforteam(_, C).  [covers 379,0/379,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.260000000000001E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, C), athleteledsportsteam(B, _), athleteplaysinleague(_, C).  [covers 379,0/379,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.3600000000000015E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteledsportsteam(B, _), athleteplayssport(_, A).  [covers 379,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,933902 (regressionFit = 4,933898, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamalsoknownas(A, _).  [covers 83,0/379,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.360000000000001E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteledsportsteam(B, C), teamalsoknownas(C, _).  [covers 379,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,933664 (regressionFit = 4,933660, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamalsoknownas(_, A).  [covers 65,0/379,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.360000000000001E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteledsportsteam(B, C), teamalsoknownas(_, C).  [covers 379,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,888893 (regressionFit = 4,888889, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), teamplaysagainstteam(A, D).  [covers 154,0/379,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -4,888893): teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), teamplaysagainstteam(A, D).  [covers 154,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,884797 (regressionFit = 4,884793, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), teamplaysagainstteam(D, A).  [covers 162,0/379,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -4,884797): teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), teamplaysagainstteam(D, A).  [covers 162,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,919488 (regressionFit = 4,919484, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamplaysagainstteam(A, _).  [covers 215,0/379,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.360000000000001E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteledsportsteam(B, C), teamplaysagainstteam(C, _).  [covers 379,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,923206 (regressionFit = 4,923202, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamplaysagainstteam(_, A).  [covers 228,0/379,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.360000000000001E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteledsportsteam(B, C), teamplaysagainstteam(_, C).  [covers 379,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,914784 (regressionFit = 4,914780, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), athleteledsportsteam(C, _), teamplaysinleague(A, D).  [covers 178,0/379,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.15E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, C), athleteledsportsteam(B, D), teamplaysinleague(D, C).  [covers 379,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,933967 (regressionFit = 4,933963, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamplaysinleague(A, _).  [covers 298,0/379,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.360000000000001E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteledsportsteam(B, C), teamplaysinleague(C, _).  [covers 379,0/379,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.360000000000001E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, C), athleteledsportsteam(B, _), teamplaysinleague(_, C).  [covers 379,0/379,0 pos, 0,0/0,0 neg]

% Consider expanding [#2 of outerLoop #5, bodyLen=4] 'teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), teamplaysagainstteam(D, A).  [covers 162,0/379,0 pos, 0,0/0,0 neg]' score=-4.884796776730302
%  At # nodes expanded = 2, |OPEN| = 24.  Pruned 24 variant children.  Sending 19 items to OPEN for evaluation and possible insertion.
% Have created 19 valid-on-seeds descendants and have picked up 8 bad extensions.
%     Score = -4,884798 (regressionFit = 4,884793, penalties=5.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), teamplaysagainstteam(D, A), athleteledsportsteam(C, _).  [covers 162,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,911353 (regressionFit = 4,911348, penalties=5.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), teamplaysagainstteam(D, A), athleteledsportsteam(_, A).  [covers 97,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,884798 (regressionFit = 4,884793, penalties=5.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), teamplaysagainstteam(D, A), athleteledsportsteam(_, D).  [covers 162,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,886369 (regressionFit = 4,886364, penalties=5.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), teamplaysagainstteam(D, A), athleteplaysforteam(C, D).  [covers 159,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,884798 (regressionFit = 4,884793, penalties=5.2600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), teamplaysagainstteam(D, A), athleteplaysforteam(C, _).  [covers 162,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,897964 (regressionFit = 4,897959, penalties=5.2600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), teamplaysagainstteam(D, A), athleteplaysforteam(_, A).  [covers 134,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,884798 (regressionFit = 4,884793, penalties=5.2600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), teamplaysagainstteam(D, A), athleteplaysforteam(_, D).  [covers 162,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,884798 (regressionFit = 4,884793, penalties=5.060000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), athleteledsportsteam(C, E), teamplaysagainstteam(E, A), athleteplaysinleague(_, D).  [covers 162,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,884798 (regressionFit = 4,884793, penalties=5.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), teamplaysagainstteam(D, A), athleteplayssport(_, B).  [covers 162,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,900799 (regressionFit = 4,900794, penalties=5.2600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), teamplaysagainstteam(D, A), teamalsoknownas(D, _).  [covers 127,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,897546 (regressionFit = 4,897541, penalties=5.2600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), teamplaysagainstteam(D, A), teamalsoknownas(_, D).  [covers 135,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,891780 (regressionFit = 4,891775, penalties=5.050000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), teamplaysagainstteam(D, A), teamplaysagainstteam(A, D).  [covers 148,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,887898 (regressionFit = 4,887892, penalties=5.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), teamplaysagainstteam(D, A), teamplaysagainstteam(A, _).  [covers 156,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,884798 (regressionFit = 4,884793, penalties=5.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), teamplaysagainstteam(D, A), teamplaysagainstteam(D, _).  [covers 162,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,884798 (regressionFit = 4,884793, penalties=5.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), teamplaysagainstteam(D, A), teamplaysagainstteam(_, A).  [covers 162,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,884798 (regressionFit = 4,884793, penalties=5.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), teamplaysagainstteam(D, A), teamplaysagainstteam(_, D).  [covers 162,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,894963 (regressionFit = 4,894958, penalties=5.050000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), athleteledsportsteam(C, E), teamplaysagainstteam(E, A), teamplaysinleague(A, D).  [covers 141,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,886369 (regressionFit = 4,886364, penalties=5.050000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), athleteledsportsteam(C, E), teamplaysagainstteam(E, A), teamplaysinleague(E, D).  [covers 159,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,884798 (regressionFit = 4,884793, penalties=5.1600000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), athleteledsportsteam(C, E), teamplaysagainstteam(E, A), teamplaysinleague(_, D).  [covers 162,0/379,0 pos, 0,0/0,0 neg]

% Consider expanding [#3 of outerLoop #5, bodyLen=4] 'teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), teamplaysagainstteam(A, D).  [covers 154,0/379,0 pos, 0,0/0,0 neg]' score=-4.88889303889096
%  At # nodes expanded = 3, |OPEN| = 23.  Pruned 24 variant children.  Sending 21 items to OPEN for evaluation and possible insertion.
% Have created 21 valid-on-seeds descendants and have picked up 8 bad extensions.
%     Score = -4,888894 (regressionFit = 4,888889, penalties=5.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), teamplaysagainstteam(A, D), athleteledsportsteam(C, _).  [covers 154,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,911353 (regressionFit = 4,911348, penalties=5.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), teamplaysagainstteam(A, D), athleteledsportsteam(_, A).  [covers 97,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,888894 (regressionFit = 4,888889, penalties=5.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), teamplaysagainstteam(A, D), athleteledsportsteam(_, D).  [covers 154,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,889873 (regressionFit = 4,889868, penalties=5.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), teamplaysagainstteam(A, D), athleteplaysforteam(C, D).  [covers 152,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,888894 (regressionFit = 4,888889, penalties=5.2600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), teamplaysagainstteam(A, D), athleteplaysforteam(C, _).  [covers 154,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,899604 (regressionFit = 4,899598, penalties=5.2600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), teamplaysagainstteam(A, D), athleteplaysforteam(_, A).  [covers 130,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,888894 (regressionFit = 4,888889, penalties=5.2600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), teamplaysagainstteam(A, D), athleteplaysforteam(_, D).  [covers 154,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,888894 (regressionFit = 4,888889, penalties=5.060000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), athleteledsportsteam(C, E), teamplaysagainstteam(A, E), athleteplaysinleague(_, D).  [covers 154,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,888894 (regressionFit = 4,888889, penalties=5.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), teamplaysagainstteam(A, D), athleteplayssport(_, B).  [covers 154,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,902729 (regressionFit = 4,902724, penalties=5.2600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), teamplaysagainstteam(A, D), teamalsoknownas(D, _).  [covers 122,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,897964 (regressionFit = 4,897959, penalties=5.2600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), teamplaysagainstteam(A, D), teamalsoknownas(_, D).  [covers 134,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,891780 (regressionFit = 4,891775, penalties=5.050000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), teamplaysagainstteam(A, D), teamplaysagainstteam(D, A).  [covers 148,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,888894 (regressionFit = 4,888889, penalties=5.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), teamplaysagainstteam(A, D), teamplaysagainstteam(A, _).  [covers 154,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,888894 (regressionFit = 4,888889, penalties=5.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), teamplaysagainstteam(A, D), teamplaysagainstteam(D, _).  [covers 154,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,889386 (regressionFit = 4,889381, penalties=5.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), teamplaysagainstteam(A, D), teamplaysagainstteam(_, A).  [covers 153,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,888894 (regressionFit = 4,888889, penalties=5.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), teamplaysagainstteam(A, D), teamplaysagainstteam(_, D).  [covers 154,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,897124 (regressionFit = 4,897119, penalties=5.050000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), athleteledsportsteam(C, E), teamplaysagainstteam(A, E), teamplaysinleague(A, D).  [covers 136,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,889873 (regressionFit = 4,889868, penalties=5.050000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), athleteledsportsteam(C, E), teamplaysagainstteam(A, E), teamplaysinleague(E, D).  [covers 152,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,890835 (regressionFit = 4,890830, penalties=5.2600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), teamplaysagainstteam(A, D), teamplaysinleague(A, _).  [covers 150,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,888894 (regressionFit = 4,888889, penalties=5.2600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), teamplaysagainstteam(A, D), teamplaysinleague(D, _).  [covers 154,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,888894 (regressionFit = 4,888889, penalties=5.1600000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), athleteledsportsteam(C, E), teamplaysagainstteam(A, E), teamplaysinleague(_, D).  [covers 154,0/379,0 pos, 0,0/0,0 neg]

% Consider expanding [#4 of outerLoop #5, bodyLen=4] 'teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), athleteledsportsteam(C, _), teamplaysinleague(A, D).  [covers 178,0/379,0 pos, 0,0/0,0 neg]' score=-4.914784182424516
%  At # nodes expanded = 4, |OPEN| = 22.  Pruned 24 variant children.  Sending 21 items to OPEN for evaluation and possible insertion.
% Have created 21 valid-on-seeds descendants and have picked up 7 bad extensions.
%     Score = -4,914785 (regressionFit = 4,914780, penalties=5.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), athleteledsportsteam(C, _), teamplaysinleague(A, D), athleteledsportsteam(C, _).  [covers 178,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,912897 (regressionFit = 4,912892, penalties=5.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), athleteledsportsteam(C, _), teamplaysinleague(A, D), athleteledsportsteam(_, A).  [covers 92,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,914785 (regressionFit = 4,914780, penalties=5.060000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), athleteledsportsteam(C, E), teamplaysinleague(A, D), athleteledsportsteam(_, E).  [covers 178,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,920891 (regressionFit = 4,920886, penalties=5.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), athleteledsportsteam(C, _), teamplaysinleague(A, D), athleteplaysforteam(C, A).  [covers 63,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,914785 (regressionFit = 4,914780, penalties=5.050000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), athleteledsportsteam(C, E), teamplaysinleague(A, D), athleteplaysforteam(C, E).  [covers 178,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,914785 (regressionFit = 4,914780, penalties=5.2600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), athleteledsportsteam(C, _), teamplaysinleague(A, D), athleteplaysforteam(C, _).  [covers 178,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,897964 (regressionFit = 4,897959, penalties=5.2600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), athleteledsportsteam(C, _), teamplaysinleague(A, D), athleteplaysforteam(_, A).  [covers 134,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,914785 (regressionFit = 4,914780, penalties=5.1600000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), athleteledsportsteam(C, E), teamplaysinleague(A, D), athleteplaysforteam(_, E).  [covers 178,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,914785 (regressionFit = 4,914780, penalties=5.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), athleteledsportsteam(C, _), teamplaysinleague(A, D), athleteplaysinleague(_, D).  [covers 178,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,914785 (regressionFit = 4,914780, penalties=5.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), athleteledsportsteam(C, _), teamplaysinleague(A, D), athleteplayssport(_, B).  [covers 178,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,914785 (regressionFit = 4,914780, penalties=5.1600000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), athleteledsportsteam(C, E), teamplaysinleague(A, D), teamalsoknownas(E, _).  [covers 178,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,914785 (regressionFit = 4,914780, penalties=5.1600000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), athleteledsportsteam(C, E), teamplaysinleague(A, D), teamalsoknownas(_, E).  [covers 178,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,897124 (regressionFit = 4,897119, penalties=5.050000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), athleteledsportsteam(C, E), teamplaysinleague(A, D), teamplaysagainstteam(A, E).  [covers 136,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,894963 (regressionFit = 4,894958, penalties=5.050000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), athleteledsportsteam(C, E), teamplaysinleague(A, D), teamplaysagainstteam(E, A).  [covers 141,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,921564 (regressionFit = 4,921559, penalties=5.2600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), athleteledsportsteam(C, _), teamplaysinleague(A, D), teamplaysagainstteam(A, _).  [covers 157,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,914785 (regressionFit = 4,914780, penalties=5.1600000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), athleteledsportsteam(C, E), teamplaysinleague(A, D), teamplaysagainstteam(E, _).  [covers 178,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,920400 (regressionFit = 4,920394, penalties=5.2600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), athleteledsportsteam(C, _), teamplaysinleague(A, D), teamplaysagainstteam(_, A).  [covers 161,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,914785 (regressionFit = 4,914780, penalties=5.1600000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), athleteledsportsteam(C, E), teamplaysinleague(A, D), teamplaysagainstteam(_, E).  [covers 178,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,915147 (regressionFit = 4,915142, penalties=4.950000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), athleteledsportsteam(C, E), teamplaysinleague(A, D), teamplaysinleague(E, D).  [covers 177,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,914785 (regressionFit = 4,914780, penalties=5.060000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), athleteledsportsteam(C, E), teamplaysinleague(A, D), teamplaysinleague(E, _).  [covers 178,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,914785 (regressionFit = 4,914780, penalties=5.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), athleteledsportsteam(C, _), teamplaysinleague(A, D), teamplaysinleague(_, D).  [covers 178,0/379,0 pos, 0,0/0,0 neg]

% Consider expanding [#5 of outerLoop #5, bodyLen=4] 'teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamplaysagainstteam(A, _).  [covers 215,0/379,0 pos, 0,0/0,0 neg]' score=-4.919488194375456
%  At # nodes expanded = 5, |OPEN| = 21.  Pruned 50 variant children.  Sending 39 items to OPEN for evaluation and possible insertion.
% Have created 39 valid-on-seeds descendants and have picked up 11 bad extensions.
%     Score = -4,888894 (regressionFit = 4,888889, penalties=5.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamplaysagainstteam(A, D), athleteledsportsteam(C, D).  [covers 154,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,919489 (regressionFit = 4,919484, penalties=5.370000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamplaysagainstteam(A, _), athleteledsportsteam(C, _).  [covers 215,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,932440 (regressionFit = 4,932434, penalties=5.370000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamplaysagainstteam(A, _), athleteledsportsteam(_, A).  [covers 102,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,919489 (regressionFit = 4,919484, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), athleteledsportsteam(_, D).  [covers 215,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,930250 (regressionFit = 4,930245, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamplaysagainstteam(A, D), athleteledsportsteam(_, D).  [covers 182,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,920133 (regressionFit = 4,920128, penalties=5.36E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamplaysagainstteam(A, _), athleteplaysforteam(C, A).  [covers 66,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,919489 (regressionFit = 4,919484, penalties=5.2600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), athleteplaysforteam(C, D).  [covers 215,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,884265 (regressionFit = 4,884259, penalties=5.2600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamplaysagainstteam(A, D), athleteplaysforteam(C, D).  [covers 163,0/379,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -4,884265): teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamplaysagainstteam(A, D), athleteplaysforteam(C, D).  [covers 163,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,919489 (regressionFit = 4,919484, penalties=5.47E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamplaysagainstteam(A, _), athleteplaysforteam(C, _).  [covers 215,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,933755 (regressionFit = 4,933749, penalties=5.47E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamplaysagainstteam(A, _), athleteplaysforteam(_, A).  [covers 164,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,919489 (regressionFit = 4,919484, penalties=5.37E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), athleteplaysforteam(_, D).  [covers 215,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,917568 (regressionFit = 4,917563, penalties=5.37E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamplaysagainstteam(A, D), athleteplaysforteam(_, D).  [covers 209,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,919489 (regressionFit = 4,919484, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), athleteledsportsteam(C, _), teamplaysagainstteam(A, _), athleteplaysinleague(_, D).  [covers 215,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,919489 (regressionFit = 4,919484, penalties=5.370000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamplaysagainstteam(A, _), athleteplayssport(_, B).  [covers 215,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,897546 (regressionFit = 4,897541, penalties=5.1600000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(D, E).  [covers 135,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,932958 (regressionFit = 4,932953, penalties=5.1600000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(E, D).  [covers 97,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,925580 (regressionFit = 4,925575, penalties=5.47E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamplaysagainstteam(A, _), teamalsoknownas(A, _).  [covers 36,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,919489 (regressionFit = 4,919484, penalties=5.37E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(D, _).  [covers 215,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,934006 (regressionFit = 4,934000, penalties=5.37E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamplaysagainstteam(A, D), teamalsoknownas(D, _).  [covers 156,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,919489 (regressionFit = 4,919484, penalties=5.37E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(_, D).  [covers 215,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,933839 (regressionFit = 4,933834, penalties=5.37E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamplaysagainstteam(A, D), teamalsoknownas(_, D).  [covers 162,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,888894 (regressionFit = 4,888889, penalties=5.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamplaysagainstteam(A, D).  [covers 154,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,887898 (regressionFit = 4,887892, penalties=5.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamplaysagainstteam(D, A).  [covers 156,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,931190 (regressionFit = 4,931185, penalties=5.060000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamplaysagainstteam(D, E).  [covers 191,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,915148 (regressionFit = 4,915142, penalties=5.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamplaysagainstteam(A, D), teamplaysagainstteam(D, A).  [covers 202,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,931190 (regressionFit = 4,931185, penalties=5.060000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamplaysagainstteam(E, D).  [covers 191,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,919489 (regressionFit = 4,919484, penalties=5.370000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamplaysagainstteam(A, _), teamplaysagainstteam(A, _).  [covers 215,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,919489 (regressionFit = 4,919484, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamplaysagainstteam(D, _).  [covers 215,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,918864 (regressionFit = 4,918859, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamplaysagainstteam(A, D), teamplaysagainstteam(D, _).  [covers 213,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,917898 (regressionFit = 4,917892, penalties=5.370000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamplaysagainstteam(A, _), teamplaysagainstteam(_, A).  [covers 210,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,919489 (regressionFit = 4,919484, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamplaysagainstteam(_, D).  [covers 215,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,919489 (regressionFit = 4,919484, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamplaysagainstteam(A, D), teamplaysagainstteam(_, D).  [covers 215,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,921564 (regressionFit = 4,921559, penalties=5.2600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), athleteledsportsteam(C, _), teamplaysagainstteam(A, _), teamplaysinleague(A, D).  [covers 157,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,919489 (regressionFit = 4,919484, penalties=5.1600000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), athleteledsportsteam(C, E), teamplaysagainstteam(A, _), teamplaysinleague(E, D).  [covers 215,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,932557 (regressionFit = 4,932552, penalties=5.1600000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), athleteledsportsteam(C, _), teamplaysagainstteam(A, E), teamplaysinleague(E, D).  [covers 180,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,914419 (regressionFit = 4,914413, penalties=5.47E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamplaysagainstteam(A, _), teamplaysinleague(A, _).  [covers 200,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,919489 (regressionFit = 4,919484, penalties=5.37E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamplaysinleague(D, _).  [covers 215,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,919178 (regressionFit = 4,919173, penalties=5.37E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamplaysagainstteam(A, D), teamplaysinleague(D, _).  [covers 214,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,919489 (regressionFit = 4,919484, penalties=5.37E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), athleteledsportsteam(C, _), teamplaysagainstteam(A, _), teamplaysinleague(_, D).  [covers 215,0/379,0 pos, 0,0/0,0 neg]

% Consider expanding [#6 of outerLoop #5, bodyLen=4] 'teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), athleteplaysforteam(C, A).  [covers 66,0/379,0 pos, 0,0/0,0 neg]' score=-4.920132045528224
%  At # nodes expanded = 6, |OPEN| = 20.  Pruned 24 variant children.  Sending 13 items to OPEN for evaluation and possible insertion.
% Have created 13 valid-on-seeds descendants and have picked up 10 bad extensions.
%     Score = -4,921880 (regressionFit = 4,921875, penalties=5.2600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), athleteplaysforteam(C, A), athleteledsportsteam(_, A).  [covers 59,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,920133 (regressionFit = 4,920128, penalties=5.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), athleteplaysforteam(C, A), athleteledsportsteam(_, D).  [covers 66,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,920133 (regressionFit = 4,920128, penalties=5.2600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), athleteplaysforteam(C, A), athleteplaysforteam(_, A).  [covers 66,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,920640 (regressionFit = 4,920635, penalties=5.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), athleteplaysforteam(C, A), athleteplaysforteam(_, D).  [covers 64,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,920133 (regressionFit = 4,920128, penalties=5.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), athleteledsportsteam(C, _), athleteplaysforteam(C, A), athleteplaysinleague(_, D).  [covers 66,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,920133 (regressionFit = 4,920128, penalties=5.2600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), athleteplaysforteam(C, A), athleteplayssport(_, B).  [covers 66,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,920133 (regressionFit = 4,920128, penalties=5.36E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), athleteplaysforteam(C, A), teamplaysagainstteam(A, _).  [covers 66,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,920640 (regressionFit = 4,920635, penalties=5.2600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), athleteplaysforteam(C, A), teamplaysagainstteam(D, _).  [covers 64,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,920133 (regressionFit = 4,920128, penalties=5.36E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), athleteplaysforteam(C, A), teamplaysagainstteam(_, A).  [covers 66,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,920640 (regressionFit = 4,920635, penalties=5.2600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), athleteplaysforteam(C, A), teamplaysagainstteam(_, D).  [covers 64,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,920891 (regressionFit = 4,920886, penalties=5.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), athleteledsportsteam(C, _), athleteplaysforteam(C, A), teamplaysinleague(A, D).  [covers 63,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,920891 (regressionFit = 4,920886, penalties=5.050000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), athleteledsportsteam(C, E), athleteplaysforteam(C, A), teamplaysinleague(E, D).  [covers 63,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,920387 (regressionFit = 4,920382, penalties=5.2600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), athleteledsportsteam(C, _), athleteplaysforteam(C, A), teamplaysinleague(_, D).  [covers 65,0/379,0 pos, 0,0/0,0 neg]

% Consider expanding [#7 of outerLoop #5, bodyLen=4] 'teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamplaysagainstteam(_, A).  [covers 228,0/379,0 pos, 0,0/0,0 neg]' score=-4.923206404849262
%  At # nodes expanded = 7, |OPEN| = 19.  Pruned 50 variant children.  Sending 39 items to OPEN for evaluation and possible insertion.
% Have created 39 valid-on-seeds descendants and have picked up 11 bad extensions.
%     Score = -4,884798 (regressionFit = 4,884793, penalties=5.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamplaysagainstteam(D, A), athleteledsportsteam(C, D).  [covers 162,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,923207 (regressionFit = 4,923202, penalties=5.370000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamplaysagainstteam(_, A), athleteledsportsteam(C, _).  [covers 228,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,932326 (regressionFit = 4,932320, penalties=5.370000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamplaysagainstteam(_, A), athleteledsportsteam(_, A).  [covers 103,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,923207 (regressionFit = 4,923202, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), teamplaysagainstteam(_, A), athleteledsportsteam(_, D).  [covers 228,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,932112 (regressionFit = 4,932107, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamplaysagainstteam(D, A), athleteledsportsteam(_, D).  [covers 195,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,920133 (regressionFit = 4,920128, penalties=5.36E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamplaysagainstteam(_, A), athleteplaysforteam(C, A).  [covers 66,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,923207 (regressionFit = 4,923202, penalties=5.2600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), teamplaysagainstteam(_, A), athleteplaysforteam(C, D).  [covers 228,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,880958 (regressionFit = 4,880952, penalties=5.2600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamplaysagainstteam(D, A), athleteplaysforteam(C, D).  [covers 169,0/379,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -4,880958): teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamplaysagainstteam(D, A), athleteplaysforteam(C, D).  [covers 169,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,923208 (regressionFit = 4,923202, penalties=5.47E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamplaysagainstteam(_, A), athleteplaysforteam(C, _).  [covers 228,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,933414 (regressionFit = 4,933408, penalties=5.47E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamplaysagainstteam(_, A), athleteplaysforteam(_, A).  [covers 170,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,923207 (regressionFit = 4,923202, penalties=5.37E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), teamplaysagainstteam(_, A), athleteplaysforteam(_, D).  [covers 228,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,922125 (regressionFit = 4,922120, penalties=5.37E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamplaysagainstteam(D, A), athleteplaysforteam(_, D).  [covers 224,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,923207 (regressionFit = 4,923202, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), athleteledsportsteam(C, _), teamplaysagainstteam(_, A), athleteplaysinleague(_, D).  [covers 228,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,923207 (regressionFit = 4,923202, penalties=5.370000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamplaysagainstteam(_, A), athleteplayssport(_, B).  [covers 228,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,897964 (regressionFit = 4,897959, penalties=5.1600000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), teamplaysagainstteam(E, A), teamalsoknownas(D, E).  [covers 134,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,931572 (regressionFit = 4,931566, penalties=5.1600000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), teamplaysagainstteam(E, A), teamalsoknownas(E, D).  [covers 109,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,929879 (regressionFit = 4,929874, penalties=5.47E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamplaysagainstteam(_, A), teamalsoknownas(A, _).  [covers 45,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,923207 (regressionFit = 4,923202, penalties=5.37E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), teamplaysagainstteam(_, A), teamalsoknownas(D, _).  [covers 228,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,933707 (regressionFit = 4,933702, penalties=5.37E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamplaysagainstteam(D, A), teamalsoknownas(D, _).  [covers 165,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,923207 (regressionFit = 4,923202, penalties=5.37E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), teamplaysagainstteam(_, A), teamalsoknownas(_, D).  [covers 228,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,933707 (regressionFit = 4,933702, penalties=5.37E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamplaysagainstteam(D, A), teamalsoknownas(_, D).  [covers 165,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,889386 (regressionFit = 4,889381, penalties=5.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), teamplaysagainstteam(_, A), teamplaysagainstteam(A, D).  [covers 153,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,915148 (regressionFit = 4,915142, penalties=5.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamplaysagainstteam(D, A), teamplaysagainstteam(A, D).  [covers 202,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,884798 (regressionFit = 4,884793, penalties=5.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), teamplaysagainstteam(_, A), teamplaysagainstteam(D, A).  [covers 162,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,930079 (regressionFit = 4,930074, penalties=5.060000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), teamplaysagainstteam(E, A), teamplaysagainstteam(D, E).  [covers 198,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,930079 (regressionFit = 4,930074, penalties=5.060000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), teamplaysagainstteam(E, A), teamplaysagainstteam(E, D).  [covers 198,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,917898 (regressionFit = 4,917892, penalties=5.370000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamplaysagainstteam(_, A), teamplaysagainstteam(A, _).  [covers 210,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,923207 (regressionFit = 4,923202, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), teamplaysagainstteam(_, A), teamplaysagainstteam(D, _).  [covers 228,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,923207 (regressionFit = 4,923202, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamplaysagainstteam(D, A), teamplaysagainstteam(D, _).  [covers 228,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,923207 (regressionFit = 4,923202, penalties=5.370000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamplaysagainstteam(_, A), teamplaysagainstteam(_, A).  [covers 228,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,923207 (regressionFit = 4,923202, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), teamplaysagainstteam(_, A), teamplaysagainstteam(_, D).  [covers 228,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,923207 (regressionFit = 4,923202, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamplaysagainstteam(D, A), teamplaysagainstteam(_, D).  [covers 228,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,920400 (regressionFit = 4,920394, penalties=5.2600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), athleteledsportsteam(C, _), teamplaysagainstteam(_, A), teamplaysinleague(A, D).  [covers 161,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,923207 (regressionFit = 4,923202, penalties=5.1600000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), athleteledsportsteam(C, E), teamplaysagainstteam(_, A), teamplaysinleague(E, D).  [covers 228,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,931740 (regressionFit = 4,931735, penalties=5.1600000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), athleteledsportsteam(C, _), teamplaysagainstteam(E, A), teamplaysinleague(E, D).  [covers 187,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,916897 (regressionFit = 4,916891, penalties=5.47E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamplaysagainstteam(_, A), teamplaysinleague(A, _).  [covers 207,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,923207 (regressionFit = 4,923202, penalties=5.37E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), teamplaysagainstteam(_, A), teamplaysinleague(D, _).  [covers 228,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,922942 (regressionFit = 4,922936, penalties=5.37E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamplaysagainstteam(D, A), teamplaysinleague(D, _).  [covers 227,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,923207 (regressionFit = 4,923202, penalties=5.37E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), athleteledsportsteam(C, _), teamplaysagainstteam(_, A), teamplaysinleague(_, D).  [covers 228,0/379,0 pos, 0,0/0,0 neg]

% Consider expanding [#8 of outerLoop #5, bodyLen=4] 'teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), athleteledsportsteam(_, A).  [covers 105,0/379,0 pos, 0,0/0,0 neg]' score=-4.932086289893621
%  At # nodes expanded = 8, |OPEN| = 18.  Pruned 36 variant children.  Sending 29 items to OPEN for evaluation and possible insertion.
% Have created 29 valid-on-seeds descendants and have picked up 8 bad extensions.
%     Score = -4,932087 (regressionFit = 4,932082, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), athleteledsportsteam(_, A), athleteledsportsteam(_, A).  [covers 105,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,932087 (regressionFit = 4,932082, penalties=5.17E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), athleteledsportsteam(_, A), athleteledsportsteam(_, D).  [covers 105,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,921880 (regressionFit = 4,921875, penalties=5.2600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), athleteledsportsteam(_, A), athleteplaysforteam(C, A).  [covers 59,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,932087 (regressionFit = 4,932082, penalties=5.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), athleteledsportsteam(_, A), athleteplaysforteam(C, D).  [covers 105,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,933903 (regressionFit = 4,933898, penalties=5.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), athleteledsportsteam(D, A), athleteplaysforteam(D, A).  [covers 83,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,919360 (regressionFit = 4,919355, penalties=5.060000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), athleteledsportsteam(E, A), athleteplaysforteam(E, D).  [covers 69,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,932087 (regressionFit = 4,932082, penalties=5.370000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), athleteledsportsteam(_, A), athleteplaysforteam(C, _).  [covers 105,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,932550 (regressionFit = 4,932545, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), athleteledsportsteam(D, A), athleteplaysforteam(D, _).  [covers 101,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,933227 (regressionFit = 4,933221, penalties=5.370000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), athleteledsportsteam(_, A), athleteplaysforteam(_, A).  [covers 94,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,932087 (regressionFit = 4,932082, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), athleteledsportsteam(_, A), athleteplaysforteam(_, D).  [covers 105,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,914971 (regressionFit = 4,914966, penalties=4.96E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), athleteledsportsteam(C, _), athleteledsportsteam(E, A), athleteplaysinleague(E, D).  [covers 85,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,933308 (regressionFit = 4,933303, penalties=5.17E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), athleteledsportsteam(D, A), athleteplaysinleague(D, _).  [covers 93,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,932087 (regressionFit = 4,932082, penalties=5.17E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), athleteledsportsteam(C, _), athleteledsportsteam(_, A), athleteplaysinleague(_, D).  [covers 105,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,918038 (regressionFit = 4,918033, penalties=5.060000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), athleteledsportsteam(D, A), athleteplayssport(D, B).  [covers 74,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,913500 (regressionFit = 4,913495, penalties=5.17E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), athleteledsportsteam(D, A), athleteplayssport(D, _).  [covers 90,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,932087 (regressionFit = 4,932082, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), athleteledsportsteam(_, A), athleteplayssport(_, B).  [covers 105,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,932087 (regressionFit = 4,932082, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), athleteledsportsteam(_, A), teamalsoknownas(D, _).  [covers 105,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,932087 (regressionFit = 4,932082, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), athleteledsportsteam(_, A), teamalsoknownas(_, D).  [covers 105,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,911353 (regressionFit = 4,911348, penalties=5.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), athleteledsportsteam(_, A), teamplaysagainstteam(A, D).  [covers 97,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,911353 (regressionFit = 4,911348, penalties=5.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), athleteledsportsteam(_, A), teamplaysagainstteam(D, A).  [covers 97,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,932440 (regressionFit = 4,932434, penalties=5.370000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), athleteledsportsteam(_, A), teamplaysagainstteam(A, _).  [covers 102,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,932087 (regressionFit = 4,932082, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), athleteledsportsteam(_, A), teamplaysagainstteam(D, _).  [covers 105,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,932326 (regressionFit = 4,932320, penalties=5.370000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), athleteledsportsteam(_, A), teamplaysagainstteam(_, A).  [covers 103,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,932087 (regressionFit = 4,932082, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), athleteledsportsteam(_, A), teamplaysagainstteam(_, D).  [covers 105,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,912897 (regressionFit = 4,912892, penalties=5.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), athleteledsportsteam(C, _), athleteledsportsteam(_, A), teamplaysinleague(A, D).  [covers 92,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,932087 (regressionFit = 4,932082, penalties=5.060000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), athleteledsportsteam(C, E), athleteledsportsteam(_, A), teamplaysinleague(E, D).  [covers 105,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,932087 (regressionFit = 4,932082, penalties=5.370000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), athleteledsportsteam(_, A), teamplaysinleague(A, _).  [covers 105,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,932087 (regressionFit = 4,932082, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), athleteledsportsteam(_, A), teamplaysinleague(D, _).  [covers 105,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,932087 (regressionFit = 4,932082, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), athleteledsportsteam(C, _), athleteledsportsteam(_, A), teamplaysinleague(_, D).  [covers 105,0/379,0 pos, 0,0/0,0 neg]

% Consider expanding [#9 of outerLoop #5, bodyLen=4] 'teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), athleteplaysforteam(_, A).  [covers 174,0/379,0 pos, 0,0/0,0 neg]' score=-4.93311341523083
%  At # nodes expanded = 9, |OPEN| = 17.  Pruned 36 variant children.  Sending 31 items to OPEN for evaluation and possible insertion.
% Have created 31 valid-on-seeds descendants and have picked up 8 bad extensions.
%     Score = -4,933903 (regressionFit = 4,933898, penalties=5.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), athleteplaysforteam(D, A), athleteledsportsteam(D, A).  [covers 83,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,918572 (regressionFit = 4,918567, penalties=5.060000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), athleteplaysforteam(E, A), athleteledsportsteam(E, D).  [covers 72,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,933114 (regressionFit = 4,933109, penalties=5.370000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), athleteplaysforteam(_, A), athleteledsportsteam(C, _).  [covers 174,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,932658 (regressionFit = 4,932652, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), athleteplaysforteam(D, A), athleteledsportsteam(D, _).  [covers 100,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,933227 (regressionFit = 4,933221, penalties=5.370000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), athleteplaysforteam(_, A), athleteledsportsteam(_, A).  [covers 94,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,933114 (regressionFit = 4,933109, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), athleteplaysforteam(_, A), athleteledsportsteam(_, D).  [covers 174,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,920133 (regressionFit = 4,920128, penalties=5.2600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), athleteplaysforteam(_, A), athleteplaysforteam(C, A).  [covers 66,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,933114 (regressionFit = 4,933109, penalties=5.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), athleteplaysforteam(_, A), athleteplaysforteam(C, D).  [covers 174,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,933114 (regressionFit = 4,933109, penalties=5.370000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), athleteplaysforteam(_, A), athleteplaysforteam(C, _).  [covers 174,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,933114 (regressionFit = 4,933109, penalties=5.370000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), athleteplaysforteam(_, A), athleteplaysforteam(_, A).  [covers 174,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,933114 (regressionFit = 4,933109, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), athleteplaysforteam(_, A), athleteplaysforteam(_, D).  [covers 174,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,907754 (regressionFit = 4,907749, penalties=5.060000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), athleteledsportsteam(C, _), athleteplaysforteam(E, A), athleteplaysinleague(E, D).  [covers 108,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,929375 (regressionFit = 4,929370, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), athleteplaysforteam(D, A), athleteplaysinleague(D, _).  [covers 123,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,933114 (regressionFit = 4,933109, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), athleteledsportsteam(C, _), athleteplaysforteam(_, A), athleteplaysinleague(_, D).  [covers 174,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,912593 (regressionFit = 4,912587, penalties=5.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), athleteplaysforteam(D, A), athleteplayssport(D, B).  [covers 93,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,929896 (regressionFit = 4,929891, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), athleteplaysforteam(D, A), athleteplayssport(D, _).  [covers 120,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,933114 (regressionFit = 4,933109, penalties=5.370000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), athleteplaysforteam(_, A), athleteplayssport(_, B).  [covers 174,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,924217 (regressionFit = 4,924211, penalties=5.47E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), athleteplaysforteam(_, A), teamalsoknownas(A, _).  [covers 34,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,933114 (regressionFit = 4,933109, penalties=5.37E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), athleteplaysforteam(_, A), teamalsoknownas(D, _).  [covers 174,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,933114 (regressionFit = 4,933109, penalties=5.37E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), athleteplaysforteam(_, A), teamalsoknownas(_, D).  [covers 174,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,899604 (regressionFit = 4,899598, penalties=5.2600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), athleteplaysforteam(_, A), teamplaysagainstteam(A, D).  [covers 130,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,897964 (regressionFit = 4,897959, penalties=5.2600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), athleteplaysforteam(_, A), teamplaysagainstteam(D, A).  [covers 134,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,933755 (regressionFit = 4,933749, penalties=5.47E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), athleteplaysforteam(_, A), teamplaysagainstteam(A, _).  [covers 164,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,933114 (regressionFit = 4,933109, penalties=5.37E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), athleteplaysforteam(_, A), teamplaysagainstteam(D, _).  [covers 174,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,933414 (regressionFit = 4,933408, penalties=5.47E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), athleteplaysforteam(_, A), teamplaysagainstteam(_, A).  [covers 170,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,933114 (regressionFit = 4,933109, penalties=5.37E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), athleteplaysforteam(_, A), teamplaysagainstteam(_, D).  [covers 174,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,897964 (regressionFit = 4,897959, penalties=5.2600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), athleteledsportsteam(C, _), athleteplaysforteam(_, A), teamplaysinleague(A, D).  [covers 134,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,933114 (regressionFit = 4,933109, penalties=5.1600000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), athleteledsportsteam(C, E), athleteplaysforteam(_, A), teamplaysinleague(E, D).  [covers 174,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,933480 (regressionFit = 4,933474, penalties=5.47E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), athleteplaysforteam(_, A), teamplaysinleague(A, _).  [covers 169,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,933114 (regressionFit = 4,933109, penalties=5.37E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), athleteplaysforteam(_, A), teamplaysinleague(D, _).  [covers 174,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,933114 (regressionFit = 4,933109, penalties=5.37E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), athleteledsportsteam(C, _), athleteplaysforteam(_, A), teamplaysinleague(_, D).  [covers 174,0/379,0 pos, 0,0/0,0 neg]

***** Warning: #4 TOO MANY NODES CONSIDERED (i.e., 'expanded') for 'LearnOneClause': nodesConsidered = 10 and maxNodesToConsider = 10. *****


% The best node found: teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamplaysagainstteam(D, A), athleteplaysforteam(C, D).  [covers 169,0/379,0 pos, 0,0/0,0 neg]

% The best node found: teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamplaysagainstteam(D, A), athleteplaysforteam(C, D).  [covers 169,0/379,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,013.
% Will extend: teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamplaysagainstteam(D, A), athleteplaysforteam(C, D).  [covers 169,0/379,0 pos, 0,0/0,0 neg]
% Path: 0;true,true
Comparing variance: 6.6429439201240136E-15 to score=0.0025 #egs=169.0
Comparing variance: 0.02324263038549172 to score=0.0025 #egs=210.0
%   Creating a TRUE-branch leaf because good enough fit since score < 0.0025
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 210,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,023243)
%         ILP node to extend: teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteledsportsteam(B, _).  [covers 379,0/379,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -0,023243) into position #1 in the search queue (new size=2).

% Time for loop #5: 14,796 seconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #5, the best clause found is:
%      teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamplaysagainstteam(D, A), athleteplaysforteam(C, D).  [covers 169,0/379,0 pos, 0,0/0,0 neg]
% This clause covers 169 positive examples, of which 169 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteledsportsteam(B, _).  [covers 379,0/210,0 pos, 0,0/0,0 neg]'
%     Score = -8,172136 (regressionFit = 8,172132, penalties=3.35E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteledsportsteam(B, _).  [covers 210,0/210,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 6 8 9 11 13 61 111 118 163 180
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Consider expanding [#1 of outerLoop #6, bodyLen=3] 'teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteledsportsteam(B, _).  [covers 210,0/210,0 pos, 0,0/0,0 neg]' score=-8.172135527410948
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 26 variant children.  Sending 20 items to OPEN for evaluation and possible insertion.
% Have created 20 valid-on-seeds descendants and have picked up 24 bad extensions.
%     Score = -4,778329 (regressionFit = 4,778325, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), athleteledsportsteam(_, A).  [covers 7,0/210,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -4,778329): teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), athleteledsportsteam(_, A).  [covers 7,0/210,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.260000000000001E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteledsportsteam(B, C), athleteledsportsteam(_, C).  [covers 210,0/210,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.250000000000001E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteledsportsteam(B, C), athleteplaysforteam(B, C).  [covers 210,0/210,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.4600000000000005E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteledsportsteam(B, _), athleteplaysforteam(B, _).  [covers 210,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,842416 (regressionFit = 4,842411, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), athleteplaysforteam(_, A).  [covers 38,0/210,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.360000000000001E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteledsportsteam(B, C), athleteplaysforteam(_, C).  [covers 210,0/210,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.260000000000001E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, C), athleteledsportsteam(B, _), athleteplaysinleague(_, C).  [covers 210,0/210,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.3600000000000015E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteledsportsteam(B, _), athleteplayssport(_, A).  [covers 210,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,875767 (regressionFit = 4,875763, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamalsoknownas(A, _).  [covers 62,0/210,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.360000000000001E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteledsportsteam(B, C), teamalsoknownas(C, _).  [covers 210,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,880887 (regressionFit = 4,880882, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamalsoknownas(_, A).  [covers 40,0/210,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.360000000000001E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteledsportsteam(B, C), teamalsoknownas(_, C).  [covers 210,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,685983 (regressionFit = 4,685979, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamplaysagainstteam(A, _).  [covers 52,0/210,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -4,685983): teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamplaysagainstteam(A, _).  [covers 52,0/210,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.360000000000001E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteledsportsteam(B, C), teamplaysagainstteam(C, _).  [covers 210,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,722195 (regressionFit = 4,722191, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamplaysagainstteam(_, A).  [covers 59,0/210,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.360000000000001E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteledsportsteam(B, C), teamplaysagainstteam(_, C).  [covers 210,0/210,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.15E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, C), athleteledsportsteam(B, D), teamplaysinleague(D, C).  [covers 210,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,869517 (regressionFit = 4,869513, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamplaysinleague(A, _).  [covers 137,0/210,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.360000000000001E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteledsportsteam(B, C), teamplaysinleague(C, _).  [covers 210,0/210,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.360000000000001E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, C), athleteledsportsteam(B, _), teamplaysinleague(_, C).  [covers 210,0/210,0 pos, 0,0/0,0 neg]

% Consider expanding [#2 of outerLoop #6, bodyLen=4] 'teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamplaysagainstteam(A, _).  [covers 52,0/210,0 pos, 0,0/0,0 neg]' score=-4.685982938384631
%  At # nodes expanded = 2, |OPEN| = 19.  Pruned 50 variant children.  Sending 28 items to OPEN for evaluation and possible insertion.
% Have created 28 valid-on-seeds descendants and have picked up 22 bad extensions.
%     Score = -4,721957 (regressionFit = 4,721951, penalties=5.370000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamplaysagainstteam(A, _), athleteledsportsteam(_, A).  [covers 5,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,685984 (regressionFit = 4,685979, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), athleteledsportsteam(_, D).  [covers 52,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,656599 (regressionFit = 4,656593, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamplaysagainstteam(A, D), athleteledsportsteam(_, D).  [covers 28,0/210,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -4,656599): teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamplaysagainstteam(A, D), athleteledsportsteam(_, D).  [covers 28,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,685984 (regressionFit = 4,685979, penalties=5.2600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), athleteplaysforteam(C, D).  [covers 52,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,685984 (regressionFit = 4,685979, penalties=5.47E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamplaysagainstteam(A, _), athleteplaysforteam(C, _).  [covers 52,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,824444 (regressionFit = 4,824438, penalties=5.47E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamplaysagainstteam(A, _), athleteplaysforteam(_, A).  [covers 32,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,685984 (regressionFit = 4,685979, penalties=5.37E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), athleteplaysforteam(_, D).  [covers 52,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,660499 (regressionFit = 4,660494, penalties=5.37E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamplaysagainstteam(A, D), athleteplaysforteam(_, D).  [covers 48,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,685984 (regressionFit = 4,685979, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), athleteledsportsteam(C, _), teamplaysagainstteam(A, _), athleteplaysinleague(_, D).  [covers 52,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,685984 (regressionFit = 4,685979, penalties=5.370000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamplaysagainstteam(A, _), athleteplayssport(_, B).  [covers 52,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,855031 (regressionFit = 4,855026, penalties=5.47E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamplaysagainstteam(A, _), teamalsoknownas(A, _).  [covers 16,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,685984 (regressionFit = 4,685979, penalties=5.37E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(D, _).  [covers 52,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,824444 (regressionFit = 4,824438, penalties=5.37E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamplaysagainstteam(A, D), teamalsoknownas(D, _).  [covers 32,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,778331 (regressionFit = 4,778325, penalties=5.47E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamplaysagainstteam(A, _), teamalsoknownas(_, A).  [covers 7,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,685984 (regressionFit = 4,685979, penalties=5.37E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(_, D).  [covers 52,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,802677 (regressionFit = 4,802672, penalties=5.37E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamplaysagainstteam(A, D), teamalsoknownas(_, D).  [covers 27,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,603844 (regressionFit = 4,603839, penalties=5.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamplaysagainstteam(A, D), teamplaysagainstteam(D, A).  [covers 41,0/210,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -4,603844): teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamplaysagainstteam(A, D), teamplaysagainstteam(D, A).  [covers 41,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,685984 (regressionFit = 4,685979, penalties=5.370000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamplaysagainstteam(A, _), teamplaysagainstteam(A, _).  [covers 52,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,685984 (regressionFit = 4,685979, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamplaysagainstteam(D, _).  [covers 52,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,673755 (regressionFit = 4,673750, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamplaysagainstteam(A, D), teamplaysagainstteam(D, _).  [covers 50,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,653445 (regressionFit = 4,653439, penalties=5.370000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamplaysagainstteam(A, _), teamplaysagainstteam(_, A).  [covers 47,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,685984 (regressionFit = 4,685979, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamplaysagainstteam(_, D).  [covers 52,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,685984 (regressionFit = 4,685979, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamplaysagainstteam(A, D), teamplaysagainstteam(_, D).  [covers 52,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,685984 (regressionFit = 4,685979, penalties=5.1600000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), athleteledsportsteam(C, E), teamplaysagainstteam(A, _), teamplaysinleague(E, D).  [covers 52,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,630345 (regressionFit = 4,630340, penalties=5.47E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamplaysagainstteam(A, _), teamplaysinleague(A, _).  [covers 44,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,685984 (regressionFit = 4,685979, penalties=5.37E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamplaysinleague(D, _).  [covers 52,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,685984 (regressionFit = 4,685979, penalties=5.37E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamplaysagainstteam(A, D), teamplaysinleague(D, _).  [covers 52,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,685984 (regressionFit = 4,685979, penalties=5.37E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), athleteledsportsteam(C, _), teamplaysagainstteam(A, _), teamplaysinleague(_, D).  [covers 52,0/210,0 pos, 0,0/0,0 neg]

% Consider expanding [#3 of outerLoop #6, bodyLen=4] 'teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamplaysagainstteam(_, A).  [covers 59,0/210,0 pos, 0,0/0,0 neg]' score=-4.722195402766582
%  At # nodes expanded = 3, |OPEN| = 18.  Pruned 50 variant children.  Sending 28 items to OPEN for evaluation and possible insertion.
% Have created 28 valid-on-seeds descendants and have picked up 22 bad extensions.
%     Score = -4,721957 (regressionFit = 4,721951, penalties=5.370000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamplaysagainstteam(_, A), athleteledsportsteam(_, A).  [covers 5,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,722196 (regressionFit = 4,722191, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), teamplaysagainstteam(_, A), athleteledsportsteam(_, D).  [covers 59,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,677783 (regressionFit = 4,677778, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamplaysagainstteam(D, A), athleteledsportsteam(_, D).  [covers 30,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,722196 (regressionFit = 4,722191, penalties=5.2600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), teamplaysagainstteam(_, A), athleteplaysforteam(C, D).  [covers 59,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,722197 (regressionFit = 4,722191, penalties=5.47E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamplaysagainstteam(_, A), athleteplaysforteam(C, _).  [covers 59,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,831222 (regressionFit = 4,831217, penalties=5.47E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamplaysagainstteam(_, A), athleteplaysforteam(_, A).  [covers 34,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,722196 (regressionFit = 4,722191, penalties=5.37E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), teamplaysagainstteam(_, A), athleteplaysforteam(_, D).  [covers 59,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,702645 (regressionFit = 4,702639, penalties=5.37E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamplaysagainstteam(D, A), athleteplaysforteam(_, D).  [covers 55,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,722196 (regressionFit = 4,722191, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), athleteledsportsteam(C, _), teamplaysagainstteam(_, A), athleteplaysinleague(_, D).  [covers 59,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,722196 (regressionFit = 4,722191, penalties=5.370000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamplaysagainstteam(_, A), athleteplayssport(_, B).  [covers 59,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,872317 (regressionFit = 4,872312, penalties=5.47E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamplaysagainstteam(_, A), teamalsoknownas(A, _).  [covers 24,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,722196 (regressionFit = 4,722191, penalties=5.37E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), teamplaysagainstteam(_, A), teamalsoknownas(D, _).  [covers 59,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,834291 (regressionFit = 4,834286, penalties=5.37E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamplaysagainstteam(D, A), teamalsoknownas(D, _).  [covers 35,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,809292 (regressionFit = 4,809287, penalties=5.47E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamplaysagainstteam(_, A), teamalsoknownas(_, A).  [covers 9,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,722196 (regressionFit = 4,722191, penalties=5.37E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), teamplaysagainstteam(_, A), teamalsoknownas(_, D).  [covers 59,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,807698 (regressionFit = 4,807692, penalties=5.37E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamplaysagainstteam(D, A), teamalsoknownas(_, D).  [covers 28,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,603844 (regressionFit = 4,603839, penalties=5.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamplaysagainstteam(D, A), teamplaysagainstteam(A, D).  [covers 41,0/210,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -4,603844): teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamplaysagainstteam(D, A), teamplaysagainstteam(A, D).  [covers 41,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,653445 (regressionFit = 4,653439, penalties=5.370000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamplaysagainstteam(_, A), teamplaysagainstteam(A, _).  [covers 47,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,722196 (regressionFit = 4,722191, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), teamplaysagainstteam(_, A), teamplaysagainstteam(D, _).  [covers 59,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,722196 (regressionFit = 4,722191, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamplaysagainstteam(D, A), teamplaysagainstteam(D, _).  [covers 59,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,722196 (regressionFit = 4,722191, penalties=5.370000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamplaysagainstteam(_, A), teamplaysagainstteam(_, A).  [covers 59,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,722196 (regressionFit = 4,722191, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), teamplaysagainstteam(_, A), teamplaysagainstteam(_, D).  [covers 59,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,722196 (regressionFit = 4,722191, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamplaysagainstteam(D, A), teamplaysagainstteam(_, D).  [covers 59,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,722196 (regressionFit = 4,722191, penalties=5.1600000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), athleteledsportsteam(C, E), teamplaysagainstteam(_, A), teamplaysinleague(E, D).  [covers 59,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,646082 (regressionFit = 4,646076, penalties=5.47E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamplaysagainstteam(_, A), teamplaysinleague(A, _).  [covers 46,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,722196 (regressionFit = 4,722191, penalties=5.37E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), teamplaysagainstteam(_, A), teamplaysinleague(D, _).  [covers 59,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,717564 (regressionFit = 4,717559, penalties=5.37E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamplaysagainstteam(D, A), teamplaysinleague(D, _).  [covers 58,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,722196 (regressionFit = 4,722191, penalties=5.37E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), athleteledsportsteam(C, _), teamplaysagainstteam(_, A), teamplaysinleague(_, D).  [covers 59,0/210,0 pos, 0,0/0,0 neg]

% Consider expanding [#4 of outerLoop #6, bodyLen=4] 'teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), athleteledsportsteam(_, A).  [covers 7,0/210,0 pos, 0,0/0,0 neg]' score=-4.7783293831539
%  At # nodes expanded = 4, |OPEN| = 17.  Pruned 36 variant children.  Sending 20 items to OPEN for evaluation and possible insertion.
% Have created 20 valid-on-seeds descendants and have picked up 15 bad extensions.
%     Score = -4,778330 (regressionFit = 4,778325, penalties=5.17E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), athleteledsportsteam(_, A), athleteledsportsteam(_, D).  [covers 7,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,778330 (regressionFit = 4,778325, penalties=5.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), athleteledsportsteam(_, A), athleteplaysforteam(C, D).  [covers 7,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,754907 (regressionFit = 4,754902, penalties=5.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), athleteledsportsteam(D, A), athleteplaysforteam(D, A).  [covers 6,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,778330 (regressionFit = 4,778325, penalties=5.370000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), athleteledsportsteam(_, A), athleteplaysforteam(C, _).  [covers 7,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,754907 (regressionFit = 4,754902, penalties=5.370000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), athleteledsportsteam(_, A), athleteplaysforteam(_, A).  [covers 6,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,778330 (regressionFit = 4,778325, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), athleteledsportsteam(_, A), athleteplaysforteam(_, D).  [covers 7,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,778330 (regressionFit = 4,778325, penalties=5.17E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), athleteledsportsteam(C, _), athleteledsportsteam(_, A), athleteplaysinleague(_, D).  [covers 7,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,778330 (regressionFit = 4,778325, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), athleteledsportsteam(_, A), athleteplayssport(_, B).  [covers 7,0/210,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.370000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), athleteledsportsteam(_, A), teamalsoknownas(A, _).  [covers 2,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,778330 (regressionFit = 4,778325, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), athleteledsportsteam(_, A), teamalsoknownas(D, _).  [covers 7,0/210,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.370000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), athleteledsportsteam(_, A), teamalsoknownas(_, A).  [covers 2,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,778330 (regressionFit = 4,778325, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), athleteledsportsteam(_, A), teamalsoknownas(_, D).  [covers 7,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,721957 (regressionFit = 4,721951, penalties=5.370000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), athleteledsportsteam(_, A), teamplaysagainstteam(A, _).  [covers 5,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,778330 (regressionFit = 4,778325, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), athleteledsportsteam(_, A), teamplaysagainstteam(D, _).  [covers 7,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,721957 (regressionFit = 4,721951, penalties=5.370000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), athleteledsportsteam(_, A), teamplaysagainstteam(_, A).  [covers 5,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,778330 (regressionFit = 4,778325, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), athleteledsportsteam(_, A), teamplaysagainstteam(_, D).  [covers 7,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,778330 (regressionFit = 4,778325, penalties=5.060000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), athleteledsportsteam(C, E), athleteledsportsteam(_, A), teamplaysinleague(E, D).  [covers 7,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,778330 (regressionFit = 4,778325, penalties=5.370000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), athleteledsportsteam(_, A), teamplaysinleague(A, _).  [covers 7,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,778330 (regressionFit = 4,778325, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), athleteledsportsteam(_, A), teamplaysinleague(D, _).  [covers 7,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,778330 (regressionFit = 4,778325, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), athleteledsportsteam(C, _), athleteledsportsteam(_, A), teamplaysinleague(_, D).  [covers 7,0/210,0 pos, 0,0/0,0 neg]

% Consider expanding [#5 of outerLoop #6, bodyLen=4] 'teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), athleteplaysforteam(_, A).  [covers 38,0/210,0 pos, 0,0/0,0 neg]' score=-4.842415620711117
%  At # nodes expanded = 5, |OPEN| = 16.  Pruned 36 variant children.  Sending 21 items to OPEN for evaluation and possible insertion.
% Have created 21 valid-on-seeds descendants and have picked up 15 bad extensions.
%     Score = -4,754907 (regressionFit = 4,754902, penalties=5.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), athleteplaysforteam(D, A), athleteledsportsteam(D, A).  [covers 6,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,754907 (regressionFit = 4,754902, penalties=5.370000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), athleteplaysforteam(_, A), athleteledsportsteam(_, A).  [covers 6,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,842417 (regressionFit = 4,842411, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), athleteplaysforteam(_, A), athleteledsportsteam(_, D).  [covers 38,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,842416 (regressionFit = 4,842411, penalties=5.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), athleteplaysforteam(_, A), athleteplaysforteam(C, D).  [covers 38,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,842417 (regressionFit = 4,842411, penalties=5.370000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), athleteplaysforteam(_, A), athleteplaysforteam(C, _).  [covers 38,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,842417 (regressionFit = 4,842411, penalties=5.370000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), athleteplaysforteam(_, A), athleteplaysforteam(_, A).  [covers 38,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,842417 (regressionFit = 4,842411, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), athleteplaysforteam(_, A), athleteplaysforteam(_, D).  [covers 38,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,842417 (regressionFit = 4,842411, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), athleteledsportsteam(C, _), athleteplaysforteam(_, A), athleteplaysinleague(_, D).  [covers 38,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,842417 (regressionFit = 4,842411, penalties=5.370000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), athleteplaysforteam(_, A), athleteplayssport(_, B).  [covers 38,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,846944 (regressionFit = 4,846939, penalties=5.47E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), athleteplaysforteam(_, A), teamalsoknownas(A, _).  [covers 14,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,842417 (regressionFit = 4,842411, penalties=5.37E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), athleteplaysforteam(_, A), teamalsoknownas(D, _).  [covers 38,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,795798 (regressionFit = 4,795792, penalties=5.47E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), athleteplaysforteam(_, A), teamalsoknownas(_, A).  [covers 8,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,842417 (regressionFit = 4,842411, penalties=5.37E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), athleteplaysforteam(_, A), teamalsoknownas(_, D).  [covers 38,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,824444 (regressionFit = 4,824438, penalties=5.47E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), athleteplaysforteam(_, A), teamplaysagainstteam(A, _).  [covers 32,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,842417 (regressionFit = 4,842411, penalties=5.37E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), athleteplaysforteam(_, A), teamplaysagainstteam(D, _).  [covers 38,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,831222 (regressionFit = 4,831217, penalties=5.47E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), athleteplaysforteam(_, A), teamplaysagainstteam(_, A).  [covers 34,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,842417 (regressionFit = 4,842411, penalties=5.37E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), athleteplaysforteam(_, A), teamplaysagainstteam(_, D).  [covers 38,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,842416 (regressionFit = 4,842411, penalties=5.1600000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), athleteledsportsteam(C, E), athleteplaysforteam(_, A), teamplaysinleague(E, D).  [covers 38,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,837170 (regressionFit = 4,837165, penalties=5.47E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), athleteplaysforteam(_, A), teamplaysinleague(A, _).  [covers 36,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,842417 (regressionFit = 4,842411, penalties=5.37E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), athleteplaysforteam(_, A), teamplaysinleague(D, _).  [covers 38,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,842417 (regressionFit = 4,842411, penalties=5.37E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), athleteledsportsteam(C, _), athleteplaysforteam(_, A), teamplaysinleague(_, D).  [covers 38,0/210,0 pos, 0,0/0,0 neg]

% Consider expanding [#6 of outerLoop #6, bodyLen=4] 'teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamplaysinleague(A, _).  [covers 137,0/210,0 pos, 0,0/0,0 neg]' score=-4.86951740869568
%  At # nodes expanded = 6, |OPEN| = 15.  Pruned 30 variant children.  Sending 21 items to OPEN for evaluation and possible insertion.
% Have created 21 valid-on-seeds descendants and have picked up 13 bad extensions.
%     Score = -4,778330 (regressionFit = 4,778325, penalties=5.370000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamplaysinleague(A, _), athleteledsportsteam(_, A).  [covers 7,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,869518 (regressionFit = 4,869513, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), teamplaysinleague(A, _), athleteledsportsteam(_, D).  [covers 137,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,869518 (regressionFit = 4,869513, penalties=5.2600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), teamplaysinleague(A, _), athleteplaysforteam(C, D).  [covers 137,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,869519 (regressionFit = 4,869513, penalties=5.47E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamplaysinleague(A, _), athleteplaysforteam(C, _).  [covers 137,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,837170 (regressionFit = 4,837165, penalties=5.47E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamplaysinleague(A, _), athleteplaysforteam(_, A).  [covers 36,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,869518 (regressionFit = 4,869513, penalties=5.37E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), teamplaysinleague(A, _), athleteplaysforteam(_, D).  [covers 137,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,869518 (regressionFit = 4,869513, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), athleteledsportsteam(C, _), teamplaysinleague(A, _), athleteplaysinleague(_, D).  [covers 137,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,841202 (regressionFit = 4,841196, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamplaysinleague(A, D), athleteplaysinleague(_, D).  [covers 69,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,869518 (regressionFit = 4,869513, penalties=5.370000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamplaysinleague(A, _), athleteplayssport(_, B).  [covers 137,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,880705 (regressionFit = 4,880700, penalties=5.47E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamplaysinleague(A, _), teamalsoknownas(A, _).  [covers 46,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,869518 (regressionFit = 4,869513, penalties=5.37E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), teamplaysinleague(A, _), teamalsoknownas(D, _).  [covers 137,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,876379 (regressionFit = 4,876374, penalties=5.47E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamplaysinleague(A, _), teamalsoknownas(_, A).  [covers 28,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,869518 (regressionFit = 4,869513, penalties=5.37E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), teamplaysinleague(A, _), teamalsoknownas(_, D).  [covers 137,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,630345 (regressionFit = 4,630340, penalties=5.47E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamplaysinleague(A, _), teamplaysagainstteam(A, _).  [covers 44,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,869518 (regressionFit = 4,869513, penalties=5.37E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), teamplaysinleague(A, _), teamplaysagainstteam(D, _).  [covers 137,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,646082 (regressionFit = 4,646076, penalties=5.47E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamplaysinleague(A, _), teamplaysagainstteam(_, A).  [covers 46,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,869518 (regressionFit = 4,869513, penalties=5.37E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), teamplaysinleague(A, _), teamplaysagainstteam(_, D).  [covers 137,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,869518 (regressionFit = 4,869513, penalties=5.060000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), athleteledsportsteam(C, E), teamplaysinleague(A, _), teamplaysinleague(E, D).  [covers 137,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,869518 (regressionFit = 4,869513, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), teamplaysinleague(A, _), teamplaysinleague(D, _).  [covers 137,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,869518 (regressionFit = 4,869513, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), athleteledsportsteam(C, _), teamplaysinleague(A, _), teamplaysinleague(_, D).  [covers 137,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,869518 (regressionFit = 4,869513, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamplaysinleague(A, D), teamplaysinleague(_, D).  [covers 137,0/210,0 pos, 0,0/0,0 neg]

% Consider expanding [#7 of outerLoop #6, bodyLen=4] 'teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamalsoknownas(A, _).  [covers 62,0/210,0 pos, 0,0/0,0 neg]' score=-4.875767219634577
%  At # nodes expanded = 7, |OPEN| = 14.  Pruned 50 variant children.  Sending 24 items to OPEN for evaluation and possible insertion.
% Have created 24 valid-on-seeds descendants and have picked up 22 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=5.370000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamalsoknownas(A, _), athleteledsportsteam(_, A).  [covers 2,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,875768 (regressionFit = 4,875763, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), teamalsoknownas(A, _), athleteledsportsteam(_, D).  [covers 62,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,875768 (regressionFit = 4,875763, penalties=5.2600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), teamalsoknownas(A, _), athleteplaysforteam(C, D).  [covers 62,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,875768 (regressionFit = 4,875763, penalties=5.47E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamalsoknownas(A, _), athleteplaysforteam(C, _).  [covers 62,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,846944 (regressionFit = 4,846939, penalties=5.47E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamalsoknownas(A, _), athleteplaysforteam(_, A).  [covers 14,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,875768 (regressionFit = 4,875763, penalties=5.37E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), teamalsoknownas(A, _), athleteplaysforteam(_, D).  [covers 62,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,875768 (regressionFit = 4,875763, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), athleteledsportsteam(C, _), teamalsoknownas(A, _), athleteplaysinleague(_, D).  [covers 62,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,875768 (regressionFit = 4,875763, penalties=5.370000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamalsoknownas(A, _), athleteplayssport(_, B).  [covers 62,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,878868 (regressionFit = 4,878862, penalties=5.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamalsoknownas(A, D), teamalsoknownas(D, A).  [covers 32,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,875768 (regressionFit = 4,875763, penalties=5.370000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamalsoknownas(A, _), teamalsoknownas(A, _).  [covers 62,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,875768 (regressionFit = 4,875763, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), teamalsoknownas(A, _), teamalsoknownas(D, _).  [covers 62,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,876672 (regressionFit = 4,876667, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamalsoknownas(A, D), teamalsoknownas(D, _).  [covers 60,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,879307 (regressionFit = 4,879301, penalties=5.370000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamalsoknownas(A, _), teamalsoknownas(_, A).  [covers 33,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,875768 (regressionFit = 4,875763, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), teamalsoknownas(A, _), teamalsoknownas(_, D).  [covers 62,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,875768 (regressionFit = 4,875763, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamalsoknownas(A, D), teamalsoknownas(_, D).  [covers 62,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,855031 (regressionFit = 4,855026, penalties=5.47E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamalsoknownas(A, _), teamplaysagainstteam(A, _).  [covers 16,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,875768 (regressionFit = 4,875763, penalties=5.37E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), teamalsoknownas(A, _), teamplaysagainstteam(D, _).  [covers 62,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,872317 (regressionFit = 4,872312, penalties=5.47E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamalsoknownas(A, _), teamplaysagainstteam(_, A).  [covers 24,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,875768 (regressionFit = 4,875763, penalties=5.37E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), teamalsoknownas(A, _), teamplaysagainstteam(_, D).  [covers 62,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,875768 (regressionFit = 4,875763, penalties=5.1600000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), athleteledsportsteam(C, E), teamalsoknownas(A, _), teamplaysinleague(E, D).  [covers 62,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,880705 (regressionFit = 4,880700, penalties=5.47E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamalsoknownas(A, _), teamplaysinleague(A, _).  [covers 46,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,875768 (regressionFit = 4,875763, penalties=5.37E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), teamalsoknownas(A, _), teamplaysinleague(D, _).  [covers 62,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,877096 (regressionFit = 4,877091, penalties=5.37E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamalsoknownas(A, D), teamplaysinleague(D, _).  [covers 59,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,875768 (regressionFit = 4,875763, penalties=5.37E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), athleteledsportsteam(C, _), teamalsoknownas(A, _), teamplaysinleague(_, D).  [covers 62,0/210,0 pos, 0,0/0,0 neg]

% Consider expanding [#8 of outerLoop #6, bodyLen=4] 'teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamalsoknownas(_, A).  [covers 40,0/210,0 pos, 0,0/0,0 neg]' score=-4.880886712942347
%  At # nodes expanded = 8, |OPEN| = 13.  Pruned 50 variant children.  Sending 24 items to OPEN for evaluation and possible insertion.
% Have created 24 valid-on-seeds descendants and have picked up 22 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=5.370000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamalsoknownas(_, A), athleteledsportsteam(_, A).  [covers 2,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,880888 (regressionFit = 4,880882, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), teamalsoknownas(_, A), athleteledsportsteam(_, D).  [covers 40,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,880888 (regressionFit = 4,880882, penalties=5.2600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), teamalsoknownas(_, A), athleteplaysforteam(C, D).  [covers 40,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,880888 (regressionFit = 4,880882, penalties=5.47E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamalsoknownas(_, A), athleteplaysforteam(C, _).  [covers 40,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,795798 (regressionFit = 4,795792, penalties=5.47E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamalsoknownas(_, A), athleteplaysforteam(_, A).  [covers 8,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,880888 (regressionFit = 4,880882, penalties=5.37E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), teamalsoknownas(_, A), athleteplaysforteam(_, D).  [covers 40,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,880888 (regressionFit = 4,880882, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), athleteledsportsteam(C, _), teamalsoknownas(_, A), athleteplaysinleague(_, D).  [covers 40,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,880888 (regressionFit = 4,880882, penalties=5.370000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamalsoknownas(_, A), athleteplayssport(_, B).  [covers 40,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,878868 (regressionFit = 4,878862, penalties=5.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamalsoknownas(D, A), teamalsoknownas(A, D).  [covers 32,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,879307 (regressionFit = 4,879301, penalties=5.370000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamalsoknownas(_, A), teamalsoknownas(A, _).  [covers 33,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,880888 (regressionFit = 4,880882, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), teamalsoknownas(_, A), teamalsoknownas(D, _).  [covers 40,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,880888 (regressionFit = 4,880882, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamalsoknownas(D, A), teamalsoknownas(D, _).  [covers 40,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,880888 (regressionFit = 4,880882, penalties=5.370000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamalsoknownas(_, A), teamalsoknownas(_, A).  [covers 40,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,880888 (regressionFit = 4,880882, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), teamalsoknownas(_, A), teamalsoknownas(_, D).  [covers 40,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,880888 (regressionFit = 4,880882, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamalsoknownas(D, A), teamalsoknownas(_, D).  [covers 40,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,778331 (regressionFit = 4,778325, penalties=5.47E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamalsoknownas(_, A), teamplaysagainstteam(A, _).  [covers 7,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,880888 (regressionFit = 4,880882, penalties=5.37E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), teamalsoknownas(_, A), teamplaysagainstteam(D, _).  [covers 40,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,809292 (regressionFit = 4,809287, penalties=5.47E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamalsoknownas(_, A), teamplaysagainstteam(_, A).  [covers 9,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,880888 (regressionFit = 4,880882, penalties=5.37E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), teamalsoknownas(_, A), teamplaysagainstteam(_, D).  [covers 40,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,880888 (regressionFit = 4,880882, penalties=5.1600000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), athleteledsportsteam(C, E), teamalsoknownas(_, A), teamplaysinleague(E, D).  [covers 40,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,876379 (regressionFit = 4,876374, penalties=5.47E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamalsoknownas(_, A), teamplaysinleague(A, _).  [covers 28,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,880888 (regressionFit = 4,880882, penalties=5.37E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), teamalsoknownas(_, A), teamplaysinleague(D, _).  [covers 40,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,880666 (regressionFit = 4,880661, penalties=5.37E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamalsoknownas(D, A), teamplaysinleague(D, _).  [covers 38,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,880888 (regressionFit = 4,880882, penalties=5.37E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), athleteledsportsteam(C, _), teamalsoknownas(_, A), teamplaysinleague(_, D).  [covers 40,0/210,0 pos, 0,0/0,0 neg]

% Consider expanding [#9 of outerLoop #6, bodyLen=4] 'teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteledsportsteam(B, C), athleteledsportsteam(_, C).  [covers 210,0/210,0 pos, 0,0/0,0 neg]' score=-Infinity
%  At # nodes expanded = 9, |OPEN| = 12.  Pruned 36 variant children.  Sending 26 items to OPEN for evaluation and possible insertion.
% Have created 26 valid-on-seeds descendants and have picked up 13 bad extensions.
%     Score = -4,778330 (regressionFit = 4,778325, penalties=5.17E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), athleteledsportsteam(_, D), athleteledsportsteam(_, A).  [covers 7,0/210,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.27E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteledsportsteam(B, C), athleteledsportsteam(_, C), athleteledsportsteam(_, C).  [covers 210,0/210,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.2600000000000005E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteledsportsteam(B, C), athleteledsportsteam(_, C), athleteplaysforteam(B, C).  [covers 210,0/210,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.160000000000001E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteledsportsteam(B, C), athleteledsportsteam(D, C), athleteplaysforteam(D, C).  [covers 210,0/210,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.370000000000001E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteledsportsteam(B, C), athleteledsportsteam(_, C), athleteplaysforteam(B, _).  [covers 210,0/210,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.27E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteledsportsteam(B, C), athleteledsportsteam(D, C), athleteplaysforteam(D, _).  [covers 210,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,842417 (regressionFit = 4,842411, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), athleteledsportsteam(_, D), athleteplaysforteam(_, A).  [covers 38,0/210,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.370000000000001E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteledsportsteam(B, C), athleteledsportsteam(_, C), athleteplaysforteam(_, C).  [covers 210,0/210,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.96E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, C), athleteledsportsteam(B, D), athleteledsportsteam(E, D), athleteplaysinleague(E, C).  [covers 210,0/210,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.17E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteledsportsteam(B, C), athleteledsportsteam(D, C), athleteplaysinleague(D, _).  [covers 210,0/210,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.17E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, C), athleteledsportsteam(B, D), athleteledsportsteam(_, D), athleteplaysinleague(_, C).  [covers 210,0/210,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.060000000000001E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteledsportsteam(B, C), athleteledsportsteam(D, C), athleteplayssport(D, A).  [covers 210,0/210,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.17E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteledsportsteam(B, C), athleteledsportsteam(D, C), athleteplayssport(D, _).  [covers 210,0/210,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.27E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteledsportsteam(B, C), athleteledsportsteam(_, C), athleteplayssport(_, A).  [covers 210,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,875768 (regressionFit = 4,875763, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), athleteledsportsteam(_, D), teamalsoknownas(A, _).  [covers 62,0/210,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.370000000000001E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteledsportsteam(B, C), athleteledsportsteam(_, C), teamalsoknownas(C, _).  [covers 210,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,880888 (regressionFit = 4,880882, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), athleteledsportsteam(_, D), teamalsoknownas(_, A).  [covers 40,0/210,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.370000000000001E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteledsportsteam(B, C), athleteledsportsteam(_, C), teamalsoknownas(_, C).  [covers 210,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,685984 (regressionFit = 4,685979, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), athleteledsportsteam(_, D), teamplaysagainstteam(A, _).  [covers 52,0/210,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.370000000000001E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteledsportsteam(B, C), athleteledsportsteam(_, C), teamplaysagainstteam(C, _).  [covers 210,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,722196 (regressionFit = 4,722191, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), athleteledsportsteam(_, D), teamplaysagainstteam(_, A).  [covers 59,0/210,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.370000000000001E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteledsportsteam(B, C), athleteledsportsteam(_, C), teamplaysagainstteam(_, C).  [covers 210,0/210,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.160000000000001E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, C), athleteledsportsteam(B, D), athleteledsportsteam(_, D), teamplaysinleague(D, C).  [covers 210,0/210,0 pos, 0,0/0,0 neg]
%     Score = -4,869518 (regressionFit = 4,869513, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), athleteledsportsteam(_, D), teamplaysinleague(A, _).  [covers 137,0/210,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.370000000000001E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteledsportsteam(B, C), athleteledsportsteam(_, C), teamplaysinleague(C, _).  [covers 210,0/210,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.27E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, C), athleteledsportsteam(B, D), athleteledsportsteam(_, D), teamplaysinleague(_, C).  [covers 210,0/210,0 pos, 0,0/0,0 neg]

***** Warning: #5 TOO MANY NODES CONSIDERED (i.e., 'expanded') for 'LearnOneClause': nodesConsidered = 10 and maxNodesToConsider = 10. *****


% The best node found: teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamplaysagainstteam(D, A), teamplaysagainstteam(A, D).  [covers 41,0/210,0 pos, 0,0/0,0 neg]

% The best node found: teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamplaysagainstteam(D, A), teamplaysagainstteam(A, D).  [covers 41,0/210,0 pos, 0,0/0,0 neg]

% Expanding node at Level 3 with score = -0,023.
% Will extend: teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamplaysagainstteam(D, A), teamplaysagainstteam(A, D).  [covers 41,0/210,0 pos, 0,0/0,0 neg]
% Path: 0;true,true,false
Comparing variance: 0.08804283164783049 to score=0.0025 #egs=41.0
Comparing variance: 0.005882146983654159 to score=0.0025 #egs=169.0
%   Creating a TRUE-branch and FALSE-branch leaves because level = 3 >= 3

% Time for loop #6: 2,810 seconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #6, the best clause found is:
%      teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamplaysagainstteam(D, A), teamplaysagainstteam(A, D).  [covers 41,0/210,0 pos, 0,0/0,0 neg]
% This clause covers 41 positive examples, of which 41 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 5 positive seeds: 182 328 341 630 757
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = teamplayssport(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  teamplayssport(_, _).  [covers 829,0/829,0 pos, 0,0/0,0 neg]
% Most-general root: teamplayssport(_, _).  [covers 829,0/829,0 pos, 0,0/0,0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #7, bodyLen=0] 'teamplayssport(_, _).  [covers 829,0/829,0 pos, 0,0/0,0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 4 variant children.  Sending 6 items to OPEN for evaluation and possible insertion.
% Have created 6 valid-on-seeds descendants and have picked up 3 bad extensions.
%     Score = -5,953968 (regressionFit = 5,953967, penalties=1.23E-6) for clause:  teamplayssport(A, _) :- athleteledsportsteam(_, A).  [covers 229,0/829,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -5,953968): teamplayssport(A, _) :- athleteledsportsteam(_, A).  [covers 229,0/829,0 pos, 0,0/0,0 neg]
%     Score = -5,941923 (regressionFit = 5,941922, penalties=1.23E-6) for clause:  teamplayssport(A, _) :- athleteplaysforteam(_, A).  [covers 378,0/829,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -5,941923): teamplayssport(A, _) :- athleteplaysforteam(_, A).  [covers 378,0/829,0 pos, 0,0/0,0 neg]
%     Score = -5,922210 (regressionFit = 5,922208, penalties=1.23E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(_, A).  [covers 139,0/829,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -5,922210): teamplayssport(A, _) :- teamalsoknownas(_, A).  [covers 139,0/829,0 pos, 0,0/0,0 neg]
%     Score = -5,947028 (regressionFit = 5,947027, penalties=1.23E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, _).  [covers 469,0/829,0 pos, 0,0/0,0 neg]
%     Score = -5,942969 (regressionFit = 5,942968, penalties=1.23E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(_, A).  [covers 503,0/829,0 pos, 0,0/0,0 neg]
%     Score = -5,912454 (regressionFit = 5,912453, penalties=1.23E-6) for clause:  teamplayssport(A, _) :- teamplaysinleague(A, _).  [covers 632,0/829,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -5,912454): teamplayssport(A, _) :- teamplaysinleague(A, _).  [covers 632,0/829,0 pos, 0,0/0,0 neg]

% Consider expanding [#2 of outerLoop #7, bodyLen=1] 'teamplayssport(A, _) :- teamplaysinleague(A, _).  [covers 632,0/829,0 pos, 0,0/0,0 neg]' score=-5.912453841963974
%  At # nodes expanded = 2, |OPEN| = 5.  Pruned 4 variant children.  Sending 7 items to OPEN for evaluation and possible insertion.
% Have created 7 valid-on-seeds descendants and have picked up 3 bad extensions.
%     Score = -5,954019 (regressionFit = 5,954017, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysinleague(A, _), athleteledsportsteam(_, A).  [covers 228,0/829,0 pos, 0,0/0,0 neg]
%     Score = -5,943813 (regressionFit = 5,943811, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysinleague(A, _), athleteplaysforteam(_, A).  [covers 361,0/829,0 pos, 0,0/0,0 neg]
%     Score = -5,926084 (regressionFit = 5,926082, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysinleague(A, B), athleteplaysinleague(_, B).  [covers 481,0/829,0 pos, 0,0/0,0 neg]
%     Score = -5,939129 (regressionFit = 5,939126, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysinleague(A, _), teamalsoknownas(_, A).  [covers 103,0/829,0 pos, 0,0/0,0 neg]
%     Score = -5,935471 (regressionFit = 5,935469, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysinleague(A, _), teamplaysagainstteam(A, _).  [covers 427,0/829,0 pos, 0,0/0,0 neg]
%     Score = -5,932486 (regressionFit = 5,932484, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysinleague(A, _), teamplaysagainstteam(_, A).  [covers 446,0/829,0 pos, 0,0/0,0 neg]
%     Score = -5,912455 (regressionFit = 5,912453, penalties=2.1400000000000003E-6) for clause:  teamplayssport(A, _) :- teamplaysinleague(A, B), teamplaysinleague(_, B).  [covers 632,0/829,0 pos, 0,0/0,0 neg]

% Consider expanding [#3 of outerLoop #7, bodyLen=1] 'teamplayssport(A, _) :- teamalsoknownas(_, A).  [covers 139,0/829,0 pos, 0,0/0,0 neg]' score=-5.922209550299847
%  At # nodes expanded = 3, |OPEN| = 4.  Pruned 14 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants and have picked up 12 bad extensions.
%     Score = -5,922210 (regressionFit = 5,922208, penalties=2.1400000000000003E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(B, _).  [covers 139,0/829,0 pos, 0,0/0,0 neg]
%     Score = -5,912308 (regressionFit = 5,912306, penalties=2.1400000000000003E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(_, B).  [covers 120,0/829,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -5,912308): teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(_, B).  [covers 120,0/829,0 pos, 0,0/0,0 neg]
%     Score = -5,939129 (regressionFit = 5,939126, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(_, A), teamplaysinleague(A, _).  [covers 103,0/829,0 pos, 0,0/0,0 neg]
%     Score = -5,917896 (regressionFit = 5,917894, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamplaysinleague(B, _).  [covers 130,0/829,0 pos, 0,0/0,0 neg]

% Consider expanding [#4 of outerLoop #7, bodyLen=1] 'teamplayssport(A, _) :- athleteplaysforteam(_, A).  [covers 378,0/829,0 pos, 0,0/0,0 neg]' score=-5.941923354848984
%  At # nodes expanded = 4, |OPEN| = 3.  Pruned 8 variant children.  Sending 8 items to OPEN for evaluation and possible insertion.
% Have created 8 valid-on-seeds descendants and have picked up 3 bad extensions.
%     Score = -5,955897 (regressionFit = 5,955895, penalties=2.1300000000000004E-6) for clause:  teamplayssport(A, _) :- athleteplaysforteam(B, A), athleteledsportsteam(B, A).  [covers 181,0/829,0 pos, 0,0/0,0 neg]
%     Score = -5,955257 (regressionFit = 5,955254, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- athleteplaysforteam(_, A), athleteledsportsteam(_, A).  [covers 200,0/829,0 pos, 0,0/0,0 neg]
%     Score = -5,941924 (regressionFit = 5,941922, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- athleteplaysforteam(_, A), athleteplaysforteam(_, A).  [covers 378,0/829,0 pos, 0,0/0,0 neg]
%     Score = -5,951902 (regressionFit = 5,951900, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- athleteplaysforteam(B, A), athleteplaysinleague(B, _).  [covers 265,0/829,0 pos, 0,0/0,0 neg]
%     Score = -5,937284 (regressionFit = 5,937282, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- athleteplaysforteam(B, A), athleteplayssport(B, _).  [covers 255,0/829,0 pos, 0,0/0,0 neg]
%     Score = -5,944235 (regressionFit = 5,944233, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- athleteplaysforteam(_, A), teamplaysagainstteam(A, _).  [covers 357,0/829,0 pos, 0,0/0,0 neg]
%     Score = -5,943055 (regressionFit = 5,943053, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- athleteplaysforteam(_, A), teamplaysagainstteam(_, A).  [covers 368,0/829,0 pos, 0,0/0,0 neg]
%     Score = -5,943813 (regressionFit = 5,943811, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- athleteplaysforteam(_, A), teamplaysinleague(A, _).  [covers 361,0/829,0 pos, 0,0/0,0 neg]

% Consider expanding [#5 of outerLoop #7, bodyLen=1] 'teamplayssport(A, _) :- teamplaysagainstteam(_, A).  [covers 503,0/829,0 pos, 0,0/0,0 neg]' score=-5.942969189116413
%  At # nodes expanded = 5, |OPEN| = 2.  Pruned 14 variant children.  Sending 13 items to OPEN for evaluation and possible insertion.
% Have created 13 valid-on-seeds descendants and have picked up 7 bad extensions.
%     Score = -5,954118 (regressionFit = 5,954116, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(_, A), athleteledsportsteam(_, A).  [covers 226,0/829,0 pos, 0,0/0,0 neg]
%     Score = -5,935322 (regressionFit = 5,935319, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(B, A), athleteledsportsteam(_, B).  [covers 428,0/829,0 pos, 0,0/0,0 neg]
%     Score = -5,943055 (regressionFit = 5,943053, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(_, A), athleteplaysforteam(_, A).  [covers 368,0/829,0 pos, 0,0/0,0 neg]
%     Score = -5,944394 (regressionFit = 5,944392, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(B, A), athleteplaysforteam(_, B).  [covers 492,0/829,0 pos, 0,0/0,0 neg]
%     Score = -5,954044 (regressionFit = 5,954042, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(B, A), teamalsoknownas(B, _).  [covers 376,0/829,0 pos, 0,0/0,0 neg]
%     Score = -5,920707 (regressionFit = 5,920705, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(B, A), teamalsoknownas(_, B).  [covers 375,0/829,0 pos, 0,0/0,0 neg]
%     Score = -5,949780 (regressionFit = 5,949778, penalties=2.0300000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(B, A), teamplaysagainstteam(A, B).  [covers 440,0/829,0 pos, 0,0/0,0 neg]
%     Score = -5,948239 (regressionFit = 5,948237, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(_, A), teamplaysagainstteam(A, _).  [covers 457,0/829,0 pos, 0,0/0,0 neg]
%     Score = -5,942970 (regressionFit = 5,942968, penalties=2.1400000000000003E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(B, A), teamplaysagainstteam(B, _).  [covers 503,0/829,0 pos, 0,0/0,0 neg]
%     Score = -5,942970 (regressionFit = 5,942968, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(_, A), teamplaysagainstteam(_, A).  [covers 503,0/829,0 pos, 0,0/0,0 neg]
%     Score = -5,942970 (regressionFit = 5,942968, penalties=2.1400000000000003E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(B, A), teamplaysagainstteam(_, B).  [covers 503,0/829,0 pos, 0,0/0,0 neg]
%     Score = -5,932486 (regressionFit = 5,932484, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(_, A), teamplaysinleague(A, _).  [covers 446,0/829,0 pos, 0,0/0,0 neg]
%     Score = -5,943890 (regressionFit = 5,943887, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(B, A), teamplaysinleague(B, _).  [covers 496,0/829,0 pos, 0,0/0,0 neg]

% Consider expanding [#6 of outerLoop #7, bodyLen=1] 'teamplayssport(A, _) :- teamplaysagainstteam(A, _).  [covers 469,0/829,0 pos, 0,0/0,0 neg]' score=-5.9470280009073795
%  At # nodes expanded = 6, |OPEN| = 1.  Pruned 14 variant children.  Sending 13 items to OPEN for evaluation and possible insertion.
% Have created 13 valid-on-seeds descendants and have picked up 7 bad extensions.
%     Score = -5,954216 (regressionFit = 5,954213, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, _), athleteledsportsteam(_, A).  [covers 224,0/829,0 pos, 0,0/0,0 neg]
%     Score = -5,938967 (regressionFit = 5,938964, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, B), athleteledsportsteam(_, B).  [covers 402,0/829,0 pos, 0,0/0,0 neg]
%     Score = -5,944235 (regressionFit = 5,944233, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, _), athleteplaysforteam(_, A).  [covers 357,0/829,0 pos, 0,0/0,0 neg]
%     Score = -5,948619 (regressionFit = 5,948617, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, B), athleteplaysforteam(_, B).  [covers 453,0/829,0 pos, 0,0/0,0 neg]
%     Score = -5,954979 (regressionFit = 5,954977, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, B), teamalsoknownas(B, _).  [covers 355,0/829,0 pos, 0,0/0,0 neg]
%     Score = -5,923406 (regressionFit = 5,923404, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, B), teamalsoknownas(_, B).  [covers 359,0/829,0 pos, 0,0/0,0 neg]
%     Score = -5,949780 (regressionFit = 5,949778, penalties=2.0300000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, B), teamplaysagainstteam(B, A).  [covers 440,0/829,0 pos, 0,0/0,0 neg]
%     Score = -5,947029 (regressionFit = 5,947027, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, _), teamplaysagainstteam(A, _).  [covers 469,0/829,0 pos, 0,0/0,0 neg]
%     Score = -5,947341 (regressionFit = 5,947339, penalties=2.1400000000000003E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, B), teamplaysagainstteam(B, _).  [covers 466,0/829,0 pos, 0,0/0,0 neg]
%     Score = -5,948239 (regressionFit = 5,948237, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, _), teamplaysagainstteam(_, A).  [covers 457,0/829,0 pos, 0,0/0,0 neg]
%     Score = -5,947029 (regressionFit = 5,947027, penalties=2.1400000000000003E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, B), teamplaysagainstteam(_, B).  [covers 469,0/829,0 pos, 0,0/0,0 neg]
%     Score = -5,935471 (regressionFit = 5,935469, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, _), teamplaysinleague(A, _).  [covers 427,0/829,0 pos, 0,0/0,0 neg]
%     Score = -5,947748 (regressionFit = 5,947745, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, B), teamplaysinleague(B, _).  [covers 462,0/829,0 pos, 0,0/0,0 neg]

% Consider expanding [#7 of outerLoop #7, bodyLen=1] 'teamplayssport(A, _) :- athleteledsportsteam(_, A).  [covers 229,0/829,0 pos, 0,0/0,0 neg]' score=-5.953967751105955
%  At # nodes expanded = 7, |OPEN| = 0.  Pruned 8 variant children.  Sending 7 items to OPEN for evaluation and possible insertion.
% Have created 7 valid-on-seeds descendants and have picked up 3 bad extensions.
%     Score = -5,955897 (regressionFit = 5,955895, penalties=2.1300000000000004E-6) for clause:  teamplayssport(A, _) :- athleteledsportsteam(B, A), athleteplaysforteam(B, A).  [covers 181,0/829,0 pos, 0,0/0,0 neg]
%     Score = -5,955257 (regressionFit = 5,955254, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- athleteledsportsteam(_, A), athleteplaysforteam(_, A).  [covers 200,0/829,0 pos, 0,0/0,0 neg]
%     Score = -5,955369 (regressionFit = 5,955367, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- athleteledsportsteam(B, A), athleteplaysinleague(B, _).  [covers 197,0/829,0 pos, 0,0/0,0 neg]
%     Score = -5,943576 (regressionFit = 5,943574, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- athleteledsportsteam(B, A), athleteplayssport(B, _).  [covers 191,0/829,0 pos, 0,0/0,0 neg]
%     Score = -5,954216 (regressionFit = 5,954213, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- athleteledsportsteam(_, A), teamplaysagainstteam(A, _).  [covers 224,0/829,0 pos, 0,0/0,0 neg]
%     Score = -5,954118 (regressionFit = 5,954116, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- athleteledsportsteam(_, A), teamplaysagainstteam(_, A).  [covers 226,0/829,0 pos, 0,0/0,0 neg]
%     Score = -5,954019 (regressionFit = 5,954017, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- athleteledsportsteam(_, A), teamplaysinleague(A, _).  [covers 228,0/829,0 pos, 0,0/0,0 neg]

% The best node found: teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(_, B).  [covers 120,0/829,0 pos, 0,0/0,0 neg]

% The best node found: teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(_, B).  [covers 120,0/829,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,007.
% Will extend: teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(_, B).  [covers 120,0/829,0 pos, 0,0/0,0 neg]
% Path: 0;false
Comparing variance: 0.02437499999999997 to score=0.0025 #egs=120.0
Comparing variance: 0.0042134077078697894 to score=0.0025 #egs=709.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 120,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,024375)
%         ILP node to extend: teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(_, B).  [covers 120,0/829,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -0,024375) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 709,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,004213)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 2 and with score = -0,004213) into the LAST position (#2) in the search queue.

% Time for loop #7: 299 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #7, the best clause found is:
%      teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(_, B).  [covers 120,0/829,0 pos, 0,0/0,0 neg]
% This clause covers 120 positive examples, of which 120 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(_, B).  [covers 120,0/120,0 pos, 0,0/0,0 neg]'
%     Score = -5,912308 (regressionFit = 5,912306, penalties=2.1400000000000003E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(_, B).  [covers 120,0/120,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 7 17 20 41 42 74 75 91 100 110
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Consider expanding [#1 of outerLoop #8, bodyLen=2] 'teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(_, B).  [covers 120,0/120,0 pos, 0,0/0,0 neg]' score=-5.912308204879677
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 32 variant children.  Sending 21 items to OPEN for evaluation and possible insertion.
% Have created 21 valid-on-seeds descendants and have picked up 15 bad extensions.
%     Score = -2,911980 (regressionFit = 2,911977, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(_, B), athleteledsportsteam(_, A).  [covers 21,0/120,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -2,911980): teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(_, B), athleteledsportsteam(_, A).  [covers 21,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,910003 (regressionFit = 2,910000, penalties=3.1500000000000008E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(C, B), athleteledsportsteam(_, C).  [covers 100,0/120,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -2,910003): teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(C, B), athleteledsportsteam(_, C).  [covers 100,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,924912 (regressionFit = 2,924908, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(_, B), athleteplaysforteam(_, A).  [covers 42,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,922417 (regressionFit = 2,922414, penalties=3.1500000000000008E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(C, B), athleteplaysforteam(_, C).  [covers 116,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,924080 (regressionFit = 2,924077, penalties=3.0400000000000005E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(_, B), teamalsoknownas(A, B).  [covers 86,0/120,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(C, B), teamalsoknownas(B, C).  [covers 118,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,920811 (regressionFit = 2,920807, penalties=3.1500000000000003E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(_, B), teamalsoknownas(A, _).  [covers 92,0/120,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(_, B), teamalsoknownas(B, _).  [covers 120,0/120,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(C, B), teamalsoknownas(C, _).  [covers 120,0/120,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(_, B), teamalsoknownas(_, A).  [covers 120,0/120,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(_, B), teamalsoknownas(_, B).  [covers 120,0/120,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(C, B), teamalsoknownas(_, C).  [covers 118,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,873953 (regressionFit = 2,873950, penalties=3.04E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(C, B), teamplaysagainstteam(A, C).  [covers 35,0/120,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -2,873953): teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(C, B), teamplaysagainstteam(A, C).  [covers 35,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,923298 (regressionFit = 2,923295, penalties=3.04E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(C, B), teamplaysagainstteam(C, A).  [covers 32,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,901198 (regressionFit = 2,901195, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(_, B), teamplaysagainstteam(A, _).  [covers 47,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,923080 (regressionFit = 2,923077, penalties=3.1500000000000008E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(C, B), teamplaysagainstteam(C, _).  [covers 117,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,912950 (regressionFit = 2,912946, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(_, B), teamplaysagainstteam(_, A).  [covers 56,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,923080 (regressionFit = 2,923077, penalties=3.1500000000000008E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(C, B), teamplaysagainstteam(_, C).  [covers 117,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,924373 (regressionFit = 2,924370, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(_, B), teamplaysinleague(A, _).  [covers 85,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,919646 (regressionFit = 2,919643, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(_, B), teamplaysinleague(B, _).  [covers 112,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,923080 (regressionFit = 2,923077, penalties=3.1500000000000008E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(C, B), teamplaysinleague(C, _).  [covers 117,0/120,0 pos, 0,0/0,0 neg]

% Consider expanding [#2 of outerLoop #8, bodyLen=3] 'teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(C, B), teamplaysagainstteam(A, C).  [covers 35,0/120,0 pos, 0,0/0,0 neg]' score=-2.873952619831935
%  At # nodes expanded = 2, |OPEN| = 20.  Pruned 30 variant children.  Sending 14 items to OPEN for evaluation and possible insertion.
% Have created 14 valid-on-seeds descendants and have picked up 18 bad extensions.
%     Score = -2,895242 (regressionFit = 2,895238, penalties=4.150000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(C, B), teamplaysagainstteam(A, C), athleteledsportsteam(_, A).  [covers 15,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,922226 (regressionFit = 2,922222, penalties=4.150000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(C, B), teamplaysagainstteam(A, C), athleteplaysforteam(_, A).  [covers 30,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,870729 (regressionFit = 2,870725, penalties=4.150000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(C, B), teamplaysagainstteam(A, C), athleteplaysforteam(_, C).  [covers 34,0/120,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -2,870729): teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(C, B), teamplaysagainstteam(A, C), athleteplaysforteam(_, C).  [covers 34,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,910004 (regressionFit = 2,910000, penalties=3.94E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(C, B), teamplaysagainstteam(A, C), teamalsoknownas(A, B).  [covers 20,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,911981 (regressionFit = 2,911977, penalties=4.05E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(C, B), teamplaysagainstteam(A, C), teamalsoknownas(A, _).  [covers 21,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,873954 (regressionFit = 2,873950, penalties=4.05E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(C, B), teamplaysagainstteam(A, C), teamalsoknownas(B, _).  [covers 35,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,873954 (regressionFit = 2,873950, penalties=4.05E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(C, B), teamplaysagainstteam(A, C), teamalsoknownas(_, A).  [covers 35,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,873954 (regressionFit = 2,873950, penalties=4.05E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(C, B), teamplaysagainstteam(A, C), teamalsoknownas(_, B).  [covers 35,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,873954 (regressionFit = 2,873950, penalties=4.05E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(C, B), teamplaysagainstteam(A, C), teamplaysagainstteam(A, _).  [covers 35,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,873954 (regressionFit = 2,873950, penalties=4.05E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(C, B), teamplaysagainstteam(A, C), teamplaysagainstteam(_, A).  [covers 35,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,873954 (regressionFit = 2,873950, penalties=4.05E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(C, B), teamplaysagainstteam(A, C), teamplaysagainstteam(_, C).  [covers 35,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,923724 (regressionFit = 2,923720, penalties=4.150000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(C, B), teamplaysagainstteam(A, C), teamplaysinleague(A, _).  [covers 33,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,873954 (regressionFit = 2,873950, penalties=4.150000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(C, B), teamplaysagainstteam(A, C), teamplaysinleague(B, _).  [covers 35,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,873954 (regressionFit = 2,873950, penalties=4.150000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(C, B), teamplaysagainstteam(A, C), teamplaysinleague(C, _).  [covers 35,0/120,0 pos, 0,0/0,0 neg]

% Consider expanding [#3 of outerLoop #8, bodyLen=3] 'teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(_, B), teamplaysagainstteam(A, _).  [covers 47,0/120,0 pos, 0,0/0,0 neg]' score=-2.9011982368842926
%  At # nodes expanded = 3, |OPEN| = 19.  Pruned 58 variant children.  Sending 30 items to OPEN for evaluation and possible insertion.
% Have created 30 valid-on-seeds descendants and have picked up 24 bad extensions.
%     Score = -2,910004 (regressionFit = 2,910000, penalties=4.3600000000000015E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(_, B), teamplaysagainstteam(A, _), athleteledsportsteam(_, A).  [covers 20,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,867298 (regressionFit = 2,867294, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(C, B), teamplaysagainstteam(A, _), athleteledsportsteam(_, C).  [covers 33,0/120,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -2,867298): teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(C, B), teamplaysagainstteam(A, _), athleteledsportsteam(_, C).  [covers 33,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,924981 (regressionFit = 2,924976, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(_, B), teamplaysagainstteam(A, C), athleteledsportsteam(_, C).  [covers 39,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,924981 (regressionFit = 2,924977, penalties=4.3600000000000015E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(_, B), teamplaysagainstteam(A, _), athleteplaysforteam(_, A).  [covers 41,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,899534 (regressionFit = 2,899530, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(C, B), teamplaysagainstteam(A, _), athleteplaysforteam(_, C).  [covers 46,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,901199 (regressionFit = 2,901195, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(_, B), teamplaysagainstteam(A, C), athleteplaysforteam(_, C).  [covers 47,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,922226 (regressionFit = 2,922222, penalties=4.15E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(_, B), teamplaysagainstteam(A, _), teamalsoknownas(A, B).  [covers 30,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,901199 (regressionFit = 2,901195, penalties=4.05E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(C, B), teamplaysagainstteam(A, _), teamalsoknownas(B, C).  [covers 47,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,873954 (regressionFit = 2,873950, penalties=4.05E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(_, B), teamplaysagainstteam(A, C), teamalsoknownas(C, B).  [covers 35,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,922802 (regressionFit = 2,922798, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(_, B), teamplaysagainstteam(A, _), teamalsoknownas(A, _).  [covers 31,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,901199 (regressionFit = 2,901195, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(_, B), teamplaysagainstteam(A, _), teamalsoknownas(B, _).  [covers 47,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,901199 (regressionFit = 2,901195, penalties=4.16E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(C, B), teamplaysagainstteam(A, _), teamalsoknownas(C, _).  [covers 47,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,901199 (regressionFit = 2,901195, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(_, B), teamplaysagainstteam(A, _), teamalsoknownas(_, A).  [covers 47,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,901199 (regressionFit = 2,901195, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(_, B), teamplaysagainstteam(A, _), teamalsoknownas(_, B).  [covers 47,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,901199 (regressionFit = 2,901195, penalties=4.16E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(C, B), teamplaysagainstteam(A, _), teamalsoknownas(_, C).  [covers 47,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,873954 (regressionFit = 2,873950, penalties=4.05E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(C, B), teamplaysagainstteam(A, _), teamplaysagainstteam(A, C).  [covers 35,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,919956 (regressionFit = 2,919952, penalties=4.05E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(C, B), teamplaysagainstteam(A, _), teamplaysagainstteam(C, A).  [covers 27,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,901199 (regressionFit = 2,901195, penalties=3.95E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(C, B), teamplaysagainstteam(A, D), teamplaysagainstteam(C, D).  [covers 47,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,895937 (regressionFit = 2,895933, penalties=4.05E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(_, B), teamplaysagainstteam(A, C), teamplaysagainstteam(C, A).  [covers 44,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,901199 (regressionFit = 2,901195, penalties=3.95E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(C, B), teamplaysagainstteam(A, D), teamplaysagainstteam(D, C).  [covers 47,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,901199 (regressionFit = 2,901195, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(_, B), teamplaysagainstteam(A, _), teamplaysagainstteam(A, _).  [covers 47,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,901199 (regressionFit = 2,901195, penalties=4.16E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(C, B), teamplaysagainstteam(A, _), teamplaysagainstteam(C, _).  [covers 47,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,901199 (regressionFit = 2,901195, penalties=4.16E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(_, B), teamplaysagainstteam(A, C), teamplaysagainstteam(C, _).  [covers 47,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,901199 (regressionFit = 2,901195, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(_, B), teamplaysagainstteam(A, _), teamplaysagainstteam(_, A).  [covers 47,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,901199 (regressionFit = 2,901195, penalties=4.16E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(C, B), teamplaysagainstteam(A, _), teamplaysagainstteam(_, C).  [covers 47,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,901199 (regressionFit = 2,901195, penalties=4.16E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(_, B), teamplaysagainstteam(A, C), teamplaysagainstteam(_, C).  [covers 47,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,924449 (regressionFit = 2,924444, penalties=4.3600000000000015E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(_, B), teamplaysagainstteam(A, _), teamplaysinleague(A, _).  [covers 45,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,901199 (regressionFit = 2,901195, penalties=4.3600000000000015E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(_, B), teamplaysagainstteam(A, _), teamplaysinleague(B, _).  [covers 47,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,901199 (regressionFit = 2,901195, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(C, B), teamplaysagainstteam(A, _), teamplaysinleague(C, _).  [covers 47,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,901199 (regressionFit = 2,901195, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(_, B), teamplaysagainstteam(A, C), teamplaysinleague(C, _).  [covers 47,0/120,0 pos, 0,0/0,0 neg]

% Consider expanding [#4 of outerLoop #8, bodyLen=3] 'teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(C, B), athleteledsportsteam(_, C).  [covers 100,0/120,0 pos, 0,0/0,0 neg]' score=-2.91000314999999
%  At # nodes expanded = 4, |OPEN| = 18.  Pruned 44 variant children.  Sending 19 items to OPEN for evaluation and possible insertion.
% Have created 19 valid-on-seeds descendants and have picked up 20 bad extensions.
%     Score = -2,902346 (regressionFit = 2,902342, penalties=4.16E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(C, B), athleteledsportsteam(_, C), athleteledsportsteam(_, A).  [covers 17,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,910004 (regressionFit = 2,910000, penalties=4.05E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(C, B), athleteledsportsteam(D, C), athleteplaysforteam(D, C).  [covers 100,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,921565 (regressionFit = 2,921561, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(C, B), athleteledsportsteam(_, C), athleteplaysforteam(_, A).  [covers 29,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,910004 (regressionFit = 2,910000, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(C, B), athleteledsportsteam(_, C), athleteplaysforteam(_, C).  [covers 100,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,924645 (regressionFit = 2,924641, penalties=4.05E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(C, B), athleteledsportsteam(_, C), teamalsoknownas(A, B).  [covers 76,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,907221 (regressionFit = 2,907216, penalties=4.05E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(C, B), athleteledsportsteam(_, C), teamalsoknownas(B, C).  [covers 97,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,924908 (regressionFit = 2,924904, penalties=4.16E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(C, B), athleteledsportsteam(_, C), teamalsoknownas(A, _).  [covers 82,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,910004 (regressionFit = 2,910000, penalties=4.16E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(C, B), athleteledsportsteam(_, C), teamalsoknownas(B, _).  [covers 100,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,910004 (regressionFit = 2,910000, penalties=4.16E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(C, B), athleteledsportsteam(_, C), teamalsoknownas(C, _).  [covers 100,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,910004 (regressionFit = 2,910000, penalties=4.16E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(C, B), athleteledsportsteam(_, C), teamalsoknownas(_, A).  [covers 100,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,910004 (regressionFit = 2,910000, penalties=4.16E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(C, B), athleteledsportsteam(_, C), teamalsoknownas(_, B).  [covers 100,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,908167 (regressionFit = 2,908163, penalties=4.16E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(C, B), athleteledsportsteam(_, C), teamalsoknownas(_, C).  [covers 98,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,867298 (regressionFit = 2,867294, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(C, B), athleteledsportsteam(_, C), teamplaysagainstteam(A, _).  [covers 33,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,910004 (regressionFit = 2,910000, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(C, B), athleteledsportsteam(_, C), teamplaysagainstteam(C, _).  [covers 100,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,891946 (regressionFit = 2,891941, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(C, B), athleteledsportsteam(_, C), teamplaysagainstteam(_, A).  [covers 42,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,910004 (regressionFit = 2,910000, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(C, B), athleteledsportsteam(_, C), teamplaysagainstteam(_, C).  [covers 100,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,921950 (regressionFit = 2,921946, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(C, B), athleteledsportsteam(_, C), teamplaysinleague(A, _).  [covers 68,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,905267 (regressionFit = 2,905263, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(C, B), athleteledsportsteam(_, C), teamplaysinleague(B, _).  [covers 95,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,910004 (regressionFit = 2,910000, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(C, B), athleteledsportsteam(_, C), teamplaysinleague(C, _).  [covers 100,0/120,0 pos, 0,0/0,0 neg]

% Consider expanding [#5 of outerLoop #8, bodyLen=3] 'teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(_, B), athleteledsportsteam(_, A).  [covers 21,0/120,0 pos, 0,0/0,0 neg]' score=-2.9119801619769046
%  At # nodes expanded = 5, |OPEN| = 17.  Pruned 44 variant children.  Sending 18 items to OPEN for evaluation and possible insertion.
% Have created 18 valid-on-seeds descendants and have picked up 19 bad extensions.
%     Score = -2,902346 (regressionFit = 2,902342, penalties=4.16E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(C, B), athleteledsportsteam(_, A), athleteledsportsteam(_, C).  [covers 17,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,907769 (regressionFit = 2,907764, penalties=4.150000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(_, B), athleteledsportsteam(C, A), athleteplaysforteam(C, A).  [covers 19,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,911981 (regressionFit = 2,911977, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(C, B), athleteledsportsteam(_, A), athleteplaysforteam(_, C).  [covers 21,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,895242 (regressionFit = 2,895238, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(_, B), athleteledsportsteam(C, A), athleteplaysinleague(C, _).  [covers 15,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,911981 (regressionFit = 2,911977, penalties=4.05E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(C, B), athleteledsportsteam(_, A), teamalsoknownas(B, C).  [covers 21,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,911981 (regressionFit = 2,911977, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(_, B), athleteledsportsteam(_, A), teamalsoknownas(B, _).  [covers 21,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,911981 (regressionFit = 2,911977, penalties=4.16E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(C, B), athleteledsportsteam(_, A), teamalsoknownas(C, _).  [covers 21,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,911981 (regressionFit = 2,911977, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(_, B), athleteledsportsteam(_, A), teamalsoknownas(_, A).  [covers 21,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,911981 (regressionFit = 2,911977, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(_, B), athleteledsportsteam(_, A), teamalsoknownas(_, B).  [covers 21,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,911981 (regressionFit = 2,911977, penalties=4.16E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(C, B), athleteledsportsteam(_, A), teamalsoknownas(_, C).  [covers 21,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,895242 (regressionFit = 2,895238, penalties=4.150000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(C, B), athleteledsportsteam(_, A), teamplaysagainstteam(A, C).  [covers 15,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,910004 (regressionFit = 2,910000, penalties=4.3600000000000015E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(_, B), athleteledsportsteam(_, A), teamplaysagainstteam(A, _).  [covers 20,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,911981 (regressionFit = 2,911977, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(C, B), athleteledsportsteam(_, A), teamplaysagainstteam(C, _).  [covers 21,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,910004 (regressionFit = 2,910000, penalties=4.3600000000000015E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(_, B), athleteledsportsteam(_, A), teamplaysagainstteam(_, A).  [covers 20,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,911981 (regressionFit = 2,911977, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(C, B), athleteledsportsteam(_, A), teamplaysagainstteam(_, C).  [covers 21,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,911981 (regressionFit = 2,911977, penalties=4.3600000000000015E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(_, B), athleteledsportsteam(_, A), teamplaysinleague(A, _).  [covers 21,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,911981 (regressionFit = 2,911977, penalties=4.3600000000000015E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(_, B), athleteledsportsteam(_, A), teamplaysinleague(B, _).  [covers 21,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,911981 (regressionFit = 2,911977, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(C, B), athleteledsportsteam(_, A), teamplaysinleague(C, _).  [covers 21,0/120,0 pos, 0,0/0,0 neg]

% Consider expanding [#6 of outerLoop #8, bodyLen=3] 'teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(_, B), teamplaysagainstteam(_, A).  [covers 56,0/120,0 pos, 0,0/0,0 neg]' score=-2.9129496785714304
%  At # nodes expanded = 6, |OPEN| = 16.  Pruned 58 variant children.  Sending 33 items to OPEN for evaluation and possible insertion.
% Have created 33 valid-on-seeds descendants and have picked up 22 bad extensions.
%     Score = -2,910004 (regressionFit = 2,910000, penalties=4.3600000000000015E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(_, B), teamplaysagainstteam(_, A), athleteledsportsteam(_, A).  [covers 20,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,891946 (regressionFit = 2,891941, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(C, B), teamplaysagainstteam(_, A), athleteledsportsteam(_, C).  [covers 42,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,924981 (regressionFit = 2,924977, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(_, B), teamplaysagainstteam(C, A), athleteledsportsteam(_, C).  [covers 41,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,924981 (regressionFit = 2,924977, penalties=4.3600000000000015E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(_, B), teamplaysagainstteam(_, A), athleteplaysforteam(_, A).  [covers 41,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,911892 (regressionFit = 2,911888, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(C, B), teamplaysagainstteam(_, A), athleteplaysforteam(_, C).  [covers 55,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,912951 (regressionFit = 2,912946, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(_, B), teamplaysagainstteam(C, A), athleteplaysforteam(_, C).  [covers 56,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,924784 (regressionFit = 2,924780, penalties=4.15E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(_, B), teamplaysagainstteam(_, A), teamalsoknownas(A, B).  [covers 37,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,910778 (regressionFit = 2,910774, penalties=4.05E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(C, B), teamplaysagainstteam(_, A), teamalsoknownas(B, C).  [covers 54,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,895353 (regressionFit = 2,895349, penalties=4.05E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(_, B), teamplaysagainstteam(C, A), teamalsoknownas(B, C).  [covers 34,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,923300 (regressionFit = 2,923295, penalties=4.05E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(_, B), teamplaysagainstteam(C, A), teamalsoknownas(C, B).  [covers 32,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,904259 (regressionFit = 2,904255, penalties=3.95E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(C, B), teamplaysagainstteam(D, A), teamalsoknownas(D, C).  [covers 26,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,924908 (regressionFit = 2,924904, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(_, B), teamplaysagainstteam(_, A), teamalsoknownas(A, _).  [covers 38,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,912951 (regressionFit = 2,912946, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(_, B), teamplaysagainstteam(_, A), teamalsoknownas(B, _).  [covers 56,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,912951 (regressionFit = 2,912946, penalties=4.16E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(C, B), teamplaysagainstteam(_, A), teamalsoknownas(C, _).  [covers 56,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,908375 (regressionFit = 2,908371, penalties=4.16E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(_, B), teamplaysagainstteam(C, A), teamalsoknownas(C, _).  [covers 52,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,912951 (regressionFit = 2,912946, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(_, B), teamplaysagainstteam(_, A), teamalsoknownas(_, A).  [covers 56,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,912951 (regressionFit = 2,912946, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(_, B), teamplaysagainstteam(_, A), teamalsoknownas(_, B).  [covers 56,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,910779 (regressionFit = 2,910774, penalties=4.16E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(C, B), teamplaysagainstteam(_, A), teamalsoknownas(_, C).  [covers 54,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,873954 (regressionFit = 2,873950, penalties=4.05E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(C, B), teamplaysagainstteam(_, A), teamplaysagainstteam(A, C).  [covers 35,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,895937 (regressionFit = 2,895933, penalties=4.05E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(_, B), teamplaysagainstteam(C, A), teamplaysagainstteam(A, C).  [covers 44,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,923300 (regressionFit = 2,923295, penalties=4.05E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(C, B), teamplaysagainstteam(_, A), teamplaysagainstteam(C, A).  [covers 32,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,907080 (regressionFit = 2,907076, penalties=3.95E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(C, B), teamplaysagainstteam(D, A), teamplaysagainstteam(C, D).  [covers 51,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,912950 (regressionFit = 2,912946, penalties=3.95E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(C, B), teamplaysagainstteam(D, A), teamplaysagainstteam(D, C).  [covers 56,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,901199 (regressionFit = 2,901195, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(_, B), teamplaysagainstteam(_, A), teamplaysagainstteam(A, _).  [covers 47,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,912951 (regressionFit = 2,912946, penalties=4.16E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(C, B), teamplaysagainstteam(_, A), teamplaysagainstteam(C, _).  [covers 56,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,912951 (regressionFit = 2,912946, penalties=4.16E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(_, B), teamplaysagainstteam(C, A), teamplaysagainstteam(C, _).  [covers 56,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,912951 (regressionFit = 2,912946, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(_, B), teamplaysagainstteam(_, A), teamplaysagainstteam(_, A).  [covers 56,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,912951 (regressionFit = 2,912946, penalties=4.16E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(C, B), teamplaysagainstteam(_, A), teamplaysagainstteam(_, C).  [covers 56,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,912951 (regressionFit = 2,912946, penalties=4.16E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(_, B), teamplaysagainstteam(C, A), teamplaysagainstteam(_, C).  [covers 56,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,923258 (regressionFit = 2,923254, penalties=4.3600000000000015E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(_, B), teamplaysagainstteam(_, A), teamplaysinleague(A, _).  [covers 49,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,912951 (regressionFit = 2,912946, penalties=4.3600000000000015E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(_, B), teamplaysagainstteam(_, A), teamplaysinleague(B, _).  [covers 56,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,912951 (regressionFit = 2,912946, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(C, B), teamplaysagainstteam(_, A), teamplaysinleague(C, _).  [covers 56,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,912951 (regressionFit = 2,912946, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(_, B), teamplaysagainstteam(C, A), teamplaysinleague(C, _).  [covers 56,0/120,0 pos, 0,0/0,0 neg]

% Consider expanding [#7 of outerLoop #8, bodyLen=3] 'teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(_, B), teamplaysinleague(B, _).  [covers 112,0/120,0 pos, 0,0/0,0 neg]' score=-2.9196461071428508
%  At # nodes expanded = 7, |OPEN| = 15.  Pruned 36 variant children.  Sending 23 items to OPEN for evaluation and possible insertion.
% Have created 23 valid-on-seeds descendants and have picked up 16 bad extensions.
%     Score = -2,911981 (regressionFit = 2,911977, penalties=4.3600000000000015E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(_, B), teamplaysinleague(B, _), athleteledsportsteam(_, A).  [covers 21,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,905267 (regressionFit = 2,905263, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(C, B), teamplaysinleague(B, _), athleteledsportsteam(_, C).  [covers 95,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,924913 (regressionFit = 2,924908, penalties=4.3600000000000015E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(_, B), teamplaysinleague(B, _), athleteplaysforteam(_, A).  [covers 42,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,918923 (regressionFit = 2,918919, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(C, B), teamplaysinleague(B, _), athleteplaysforteam(_, C).  [covers 111,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,924784 (regressionFit = 2,924780, penalties=4.15E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(_, B), teamplaysinleague(B, _), teamalsoknownas(A, B).  [covers 83,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,918186 (regressionFit = 2,918182, penalties=4.05E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(C, B), teamplaysinleague(B, _), teamalsoknownas(B, C).  [covers 110,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,924607 (regressionFit = 2,924603, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(_, B), teamplaysinleague(B, _), teamalsoknownas(A, _).  [covers 84,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,919647 (regressionFit = 2,919643, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(_, B), teamplaysinleague(B, _), teamalsoknownas(B, _).  [covers 112,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,919647 (regressionFit = 2,919643, penalties=4.16E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(C, B), teamplaysinleague(B, _), teamalsoknownas(C, _).  [covers 112,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,919647 (regressionFit = 2,919643, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(_, B), teamplaysinleague(B, _), teamalsoknownas(_, A).  [covers 112,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,919647 (regressionFit = 2,919643, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(_, B), teamplaysinleague(B, _), teamalsoknownas(_, B).  [covers 112,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,918186 (regressionFit = 2,918182, penalties=4.16E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(C, B), teamplaysinleague(B, _), teamalsoknownas(_, C).  [covers 110,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,873954 (regressionFit = 2,873950, penalties=4.150000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(C, B), teamplaysinleague(B, _), teamplaysagainstteam(A, C).  [covers 35,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,923300 (regressionFit = 2,923295, penalties=4.150000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(C, B), teamplaysinleague(B, _), teamplaysagainstteam(C, A).  [covers 32,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,901199 (regressionFit = 2,901195, penalties=4.3600000000000015E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(_, B), teamplaysinleague(B, _), teamplaysagainstteam(A, _).  [covers 47,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,919647 (regressionFit = 2,919643, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(C, B), teamplaysinleague(B, _), teamplaysagainstteam(C, _).  [covers 112,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,912951 (regressionFit = 2,912946, penalties=4.3600000000000015E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(_, B), teamplaysinleague(B, _), teamplaysagainstteam(_, A).  [covers 56,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,919647 (regressionFit = 2,919643, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(C, B), teamplaysinleague(B, _), teamplaysagainstteam(_, C).  [covers 112,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,918968 (regressionFit = 2,918964, penalties=4.05E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(_, B), teamplaysinleague(B, C), teamplaysinleague(A, C).  [covers 57,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,919647 (regressionFit = 2,919643, penalties=3.95E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(C, B), teamplaysinleague(B, D), teamplaysinleague(C, D).  [covers 112,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,925004 (regressionFit = 2,925000, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(_, B), teamplaysinleague(B, _), teamplaysinleague(A, _).  [covers 80,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,919647 (regressionFit = 2,919643, penalties=4.16E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(C, B), teamplaysinleague(B, _), teamplaysinleague(C, _).  [covers 112,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,919647 (regressionFit = 2,919643, penalties=4.16E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(_, B), teamplaysinleague(B, C), teamplaysinleague(_, C).  [covers 112,0/120,0 pos, 0,0/0,0 neg]

% Consider expanding [#8 of outerLoop #8, bodyLen=3] 'teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(_, B), teamalsoknownas(A, _).  [covers 92,0/120,0 pos, 0,0/0,0 neg]' score=-2.9208106034161427
%  At # nodes expanded = 8, |OPEN| = 14.  Pruned 58 variant children.  Sending 24 items to OPEN for evaluation and possible insertion.
% Have created 24 valid-on-seeds descendants and have picked up 29 bad extensions.
%     Score = -2,924908 (regressionFit = 2,924904, penalties=4.16E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(C, B), teamalsoknownas(A, _), athleteledsportsteam(_, C).  [covers 82,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,904260 (regressionFit = 2,904255, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(_, B), teamalsoknownas(A, _), athleteplaysforteam(_, A).  [covers 26,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,923300 (regressionFit = 2,923295, penalties=4.16E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(C, B), teamalsoknownas(A, _), athleteplaysforteam(_, C).  [covers 88,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,924081 (regressionFit = 2,924077, penalties=4.05E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(_, B), teamalsoknownas(A, _), teamalsoknownas(A, B).  [covers 86,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,920811 (regressionFit = 2,920807, penalties=3.95E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(C, B), teamalsoknownas(A, _), teamalsoknownas(B, C).  [covers 92,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,920811 (regressionFit = 2,920807, penalties=3.85E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(C, B), teamalsoknownas(A, D), teamalsoknownas(C, D).  [covers 92,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,921565 (regressionFit = 2,921561, penalties=3.85E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(C, B), teamalsoknownas(A, D), teamalsoknownas(D, C).  [covers 91,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,920812 (regressionFit = 2,920807, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(_, B), teamalsoknownas(A, _), teamalsoknownas(A, _).  [covers 92,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,920812 (regressionFit = 2,920807, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(_, B), teamalsoknownas(A, _), teamalsoknownas(B, _).  [covers 92,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,920812 (regressionFit = 2,920807, penalties=4.060000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(C, B), teamalsoknownas(A, _), teamalsoknownas(C, _).  [covers 92,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,921565 (regressionFit = 2,921561, penalties=4.060000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(_, B), teamalsoknownas(A, C), teamalsoknownas(C, _).  [covers 91,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,920812 (regressionFit = 2,920807, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(_, B), teamalsoknownas(A, _), teamalsoknownas(_, B).  [covers 92,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,920812 (regressionFit = 2,920807, penalties=4.060000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(C, B), teamalsoknownas(A, _), teamalsoknownas(_, C).  [covers 92,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,920812 (regressionFit = 2,920807, penalties=4.060000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(_, B), teamalsoknownas(A, C), teamalsoknownas(_, C).  [covers 92,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,911981 (regressionFit = 2,911977, penalties=4.05E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(C, B), teamalsoknownas(A, _), teamplaysagainstteam(A, C).  [covers 21,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,921565 (regressionFit = 2,921561, penalties=4.05E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(C, B), teamalsoknownas(A, _), teamplaysagainstteam(C, A).  [covers 29,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,922802 (regressionFit = 2,922798, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(_, B), teamalsoknownas(A, _), teamplaysagainstteam(A, _).  [covers 31,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,922802 (regressionFit = 2,922798, penalties=4.16E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(C, B), teamalsoknownas(A, _), teamplaysagainstteam(C, _).  [covers 89,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,924908 (regressionFit = 2,924904, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(_, B), teamalsoknownas(A, _), teamplaysagainstteam(_, A).  [covers 38,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,922802 (regressionFit = 2,922798, penalties=4.16E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(C, B), teamalsoknownas(A, _), teamplaysagainstteam(_, C).  [covers 89,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,911892 (regressionFit = 2,911888, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(_, B), teamalsoknownas(A, _), teamplaysinleague(A, _).  [covers 65,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,924607 (regressionFit = 2,924603, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(_, B), teamalsoknownas(A, _), teamplaysinleague(B, _).  [covers 84,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,922802 (regressionFit = 2,922798, penalties=4.16E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(C, B), teamalsoknownas(A, _), teamplaysinleague(C, _).  [covers 89,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,922802 (regressionFit = 2,922798, penalties=4.16E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(_, B), teamalsoknownas(A, C), teamplaysinleague(C, _).  [covers 89,0/120,0 pos, 0,0/0,0 neg]

% Consider expanding [#9 of outerLoop #8, bodyLen=3] 'teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(C, B), athleteplaysforteam(_, C).  [covers 116,0/120,0 pos, 0,0/0,0 neg]' score=-2.9224169431034435
%  At # nodes expanded = 9, |OPEN| = 13.  Pruned 44 variant children.  Sending 22 items to OPEN for evaluation and possible insertion.
% Have created 22 valid-on-seeds descendants and have picked up 18 bad extensions.
%     Score = -2,910004 (regressionFit = 2,910000, penalties=4.05E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(C, B), athleteplaysforteam(D, C), athleteledsportsteam(D, C).  [covers 100,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,911981 (regressionFit = 2,911977, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(C, B), athleteplaysforteam(_, C), athleteledsportsteam(_, A).  [covers 21,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,910004 (regressionFit = 2,910000, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(C, B), athleteplaysforteam(_, C), athleteledsportsteam(_, C).  [covers 100,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,924913 (regressionFit = 2,924908, penalties=4.16E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(C, B), athleteplaysforteam(_, C), athleteplaysforteam(_, A).  [covers 42,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,922418 (regressionFit = 2,922414, penalties=4.16E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(C, B), athleteplaysforteam(_, C), athleteplaysforteam(_, C).  [covers 116,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,924908 (regressionFit = 2,924904, penalties=4.05E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(C, B), athleteplaysforteam(_, C), teamalsoknownas(A, B).  [covers 82,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,918923 (regressionFit = 2,918919, penalties=4.05E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(C, B), athleteplaysforteam(_, C), teamalsoknownas(B, C).  [covers 111,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,923300 (regressionFit = 2,923295, penalties=4.16E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(C, B), athleteplaysforteam(_, C), teamalsoknownas(A, _).  [covers 88,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,922418 (regressionFit = 2,922414, penalties=4.16E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(C, B), athleteplaysforteam(_, C), teamalsoknownas(B, _).  [covers 116,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,922418 (regressionFit = 2,922414, penalties=4.16E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(C, B), athleteplaysforteam(_, C), teamalsoknownas(C, _).  [covers 116,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,922418 (regressionFit = 2,922414, penalties=4.16E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(C, B), athleteplaysforteam(_, C), teamalsoknownas(_, A).  [covers 116,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,922418 (regressionFit = 2,922414, penalties=4.16E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(C, B), athleteplaysforteam(_, C), teamalsoknownas(_, B).  [covers 116,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,921057 (regressionFit = 2,921053, penalties=4.16E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(C, B), athleteplaysforteam(_, C), teamalsoknownas(_, C).  [covers 114,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,870729 (regressionFit = 2,870725, penalties=4.150000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(C, B), athleteplaysforteam(_, C), teamplaysagainstteam(A, C).  [covers 34,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,922802 (regressionFit = 2,922798, penalties=4.150000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(C, B), athleteplaysforteam(_, C), teamplaysagainstteam(C, A).  [covers 31,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,899534 (regressionFit = 2,899530, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(C, B), athleteplaysforteam(_, C), teamplaysagainstteam(A, _).  [covers 46,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,922418 (regressionFit = 2,922414, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(C, B), athleteplaysforteam(_, C), teamplaysagainstteam(C, _).  [covers 116,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,911892 (regressionFit = 2,911888, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(C, B), athleteplaysforteam(_, C), teamplaysagainstteam(_, A).  [covers 55,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,922418 (regressionFit = 2,922414, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(C, B), athleteplaysforteam(_, C), teamplaysagainstteam(_, C).  [covers 116,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,924607 (regressionFit = 2,924603, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(C, B), athleteplaysforteam(_, C), teamplaysinleague(A, _).  [covers 84,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,918923 (regressionFit = 2,918919, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(C, B), athleteplaysforteam(_, C), teamplaysinleague(B, _).  [covers 111,0/120,0 pos, 0,0/0,0 neg]
%     Score = -2,922418 (regressionFit = 2,922414, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(C, B), athleteplaysforteam(_, C), teamplaysinleague(C, _).  [covers 116,0/120,0 pos, 0,0/0,0 neg]

***** Warning: #6 TOO MANY NODES CONSIDERED (i.e., 'expanded') for 'LearnOneClause': nodesConsidered = 10 and maxNodesToConsider = 10. *****


% The best node found: teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(C, B), teamplaysagainstteam(A, _), athleteledsportsteam(_, C).  [covers 33,0/120,0 pos, 0,0/0,0 neg]

% The best node found: teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(C, B), teamplaysagainstteam(A, _), athleteledsportsteam(_, C).  [covers 33,0/120,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,024.
% Will extend: teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(C, B), teamplaysagainstteam(A, _), athleteledsportsteam(_, C).  [covers 33,0/120,0 pos, 0,0/0,0 neg]
% Path: 0;false,true
Comparing variance: 0.05693296602387513 to score=0.0025 #egs=33.0
Comparing variance: 0.01136213502444184 to score=0.0025 #egs=87.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 33,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,056933)
%         ILP node to extend: teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(C, B), teamplaysagainstteam(A, _), athleteledsportsteam(_, C).  [covers 33,0/120,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -0,056933) into position #1 in the search queue (new size=2).
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 87,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,011362)
%         ILP node to extend: teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(_, B).  [covers 120,0/120,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -0,011362) into position #2 in the search queue (new size=3).

% Time for loop #8: 2,041 seconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #8, the best clause found is:
%      teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(C, B), teamplaysagainstteam(A, _), athleteledsportsteam(_, C).  [covers 33,0/120,0 pos, 0,0/0,0 neg]
% This clause covers 33 positive examples, of which 33 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% ******************************************

% Have stopped ILP's outer loop because have reached the maximum number of learned clauses (8).

% ******************************************
Created a leaf under (teamplayssport(D, E) :- teamplaysagainstteam(D, Anon27801), athleteledsportsteam(Anon28565, Anon26883))
Created a leaf under (teamplayssport(D, E) :- teamplaysagainstteam(D, Anon27801), athleteledsportsteam(Anon28565, Anon26883))
Created a leaf under (teamplayssport(D, E) :- teamalsoknownas(Anon26623, D), teamalsoknownas(Anon26883, Anon26623))

%%%%%  WILL-Produced Tree #1 @ 13:21:30 10/22/21.  [Using 33.056.376 memory cells.]  %%%%%


% FOR teamplayssport(A, B):
%   if ( athleteplayssport(C, B), athleteplaysinleague(C, D) )
%   then if ( athleteledsportsteam(C, E) )
%   | then if ( teamplaysagainstteam(F, A), athleteplaysforteam(C, F) )
%   | | then return 0.8581489350995096;  // std dev = 1,06e-06, 169,000 (wgt'ed) examples reached here.  /* #pos=169 */
%   | | else if ( teamplaysagainstteam(G, A), teamplaysagainstteam(A, G) )
%   | | | then return 0.7605879594897553;  // std dev = 1,900, 41,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=37 */
%   | | | else return 0.8522317753361965;  // std dev = 0,997, 169,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=168 */
%   | else if ( teamplaysagainstteam(H, A), teamplaysinleague(H, D) )
%   | | then return 0.19148226843284552;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( teamplaysagainstteam(I, A) )
%   | | | then return 0.7914822684328456;  // std dev = 0,966, 15,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | | else return 0.5248156017661788;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( teamalsoknownas(J, A), teamalsoknownas(K, J) )
%   | then if ( teamplaysagainstteam(A, L), athleteledsportsteam(M, K) )
%   | | then return -0.08124500429442717;  // std dev = 0,239, 33,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=2 */
%   | | else return -0.13035681202692448;  // std dev = 0,107, 87,000 (wgt'ed) examples reached here.  /* #neg=86 #pos=1 */
%   | else return -0.1376197531938599;  // std dev = 0,065, 709,000 (wgt'ed) examples reached here.  /* #neg=706 #pos=3 */


% Clauses:

teamplayssport(A, B, 0.8581489350995096) :- 
     athleteplayssport(C, B), 
     athleteplaysinleague(C, D), 
     athleteledsportsteam(C, E), 
     teamplaysagainstteam(F, A), 
     athleteplaysforteam(C, F), 
     !. // Clause #1.

teamplayssport(A, B, 0.7605879594897553) :- 
     athleteplayssport(C, B), 
     athleteplaysinleague(C, D), 
     athleteledsportsteam(C, E), 
     teamplaysagainstteam(F, A), 
     teamplaysagainstteam(A, F), 
     !. // Clause #2.

teamplayssport(A, B, 0.8522317753361965) :- 
     athleteplayssport(C, B), 
     athleteplaysinleague(C, D), 
     athleteledsportsteam(C, E), 
     !. // Clause #3.

teamplayssport(A, B, 0.19148226843284552) :- 
     athleteplayssport(C, B), 
     athleteplaysinleague(C, D), 
     teamplaysagainstteam(E, A), 
     teamplaysinleague(E, D), 
     !. // Clause #4.

teamplayssport(A, B, 0.7914822684328456) :- 
     athleteplayssport(C, B), 
     athleteplaysinleague(C, D), 
     teamplaysagainstteam(E, A), 
     !. // Clause #5.

teamplayssport(A, B, 0.5248156017661788) :- 
     athleteplayssport(C, B), 
     athleteplaysinleague(C, D), 
     !. // Clause #6.

teamplayssport(A, B, -0.08124500429442717) :- 
     teamalsoknownas(C, A), 
     teamalsoknownas(D, C), 
     teamplaysagainstteam(A, E), 
     athleteledsportsteam(F, D), 
     !. // Clause #7.

teamplayssport(A, B, -0.13035681202692448) :- 
     teamalsoknownas(C, A), 
     teamalsoknownas(D, C), 
     !. // Clause #8.

teamplayssport(A, B, -0.1376197531938599) :- !. // Clause #9.


% The flattened versions of these clauses:

flattened_teamplayssport(a, b, 0.8581489350995096) :-  /* #pos=169 */ 
   athleteplayssport(uniqueVar1, b),
   athleteplaysinleague(uniqueVar1, underscore),
   athleteledsportsteam(uniqueVar1, underscore),
   teamplaysagainstteam(uniqueVar2, a),
   athleteplaysforteam(uniqueVar1, uniqueVar2),
   !. // Flattened version of clause #1.

flattened_teamplayssport(a, b, 0.7605879594897553) :-  /* #neg=4 #pos=37 */ 
   athleteplayssport(uniqueVar3, b),
   athleteplaysinleague(uniqueVar3, underscore),
   athleteledsportsteam(uniqueVar3, underscore),
   teamplaysagainstteam(uniqueVar4, a),
   teamplaysagainstteam(a, uniqueVar4),
   !. // Flattened version of clause #2.

flattened_teamplayssport(underscore, a, 0.8522317753361965) :-  /* #neg=1 #pos=168 */ 
   athleteplayssport(uniqueVar5, a),
   athleteplaysinleague(uniqueVar5, underscore),
   athleteledsportsteam(uniqueVar5, underscore),
   !. // Flattened version of clause #3.

flattened_teamplayssport(a, b, 0.19148226843284552) :-  /* #neg=2 #pos=1 */ 
   athleteplayssport(uniqueVar6, b),
   athleteplaysinleague(uniqueVar6, uniqueVar7),
   teamplaysagainstteam(uniqueVar8, a),
   teamplaysinleague(uniqueVar8, uniqueVar7),
   !. // Flattened version of clause #4.

flattened_teamplayssport(a, b, 0.7914822684328456) :-  /* #neg=1 #pos=14 */ 
   athleteplayssport(uniqueVar9, b),
   athleteplaysinleague(uniqueVar9, underscore),
   teamplaysagainstteam(underscore, a),
   !. // Flattened version of clause #5.

flattened_teamplayssport(underscore, a, 0.5248156017661788) :-  /* #neg=1 #pos=2 */ 
   athleteplayssport(uniqueVar10, a),
   athleteplaysinleague(uniqueVar10, underscore),
   !. // Flattened version of clause #6.

flattened_teamplayssport(a, underscore, -0.08124500429442717) :-  /* #neg=31 #pos=2 */ 
   teamalsoknownas(uniqueVar11, a),
   teamalsoknownas(uniqueVar12, uniqueVar11),
   teamplaysagainstteam(a, underscore),
   athleteledsportsteam(underscore, uniqueVar12),
   !. // Flattened version of clause #7.

flattened_teamplayssport(a, underscore, -0.13035681202692448) :-  /* #neg=86 #pos=1 */ 
   teamalsoknownas(uniqueVar13, a),
   teamalsoknownas(underscore, uniqueVar13),
   !. // Flattened version of clause #8.

flattened_teamplayssport(underscore, underscore, -0.1376197531938599) :-  /* #neg=706 #pos=3 */ 
   !. // Flattened version of clause #9.


% The unique flattened literals:
%   athleteplayssport(uniqueVar1, b)
%   teamalsoknownas(underscore, uniqueVar13)
%   athleteplaysforteam(uniqueVar1, uniqueVar2)
%   athleteplayssport(uniqueVar9, b)
%   teamplaysagainstteam(uniqueVar4, a)
%   athleteledsportsteam(underscore, uniqueVar12)
%   athleteledsportsteam(uniqueVar1, underscore)
%   athleteplaysinleague(uniqueVar9, underscore)
%   athleteplayssport(uniqueVar5, a)
%   teamplaysinleague(uniqueVar8, uniqueVar7)
%   teamalsoknownas(uniqueVar12, uniqueVar11)
%   athleteplaysinleague(uniqueVar10, underscore)
%   teamalsoknownas(uniqueVar13, a)
%   teamplaysagainstteam(underscore, a)
%   teamplaysagainstteam(uniqueVar8, a)
%   teamalsoknownas(uniqueVar11, a)
%   athleteplaysinleague(uniqueVar1, underscore)
%   teamplaysagainstteam(a, underscore)
%   athleteplayssport(uniqueVar6, b)
%   teamplaysagainstteam(uniqueVar2, a)
%   athleteledsportsteam(uniqueVar5, underscore)
%   athleteplaysinleague(uniqueVar6, uniqueVar7)
%   athleteplayssport(uniqueVar3, b)
%   athleteplayssport(uniqueVar10, a)
%   athleteplaysinleague(uniqueVar5, underscore)
%   athleteplaysinleague(uniqueVar3, underscore)
%   teamplaysagainstteam(a, uniqueVar4)
%   athleteledsportsteam(uniqueVar3, underscore)

% Saving model in: train/models/bRDNs/teamplayssport.model.ckpt
% Time taken to learn 1 trees is 32,856 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.024374999999999966
Set score:0.0025
% Only 1229 out of 1229 converged.
% Kept 397 of the 397 positive examples.
% Kept 741 of the 159.991 negative examples.
% Dataset size: 1.138
Computing probabilities
prob time:287 milliseconds
No hidden examples for : teamplayssport
Time to build dataset: 449 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.16543972512888433
Set score:0.0025
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Have these 10 positive seeds: 72 79 251 353 400 524 632 655 716 1001
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = teamplayssport(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  teamplayssport(_, _).  [covers 1.138,0/1.138,0 pos, 0,0/0,0 neg]
% Most-general root: teamplayssport(_, _).  [covers 1.138,0/1.138,0 pos, 0,0/0,0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #1, bodyLen=0] 'teamplayssport(_, _).  [covers 1.138,0/1.138,0 pos, 0,0/0,0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 4 variant children.  Sending 8 items to OPEN for evaluation and possible insertion.
% Have created 8 valid-on-seeds descendants and have picked up 2 bad extensions.
%     Score = -188,269764 (regressionFit = 188,269762, penalties=1.23E-6) for clause:  teamplayssport(A, _) :- athleteledsportsteam(_, A).  [covers 310,0/1.138,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -188,269764): teamplayssport(A, _) :- athleteledsportsteam(_, A).  [covers 310,0/1.138,0 pos, 0,0/0,0 neg]
%     Score = -188,233067 (regressionFit = 188,233066, penalties=1.23E-6) for clause:  teamplayssport(A, _) :- athleteplaysforteam(_, A).  [covers 524,0/1.138,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -188,233067): teamplayssport(A, _) :- athleteplaysforteam(_, A).  [covers 524,0/1.138,0 pos, 0,0/0,0 neg]
%     Score = -13,264457 (regressionFit = 13,264455, penalties=1.23E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(_, A).  [covers 406,0/1.138,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -13,264457): teamplayssport(_, A) :- athleteplayssport(_, A).  [covers 406,0/1.138,0 pos, 0,0/0,0 neg]
%     Score = -188,228275 (regressionFit = 188,228273, penalties=1.23E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(A, _).  [covers 255,0/1.138,0 pos, 0,0/0,0 neg]
%     Score = -187,879914 (regressionFit = 187,879913, penalties=1.23E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(_, A).  [covers 184,0/1.138,0 pos, 0,0/0,0 neg]
%     Score = -187,726352 (regressionFit = 187,726350, penalties=1.23E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, _).  [covers 684,0/1.138,0 pos, 0,0/0,0 neg]
%     Score = -187,875953 (regressionFit = 187,875952, penalties=1.23E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(_, A).  [covers 726,0/1.138,0 pos, 0,0/0,0 neg]
%     Score = -188,253602 (regressionFit = 188,253601, penalties=1.23E-6) for clause:  teamplayssport(A, _) :- teamplaysinleague(A, _).  [covers 879,0/1.138,0 pos, 0,0/0,0 neg]

% Consider expanding [#2 of outerLoop #1, bodyLen=1] 'teamplayssport(_, A) :- athleteplayssport(_, A).  [covers 406,0/1.138,0 pos, 0,0/0,0 neg]' score=-13.264456630096026
%  At # nodes expanded = 2, |OPEN| = 7.  Pruned 8 variant children.  Sending 13 items to OPEN for evaluation and possible insertion.
% Have created 13 valid-on-seeds descendants and have picked up 2 bad extensions.
%     Score = -165,181448 (regressionFit = 165,181446, penalties=2.0300000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, A).  [covers 75,0/1.138,0 pos, 0,0/0,0 neg]
%     Score = -24,218502 (regressionFit = 24,218500, penalties=2.24E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteledsportsteam(B, _).  [covers 380,0/1.138,0 pos, 0,0/0,0 neg]
%     Score = -155,167379 (regressionFit = 155,167377, penalties=2.24E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), athleteledsportsteam(_, A).  [covers 111,0/1.138,0 pos, 0,0/0,0 neg]
%     Score = -157,659394 (regressionFit = 157,659392, penalties=2.0300000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysforteam(C, A).  [covers 93,0/1.138,0 pos, 0,0/0,0 neg]
%     Score = -23,756537 (regressionFit = 23,756535, penalties=2.24E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysforteam(B, _).  [covers 384,0/1.138,0 pos, 0,0/0,0 neg]
%     Score = -127,301158 (regressionFit = 127,301156, penalties=2.24E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), athleteplaysforteam(_, A).  [covers 183,0/1.138,0 pos, 0,0/0,0 neg]
%     Score = -12,720414 (regressionFit = 12,720411, penalties=2.24E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _).  [covers 398,0/1.138,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -12,720414): teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _).  [covers 398,0/1.138,0 pos, 0,0/0,0 neg]
%     Score = -13,264458 (regressionFit = 13,264455, penalties=2.24E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(_, A), athleteplayssport(_, A).  [covers 406,0/1.138,0 pos, 0,0/0,0 neg]
%     Score = -158,361264 (regressionFit = 158,361262, penalties=2.24E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(A, _).  [covers 92,0/1.138,0 pos, 0,0/0,0 neg]
%     Score = -165,558093 (regressionFit = 165,558091, penalties=2.24E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(_, A).  [covers 72,0/1.138,0 pos, 0,0/0,0 neg]
%     Score = -108,737248 (regressionFit = 108,737246, penalties=2.24E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(A, _).  [covers 229,0/1.138,0 pos, 0,0/0,0 neg]
%     Score = -100,598883 (regressionFit = 100,598881, penalties=2.24E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(_, A).  [covers 246,0/1.138,0 pos, 0,0/0,0 neg]
%     Score = -69,275396 (regressionFit = 69,275394, penalties=2.24E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _).  [covers 314,0/1.138,0 pos, 0,0/0,0 neg]

% Consider expanding [#3 of outerLoop #1, bodyLen=1] 'teamplayssport(A, _) :- teamplaysagainstteam(A, _).  [covers 684,0/1.138,0 pos, 0,0/0,0 neg]' score=-187.72635152748785
%  At # nodes expanded = 3, |OPEN| = 6.  Pruned 14 variant children.  Sending 16 items to OPEN for evaluation and possible insertion.
% Have created 16 valid-on-seeds descendants and have picked up 5 bad extensions.
%     Score = -188,267172 (regressionFit = 188,267170, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, _), athleteledsportsteam(_, A).  [covers 303,0/1.138,0 pos, 0,0/0,0 neg]
%     Score = -187,907411 (regressionFit = 187,907409, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, B), athleteledsportsteam(_, B).  [covers 564,0/1.138,0 pos, 0,0/0,0 neg]
%     Score = -188,212761 (regressionFit = 188,212759, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, _), athleteplaysforteam(_, A).  [covers 498,0/1.138,0 pos, 0,0/0,0 neg]
%     Score = -187,705492 (regressionFit = 187,705490, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, B), athleteplaysforteam(_, B).  [covers 662,0/1.138,0 pos, 0,0/0,0 neg]
%     Score = -108,737248 (regressionFit = 108,737246, penalties=2.24E-6) for clause:  teamplayssport(A, B) :- teamplaysagainstteam(A, _), athleteplayssport(_, B).  [covers 229,0/1.138,0 pos, 0,0/0,0 neg]
%     Score = -188,216021 (regressionFit = 188,216019, penalties=2.1300000000000004E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, B), teamalsoknownas(B, A).  [covers 60,0/1.138,0 pos, 0,0/0,0 neg]
%     Score = -188,080528 (regressionFit = 188,080525, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, B), teamalsoknownas(B, _).  [covers 498,0/1.138,0 pos, 0,0/0,0 neg]
%     Score = -188,182278 (regressionFit = 188,182276, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, _), teamalsoknownas(_, A).  [covers 92,0/1.138,0 pos, 0,0/0,0 neg]
%     Score = -188,024167 (regressionFit = 188,024165, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, B), teamalsoknownas(_, B).  [covers 509,0/1.138,0 pos, 0,0/0,0 neg]
%     Score = -187,788754 (regressionFit = 187,788752, penalties=2.0300000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, B), teamplaysagainstteam(B, A).  [covers 642,0/1.138,0 pos, 0,0/0,0 neg]
%     Score = -187,726353 (regressionFit = 187,726350, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, _), teamplaysagainstteam(A, _).  [covers 684,0/1.138,0 pos, 0,0/0,0 neg]
%     Score = -187,762102 (regressionFit = 187,762100, penalties=2.1400000000000003E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, B), teamplaysagainstteam(B, _).  [covers 677,0/1.138,0 pos, 0,0/0,0 neg]
%     Score = -187,640310 (regressionFit = 187,640307, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, _), teamplaysagainstteam(_, A).  [covers 673,0/1.138,0 pos, 0,0/0,0 neg]
%     Score = -187,726352 (regressionFit = 187,726350, penalties=2.1400000000000003E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, B), teamplaysagainstteam(_, B).  [covers 684,0/1.138,0 pos, 0,0/0,0 neg]
%     Score = -187,909278 (regressionFit = 187,909276, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, _), teamplaysinleague(A, _).  [covers 613,0/1.138,0 pos, 0,0/0,0 neg]
%     Score = -187,719279 (regressionFit = 187,719277, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, B), teamplaysinleague(B, _).  [covers 670,0/1.138,0 pos, 0,0/0,0 neg]

% Consider expanding [#4 of outerLoop #1, bodyLen=1] 'teamplayssport(A, _) :- teamplaysagainstteam(_, A).  [covers 726,0/1.138,0 pos, 0,0/0,0 neg]' score=-187.8759530968005
%  At # nodes expanded = 4, |OPEN| = 5.  Pruned 14 variant children.  Sending 16 items to OPEN for evaluation and possible insertion.
% Have created 16 valid-on-seeds descendants and have picked up 5 bad extensions.
%     Score = -188,268826 (regressionFit = 188,268823, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(_, A), athleteledsportsteam(_, A).  [covers 305,0/1.138,0 pos, 0,0/0,0 neg]
%     Score = -188,004935 (regressionFit = 188,004933, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(B, A), athleteledsportsteam(_, B).  [covers 602,0/1.138,0 pos, 0,0/0,0 neg]
%     Score = -188,242780 (regressionFit = 188,242777, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(_, A), athleteplaysforteam(_, A).  [covers 511,0/1.138,0 pos, 0,0/0,0 neg]
%     Score = -187,969210 (regressionFit = 187,969207, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(B, A), athleteplaysforteam(_, B).  [covers 696,0/1.138,0 pos, 0,0/0,0 neg]
%     Score = -100,598883 (regressionFit = 100,598881, penalties=2.24E-6) for clause:  teamplayssport(A, B) :- teamplaysagainstteam(_, A), athleteplayssport(_, B).  [covers 246,0/1.138,0 pos, 0,0/0,0 neg]
%     Score = -188,215629 (regressionFit = 188,215626, penalties=2.1300000000000004E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(B, A), teamalsoknownas(B, A).  [covers 60,0/1.138,0 pos, 0,0/0,0 neg]
%     Score = -188,189389 (regressionFit = 188,189386, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(B, A), teamalsoknownas(B, _).  [covers 515,0/1.138,0 pos, 0,0/0,0 neg]
%     Score = -188,201183 (regressionFit = 188,201180, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(_, A), teamalsoknownas(_, A).  [covers 104,0/1.138,0 pos, 0,0/0,0 neg]
%     Score = -188,213607 (regressionFit = 188,213605, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(B, A), teamalsoknownas(_, B).  [covers 503,0/1.138,0 pos, 0,0/0,0 neg]
%     Score = -187,788754 (regressionFit = 187,788752, penalties=2.0300000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(B, A), teamplaysagainstteam(A, B).  [covers 642,0/1.138,0 pos, 0,0/0,0 neg]
%     Score = -187,640310 (regressionFit = 187,640307, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(_, A), teamplaysagainstteam(A, _).  [covers 673,0/1.138,0 pos, 0,0/0,0 neg]
%     Score = -187,875954 (regressionFit = 187,875952, penalties=2.1400000000000003E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(B, A), teamplaysagainstteam(B, _).  [covers 726,0/1.138,0 pos, 0,0/0,0 neg]
%     Score = -187,875954 (regressionFit = 187,875952, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(_, A), teamplaysagainstteam(_, A).  [covers 726,0/1.138,0 pos, 0,0/0,0 neg]
%     Score = -187,875954 (regressionFit = 187,875952, penalties=2.1400000000000003E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(B, A), teamplaysagainstteam(_, B).  [covers 726,0/1.138,0 pos, 0,0/0,0 neg]
%     Score = -188,017949 (regressionFit = 188,017947, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(_, A), teamplaysinleague(A, _).  [covers 636,0/1.138,0 pos, 0,0/0,0 neg]
%     Score = -187,893606 (regressionFit = 187,893604, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(B, A), teamplaysinleague(B, _).  [covers 711,0/1.138,0 pos, 0,0/0,0 neg]

% Consider expanding [#5 of outerLoop #1, bodyLen=1] 'teamplayssport(A, _) :- teamalsoknownas(_, A).  [covers 184,0/1.138,0 pos, 0,0/0,0 neg]' score=-187.8799144049308
%  At # nodes expanded = 5, |OPEN| = 4.  Pruned 14 variant children.  Sending 17 items to OPEN for evaluation and possible insertion.
% Have created 17 valid-on-seeds descendants and have picked up 4 bad extensions.
%     Score = -188,235996 (regressionFit = 188,235994, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(_, A), athleteledsportsteam(_, A).  [covers 53,0/1.138,0 pos, 0,0/0,0 neg]
%     Score = -188,181671 (regressionFit = 188,181669, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteledsportsteam(_, B).  [covers 56,0/1.138,0 pos, 0,0/0,0 neg]
%     Score = -188,036892 (regressionFit = 188,036889, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(_, A), athleteplaysforteam(_, A).  [covers 78,0/1.138,0 pos, 0,0/0,0 neg]
%     Score = -188,181788 (regressionFit = 188,181786, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B).  [covers 73,0/1.138,0 pos, 0,0/0,0 neg]
%     Score = -165,558093 (regressionFit = 165,558091, penalties=2.24E-6) for clause:  teamplayssport(A, B) :- teamalsoknownas(_, A), athleteplayssport(_, B).  [covers 72,0/1.138,0 pos, 0,0/0,0 neg]
%     Score = -188,038101 (regressionFit = 188,038099, penalties=2.0300000000000005E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(A, B).  [covers 108,0/1.138,0 pos, 0,0/0,0 neg]
%     Score = -187,879915 (regressionFit = 187,879913, penalties=2.1400000000000003E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(B, _).  [covers 184,0/1.138,0 pos, 0,0/0,0 neg]
%     Score = -187,879915 (regressionFit = 187,879913, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(_, A), teamalsoknownas(_, A).  [covers 184,0/1.138,0 pos, 0,0/0,0 neg]
%     Score = -187,923963 (regressionFit = 187,923960, penalties=2.1400000000000003E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(_, B).  [covers 153,0/1.138,0 pos, 0,0/0,0 neg]
%     Score = -188,216021 (regressionFit = 188,216019, penalties=2.1300000000000004E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamplaysagainstteam(A, B).  [covers 60,0/1.138,0 pos, 0,0/0,0 neg]
%     Score = -188,215629 (regressionFit = 188,215626, penalties=2.1300000000000004E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamplaysagainstteam(B, A).  [covers 60,0/1.138,0 pos, 0,0/0,0 neg]
%     Score = -188,182278 (regressionFit = 188,182276, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(_, A), teamplaysagainstteam(A, _).  [covers 92,0/1.138,0 pos, 0,0/0,0 neg]
%     Score = -188,117759 (regressionFit = 188,117757, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamplaysagainstteam(B, _).  [covers 76,0/1.138,0 pos, 0,0/0,0 neg]
%     Score = -188,201183 (regressionFit = 188,201180, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(_, A), teamplaysagainstteam(_, A).  [covers 104,0/1.138,0 pos, 0,0/0,0 neg]
%     Score = -188,117759 (regressionFit = 188,117757, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamplaysagainstteam(_, B).  [covers 76,0/1.138,0 pos, 0,0/0,0 neg]
%     Score = -187,585260 (regressionFit = 187,585257, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(_, A), teamplaysinleague(A, _).  [covers 134,0/1.138,0 pos, 0,0/0,0 neg]
%     Score = -187,915605 (regressionFit = 187,915603, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamplaysinleague(B, _).  [covers 177,0/1.138,0 pos, 0,0/0,0 neg]

% Consider expanding [#6 of outerLoop #1, bodyLen=1] 'teamplayssport(A, _) :- teamalsoknownas(A, _).  [covers 255,0/1.138,0 pos, 0,0/0,0 neg]' score=-188.22827456008093
%  At # nodes expanded = 6, |OPEN| = 3.  Pruned 14 variant children.  Sending 6 items to OPEN for evaluation and possible insertion.
% Have created 6 valid-on-seeds descendants and have picked up 10 bad extensions.
%     Score = -158,361264 (regressionFit = 158,361262, penalties=2.24E-6) for clause:  teamplayssport(A, B) :- teamalsoknownas(A, _), athleteplayssport(_, B).  [covers 92,0/1.138,0 pos, 0,0/0,0 neg]
%     Score = -188,038101 (regressionFit = 188,038099, penalties=2.0300000000000005E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(A, B), teamalsoknownas(B, A).  [covers 108,0/1.138,0 pos, 0,0/0,0 neg]
%     Score = -188,179520 (regressionFit = 188,179518, penalties=2.1400000000000003E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(A, B), teamalsoknownas(B, _).  [covers 214,0/1.138,0 pos, 0,0/0,0 neg]
%     Score = -188,228275 (regressionFit = 188,228273, penalties=2.1400000000000003E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(A, B), teamalsoknownas(_, B).  [covers 255,0/1.138,0 pos, 0,0/0,0 neg]
%     Score = -188,157814 (regressionFit = 188,157811, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(A, _), teamplaysinleague(A, _).  [covers 193,0/1.138,0 pos, 0,0/0,0 neg]
%     Score = -188,169013 (regressionFit = 188,169011, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(A, B), teamplaysinleague(B, _).  [covers 230,0/1.138,0 pos, 0,0/0,0 neg]

% Consider expanding [#7 of outerLoop #1, bodyLen=1] 'teamplayssport(A, _) :- athleteplaysforteam(_, A).  [covers 524,0/1.138,0 pos, 0,0/0,0 neg]' score=-188.2330667982199
%  At # nodes expanded = 7, |OPEN| = 2.  Pruned 8 variant children.  Sending 12 items to OPEN for evaluation and possible insertion.
% Have created 12 valid-on-seeds descendants and have picked up 2 bad extensions.
%     Score = -188,268336 (regressionFit = 188,268334, penalties=2.1300000000000004E-6) for clause:  teamplayssport(A, _) :- athleteplaysforteam(B, A), athleteledsportsteam(B, A).  [covers 248,0/1.138,0 pos, 0,0/0,0 neg]
%     Score = -188,269596 (regressionFit = 188,269594, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- athleteplaysforteam(B, A), athleteledsportsteam(B, _).  [covers 296,0/1.138,0 pos, 0,0/0,0 neg]
%     Score = -188,268246 (regressionFit = 188,268243, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- athleteplaysforteam(_, A), athleteledsportsteam(_, A).  [covers 275,0/1.138,0 pos, 0,0/0,0 neg]
%     Score = -188,233068 (regressionFit = 188,233066, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- athleteplaysforteam(_, A), athleteplaysforteam(_, A).  [covers 524,0/1.138,0 pos, 0,0/0,0 neg]
%     Score = -188,175720 (regressionFit = 188,175717, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- athleteplaysforteam(B, A), athleteplaysinleague(B, _).  [covers 368,0/1.138,0 pos, 0,0/0,0 neg]
%     Score = -157,659394 (regressionFit = 157,659392, penalties=2.0300000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplaysforteam(C, A), athleteplayssport(C, B).  [covers 93,0/1.138,0 pos, 0,0/0,0 neg]
%     Score = -188,187212 (regressionFit = 188,187210, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- athleteplaysforteam(B, A), athleteplayssport(B, _).  [covers 355,0/1.138,0 pos, 0,0/0,0 neg]
%     Score = -127,301158 (regressionFit = 127,301156, penalties=2.24E-6) for clause:  teamplayssport(A, B) :- athleteplaysforteam(_, A), athleteplayssport(_, B).  [covers 183,0/1.138,0 pos, 0,0/0,0 neg]
%     Score = -188,036892 (regressionFit = 188,036889, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- athleteplaysforteam(_, A), teamalsoknownas(_, A).  [covers 78,0/1.138,0 pos, 0,0/0,0 neg]
%     Score = -188,212761 (regressionFit = 188,212759, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- athleteplaysforteam(_, A), teamplaysagainstteam(A, _).  [covers 498,0/1.138,0 pos, 0,0/0,0 neg]
%     Score = -188,242780 (regressionFit = 188,242777, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- athleteplaysforteam(_, A), teamplaysagainstteam(_, A).  [covers 511,0/1.138,0 pos, 0,0/0,0 neg]
%     Score = -188,180846 (regressionFit = 188,180844, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- athleteplaysforteam(_, A), teamplaysinleague(A, _).  [covers 504,0/1.138,0 pos, 0,0/0,0 neg]

% Consider expanding [#8 of outerLoop #1, bodyLen=1] 'teamplayssport(A, _) :- teamplaysinleague(A, _).  [covers 879,0/1.138,0 pos, 0,0/0,0 neg]' score=-188.25360181279927
%  At # nodes expanded = 8, |OPEN| = 1.  Pruned 4 variant children.  Sending 9 items to OPEN for evaluation and possible insertion.
% Have created 9 valid-on-seeds descendants and have picked up 2 bad extensions.
%     Score = -188,269855 (regressionFit = 188,269853, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysinleague(A, _), athleteledsportsteam(_, A).  [covers 307,0/1.138,0 pos, 0,0/0,0 neg]
%     Score = -188,180846 (regressionFit = 188,180844, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysinleague(A, _), athleteplaysforteam(_, A).  [covers 504,0/1.138,0 pos, 0,0/0,0 neg]
%     Score = -187,944315 (regressionFit = 187,944313, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysinleague(A, B), athleteplaysinleague(_, B).  [covers 684,0/1.138,0 pos, 0,0/0,0 neg]
%     Score = -69,275396 (regressionFit = 69,275394, penalties=2.24E-6) for clause:  teamplayssport(A, B) :- teamplaysinleague(A, _), athleteplayssport(_, B).  [covers 314,0/1.138,0 pos, 0,0/0,0 neg]
%     Score = -188,157814 (regressionFit = 188,157811, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysinleague(A, _), teamalsoknownas(A, _).  [covers 193,0/1.138,0 pos, 0,0/0,0 neg]
%     Score = -187,585260 (regressionFit = 187,585257, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysinleague(A, _), teamalsoknownas(_, A).  [covers 134,0/1.138,0 pos, 0,0/0,0 neg]
%     Score = -187,909278 (regressionFit = 187,909276, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysinleague(A, _), teamplaysagainstteam(A, _).  [covers 613,0/1.138,0 pos, 0,0/0,0 neg]
%     Score = -188,017949 (regressionFit = 188,017947, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysinleague(A, _), teamplaysagainstteam(_, A).  [covers 636,0/1.138,0 pos, 0,0/0,0 neg]
%     Score = -188,253603 (regressionFit = 188,253601, penalties=2.1400000000000003E-6) for clause:  teamplayssport(A, _) :- teamplaysinleague(A, B), teamplaysinleague(_, B).  [covers 879,0/1.138,0 pos, 0,0/0,0 neg]

% Consider expanding [#9 of outerLoop #1, bodyLen=1] 'teamplayssport(A, _) :- athleteledsportsteam(_, A).  [covers 310,0/1.138,0 pos, 0,0/0,0 neg]' score=-188.26976350553804
%  At # nodes expanded = 9, |OPEN| = 0.  Pruned 8 variant children.  Sending 12 items to OPEN for evaluation and possible insertion.
% Have created 12 valid-on-seeds descendants and have picked up 2 bad extensions.
%     Score = -188,269765 (regressionFit = 188,269762, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- athleteledsportsteam(_, A), athleteledsportsteam(_, A).  [covers 310,0/1.138,0 pos, 0,0/0,0 neg]
%     Score = -188,268336 (regressionFit = 188,268334, penalties=2.1300000000000004E-6) for clause:  teamplayssport(A, _) :- athleteledsportsteam(B, A), athleteplaysforteam(B, A).  [covers 248,0/1.138,0 pos, 0,0/0,0 neg]
%     Score = -188,264938 (regressionFit = 188,264936, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- athleteledsportsteam(B, A), athleteplaysforteam(B, _).  [covers 301,0/1.138,0 pos, 0,0/0,0 neg]
%     Score = -188,268246 (regressionFit = 188,268243, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- athleteledsportsteam(_, A), athleteplaysforteam(_, A).  [covers 275,0/1.138,0 pos, 0,0/0,0 neg]
%     Score = -188,240260 (regressionFit = 188,240258, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- athleteledsportsteam(B, A), athleteplaysinleague(B, _).  [covers 274,0/1.138,0 pos, 0,0/0,0 neg]
%     Score = -165,181448 (regressionFit = 165,181446, penalties=2.0300000000000005E-6) for clause:  teamplayssport(A, B) :- athleteledsportsteam(C, A), athleteplayssport(C, B).  [covers 75,0/1.138,0 pos, 0,0/0,0 neg]
%     Score = -188,223802 (regressionFit = 188,223800, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- athleteledsportsteam(B, A), athleteplayssport(B, _).  [covers 267,0/1.138,0 pos, 0,0/0,0 neg]
%     Score = -155,167379 (regressionFit = 155,167377, penalties=2.24E-6) for clause:  teamplayssport(A, B) :- athleteledsportsteam(_, A), athleteplayssport(_, B).  [covers 111,0/1.138,0 pos, 0,0/0,0 neg]
%     Score = -188,235996 (regressionFit = 188,235994, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- athleteledsportsteam(_, A), teamalsoknownas(_, A).  [covers 53,0/1.138,0 pos, 0,0/0,0 neg]
%     Score = -188,267172 (regressionFit = 188,267170, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- athleteledsportsteam(_, A), teamplaysagainstteam(A, _).  [covers 303,0/1.138,0 pos, 0,0/0,0 neg]
%     Score = -188,268826 (regressionFit = 188,268823, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- athleteledsportsteam(_, A), teamplaysagainstteam(_, A).  [covers 305,0/1.138,0 pos, 0,0/0,0 neg]
%     Score = -188,269855 (regressionFit = 188,269853, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- athleteledsportsteam(_, A), teamplaysinleague(A, _).  [covers 307,0/1.138,0 pos, 0,0/0,0 neg]

% The best node found: teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _).  [covers 398,0/1.138,0 pos, 0,0/0,0 neg]

% The best node found: teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _).  [covers 398,0/1.138,0 pos, 0,0/0,0 neg]

% Expanding node at Level 0 with score = 1,797693e+308.
% Will extend: teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _).  [covers 398,0/1.138,0 pos, 0,0/0,0 neg]
% Path: 1;
Comparing variance: 0.017062315602133758 to score=0.0025 #egs=398.0
Comparing variance: 0.008012986191324161 to score=0.0025 #egs=740.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 398,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,017062)
%         ILP node to extend: teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _).  [covers 398,0/1.138,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 1 and with score = -0,017062) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 740,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,008013)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 1 and with score = -0,008013) into the LAST position (#2) in the search queue.

% Time for loop #1: 1,262 seconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _).  [covers 398,0/1.138,0 pos, 0,0/0,0 neg]
% This clause covers 398 positive examples, of which 398 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _).  [covers 398,0/398,0 pos, 0,0/0,0 neg]'
%     Score = -12,720414 (regressionFit = 12,720411, penalties=2.24E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _).  [covers 398,0/398,0 pos, 0,0/0,0 neg]

% Have these 8 positive seeds: 18 58 146 171 273 295 345 379
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Consider expanding [#1 of outerLoop #2, bodyLen=2] 'teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _).  [covers 398,0/398,0 pos, 0,0/0,0 neg]' score=-12.720413631229116
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 10 variant children.  Sending 15 items to OPEN for evaluation and possible insertion.
% Have created 15 valid-on-seeds descendants and have picked up 2 bad extensions.
%     Score = -6,790795 (regressionFit = 6,790792, penalties=3.1400000000000004E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, A).  [covers 73,0/398,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -6,790795): teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, A).  [covers 73,0/398,0 pos, 0,0/0,0 neg]
%     Score = -6,786811 (regressionFit = 6,786808, penalties=3.35E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteledsportsteam(B, _).  [covers 380,0/398,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -6,786811): teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteledsportsteam(B, _).  [covers 380,0/398,0 pos, 0,0/0,0 neg]
%     Score = -6,785720 (regressionFit = 6,785717, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(_, A).  [covers 108,0/398,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -6,785720): teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(_, A).  [covers 108,0/398,0 pos, 0,0/0,0 neg]
%     Score = -6,767266 (regressionFit = 6,767263, penalties=3.1400000000000004E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteplaysforteam(C, A).  [covers 90,0/398,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -6,767266): teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteplaysforteam(C, A).  [covers 90,0/398,0 pos, 0,0/0,0 neg]
%     Score = -6,786811 (regressionFit = 6,786808, penalties=3.35E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteplaysforteam(B, _).  [covers 380,0/398,0 pos, 0,0/0,0 neg]
%     Score = -6,746774 (regressionFit = 6,746770, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteplaysforteam(_, A).  [covers 179,0/398,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -6,746774): teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteplaysforteam(_, A).  [covers 179,0/398,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000008E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, C), athleteplaysinleague(_, C).  [covers 398,0/398,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteplayssport(_, A).  [covers 398,0/398,0 pos, 0,0/0,0 neg]
%     Score = -6,780458 (regressionFit = 6,780455, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(A, _).  [covers 91,0/398,0 pos, 0,0/0,0 neg]
%     Score = -6,787912 (regressionFit = 6,787909, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(_, A).  [covers 71,0/398,0 pos, 0,0/0,0 neg]
%     Score = -6,744465 (regressionFit = 6,744462, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(A, _).  [covers 224,0/398,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -6,744465): teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(A, _).  [covers 224,0/398,0 pos, 0,0/0,0 neg]
%     Score = -6,728700 (regressionFit = 6,728696, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(_, A).  [covers 241,0/398,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -6,728700): teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(_, A).  [covers 241,0/398,0 pos, 0,0/0,0 neg]
%     Score = -6,760518 (regressionFit = 6,760515, penalties=3.0400000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), teamplaysinleague(A, D).  [covers 179,0/398,0 pos, 0,0/0,0 neg]
%     Score = -6,789441 (regressionFit = 6,789438, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysinleague(A, _).  [covers 308,0/398,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, C), teamplaysinleague(_, C).  [covers 398,0/398,0 pos, 0,0/0,0 neg]

% Consider expanding [#2 of outerLoop #2, bodyLen=3] 'teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(_, A).  [covers 241,0/398,0 pos, 0,0/0,0 neg]' score=-6.728699644667906
%  At # nodes expanded = 2, |OPEN| = 14.  Pruned 26 variant children.  Sending 27 items to OPEN for evaluation and possible insertion.
% Have created 27 valid-on-seeds descendants and have picked up 5 bad extensions.
%     Score = -6,790805 (regressionFit = 6,790800, penalties=4.250000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(_, A), athleteledsportsteam(C, A).  [covers 72,0/398,0 pos, 0,0/0,0 neg]
%     Score = -6,773124 (regressionFit = 6,773119, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(D, A), athleteledsportsteam(C, D).  [covers 163,0/398,0 pos, 0,0/0,0 neg]
%     Score = -6,753048 (regressionFit = 6,753044, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(_, A), athleteledsportsteam(C, _).  [covers 226,0/398,0 pos, 0,0/0,0 neg]
%     Score = -6,786143 (regressionFit = 6,786139, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(_, A), athleteledsportsteam(_, A).  [covers 106,0/398,0 pos, 0,0/0,0 neg]
%     Score = -6,769941 (regressionFit = 6,769937, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(D, A), athleteledsportsteam(_, D).  [covers 201,0/398,0 pos, 0,0/0,0 neg]
%     Score = -6,767267 (regressionFit = 6,767263, penalties=4.250000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(_, A), athleteplaysforteam(C, A).  [covers 90,0/398,0 pos, 0,0/0,0 neg]
%     Score = -6,764388 (regressionFit = 6,764384, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(D, A), athleteplaysforteam(C, D).  [covers 178,0/398,0 pos, 0,0/0,0 neg]
%     Score = -6,753048 (regressionFit = 6,753044, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(_, A), athleteplaysforteam(C, _).  [covers 226,0/398,0 pos, 0,0/0,0 neg]
%     Score = -6,749122 (regressionFit = 6,749117, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(_, A), athleteplaysforteam(_, A).  [covers 175,0/398,0 pos, 0,0/0,0 neg]
%     Score = -6,740944 (regressionFit = 6,740940, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(D, A), athleteplaysforteam(_, D).  [covers 232,0/398,0 pos, 0,0/0,0 neg]
%     Score = -6,728701 (regressionFit = 6,728696, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), teamplaysagainstteam(_, A), athleteplaysinleague(_, D).  [covers 241,0/398,0 pos, 0,0/0,0 neg]
%     Score = -6,728701 (regressionFit = 6,728696, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(_, A), athleteplayssport(_, B).  [covers 241,0/398,0 pos, 0,0/0,0 neg]
%     Score = -6,780933 (regressionFit = 6,780929, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(D, A), teamalsoknownas(D, A).  [covers 23,0/398,0 pos, 0,0/0,0 neg]
%     Score = -6,762783 (regressionFit = 6,762778, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(_, A), teamalsoknownas(A, _).  [covers 50,0/398,0 pos, 0,0/0,0 neg]
%     Score = -6,778130 (regressionFit = 6,778125, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(D, A), teamalsoknownas(D, _).  [covers 174,0/398,0 pos, 0,0/0,0 neg]
%     Score = -6,773054 (regressionFit = 6,773049, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(_, A), teamalsoknownas(_, A).  [covers 37,0/398,0 pos, 0,0/0,0 neg]
%     Score = -6,752396 (regressionFit = 6,752392, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(D, A), teamalsoknownas(_, D).  [covers 172,0/398,0 pos, 0,0/0,0 neg]
%     Score = -6,754117 (regressionFit = 6,754113, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(D, A), teamplaysagainstteam(A, D).  [covers 210,0/398,0 pos, 0,0/0,0 neg]
%     Score = -6,747962 (regressionFit = 6,747958, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(_, A), teamplaysagainstteam(A, _).  [covers 219,0/398,0 pos, 0,0/0,0 neg]
%     Score = -6,728701 (regressionFit = 6,728696, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(D, A), teamplaysagainstteam(D, _).  [covers 241,0/398,0 pos, 0,0/0,0 neg]
%     Score = -6,728701 (regressionFit = 6,728696, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(_, A), teamplaysagainstteam(_, A).  [covers 241,0/398,0 pos, 0,0/0,0 neg]
%     Score = -6,728701 (regressionFit = 6,728696, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(D, A), teamplaysagainstteam(_, D).  [covers 241,0/398,0 pos, 0,0/0,0 neg]
%     Score = -6,728020 (regressionFit = 6,728016, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), teamplaysagainstteam(_, A), teamplaysinleague(A, D).  [covers 161,0/398,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -6,728020): teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), teamplaysagainstteam(_, A), teamplaysinleague(A, D).  [covers 161,0/398,0 pos, 0,0/0,0 neg]
%     Score = -6,749152 (regressionFit = 6,749148, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), teamplaysagainstteam(E, A), teamplaysinleague(E, D).  [covers 190,0/398,0 pos, 0,0/0,0 neg]
%     Score = -6,757983 (regressionFit = 6,757978, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(_, A), teamplaysinleague(A, _).  [covers 213,0/398,0 pos, 0,0/0,0 neg]
%     Score = -6,735469 (regressionFit = 6,735465, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(D, A), teamplaysinleague(D, _).  [covers 236,0/398,0 pos, 0,0/0,0 neg]
%     Score = -6,728701 (regressionFit = 6,728696, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), teamplaysagainstteam(_, A), teamplaysinleague(_, D).  [covers 241,0/398,0 pos, 0,0/0,0 neg]

% Consider expanding [#3 of outerLoop #2, bodyLen=3] 'teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(A, _).  [covers 224,0/398,0 pos, 0,0/0,0 neg]' score=-6.7444651222990695
%  At # nodes expanded = 3, |OPEN| = 13.  Pruned 26 variant children.  Sending 26 items to OPEN for evaluation and possible insertion.
% Have created 26 valid-on-seeds descendants and have picked up 5 bad extensions.
%     Score = -6,790805 (regressionFit = 6,790800, penalties=4.250000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(A, _), athleteledsportsteam(C, A).  [covers 72,0/398,0 pos, 0,0/0,0 neg]
%     Score = -6,775292 (regressionFit = 6,775287, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(A, D), athleteledsportsteam(C, D).  [covers 155,0/398,0 pos, 0,0/0,0 neg]
%     Score = -6,760583 (regressionFit = 6,760579, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(A, _), athleteledsportsteam(C, _).  [covers 213,0/398,0 pos, 0,0/0,0 neg]
%     Score = -6,786331 (regressionFit = 6,786326, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(A, _), athleteledsportsteam(_, A).  [covers 105,0/398,0 pos, 0,0/0,0 neg]
%     Score = -6,776666 (regressionFit = 6,776661, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(A, D), athleteledsportsteam(_, D).  [covers 186,0/398,0 pos, 0,0/0,0 neg]
%     Score = -6,767596 (regressionFit = 6,767592, penalties=4.250000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(A, _), athleteplaysforteam(C, A).  [covers 89,0/398,0 pos, 0,0/0,0 neg]
%     Score = -6,766214 (regressionFit = 6,766209, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(A, D), athleteplaysforteam(C, D).  [covers 172,0/398,0 pos, 0,0/0,0 neg]
%     Score = -6,760583 (regressionFit = 6,760579, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(A, _), athleteplaysforteam(C, _).  [covers 213,0/398,0 pos, 0,0/0,0 neg]
%     Score = -6,752291 (regressionFit = 6,752287, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(A, _), athleteplaysforteam(_, A).  [covers 169,0/398,0 pos, 0,0/0,0 neg]
%     Score = -6,752280 (regressionFit = 6,752275, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(A, D), athleteplaysforteam(_, D).  [covers 216,0/398,0 pos, 0,0/0,0 neg]
%     Score = -6,744466 (regressionFit = 6,744462, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), teamplaysagainstteam(A, _), athleteplaysinleague(_, D).  [covers 224,0/398,0 pos, 0,0/0,0 neg]
%     Score = -6,744466 (regressionFit = 6,744462, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(A, _), athleteplayssport(_, B).  [covers 224,0/398,0 pos, 0,0/0,0 neg]
%     Score = -6,780933 (regressionFit = 6,780929, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(A, D), teamalsoknownas(D, A).  [covers 23,0/398,0 pos, 0,0/0,0 neg]
%     Score = -6,779637 (regressionFit = 6,779633, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(A, D), teamalsoknownas(D, _).  [covers 165,0/398,0 pos, 0,0/0,0 neg]
%     Score = -6,773988 (regressionFit = 6,773983, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(A, _), teamalsoknownas(_, A).  [covers 33,0/398,0 pos, 0,0/0,0 neg]
%     Score = -6,779799 (regressionFit = 6,779795, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(A, D), teamalsoknownas(_, D).  [covers 170,0/398,0 pos, 0,0/0,0 neg]
%     Score = -6,754117 (regressionFit = 6,754113, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(A, D), teamplaysagainstteam(D, A).  [covers 210,0/398,0 pos, 0,0/0,0 neg]
%     Score = -6,744466 (regressionFit = 6,744462, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(A, _), teamplaysagainstteam(A, _).  [covers 224,0/398,0 pos, 0,0/0,0 neg]
%     Score = -6,745890 (regressionFit = 6,745886, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(A, D), teamplaysagainstteam(D, _).  [covers 222,0/398,0 pos, 0,0/0,0 neg]
%     Score = -6,747962 (regressionFit = 6,747958, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(A, _), teamplaysagainstteam(_, A).  [covers 219,0/398,0 pos, 0,0/0,0 neg]
%     Score = -6,744466 (regressionFit = 6,744462, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(A, D), teamplaysagainstteam(_, D).  [covers 224,0/398,0 pos, 0,0/0,0 neg]
%     Score = -6,730349 (regressionFit = 6,730345, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), teamplaysagainstteam(A, _), teamplaysinleague(A, D).  [covers 157,0/398,0 pos, 0,0/0,0 neg]
%     Score = -6,704818 (regressionFit = 6,704814, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), teamplaysagainstteam(A, E), teamplaysinleague(E, D).  [covers 180,0/398,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -6,704818): teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), teamplaysagainstteam(A, E), teamplaysinleague(E, D).  [covers 180,0/398,0 pos, 0,0/0,0 neg]
%     Score = -6,764406 (regressionFit = 6,764401, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(A, _), teamplaysinleague(A, _).  [covers 203,0/398,0 pos, 0,0/0,0 neg]
%     Score = -6,749903 (regressionFit = 6,749898, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(A, D), teamplaysinleague(D, _).  [covers 219,0/398,0 pos, 0,0/0,0 neg]
%     Score = -6,744466 (regressionFit = 6,744462, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), teamplaysagainstteam(A, _), teamplaysinleague(_, D).  [covers 224,0/398,0 pos, 0,0/0,0 neg]

% Consider expanding [#4 of outerLoop #2, bodyLen=3] 'teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteplaysforteam(_, A).  [covers 179,0/398,0 pos, 0,0/0,0 neg]' score=-6.7467735005813205
%  At # nodes expanded = 4, |OPEN| = 12.  Pruned 16 variant children.  Sending 20 items to OPEN for evaluation and possible insertion.
% Have created 20 valid-on-seeds descendants and have picked up 2 bad extensions.
%     Score = -6,790703 (regressionFit = 6,790699, penalties=4.250000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteplaysforteam(_, A), athleteledsportsteam(C, A).  [covers 66,0/398,0 pos, 0,0/0,0 neg]
%     Score = -6,789257 (regressionFit = 6,789253, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteplaysforteam(D, A), athleteledsportsteam(D, A).  [covers 86,0/398,0 pos, 0,0/0,0 neg]
%     Score = -6,753157 (regressionFit = 6,753152, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteplaysforteam(_, A), athleteledsportsteam(C, _).  [covers 173,0/398,0 pos, 0,0/0,0 neg]
%     Score = -6,786074 (regressionFit = 6,786070, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteplaysforteam(D, A), athleteledsportsteam(D, _).  [covers 103,0/398,0 pos, 0,0/0,0 neg]
%     Score = -6,787701 (regressionFit = 6,787697, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteplaysforteam(_, A), athleteledsportsteam(_, A).  [covers 97,0/398,0 pos, 0,0/0,0 neg]
%     Score = -6,767267 (regressionFit = 6,767263, penalties=4.150000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteplaysforteam(_, A), athleteplaysforteam(C, A).  [covers 90,0/398,0 pos, 0,0/0,0 neg]
%     Score = -6,753156 (regressionFit = 6,753152, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteplaysforteam(_, A), athleteplaysforteam(C, _).  [covers 173,0/398,0 pos, 0,0/0,0 neg]
%     Score = -6,746775 (regressionFit = 6,746770, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteplaysforteam(_, A), athleteplaysforteam(_, A).  [covers 179,0/398,0 pos, 0,0/0,0 neg]
%     Score = -6,758662 (regressionFit = 6,758658, penalties=3.95E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), athleteplaysforteam(E, A), athleteplaysinleague(E, D).  [covers 108,0/398,0 pos, 0,0/0,0 neg]
%     Score = -6,782497 (regressionFit = 6,782493, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteplaysforteam(D, A), athleteplaysinleague(D, _).  [covers 123,0/398,0 pos, 0,0/0,0 neg]
%     Score = -6,746774 (regressionFit = 6,746770, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), athleteplaysforteam(_, A), athleteplaysinleague(_, D).  [covers 179,0/398,0 pos, 0,0/0,0 neg]
%     Score = -6,766267 (regressionFit = 6,766263, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteplaysforteam(D, A), athleteplayssport(D, B).  [covers 93,0/398,0 pos, 0,0/0,0 neg]
%     Score = -6,746775 (regressionFit = 6,746770, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteplaysforteam(_, A), athleteplayssport(_, B).  [covers 179,0/398,0 pos, 0,0/0,0 neg]
%     Score = -6,777229 (regressionFit = 6,777225, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteplaysforteam(_, A), teamalsoknownas(A, _).  [covers 34,0/398,0 pos, 0,0/0,0 neg]
%     Score = -6,779851 (regressionFit = 6,779846, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteplaysforteam(_, A), teamalsoknownas(_, A).  [covers 31,0/398,0 pos, 0,0/0,0 neg]
%     Score = -6,752291 (regressionFit = 6,752287, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteplaysforteam(_, A), teamplaysagainstteam(A, _).  [covers 169,0/398,0 pos, 0,0/0,0 neg]
%     Score = -6,749122 (regressionFit = 6,749117, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteplaysforteam(_, A), teamplaysagainstteam(_, A).  [covers 175,0/398,0 pos, 0,0/0,0 neg]
%     Score = -6,744088 (regressionFit = 6,744083, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), athleteplaysforteam(_, A), teamplaysinleague(A, D).  [covers 134,0/398,0 pos, 0,0/0,0 neg]
%     Score = -6,754401 (regressionFit = 6,754397, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteplaysforteam(_, A), teamplaysinleague(A, _).  [covers 170,0/398,0 pos, 0,0/0,0 neg]
%     Score = -6,746775 (regressionFit = 6,746770, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), athleteplaysforteam(_, A), teamplaysinleague(_, D).  [covers 179,0/398,0 pos, 0,0/0,0 neg]

% Consider expanding [#5 of outerLoop #2, bodyLen=3] 'teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), teamplaysinleague(A, D).  [covers 179,0/398,0 pos, 0,0/0,0 neg]' score=-6.760518421026608
%  At # nodes expanded = 5, |OPEN| = 11.  Pruned 8 variant children.  Sending 11 items to OPEN for evaluation and possible insertion.
% Have created 11 valid-on-seeds descendants and have picked up 2 bad extensions.
%     Score = -6,774087 (regressionFit = 6,774083, penalties=4.040000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), teamplaysinleague(A, D), athleteledsportsteam(C, A).  [covers 70,0/398,0 pos, 0,0/0,0 neg]
%     Score = -6,761645 (regressionFit = 6,761641, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), teamplaysinleague(A, D), athleteledsportsteam(C, _).  [covers 178,0/398,0 pos, 0,0/0,0 neg]
%     Score = -6,766558 (regressionFit = 6,766554, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), teamplaysinleague(A, D), athleteledsportsteam(_, A).  [covers 92,0/398,0 pos, 0,0/0,0 neg]
%     Score = -6,768570 (regressionFit = 6,768566, penalties=4.040000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), teamplaysinleague(A, D), athleteplaysforteam(C, A).  [covers 86,0/398,0 pos, 0,0/0,0 neg]
%     Score = -6,761645 (regressionFit = 6,761641, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), teamplaysinleague(A, D), athleteplaysforteam(C, _).  [covers 178,0/398,0 pos, 0,0/0,0 neg]
%     Score = -6,744088 (regressionFit = 6,744083, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), teamplaysinleague(A, D), athleteplaysforteam(_, A).  [covers 134,0/398,0 pos, 0,0/0,0 neg]
%     Score = -6,760519 (regressionFit = 6,760515, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), teamplaysinleague(A, D), athleteplaysinleague(_, D).  [covers 179,0/398,0 pos, 0,0/0,0 neg]
%     Score = -6,760519 (regressionFit = 6,760515, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), teamplaysinleague(A, D), athleteplayssport(_, B).  [covers 179,0/398,0 pos, 0,0/0,0 neg]
%     Score = -6,730349 (regressionFit = 6,730345, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), teamplaysinleague(A, D), teamplaysagainstteam(A, _).  [covers 157,0/398,0 pos, 0,0/0,0 neg]
%     Score = -6,728020 (regressionFit = 6,728016, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), teamplaysinleague(A, D), teamplaysagainstteam(_, A).  [covers 161,0/398,0 pos, 0,0/0,0 neg]
%     Score = -6,760519 (regressionFit = 6,760515, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), teamplaysinleague(A, D), teamplaysinleague(_, D).  [covers 179,0/398,0 pos, 0,0/0,0 neg]

% Consider expanding [#6 of outerLoop #2, bodyLen=3] 'teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteplaysforteam(C, A).  [covers 90,0/398,0 pos, 0,0/0,0 neg]' score=-6.767265821408887
%  At # nodes expanded = 6, |OPEN| = 10.  Pruned 8 variant children.  Sending 11 items to OPEN for evaluation and possible insertion.
% Have created 11 valid-on-seeds descendants and have picked up 2 bad extensions.
%     Score = -6,779320 (regressionFit = 6,779316, penalties=4.14E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteplaysforteam(C, A), athleteledsportsteam(C, A).  [covers 51,0/398,0 pos, 0,0/0,0 neg]
%     Score = -6,775270 (regressionFit = 6,775266, penalties=4.250000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteplaysforteam(C, A), athleteledsportsteam(C, _).  [covers 66,0/398,0 pos, 0,0/0,0 neg]
%     Score = -6,775270 (regressionFit = 6,775266, penalties=4.250000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteplaysforteam(C, A), athleteledsportsteam(_, A).  [covers 66,0/398,0 pos, 0,0/0,0 neg]
%     Score = -6,767267 (regressionFit = 6,767263, penalties=4.150000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteplaysforteam(C, A), athleteplaysforteam(_, A).  [covers 90,0/398,0 pos, 0,0/0,0 neg]
%     Score = -6,767267 (regressionFit = 6,767263, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), athleteplaysforteam(C, A), athleteplaysinleague(_, D).  [covers 90,0/398,0 pos, 0,0/0,0 neg]
%     Score = -6,767267 (regressionFit = 6,767263, penalties=4.150000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteplaysforteam(C, A), athleteplayssport(_, B).  [covers 90,0/398,0 pos, 0,0/0,0 neg]
%     Score = -6,767596 (regressionFit = 6,767592, penalties=4.250000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteplaysforteam(C, A), teamplaysagainstteam(A, _).  [covers 89,0/398,0 pos, 0,0/0,0 neg]
%     Score = -6,767267 (regressionFit = 6,767263, penalties=4.250000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteplaysforteam(C, A), teamplaysagainstteam(_, A).  [covers 90,0/398,0 pos, 0,0/0,0 neg]
%     Score = -6,768570 (regressionFit = 6,768566, penalties=4.040000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), athleteplaysforteam(C, A), teamplaysinleague(A, D).  [covers 86,0/398,0 pos, 0,0/0,0 neg]
%     Score = -6,767596 (regressionFit = 6,767592, penalties=4.250000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteplaysforteam(C, A), teamplaysinleague(A, _).  [covers 89,0/398,0 pos, 0,0/0,0 neg]
%     Score = -6,767267 (regressionFit = 6,767263, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), athleteplaysforteam(C, A), teamplaysinleague(_, D).  [covers 90,0/398,0 pos, 0,0/0,0 neg]

% Consider expanding [#7 of outerLoop #2, bodyLen=3] 'teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(A, _).  [covers 91,0/398,0 pos, 0,0/0,0 neg]' score=-6.780458368749742
%  At # nodes expanded = 7, |OPEN| = 9.  Pruned 26 variant children.  Sending 12 items to OPEN for evaluation and possible insertion.
% Have created 12 valid-on-seeds descendants and have picked up 12 bad extensions.
%     Score = -6,787915 (regressionFit = 6,787911, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(A, _), athleteledsportsteam(C, _).  [covers 83,0/398,0 pos, 0,0/0,0 neg]
%     Score = -6,787915 (regressionFit = 6,787911, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(A, _), athleteplaysforteam(C, _).  [covers 83,0/398,0 pos, 0,0/0,0 neg]
%     Score = -6,777229 (regressionFit = 6,777225, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(A, _), athleteplaysforteam(_, A).  [covers 34,0/398,0 pos, 0,0/0,0 neg]
%     Score = -6,780459 (regressionFit = 6,780455, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), teamalsoknownas(A, _), athleteplaysinleague(_, D).  [covers 91,0/398,0 pos, 0,0/0,0 neg]
%     Score = -6,780459 (regressionFit = 6,780455, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(A, _), athleteplayssport(_, B).  [covers 91,0/398,0 pos, 0,0/0,0 neg]
%     Score = -6,790797 (regressionFit = 6,790793, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(A, D), teamalsoknownas(D, A).  [covers 42,0/398,0 pos, 0,0/0,0 neg]
%     Score = -6,784711 (regressionFit = 6,784707, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(A, D), teamalsoknownas(D, _).  [covers 78,0/398,0 pos, 0,0/0,0 neg]
%     Score = -6,780459 (regressionFit = 6,780455, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(A, D), teamalsoknownas(_, D).  [covers 91,0/398,0 pos, 0,0/0,0 neg]
%     Score = -6,762783 (regressionFit = 6,762778, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(A, _), teamplaysagainstteam(_, A).  [covers 50,0/398,0 pos, 0,0/0,0 neg]
%     Score = -6,755015 (regressionFit = 6,755011, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(A, _), teamplaysinleague(A, _).  [covers 71,0/398,0 pos, 0,0/0,0 neg]
%     Score = -6,783388 (regressionFit = 6,783384, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(A, D), teamplaysinleague(D, _).  [covers 84,0/398,0 pos, 0,0/0,0 neg]
%     Score = -6,780459 (regressionFit = 6,780455, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), teamalsoknownas(A, _), teamplaysinleague(_, D).  [covers 91,0/398,0 pos, 0,0/0,0 neg]

% Consider expanding [#8 of outerLoop #2, bodyLen=3] 'teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(_, A).  [covers 108,0/398,0 pos, 0,0/0,0 neg]' score=-6.785719818906629
%  At # nodes expanded = 8, |OPEN| = 8.  Pruned 16 variant children.  Sending 17 items to OPEN for evaluation and possible insertion.
% Have created 17 valid-on-seeds descendants and have picked up 2 bad extensions.
%     Score = -6,790796 (regressionFit = 6,790792, penalties=4.150000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(_, A), athleteledsportsteam(C, A).  [covers 73,0/398,0 pos, 0,0/0,0 neg]
%     Score = -6,786881 (regressionFit = 6,786877, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(_, A), athleteledsportsteam(C, _).  [covers 105,0/398,0 pos, 0,0/0,0 neg]
%     Score = -6,785721 (regressionFit = 6,785717, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(_, A), athleteledsportsteam(_, A).  [covers 108,0/398,0 pos, 0,0/0,0 neg]
%     Score = -6,775270 (regressionFit = 6,775266, penalties=4.250000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(_, A), athleteplaysforteam(C, A).  [covers 66,0/398,0 pos, 0,0/0,0 neg]
%     Score = -6,789257 (regressionFit = 6,789253, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(D, A), athleteplaysforteam(D, A).  [covers 86,0/398,0 pos, 0,0/0,0 neg]
%     Score = -6,786882 (regressionFit = 6,786877, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(_, A), athleteplaysforteam(C, _).  [covers 105,0/398,0 pos, 0,0/0,0 neg]
%     Score = -6,787701 (regressionFit = 6,787697, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(_, A), athleteplaysforteam(_, A).  [covers 97,0/398,0 pos, 0,0/0,0 neg]
%     Score = -6,790051 (regressionFit = 6,790047, penalties=3.95E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), athleteledsportsteam(E, A), athleteplaysinleague(E, D).  [covers 86,0/398,0 pos, 0,0/0,0 neg]
%     Score = -6,789336 (regressionFit = 6,789332, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(D, A), athleteplaysinleague(D, _).  [covers 93,0/398,0 pos, 0,0/0,0 neg]
%     Score = -6,785721 (regressionFit = 6,785717, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), athleteledsportsteam(_, A), athleteplaysinleague(_, D).  [covers 108,0/398,0 pos, 0,0/0,0 neg]
%     Score = -6,790761 (regressionFit = 6,790757, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(D, A), athleteplayssport(D, B).  [covers 75,0/398,0 pos, 0,0/0,0 neg]
%     Score = -6,785721 (regressionFit = 6,785717, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(_, A), athleteplayssport(_, B).  [covers 108,0/398,0 pos, 0,0/0,0 neg]
%     Score = -6,786331 (regressionFit = 6,786326, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(_, A), teamplaysagainstteam(A, _).  [covers 105,0/398,0 pos, 0,0/0,0 neg]
%     Score = -6,786143 (regressionFit = 6,786139, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(_, A), teamplaysagainstteam(_, A).  [covers 106,0/398,0 pos, 0,0/0,0 neg]
%     Score = -6,766558 (regressionFit = 6,766554, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), athleteledsportsteam(_, A), teamplaysinleague(A, D).  [covers 92,0/398,0 pos, 0,0/0,0 neg]
%     Score = -6,786123 (regressionFit = 6,786118, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(_, A), teamplaysinleague(A, _).  [covers 107,0/398,0 pos, 0,0/0,0 neg]
%     Score = -6,785721 (regressionFit = 6,785717, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), athleteledsportsteam(_, A), teamplaysinleague(_, D).  [covers 108,0/398,0 pos, 0,0/0,0 neg]

% Consider expanding [#9 of outerLoop #2, bodyLen=3] 'teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteledsportsteam(B, _).  [covers 380,0/398,0 pos, 0,0/0,0 neg]' score=-6.786811354153576
%  At # nodes expanded = 9, |OPEN| = 7.  Pruned 26 variant children.  Sending 25 items to OPEN for evaluation and possible insertion.
% Have created 25 valid-on-seeds descendants and have picked up 7 bad extensions.
%     Score = -6,786812 (regressionFit = 6,786808, penalties=4.3600000000000015E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteledsportsteam(B, _), athleteledsportsteam(B, _).  [covers 380,0/398,0 pos, 0,0/0,0 neg]
%     Score = -6,786881 (regressionFit = 6,786877, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), athleteledsportsteam(_, A).  [covers 105,0/398,0 pos, 0,0/0,0 neg]
%     Score = -6,786812 (regressionFit = 6,786808, penalties=4.260000000000001E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteledsportsteam(B, C), athleteledsportsteam(_, C).  [covers 380,0/398,0 pos, 0,0/0,0 neg]
%     Score = -6,775270 (regressionFit = 6,775266, penalties=4.250000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), athleteplaysforteam(C, A).  [covers 66,0/398,0 pos, 0,0/0,0 neg]
%     Score = -6,786812 (regressionFit = 6,786808, penalties=4.250000000000001E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteledsportsteam(B, C), athleteplaysforteam(B, C).  [covers 380,0/398,0 pos, 0,0/0,0 neg]
%     Score = -6,786812 (regressionFit = 6,786808, penalties=4.4600000000000005E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteledsportsteam(B, _), athleteplaysforteam(B, _).  [covers 380,0/398,0 pos, 0,0/0,0 neg]
%     Score = -6,753157 (regressionFit = 6,753152, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), athleteplaysforteam(_, A).  [covers 173,0/398,0 pos, 0,0/0,0 neg]
%     Score = -6,786812 (regressionFit = 6,786808, penalties=4.360000000000001E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteledsportsteam(B, C), athleteplaysforteam(_, C).  [covers 380,0/398,0 pos, 0,0/0,0 neg]
%     Score = -6,786812 (regressionFit = 6,786808, penalties=4.260000000000001E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, C), athleteledsportsteam(B, _), athleteplaysinleague(_, C).  [covers 380,0/398,0 pos, 0,0/0,0 neg]
%     Score = -6,786812 (regressionFit = 6,786808, penalties=4.3600000000000015E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteledsportsteam(B, _), athleteplayssport(_, A).  [covers 380,0/398,0 pos, 0,0/0,0 neg]
%     Score = -6,787915 (regressionFit = 6,787911, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamalsoknownas(A, _).  [covers 83,0/398,0 pos, 0,0/0,0 neg]
%     Score = -6,786812 (regressionFit = 6,786808, penalties=4.360000000000001E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteledsportsteam(B, C), teamalsoknownas(C, _).  [covers 380,0/398,0 pos, 0,0/0,0 neg]
%     Score = -6,790762 (regressionFit = 6,790758, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamalsoknownas(_, A).  [covers 65,0/398,0 pos, 0,0/0,0 neg]
%     Score = -6,786812 (regressionFit = 6,786808, penalties=4.360000000000001E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteledsportsteam(B, C), teamalsoknownas(_, C).  [covers 380,0/398,0 pos, 0,0/0,0 neg]
%     Score = -6,775292 (regressionFit = 6,775287, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), teamplaysagainstteam(A, D).  [covers 155,0/398,0 pos, 0,0/0,0 neg]
%     Score = -6,773124 (regressionFit = 6,773119, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, D), teamplaysagainstteam(D, A).  [covers 163,0/398,0 pos, 0,0/0,0 neg]
%     Score = -6,760583 (regressionFit = 6,760579, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamplaysagainstteam(A, _).  [covers 213,0/398,0 pos, 0,0/0,0 neg]
%     Score = -6,786812 (regressionFit = 6,786808, penalties=4.360000000000001E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteledsportsteam(B, C), teamplaysagainstteam(C, _).  [covers 380,0/398,0 pos, 0,0/0,0 neg]
%     Score = -6,753048 (regressionFit = 6,753044, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamplaysagainstteam(_, A).  [covers 226,0/398,0 pos, 0,0/0,0 neg]
%     Score = -6,786812 (regressionFit = 6,786808, penalties=4.360000000000001E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteledsportsteam(B, C), teamplaysagainstteam(_, C).  [covers 380,0/398,0 pos, 0,0/0,0 neg]
%     Score = -6,761645 (regressionFit = 6,761641, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), athleteledsportsteam(C, _), teamplaysinleague(A, D).  [covers 178,0/398,0 pos, 0,0/0,0 neg]
%     Score = -6,786812 (regressionFit = 6,786808, penalties=4.15E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, C), athleteledsportsteam(B, D), teamplaysinleague(D, C).  [covers 380,0/398,0 pos, 0,0/0,0 neg]
%     Score = -6,790705 (regressionFit = 6,790701, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamplaysinleague(A, _).  [covers 299,0/398,0 pos, 0,0/0,0 neg]
%     Score = -6,786812 (regressionFit = 6,786808, penalties=4.360000000000001E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteledsportsteam(B, C), teamplaysinleague(C, _).  [covers 380,0/398,0 pos, 0,0/0,0 neg]
%     Score = -6,786812 (regressionFit = 6,786808, penalties=4.360000000000001E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, C), athleteledsportsteam(B, _), teamplaysinleague(_, C).  [covers 380,0/398,0 pos, 0,0/0,0 neg]

***** Warning: #7 TOO MANY NODES CONSIDERED (i.e., 'expanded') for 'LearnOneClause': nodesConsidered = 10 and maxNodesToConsider = 10. *****


% The best node found: teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), teamplaysagainstteam(A, E), teamplaysinleague(E, D).  [covers 180,0/398,0 pos, 0,0/0,0 neg]

% The best node found: teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), teamplaysagainstteam(A, E), teamplaysinleague(E, D).  [covers 180,0/398,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,017.
% Will extend: teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), teamplaysagainstteam(A, E), teamplaysinleague(E, D).  [covers 180,0/398,0 pos, 0,0/0,0 neg]
% Path: 1;true
Comparing variance: 9.608189047417189E-5 to score=0.0025 #egs=180.0
Comparing variance: 0.030676691724712067 to score=0.0025 #egs=218.0
%   Creating a TRUE-branch leaf because good enough fit since score < 0.0025
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 218,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,030677)
%         ILP node to extend: teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _).  [covers 398,0/398,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -0,030677) into position #1 in the search queue (new size=2).

% Time for loop #2: 7,440 seconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #2, the best clause found is:
%      teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), teamplaysagainstteam(A, E), teamplaysinleague(E, D).  [covers 180,0/398,0 pos, 0,0/0,0 neg]
% This clause covers 180 positive examples, of which 180 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _).  [covers 398,0/218,0 pos, 0,0/0,0 neg]'
%     Score = -12,720414 (regressionFit = 12,720411, penalties=2.24E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _).  [covers 218,0/218,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 0 5 64 104 118 131 150 177 210 212
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Consider expanding [#1 of outerLoop #3, bodyLen=2] 'teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _).  [covers 218,0/218,0 pos, 0,0/0,0 neg]' score=-12.720413631229116
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 10 variant children.  Sending 12 items to OPEN for evaluation and possible insertion.
% Have created 12 valid-on-seeds descendants and have picked up 6 bad extensions.
%     Score = -6,685834 (regressionFit = 6,685831, penalties=3.35E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteledsportsteam(B, _).  [covers 201,0/218,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -6,685834): teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteledsportsteam(B, _).  [covers 201,0/218,0 pos, 0,0/0,0 neg]
%     Score = -6,685834 (regressionFit = 6,685831, penalties=3.35E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteplaysforteam(B, _).  [covers 201,0/218,0 pos, 0,0/0,0 neg]
%     Score = -6,683681 (regressionFit = 6,683678, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteplaysforteam(_, A).  [covers 35,0/218,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -6,683681): teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteplaysforteam(_, A).  [covers 35,0/218,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000008E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, C), athleteplaysinleague(_, C).  [covers 218,0/218,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteplayssport(_, A).  [covers 218,0/218,0 pos, 0,0/0,0 neg]
%     Score = -6,653458 (regressionFit = 6,653455, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(A, _).  [covers 67,0/218,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -6,653458): teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(A, _).  [covers 67,0/218,0 pos, 0,0/0,0 neg]
%     Score = -6,679432 (regressionFit = 6,679429, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(_, A).  [covers 46,0/218,0 pos, 0,0/0,0 neg]
%     Score = -6,686453 (regressionFit = 6,686450, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(A, _).  [covers 44,0/218,0 pos, 0,0/0,0 neg]
%     Score = -6,683646 (regressionFit = 6,683643, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(_, A).  [covers 64,0/218,0 pos, 0,0/0,0 neg]
%     Score = -6,684566 (regressionFit = 6,684563, penalties=3.0400000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), teamplaysinleague(A, D).  [covers 25,0/218,0 pos, 0,0/0,0 neg]
%     Score = -6,680689 (regressionFit = 6,680686, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysinleague(A, _).  [covers 137,0/218,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, C), teamplaysinleague(_, C).  [covers 218,0/218,0 pos, 0,0/0,0 neg]

% Consider expanding [#2 of outerLoop #3, bodyLen=3] 'teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(A, _).  [covers 67,0/218,0 pos, 0,0/0,0 neg]' score=-6.6534579280998125
%  At # nodes expanded = 2, |OPEN| = 11.  Pruned 26 variant children.  Sending 10 items to OPEN for evaluation and possible insertion.
% Have created 10 valid-on-seeds descendants and have picked up 12 bad extensions.
%     Score = -6,669911 (regressionFit = 6,669907, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(A, _), athleteledsportsteam(C, _).  [covers 60,0/218,0 pos, 0,0/0,0 neg]
%     Score = -6,669911 (regressionFit = 6,669907, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(A, _), athleteplaysforteam(C, _).  [covers 60,0/218,0 pos, 0,0/0,0 neg]
%     Score = -6,653459 (regressionFit = 6,653455, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), teamalsoknownas(A, _), athleteplaysinleague(_, D).  [covers 67,0/218,0 pos, 0,0/0,0 neg]
%     Score = -6,653459 (regressionFit = 6,653455, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(A, _), athleteplayssport(_, B).  [covers 67,0/218,0 pos, 0,0/0,0 neg]
%     Score = -6,685520 (regressionFit = 6,685516, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(A, D), teamalsoknownas(D, A).  [covers 36,0/218,0 pos, 0,0/0,0 neg]
%     Score = -6,657513 (regressionFit = 6,657508, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(A, D), teamalsoknownas(D, _).  [covers 65,0/218,0 pos, 0,0/0,0 neg]
%     Score = -6,653459 (regressionFit = 6,653455, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(A, D), teamalsoknownas(_, D).  [covers 67,0/218,0 pos, 0,0/0,0 neg]
%     Score = -6,645846 (regressionFit = 6,645842, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(A, _), teamplaysagainstteam(_, A).  [covers 27,0/218,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -6,645846): teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(A, _), teamplaysagainstteam(_, A).  [covers 27,0/218,0 pos, 0,0/0,0 neg]
%     Score = -6,660762 (regressionFit = 6,660757, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(A, D), teamplaysinleague(D, _).  [covers 63,0/218,0 pos, 0,0/0,0 neg]
%     Score = -6,653459 (regressionFit = 6,653455, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), teamalsoknownas(A, _), teamplaysinleague(_, D).  [covers 67,0/218,0 pos, 0,0/0,0 neg]

% Consider expanding [#3 of outerLoop #3, bodyLen=3] 'teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(_, A).  [covers 46,0/218,0 pos, 0,0/0,0 neg]' score=-6.6794323466892545
%  At # nodes expanded = 3, |OPEN| = 10.  Pruned 26 variant children.  Sending 9 items to OPEN for evaluation and possible insertion.
% Have created 9 valid-on-seeds descendants and have picked up 12 bad extensions.
%     Score = -6,685779 (regressionFit = 6,685775, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(_, A), athleteledsportsteam(C, _).  [covers 41,0/218,0 pos, 0,0/0,0 neg]
%     Score = -6,685779 (regressionFit = 6,685775, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(_, A), athleteplaysforteam(C, _).  [covers 41,0/218,0 pos, 0,0/0,0 neg]
%     Score = -6,679433 (regressionFit = 6,679429, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), teamalsoknownas(_, A), athleteplaysinleague(_, D).  [covers 46,0/218,0 pos, 0,0/0,0 neg]
%     Score = -6,679433 (regressionFit = 6,679429, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(_, A), athleteplayssport(_, B).  [covers 46,0/218,0 pos, 0,0/0,0 neg]
%     Score = -6,685520 (regressionFit = 6,685516, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(D, A), teamalsoknownas(A, D).  [covers 36,0/218,0 pos, 0,0/0,0 neg]
%     Score = -6,679433 (regressionFit = 6,679429, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(D, A), teamalsoknownas(D, _).  [covers 46,0/218,0 pos, 0,0/0,0 neg]
%     Score = -6,680488 (regressionFit = 6,680484, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(D, A), teamalsoknownas(_, D).  [covers 45,0/218,0 pos, 0,0/0,0 neg]
%     Score = -6,681809 (regressionFit = 6,681805, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(D, A), teamplaysinleague(D, _).  [covers 43,0/218,0 pos, 0,0/0,0 neg]
%     Score = -6,679433 (regressionFit = 6,679429, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), teamalsoknownas(_, A), teamplaysinleague(_, D).  [covers 46,0/218,0 pos, 0,0/0,0 neg]

% Consider expanding [#4 of outerLoop #3, bodyLen=3] 'teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysinleague(A, _).  [covers 137,0/218,0 pos, 0,0/0,0 neg]' score=-6.680689014585007
%  At # nodes expanded = 4, |OPEN| = 9.  Pruned 12 variant children.  Sending 10 items to OPEN for evaluation and possible insertion.
% Have created 10 valid-on-seeds descendants and have picked up 6 bad extensions.
%     Score = -6,669890 (regressionFit = 6,669885, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysinleague(A, _), athleteledsportsteam(C, _).  [covers 129,0/218,0 pos, 0,0/0,0 neg]
%     Score = -6,669890 (regressionFit = 6,669885, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysinleague(A, _), athleteplaysforteam(C, _).  [covers 129,0/218,0 pos, 0,0/0,0 neg]
%     Score = -6,686974 (regressionFit = 6,686970, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysinleague(A, _), athleteplaysforteam(_, A).  [covers 29,0/218,0 pos, 0,0/0,0 neg]
%     Score = -6,680690 (regressionFit = 6,680686, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), teamplaysinleague(A, _), athleteplaysinleague(_, D).  [covers 137,0/218,0 pos, 0,0/0,0 neg]
%     Score = -6,670893 (regressionFit = 6,670889, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysinleague(A, D), athleteplaysinleague(_, D).  [covers 64,0/218,0 pos, 0,0/0,0 neg]
%     Score = -6,680690 (regressionFit = 6,680686, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysinleague(A, _), athleteplayssport(_, B).  [covers 137,0/218,0 pos, 0,0/0,0 neg]
%     Score = -6,670590 (regressionFit = 6,670586, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysinleague(A, _), teamplaysagainstteam(A, _).  [covers 32,0/218,0 pos, 0,0/0,0 neg]
%     Score = -6,685353 (regressionFit = 6,685348, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysinleague(A, _), teamplaysagainstteam(_, A).  [covers 45,0/218,0 pos, 0,0/0,0 neg]
%     Score = -6,680690 (regressionFit = 6,680686, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), teamplaysinleague(A, _), teamplaysinleague(_, D).  [covers 137,0/218,0 pos, 0,0/0,0 neg]
%     Score = -6,680690 (regressionFit = 6,680686, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysinleague(A, D), teamplaysinleague(_, D).  [covers 137,0/218,0 pos, 0,0/0,0 neg]

% Consider expanding [#5 of outerLoop #3, bodyLen=3] 'teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(_, A).  [covers 64,0/218,0 pos, 0,0/0,0 neg]' score=-6.6836461868046415
%  At # nodes expanded = 5, |OPEN| = 8.  Pruned 26 variant children.  Sending 20 items to OPEN for evaluation and possible insertion.
% Have created 20 valid-on-seeds descendants and have picked up 10 bad extensions.
%     Score = -6,686938 (regressionFit = 6,686934, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(_, A), athleteledsportsteam(C, _).  [covers 50,0/218,0 pos, 0,0/0,0 neg]
%     Score = -6,671520 (regressionFit = 6,671515, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(D, A), athleteledsportsteam(_, D).  [covers 35,0/218,0 pos, 0,0/0,0 neg]
%     Score = -6,667466 (regressionFit = 6,667462, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(D, A), athleteplaysforteam(C, D).  [covers 15,0/218,0 pos, 0,0/0,0 neg]
%     Score = -6,686938 (regressionFit = 6,686934, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(_, A), athleteplaysforteam(C, _).  [covers 50,0/218,0 pos, 0,0/0,0 neg]
%     Score = -6,685229 (regressionFit = 6,685225, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(_, A), athleteplaysforteam(_, A).  [covers 32,0/218,0 pos, 0,0/0,0 neg]
%     Score = -6,687420 (regressionFit = 6,687416, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(D, A), athleteplaysforteam(_, D).  [covers 55,0/218,0 pos, 0,0/0,0 neg]
%     Score = -6,683647 (regressionFit = 6,683643, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), teamplaysagainstteam(_, A), athleteplaysinleague(_, D).  [covers 64,0/218,0 pos, 0,0/0,0 neg]
%     Score = -6,683647 (regressionFit = 6,683643, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(_, A), athleteplayssport(_, B).  [covers 64,0/218,0 pos, 0,0/0,0 neg]
%     Score = -6,645846 (regressionFit = 6,645842, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(_, A), teamalsoknownas(A, _).  [covers 27,0/218,0 pos, 0,0/0,0 neg]
%     Score = -6,676602 (regressionFit = 6,676597, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(D, A), teamalsoknownas(D, _).  [covers 37,0/218,0 pos, 0,0/0,0 neg]
%     Score = -6,684490 (regressionFit = 6,684486, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(D, A), teamalsoknownas(_, D).  [covers 36,0/218,0 pos, 0,0/0,0 neg]
%     Score = -6,680306 (regressionFit = 6,680302, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(D, A), teamplaysagainstteam(A, D).  [covers 35,0/218,0 pos, 0,0/0,0 neg]
%     Score = -6,685667 (regressionFit = 6,685663, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(_, A), teamplaysagainstteam(A, _).  [covers 42,0/218,0 pos, 0,0/0,0 neg]
%     Score = -6,683647 (regressionFit = 6,683643, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(D, A), teamplaysagainstteam(D, _).  [covers 64,0/218,0 pos, 0,0/0,0 neg]
%     Score = -6,683647 (regressionFit = 6,683643, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(_, A), teamplaysagainstteam(_, A).  [covers 64,0/218,0 pos, 0,0/0,0 neg]
%     Score = -6,683647 (regressionFit = 6,683643, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(D, A), teamplaysagainstteam(_, D).  [covers 64,0/218,0 pos, 0,0/0,0 neg]
%     Score = -6,658928 (regressionFit = 6,658924, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), teamplaysagainstteam(E, A), teamplaysinleague(E, D).  [covers 14,0/218,0 pos, 0,0/0,0 neg]
%     Score = -6,685353 (regressionFit = 6,685348, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(_, A), teamplaysinleague(A, _).  [covers 45,0/218,0 pos, 0,0/0,0 neg]
%     Score = -6,686320 (regressionFit = 6,686316, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(D, A), teamplaysinleague(D, _).  [covers 59,0/218,0 pos, 0,0/0,0 neg]
%     Score = -6,683647 (regressionFit = 6,683643, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), teamplaysagainstteam(_, A), teamplaysinleague(_, D).  [covers 64,0/218,0 pos, 0,0/0,0 neg]

% Consider expanding [#6 of outerLoop #3, bodyLen=3] 'teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteplaysforteam(_, A).  [covers 35,0/218,0 pos, 0,0/0,0 neg]' score=-6.683680827860468
%  At # nodes expanded = 6, |OPEN| = 7.  Pruned 16 variant children.  Sending 8 items to OPEN for evaluation and possible insertion.
% Have created 8 valid-on-seeds descendants and have picked up 8 bad extensions.
%     Score = -6,687185 (regressionFit = 6,687181, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteplaysforteam(_, A), athleteledsportsteam(C, _).  [covers 29,0/218,0 pos, 0,0/0,0 neg]
%     Score = -6,687185 (regressionFit = 6,687181, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteplaysforteam(_, A), athleteplaysforteam(C, _).  [covers 29,0/218,0 pos, 0,0/0,0 neg]
%     Score = -6,683682 (regressionFit = 6,683678, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), athleteplaysforteam(_, A), athleteplaysinleague(_, D).  [covers 35,0/218,0 pos, 0,0/0,0 neg]
%     Score = -6,683682 (regressionFit = 6,683678, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteplaysforteam(_, A), athleteplayssport(_, B).  [covers 35,0/218,0 pos, 0,0/0,0 neg]
%     Score = -6,687386 (regressionFit = 6,687382, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteplaysforteam(_, A), teamplaysagainstteam(A, _).  [covers 25,0/218,0 pos, 0,0/0,0 neg]
%     Score = -6,685229 (regressionFit = 6,685225, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteplaysforteam(_, A), teamplaysagainstteam(_, A).  [covers 32,0/218,0 pos, 0,0/0,0 neg]
%     Score = -6,686974 (regressionFit = 6,686970, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteplaysforteam(_, A), teamplaysinleague(A, _).  [covers 29,0/218,0 pos, 0,0/0,0 neg]
%     Score = -6,683682 (regressionFit = 6,683678, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), athleteplaysforteam(_, A), teamplaysinleague(_, D).  [covers 35,0/218,0 pos, 0,0/0,0 neg]

% Consider expanding [#7 of outerLoop #3, bodyLen=3] 'teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), teamplaysinleague(A, D).  [covers 25,0/218,0 pos, 0,0/0,0 neg]' score=-6.684565924209784
%  At # nodes expanded = 7, |OPEN| = 6.  Pruned 8 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 4 bad extensions.
%     Score = -6,683241 (regressionFit = 6,683237, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), teamplaysinleague(A, D), athleteledsportsteam(C, _).  [covers 24,0/218,0 pos, 0,0/0,0 neg]
%     Score = -6,683241 (regressionFit = 6,683237, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), teamplaysinleague(A, D), athleteplaysforteam(C, _).  [covers 24,0/218,0 pos, 0,0/0,0 neg]
%     Score = -6,684567 (regressionFit = 6,684563, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), teamplaysinleague(A, D), athleteplaysinleague(_, D).  [covers 25,0/218,0 pos, 0,0/0,0 neg]
%     Score = -6,684567 (regressionFit = 6,684563, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), teamplaysinleague(A, D), athleteplayssport(_, B).  [covers 25,0/218,0 pos, 0,0/0,0 neg]
%     Score = -6,684567 (regressionFit = 6,684563, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), teamplaysinleague(A, D), teamplaysinleague(_, D).  [covers 25,0/218,0 pos, 0,0/0,0 neg]

% Consider expanding [#8 of outerLoop #3, bodyLen=3] 'teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteledsportsteam(B, _).  [covers 201,0/218,0 pos, 0,0/0,0 neg]' score=-6.685833965427809
%  At # nodes expanded = 8, |OPEN| = 5.  Pruned 26 variant children.  Sending 21 items to OPEN for evaluation and possible insertion.
% Have created 21 valid-on-seeds descendants and have picked up 10 bad extensions.
%     Score = -6,685835 (regressionFit = 6,685831, penalties=4.3600000000000015E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteledsportsteam(B, _), athleteledsportsteam(B, _).  [covers 201,0/218,0 pos, 0,0/0,0 neg]
%     Score = -6,685835 (regressionFit = 6,685831, penalties=4.260000000000001E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteledsportsteam(B, C), athleteledsportsteam(_, C).  [covers 201,0/218,0 pos, 0,0/0,0 neg]
%     Score = -6,685835 (regressionFit = 6,685831, penalties=4.250000000000001E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteledsportsteam(B, C), athleteplaysforteam(B, C).  [covers 201,0/218,0 pos, 0,0/0,0 neg]
%     Score = -6,685835 (regressionFit = 6,685831, penalties=4.4600000000000005E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteledsportsteam(B, _), athleteplaysforteam(B, _).  [covers 201,0/218,0 pos, 0,0/0,0 neg]
%     Score = -6,687185 (regressionFit = 6,687181, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), athleteplaysforteam(_, A).  [covers 29,0/218,0 pos, 0,0/0,0 neg]
%     Score = -6,685835 (regressionFit = 6,685831, penalties=4.360000000000001E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteledsportsteam(B, C), athleteplaysforteam(_, C).  [covers 201,0/218,0 pos, 0,0/0,0 neg]
%     Score = -6,685835 (regressionFit = 6,685831, penalties=4.260000000000001E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, C), athleteledsportsteam(B, _), athleteplaysinleague(_, C).  [covers 201,0/218,0 pos, 0,0/0,0 neg]
%     Score = -6,685835 (regressionFit = 6,685831, penalties=4.3600000000000015E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteledsportsteam(B, _), athleteplayssport(_, A).  [covers 201,0/218,0 pos, 0,0/0,0 neg]
%     Score = -6,669911 (regressionFit = 6,669907, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamalsoknownas(A, _).  [covers 60,0/218,0 pos, 0,0/0,0 neg]
%     Score = -6,685835 (regressionFit = 6,685831, penalties=4.360000000000001E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteledsportsteam(B, C), teamalsoknownas(C, _).  [covers 201,0/218,0 pos, 0,0/0,0 neg]
%     Score = -6,685779 (regressionFit = 6,685775, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamalsoknownas(_, A).  [covers 41,0/218,0 pos, 0,0/0,0 neg]
%     Score = -6,685835 (regressionFit = 6,685831, penalties=4.360000000000001E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteledsportsteam(B, C), teamalsoknownas(_, C).  [covers 201,0/218,0 pos, 0,0/0,0 neg]
%     Score = -6,674979 (regressionFit = 6,674975, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamplaysagainstteam(A, _).  [covers 34,0/218,0 pos, 0,0/0,0 neg]
%     Score = -6,685835 (regressionFit = 6,685831, penalties=4.360000000000001E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteledsportsteam(B, C), teamplaysagainstteam(C, _).  [covers 201,0/218,0 pos, 0,0/0,0 neg]
%     Score = -6,686938 (regressionFit = 6,686934, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamplaysagainstteam(_, A).  [covers 50,0/218,0 pos, 0,0/0,0 neg]
%     Score = -6,685835 (regressionFit = 6,685831, penalties=4.360000000000001E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteledsportsteam(B, C), teamplaysagainstteam(_, C).  [covers 201,0/218,0 pos, 0,0/0,0 neg]
%     Score = -6,683241 (regressionFit = 6,683237, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), athleteledsportsteam(C, _), teamplaysinleague(A, D).  [covers 24,0/218,0 pos, 0,0/0,0 neg]
%     Score = -6,685835 (regressionFit = 6,685831, penalties=4.15E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, C), athleteledsportsteam(B, D), teamplaysinleague(D, C).  [covers 201,0/218,0 pos, 0,0/0,0 neg]
%     Score = -6,669890 (regressionFit = 6,669885, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamplaysinleague(A, _).  [covers 129,0/218,0 pos, 0,0/0,0 neg]
%     Score = -6,685835 (regressionFit = 6,685831, penalties=4.360000000000001E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteledsportsteam(B, C), teamplaysinleague(C, _).  [covers 201,0/218,0 pos, 0,0/0,0 neg]
%     Score = -6,685835 (regressionFit = 6,685831, penalties=4.360000000000001E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, C), athleteledsportsteam(B, _), teamplaysinleague(_, C).  [covers 201,0/218,0 pos, 0,0/0,0 neg]

% Consider expanding [#9 of outerLoop #3, bodyLen=3] 'teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteplaysforteam(B, _).  [covers 201,0/218,0 pos, 0,0/0,0 neg]' score=-6.685833965427809
%  At # nodes expanded = 9, |OPEN| = 4.  Pruned 26 variant children.  Sending 23 items to OPEN for evaluation and possible insertion.
% Have created 23 valid-on-seeds descendants and have picked up 8 bad extensions.
%     Score = -6,685835 (regressionFit = 6,685831, penalties=4.250000000000001E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteplaysforteam(B, C), athleteledsportsteam(B, C).  [covers 201,0/218,0 pos, 0,0/0,0 neg]
%     Score = -6,685835 (regressionFit = 6,685831, penalties=4.4600000000000005E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteplaysforteam(B, _), athleteledsportsteam(B, _).  [covers 201,0/218,0 pos, 0,0/0,0 neg]
%     Score = -6,685835 (regressionFit = 6,685831, penalties=4.360000000000001E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteplaysforteam(B, C), athleteledsportsteam(_, C).  [covers 201,0/218,0 pos, 0,0/0,0 neg]
%     Score = -6,685835 (regressionFit = 6,685831, penalties=4.3600000000000015E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteplaysforteam(B, _), athleteplaysforteam(B, _).  [covers 201,0/218,0 pos, 0,0/0,0 neg]
%     Score = -6,687185 (regressionFit = 6,687181, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteplaysforteam(C, _), athleteplaysforteam(_, A).  [covers 29,0/218,0 pos, 0,0/0,0 neg]
%     Score = -6,685835 (regressionFit = 6,685831, penalties=4.260000000000001E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteplaysforteam(B, C), athleteplaysforteam(_, C).  [covers 201,0/218,0 pos, 0,0/0,0 neg]
%     Score = -6,685835 (regressionFit = 6,685831, penalties=4.260000000000001E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, C), athleteplaysforteam(B, _), athleteplaysinleague(_, C).  [covers 201,0/218,0 pos, 0,0/0,0 neg]
%     Score = -6,685835 (regressionFit = 6,685831, penalties=4.3600000000000015E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteplaysforteam(B, _), athleteplayssport(_, A).  [covers 201,0/218,0 pos, 0,0/0,0 neg]
%     Score = -6,669911 (regressionFit = 6,669907, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteplaysforteam(C, _), teamalsoknownas(A, _).  [covers 60,0/218,0 pos, 0,0/0,0 neg]
%     Score = -6,685835 (regressionFit = 6,685831, penalties=4.360000000000001E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteplaysforteam(B, C), teamalsoknownas(C, _).  [covers 201,0/218,0 pos, 0,0/0,0 neg]
%     Score = -6,685779 (regressionFit = 6,685775, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteplaysforteam(C, _), teamalsoknownas(_, A).  [covers 41,0/218,0 pos, 0,0/0,0 neg]
%     Score = -6,685835 (regressionFit = 6,685831, penalties=4.360000000000001E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteplaysforteam(B, C), teamalsoknownas(_, C).  [covers 201,0/218,0 pos, 0,0/0,0 neg]
%     Score = -6,584106 (regressionFit = 6,584102, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteplaysforteam(C, D), teamplaysagainstteam(A, D).  [covers 6,0/218,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -6,584106): teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteplaysforteam(C, D), teamplaysagainstteam(A, D).  [covers 6,0/218,0 pos, 0,0/0,0 neg]
%     Score = -6,667466 (regressionFit = 6,667462, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteplaysforteam(C, D), teamplaysagainstteam(D, A).  [covers 15,0/218,0 pos, 0,0/0,0 neg]
%     Score = -6,674979 (regressionFit = 6,674975, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteplaysforteam(C, _), teamplaysagainstteam(A, _).  [covers 34,0/218,0 pos, 0,0/0,0 neg]
%     Score = -6,685835 (regressionFit = 6,685831, penalties=4.360000000000001E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteplaysforteam(B, C), teamplaysagainstteam(C, _).  [covers 201,0/218,0 pos, 0,0/0,0 neg]
%     Score = -6,686938 (regressionFit = 6,686934, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteplaysforteam(C, _), teamplaysagainstteam(_, A).  [covers 50,0/218,0 pos, 0,0/0,0 neg]
%     Score = -6,685835 (regressionFit = 6,685831, penalties=4.360000000000001E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteplaysforteam(B, C), teamplaysagainstteam(_, C).  [covers 201,0/218,0 pos, 0,0/0,0 neg]
%     Score = -6,683241 (regressionFit = 6,683237, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), athleteplaysforteam(C, _), teamplaysinleague(A, D).  [covers 24,0/218,0 pos, 0,0/0,0 neg]
%     Score = -6,685835 (regressionFit = 6,685831, penalties=4.15E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, C), athleteplaysforteam(B, D), teamplaysinleague(D, C).  [covers 201,0/218,0 pos, 0,0/0,0 neg]
%     Score = -6,669890 (regressionFit = 6,669885, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteplaysforteam(C, _), teamplaysinleague(A, _).  [covers 129,0/218,0 pos, 0,0/0,0 neg]
%     Score = -6,685835 (regressionFit = 6,685831, penalties=4.360000000000001E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteplaysforteam(B, C), teamplaysinleague(C, _).  [covers 201,0/218,0 pos, 0,0/0,0 neg]
%     Score = -6,685835 (regressionFit = 6,685831, penalties=4.360000000000001E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, C), athleteplaysforteam(B, _), teamplaysinleague(_, C).  [covers 201,0/218,0 pos, 0,0/0,0 neg]

***** Warning: #8 TOO MANY NODES CONSIDERED (i.e., 'expanded') for 'LearnOneClause': nodesConsidered = 10 and maxNodesToConsider = 10. *****


% The best node found: teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteplaysforteam(C, D), teamplaysagainstteam(A, D).  [covers 6,0/218,0 pos, 0,0/0,0 neg]

% The best node found: teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteplaysforteam(C, D), teamplaysagainstteam(A, D).  [covers 6,0/218,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,031.
% Will extend: teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteplaysforteam(C, D), teamplaysagainstteam(A, D).  [covers 6,0/218,0 pos, 0,0/0,0 neg]
% Path: 1;true,false
Comparing variance: 0.1422548080915542 to score=0.0025 #egs=6.0
Comparing variance: 0.027031004239070188 to score=0.0025 #egs=212.0
%   Creating a TRUE-branch leaf because wgtedCountTrueBranchPos = 6,0 < 2.1 * minPosCov = 6,3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 212,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,027031)
%         ILP node to extend: teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _).  [covers 218,0/218,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -0,027031) into position #1 in the search queue (new size=2).

% Time for loop #3: 2,315 seconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #3, the best clause found is:
%      teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteplaysforteam(C, D), teamplaysagainstteam(A, D).  [covers 6,0/218,0 pos, 0,0/0,0 neg]
% This clause covers 6 positive examples, of which 6 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _).  [covers 218,0/212,0 pos, 0,0/0,0 neg]'
%     Score = -12,720414 (regressionFit = 12,720411, penalties=2.24E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _).  [covers 212,0/212,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 14 51 61 75 92 99 102 106 113 144
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Consider expanding [#1 of outerLoop #4, bodyLen=2] 'teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _).  [covers 212,0/212,0 pos, 0,0/0,0 neg]' score=-12.720413631229116
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 10 variant children.  Sending 12 items to OPEN for evaluation and possible insertion.
% Have created 12 valid-on-seeds descendants and have picked up 11 bad extensions.
%     Score = -5,727340 (regressionFit = 5,727337, penalties=3.35E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteledsportsteam(B, _).  [covers 195,0/212,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -5,727340): teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteledsportsteam(B, _).  [covers 195,0/212,0 pos, 0,0/0,0 neg]
%     Score = -5,719187 (regressionFit = 5,719184, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(_, A).  [covers 9,0/212,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -5,719187): teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(_, A).  [covers 9,0/212,0 pos, 0,0/0,0 neg]
%     Score = -5,727340 (regressionFit = 5,727337, penalties=3.35E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteplaysforteam(B, _).  [covers 195,0/212,0 pos, 0,0/0,0 neg]
%     Score = -5,687063 (regressionFit = 5,687059, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteplaysforteam(_, A).  [covers 31,0/212,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -5,687063): teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteplaysforteam(_, A).  [covers 31,0/212,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000008E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, C), athleteplaysinleague(_, C).  [covers 212,0/212,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteplayssport(_, A).  [covers 212,0/212,0 pos, 0,0/0,0 neg]
%     Score = -5,710806 (regressionFit = 5,710803, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(A, _).  [covers 65,0/212,0 pos, 0,0/0,0 neg]
%     Score = -5,727901 (regressionFit = 5,727897, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(_, A).  [covers 44,0/212,0 pos, 0,0/0,0 neg]
%     Score = -5,724260 (regressionFit = 5,724257, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(A, _).  [covers 38,0/212,0 pos, 0,0/0,0 neg]
%     Score = -5,707647 (regressionFit = 5,707643, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(_, A).  [covers 58,0/212,0 pos, 0,0/0,0 neg]
%     Score = -5,729321 (regressionFit = 5,729318, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysinleague(A, _).  [covers 132,0/212,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, C), teamplaysinleague(_, C).  [covers 212,0/212,0 pos, 0,0/0,0 neg]

% Consider expanding [#2 of outerLoop #4, bodyLen=3] 'teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteplaysforteam(_, A).  [covers 31,0/212,0 pos, 0,0/0,0 neg]' score=-5.687062683065478
%  At # nodes expanded = 2, |OPEN| = 11.  Pruned 16 variant children.  Sending 13 items to OPEN for evaluation and possible insertion.
% Have created 13 valid-on-seeds descendants and have picked up 7 bad extensions.
%     Score = -5,719773 (regressionFit = 5,719769, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteplaysforteam(D, A), athleteledsportsteam(D, A).  [covers 8,0/212,0 pos, 0,0/0,0 neg]
%     Score = -5,697706 (regressionFit = 5,697702, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteplaysforteam(_, A), athleteledsportsteam(C, _).  [covers 25,0/212,0 pos, 0,0/0,0 neg]
%     Score = -5,719773 (regressionFit = 5,719769, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteplaysforteam(_, A), athleteledsportsteam(_, A).  [covers 8,0/212,0 pos, 0,0/0,0 neg]
%     Score = -5,697706 (regressionFit = 5,697702, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteplaysforteam(_, A), athleteplaysforteam(C, _).  [covers 25,0/212,0 pos, 0,0/0,0 neg]
%     Score = -5,687064 (regressionFit = 5,687059, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteplaysforteam(_, A), athleteplaysforteam(_, A).  [covers 31,0/212,0 pos, 0,0/0,0 neg]
%     Score = -5,687064 (regressionFit = 5,687059, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), athleteplaysforteam(_, A), athleteplaysinleague(_, D).  [covers 31,0/212,0 pos, 0,0/0,0 neg]
%     Score = -5,687064 (regressionFit = 5,687059, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteplaysforteam(_, A), athleteplayssport(_, B).  [covers 31,0/212,0 pos, 0,0/0,0 neg]
%     Score = -5,715665 (regressionFit = 5,715661, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteplaysforteam(_, A), teamalsoknownas(A, _).  [covers 11,0/212,0 pos, 0,0/0,0 neg]
%     Score = -5,721682 (regressionFit = 5,721678, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteplaysforteam(_, A), teamalsoknownas(_, A).  [covers 6,0/212,0 pos, 0,0/0,0 neg]
%     Score = -5,694257 (regressionFit = 5,694253, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteplaysforteam(_, A), teamplaysagainstteam(A, _).  [covers 21,0/212,0 pos, 0,0/0,0 neg]
%     Score = -5,689554 (regressionFit = 5,689550, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteplaysforteam(_, A), teamplaysagainstteam(_, A).  [covers 28,0/212,0 pos, 0,0/0,0 neg]
%     Score = -5,695722 (regressionFit = 5,695718, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteplaysforteam(_, A), teamplaysinleague(A, _).  [covers 25,0/212,0 pos, 0,0/0,0 neg]
%     Score = -5,687064 (regressionFit = 5,687059, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), athleteplaysforteam(_, A), teamplaysinleague(_, D).  [covers 31,0/212,0 pos, 0,0/0,0 neg]

% Consider expanding [#3 of outerLoop #4, bodyLen=3] 'teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(_, A).  [covers 58,0/212,0 pos, 0,0/0,0 neg]' score=-5.707646583932722
%  At # nodes expanded = 3, |OPEN| = 10.  Pruned 26 variant children.  Sending 21 items to OPEN for evaluation and possible insertion.
% Have created 21 valid-on-seeds descendants and have picked up 11 bad extensions.
%     Score = -5,724365 (regressionFit = 5,724360, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(_, A), athleteledsportsteam(C, _).  [covers 44,0/212,0 pos, 0,0/0,0 neg]
%     Score = -5,720320 (regressionFit = 5,720316, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(_, A), athleteledsportsteam(_, A).  [covers 7,0/212,0 pos, 0,0/0,0 neg]
%     Score = -5,730573 (regressionFit = 5,730569, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(D, A), athleteledsportsteam(_, D).  [covers 30,0/212,0 pos, 0,0/0,0 neg]
%     Score = -5,724365 (regressionFit = 5,724360, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(_, A), athleteplaysforteam(C, _).  [covers 44,0/212,0 pos, 0,0/0,0 neg]
%     Score = -5,689554 (regressionFit = 5,689550, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(_, A), athleteplaysforteam(_, A).  [covers 28,0/212,0 pos, 0,0/0,0 neg]
%     Score = -5,718932 (regressionFit = 5,718928, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(D, A), athleteplaysforteam(_, D).  [covers 49,0/212,0 pos, 0,0/0,0 neg]
%     Score = -5,707647 (regressionFit = 5,707643, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), teamplaysagainstteam(_, A), athleteplaysinleague(_, D).  [covers 58,0/212,0 pos, 0,0/0,0 neg]
%     Score = -5,707648 (regressionFit = 5,707643, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(_, A), athleteplayssport(_, B).  [covers 58,0/212,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(D, A), teamalsoknownas(A, D).  [covers 2,0/212,0 pos, 0,0/0,0 neg]
%     Score = -5,699628 (regressionFit = 5,699624, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(_, A), teamalsoknownas(A, _).  [covers 25,0/212,0 pos, 0,0/0,0 neg]
%     Score = -5,729541 (regressionFit = 5,729537, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(D, A), teamalsoknownas(D, _).  [covers 33,0/212,0 pos, 0,0/0,0 neg]
%     Score = -5,718659 (regressionFit = 5,718654, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(_, A), teamalsoknownas(_, A).  [covers 10,0/212,0 pos, 0,0/0,0 neg]
%     Score = -5,689634 (regressionFit = 5,689629, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(D, A), teamalsoknownas(_, D).  [covers 32,0/212,0 pos, 0,0/0,0 neg]
%     Score = -5,728433 (regressionFit = 5,728429, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(D, A), teamplaysagainstteam(A, D).  [covers 30,0/212,0 pos, 0,0/0,0 neg]
%     Score = -5,725382 (regressionFit = 5,725378, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(_, A), teamplaysagainstteam(A, _).  [covers 36,0/212,0 pos, 0,0/0,0 neg]
%     Score = -5,707647 (regressionFit = 5,707643, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(D, A), teamplaysagainstteam(D, _).  [covers 58,0/212,0 pos, 0,0/0,0 neg]
%     Score = -5,707648 (regressionFit = 5,707643, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(_, A), teamplaysagainstteam(_, A).  [covers 58,0/212,0 pos, 0,0/0,0 neg]
%     Score = -5,707647 (regressionFit = 5,707643, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(D, A), teamplaysagainstteam(_, D).  [covers 58,0/212,0 pos, 0,0/0,0 neg]
%     Score = -5,725685 (regressionFit = 5,725681, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(_, A), teamplaysinleague(A, _).  [covers 40,0/212,0 pos, 0,0/0,0 neg]
%     Score = -5,714066 (regressionFit = 5,714061, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(D, A), teamplaysinleague(D, _).  [covers 53,0/212,0 pos, 0,0/0,0 neg]
%     Score = -5,707648 (regressionFit = 5,707643, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), teamplaysagainstteam(_, A), teamplaysinleague(_, D).  [covers 58,0/212,0 pos, 0,0/0,0 neg]

% Consider expanding [#4 of outerLoop #4, bodyLen=3] 'teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(A, _).  [covers 65,0/212,0 pos, 0,0/0,0 neg]' score=-5.710806047383472
%  At # nodes expanded = 4, |OPEN| = 9.  Pruned 26 variant children.  Sending 21 items to OPEN for evaluation and possible insertion.
% Have created 21 valid-on-seeds descendants and have picked up 10 bad extensions.
%     Score = -5,722387 (regressionFit = 5,722383, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(A, _), athleteledsportsteam(C, _).  [covers 58,0/212,0 pos, 0,0/0,0 neg]
%     Score = -5,726862 (regressionFit = 5,726857, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(A, _), athleteledsportsteam(_, A).  [covers 3,0/212,0 pos, 0,0/0,0 neg]
%     Score = -5,722387 (regressionFit = 5,722383, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(A, _), athleteplaysforteam(C, _).  [covers 58,0/212,0 pos, 0,0/0,0 neg]
%     Score = -5,715665 (regressionFit = 5,715661, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(A, _), athleteplaysforteam(_, A).  [covers 11,0/212,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(A, D), athleteplaysforteam(_, D).  [covers 2,0/212,0 pos, 0,0/0,0 neg]
%     Score = -5,710807 (regressionFit = 5,710803, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), teamalsoknownas(A, _), athleteplaysinleague(_, D).  [covers 65,0/212,0 pos, 0,0/0,0 neg]
%     Score = -5,710807 (regressionFit = 5,710803, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(A, _), athleteplayssport(_, B).  [covers 65,0/212,0 pos, 0,0/0,0 neg]
%     Score = -5,730504 (regressionFit = 5,730500, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(A, D), teamalsoknownas(D, A).  [covers 34,0/212,0 pos, 0,0/0,0 neg]
%     Score = -5,710807 (regressionFit = 5,710803, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(A, _), teamalsoknownas(A, _).  [covers 65,0/212,0 pos, 0,0/0,0 neg]
%     Score = -5,713717 (regressionFit = 5,713713, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(A, D), teamalsoknownas(D, _).  [covers 63,0/212,0 pos, 0,0/0,0 neg]
%     Score = -5,730407 (regressionFit = 5,730403, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(A, _), teamalsoknownas(_, A).  [covers 35,0/212,0 pos, 0,0/0,0 neg]
%     Score = -5,710807 (regressionFit = 5,710803, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(A, D), teamalsoknownas(_, D).  [covers 65,0/212,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(A, D), teamplaysagainstteam(A, D).  [covers 2,0/212,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(A, D), teamplaysagainstteam(D, A).  [covers 2,0/212,0 pos, 0,0/0,0 neg]
%     Score = -5,708161 (regressionFit = 5,708157, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(A, _), teamplaysagainstteam(A, _).  [covers 14,0/212,0 pos, 0,0/0,0 neg]
%     Score = -5,721945 (regressionFit = 5,721941, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(A, D), teamplaysagainstteam(D, _).  [covers 3,0/212,0 pos, 0,0/0,0 neg]
%     Score = -5,699628 (regressionFit = 5,699624, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(A, _), teamplaysagainstteam(_, A).  [covers 25,0/212,0 pos, 0,0/0,0 neg]
%     Score = -5,721945 (regressionFit = 5,721941, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(A, D), teamplaysagainstteam(_, D).  [covers 3,0/212,0 pos, 0,0/0,0 neg]
%     Score = -5,677259 (regressionFit = 5,677254, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(A, _), teamplaysinleague(A, _).  [covers 46,0/212,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -5,677259): teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(A, _), teamplaysinleague(A, _).  [covers 46,0/212,0 pos, 0,0/0,0 neg]
%     Score = -5,715988 (regressionFit = 5,715984, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(A, D), teamplaysinleague(D, _).  [covers 61,0/212,0 pos, 0,0/0,0 neg]
%     Score = -5,710807 (regressionFit = 5,710803, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), teamalsoknownas(A, _), teamplaysinleague(_, D).  [covers 65,0/212,0 pos, 0,0/0,0 neg]

% Consider expanding [#5 of outerLoop #4, bodyLen=3] 'teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(_, A).  [covers 9,0/212,0 pos, 0,0/0,0 neg]' score=-5.719187168403907
%  At # nodes expanded = 5, |OPEN| = 8.  Pruned 16 variant children.  Sending 12 items to OPEN for evaluation and possible insertion.
% Have created 12 valid-on-seeds descendants and have picked up 7 bad extensions.
%     Score = -5,723550 (regressionFit = 5,723546, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(_, A), athleteledsportsteam(C, _).  [covers 6,0/212,0 pos, 0,0/0,0 neg]
%     Score = -5,719773 (regressionFit = 5,719769, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(D, A), athleteplaysforteam(D, A).  [covers 8,0/212,0 pos, 0,0/0,0 neg]
%     Score = -5,723551 (regressionFit = 5,723546, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(_, A), athleteplaysforteam(C, _).  [covers 6,0/212,0 pos, 0,0/0,0 neg]
%     Score = -5,719773 (regressionFit = 5,719769, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(_, A), athleteplaysforteam(_, A).  [covers 8,0/212,0 pos, 0,0/0,0 neg]
%     Score = -5,719188 (regressionFit = 5,719184, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), athleteledsportsteam(_, A), athleteplaysinleague(_, D).  [covers 9,0/212,0 pos, 0,0/0,0 neg]
%     Score = -5,719188 (regressionFit = 5,719184, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(_, A), athleteplayssport(_, B).  [covers 9,0/212,0 pos, 0,0/0,0 neg]
%     Score = -5,726862 (regressionFit = 5,726857, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(_, A), teamalsoknownas(A, _).  [covers 3,0/212,0 pos, 0,0/0,0 neg]
%     Score = -5,726862 (regressionFit = 5,726857, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(_, A), teamalsoknownas(_, A).  [covers 3,0/212,0 pos, 0,0/0,0 neg]
%     Score = -5,720715 (regressionFit = 5,720711, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(_, A), teamplaysagainstteam(A, _).  [covers 6,0/212,0 pos, 0,0/0,0 neg]
%     Score = -5,720320 (regressionFit = 5,720316, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(_, A), teamplaysagainstteam(_, A).  [covers 7,0/212,0 pos, 0,0/0,0 neg]
%     Score = -5,720658 (regressionFit = 5,720654, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(_, A), teamplaysinleague(A, _).  [covers 8,0/212,0 pos, 0,0/0,0 neg]
%     Score = -5,719188 (regressionFit = 5,719184, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), athleteledsportsteam(_, A), teamplaysinleague(_, D).  [covers 9,0/212,0 pos, 0,0/0,0 neg]

% Consider expanding [#6 of outerLoop #4, bodyLen=3] 'teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(A, _).  [covers 38,0/212,0 pos, 0,0/0,0 neg]' score=-5.724259988261399
%  At # nodes expanded = 6, |OPEN| = 7.  Pruned 26 variant children.  Sending 21 items to OPEN for evaluation and possible insertion.
% Have created 21 valid-on-seeds descendants and have picked up 11 bad extensions.
%     Score = -5,730351 (regressionFit = 5,730346, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(A, _), athleteledsportsteam(C, _).  [covers 28,0/212,0 pos, 0,0/0,0 neg]
%     Score = -5,720715 (regressionFit = 5,720711, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(A, _), athleteledsportsteam(_, A).  [covers 6,0/212,0 pos, 0,0/0,0 neg]
%     Score = -5,721188 (regressionFit = 5,721184, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(A, D), athleteledsportsteam(_, D).  [covers 16,0/212,0 pos, 0,0/0,0 neg]
%     Score = -5,730351 (regressionFit = 5,730346, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(A, _), athleteplaysforteam(C, _).  [covers 28,0/212,0 pos, 0,0/0,0 neg]
%     Score = -5,694257 (regressionFit = 5,694253, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(A, _), athleteplaysforteam(_, A).  [covers 21,0/212,0 pos, 0,0/0,0 neg]
%     Score = -5,728884 (regressionFit = 5,728880, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(A, D), athleteplaysforteam(_, D).  [covers 31,0/212,0 pos, 0,0/0,0 neg]
%     Score = -5,724261 (regressionFit = 5,724257, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), teamplaysagainstteam(A, _), athleteplaysinleague(_, D).  [covers 38,0/212,0 pos, 0,0/0,0 neg]
%     Score = -5,724261 (regressionFit = 5,724257, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(A, _), athleteplayssport(_, B).  [covers 38,0/212,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(A, D), teamalsoknownas(A, D).  [covers 2,0/212,0 pos, 0,0/0,0 neg]
%     Score = -5,708161 (regressionFit = 5,708157, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(A, _), teamalsoknownas(A, _).  [covers 14,0/212,0 pos, 0,0/0,0 neg]
%     Score = -5,730510 (regressionFit = 5,730506, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(A, D), teamalsoknownas(D, _).  [covers 27,0/212,0 pos, 0,0/0,0 neg]
%     Score = -5,720715 (regressionFit = 5,720711, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(A, _), teamalsoknownas(_, A).  [covers 6,0/212,0 pos, 0,0/0,0 neg]
%     Score = -5,729681 (regressionFit = 5,729677, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(A, D), teamalsoknownas(_, D).  [covers 22,0/212,0 pos, 0,0/0,0 neg]
%     Score = -5,728433 (regressionFit = 5,728429, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(A, D), teamplaysagainstteam(D, A).  [covers 30,0/212,0 pos, 0,0/0,0 neg]
%     Score = -5,724261 (regressionFit = 5,724257, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(A, _), teamplaysagainstteam(A, _).  [covers 38,0/212,0 pos, 0,0/0,0 neg]
%     Score = -5,725382 (regressionFit = 5,725378, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(A, D), teamplaysagainstteam(D, _).  [covers 36,0/212,0 pos, 0,0/0,0 neg]
%     Score = -5,725382 (regressionFit = 5,725378, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(A, _), teamplaysagainstteam(_, A).  [covers 36,0/212,0 pos, 0,0/0,0 neg]
%     Score = -5,724261 (regressionFit = 5,724257, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(A, D), teamplaysagainstteam(_, D).  [covers 38,0/212,0 pos, 0,0/0,0 neg]
%     Score = -5,730493 (regressionFit = 5,730489, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(A, _), teamplaysinleague(A, _).  [covers 27,0/212,0 pos, 0,0/0,0 neg]
%     Score = -5,727916 (regressionFit = 5,727912, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(A, D), teamplaysinleague(D, _).  [covers 33,0/212,0 pos, 0,0/0,0 neg]
%     Score = -5,724261 (regressionFit = 5,724257, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), teamplaysagainstteam(A, _), teamplaysinleague(_, D).  [covers 38,0/212,0 pos, 0,0/0,0 neg]

% Consider expanding [#7 of outerLoop #4, bodyLen=3] 'teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteledsportsteam(B, _).  [covers 195,0/212,0 pos, 0,0/0,0 neg]' score=-5.727339858643978
%  At # nodes expanded = 7, |OPEN| = 6.  Pruned 26 variant children.  Sending 20 items to OPEN for evaluation and possible insertion.
% Have created 20 valid-on-seeds descendants and have picked up 11 bad extensions.
%     Score = -5,723550 (regressionFit = 5,723546, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), athleteledsportsteam(_, A).  [covers 6,0/212,0 pos, 0,0/0,0 neg]
%     Score = -5,727341 (regressionFit = 5,727337, penalties=4.260000000000001E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteledsportsteam(B, C), athleteledsportsteam(_, C).  [covers 195,0/212,0 pos, 0,0/0,0 neg]
%     Score = -5,727341 (regressionFit = 5,727337, penalties=4.250000000000001E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteledsportsteam(B, C), athleteplaysforteam(B, C).  [covers 195,0/212,0 pos, 0,0/0,0 neg]
%     Score = -5,727341 (regressionFit = 5,727337, penalties=4.4600000000000005E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteledsportsteam(B, _), athleteplaysforteam(B, _).  [covers 195,0/212,0 pos, 0,0/0,0 neg]
%     Score = -5,697706 (regressionFit = 5,697702, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), athleteplaysforteam(_, A).  [covers 25,0/212,0 pos, 0,0/0,0 neg]
%     Score = -5,727341 (regressionFit = 5,727337, penalties=4.360000000000001E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteledsportsteam(B, C), athleteplaysforteam(_, C).  [covers 195,0/212,0 pos, 0,0/0,0 neg]
%     Score = -5,727341 (regressionFit = 5,727337, penalties=4.260000000000001E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, C), athleteledsportsteam(B, _), athleteplaysinleague(_, C).  [covers 195,0/212,0 pos, 0,0/0,0 neg]
%     Score = -5,727341 (regressionFit = 5,727337, penalties=4.3600000000000015E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteledsportsteam(B, _), athleteplayssport(_, A).  [covers 195,0/212,0 pos, 0,0/0,0 neg]
%     Score = -5,722387 (regressionFit = 5,722383, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamalsoknownas(A, _).  [covers 58,0/212,0 pos, 0,0/0,0 neg]
%     Score = -5,727341 (regressionFit = 5,727337, penalties=4.360000000000001E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteledsportsteam(B, C), teamalsoknownas(C, _).  [covers 195,0/212,0 pos, 0,0/0,0 neg]
%     Score = -5,730561 (regressionFit = 5,730557, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamalsoknownas(_, A).  [covers 39,0/212,0 pos, 0,0/0,0 neg]
%     Score = -5,727341 (regressionFit = 5,727337, penalties=4.360000000000001E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteledsportsteam(B, C), teamalsoknownas(_, C).  [covers 195,0/212,0 pos, 0,0/0,0 neg]
%     Score = -5,730351 (regressionFit = 5,730346, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamplaysagainstteam(A, _).  [covers 28,0/212,0 pos, 0,0/0,0 neg]
%     Score = -5,727341 (regressionFit = 5,727337, penalties=4.360000000000001E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteledsportsteam(B, C), teamplaysagainstteam(C, _).  [covers 195,0/212,0 pos, 0,0/0,0 neg]
%     Score = -5,724365 (regressionFit = 5,724360, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamplaysagainstteam(_, A).  [covers 44,0/212,0 pos, 0,0/0,0 neg]
%     Score = -5,727341 (regressionFit = 5,727337, penalties=4.360000000000001E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteledsportsteam(B, C), teamplaysagainstteam(_, C).  [covers 195,0/212,0 pos, 0,0/0,0 neg]
%     Score = -5,727341 (regressionFit = 5,727337, penalties=4.15E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, C), athleteledsportsteam(B, D), teamplaysinleague(D, C).  [covers 195,0/212,0 pos, 0,0/0,0 neg]
%     Score = -5,723709 (regressionFit = 5,723704, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _), teamplaysinleague(A, _).  [covers 124,0/212,0 pos, 0,0/0,0 neg]
%     Score = -5,727341 (regressionFit = 5,727337, penalties=4.360000000000001E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteledsportsteam(B, C), teamplaysinleague(C, _).  [covers 195,0/212,0 pos, 0,0/0,0 neg]
%     Score = -5,727341 (regressionFit = 5,727337, penalties=4.360000000000001E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, C), athleteledsportsteam(B, _), teamplaysinleague(_, C).  [covers 195,0/212,0 pos, 0,0/0,0 neg]

% Consider expanding [#8 of outerLoop #4, bodyLen=3] 'teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteplaysforteam(B, _).  [covers 195,0/212,0 pos, 0,0/0,0 neg]' score=-5.727339858643978
%  At # nodes expanded = 8, |OPEN| = 5.  Pruned 26 variant children.  Sending 21 items to OPEN for evaluation and possible insertion.
% Have created 21 valid-on-seeds descendants and have picked up 11 bad extensions.
%     Score = -5,727341 (regressionFit = 5,727337, penalties=4.250000000000001E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteplaysforteam(B, C), athleteledsportsteam(B, C).  [covers 195,0/212,0 pos, 0,0/0,0 neg]
%     Score = -5,727341 (regressionFit = 5,727337, penalties=4.4600000000000005E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteplaysforteam(B, _), athleteledsportsteam(B, _).  [covers 195,0/212,0 pos, 0,0/0,0 neg]
%     Score = -5,723551 (regressionFit = 5,723546, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteplaysforteam(C, _), athleteledsportsteam(_, A).  [covers 6,0/212,0 pos, 0,0/0,0 neg]
%     Score = -5,727341 (regressionFit = 5,727337, penalties=4.360000000000001E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteplaysforteam(B, C), athleteledsportsteam(_, C).  [covers 195,0/212,0 pos, 0,0/0,0 neg]
%     Score = -5,727341 (regressionFit = 5,727337, penalties=4.3600000000000015E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteplaysforteam(B, _), athleteplaysforteam(B, _).  [covers 195,0/212,0 pos, 0,0/0,0 neg]
%     Score = -5,697706 (regressionFit = 5,697702, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteplaysforteam(C, _), athleteplaysforteam(_, A).  [covers 25,0/212,0 pos, 0,0/0,0 neg]
%     Score = -5,727341 (regressionFit = 5,727337, penalties=4.260000000000001E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteplaysforteam(B, C), athleteplaysforteam(_, C).  [covers 195,0/212,0 pos, 0,0/0,0 neg]
%     Score = -5,727341 (regressionFit = 5,727337, penalties=4.260000000000001E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, C), athleteplaysforteam(B, _), athleteplaysinleague(_, C).  [covers 195,0/212,0 pos, 0,0/0,0 neg]
%     Score = -5,727341 (regressionFit = 5,727337, penalties=4.3600000000000015E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteplaysforteam(B, _), athleteplayssport(_, A).  [covers 195,0/212,0 pos, 0,0/0,0 neg]
%     Score = -5,722387 (regressionFit = 5,722383, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteplaysforteam(C, _), teamalsoknownas(A, _).  [covers 58,0/212,0 pos, 0,0/0,0 neg]
%     Score = -5,727341 (regressionFit = 5,727337, penalties=4.360000000000001E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteplaysforteam(B, C), teamalsoknownas(C, _).  [covers 195,0/212,0 pos, 0,0/0,0 neg]
%     Score = -5,730561 (regressionFit = 5,730557, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteplaysforteam(C, _), teamalsoknownas(_, A).  [covers 39,0/212,0 pos, 0,0/0,0 neg]
%     Score = -5,727341 (regressionFit = 5,727337, penalties=4.360000000000001E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteplaysforteam(B, C), teamalsoknownas(_, C).  [covers 195,0/212,0 pos, 0,0/0,0 neg]
%     Score = -5,730351 (regressionFit = 5,730346, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteplaysforteam(C, _), teamplaysagainstteam(A, _).  [covers 28,0/212,0 pos, 0,0/0,0 neg]
%     Score = -5,727341 (regressionFit = 5,727337, penalties=4.360000000000001E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteplaysforteam(B, C), teamplaysagainstteam(C, _).  [covers 195,0/212,0 pos, 0,0/0,0 neg]
%     Score = -5,724365 (regressionFit = 5,724360, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteplaysforteam(C, _), teamplaysagainstteam(_, A).  [covers 44,0/212,0 pos, 0,0/0,0 neg]
%     Score = -5,727341 (regressionFit = 5,727337, penalties=4.360000000000001E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteplaysforteam(B, C), teamplaysagainstteam(_, C).  [covers 195,0/212,0 pos, 0,0/0,0 neg]
%     Score = -5,727341 (regressionFit = 5,727337, penalties=4.15E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, C), athleteplaysforteam(B, D), teamplaysinleague(D, C).  [covers 195,0/212,0 pos, 0,0/0,0 neg]
%     Score = -5,723709 (regressionFit = 5,723704, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteplaysforteam(C, _), teamplaysinleague(A, _).  [covers 124,0/212,0 pos, 0,0/0,0 neg]
%     Score = -5,727341 (regressionFit = 5,727337, penalties=4.360000000000001E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteplaysforteam(B, C), teamplaysinleague(C, _).  [covers 195,0/212,0 pos, 0,0/0,0 neg]
%     Score = -5,727341 (regressionFit = 5,727337, penalties=4.360000000000001E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, C), athleteplaysforteam(B, _), teamplaysinleague(_, C).  [covers 195,0/212,0 pos, 0,0/0,0 neg]

% Consider expanding [#9 of outerLoop #4, bodyLen=3] 'teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(_, A).  [covers 44,0/212,0 pos, 0,0/0,0 neg]' score=-5.72790060480136
%  At # nodes expanded = 9, |OPEN| = 4.  Pruned 26 variant children.  Sending 16 items to OPEN for evaluation and possible insertion.
% Have created 16 valid-on-seeds descendants and have picked up 12 bad extensions.
%     Score = -5,730561 (regressionFit = 5,730557, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(_, A), athleteledsportsteam(C, _).  [covers 39,0/212,0 pos, 0,0/0,0 neg]
%     Score = -5,726862 (regressionFit = 5,726857, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(_, A), athleteledsportsteam(_, A).  [covers 3,0/212,0 pos, 0,0/0,0 neg]
%     Score = -5,730561 (regressionFit = 5,730557, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(_, A), athleteplaysforteam(C, _).  [covers 39,0/212,0 pos, 0,0/0,0 neg]
%     Score = -5,721682 (regressionFit = 5,721678, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(_, A), athleteplaysforteam(_, A).  [covers 6,0/212,0 pos, 0,0/0,0 neg]
%     Score = -5,727902 (regressionFit = 5,727897, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), teamalsoknownas(_, A), athleteplaysinleague(_, D).  [covers 44,0/212,0 pos, 0,0/0,0 neg]
%     Score = -5,727902 (regressionFit = 5,727897, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(_, A), athleteplayssport(_, B).  [covers 44,0/212,0 pos, 0,0/0,0 neg]
%     Score = -5,730504 (regressionFit = 5,730500, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(D, A), teamalsoknownas(A, D).  [covers 34,0/212,0 pos, 0,0/0,0 neg]
%     Score = -5,730407 (regressionFit = 5,730403, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(_, A), teamalsoknownas(A, _).  [covers 35,0/212,0 pos, 0,0/0,0 neg]
%     Score = -5,727902 (regressionFit = 5,727897, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(D, A), teamalsoknownas(D, _).  [covers 44,0/212,0 pos, 0,0/0,0 neg]
%     Score = -5,727902 (regressionFit = 5,727897, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(_, A), teamalsoknownas(_, A).  [covers 44,0/212,0 pos, 0,0/0,0 neg]
%     Score = -5,728474 (regressionFit = 5,728470, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(D, A), teamalsoknownas(_, D).  [covers 43,0/212,0 pos, 0,0/0,0 neg]
%     Score = -5,720715 (regressionFit = 5,720711, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(_, A), teamplaysagainstteam(A, _).  [covers 6,0/212,0 pos, 0,0/0,0 neg]
%     Score = -5,718659 (regressionFit = 5,718654, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(_, A), teamplaysagainstteam(_, A).  [covers 10,0/212,0 pos, 0,0/0,0 neg]
%     Score = -5,701871 (regressionFit = 5,701866, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(_, A), teamplaysinleague(A, _).  [covers 28,0/212,0 pos, 0,0/0,0 neg]
%     Score = -5,729131 (regressionFit = 5,729127, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(D, A), teamplaysinleague(D, _).  [covers 41,0/212,0 pos, 0,0/0,0 neg]
%     Score = -5,727902 (regressionFit = 5,727897, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), teamalsoknownas(_, A), teamplaysinleague(_, D).  [covers 44,0/212,0 pos, 0,0/0,0 neg]

***** Warning: #9 TOO MANY NODES CONSIDERED (i.e., 'expanded') for 'LearnOneClause': nodesConsidered = 10 and maxNodesToConsider = 10. *****


% The best node found: teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(A, _), teamplaysinleague(A, _).  [covers 46,0/212,0 pos, 0,0/0,0 neg]

% The best node found: teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(A, _), teamplaysinleague(A, _).  [covers 46,0/212,0 pos, 0,0/0,0 neg]

% Expanding node at Level 3 with score = -0,027.
% Will extend: teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(A, _), teamplaysinleague(A, _).  [covers 46,0/212,0 pos, 0,0/0,0 neg]
% Path: 1;true,false,false
Comparing variance: 1.1976428506652881E-4 to score=0.0025 #egs=46.0
Comparing variance: 0.034167139395848325 to score=0.0025 #egs=166.0
%   Creating a TRUE-branch and FALSE-branch leaves because level = 3 >= 3

% Time for loop #4: 1,859 seconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #4, the best clause found is:
%      teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(A, _), teamplaysinleague(A, _).  [covers 46,0/212,0 pos, 0,0/0,0 neg]
% This clause covers 46 positive examples, of which 46 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 10 positive seeds: 11 59 91 148 155 275 335 453 539 549
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = teamplayssport(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  teamplayssport(_, _).  [covers 740,0/740,0 pos, 0,0/0,0 neg]
% Most-general root: teamplayssport(_, _).  [covers 740,0/740,0 pos, 0,0/0,0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #5, bodyLen=0] 'teamplayssport(_, _).  [covers 740,0/740,0 pos, 0,0/0,0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 4 variant children.  Sending 6 items to OPEN for evaluation and possible insertion.
% Have created 6 valid-on-seeds descendants and have picked up 3 bad extensions.
%     Score = -5,926559 (regressionFit = 5,926558, penalties=1.23E-6) for clause:  teamplayssport(A, _) :- athleteledsportsteam(_, A).  [covers 202,0/740,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -5,926559): teamplayssport(A, _) :- athleteledsportsteam(_, A).  [covers 202,0/740,0 pos, 0,0/0,0 neg]
%     Score = -5,911591 (regressionFit = 5,911590, penalties=1.23E-6) for clause:  teamplayssport(A, _) :- athleteplaysforteam(_, A).  [covers 345,0/740,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -5,911591): teamplayssport(A, _) :- athleteplaysforteam(_, A).  [covers 345,0/740,0 pos, 0,0/0,0 neg]
%     Score = -5,892909 (regressionFit = 5,892908, penalties=1.23E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(_, A).  [covers 113,0/740,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -5,892909): teamplayssport(A, _) :- teamalsoknownas(_, A).  [covers 113,0/740,0 pos, 0,0/0,0 neg]
%     Score = -5,911410 (regressionFit = 5,911409, penalties=1.23E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, _).  [covers 460,0/740,0 pos, 0,0/0,0 neg]
%     Score = -5,906138 (regressionFit = 5,906137, penalties=1.23E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(_, A).  [covers 485,0/740,0 pos, 0,0/0,0 neg]
%     Score = -5,876934 (regressionFit = 5,876933, penalties=1.23E-6) for clause:  teamplayssport(A, _) :- teamplaysinleague(A, _).  [covers 571,0/740,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -5,876934): teamplayssport(A, _) :- teamplaysinleague(A, _).  [covers 571,0/740,0 pos, 0,0/0,0 neg]

% Consider expanding [#2 of outerLoop #5, bodyLen=1] 'teamplayssport(A, _) :- teamplaysinleague(A, _).  [covers 571,0/740,0 pos, 0,0/0,0 neg]' score=-5.876934259812484
%  At # nodes expanded = 2, |OPEN| = 5.  Pruned 4 variant children.  Sending 7 items to OPEN for evaluation and possible insertion.
% Have created 7 valid-on-seeds descendants and have picked up 3 bad extensions.
%     Score = -5,926682 (regressionFit = 5,926680, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysinleague(A, _), athleteledsportsteam(_, A).  [covers 200,0/740,0 pos, 0,0/0,0 neg]
%     Score = -5,913164 (regressionFit = 5,913161, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysinleague(A, _), athleteplaysforteam(_, A).  [covers 334,0/740,0 pos, 0,0/0,0 neg]
%     Score = -5,889229 (regressionFit = 5,889226, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysinleague(A, B), athleteplaysinleague(_, B).  [covers 454,0/740,0 pos, 0,0/0,0 neg]
%     Score = -5,909066 (regressionFit = 5,909064, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysinleague(A, _), teamalsoknownas(_, A).  [covers 79,0/740,0 pos, 0,0/0,0 neg]
%     Score = -5,899490 (regressionFit = 5,899488, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysinleague(A, _), teamplaysagainstteam(A, _).  [covers 410,0/740,0 pos, 0,0/0,0 neg]
%     Score = -5,896479 (regressionFit = 5,896477, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysinleague(A, _), teamplaysagainstteam(_, A).  [covers 423,0/740,0 pos, 0,0/0,0 neg]
%     Score = -5,876935 (regressionFit = 5,876933, penalties=2.1400000000000003E-6) for clause:  teamplayssport(A, _) :- teamplaysinleague(A, B), teamplaysinleague(_, B).  [covers 571,0/740,0 pos, 0,0/0,0 neg]

% Consider expanding [#3 of outerLoop #5, bodyLen=1] 'teamplayssport(A, _) :- teamalsoknownas(_, A).  [covers 113,0/740,0 pos, 0,0/0,0 neg]' score=-5.8929091622274585
%  At # nodes expanded = 3, |OPEN| = 4.  Pruned 14 variant children.  Sending 15 items to OPEN for evaluation and possible insertion.
% Have created 15 valid-on-seeds descendants and have picked up 6 bad extensions.
%     Score = -5,917118 (regressionFit = 5,917116, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(_, A), athleteledsportsteam(_, A).  [covers 34,0/740,0 pos, 0,0/0,0 neg]
%     Score = -5,926851 (regressionFit = 5,926848, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteledsportsteam(_, B).  [covers 34,0/740,0 pos, 0,0/0,0 neg]
%     Score = -5,924042 (regressionFit = 5,924040, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(_, A), athleteplaysforteam(_, A).  [covers 47,0/740,0 pos, 0,0/0,0 neg]
%     Score = -5,876158 (regressionFit = 5,876156, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B).  [covers 47,0/740,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -5,876158): teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B).  [covers 47,0/740,0 pos, 0,0/0,0 neg]
%     Score = -5,892910 (regressionFit = 5,892908, penalties=2.1400000000000003E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(B, _).  [covers 113,0/740,0 pos, 0,0/0,0 neg]
%     Score = -5,892910 (regressionFit = 5,892908, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(_, A), teamalsoknownas(_, A).  [covers 113,0/740,0 pos, 0,0/0,0 neg]
%     Score = -5,879775 (regressionFit = 5,879772, penalties=2.1400000000000003E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(_, B).  [covers 94,0/740,0 pos, 0,0/0,0 neg]
%     Score = -5,925831 (regressionFit = 5,925829, penalties=2.1300000000000004E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamplaysagainstteam(A, B).  [covers 37,0/740,0 pos, 0,0/0,0 neg]
%     Score = -5,925961 (regressionFit = 5,925959, penalties=2.1300000000000004E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamplaysagainstteam(B, A).  [covers 37,0/740,0 pos, 0,0/0,0 neg]
%     Score = -5,896657 (regressionFit = 5,896654, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(_, A), teamplaysagainstteam(A, _).  [covers 59,0/740,0 pos, 0,0/0,0 neg]
%     Score = -5,877726 (regressionFit = 5,877724, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamplaysagainstteam(B, _).  [covers 48,0/740,0 pos, 0,0/0,0 neg]
%     Score = -5,903182 (regressionFit = 5,903179, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(_, A), teamplaysagainstteam(_, A).  [covers 67,0/740,0 pos, 0,0/0,0 neg]
%     Score = -5,877726 (regressionFit = 5,877724, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamplaysagainstteam(_, B).  [covers 48,0/740,0 pos, 0,0/0,0 neg]
%     Score = -5,909066 (regressionFit = 5,909064, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(_, A), teamplaysinleague(A, _).  [covers 79,0/740,0 pos, 0,0/0,0 neg]
%     Score = -5,890441 (regressionFit = 5,890439, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamplaysinleague(B, _).  [covers 109,0/740,0 pos, 0,0/0,0 neg]

% Consider expanding [#4 of outerLoop #5, bodyLen=1] 'teamplayssport(A, _) :- teamplaysagainstteam(_, A).  [covers 485,0/740,0 pos, 0,0/0,0 neg]' score=-5.906138166688733
%  At # nodes expanded = 4, |OPEN| = 3.  Pruned 14 variant children.  Sending 15 items to OPEN for evaluation and possible insertion.
% Have created 15 valid-on-seeds descendants and have picked up 6 bad extensions.
%     Score = -5,926749 (regressionFit = 5,926747, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(_, A), athleteledsportsteam(_, A).  [covers 199,0/740,0 pos, 0,0/0,0 neg]
%     Score = -5,901842 (regressionFit = 5,901840, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(B, A), athleteledsportsteam(_, B).  [covers 401,0/740,0 pos, 0,0/0,0 neg]
%     Score = -5,912900 (regressionFit = 5,912898, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(_, A), athleteplaysforteam(_, A).  [covers 336,0/740,0 pos, 0,0/0,0 neg]
%     Score = -5,910527 (regressionFit = 5,910524, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(B, A), athleteplaysforteam(_, B).  [covers 464,0/740,0 pos, 0,0/0,0 neg]
%     Score = -5,925961 (regressionFit = 5,925959, penalties=2.1300000000000004E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(B, A), teamalsoknownas(B, A).  [covers 37,0/740,0 pos, 0,0/0,0 neg]
%     Score = -5,925609 (regressionFit = 5,925607, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(B, A), teamalsoknownas(B, _).  [covers 341,0/740,0 pos, 0,0/0,0 neg]
%     Score = -5,903182 (regressionFit = 5,903179, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(_, A), teamalsoknownas(_, A).  [covers 67,0/740,0 pos, 0,0/0,0 neg]
%     Score = -5,889665 (regressionFit = 5,889663, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(B, A), teamalsoknownas(_, B).  [covers 331,0/740,0 pos, 0,0/0,0 neg]
%     Score = -5,916258 (regressionFit = 5,916256, penalties=2.0300000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(B, A), teamplaysagainstteam(A, B).  [covers 432,0/740,0 pos, 0,0/0,0 neg]
%     Score = -5,912491 (regressionFit = 5,912489, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(_, A), teamplaysagainstteam(A, _).  [covers 454,0/740,0 pos, 0,0/0,0 neg]
%     Score = -5,906139 (regressionFit = 5,906137, penalties=2.1400000000000003E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(B, A), teamplaysagainstteam(B, _).  [covers 485,0/740,0 pos, 0,0/0,0 neg]
%     Score = -5,906139 (regressionFit = 5,906137, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(_, A), teamplaysagainstteam(_, A).  [covers 485,0/740,0 pos, 0,0/0,0 neg]
%     Score = -5,906139 (regressionFit = 5,906137, penalties=2.1400000000000003E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(B, A), teamplaysagainstteam(_, B).  [covers 485,0/740,0 pos, 0,0/0,0 neg]
%     Score = -5,896479 (regressionFit = 5,896477, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(_, A), teamplaysinleague(A, _).  [covers 423,0/740,0 pos, 0,0/0,0 neg]
%     Score = -5,908324 (regressionFit = 5,908322, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(B, A), teamplaysinleague(B, _).  [covers 475,0/740,0 pos, 0,0/0,0 neg]

% Consider expanding [#5 of outerLoop #5, bodyLen=1] 'teamplayssport(A, _) :- teamplaysagainstteam(A, _).  [covers 460,0/740,0 pos, 0,0/0,0 neg]' score=-5.911409961856706
%  At # nodes expanded = 5, |OPEN| = 2.  Pruned 14 variant children.  Sending 15 items to OPEN for evaluation and possible insertion.
% Have created 15 valid-on-seeds descendants and have picked up 6 bad extensions.
%     Score = -5,926809 (regressionFit = 5,926807, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, _), athleteledsportsteam(_, A).  [covers 198,0/740,0 pos, 0,0/0,0 neg]
%     Score = -5,906237 (regressionFit = 5,906235, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, B), athleteledsportsteam(_, B).  [covers 378,0/740,0 pos, 0,0/0,0 neg]
%     Score = -5,913862 (regressionFit = 5,913860, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, _), athleteplaysforteam(_, A).  [covers 329,0/740,0 pos, 0,0/0,0 neg]
%     Score = -5,913853 (regressionFit = 5,913851, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, B), athleteplaysforteam(_, B).  [covers 446,0/740,0 pos, 0,0/0,0 neg]
%     Score = -5,925831 (regressionFit = 5,925829, penalties=2.1300000000000004E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, B), teamalsoknownas(B, A).  [covers 37,0/740,0 pos, 0,0/0,0 neg]
%     Score = -5,926291 (regressionFit = 5,926289, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, B), teamalsoknownas(B, _).  [covers 333,0/740,0 pos, 0,0/0,0 neg]
%     Score = -5,896657 (regressionFit = 5,896654, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, _), teamalsoknownas(_, A).  [covers 59,0/740,0 pos, 0,0/0,0 neg]
%     Score = -5,888241 (regressionFit = 5,888239, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, B), teamalsoknownas(_, B).  [covers 339,0/740,0 pos, 0,0/0,0 neg]
%     Score = -5,916258 (regressionFit = 5,916256, penalties=2.0300000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, B), teamplaysagainstteam(B, A).  [covers 432,0/740,0 pos, 0,0/0,0 neg]
%     Score = -5,911411 (regressionFit = 5,911409, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, _), teamplaysagainstteam(A, _).  [covers 460,0/740,0 pos, 0,0/0,0 neg]
%     Score = -5,912315 (regressionFit = 5,912313, penalties=2.1400000000000003E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, B), teamplaysagainstteam(B, _).  [covers 455,0/740,0 pos, 0,0/0,0 neg]
%     Score = -5,912491 (regressionFit = 5,912489, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, _), teamplaysagainstteam(_, A).  [covers 454,0/740,0 pos, 0,0/0,0 neg]
%     Score = -5,911411 (regressionFit = 5,911409, penalties=2.1400000000000003E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, B), teamplaysagainstteam(_, B).  [covers 460,0/740,0 pos, 0,0/0,0 neg]
%     Score = -5,899490 (regressionFit = 5,899488, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, _), teamplaysinleague(A, _).  [covers 410,0/740,0 pos, 0,0/0,0 neg]
%     Score = -5,913012 (regressionFit = 5,913010, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, B), teamplaysinleague(B, _).  [covers 451,0/740,0 pos, 0,0/0,0 neg]

% Consider expanding [#6 of outerLoop #5, bodyLen=1] 'teamplayssport(A, _) :- athleteplaysforteam(_, A).  [covers 345,0/740,0 pos, 0,0/0,0 neg]' score=-5.911591326385039
%  At # nodes expanded = 6, |OPEN| = 1.  Pruned 8 variant children.  Sending 9 items to OPEN for evaluation and possible insertion.
% Have created 9 valid-on-seeds descendants and have picked up 3 bad extensions.
%     Score = -5,928632 (regressionFit = 5,928630, penalties=2.1300000000000004E-6) for clause:  teamplayssport(A, _) :- athleteplaysforteam(B, A), athleteledsportsteam(B, A).  [covers 162,0/740,0 pos, 0,0/0,0 neg]
%     Score = -5,927887 (regressionFit = 5,927885, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- athleteplaysforteam(_, A), athleteledsportsteam(_, A).  [covers 178,0/740,0 pos, 0,0/0,0 neg]
%     Score = -5,911592 (regressionFit = 5,911590, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- athleteplaysforteam(_, A), athleteplaysforteam(_, A).  [covers 345,0/740,0 pos, 0,0/0,0 neg]
%     Score = -5,923522 (regressionFit = 5,923519, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- athleteplaysforteam(B, A), athleteplaysinleague(B, _).  [covers 245,0/740,0 pos, 0,0/0,0 neg]
%     Score = -5,907047 (regressionFit = 5,907045, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- athleteplaysforteam(B, A), athleteplayssport(B, _).  [covers 235,0/740,0 pos, 0,0/0,0 neg]
%     Score = -5,924042 (regressionFit = 5,924040, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- athleteplaysforteam(_, A), teamalsoknownas(_, A).  [covers 47,0/740,0 pos, 0,0/0,0 neg]
%     Score = -5,913862 (regressionFit = 5,913860, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- athleteplaysforteam(_, A), teamplaysagainstteam(A, _).  [covers 329,0/740,0 pos, 0,0/0,0 neg]
%     Score = -5,912900 (regressionFit = 5,912898, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- athleteplaysforteam(_, A), teamplaysagainstteam(_, A).  [covers 336,0/740,0 pos, 0,0/0,0 neg]
%     Score = -5,913164 (regressionFit = 5,913161, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- athleteplaysforteam(_, A), teamplaysinleague(A, _).  [covers 334,0/740,0 pos, 0,0/0,0 neg]

% Consider expanding [#7 of outerLoop #5, bodyLen=1] 'teamplayssport(A, _) :- athleteledsportsteam(_, A).  [covers 202,0/740,0 pos, 0,0/0,0 neg]' score=-5.926559020812259
%  At # nodes expanded = 7, |OPEN| = 0.  Pruned 8 variant children.  Sending 10 items to OPEN for evaluation and possible insertion.
% Have created 10 valid-on-seeds descendants and have picked up 3 bad extensions.
%     Score = -5,926560 (regressionFit = 5,926558, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- athleteledsportsteam(_, A), athleteledsportsteam(_, A).  [covers 202,0/740,0 pos, 0,0/0,0 neg]
%     Score = -5,928632 (regressionFit = 5,928630, penalties=2.1300000000000004E-6) for clause:  teamplayssport(A, _) :- athleteledsportsteam(B, A), athleteplaysforteam(B, A).  [covers 162,0/740,0 pos, 0,0/0,0 neg]
%     Score = -5,926861 (regressionFit = 5,926859, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- athleteledsportsteam(B, A), athleteplaysforteam(B, _).  [covers 197,0/740,0 pos, 0,0/0,0 neg]
%     Score = -5,927887 (regressionFit = 5,927885, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- athleteledsportsteam(_, A), athleteplaysforteam(_, A).  [covers 178,0/740,0 pos, 0,0/0,0 neg]
%     Score = -5,927790 (regressionFit = 5,927788, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- athleteledsportsteam(B, A), athleteplaysinleague(B, _).  [covers 181,0/740,0 pos, 0,0/0,0 neg]
%     Score = -5,914128 (regressionFit = 5,914125, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- athleteledsportsteam(B, A), athleteplayssport(B, _).  [covers 176,0/740,0 pos, 0,0/0,0 neg]
%     Score = -5,917118 (regressionFit = 5,917116, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- athleteledsportsteam(_, A), teamalsoknownas(_, A).  [covers 34,0/740,0 pos, 0,0/0,0 neg]
%     Score = -5,926809 (regressionFit = 5,926807, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- athleteledsportsteam(_, A), teamplaysagainstteam(A, _).  [covers 198,0/740,0 pos, 0,0/0,0 neg]
%     Score = -5,926749 (regressionFit = 5,926747, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- athleteledsportsteam(_, A), teamplaysagainstteam(_, A).  [covers 199,0/740,0 pos, 0,0/0,0 neg]
%     Score = -5,926682 (regressionFit = 5,926680, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- athleteledsportsteam(_, A), teamplaysinleague(A, _).  [covers 200,0/740,0 pos, 0,0/0,0 neg]

% The best node found: teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B).  [covers 47,0/740,0 pos, 0,0/0,0 neg]

% The best node found: teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B).  [covers 47,0/740,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,008.
% Will extend: teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B).  [covers 47,0/740,0 pos, 0,0/0,0 neg]
% Path: 1;false
Comparing variance: 0.040628651773204946 to score=0.0025 #egs=47.0
Comparing variance: 0.00572382313650098 to score=0.0025 #egs=693.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 47,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,040629)
%         ILP node to extend: teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B).  [covers 47,0/740,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -0,040629) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 693,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,005724)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 2 and with score = -0,005724) into the LAST position (#2) in the search queue.

% Time for loop #5: 312 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #5, the best clause found is:
%      teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B).  [covers 47,0/740,0 pos, 0,0/0,0 neg]
% This clause covers 47 positive examples, of which 47 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B).  [covers 47,0/47,0 pos, 0,0/0,0 neg]'
%     Score = -5,876158 (regressionFit = 5,876156, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B).  [covers 47,0/47,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 2 5 11 14 17 21 27 33 37 40
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Consider expanding [#1 of outerLoop #6, bodyLen=2] 'teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B).  [covers 47,0/47,0 pos, 0,0/0,0 neg]' score=-5.876158306935811
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 22 variant children.  Sending 21 items to OPEN for evaluation and possible insertion.
% Have created 21 valid-on-seeds descendants and have picked up 7 bad extensions.
%     Score = -1,698474 (regressionFit = 1,698471, penalties=3.1400000000000004E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(C, B), athleteledsportsteam(C, B).  [covers 34,0/47,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -1,698474): teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(C, B), athleteledsportsteam(C, B).  [covers 34,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,871244 (regressionFit = 1,871241, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(C, B), athleteledsportsteam(C, _).  [covers 37,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,895034 (regressionFit = 1,895030, penalties=3.35E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B), athleteledsportsteam(_, A).  [covers 32,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,698475 (regressionFit = 1,698471, penalties=3.35E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B), athleteledsportsteam(_, B).  [covers 34,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,855023 (regressionFit = 1,855020, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B), athleteplaysforteam(_, A).  [covers 38,0/47,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B), athleteplaysforteam(_, B).  [covers 47,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,768473 (regressionFit = 1,768469, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(C, B), athleteplaysinleague(C, _).  [covers 42,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,768473 (regressionFit = 1,768469, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(C, B), athleteplayssport(C, _).  [covers 42,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,883729 (regressionFit = 1,883725, penalties=3.1400000000000013E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B), teamalsoknownas(A, B).  [covers 10,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,903133 (regressionFit = 1,903130, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B), teamalsoknownas(A, _).  [covers 17,0/47,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B), teamalsoknownas(B, _).  [covers 47,0/47,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B), teamalsoknownas(_, A).  [covers 47,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,908041 (regressionFit = 1,908038, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B), teamalsoknownas(_, B).  [covers 26,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,631108 (regressionFit = 1,631105, penalties=3.240000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B), teamplaysagainstteam(A, B).  [covers 36,0/47,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -1,631108): teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B), teamplaysagainstteam(A, B).  [covers 36,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,633407 (regressionFit = 1,633404, penalties=3.240000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B), teamplaysagainstteam(B, A).  [covers 36,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,801296 (regressionFit = 1,801293, penalties=3.35E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B), teamplaysagainstteam(A, _).  [covers 41,0/47,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.35E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B), teamplaysagainstteam(B, _).  [covers 47,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,636090 (regressionFit = 1,636086, penalties=3.35E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B), teamplaysagainstteam(_, A).  [covers 44,0/47,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.35E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B), teamplaysagainstteam(_, B).  [covers 47,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,904107 (regressionFit = 1,904104, penalties=3.35E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B), teamplaysinleague(A, _).  [covers 44,0/47,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.35E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B), teamplaysinleague(B, _).  [covers 47,0/47,0 pos, 0,0/0,0 neg]

% Consider expanding [#2 of outerLoop #6, bodyLen=3] 'teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B), teamplaysagainstteam(A, B).  [covers 36,0/47,0 pos, 0,0/0,0 neg]' score=-1.631108115999101
%  At # nodes expanded = 2, |OPEN| = 20.  Pruned 20 variant children.  Sending 20 items to OPEN for evaluation and possible insertion.
% Have created 20 valid-on-seeds descendants and have picked up 7 bad extensions.
%     Score = -1,778933 (regressionFit = 1,778928, penalties=4.14E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(C, B), teamplaysagainstteam(A, B), athleteledsportsteam(C, B).  [covers 29,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,778933 (regressionFit = 1,778928, penalties=4.250000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(C, B), teamplaysagainstteam(A, B), athleteledsportsteam(C, _).  [covers 29,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,770035 (regressionFit = 1,770031, penalties=4.35E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B), teamplaysagainstteam(A, B), athleteledsportsteam(_, A).  [covers 29,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,778933 (regressionFit = 1,778928, penalties=4.35E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B), teamplaysagainstteam(A, B), athleteledsportsteam(_, B).  [covers 29,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,686213 (regressionFit = 1,686209, penalties=4.250000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B), teamplaysagainstteam(A, B), athleteplaysforteam(_, A).  [covers 34,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,631109 (regressionFit = 1,631105, penalties=4.250000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B), teamplaysagainstteam(A, B), athleteplaysforteam(_, B).  [covers 36,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,686213 (regressionFit = 1,686209, penalties=4.250000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(C, B), teamplaysagainstteam(A, B), athleteplaysinleague(C, _).  [covers 34,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,686213 (regressionFit = 1,686209, penalties=4.250000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(C, B), teamplaysagainstteam(A, B), athleteplayssport(C, _).  [covers 34,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,883730 (regressionFit = 1,883725, penalties=4.140000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B), teamplaysagainstteam(A, B), teamalsoknownas(A, B).  [covers 10,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,871386 (regressionFit = 1,871382, penalties=4.250000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B), teamplaysagainstteam(A, B), teamalsoknownas(A, _).  [covers 14,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,631109 (regressionFit = 1,631105, penalties=4.250000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B), teamplaysagainstteam(A, B), teamalsoknownas(B, _).  [covers 36,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,631109 (regressionFit = 1,631105, penalties=4.250000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B), teamplaysagainstteam(A, B), teamalsoknownas(_, A).  [covers 36,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,841364 (regressionFit = 1,841360, penalties=4.250000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B), teamplaysagainstteam(A, B), teamalsoknownas(_, B).  [covers 20,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,662800 (regressionFit = 1,662796, penalties=4.140000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B), teamplaysagainstteam(A, B), teamplaysagainstteam(B, A).  [covers 35,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,631109 (regressionFit = 1,631105, penalties=4.250000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B), teamplaysagainstteam(A, B), teamplaysagainstteam(A, _).  [covers 36,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,631109 (regressionFit = 1,631105, penalties=4.250000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B), teamplaysagainstteam(A, B), teamplaysagainstteam(B, _).  [covers 36,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,631109 (regressionFit = 1,631105, penalties=4.250000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B), teamplaysagainstteam(A, B), teamplaysagainstteam(_, A).  [covers 36,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,631109 (regressionFit = 1,631105, penalties=4.250000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B), teamplaysagainstteam(A, B), teamplaysagainstteam(_, B).  [covers 36,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,631109 (regressionFit = 1,631105, penalties=4.35E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B), teamplaysagainstteam(A, B), teamplaysinleague(A, _).  [covers 36,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,631109 (regressionFit = 1,631105, penalties=4.35E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B), teamplaysagainstteam(A, B), teamplaysinleague(B, _).  [covers 36,0/47,0 pos, 0,0/0,0 neg]

% Consider expanding [#3 of outerLoop #6, bodyLen=3] 'teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B), teamplaysagainstteam(B, A).  [covers 36,0/47,0 pos, 0,0/0,0 neg]' score=-1.6334071133422279
%  At # nodes expanded = 3, |OPEN| = 19.  Pruned 20 variant children.  Sending 20 items to OPEN for evaluation and possible insertion.
% Have created 20 valid-on-seeds descendants and have picked up 7 bad extensions.
%     Score = -1,766738 (regressionFit = 1,766734, penalties=4.14E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(C, B), teamplaysagainstteam(B, A), athleteledsportsteam(C, B).  [covers 30,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,766738 (regressionFit = 1,766734, penalties=4.250000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(C, B), teamplaysagainstteam(B, A), athleteledsportsteam(C, _).  [covers 30,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,782746 (regressionFit = 1,782742, penalties=4.35E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B), teamplaysagainstteam(B, A), athleteledsportsteam(_, A).  [covers 28,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,766738 (regressionFit = 1,766734, penalties=4.35E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B), teamplaysagainstteam(B, A), athleteledsportsteam(_, B).  [covers 30,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,688162 (regressionFit = 1,688158, penalties=4.250000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B), teamplaysagainstteam(B, A), athleteplaysforteam(_, A).  [covers 34,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,633408 (regressionFit = 1,633404, penalties=4.250000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B), teamplaysagainstteam(B, A), athleteplaysforteam(_, B).  [covers 36,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,688162 (regressionFit = 1,688158, penalties=4.250000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(C, B), teamplaysagainstteam(B, A), athleteplaysinleague(C, _).  [covers 34,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,688162 (regressionFit = 1,688158, penalties=4.250000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(C, B), teamplaysagainstteam(B, A), athleteplayssport(C, _).  [covers 34,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,887108 (regressionFit = 1,887104, penalties=4.140000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B), teamplaysagainstteam(B, A), teamalsoknownas(A, B).  [covers 9,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,875516 (regressionFit = 1,875511, penalties=4.250000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B), teamplaysagainstteam(B, A), teamalsoknownas(A, _).  [covers 13,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,633408 (regressionFit = 1,633404, penalties=4.250000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B), teamplaysagainstteam(B, A), teamalsoknownas(B, _).  [covers 36,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,633408 (regressionFit = 1,633404, penalties=4.250000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B), teamplaysagainstteam(B, A), teamalsoknownas(_, A).  [covers 36,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,847456 (regressionFit = 1,847452, penalties=4.250000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B), teamplaysagainstteam(B, A), teamalsoknownas(_, B).  [covers 19,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,662800 (regressionFit = 1,662796, penalties=4.140000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B), teamplaysagainstteam(B, A), teamplaysagainstteam(A, B).  [covers 35,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,633408 (regressionFit = 1,633404, penalties=4.250000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B), teamplaysagainstteam(B, A), teamplaysagainstteam(A, _).  [covers 36,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,633408 (regressionFit = 1,633404, penalties=4.250000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B), teamplaysagainstteam(B, A), teamplaysagainstteam(B, _).  [covers 36,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,633408 (regressionFit = 1,633404, penalties=4.250000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B), teamplaysagainstteam(B, A), teamplaysagainstteam(_, A).  [covers 36,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,633408 (regressionFit = 1,633404, penalties=4.250000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B), teamplaysagainstteam(B, A), teamplaysagainstteam(_, B).  [covers 36,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,633408 (regressionFit = 1,633404, penalties=4.35E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B), teamplaysagainstteam(B, A), teamplaysinleague(A, _).  [covers 36,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,633408 (regressionFit = 1,633404, penalties=4.35E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B), teamplaysagainstteam(B, A), teamplaysinleague(B, _).  [covers 36,0/47,0 pos, 0,0/0,0 neg]

% Consider expanding [#4 of outerLoop #6, bodyLen=3] 'teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B), teamplaysagainstteam(_, A).  [covers 44,0/47,0 pos, 0,0/0,0 neg]' score=-1.6360895194811078
%  At # nodes expanded = 4, |OPEN| = 18.  Pruned 44 variant children.  Sending 36 items to OPEN for evaluation and possible insertion.
% Have created 36 valid-on-seeds descendants and have picked up 10 bad extensions.
%     Score = -1,698476 (regressionFit = 1,698471, penalties=4.250000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(C, B), teamplaysagainstteam(_, A), athleteledsportsteam(C, B).  [covers 34,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,753019 (regressionFit = 1,753014, penalties=4.15E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(C, B), teamplaysagainstteam(D, A), athleteledsportsteam(C, D).  [covers 31,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,871245 (regressionFit = 1,871241, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(C, B), teamplaysagainstteam(_, A), athleteledsportsteam(C, _).  [covers 37,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,895035 (regressionFit = 1,895030, penalties=4.4600000000000005E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B), teamplaysagainstteam(_, A), athleteledsportsteam(_, A).  [covers 32,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,698476 (regressionFit = 1,698471, penalties=4.4600000000000005E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B), teamplaysagainstteam(_, A), athleteledsportsteam(_, B).  [covers 34,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,801297 (regressionFit = 1,801293, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B), teamplaysagainstteam(C, A), athleteledsportsteam(_, C).  [covers 41,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,855024 (regressionFit = 1,855020, penalties=4.3600000000000015E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B), teamplaysagainstteam(_, A), athleteplaysforteam(_, A).  [covers 38,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,636091 (regressionFit = 1,636086, penalties=4.3600000000000015E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B), teamplaysagainstteam(_, A), athleteplaysforteam(_, B).  [covers 44,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,636090 (regressionFit = 1,636086, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B), teamplaysagainstteam(C, A), athleteplaysforteam(_, C).  [covers 44,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,768474 (regressionFit = 1,768469, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(C, B), teamplaysagainstteam(_, A), athleteplaysinleague(C, _).  [covers 42,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,768474 (regressionFit = 1,768469, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(C, B), teamplaysagainstteam(_, A), athleteplayssport(C, _).  [covers 42,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,883730 (regressionFit = 1,883725, penalties=4.250000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B), teamplaysagainstteam(_, A), teamalsoknownas(A, B).  [covers 10,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,883730 (regressionFit = 1,883725, penalties=4.150000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B), teamplaysagainstteam(C, A), teamalsoknownas(A, C).  [covers 10,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,769496 (regressionFit = 1,769491, penalties=4.150000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B), teamplaysagainstteam(C, A), teamalsoknownas(B, C).  [covers 29,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,633408 (regressionFit = 1,633404, penalties=4.150000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B), teamplaysagainstteam(C, A), teamalsoknownas(C, A).  [covers 36,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,864400 (regressionFit = 1,864396, penalties=4.150000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B), teamplaysagainstteam(C, A), teamalsoknownas(C, B).  [covers 15,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,871386 (regressionFit = 1,871382, penalties=4.3600000000000015E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B), teamplaysagainstteam(_, A), teamalsoknownas(A, _).  [covers 14,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,636091 (regressionFit = 1,636086, penalties=4.3600000000000015E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B), teamplaysagainstteam(_, A), teamalsoknownas(B, _).  [covers 44,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,801297 (regressionFit = 1,801293, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B), teamplaysagainstteam(C, A), teamalsoknownas(C, _).  [covers 41,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,636091 (regressionFit = 1,636086, penalties=4.3600000000000015E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B), teamplaysagainstteam(_, A), teamalsoknownas(_, A).  [covers 44,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,822910 (regressionFit = 1,822906, penalties=4.3600000000000015E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B), teamplaysagainstteam(_, A), teamalsoknownas(_, B).  [covers 23,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,631109 (regressionFit = 1,631105, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B), teamplaysagainstteam(C, A), teamalsoknownas(_, C).  [covers 36,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,631109 (regressionFit = 1,631105, penalties=4.250000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B), teamplaysagainstteam(_, A), teamplaysagainstteam(A, B).  [covers 36,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,801297 (regressionFit = 1,801293, penalties=4.150000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B), teamplaysagainstteam(C, A), teamplaysagainstteam(A, C).  [covers 41,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,633408 (regressionFit = 1,633404, penalties=4.250000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B), teamplaysagainstteam(_, A), teamplaysagainstteam(B, A).  [covers 36,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,636090 (regressionFit = 1,636086, penalties=4.150000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B), teamplaysagainstteam(C, A), teamplaysagainstteam(B, C).  [covers 44,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,333679 (regressionFit = 1,333675, penalties=4.150000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B), teamplaysagainstteam(C, A), teamplaysagainstteam(C, B).  [covers 41,0/47,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -1,333679): teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B), teamplaysagainstteam(C, A), teamplaysagainstteam(C, B).  [covers 41,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,801297 (regressionFit = 1,801293, penalties=4.3600000000000015E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B), teamplaysagainstteam(_, A), teamplaysagainstteam(A, _).  [covers 41,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,636091 (regressionFit = 1,636086, penalties=4.3600000000000015E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B), teamplaysagainstteam(_, A), teamplaysagainstteam(B, _).  [covers 44,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,636090 (regressionFit = 1,636086, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B), teamplaysagainstteam(C, A), teamplaysagainstteam(C, _).  [covers 44,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,636091 (regressionFit = 1,636086, penalties=4.3600000000000015E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B), teamplaysagainstteam(_, A), teamplaysagainstteam(_, A).  [covers 44,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,636091 (regressionFit = 1,636086, penalties=4.3600000000000015E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B), teamplaysagainstteam(_, A), teamplaysagainstteam(_, B).  [covers 44,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,636090 (regressionFit = 1,636086, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B), teamplaysagainstteam(C, A), teamplaysagainstteam(_, C).  [covers 44,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,801297 (regressionFit = 1,801293, penalties=4.4600000000000005E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B), teamplaysagainstteam(_, A), teamplaysinleague(A, _).  [covers 41,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,636091 (regressionFit = 1,636086, penalties=4.4600000000000005E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B), teamplaysagainstteam(_, A), teamplaysinleague(B, _).  [covers 44,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,636091 (regressionFit = 1,636086, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B), teamplaysagainstteam(C, A), teamplaysinleague(C, _).  [covers 44,0/47,0 pos, 0,0/0,0 neg]

% Consider expanding [#5 of outerLoop #6, bodyLen=3] 'teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(C, B), athleteledsportsteam(C, B).  [covers 34,0/47,0 pos, 0,0/0,0 neg]' score=-1.6984744800605833
%  At # nodes expanded = 5, |OPEN| = 17.  Pruned 20 variant children.  Sending 18 items to OPEN for evaluation and possible insertion.
% Have created 18 valid-on-seeds descendants and have picked up 7 bad extensions.
%     Score = -1,837604 (regressionFit = 1,837599, penalties=4.150000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(C, B), athleteledsportsteam(C, B), athleteledsportsteam(_, A).  [covers 22,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,698475 (regressionFit = 1,698471, penalties=4.150000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(C, B), athleteledsportsteam(C, B), athleteledsportsteam(_, B).  [covers 34,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,790173 (regressionFit = 1,790169, penalties=4.150000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(C, B), athleteledsportsteam(C, B), athleteplaysforteam(_, A).  [covers 28,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,698475 (regressionFit = 1,698471, penalties=4.150000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(C, B), athleteledsportsteam(C, B), athleteplaysforteam(_, B).  [covers 34,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,737262 (regressionFit = 1,737258, penalties=4.250000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(C, B), athleteledsportsteam(C, B), athleteplaysinleague(C, _).  [covers 32,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,789679 (regressionFit = 1,789674, penalties=4.250000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(C, B), athleteledsportsteam(C, B), athleteplayssport(C, _).  [covers 28,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,904108 (regressionFit = 1,904104, penalties=4.040000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(C, B), athleteledsportsteam(C, B), teamalsoknownas(A, B).  [covers 3,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,895890 (regressionFit = 1,895886, penalties=4.150000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(C, B), athleteledsportsteam(C, B), teamalsoknownas(A, _).  [covers 7,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,698475 (regressionFit = 1,698471, penalties=4.150000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(C, B), athleteledsportsteam(C, B), teamalsoknownas(B, _).  [covers 34,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,698475 (regressionFit = 1,698471, penalties=4.150000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(C, B), athleteledsportsteam(C, B), teamalsoknownas(_, A).  [covers 34,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,778933 (regressionFit = 1,778928, penalties=4.14E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(C, B), athleteledsportsteam(C, B), teamplaysagainstteam(A, B).  [covers 29,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,766738 (regressionFit = 1,766734, penalties=4.14E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(C, B), athleteledsportsteam(C, B), teamplaysagainstteam(B, A).  [covers 30,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,753019 (regressionFit = 1,753014, penalties=4.250000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(C, B), athleteledsportsteam(C, B), teamplaysagainstteam(A, _).  [covers 31,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,698476 (regressionFit = 1,698471, penalties=4.250000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(C, B), athleteledsportsteam(C, B), teamplaysagainstteam(B, _).  [covers 34,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,698476 (regressionFit = 1,698471, penalties=4.250000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(C, B), athleteledsportsteam(C, B), teamplaysagainstteam(_, A).  [covers 34,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,698476 (regressionFit = 1,698471, penalties=4.250000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(C, B), athleteledsportsteam(C, B), teamplaysagainstteam(_, B).  [covers 34,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,753019 (regressionFit = 1,753014, penalties=4.250000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(C, B), athleteledsportsteam(C, B), teamplaysinleague(A, _).  [covers 31,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,698476 (regressionFit = 1,698471, penalties=4.250000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(C, B), athleteledsportsteam(C, B), teamplaysinleague(B, _).  [covers 34,0/47,0 pos, 0,0/0,0 neg]

% Consider expanding [#6 of outerLoop #6, bodyLen=3] 'teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B), athleteledsportsteam(_, B).  [covers 34,0/47,0 pos, 0,0/0,0 neg]' score=-1.6984746900605834
%  At # nodes expanded = 6, |OPEN| = 16.  Pruned 30 variant children.  Sending 25 items to OPEN for evaluation and possible insertion.
% Have created 25 valid-on-seeds descendants and have picked up 10 bad extensions.
%     Score = -1,698475 (regressionFit = 1,698471, penalties=4.150000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(C, B), athleteledsportsteam(_, B), athleteledsportsteam(C, B).  [covers 34,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,698476 (regressionFit = 1,698471, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(C, B), athleteledsportsteam(_, B), athleteledsportsteam(C, _).  [covers 34,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,837604 (regressionFit = 1,837599, penalties=4.3600000000000015E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B), athleteledsportsteam(_, B), athleteledsportsteam(_, A).  [covers 22,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,698476 (regressionFit = 1,698471, penalties=4.3600000000000015E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B), athleteledsportsteam(_, B), athleteledsportsteam(_, B).  [covers 34,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,698475 (regressionFit = 1,698471, penalties=4.150000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B), athleteledsportsteam(C, B), athleteplaysforteam(C, B).  [covers 34,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,698476 (regressionFit = 1,698471, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B), athleteledsportsteam(C, B), athleteplaysforteam(C, _).  [covers 34,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,790173 (regressionFit = 1,790169, penalties=4.3600000000000015E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B), athleteledsportsteam(_, B), athleteplaysforteam(_, A).  [covers 28,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,698476 (regressionFit = 1,698471, penalties=4.3600000000000015E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B), athleteledsportsteam(_, B), athleteplaysforteam(_, B).  [covers 34,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,737262 (regressionFit = 1,737258, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(C, B), athleteledsportsteam(_, B), athleteplaysinleague(C, _).  [covers 32,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,737262 (regressionFit = 1,737258, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B), athleteledsportsteam(C, B), athleteplaysinleague(C, _).  [covers 32,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,737262 (regressionFit = 1,737258, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(C, B), athleteledsportsteam(_, B), athleteplayssport(C, _).  [covers 32,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,737262 (regressionFit = 1,737258, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B), athleteledsportsteam(C, B), athleteplayssport(C, _).  [covers 32,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,904108 (regressionFit = 1,904104, penalties=4.250000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B), athleteledsportsteam(_, B), teamalsoknownas(A, B).  [covers 3,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,895891 (regressionFit = 1,895886, penalties=4.3600000000000015E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B), athleteledsportsteam(_, B), teamalsoknownas(A, _).  [covers 7,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,698476 (regressionFit = 1,698471, penalties=4.3600000000000015E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B), athleteledsportsteam(_, B), teamalsoknownas(B, _).  [covers 34,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,698476 (regressionFit = 1,698471, penalties=4.3600000000000015E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B), athleteledsportsteam(_, B), teamalsoknownas(_, A).  [covers 34,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,865538 (regressionFit = 1,865534, penalties=4.3600000000000015E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B), athleteledsportsteam(_, B), teamalsoknownas(_, B).  [covers 16,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,778933 (regressionFit = 1,778928, penalties=4.35E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B), athleteledsportsteam(_, B), teamplaysagainstteam(A, B).  [covers 29,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,766738 (regressionFit = 1,766734, penalties=4.35E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B), athleteledsportsteam(_, B), teamplaysagainstteam(B, A).  [covers 30,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,753019 (regressionFit = 1,753014, penalties=4.4600000000000005E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B), athleteledsportsteam(_, B), teamplaysagainstteam(A, _).  [covers 31,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,698476 (regressionFit = 1,698471, penalties=4.4600000000000005E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B), athleteledsportsteam(_, B), teamplaysagainstteam(B, _).  [covers 34,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,698476 (regressionFit = 1,698471, penalties=4.4600000000000005E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B), athleteledsportsteam(_, B), teamplaysagainstteam(_, A).  [covers 34,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,698476 (regressionFit = 1,698471, penalties=4.4600000000000005E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B), athleteledsportsteam(_, B), teamplaysagainstteam(_, B).  [covers 34,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,753019 (regressionFit = 1,753014, penalties=4.4600000000000005E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B), athleteledsportsteam(_, B), teamplaysinleague(A, _).  [covers 31,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,698476 (regressionFit = 1,698471, penalties=4.4600000000000005E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B), athleteledsportsteam(_, B), teamplaysinleague(B, _).  [covers 34,0/47,0 pos, 0,0/0,0 neg]

% Consider expanding [#7 of outerLoop #6, bodyLen=3] 'teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(C, B), athleteplaysinleague(C, _).  [covers 42,0/47,0 pos, 0,0/0,0 neg]' score=-1.768472692982887
%  At # nodes expanded = 7, |OPEN| = 15.  Pruned 26 variant children.  Sending 24 items to OPEN for evaluation and possible insertion.
% Have created 24 valid-on-seeds descendants and have picked up 7 bad extensions.
%     Score = -1,737262 (regressionFit = 1,737258, penalties=4.250000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, B).  [covers 32,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,885175 (regressionFit = 1,885171, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, _).  [covers 35,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,895035 (regressionFit = 1,895030, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(C, B), athleteplaysinleague(C, _), athleteledsportsteam(_, A).  [covers 32,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,737262 (regressionFit = 1,737258, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(C, B), athleteplaysinleague(C, _), athleteledsportsteam(_, B).  [covers 32,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,855024 (regressionFit = 1,855020, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(C, B), athleteplaysinleague(C, _), athleteplaysforteam(_, A).  [covers 38,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,768474 (regressionFit = 1,768469, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(C, B), athleteplaysinleague(C, _), athleteplaysforteam(_, B).  [covers 42,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,768474 (regressionFit = 1,768469, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(C, B), athleteplaysinleague(C, D), athleteplaysinleague(_, D).  [covers 42,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,768474 (regressionFit = 1,768469, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(C, B), athleteplaysinleague(C, _), athleteplayssport(C, _).  [covers 42,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,889102 (regressionFit = 1,889098, penalties=4.150000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(C, B), athleteplaysinleague(C, _), teamalsoknownas(A, B).  [covers 8,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,878108 (regressionFit = 1,878104, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(C, B), athleteplaysinleague(C, _), teamalsoknownas(A, _).  [covers 12,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,768474 (regressionFit = 1,768469, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(C, B), athleteplaysinleague(C, _), teamalsoknownas(B, _).  [covers 42,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,768474 (regressionFit = 1,768469, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(C, B), athleteplaysinleague(C, _), teamalsoknownas(_, A).  [covers 42,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,835687 (regressionFit = 1,835683, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(C, B), athleteplaysinleague(C, _), teamalsoknownas(_, B).  [covers 21,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,686213 (regressionFit = 1,686209, penalties=4.250000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(A, B).  [covers 34,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,688162 (regressionFit = 1,688158, penalties=4.250000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(B, A).  [covers 34,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,841866 (regressionFit = 1,841862, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(A, _).  [covers 39,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,768474 (regressionFit = 1,768469, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(B, _).  [covers 42,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,768474 (regressionFit = 1,768469, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(_, A).  [covers 42,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,768474 (regressionFit = 1,768469, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(_, B).  [covers 42,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,709900 (regressionFit = 1,709896, penalties=4.15E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(C, B), athleteplaysinleague(C, D), teamplaysinleague(A, D).  [covers 33,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,497587 (regressionFit = 1,497583, penalties=4.15E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(C, B), athleteplaysinleague(C, D), teamplaysinleague(B, D).  [covers 39,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,841866 (regressionFit = 1,841862, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(C, B), athleteplaysinleague(C, _), teamplaysinleague(A, _).  [covers 39,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,768474 (regressionFit = 1,768469, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(C, B), athleteplaysinleague(C, _), teamplaysinleague(B, _).  [covers 42,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,768474 (regressionFit = 1,768469, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(C, B), athleteplaysinleague(C, D), teamplaysinleague(_, D).  [covers 42,0/47,0 pos, 0,0/0,0 neg]

% Consider expanding [#8 of outerLoop #6, bodyLen=3] 'teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(C, B), athleteplayssport(C, _).  [covers 42,0/47,0 pos, 0,0/0,0 neg]' score=-1.768472692982887
%  At # nodes expanded = 8, |OPEN| = 14.  Pruned 22 variant children.  Sending 21 items to OPEN for evaluation and possible insertion.
% Have created 21 valid-on-seeds descendants and have picked up 7 bad extensions.
%     Score = -1,789679 (regressionFit = 1,789674, penalties=4.250000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(C, B), athleteplayssport(C, _), athleteledsportsteam(C, B).  [covers 28,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,885175 (regressionFit = 1,885171, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(C, B), athleteplayssport(C, _), athleteledsportsteam(C, _).  [covers 35,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,895035 (regressionFit = 1,895030, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(C, B), athleteplayssport(C, _), athleteledsportsteam(_, A).  [covers 32,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,737262 (regressionFit = 1,737258, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(C, B), athleteplayssport(C, _), athleteledsportsteam(_, B).  [covers 32,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,855024 (regressionFit = 1,855020, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(C, B), athleteplayssport(C, _), athleteplaysforteam(_, A).  [covers 38,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,768474 (regressionFit = 1,768469, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(C, B), athleteplayssport(C, _), athleteplaysforteam(_, B).  [covers 42,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,768474 (regressionFit = 1,768469, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(C, B), athleteplayssport(C, _), athleteplaysinleague(C, _).  [covers 42,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,768474 (regressionFit = 1,768469, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(C, B), athleteplayssport(C, D), athleteplayssport(_, D).  [covers 42,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,889102 (regressionFit = 1,889098, penalties=4.150000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(C, B), athleteplayssport(C, _), teamalsoknownas(A, B).  [covers 8,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,878108 (regressionFit = 1,878104, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(C, B), athleteplayssport(C, _), teamalsoknownas(A, _).  [covers 12,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,768474 (regressionFit = 1,768469, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(C, B), athleteplayssport(C, _), teamalsoknownas(B, _).  [covers 42,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,768474 (regressionFit = 1,768469, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(C, B), athleteplayssport(C, _), teamalsoknownas(_, A).  [covers 42,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,835687 (regressionFit = 1,835683, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(C, B), athleteplayssport(C, _), teamalsoknownas(_, B).  [covers 21,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,686213 (regressionFit = 1,686209, penalties=4.250000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(C, B), athleteplayssport(C, _), teamplaysagainstteam(A, B).  [covers 34,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,688162 (regressionFit = 1,688158, penalties=4.250000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(C, B), athleteplayssport(C, _), teamplaysagainstteam(B, A).  [covers 34,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,841866 (regressionFit = 1,841862, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(C, B), athleteplayssport(C, _), teamplaysagainstteam(A, _).  [covers 39,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,768474 (regressionFit = 1,768469, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(C, B), athleteplayssport(C, _), teamplaysagainstteam(B, _).  [covers 42,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,768474 (regressionFit = 1,768469, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(C, B), athleteplayssport(C, _), teamplaysagainstteam(_, A).  [covers 42,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,768474 (regressionFit = 1,768469, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(C, B), athleteplayssport(C, _), teamplaysagainstteam(_, B).  [covers 42,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,841866 (regressionFit = 1,841862, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(C, B), athleteplayssport(C, _), teamplaysinleague(A, _).  [covers 39,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,768474 (regressionFit = 1,768469, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(C, B), athleteplayssport(C, _), teamplaysinleague(B, _).  [covers 42,0/47,0 pos, 0,0/0,0 neg]

% Consider expanding [#9 of outerLoop #6, bodyLen=3] 'teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B), teamplaysagainstteam(A, _).  [covers 41,0/47,0 pos, 0,0/0,0 neg]' score=-1.8012963381139229
%  At # nodes expanded = 9, |OPEN| = 13.  Pruned 44 variant children.  Sending 36 items to OPEN for evaluation and possible insertion.
% Have created 36 valid-on-seeds descendants and have picked up 10 bad extensions.
%     Score = -1,753019 (regressionFit = 1,753014, penalties=4.250000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(C, B), teamplaysagainstteam(A, _), athleteledsportsteam(C, B).  [covers 31,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,778933 (regressionFit = 1,778928, penalties=4.15E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(C, B), teamplaysagainstteam(A, D), athleteledsportsteam(C, D).  [covers 29,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,890298 (regressionFit = 1,890294, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(C, B), teamplaysagainstteam(A, _), athleteledsportsteam(C, _).  [covers 34,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,895035 (regressionFit = 1,895030, penalties=4.4600000000000005E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B), teamplaysagainstteam(A, _), athleteledsportsteam(_, A).  [covers 32,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,753019 (regressionFit = 1,753014, penalties=4.4600000000000005E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B), teamplaysagainstteam(A, _), athleteledsportsteam(_, B).  [covers 31,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,824380 (regressionFit = 1,824376, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B), teamplaysagainstteam(A, C), athleteledsportsteam(_, C).  [covers 40,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,855024 (regressionFit = 1,855020, penalties=4.3600000000000015E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B), teamplaysagainstteam(A, _), athleteplaysforteam(_, A).  [covers 38,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,801297 (regressionFit = 1,801293, penalties=4.3600000000000015E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B), teamplaysagainstteam(A, _), athleteplaysforteam(_, B).  [covers 41,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,801297 (regressionFit = 1,801293, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B), teamplaysagainstteam(A, C), athleteplaysforteam(_, C).  [covers 41,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,841866 (regressionFit = 1,841862, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(C, B), teamplaysagainstteam(A, _), athleteplaysinleague(C, _).  [covers 39,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,841866 (regressionFit = 1,841862, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(C, B), teamplaysagainstteam(A, _), athleteplayssport(C, _).  [covers 39,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,883730 (regressionFit = 1,883725, penalties=4.250000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B), teamplaysagainstteam(A, _), teamalsoknownas(A, B).  [covers 10,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,883730 (regressionFit = 1,883725, penalties=4.150000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B), teamplaysagainstteam(A, C), teamalsoknownas(A, C).  [covers 10,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,769496 (regressionFit = 1,769491, penalties=4.150000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B), teamplaysagainstteam(A, C), teamalsoknownas(B, C).  [covers 29,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,631109 (regressionFit = 1,631105, penalties=4.150000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B), teamplaysagainstteam(A, C), teamalsoknownas(C, A).  [covers 36,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,856114 (regressionFit = 1,856110, penalties=4.150000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B), teamplaysagainstteam(A, C), teamalsoknownas(C, B).  [covers 17,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,871386 (regressionFit = 1,871382, penalties=4.3600000000000015E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B), teamplaysagainstteam(A, _), teamalsoknownas(A, _).  [covers 14,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,801297 (regressionFit = 1,801293, penalties=4.3600000000000015E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B), teamplaysagainstteam(A, _), teamalsoknownas(B, _).  [covers 41,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,801297 (regressionFit = 1,801293, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B), teamplaysagainstteam(A, C), teamalsoknownas(C, _).  [covers 41,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,801297 (regressionFit = 1,801293, penalties=4.3600000000000015E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B), teamplaysagainstteam(A, _), teamalsoknownas(_, A).  [covers 41,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,841364 (regressionFit = 1,841360, penalties=4.3600000000000015E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B), teamplaysagainstteam(A, _), teamalsoknownas(_, B).  [covers 20,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,631109 (regressionFit = 1,631105, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B), teamplaysagainstteam(A, C), teamalsoknownas(_, C).  [covers 36,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,631109 (regressionFit = 1,631105, penalties=4.250000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B), teamplaysagainstteam(A, _), teamplaysagainstteam(A, B).  [covers 36,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,633408 (regressionFit = 1,633404, penalties=4.250000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B), teamplaysagainstteam(A, _), teamplaysagainstteam(B, A).  [covers 36,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,801297 (regressionFit = 1,801293, penalties=4.150000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B), teamplaysagainstteam(A, C), teamplaysagainstteam(B, C).  [covers 41,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,801297 (regressionFit = 1,801293, penalties=4.150000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B), teamplaysagainstteam(A, C), teamplaysagainstteam(C, A).  [covers 41,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,801297 (regressionFit = 1,801293, penalties=4.150000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B), teamplaysagainstteam(A, C), teamplaysagainstteam(C, B).  [covers 41,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,801297 (regressionFit = 1,801293, penalties=4.3600000000000015E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B), teamplaysagainstteam(A, _), teamplaysagainstteam(A, _).  [covers 41,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,801297 (regressionFit = 1,801293, penalties=4.3600000000000015E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B), teamplaysagainstteam(A, _), teamplaysagainstteam(B, _).  [covers 41,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,801297 (regressionFit = 1,801293, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B), teamplaysagainstteam(A, C), teamplaysagainstteam(C, _).  [covers 41,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,801297 (regressionFit = 1,801293, penalties=4.3600000000000015E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B), teamplaysagainstteam(A, _), teamplaysagainstteam(_, A).  [covers 41,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,801297 (regressionFit = 1,801293, penalties=4.3600000000000015E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B), teamplaysagainstteam(A, _), teamplaysagainstteam(_, B).  [covers 41,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,801297 (regressionFit = 1,801293, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B), teamplaysagainstteam(A, C), teamplaysagainstteam(_, C).  [covers 41,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,801297 (regressionFit = 1,801293, penalties=4.4600000000000005E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B), teamplaysagainstteam(A, _), teamplaysinleague(A, _).  [covers 41,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,801297 (regressionFit = 1,801293, penalties=4.4600000000000005E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B), teamplaysagainstteam(A, _), teamplaysinleague(B, _).  [covers 41,0/47,0 pos, 0,0/0,0 neg]
%     Score = -1,801297 (regressionFit = 1,801293, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B), teamplaysagainstteam(A, C), teamplaysinleague(C, _).  [covers 41,0/47,0 pos, 0,0/0,0 neg]

***** Warning: #10 TOO MANY NODES CONSIDERED (i.e., 'expanded') for 'LearnOneClause': nodesConsidered = 10 and maxNodesToConsider = 10. *****


% The best node found: teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B), teamplaysagainstteam(C, A), teamplaysagainstteam(C, B).  [covers 41,0/47,0 pos, 0,0/0,0 neg]

% The best node found: teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B), teamplaysagainstteam(C, A), teamplaysagainstteam(C, B).  [covers 41,0/47,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,041.
% Will extend: teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B), teamplaysagainstteam(C, A), teamplaysagainstteam(C, B).  [covers 41,0/47,0 pos, 0,0/0,0 neg]
% Path: 1;false,true
Comparing variance: 7.2171823008760335E-6 to score=0.0025 #egs=41.0
Comparing variance: 0.22222988084545858 to score=0.0025 #egs=6.0
%   Creating a TRUE-branch leaf because good enough fit since score < 0.0025
%   Creating a FALSE-branch leaf because wgtedCountFalseBranchPos = 6,0 < 2.1 * minPosCov = 6,3

% Time for loop #6: 440 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #6, the best clause found is:
%      teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B), teamplaysagainstteam(C, A), teamplaysagainstteam(C, B).  [covers 41,0/47,0 pos, 0,0/0,0 neg]
% This clause covers 41 positive examples, of which 41 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 10 positive seeds: 44 84 276 295 308 348 357 366 391 436
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = teamplayssport(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  teamplayssport(_, _).  [covers 693,0/693,0 pos, 0,0/0,0 neg]
% Most-general root: teamplayssport(_, _).  [covers 693,0/693,0 pos, 0,0/0,0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #7, bodyLen=0] 'teamplayssport(_, _).  [covers 693,0/693,0 pos, 0,0/0,0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 4 variant children.  Sending 7 items to OPEN for evaluation and possible insertion.
% Have created 7 valid-on-seeds descendants and have picked up 3 bad extensions.
%     Score = -3,959539 (regressionFit = 3,959538, penalties=1.23E-6) for clause:  teamplayssport(A, _) :- athleteledsportsteam(_, A).  [covers 170,0/693,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -3,959539): teamplayssport(A, _) :- athleteledsportsteam(_, A).  [covers 170,0/693,0 pos, 0,0/0,0 neg]
%     Score = -3,948652 (regressionFit = 3,948651, penalties=1.23E-6) for clause:  teamplayssport(A, _) :- athleteplaysforteam(_, A).  [covers 307,0/693,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -3,948652): teamplayssport(A, _) :- athleteplaysforteam(_, A).  [covers 307,0/693,0 pos, 0,0/0,0 neg]
%     Score = -3,966593 (regressionFit = 3,966592, penalties=1.23E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(A, _).  [covers 147,0/693,0 pos, 0,0/0,0 neg]
%     Score = -3,962643 (regressionFit = 3,962641, penalties=1.23E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(_, A).  [covers 66,0/693,0 pos, 0,0/0,0 neg]
%     Score = -3,954132 (regressionFit = 3,954131, penalties=1.23E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, _).  [covers 419,0/693,0 pos, 0,0/0,0 neg]
%     Score = -3,951354 (regressionFit = 3,951353, penalties=1.23E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(_, A).  [covers 441,0/693,0 pos, 0,0/0,0 neg]
%     Score = -3,894645 (regressionFit = 3,894644, penalties=1.23E-6) for clause:  teamplayssport(A, _) :- teamplaysinleague(A, _).  [covers 527,0/693,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -3,894645): teamplayssport(A, _) :- teamplaysinleague(A, _).  [covers 527,0/693,0 pos, 0,0/0,0 neg]

% Consider expanding [#2 of outerLoop #7, bodyLen=1] 'teamplayssport(A, _) :- teamplaysinleague(A, _).  [covers 527,0/693,0 pos, 0,0/0,0 neg]' score=-3.8946453941610124
%  At # nodes expanded = 2, |OPEN| = 6.  Pruned 4 variant children.  Sending 8 items to OPEN for evaluation and possible insertion.
% Have created 8 valid-on-seeds descendants and have picked up 3 bad extensions.
%     Score = -3,959649 (regressionFit = 3,959646, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysinleague(A, _), athleteledsportsteam(_, A).  [covers 168,0/693,0 pos, 0,0/0,0 neg]
%     Score = -3,949744 (regressionFit = 3,949742, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysinleague(A, _), athleteplaysforteam(_, A).  [covers 296,0/693,0 pos, 0,0/0,0 neg]
%     Score = -3,932735 (regressionFit = 3,932733, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysinleague(A, B), athleteplaysinleague(_, B).  [covers 418,0/693,0 pos, 0,0/0,0 neg]
%     Score = -3,961625 (regressionFit = 3,961623, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysinleague(A, _), teamalsoknownas(A, _).  [covers 105,0/693,0 pos, 0,0/0,0 neg]
%     Score = -3,964286 (regressionFit = 3,964283, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysinleague(A, _), teamalsoknownas(_, A).  [covers 35,0/693,0 pos, 0,0/0,0 neg]
%     Score = -3,940673 (regressionFit = 3,940671, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysinleague(A, _), teamplaysagainstteam(A, _).  [covers 369,0/693,0 pos, 0,0/0,0 neg]
%     Score = -3,938633 (regressionFit = 3,938630, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysinleague(A, _), teamplaysagainstteam(_, A).  [covers 382,0/693,0 pos, 0,0/0,0 neg]
%     Score = -3,894646 (regressionFit = 3,894644, penalties=2.1400000000000003E-6) for clause:  teamplayssport(A, _) :- teamplaysinleague(A, B), teamplaysinleague(_, B).  [covers 527,0/693,0 pos, 0,0/0,0 neg]

% Consider expanding [#3 of outerLoop #7, bodyLen=1] 'teamplayssport(A, _) :- athleteplaysforteam(_, A).  [covers 307,0/693,0 pos, 0,0/0,0 neg]' score=-3.9486520148167403
%  At # nodes expanded = 3, |OPEN| = 5.  Pruned 8 variant children.  Sending 10 items to OPEN for evaluation and possible insertion.
% Have created 10 valid-on-seeds descendants and have picked up 3 bad extensions.
%     Score = -3,961470 (regressionFit = 3,961468, penalties=2.1300000000000004E-6) for clause:  teamplayssport(A, _) :- athleteplaysforteam(B, A), athleteledsportsteam(B, A).  [covers 132,0/693,0 pos, 0,0/0,0 neg]
%     Score = -3,959969 (regressionFit = 3,959967, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- athleteplaysforteam(B, A), athleteledsportsteam(B, _).  [covers 162,0/693,0 pos, 0,0/0,0 neg]
%     Score = -3,960791 (regressionFit = 3,960788, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- athleteplaysforteam(_, A), athleteledsportsteam(_, A).  [covers 146,0/693,0 pos, 0,0/0,0 neg]
%     Score = -3,948653 (regressionFit = 3,948651, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- athleteplaysforteam(_, A), athleteplaysforteam(_, A).  [covers 307,0/693,0 pos, 0,0/0,0 neg]
%     Score = -3,957421 (regressionFit = 3,957418, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- athleteplaysforteam(B, A), athleteplaysinleague(B, _).  [covers 208,0/693,0 pos, 0,0/0,0 neg]
%     Score = -3,957856 (regressionFit = 3,957854, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- athleteplaysforteam(B, A), athleteplayssport(B, _).  [covers 201,0/693,0 pos, 0,0/0,0 neg]
%     Score = -3,964396 (regressionFit = 3,964394, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- athleteplaysforteam(_, A), teamalsoknownas(A, _).  [covers 49,0/693,0 pos, 0,0/0,0 neg]
%     Score = -3,950236 (regressionFit = 3,950234, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- athleteplaysforteam(_, A), teamplaysagainstteam(A, _).  [covers 291,0/693,0 pos, 0,0/0,0 neg]
%     Score = -3,949566 (regressionFit = 3,949564, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- athleteplaysforteam(_, A), teamplaysagainstteam(_, A).  [covers 298,0/693,0 pos, 0,0/0,0 neg]
%     Score = -3,949744 (regressionFit = 3,949742, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- athleteplaysforteam(_, A), teamplaysinleague(A, _).  [covers 296,0/693,0 pos, 0,0/0,0 neg]

% Consider expanding [#4 of outerLoop #7, bodyLen=1] 'teamplayssport(A, _) :- teamplaysagainstteam(_, A).  [covers 441,0/693,0 pos, 0,0/0,0 neg]' score=-3.9513543074067674
%  At # nodes expanded = 4, |OPEN| = 4.  Pruned 14 variant children.  Sending 15 items to OPEN for evaluation and possible insertion.
% Have created 15 valid-on-seeds descendants and have picked up 7 bad extensions.
%     Score = -3,959714 (regressionFit = 3,959712, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(_, A), athleteledsportsteam(_, A).  [covers 167,0/693,0 pos, 0,0/0,0 neg]
%     Score = -3,942386 (regressionFit = 3,942384, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(B, A), athleteledsportsteam(_, B).  [covers 360,0/693,0 pos, 0,0/0,0 neg]
%     Score = -3,949566 (regressionFit = 3,949564, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(_, A), athleteplaysforteam(_, A).  [covers 298,0/693,0 pos, 0,0/0,0 neg]
%     Score = -3,953950 (regressionFit = 3,953948, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(B, A), athleteplaysforteam(_, B).  [covers 420,0/693,0 pos, 0,0/0,0 neg]
%     Score = -3,964541 (regressionFit = 3,964538, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(_, A), teamalsoknownas(A, _).  [covers 88,0/693,0 pos, 0,0/0,0 neg]
%     Score = -3,963043 (regressionFit = 3,963040, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(B, A), teamalsoknownas(B, _).  [covers 300,0/693,0 pos, 0,0/0,0 neg]
%     Score = -3,940611 (regressionFit = 3,940609, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(_, A), teamalsoknownas(_, A).  [covers 23,0/693,0 pos, 0,0/0,0 neg]
%     Score = -3,949682 (regressionFit = 3,949680, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(B, A), teamalsoknownas(_, B).  [covers 295,0/693,0 pos, 0,0/0,0 neg]
%     Score = -3,957154 (regressionFit = 3,957152, penalties=2.0300000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(B, A), teamplaysagainstteam(A, B).  [covers 391,0/693,0 pos, 0,0/0,0 neg]
%     Score = -3,954791 (regressionFit = 3,954789, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(_, A), teamplaysagainstteam(A, _).  [covers 413,0/693,0 pos, 0,0/0,0 neg]
%     Score = -3,951355 (regressionFit = 3,951353, penalties=2.1400000000000003E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(B, A), teamplaysagainstteam(B, _).  [covers 441,0/693,0 pos, 0,0/0,0 neg]
%     Score = -3,951355 (regressionFit = 3,951353, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(_, A), teamplaysagainstteam(_, A).  [covers 441,0/693,0 pos, 0,0/0,0 neg]
%     Score = -3,951355 (regressionFit = 3,951353, penalties=2.1400000000000003E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(B, A), teamplaysagainstteam(_, B).  [covers 441,0/693,0 pos, 0,0/0,0 neg]
%     Score = -3,938633 (regressionFit = 3,938630, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(_, A), teamplaysinleague(A, _).  [covers 382,0/693,0 pos, 0,0/0,0 neg]
%     Score = -3,952646 (regressionFit = 3,952644, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(B, A), teamplaysinleague(B, _).  [covers 431,0/693,0 pos, 0,0/0,0 neg]

% Consider expanding [#5 of outerLoop #7, bodyLen=1] 'teamplayssport(A, _) :- teamplaysagainstteam(A, _).  [covers 419,0/693,0 pos, 0,0/0,0 neg]' score=-3.954132085704759
%  At # nodes expanded = 5, |OPEN| = 3.  Pruned 14 variant children.  Sending 15 items to OPEN for evaluation and possible insertion.
% Have created 15 valid-on-seeds descendants and have picked up 7 bad extensions.
%     Score = -3,959768 (regressionFit = 3,959766, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, _), athleteledsportsteam(_, A).  [covers 166,0/693,0 pos, 0,0/0,0 neg]
%     Score = -3,945232 (regressionFit = 3,945230, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, B), athleteledsportsteam(_, B).  [covers 338,0/693,0 pos, 0,0/0,0 neg]
%     Score = -3,950236 (regressionFit = 3,950234, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, _), athleteplaysforteam(_, A).  [covers 291,0/693,0 pos, 0,0/0,0 neg]
%     Score = -3,955623 (regressionFit = 3,955621, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, B), athleteplaysforteam(_, B).  [covers 405,0/693,0 pos, 0,0/0,0 neg]
%     Score = -3,963115 (regressionFit = 3,963113, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, _), teamalsoknownas(A, _).  [covers 74,0/693,0 pos, 0,0/0,0 neg]
%     Score = -3,963553 (regressionFit = 3,963551, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, B), teamalsoknownas(B, _).  [covers 292,0/693,0 pos, 0,0/0,0 neg]
%     Score = -3,930818 (regressionFit = 3,930816, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, _), teamalsoknownas(_, A).  [covers 18,0/693,0 pos, 0,0/0,0 neg]
%     Score = -3,949073 (regressionFit = 3,949071, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, B), teamalsoknownas(_, B).  [covers 303,0/693,0 pos, 0,0/0,0 neg]
%     Score = -3,957154 (regressionFit = 3,957152, penalties=2.0300000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, B), teamplaysagainstteam(B, A).  [covers 391,0/693,0 pos, 0,0/0,0 neg]
%     Score = -3,954133 (regressionFit = 3,954131, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, _), teamplaysagainstteam(A, _).  [covers 419,0/693,0 pos, 0,0/0,0 neg]
%     Score = -3,954684 (regressionFit = 3,954682, penalties=2.1400000000000003E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, B), teamplaysagainstteam(B, _).  [covers 414,0/693,0 pos, 0,0/0,0 neg]
%     Score = -3,954791 (regressionFit = 3,954789, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, _), teamplaysagainstteam(_, A).  [covers 413,0/693,0 pos, 0,0/0,0 neg]
%     Score = -3,954133 (regressionFit = 3,954131, penalties=2.1400000000000003E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, B), teamplaysagainstteam(_, B).  [covers 419,0/693,0 pos, 0,0/0,0 neg]
%     Score = -3,940673 (regressionFit = 3,940671, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, _), teamplaysinleague(A, _).  [covers 369,0/693,0 pos, 0,0/0,0 neg]
%     Score = -3,955109 (regressionFit = 3,955107, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, B), teamplaysinleague(B, _).  [covers 410,0/693,0 pos, 0,0/0,0 neg]

% Consider expanding [#6 of outerLoop #7, bodyLen=1] 'teamplayssport(A, _) :- athleteledsportsteam(_, A).  [covers 170,0/693,0 pos, 0,0/0,0 neg]' score=-3.959538896181491
%  At # nodes expanded = 6, |OPEN| = 2.  Pruned 8 variant children.  Sending 8 items to OPEN for evaluation and possible insertion.
% Have created 8 valid-on-seeds descendants and have picked up 3 bad extensions.
%     Score = -3,961470 (regressionFit = 3,961468, penalties=2.1300000000000004E-6) for clause:  teamplayssport(A, _) :- athleteledsportsteam(B, A), athleteplaysforteam(B, A).  [covers 132,0/693,0 pos, 0,0/0,0 neg]
%     Score = -3,959810 (regressionFit = 3,959808, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- athleteledsportsteam(B, A), athleteplaysforteam(B, _).  [covers 165,0/693,0 pos, 0,0/0,0 neg]
%     Score = -3,960791 (regressionFit = 3,960788, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- athleteledsportsteam(_, A), athleteplaysforteam(_, A).  [covers 146,0/693,0 pos, 0,0/0,0 neg]
%     Score = -3,960691 (regressionFit = 3,960689, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- athleteledsportsteam(B, A), athleteplaysinleague(B, _).  [covers 150,0/693,0 pos, 0,0/0,0 neg]
%     Score = -3,960792 (regressionFit = 3,960790, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- athleteledsportsteam(B, A), athleteplayssport(B, _).  [covers 148,0/693,0 pos, 0,0/0,0 neg]
%     Score = -3,959768 (regressionFit = 3,959766, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- athleteledsportsteam(_, A), teamplaysagainstteam(A, _).  [covers 166,0/693,0 pos, 0,0/0,0 neg]
%     Score = -3,959714 (regressionFit = 3,959712, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- athleteledsportsteam(_, A), teamplaysagainstteam(_, A).  [covers 167,0/693,0 pos, 0,0/0,0 neg]
%     Score = -3,959649 (regressionFit = 3,959646, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- athleteledsportsteam(_, A), teamplaysinleague(A, _).  [covers 168,0/693,0 pos, 0,0/0,0 neg]

% Consider expanding [#7 of outerLoop #7, bodyLen=1] 'teamplayssport(A, _) :- teamalsoknownas(_, A).  [covers 66,0/693,0 pos, 0,0/0,0 neg]' score=-3.9626425181724794
%  At # nodes expanded = 7, |OPEN| = 1.  Pruned 14 variant children.  Sending 8 items to OPEN for evaluation and possible insertion.
% Have created 8 valid-on-seeds descendants and have picked up 11 bad extensions.
%     Score = -3,960004 (regressionFit = 3,960002, penalties=2.0300000000000005E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(A, B).  [covers 53,0/693,0 pos, 0,0/0,0 neg]
%     Score = -3,960261 (regressionFit = 3,960259, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(_, A), teamalsoknownas(A, _).  [covers 54,0/693,0 pos, 0,0/0,0 neg]
%     Score = -3,962643 (regressionFit = 3,962641, penalties=2.1400000000000003E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(B, _).  [covers 66,0/693,0 pos, 0,0/0,0 neg]
%     Score = -3,962496 (regressionFit = 3,962494, penalties=2.1400000000000003E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(_, B).  [covers 65,0/693,0 pos, 0,0/0,0 neg]
%     Score = -3,930818 (regressionFit = 3,930816, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(_, A), teamplaysagainstteam(A, _).  [covers 18,0/693,0 pos, 0,0/0,0 neg]
%     Score = -3,940611 (regressionFit = 3,940609, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(_, A), teamplaysagainstteam(_, A).  [covers 23,0/693,0 pos, 0,0/0,0 neg]
%     Score = -3,964286 (regressionFit = 3,964283, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(_, A), teamplaysinleague(A, _).  [covers 35,0/693,0 pos, 0,0/0,0 neg]
%     Score = -3,961978 (regressionFit = 3,961976, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamplaysinleague(B, _).  [covers 62,0/693,0 pos, 0,0/0,0 neg]

% Consider expanding [#8 of outerLoop #7, bodyLen=1] 'teamplayssport(A, _) :- teamalsoknownas(A, _).  [covers 147,0/693,0 pos, 0,0/0,0 neg]' score=-3.966593061372542
%  At # nodes expanded = 8, |OPEN| = 0.  Pruned 14 variant children.  Sending 10 items to OPEN for evaluation and possible insertion.
% Have created 10 valid-on-seeds descendants and have picked up 10 bad extensions.
%     Score = -3,964396 (regressionFit = 3,964394, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(A, _), athleteplaysforteam(_, A).  [covers 49,0/693,0 pos, 0,0/0,0 neg]
%     Score = -3,960004 (regressionFit = 3,960002, penalties=2.0300000000000005E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(A, B), teamalsoknownas(B, A).  [covers 53,0/693,0 pos, 0,0/0,0 neg]
%     Score = -3,966594 (regressionFit = 3,966592, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(A, _), teamalsoknownas(A, _).  [covers 147,0/693,0 pos, 0,0/0,0 neg]
%     Score = -3,966296 (regressionFit = 3,966294, penalties=2.1400000000000003E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(A, B), teamalsoknownas(B, _).  [covers 123,0/693,0 pos, 0,0/0,0 neg]
%     Score = -3,960261 (regressionFit = 3,960259, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(A, _), teamalsoknownas(_, A).  [covers 54,0/693,0 pos, 0,0/0,0 neg]
%     Score = -3,966594 (regressionFit = 3,966592, penalties=2.1400000000000003E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(A, B), teamalsoknownas(_, B).  [covers 147,0/693,0 pos, 0,0/0,0 neg]
%     Score = -3,963115 (regressionFit = 3,963113, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(A, _), teamplaysagainstteam(A, _).  [covers 74,0/693,0 pos, 0,0/0,0 neg]
%     Score = -3,964541 (regressionFit = 3,964538, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(A, _), teamplaysagainstteam(_, A).  [covers 88,0/693,0 pos, 0,0/0,0 neg]
%     Score = -3,961625 (regressionFit = 3,961623, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(A, _), teamplaysinleague(A, _).  [covers 105,0/693,0 pos, 0,0/0,0 neg]
%     Score = -3,966467 (regressionFit = 3,966465, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(A, B), teamplaysinleague(B, _).  [covers 133,0/693,0 pos, 0,0/0,0 neg]

% The best node found: teamplayssport(A, _) :- teamplaysinleague(A, _).  [covers 527,0/693,0 pos, 0,0/0,0 neg]

% The best node found: teamplayssport(A, _) :- teamplaysinleague(A, _).  [covers 527,0/693,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,006.
% Will extend: teamplayssport(A, _) :- teamplaysinleague(A, _).  [covers 527,0/693,0 pos, 0,0/0,0 neg]
% Path: 1;false,false
Comparing variance: 7.672769356105176E-7 to score=0.0025 #egs=527.0
Comparing variance: 0.023459275959132202 to score=0.0025 #egs=166.0
%   Creating a TRUE-branch leaf because good enough fit since score < 0.0025
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 166,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,023459)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 3 and with score = -0,023459) into the LAST position (#1) in the search queue.

% Time for loop #7: 318 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #7, the best clause found is:
%      teamplayssport(A, _) :- teamplaysinleague(A, _).  [covers 527,0/693,0 pos, 0,0/0,0 neg]
% This clause covers 527 positive examples, of which 527 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 10 positive seeds: 5 11 41 50 63 66 86 89 93 119
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = teamplayssport(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  teamplayssport(_, _).  [covers 166,0/166,0 pos, 0,0/0,0 neg]
% Most-general root: teamplayssport(_, _).  [covers 166,0/166,0 pos, 0,0/0,0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #8, bodyLen=0] 'teamplayssport(_, _).  [covers 166,0/166,0 pos, 0,0/0,0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 4 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 4 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  teamplayssport(A, _) :- athleteledsportsteam(_, A).  [covers 2,0/166,0 pos, 0,0/0,0 neg]
%     Score = -3,887614 (regressionFit = 3,887613, penalties=1.23E-6) for clause:  teamplayssport(A, _) :- athleteplaysforteam(_, A).  [covers 11,0/166,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -3,887614): teamplayssport(A, _) :- athleteplaysforteam(_, A).  [covers 11,0/166,0 pos, 0,0/0,0 neg]
%     Score = -3,894158 (regressionFit = 3,894157, penalties=1.23E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(A, _).  [covers 42,0/166,0 pos, 0,0/0,0 neg]
%     Score = -3,892724 (regressionFit = 3,892722, penalties=1.23E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, _).  [covers 50,0/166,0 pos, 0,0/0,0 neg]
%     Score = -3,889026 (regressionFit = 3,889025, penalties=1.23E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(_, A).  [covers 59,0/166,0 pos, 0,0/0,0 neg]

% Consider expanding [#2 of outerLoop #8, bodyLen=1] 'teamplayssport(A, _) :- athleteplaysforteam(_, A).  [covers 11,0/166,0 pos, 0,0/0,0 neg]' score=-3.88761383653467
%  At # nodes expanded = 2, |OPEN| = 4.  Pruned 8 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants and have picked up 5 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1300000000000004E-6) for clause:  teamplayssport(A, _) :- athleteplaysforteam(B, A), athleteledsportsteam(B, A).  [covers 2,0/166,0 pos, 0,0/0,0 neg]
%     Score = -3,887615 (regressionFit = 3,887613, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- athleteplaysforteam(_, A), teamplaysagainstteam(A, _).  [covers 11,0/166,0 pos, 0,0/0,0 neg]
%     Score = -3,887615 (regressionFit = 3,887613, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- athleteplaysforteam(_, A), teamplaysagainstteam(_, A).  [covers 11,0/166,0 pos, 0,0/0,0 neg]

% Consider expanding [#3 of outerLoop #8, bodyLen=1] 'teamplayssport(A, _) :- teamplaysagainstteam(_, A).  [covers 59,0/166,0 pos, 0,0/0,0 neg]' score=-3.8890263128301696
%  At # nodes expanded = 3, |OPEN| = 3.  Pruned 14 variant children.  Sending 13 items to OPEN for evaluation and possible insertion.
% Have created 13 valid-on-seeds descendants and have picked up 8 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(_, A), athleteledsportsteam(_, A).  [covers 2,0/166,0 pos, 0,0/0,0 neg]
%     Score = -3,876899 (regressionFit = 3,876897, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(B, A), athleteledsportsteam(_, B).  [covers 26,0/166,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -3,876899): teamplayssport(A, _) :- teamplaysagainstteam(B, A), athleteledsportsteam(_, B).  [covers 26,0/166,0 pos, 0,0/0,0 neg]
%     Score = -3,887615 (regressionFit = 3,887613, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(_, A), athleteplaysforteam(_, A).  [covers 11,0/166,0 pos, 0,0/0,0 neg]
%     Score = -3,892058 (regressionFit = 3,892055, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(B, A), athleteplaysforteam(_, B).  [covers 52,0/166,0 pos, 0,0/0,0 neg]
%     Score = -3,887029 (regressionFit = 3,887027, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(_, A), teamalsoknownas(A, _).  [covers 24,0/166,0 pos, 0,0/0,0 neg]
%     Score = -3,892343 (regressionFit = 3,892341, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(B, A), teamalsoknownas(B, _).  [covers 31,0/166,0 pos, 0,0/0,0 neg]
%     Score = -3,879975 (regressionFit = 3,879973, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(B, A), teamalsoknownas(_, B).  [covers 22,0/166,0 pos, 0,0/0,0 neg]
%     Score = -3,894190 (regressionFit = 3,894187, penalties=2.0300000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(B, A), teamplaysagainstteam(A, B).  [covers 42,0/166,0 pos, 0,0/0,0 neg]
%     Score = -3,892725 (regressionFit = 3,892722, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(_, A), teamplaysagainstteam(A, _).  [covers 50,0/166,0 pos, 0,0/0,0 neg]
%     Score = -3,889027 (regressionFit = 3,889025, penalties=2.1400000000000003E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(B, A), teamplaysagainstteam(B, _).  [covers 59,0/166,0 pos, 0,0/0,0 neg]
%     Score = -3,889027 (regressionFit = 3,889025, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(_, A), teamplaysagainstteam(_, A).  [covers 59,0/166,0 pos, 0,0/0,0 neg]
%     Score = -3,889027 (regressionFit = 3,889025, penalties=2.1400000000000003E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(B, A), teamplaysagainstteam(_, B).  [covers 59,0/166,0 pos, 0,0/0,0 neg]
%     Score = -3,892058 (regressionFit = 3,892055, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(B, A), teamplaysinleague(B, _).  [covers 52,0/166,0 pos, 0,0/0,0 neg]

% Consider expanding [#4 of outerLoop #8, bodyLen=1] 'teamplayssport(A, _) :- teamplaysagainstteam(A, _).  [covers 50,0/166,0 pos, 0,0/0,0 neg]' score=-3.8927235620125424
%  At # nodes expanded = 4, |OPEN| = 2.  Pruned 14 variant children.  Sending 12 items to OPEN for evaluation and possible insertion.
% Have created 12 valid-on-seeds descendants and have picked up 8 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, _), athleteledsportsteam(_, A).  [covers 2,0/166,0 pos, 0,0/0,0 neg]
%     Score = -3,882885 (regressionFit = 3,882882, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, B), athleteledsportsteam(_, B).  [covers 18,0/166,0 pos, 0,0/0,0 neg]
%     Score = -3,887615 (regressionFit = 3,887613, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, _), athleteplaysforteam(_, A).  [covers 11,0/166,0 pos, 0,0/0,0 neg]
%     Score = -3,894003 (regressionFit = 3,894001, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, B), athleteplaysforteam(_, B).  [covers 44,0/166,0 pos, 0,0/0,0 neg]
%     Score = -3,891818 (regressionFit = 3,891815, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, B), teamalsoknownas(B, _).  [covers 30,0/166,0 pos, 0,0/0,0 neg]
%     Score = -3,879222 (regressionFit = 3,879220, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, B), teamalsoknownas(_, B).  [covers 23,0/166,0 pos, 0,0/0,0 neg]
%     Score = -3,894190 (regressionFit = 3,894187, penalties=2.0300000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, B), teamplaysagainstteam(B, A).  [covers 42,0/166,0 pos, 0,0/0,0 neg]
%     Score = -3,892725 (regressionFit = 3,892722, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, _), teamplaysagainstteam(A, _).  [covers 50,0/166,0 pos, 0,0/0,0 neg]
%     Score = -3,892724 (regressionFit = 3,892722, penalties=2.1400000000000003E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, B), teamplaysagainstteam(B, _).  [covers 50,0/166,0 pos, 0,0/0,0 neg]
%     Score = -3,892725 (regressionFit = 3,892722, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, _), teamplaysagainstteam(_, A).  [covers 50,0/166,0 pos, 0,0/0,0 neg]
%     Score = -3,892724 (regressionFit = 3,892722, penalties=2.1400000000000003E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, B), teamplaysagainstteam(_, B).  [covers 50,0/166,0 pos, 0,0/0,0 neg]
%     Score = -3,894233 (regressionFit = 3,894231, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, B), teamplaysinleague(B, _).  [covers 41,0/166,0 pos, 0,0/0,0 neg]

% Consider expanding [#5 of outerLoop #8, bodyLen=1] 'teamplayssport(A, _) :- teamalsoknownas(A, _).  [covers 42,0/166,0 pos, 0,0/0,0 neg]' score=-3.8941583433152496
%  At # nodes expanded = 5, |OPEN| = 1.  Pruned 14 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants and have picked up 13 bad extensions.
%     Score = -3,893762 (regressionFit = 3,893760, penalties=2.1400000000000003E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(A, B), teamalsoknownas(B, _).  [covers 35,0/166,0 pos, 0,0/0,0 neg]
%     Score = -3,894159 (regressionFit = 3,894157, penalties=2.1400000000000003E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(A, B), teamalsoknownas(_, B).  [covers 42,0/166,0 pos, 0,0/0,0 neg]
%     Score = -3,887029 (regressionFit = 3,887027, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(A, _), teamplaysagainstteam(_, A).  [covers 24,0/166,0 pos, 0,0/0,0 neg]
%     Score = -3,893935 (regressionFit = 3,893933, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(A, B), teamplaysinleague(B, _).  [covers 36,0/166,0 pos, 0,0/0,0 neg]

% Consider expanding [#6 of outerLoop #8, bodyLen=1] 'teamplayssport(A, _) :- athleteledsportsteam(_, A).  [covers 2,0/166,0 pos, 0,0/0,0 neg]' score=-Infinity

% The best node found: teamplayssport(A, _) :- teamplaysagainstteam(B, A), athleteledsportsteam(_, B).  [covers 26,0/166,0 pos, 0,0/0,0 neg]

% The best node found: teamplayssport(A, _) :- teamplaysagainstteam(B, A), athleteledsportsteam(_, B).  [covers 26,0/166,0 pos, 0,0/0,0 neg]

% Expanding node at Level 3 with score = -0,023.
% Will extend: teamplayssport(A, _) :- teamplaysagainstteam(B, A), athleteledsportsteam(_, B).  [covers 26,0/166,0 pos, 0,0/0,0 neg]
% Path: 1;false,false,false
Comparing variance: 1.0675221390626506E-17 to score=0.0025 #egs=26.0
Comparing variance: 0.027692122817193836 to score=0.0025 #egs=140.0
%   Creating a TRUE-branch and FALSE-branch leaves because level = 3 >= 3

% Time for loop #8: 22 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #8, the best clause found is:
%      teamplayssport(A, _) :- teamplaysagainstteam(B, A), athleteledsportsteam(_, B).  [covers 26,0/166,0 pos, 0,0/0,0 neg]
% This clause covers 26 positive examples, of which 26 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree #2 @ 13:21:44 10/22/21.  [Using 33.253.944 memory cells.]  %%%%%


% FOR teamplayssport(A, B):
%   if ( athleteplayssport(C, B), athleteplaysinleague(C, D) )
%   then if ( teamplaysagainstteam(A, E), teamplaysinleague(E, D) )
%   | then return 0.7216366316079471;  // std dev = 0,132, 180,000 (wgt'ed) examples reached here.  /* #pos=180 */
%   | else if ( athleteplaysforteam(C, F), teamplaysagainstteam(A, F) )
%   | | then return 0.5626370969842887;  // std dev = 0,924, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else if ( teamalsoknownas(A, G), teamplaysinleague(A, H) )
%   | | | then return 0.7258949312700228;  // std dev = 0,074, 46,000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | | | else return 0.6874203105812916;  // std dev = 2,382, 166,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=160 */
%   else if ( teamalsoknownas(I, A), athleteplaysforteam(J, I) )
%   | then if ( teamplaysagainstteam(K, A), teamplaysagainstteam(K, I) )
%   | | then return -0.12784416856835637;  // std dev = 0,017, 41,000 (wgt'ed) examples reached here.  /* #neg=41 */
%   | | else return 0.2038548198777419;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | else if ( teamplaysinleague(A, L) )
%   | | then return -0.12606784115609349;  // std dev = 0,020, 527,000 (wgt'ed) examples reached here.  /* #neg=527 */
%   | | else if ( teamplaysagainstteam(M, A), athleteledsportsteam(N, M) )
%   | | | then return -0.125909584643944;  // std dev = 1,67e-08, 26,000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | | else return -0.09778664975878486;  // std dev = 1,969, 140,000 (wgt'ed) examples reached here.  /* #neg=136 #pos=4 */


% Clauses:

teamplayssport(A, B, 0.7216366316079471) :- 
     athleteplayssport(C, B), 
     athleteplaysinleague(C, D), 
     teamplaysagainstteam(A, E), 
     teamplaysinleague(E, D), 
     !. // Clause #1.

teamplayssport(A, B, 0.5626370969842887) :- 
     athleteplayssport(C, B), 
     athleteplaysinleague(C, D), 
     athleteplaysforteam(C, E), 
     teamplaysagainstteam(A, E), 
     !. // Clause #2.

teamplayssport(A, B, 0.7258949312700228) :- 
     athleteplayssport(C, B), 
     athleteplaysinleague(C, D), 
     teamalsoknownas(A, E), 
     teamplaysinleague(A, F), 
     !. // Clause #3.

teamplayssport(A, B, 0.6874203105812916) :- 
     athleteplayssport(C, B), 
     athleteplaysinleague(C, D), 
     !. // Clause #4.

teamplayssport(A, B, -0.12784416856835637) :- 
     teamalsoknownas(C, A), 
     athleteplaysforteam(D, C), 
     teamplaysagainstteam(E, A), 
     teamplaysagainstteam(E, C), 
     !. // Clause #5.

teamplayssport(A, B, 0.2038548198777419) :- 
     teamalsoknownas(C, A), 
     athleteplaysforteam(D, C), 
     !. // Clause #6.

teamplayssport(A, B, -0.12606784115609349) :- 
     teamplaysinleague(A, C), 
     !. // Clause #7.

teamplayssport(A, B, -0.125909584643944) :- 
     teamplaysagainstteam(C, A), 
     athleteledsportsteam(D, C), 
     !. // Clause #8.

teamplayssport(A, B, -0.09778664975878486) :- !. // Clause #9.


% The flattened versions of these clauses:

flattened_teamplayssport(a, b, 0.7216366316079471) :-  /* #pos=180 */ 
   athleteplayssport(uniqueVar14, b),
   athleteplaysinleague(uniqueVar14, uniqueVar15),
   teamplaysagainstteam(a, uniqueVar16),
   teamplaysinleague(uniqueVar16, uniqueVar15),
   !. // Flattened version of clause #1.

flattened_teamplayssport(a, b, 0.5626370969842887) :-  /* #neg=1 #pos=5 */ 
   athleteplayssport(uniqueVar17, b),
   athleteplaysinleague(uniqueVar17, underscore),
   athleteplaysforteam(uniqueVar17, uniqueVar18),
   teamplaysagainstteam(a, uniqueVar18),
   !. // Flattened version of clause #2.

flattened_teamplayssport(a, b, 0.7258949312700228) :-  /* #pos=46 */ 
   athleteplayssport(uniqueVar19, b),
   athleteplaysinleague(uniqueVar19, underscore),
   teamalsoknownas(a, underscore),
   teamplaysinleague(a, underscore),
   !. // Flattened version of clause #3.

flattened_teamplayssport(underscore, a, 0.6874203105812916) :-  /* #neg=6 #pos=160 */ 
   athleteplayssport(uniqueVar20, a),
   athleteplaysinleague(uniqueVar20, underscore),
   !. // Flattened version of clause #4.

flattened_teamplayssport(a, underscore, -0.12784416856835637) :-  /* #neg=41 */ 
   teamalsoknownas(uniqueVar21, a),
   athleteplaysforteam(underscore, uniqueVar21),
   teamplaysagainstteam(uniqueVar22, a),
   teamplaysagainstteam(uniqueVar22, uniqueVar21),
   !. // Flattened version of clause #5.

flattened_teamplayssport(a, underscore, 0.2038548198777419) :-  /* #neg=4 #pos=2 */ 
   teamalsoknownas(uniqueVar23, a),
   athleteplaysforteam(underscore, uniqueVar23),
   !. // Flattened version of clause #6.

flattened_teamplayssport(a, underscore, -0.12606784115609349) :-  /* #neg=527 */ 
   teamplaysinleague(a, underscore),
   !. // Flattened version of clause #7.

flattened_teamplayssport(a, underscore, -0.125909584643944) :-  /* #neg=26 */ 
   teamplaysagainstteam(uniqueVar24, a),
   athleteledsportsteam(underscore, uniqueVar24),
   !. // Flattened version of clause #8.

flattened_teamplayssport(underscore, underscore, -0.09778664975878486) :-  /* #neg=136 #pos=4 */ 
   !. // Flattened version of clause #9.


% The unique flattened literals:
%   athleteplayssport(uniqueVar19, b)
%   teamplaysagainstteam(a, uniqueVar18)
%   athleteplaysinleague(uniqueVar14, uniqueVar15)
%   teamplaysagainstteam(a, uniqueVar16)
%   teamalsoknownas(uniqueVar21, a)
%   teamplaysagainstteam(uniqueVar22, uniqueVar21)
%   teamplaysagainstteam(uniqueVar24, a)
%   athleteplaysforteam(uniqueVar17, uniqueVar18)
%   teamplaysagainstteam(uniqueVar22, a)
%   athleteplaysinleague(uniqueVar17, underscore)
%   athleteplayssport(uniqueVar20, a)
%   athleteplaysinleague(uniqueVar19, underscore)
%   teamalsoknownas(a, underscore)
%   athleteplaysforteam(underscore, uniqueVar21)
%   athleteplaysforteam(underscore, uniqueVar23)
%   athleteplayssport(uniqueVar14, b)
%   athleteplayssport(uniqueVar17, b)
%   teamalsoknownas(uniqueVar23, a)
%   athleteledsportsteam(underscore, uniqueVar24)
%   teamplaysinleague(a, underscore)
%   athleteplaysinleague(uniqueVar20, underscore)
%   teamplaysinleague(uniqueVar16, uniqueVar15)

% Saving model in: train/models/bRDNs/teamplayssport.model.ckpt
% Time taken to learn 2 trees is 47,697 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.023459275959132206
Set score:0.0025
% Only 1138 out of 1138 converged.
% Kept 397 of the 397 positive examples.
% Kept 764 of the 159.991 negative examples.
% Dataset size: 1.161
Computing probabilities
prob time:696 milliseconds
No hidden examples for : teamplayssport
Time to build dataset: 772 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.10693772764814759
Set score:0.0025
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Have these 10 positive seeds: 31 141 300 351 441 773 875 921 937 1025
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = teamplayssport(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  teamplayssport(_, _).  [covers 1.161,0/1.161,0 pos, 0,0/0,0 neg]
% Most-general root: teamplayssport(_, _).  [covers 1.161,0/1.161,0 pos, 0,0/0,0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #1, bodyLen=0] 'teamplayssport(_, _).  [covers 1.161,0/1.161,0 pos, 0,0/0,0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 4 variant children.  Sending 8 items to OPEN for evaluation and possible insertion.
% Have created 8 valid-on-seeds descendants and have picked up 2 bad extensions.
%     Score = -124,085915 (regressionFit = 124,085913, penalties=1.23E-6) for clause:  teamplayssport(A, _) :- athleteledsportsteam(_, A).  [covers 328,0/1.161,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -124,085915): teamplayssport(A, _) :- athleteledsportsteam(_, A).  [covers 328,0/1.161,0 pos, 0,0/0,0 neg]
%     Score = -124,136417 (regressionFit = 124,136416, penalties=1.23E-6) for clause:  teamplayssport(A, _) :- athleteplaysforteam(_, A).  [covers 526,0/1.161,0 pos, 0,0/0,0 neg]
%     Score = -14,761118 (regressionFit = 14,761117, penalties=1.23E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(_, A).  [covers 409,0/1.161,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -14,761118): teamplayssport(_, A) :- athleteplayssport(_, A).  [covers 409,0/1.161,0 pos, 0,0/0,0 neg]
%     Score = -124,072285 (regressionFit = 124,072284, penalties=1.23E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(A, _).  [covers 254,0/1.161,0 pos, 0,0/0,0 neg]
%     Score = -124,144358 (regressionFit = 124,144357, penalties=1.23E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(_, A).  [covers 207,0/1.161,0 pos, 0,0/0,0 neg]
%     Score = -124,145427 (regressionFit = 124,145426, penalties=1.23E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, _).  [covers 658,0/1.161,0 pos, 0,0/0,0 neg]
%     Score = -124,142367 (regressionFit = 124,142365, penalties=1.23E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(_, A).  [covers 693,0/1.161,0 pos, 0,0/0,0 neg]
%     Score = -124,054461 (regressionFit = 124,054460, penalties=1.23E-6) for clause:  teamplayssport(A, _) :- teamplaysinleague(A, _).  [covers 905,0/1.161,0 pos, 0,0/0,0 neg]

% Consider expanding [#2 of outerLoop #1, bodyLen=1] 'teamplayssport(_, A) :- athleteplayssport(_, A).  [covers 409,0/1.161,0 pos, 0,0/0,0 neg]' score=-14.761117809573866
%  At # nodes expanded = 2, |OPEN| = 7.  Pruned 8 variant children.  Sending 9 items to OPEN for evaluation and possible insertion.
% Have created 9 valid-on-seeds descendants and have picked up 4 bad extensions.
%     Score = -20,956050 (regressionFit = 20,956048, penalties=2.24E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteledsportsteam(B, _).  [covers 381,0/1.161,0 pos, 0,0/0,0 neg]
%     Score = -21,052551 (regressionFit = 21,052549, penalties=2.24E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysforteam(B, _).  [covers 387,0/1.161,0 pos, 0,0/0,0 neg]
%     Score = -89,341040 (regressionFit = 89,341038, penalties=2.24E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), athleteplaysforteam(_, A).  [covers 189,0/1.161,0 pos, 0,0/0,0 neg]
%     Score = -15,182387 (regressionFit = 15,182385, penalties=2.24E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _).  [covers 401,0/1.161,0 pos, 0,0/0,0 neg]
%     Score = -14,761119 (regressionFit = 14,761117, penalties=2.24E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(_, A), athleteplayssport(_, A).  [covers 409,0/1.161,0 pos, 0,0/0,0 neg]
%     Score = -112,359603 (regressionFit = 112,359600, penalties=2.24E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(_, A).  [covers 78,0/1.161,0 pos, 0,0/0,0 neg]
%     Score = -76,599595 (regressionFit = 76,599593, penalties=2.24E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(A, _).  [covers 233,0/1.161,0 pos, 0,0/0,0 neg]
%     Score = -71,383926 (regressionFit = 71,383924, penalties=2.24E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(_, A).  [covers 250,0/1.161,0 pos, 0,0/0,0 neg]
%     Score = -51,151773 (regressionFit = 51,151771, penalties=2.24E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _).  [covers 317,0/1.161,0 pos, 0,0/0,0 neg]

% Consider expanding [#3 of outerLoop #1, bodyLen=1] 'teamplayssport(A, _) :- teamplaysinleague(A, _).  [covers 905,0/1.161,0 pos, 0,0/0,0 neg]' score=-124.05446084206416
%  At # nodes expanded = 3, |OPEN| = 6.  Pruned 4 variant children.  Sending 7 items to OPEN for evaluation and possible insertion.
% Have created 7 valid-on-seeds descendants and have picked up 2 bad extensions.
%     Score = -124,085591 (regressionFit = 124,085588, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysinleague(A, _), athleteledsportsteam(_, A).  [covers 325,0/1.161,0 pos, 0,0/0,0 neg]
%     Score = -124,129580 (regressionFit = 124,129577, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysinleague(A, _), athleteplaysforteam(_, A).  [covers 501,0/1.161,0 pos, 0,0/0,0 neg]
%     Score = -124,144908 (regressionFit = 124,144906, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysinleague(A, B), athleteplaysinleague(_, B).  [covers 667,0/1.161,0 pos, 0,0/0,0 neg]
%     Score = -51,151773 (regressionFit = 51,151771, penalties=2.24E-6) for clause:  teamplayssport(A, B) :- teamplaysinleague(A, _), athleteplayssport(_, B).  [covers 317,0/1.161,0 pos, 0,0/0,0 neg]
%     Score = -124,128630 (regressionFit = 124,128627, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysinleague(A, _), teamplaysagainstteam(A, _).  [covers 596,0/1.161,0 pos, 0,0/0,0 neg]
%     Score = -124,153609 (regressionFit = 124,153607, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysinleague(A, _), teamplaysagainstteam(_, A).  [covers 616,0/1.161,0 pos, 0,0/0,0 neg]
%     Score = -124,054462 (regressionFit = 124,054460, penalties=2.1400000000000003E-6) for clause:  teamplayssport(A, _) :- teamplaysinleague(A, B), teamplaysinleague(_, B).  [covers 905,0/1.161,0 pos, 0,0/0,0 neg]

% Consider expanding [#4 of outerLoop #1, bodyLen=1] 'teamplayssport(A, _) :- teamalsoknownas(A, _).  [covers 254,0/1.161,0 pos, 0,0/0,0 neg]' score=-124.07228484666726
%  At # nodes expanded = 4, |OPEN| = 5.  Pruned 14 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 12 bad extensions.
%     Score = -124,032737 (regressionFit = 124,032735, penalties=2.0300000000000005E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(A, B), teamalsoknownas(B, A).  [covers 114,0/1.161,0 pos, 0,0/0,0 neg]
%     Score = -123,980201 (regressionFit = 123,980199, penalties=2.1400000000000003E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(A, B), teamalsoknownas(B, _).  [covers 211,0/1.161,0 pos, 0,0/0,0 neg]
%     Score = -124,072286 (regressionFit = 124,072284, penalties=2.1400000000000003E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(A, B), teamalsoknownas(_, B).  [covers 254,0/1.161,0 pos, 0,0/0,0 neg]
%     Score = -124,106259 (regressionFit = 124,106257, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(A, _), teamplaysagainstteam(_, A).  [covers 140,0/1.161,0 pos, 0,0/0,0 neg]
%     Score = -124,025357 (regressionFit = 124,025355, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(A, B), teamplaysinleague(B, _).  [covers 231,0/1.161,0 pos, 0,0/0,0 neg]

% Consider expanding [#5 of outerLoop #1, bodyLen=1] 'teamplayssport(A, _) :- athleteledsportsteam(_, A).  [covers 328,0/1.161,0 pos, 0,0/0,0 neg]' score=-124.08591452994814
%  At # nodes expanded = 5, |OPEN| = 4.  Pruned 8 variant children.  Sending 9 items to OPEN for evaluation and possible insertion.
% Have created 9 valid-on-seeds descendants and have picked up 3 bad extensions.
%     Score = -124,085916 (regressionFit = 124,085913, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- athleteledsportsteam(_, A), athleteledsportsteam(_, A).  [covers 328,0/1.161,0 pos, 0,0/0,0 neg]
%     Score = -124,130825 (regressionFit = 124,130823, penalties=2.1300000000000004E-6) for clause:  teamplayssport(A, _) :- athleteledsportsteam(B, A), athleteplaysforteam(B, A).  [covers 256,0/1.161,0 pos, 0,0/0,0 neg]
%     Score = -124,087199 (regressionFit = 124,087197, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- athleteledsportsteam(B, A), athleteplaysforteam(B, _).  [covers 316,0/1.161,0 pos, 0,0/0,0 neg]
%     Score = -124,103608 (regressionFit = 124,103606, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- athleteledsportsteam(_, A), athleteplaysforteam(_, A).  [covers 293,0/1.161,0 pos, 0,0/0,0 neg]
%     Score = -124,114392 (regressionFit = 124,114390, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- athleteledsportsteam(B, A), athleteplaysinleague(B, _).  [covers 279,0/1.161,0 pos, 0,0/0,0 neg]
%     Score = -124,093341 (regressionFit = 124,093339, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- athleteledsportsteam(B, A), athleteplayssport(B, _).  [covers 272,0/1.161,0 pos, 0,0/0,0 neg]
%     Score = -124,119769 (regressionFit = 124,119766, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- athleteledsportsteam(_, A), teamplaysagainstteam(A, _).  [covers 314,0/1.161,0 pos, 0,0/0,0 neg]
%     Score = -124,113866 (regressionFit = 124,113863, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- athleteledsportsteam(_, A), teamplaysagainstteam(_, A).  [covers 318,0/1.161,0 pos, 0,0/0,0 neg]
%     Score = -124,085591 (regressionFit = 124,085588, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- athleteledsportsteam(_, A), teamplaysinleague(A, _).  [covers 325,0/1.161,0 pos, 0,0/0,0 neg]

% Consider expanding [#6 of outerLoop #1, bodyLen=1] 'teamplayssport(A, _) :- athleteplaysforteam(_, A).  [covers 526,0/1.161,0 pos, 0,0/0,0 neg]' score=-124.13641729586051
%  At # nodes expanded = 6, |OPEN| = 3.  Pruned 8 variant children.  Sending 11 items to OPEN for evaluation and possible insertion.
% Have created 11 valid-on-seeds descendants and have picked up 3 bad extensions.
%     Score = -124,130825 (regressionFit = 124,130823, penalties=2.1300000000000004E-6) for clause:  teamplayssport(A, _) :- athleteplaysforteam(B, A), athleteledsportsteam(B, A).  [covers 256,0/1.161,0 pos, 0,0/0,0 neg]
%     Score = -124,127688 (regressionFit = 124,127686, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- athleteplaysforteam(B, A), athleteledsportsteam(B, _).  [covers 307,0/1.161,0 pos, 0,0/0,0 neg]
%     Score = -124,103608 (regressionFit = 124,103606, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- athleteplaysforteam(_, A), athleteledsportsteam(_, A).  [covers 293,0/1.161,0 pos, 0,0/0,0 neg]
%     Score = -124,136418 (regressionFit = 124,136416, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- athleteplaysforteam(_, A), athleteplaysforteam(_, A).  [covers 526,0/1.161,0 pos, 0,0/0,0 neg]
%     Score = -124,152346 (regressionFit = 124,152344, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- athleteplaysforteam(B, A), athleteplaysinleague(B, _).  [covers 356,0/1.161,0 pos, 0,0/0,0 neg]
%     Score = -124,151156 (regressionFit = 124,151153, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- athleteplaysforteam(B, A), athleteplayssport(B, _).  [covers 344,0/1.161,0 pos, 0,0/0,0 neg]
%     Score = -89,341040 (regressionFit = 89,341038, penalties=2.24E-6) for clause:  teamplayssport(A, B) :- athleteplaysforteam(_, A), athleteplayssport(_, B).  [covers 189,0/1.161,0 pos, 0,0/0,0 neg]
%     Score = -124,136868 (regressionFit = 124,136865, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- athleteplaysforteam(_, A), teamalsoknownas(_, A).  [covers 96,0/1.161,0 pos, 0,0/0,0 neg]
%     Score = -124,134844 (regressionFit = 124,134842, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- athleteplaysforteam(_, A), teamplaysagainstteam(A, _).  [covers 497,0/1.161,0 pos, 0,0/0,0 neg]
%     Score = -124,152165 (regressionFit = 124,152163, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- athleteplaysforteam(_, A), teamplaysagainstteam(_, A).  [covers 508,0/1.161,0 pos, 0,0/0,0 neg]
%     Score = -124,129580 (regressionFit = 124,129577, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- athleteplaysforteam(_, A), teamplaysinleague(A, _).  [covers 501,0/1.161,0 pos, 0,0/0,0 neg]

% Consider expanding [#7 of outerLoop #1, bodyLen=1] 'teamplayssport(A, _) :- teamplaysagainstteam(_, A).  [covers 693,0/1.161,0 pos, 0,0/0,0 neg]' score=-124.14236672454315
%  At # nodes expanded = 7, |OPEN| = 2.  Pruned 14 variant children.  Sending 17 items to OPEN for evaluation and possible insertion.
% Have created 17 valid-on-seeds descendants and have picked up 5 bad extensions.
%     Score = -124,113866 (regressionFit = 124,113863, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(_, A), athleteledsportsteam(_, A).  [covers 318,0/1.161,0 pos, 0,0/0,0 neg]
%     Score = -124,152593 (regressionFit = 124,152590, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(B, A), athleteledsportsteam(_, B).  [covers 581,0/1.161,0 pos, 0,0/0,0 neg]
%     Score = -124,152165 (regressionFit = 124,152163, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(_, A), athleteplaysforteam(_, A).  [covers 508,0/1.161,0 pos, 0,0/0,0 neg]
%     Score = -124,135396 (regressionFit = 124,135394, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(B, A), athleteplaysforteam(_, B).  [covers 664,0/1.161,0 pos, 0,0/0,0 neg]
%     Score = -71,383926 (regressionFit = 71,383924, penalties=2.24E-6) for clause:  teamplayssport(A, B) :- teamplaysagainstteam(_, A), athleteplayssport(_, B).  [covers 250,0/1.161,0 pos, 0,0/0,0 neg]
%     Score = -124,117721 (regressionFit = 124,117719, penalties=2.1300000000000004E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(B, A), teamalsoknownas(B, A).  [covers 70,0/1.161,0 pos, 0,0/0,0 neg]
%     Score = -124,106259 (regressionFit = 124,106257, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(_, A), teamalsoknownas(A, _).  [covers 140,0/1.161,0 pos, 0,0/0,0 neg]
%     Score = -124,147094 (regressionFit = 124,147092, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(B, A), teamalsoknownas(B, _).  [covers 511,0/1.161,0 pos, 0,0/0,0 neg]
%     Score = -124,140694 (regressionFit = 124,140692, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(_, A), teamalsoknownas(_, A).  [covers 108,0/1.161,0 pos, 0,0/0,0 neg]
%     Score = -124,150401 (regressionFit = 124,150399, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(B, A), teamalsoknownas(_, B).  [covers 499,0/1.161,0 pos, 0,0/0,0 neg]
%     Score = -124,154378 (regressionFit = 124,154376, penalties=2.0300000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(B, A), teamplaysagainstteam(A, B).  [covers 611,0/1.161,0 pos, 0,0/0,0 neg]
%     Score = -124,154176 (regressionFit = 124,154174, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(_, A), teamplaysagainstteam(A, _).  [covers 638,0/1.161,0 pos, 0,0/0,0 neg]
%     Score = -124,142368 (regressionFit = 124,142365, penalties=2.1400000000000003E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(B, A), teamplaysagainstteam(B, _).  [covers 693,0/1.161,0 pos, 0,0/0,0 neg]
%     Score = -124,142368 (regressionFit = 124,142365, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(_, A), teamplaysagainstteam(_, A).  [covers 693,0/1.161,0 pos, 0,0/0,0 neg]
%     Score = -124,142368 (regressionFit = 124,142365, penalties=2.1400000000000003E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(B, A), teamplaysagainstteam(_, B).  [covers 693,0/1.161,0 pos, 0,0/0,0 neg]
%     Score = -124,153609 (regressionFit = 124,153607, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(_, A), teamplaysinleague(A, _).  [covers 616,0/1.161,0 pos, 0,0/0,0 neg]
%     Score = -124,111414 (regressionFit = 124,111412, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(B, A), teamplaysinleague(B, _).  [covers 671,0/1.161,0 pos, 0,0/0,0 neg]

% Consider expanding [#8 of outerLoop #1, bodyLen=1] 'teamplayssport(A, _) :- teamalsoknownas(_, A).  [covers 207,0/1.161,0 pos, 0,0/0,0 neg]' score=-124.1443579059167
%  At # nodes expanded = 8, |OPEN| = 1.  Pruned 14 variant children.  Sending 12 items to OPEN for evaluation and possible insertion.
% Have created 12 valid-on-seeds descendants and have picked up 8 bad extensions.
%     Score = -124,136868 (regressionFit = 124,136865, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(_, A), athleteplaysforteam(_, A).  [covers 96,0/1.161,0 pos, 0,0/0,0 neg]
%     Score = -112,359603 (regressionFit = 112,359600, penalties=2.24E-6) for clause:  teamplayssport(A, B) :- teamalsoknownas(_, A), athleteplayssport(_, B).  [covers 78,0/1.161,0 pos, 0,0/0,0 neg]
%     Score = -124,032737 (regressionFit = 124,032735, penalties=2.0300000000000005E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(A, B).  [covers 114,0/1.161,0 pos, 0,0/0,0 neg]
%     Score = -124,144359 (regressionFit = 124,144357, penalties=2.1400000000000003E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(B, _).  [covers 207,0/1.161,0 pos, 0,0/0,0 neg]
%     Score = -124,064501 (regressionFit = 124,064499, penalties=2.1400000000000003E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(_, B).  [covers 165,0/1.161,0 pos, 0,0/0,0 neg]
%     Score = -124,122128 (regressionFit = 124,122126, penalties=2.1300000000000004E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamplaysagainstteam(A, B).  [covers 71,0/1.161,0 pos, 0,0/0,0 neg]
%     Score = -124,117721 (regressionFit = 124,117719, penalties=2.1300000000000004E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamplaysagainstteam(B, A).  [covers 70,0/1.161,0 pos, 0,0/0,0 neg]
%     Score = -124,143107 (regressionFit = 124,143104, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(_, A), teamplaysagainstteam(A, _).  [covers 97,0/1.161,0 pos, 0,0/0,0 neg]
%     Score = -124,154148 (regressionFit = 124,154146, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamplaysagainstteam(B, _).  [covers 87,0/1.161,0 pos, 0,0/0,0 neg]
%     Score = -124,140694 (regressionFit = 124,140692, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(_, A), teamplaysagainstteam(_, A).  [covers 108,0/1.161,0 pos, 0,0/0,0 neg]
%     Score = -124,154148 (regressionFit = 124,154146, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamplaysagainstteam(_, B).  [covers 87,0/1.161,0 pos, 0,0/0,0 neg]
%     Score = -124,139043 (regressionFit = 124,139040, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamplaysinleague(B, _).  [covers 197,0/1.161,0 pos, 0,0/0,0 neg]

% Consider expanding [#9 of outerLoop #1, bodyLen=1] 'teamplayssport(A, _) :- teamplaysagainstteam(A, _).  [covers 658,0/1.161,0 pos, 0,0/0,0 neg]' score=-124.14542712812425
%  At # nodes expanded = 9, |OPEN| = 0.  Pruned 14 variant children.  Sending 16 items to OPEN for evaluation and possible insertion.
% Have created 16 valid-on-seeds descendants and have picked up 5 bad extensions.
%     Score = -124,119769 (regressionFit = 124,119766, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, _), athleteledsportsteam(_, A).  [covers 314,0/1.161,0 pos, 0,0/0,0 neg]
%     Score = -124,149441 (regressionFit = 124,149439, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, B), athleteledsportsteam(_, B).  [covers 540,0/1.161,0 pos, 0,0/0,0 neg]
%     Score = -124,134844 (regressionFit = 124,134842, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, _), athleteplaysforteam(_, A).  [covers 497,0/1.161,0 pos, 0,0/0,0 neg]
%     Score = -124,150426 (regressionFit = 124,150424, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, B), athleteplaysforteam(_, B).  [covers 632,0/1.161,0 pos, 0,0/0,0 neg]
%     Score = -76,599595 (regressionFit = 76,599593, penalties=2.24E-6) for clause:  teamplayssport(A, B) :- teamplaysagainstteam(A, _), athleteplayssport(_, B).  [covers 233,0/1.161,0 pos, 0,0/0,0 neg]
%     Score = -124,122128 (regressionFit = 124,122126, penalties=2.1300000000000004E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, B), teamalsoknownas(B, A).  [covers 71,0/1.161,0 pos, 0,0/0,0 neg]
%     Score = -124,144463 (regressionFit = 124,144460, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, B), teamalsoknownas(B, _).  [covers 486,0/1.161,0 pos, 0,0/0,0 neg]
%     Score = -124,143107 (regressionFit = 124,143104, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, _), teamalsoknownas(_, A).  [covers 97,0/1.161,0 pos, 0,0/0,0 neg]
%     Score = -124,112794 (regressionFit = 124,112791, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, B), teamalsoknownas(_, B).  [covers 501,0/1.161,0 pos, 0,0/0,0 neg]
%     Score = -124,154378 (regressionFit = 124,154376, penalties=2.0300000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, B), teamplaysagainstteam(B, A).  [covers 611,0/1.161,0 pos, 0,0/0,0 neg]
%     Score = -124,145428 (regressionFit = 124,145426, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, _), teamplaysagainstteam(A, _).  [covers 658,0/1.161,0 pos, 0,0/0,0 neg]
%     Score = -124,153147 (regressionFit = 124,153145, penalties=2.1400000000000003E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, B), teamplaysagainstteam(B, _).  [covers 648,0/1.161,0 pos, 0,0/0,0 neg]
%     Score = -124,154176 (regressionFit = 124,154174, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, _), teamplaysagainstteam(_, A).  [covers 638,0/1.161,0 pos, 0,0/0,0 neg]
%     Score = -124,145428 (regressionFit = 124,145426, penalties=2.1400000000000003E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, B), teamplaysagainstteam(_, B).  [covers 658,0/1.161,0 pos, 0,0/0,0 neg]
%     Score = -124,128630 (regressionFit = 124,128627, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, _), teamplaysinleague(A, _).  [covers 596,0/1.161,0 pos, 0,0/0,0 neg]
%     Score = -124,151840 (regressionFit = 124,151838, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, B), teamplaysinleague(B, _).  [covers 640,0/1.161,0 pos, 0,0/0,0 neg]

% The best node found: teamplayssport(_, A) :- athleteplayssport(_, A).  [covers 409,0/1.161,0 pos, 0,0/0,0 neg]

% The best node found: teamplayssport(_, A) :- athleteplayssport(_, A).  [covers 409,0/1.161,0 pos, 0,0/0,0 neg]

% Expanding node at Level 0 with score = 1,797693e+308.
% Will extend: teamplayssport(_, A) :- athleteplayssport(_, A).  [covers 409,0/1.161,0 pos, 0,0/0,0 neg]
% Path: 2;
Comparing variance: 0.029031656954580178 to score=0.0025 #egs=409.0
Comparing variance: 0.0038393203259981016 to score=0.0025 #egs=752.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 409,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,029032)
%         ILP node to extend: teamplayssport(_, A) :- athleteplayssport(_, A).  [covers 409,0/1.161,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 1 and with score = -0,029032) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 752,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,003839)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 1 and with score = -0,003839) into the LAST position (#2) in the search queue.

% Time for loop #1: 1,352 seconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      teamplayssport(_, A) :- athleteplayssport(_, A).  [covers 409,0/1.161,0 pos, 0,0/0,0 neg]
% This clause covers 409 positive examples, of which 409 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'teamplayssport(_, A) :- athleteplayssport(_, A).  [covers 409,0/409,0 pos, 0,0/0,0 neg]'
%     Score = -14,761118 (regressionFit = 14,761117, penalties=1.23E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(_, A).  [covers 409,0/409,0 pos, 0,0/0,0 neg]

% Have these 7 positive seeds: 64 120 161 188 219 259 405
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Consider expanding [#1 of outerLoop #2, bodyLen=1] 'teamplayssport(_, A) :- athleteplayssport(_, A).  [covers 409,0/409,0 pos, 0,0/0,0 neg]' score=-14.761117809573866
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 8 variant children.  Sending 11 items to OPEN for evaluation and possible insertion.
% Have created 11 valid-on-seeds descendants and have picked up 7 bad extensions.
%     Score = -11,830305 (regressionFit = 11,830303, penalties=2.0300000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, A).  [covers 74,0/409,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -11,830305): teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, A).  [covers 74,0/409,0 pos, 0,0/0,0 neg]
%     Score = -11,276491 (regressionFit = 11,276489, penalties=2.24E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteledsportsteam(B, _).  [covers 381,0/409,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -11,276491): teamplayssport(_, A) :- athleteplayssport(B, A), athleteledsportsteam(B, _).  [covers 381,0/409,0 pos, 0,0/0,0 neg]
%     Score = -11,827129 (regressionFit = 11,827127, penalties=2.24E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), athleteledsportsteam(_, A).  [covers 112,0/409,0 pos, 0,0/0,0 neg]
%     Score = -11,678423 (regressionFit = 11,678420, penalties=2.24E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysforteam(B, _).  [covers 387,0/409,0 pos, 0,0/0,0 neg]
%     Score = -11,679512 (regressionFit = 11,679510, penalties=2.24E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), athleteplaysforteam(_, A).  [covers 189,0/409,0 pos, 0,0/0,0 neg]
%     Score = -11,243166 (regressionFit = 11,243164, penalties=2.24E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _).  [covers 401,0/409,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(_, A), athleteplayssport(_, A).  [covers 409,0/409,0 pos, 0,0/0,0 neg]
%     Score = -11,861821 (regressionFit = 11,861818, penalties=2.24E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(A, _).  [covers 94,0/409,0 pos, 0,0/0,0 neg]
%     Score = -11,791771 (regressionFit = 11,791768, penalties=2.24E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(A, _).  [covers 233,0/409,0 pos, 0,0/0,0 neg]
%     Score = -11,818962 (regressionFit = 11,818960, penalties=2.24E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(_, A).  [covers 250,0/409,0 pos, 0,0/0,0 neg]
%     Score = -11,803674 (regressionFit = 11,803672, penalties=2.24E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _).  [covers 317,0/409,0 pos, 0,0/0,0 neg]

% Consider expanding [#2 of outerLoop #2, bodyLen=2] 'teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _).  [covers 401,0/409,0 pos, 0,0/0,0 neg]' score=-11.243166138068807
%  At # nodes expanded = 2, |OPEN| = 10.  Pruned 10 variant children.  Sending 13 items to OPEN for evaluation and possible insertion.
% Have created 13 valid-on-seeds descendants and have picked up 3 bad extensions.
%     Score = -11,831723 (regressionFit = 11,831720, penalties=3.1400000000000004E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, A).  [covers 72,0/409,0 pos, 0,0/0,0 neg]
%     Score = -11,276492 (regressionFit = 11,276489, penalties=3.35E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteledsportsteam(B, _).  [covers 381,0/409,0 pos, 0,0/0,0 neg]
%     Score = -11,853055 (regressionFit = 11,853052, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(_, A).  [covers 111,0/409,0 pos, 0,0/0,0 neg]
%     Score = -11,276492 (regressionFit = 11,276489, penalties=3.35E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteplaysforteam(B, _).  [covers 381,0/409,0 pos, 0,0/0,0 neg]
%     Score = -11,840125 (regressionFit = 11,840122, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteplaysforteam(_, A).  [covers 185,0/409,0 pos, 0,0/0,0 neg]
%     Score = -11,243167 (regressionFit = 11,243164, penalties=3.1500000000000008E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, C), athleteplaysinleague(_, C).  [covers 401,0/409,0 pos, 0,0/0,0 neg]
%     Score = -11,243167 (regressionFit = 11,243164, penalties=3.2500000000000006E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteplayssport(_, A).  [covers 401,0/409,0 pos, 0,0/0,0 neg]
%     Score = -11,821634 (regressionFit = 11,821631, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(A, _).  [covers 91,0/409,0 pos, 0,0/0,0 neg]
%     Score = -11,873196 (regressionFit = 11,873193, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(A, _).  [covers 229,0/409,0 pos, 0,0/0,0 neg]
%     Score = -11,873134 (regressionFit = 11,873131, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(_, A).  [covers 246,0/409,0 pos, 0,0/0,0 neg]
%     Score = -11,816031 (regressionFit = 11,816028, penalties=3.0400000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), teamplaysinleague(A, D).  [covers 180,0/409,0 pos, 0,0/0,0 neg]
%     Score = -11,873929 (regressionFit = 11,873926, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysinleague(A, _).  [covers 312,0/409,0 pos, 0,0/0,0 neg]
%     Score = -11,243167 (regressionFit = 11,243164, penalties=3.2500000000000006E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, C), teamplaysinleague(_, C).  [covers 401,0/409,0 pos, 0,0/0,0 neg]

% Consider expanding [#3 of outerLoop #2, bodyLen=2] 'teamplayssport(_, A) :- athleteplayssport(B, A), athleteledsportsteam(B, _).  [covers 381,0/409,0 pos, 0,0/0,0 neg]' score=-11.276491242953622
%  At # nodes expanded = 3, |OPEN| = 9.  Pruned 22 variant children.  Sending 20 items to OPEN for evaluation and possible insertion.
% Have created 20 valid-on-seeds descendants and have picked up 8 bad extensions.
%     Score = -11,276492 (regressionFit = 11,276489, penalties=3.2500000000000006E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteledsportsteam(B, _), athleteledsportsteam(B, _).  [covers 381,0/409,0 pos, 0,0/0,0 neg]
%     Score = -11,848209 (regressionFit = 11,848206, penalties=3.1500000000000008E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteledsportsteam(_, A).  [covers 108,0/409,0 pos, 0,0/0,0 neg]
%     Score = -11,276492 (regressionFit = 11,276489, penalties=3.1500000000000008E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteledsportsteam(B, C), athleteledsportsteam(_, C).  [covers 381,0/409,0 pos, 0,0/0,0 neg]
%     Score = -11,276492 (regressionFit = 11,276489, penalties=3.1400000000000004E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteledsportsteam(B, C), athleteplaysforteam(B, C).  [covers 381,0/409,0 pos, 0,0/0,0 neg]
%     Score = -11,276492 (regressionFit = 11,276489, penalties=3.35E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteledsportsteam(B, _), athleteplaysforteam(B, _).  [covers 381,0/409,0 pos, 0,0/0,0 neg]
%     Score = -11,860378 (regressionFit = 11,860375, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(_, A).  [covers 178,0/409,0 pos, 0,0/0,0 neg]
%     Score = -11,276492 (regressionFit = 11,276489, penalties=3.2500000000000006E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteledsportsteam(B, C), athleteplaysforteam(_, C).  [covers 381,0/409,0 pos, 0,0/0,0 neg]
%     Score = -11,276492 (regressionFit = 11,276489, penalties=3.35E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteledsportsteam(B, _), athleteplaysinleague(B, _).  [covers 381,0/409,0 pos, 0,0/0,0 neg]
%     Score = -11,276492 (regressionFit = 11,276489, penalties=3.2500000000000006E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteledsportsteam(B, _), athleteplayssport(_, A).  [covers 381,0/409,0 pos, 0,0/0,0 neg]
%     Score = -11,847091 (regressionFit = 11,847088, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamalsoknownas(A, _).  [covers 83,0/409,0 pos, 0,0/0,0 neg]
%     Score = -11,276492 (regressionFit = 11,276489, penalties=3.2500000000000006E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteledsportsteam(B, C), teamalsoknownas(C, _).  [covers 381,0/409,0 pos, 0,0/0,0 neg]
%     Score = -11,276492 (regressionFit = 11,276489, penalties=3.2500000000000006E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteledsportsteam(B, C), teamalsoknownas(_, C).  [covers 381,0/409,0 pos, 0,0/0,0 neg]
%     Score = -11,803436 (regressionFit = 11,803433, penalties=3.0400000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, D).  [covers 157,0/409,0 pos, 0,0/0,0 neg]
%     Score = -11,835714 (regressionFit = 11,835711, penalties=3.0400000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(D, A).  [covers 167,0/409,0 pos, 0,0/0,0 neg]
%     Score = -11,873921 (regressionFit = 11,873918, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, _).  [covers 217,0/409,0 pos, 0,0/0,0 neg]
%     Score = -11,276492 (regressionFit = 11,276489, penalties=3.2500000000000006E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteledsportsteam(B, C), teamplaysagainstteam(C, _).  [covers 381,0/409,0 pos, 0,0/0,0 neg]
%     Score = -11,872055 (regressionFit = 11,872052, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(_, A).  [covers 230,0/409,0 pos, 0,0/0,0 neg]
%     Score = -11,276492 (regressionFit = 11,276489, penalties=3.2500000000000006E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteledsportsteam(B, C), teamplaysagainstteam(_, C).  [covers 381,0/409,0 pos, 0,0/0,0 neg]
%     Score = -11,852378 (regressionFit = 11,852374, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysinleague(A, _).  [covers 301,0/409,0 pos, 0,0/0,0 neg]
%     Score = -11,276492 (regressionFit = 11,276489, penalties=3.2500000000000006E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteledsportsteam(B, C), teamplaysinleague(C, _).  [covers 381,0/409,0 pos, 0,0/0,0 neg]

% Consider expanding [#4 of outerLoop #2, bodyLen=2] 'teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysforteam(B, _).  [covers 387,0/409,0 pos, 0,0/0,0 neg]' score=-11.678422540820948
%  At # nodes expanded = 4, |OPEN| = 8.  Pruned 22 variant children.  Sending 21 items to OPEN for evaluation and possible insertion.
% Have created 21 valid-on-seeds descendants and have picked up 7 bad extensions.
%     Score = -11,832426 (regressionFit = 11,832423, penalties=3.1400000000000004E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysforteam(C, _), athleteledsportsteam(C, A).  [covers 71,0/409,0 pos, 0,0/0,0 neg]
%     Score = -11,276492 (regressionFit = 11,276489, penalties=3.1400000000000004E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysforteam(B, C), athleteledsportsteam(B, C).  [covers 381,0/409,0 pos, 0,0/0,0 neg]
%     Score = -11,276492 (regressionFit = 11,276489, penalties=3.35E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysforteam(B, _), athleteledsportsteam(B, _).  [covers 381,0/409,0 pos, 0,0/0,0 neg]
%     Score = -11,819744 (regressionFit = 11,819740, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysforteam(C, _), athleteledsportsteam(_, A).  [covers 109,0/409,0 pos, 0,0/0,0 neg]
%     Score = -11,489401 (regressionFit = 11,489398, penalties=3.2500000000000006E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysforteam(B, C), athleteledsportsteam(_, C).  [covers 384,0/409,0 pos, 0,0/0,0 neg]
%     Score = -11,678424 (regressionFit = 11,678420, penalties=3.2500000000000006E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysforteam(B, _), athleteplaysforteam(B, _).  [covers 387,0/409,0 pos, 0,0/0,0 neg]
%     Score = -11,777649 (regressionFit = 11,777646, penalties=3.1500000000000008E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysforteam(C, _), athleteplaysforteam(_, A).  [covers 181,0/409,0 pos, 0,0/0,0 neg]
%     Score = -11,678423 (regressionFit = 11,678420, penalties=3.1500000000000008E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysforteam(B, C), athleteplaysforteam(_, C).  [covers 387,0/409,0 pos, 0,0/0,0 neg]
%     Score = -11,276492 (regressionFit = 11,276489, penalties=3.35E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysforteam(B, _), athleteplaysinleague(B, _).  [covers 381,0/409,0 pos, 0,0/0,0 neg]
%     Score = -11,678424 (regressionFit = 11,678420, penalties=3.2500000000000006E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysforteam(B, _), athleteplayssport(_, A).  [covers 387,0/409,0 pos, 0,0/0,0 neg]
%     Score = -11,872187 (regressionFit = 11,872183, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysforteam(C, _), teamalsoknownas(A, _).  [covers 86,0/409,0 pos, 0,0/0,0 neg]
%     Score = -11,276492 (regressionFit = 11,276489, penalties=3.2500000000000006E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysforteam(B, C), teamalsoknownas(C, _).  [covers 381,0/409,0 pos, 0,0/0,0 neg]
%     Score = -11,276492 (regressionFit = 11,276489, penalties=3.2500000000000006E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysforteam(B, C), teamalsoknownas(_, C).  [covers 381,0/409,0 pos, 0,0/0,0 neg]
%     Score = -11,827857 (regressionFit = 11,827854, penalties=3.0400000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysforteam(C, D), teamplaysagainstteam(A, D).  [covers 173,0/409,0 pos, 0,0/0,0 neg]
%     Score = -11,855358 (regressionFit = 11,855355, penalties=3.0400000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysforteam(C, D), teamplaysagainstteam(D, A).  [covers 181,0/409,0 pos, 0,0/0,0 neg]
%     Score = -11,838668 (regressionFit = 11,838665, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysforteam(C, _), teamplaysagainstteam(A, _).  [covers 220,0/409,0 pos, 0,0/0,0 neg]
%     Score = -11,678424 (regressionFit = 11,678420, penalties=3.2500000000000006E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysforteam(B, C), teamplaysagainstteam(C, _).  [covers 387,0/409,0 pos, 0,0/0,0 neg]
%     Score = -11,851143 (regressionFit = 11,851140, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysforteam(C, _), teamplaysagainstteam(_, A).  [covers 233,0/409,0 pos, 0,0/0,0 neg]
%     Score = -11,678424 (regressionFit = 11,678420, penalties=3.2500000000000006E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysforteam(B, C), teamplaysagainstteam(_, C).  [covers 387,0/409,0 pos, 0,0/0,0 neg]
%     Score = -11,872601 (regressionFit = 11,872597, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysforteam(C, _), teamplaysinleague(A, _).  [covers 305,0/409,0 pos, 0,0/0,0 neg]
%     Score = -11,678424 (regressionFit = 11,678420, penalties=3.2500000000000006E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysforteam(B, C), teamplaysinleague(C, _).  [covers 387,0/409,0 pos, 0,0/0,0 neg]

% Consider expanding [#5 of outerLoop #2, bodyLen=2] 'teamplayssport(A, B) :- athleteplayssport(_, B), athleteplaysforteam(_, A).  [covers 189,0/409,0 pos, 0,0/0,0 neg]' score=-11.679512145776364
%  At # nodes expanded = 5, |OPEN| = 7.  Pruned 12 variant children.  Sending 12 items to OPEN for evaluation and possible insertion.
% Have created 12 valid-on-seeds descendants and have picked up 5 bad extensions.
%     Score = -11,789005 (regressionFit = 11,789002, penalties=3.1400000000000004E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), athleteplaysforteam(C, A), athleteledsportsteam(C, A).  [covers 90,0/409,0 pos, 0,0/0,0 neg]
%     Score = -11,860378 (regressionFit = 11,860375, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysforteam(_, A), athleteledsportsteam(C, _).  [covers 178,0/409,0 pos, 0,0/0,0 neg]
%     Score = -11,810224 (regressionFit = 11,810221, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), athleteplaysforteam(_, A), athleteledsportsteam(_, A).  [covers 101,0/409,0 pos, 0,0/0,0 neg]
%     Score = -11,777649 (regressionFit = 11,777646, penalties=3.1500000000000008E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysforteam(_, A), athleteplaysforteam(C, _).  [covers 181,0/409,0 pos, 0,0/0,0 neg]
%     Score = -11,679513 (regressionFit = 11,679510, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), athleteplaysforteam(_, A), athleteplaysforteam(_, A).  [covers 189,0/409,0 pos, 0,0/0,0 neg]
%     Score = -11,840125 (regressionFit = 11,840122, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysforteam(_, A), athleteplaysinleague(C, _).  [covers 185,0/409,0 pos, 0,0/0,0 neg]
%     Score = -11,753095 (regressionFit = 11,753092, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), athleteplaysforteam(C, A), athleteplaysinleague(C, _).  [covers 129,0/409,0 pos, 0,0/0,0 neg]
%     Score = -11,749652 (regressionFit = 11,749649, penalties=3.1500000000000008E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), athleteplaysforteam(C, A), athleteplayssport(C, _).  [covers 126,0/409,0 pos, 0,0/0,0 neg]
%     Score = -11,679513 (regressionFit = 11,679510, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), athleteplaysforteam(_, A), athleteplayssport(_, B).  [covers 189,0/409,0 pos, 0,0/0,0 neg]
%     Score = -11,651773 (regressionFit = 11,651770, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), athleteplaysforteam(_, A), teamplaysagainstteam(A, _).  [covers 179,0/409,0 pos, 0,0/0,0 neg]
%     Score = -11,669170 (regressionFit = 11,669167, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), athleteplaysforteam(_, A), teamplaysagainstteam(_, A).  [covers 185,0/409,0 pos, 0,0/0,0 neg]
%     Score = -11,646867 (regressionFit = 11,646864, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), athleteplaysforteam(_, A), teamplaysinleague(A, _).  [covers 180,0/409,0 pos, 0,0/0,0 neg]

% Consider expanding [#6 of outerLoop #2, bodyLen=2] 'teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(A, _).  [covers 233,0/409,0 pos, 0,0/0,0 neg]' score=-11.791770632106719
%  At # nodes expanded = 6, |OPEN| = 6.  Pruned 22 variant children.  Sending 20 items to OPEN for evaluation and possible insertion.
% Have created 20 valid-on-seeds descendants and have picked up 7 bad extensions.
%     Score = -11,831544 (regressionFit = 11,831541, penalties=3.1400000000000004E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysagainstteam(A, _), athleteledsportsteam(C, A).  [covers 73,0/409,0 pos, 0,0/0,0 neg]
%     Score = -11,803436 (regressionFit = 11,803433, penalties=3.0400000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysagainstteam(A, D), athleteledsportsteam(C, D).  [covers 157,0/409,0 pos, 0,0/0,0 neg]
%     Score = -11,873921 (regressionFit = 11,873918, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysagainstteam(A, _), athleteledsportsteam(C, _).  [covers 217,0/409,0 pos, 0,0/0,0 neg]
%     Score = -11,822120 (regressionFit = 11,822117, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(A, _), athleteledsportsteam(_, A).  [covers 109,0/409,0 pos, 0,0/0,0 neg]
%     Score = -11,757788 (regressionFit = 11,757784, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(A, C), athleteledsportsteam(_, C).  [covers 194,0/409,0 pos, 0,0/0,0 neg]
%     Score = -11,827857 (regressionFit = 11,827854, penalties=3.0400000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysagainstteam(A, D), athleteplaysforteam(C, D).  [covers 173,0/409,0 pos, 0,0/0,0 neg]
%     Score = -11,838668 (regressionFit = 11,838665, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysagainstteam(A, _), athleteplaysforteam(C, _).  [covers 220,0/409,0 pos, 0,0/0,0 neg]
%     Score = -11,651773 (regressionFit = 11,651770, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(A, _), athleteplaysforteam(_, A).  [covers 179,0/409,0 pos, 0,0/0,0 neg]
%     Score = -11,774758 (regressionFit = 11,774755, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(A, C), athleteplaysforteam(_, C).  [covers 225,0/409,0 pos, 0,0/0,0 neg]
%     Score = -11,873196 (regressionFit = 11,873193, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysagainstteam(A, _), athleteplaysinleague(C, _).  [covers 229,0/409,0 pos, 0,0/0,0 neg]
%     Score = -11,791772 (regressionFit = 11,791768, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(A, _), athleteplayssport(_, B).  [covers 233,0/409,0 pos, 0,0/0,0 neg]
%     Score = -11,780653 (regressionFit = 11,780650, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(A, C), teamalsoknownas(C, _).  [covers 172,0/409,0 pos, 0,0/0,0 neg]
%     Score = -11,833590 (regressionFit = 11,833587, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(A, C), teamalsoknownas(_, C).  [covers 176,0/409,0 pos, 0,0/0,0 neg]
%     Score = -11,767167 (regressionFit = 11,767164, penalties=3.04E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(A, C), teamplaysagainstteam(C, A).  [covers 219,0/409,0 pos, 0,0/0,0 neg]
%     Score = -11,791772 (regressionFit = 11,791768, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(A, _), teamplaysagainstteam(A, _).  [covers 233,0/409,0 pos, 0,0/0,0 neg]
%     Score = -11,789430 (regressionFit = 11,789427, penalties=3.1500000000000008E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(A, C), teamplaysagainstteam(C, _).  [covers 231,0/409,0 pos, 0,0/0,0 neg]
%     Score = -11,785087 (regressionFit = 11,785084, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(A, _), teamplaysagainstteam(_, A).  [covers 228,0/409,0 pos, 0,0/0,0 neg]
%     Score = -11,791772 (regressionFit = 11,791768, penalties=3.1500000000000008E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(A, C), teamplaysagainstteam(_, C).  [covers 233,0/409,0 pos, 0,0/0,0 neg]
%     Score = -11,737925 (regressionFit = 11,737922, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(A, _), teamplaysinleague(A, _).  [covers 212,0/409,0 pos, 0,0/0,0 neg]
%     Score = -11,779494 (regressionFit = 11,779491, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(A, C), teamplaysinleague(C, _).  [covers 228,0/409,0 pos, 0,0/0,0 neg]

% Consider expanding [#7 of outerLoop #2, bodyLen=2] 'teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _).  [covers 317,0/409,0 pos, 0,0/0,0 neg]' score=-11.803673932900907
%  At # nodes expanded = 7, |OPEN| = 5.  Pruned 10 variant children.  Sending 13 items to OPEN for evaluation and possible insertion.
% Have created 13 valid-on-seeds descendants and have picked up 3 bad extensions.
%     Score = -11,830306 (regressionFit = 11,830303, penalties=3.1400000000000004E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, _), athleteledsportsteam(C, A).  [covers 74,0/409,0 pos, 0,0/0,0 neg]
%     Score = -11,852378 (regressionFit = 11,852374, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, _), athleteledsportsteam(C, _).  [covers 301,0/409,0 pos, 0,0/0,0 neg]
%     Score = -11,824591 (regressionFit = 11,824588, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), athleteledsportsteam(_, A).  [covers 111,0/409,0 pos, 0,0/0,0 neg]
%     Score = -11,872601 (regressionFit = 11,872597, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, _), athleteplaysforteam(C, _).  [covers 305,0/409,0 pos, 0,0/0,0 neg]
%     Score = -11,646867 (regressionFit = 11,646864, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), athleteplaysforteam(_, A).  [covers 180,0/409,0 pos, 0,0/0,0 neg]
%     Score = -11,816031 (regressionFit = 11,816028, penalties=3.0400000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(C, D).  [covers 180,0/409,0 pos, 0,0/0,0 neg]
%     Score = -11,873929 (regressionFit = 11,873926, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, _), athleteplaysinleague(C, _).  [covers 312,0/409,0 pos, 0,0/0,0 neg]
%     Score = -11,857845 (regressionFit = 11,857841, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(_, C).  [covers 235,0/409,0 pos, 0,0/0,0 neg]
%     Score = -11,803675 (regressionFit = 11,803672, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), athleteplayssport(_, B).  [covers 317,0/409,0 pos, 0,0/0,0 neg]
%     Score = -11,873216 (regressionFit = 11,873213, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), teamalsoknownas(A, _).  [covers 75,0/409,0 pos, 0,0/0,0 neg]
%     Score = -11,737925 (regressionFit = 11,737922, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), teamplaysagainstteam(A, _).  [covers 212,0/409,0 pos, 0,0/0,0 neg]
%     Score = -11,759809 (regressionFit = 11,759806, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), teamplaysagainstteam(_, A).  [covers 222,0/409,0 pos, 0,0/0,0 neg]
%     Score = -11,803675 (regressionFit = 11,803672, penalties=3.1500000000000008E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), teamplaysinleague(_, C).  [covers 317,0/409,0 pos, 0,0/0,0 neg]

% Consider expanding [#8 of outerLoop #2, bodyLen=2] 'teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(_, A).  [covers 250,0/409,0 pos, 0,0/0,0 neg]' score=-11.818961823436098
%  At # nodes expanded = 8, |OPEN| = 4.  Pruned 22 variant children.  Sending 20 items to OPEN for evaluation and possible insertion.
% Have created 20 valid-on-seeds descendants and have picked up 7 bad extensions.
%     Score = -11,831544 (regressionFit = 11,831541, penalties=3.1400000000000004E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysagainstteam(_, A), athleteledsportsteam(C, A).  [covers 73,0/409,0 pos, 0,0/0,0 neg]
%     Score = -11,835714 (regressionFit = 11,835711, penalties=3.0400000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysagainstteam(D, A), athleteledsportsteam(C, D).  [covers 167,0/409,0 pos, 0,0/0,0 neg]
%     Score = -11,872055 (regressionFit = 11,872052, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysagainstteam(_, A), athleteledsportsteam(C, _).  [covers 230,0/409,0 pos, 0,0/0,0 neg]
%     Score = -11,823941 (regressionFit = 11,823938, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(_, A), athleteledsportsteam(_, A).  [covers 110,0/409,0 pos, 0,0/0,0 neg]
%     Score = -11,723912 (regressionFit = 11,723909, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(C, A), athleteledsportsteam(_, C).  [covers 210,0/409,0 pos, 0,0/0,0 neg]
%     Score = -11,855358 (regressionFit = 11,855355, penalties=3.0400000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysagainstteam(D, A), athleteplaysforteam(C, D).  [covers 181,0/409,0 pos, 0,0/0,0 neg]
%     Score = -11,851143 (regressionFit = 11,851140, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysagainstteam(_, A), athleteplaysforteam(C, _).  [covers 233,0/409,0 pos, 0,0/0,0 neg]
%     Score = -11,669170 (regressionFit = 11,669167, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(_, A), athleteplaysforteam(_, A).  [covers 185,0/409,0 pos, 0,0/0,0 neg]
%     Score = -11,800949 (regressionFit = 11,800946, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(C, A), athleteplaysforteam(_, C).  [covers 241,0/409,0 pos, 0,0/0,0 neg]
%     Score = -11,873134 (regressionFit = 11,873131, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysagainstteam(_, A), athleteplaysinleague(C, _).  [covers 246,0/409,0 pos, 0,0/0,0 neg]
%     Score = -11,818963 (regressionFit = 11,818960, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(_, A), athleteplayssport(_, B).  [covers 250,0/409,0 pos, 0,0/0,0 neg]
%     Score = -11,791576 (regressionFit = 11,791573, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(C, A), teamalsoknownas(C, _).  [covers 181,0/409,0 pos, 0,0/0,0 neg]
%     Score = -11,832088 (regressionFit = 11,832085, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(C, A), teamalsoknownas(_, C).  [covers 179,0/409,0 pos, 0,0/0,0 neg]
%     Score = -11,767167 (regressionFit = 11,767164, penalties=3.04E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(C, A), teamplaysagainstteam(A, C).  [covers 219,0/409,0 pos, 0,0/0,0 neg]
%     Score = -11,785087 (regressionFit = 11,785084, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(_, A), teamplaysagainstteam(A, _).  [covers 228,0/409,0 pos, 0,0/0,0 neg]
%     Score = -11,818963 (regressionFit = 11,818960, penalties=3.1500000000000008E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(C, A), teamplaysagainstteam(C, _).  [covers 250,0/409,0 pos, 0,0/0,0 neg]
%     Score = -11,818963 (regressionFit = 11,818960, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(_, A), teamplaysagainstteam(_, A).  [covers 250,0/409,0 pos, 0,0/0,0 neg]
%     Score = -11,818963 (regressionFit = 11,818960, penalties=3.1500000000000008E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(C, A), teamplaysagainstteam(_, C).  [covers 250,0/409,0 pos, 0,0/0,0 neg]
%     Score = -11,759809 (regressionFit = 11,759806, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(_, A), teamplaysinleague(A, _).  [covers 222,0/409,0 pos, 0,0/0,0 neg]
%     Score = -11,809287 (regressionFit = 11,809284, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(C, A), teamplaysinleague(C, _).  [covers 245,0/409,0 pos, 0,0/0,0 neg]

% Consider expanding [#9 of outerLoop #2, bodyLen=2] 'teamplayssport(A, B) :- athleteplayssport(_, B), athleteledsportsteam(_, A).  [covers 112,0/409,0 pos, 0,0/0,0 neg]' score=-11.827129017339352
%  At # nodes expanded = 9, |OPEN| = 3.  Pruned 12 variant children.  Sending 14 items to OPEN for evaluation and possible insertion.
% Have created 14 valid-on-seeds descendants and have picked up 4 bad extensions.
%     Score = -11,848209 (regressionFit = 11,848206, penalties=3.1500000000000008E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(_, A), athleteledsportsteam(C, _).  [covers 108,0/409,0 pos, 0,0/0,0 neg]
%     Score = -11,827130 (regressionFit = 11,827127, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), athleteledsportsteam(_, A), athleteledsportsteam(_, A).  [covers 112,0/409,0 pos, 0,0/0,0 neg]
%     Score = -11,789005 (regressionFit = 11,789002, penalties=3.1400000000000004E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), athleteledsportsteam(C, A), athleteplaysforteam(C, A).  [covers 90,0/409,0 pos, 0,0/0,0 neg]
%     Score = -11,819744 (regressionFit = 11,819740, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(_, A), athleteplaysforteam(C, _).  [covers 109,0/409,0 pos, 0,0/0,0 neg]
%     Score = -11,821654 (regressionFit = 11,821651, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), athleteledsportsteam(C, A), athleteplaysforteam(C, _).  [covers 108,0/409,0 pos, 0,0/0,0 neg]
%     Score = -11,810224 (regressionFit = 11,810221, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), athleteledsportsteam(_, A), athleteplaysforteam(_, A).  [covers 101,0/409,0 pos, 0,0/0,0 neg]
%     Score = -11,853055 (regressionFit = 11,853052, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(_, A), athleteplaysinleague(C, _).  [covers 111,0/409,0 pos, 0,0/0,0 neg]
%     Score = -11,830395 (regressionFit = 11,830392, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), athleteledsportsteam(C, A), athleteplaysinleague(C, _).  [covers 96,0/409,0 pos, 0,0/0,0 neg]
%     Score = -11,830306 (regressionFit = 11,830303, penalties=3.04E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), athleteledsportsteam(C, A), athleteplayssport(C, B).  [covers 74,0/409,0 pos, 0,0/0,0 neg]
%     Score = -11,829185 (regressionFit = 11,829182, penalties=3.1500000000000008E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), athleteledsportsteam(C, A), athleteplayssport(C, _).  [covers 94,0/409,0 pos, 0,0/0,0 neg]
%     Score = -11,827130 (regressionFit = 11,827127, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), athleteledsportsteam(_, A), athleteplayssport(_, B).  [covers 112,0/409,0 pos, 0,0/0,0 neg]
%     Score = -11,822120 (regressionFit = 11,822117, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), athleteledsportsteam(_, A), teamplaysagainstteam(A, _).  [covers 109,0/409,0 pos, 0,0/0,0 neg]
%     Score = -11,823941 (regressionFit = 11,823938, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), athleteledsportsteam(_, A), teamplaysagainstteam(_, A).  [covers 110,0/409,0 pos, 0,0/0,0 neg]
%     Score = -11,824591 (regressionFit = 11,824588, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), athleteledsportsteam(_, A), teamplaysinleague(A, _).  [covers 111,0/409,0 pos, 0,0/0,0 neg]

***** Warning: #11 TOO MANY NODES CONSIDERED (i.e., 'expanded') for 'LearnOneClause': nodesConsidered = 10 and maxNodesToConsider = 10. *****


% The best node found: teamplayssport(_, A) :- athleteplayssport(B, A), athleteledsportsteam(B, _).  [covers 381,0/409,0 pos, 0,0/0,0 neg]

% The best node found: teamplayssport(_, A) :- athleteplayssport(B, A), athleteledsportsteam(B, _).  [covers 381,0/409,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,029.
% Will extend: teamplayssport(_, A) :- athleteplayssport(B, A), athleteledsportsteam(B, _).  [covers 381,0/409,0 pos, 0,0/0,0 neg]
% Path: 2;true
Comparing variance: 0.017867981211056014 to score=0.0025 #egs=381.0
Comparing variance: 0.15959957719790283 to score=0.0025 #egs=28.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 381,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,017868)
%         ILP node to extend: teamplayssport(_, A) :- athleteplayssport(B, A), athleteledsportsteam(B, _).  [covers 381,0/409,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -0,017868) into position #1 in the search queue (new size=2).
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 28,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,159600)
%         ILP node to extend: teamplayssport(_, A) :- athleteplayssport(_, A).  [covers 409,0/409,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -0,159600) into position #1 in the search queue (new size=3).

% Time for loop #2: 8,360 seconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #2, the best clause found is:
%      teamplayssport(_, A) :- athleteplayssport(B, A), athleteledsportsteam(B, _).  [covers 381,0/409,0 pos, 0,0/0,0 neg]
% This clause covers 381 positive examples, of which 381 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'teamplayssport(_, A) :- athleteplayssport(_, A).  [covers 409,0/28,0 pos, 0,0/0,0 neg]'
%     Score = -14,761118 (regressionFit = 14,761117, penalties=1.23E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(_, A).  [covers 28,0/28,0 pos, 0,0/0,0 neg]

% Have these 10 positive seeds: 2 5 8 11 18 20 21 23 24 27
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Consider expanding [#1 of outerLoop #3, bodyLen=1] 'teamplayssport(_, A) :- athleteplayssport(_, A).  [covers 28,0/28,0 pos, 0,0/0,0 neg]' score=-14.761117809573866
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 8 variant children.  Sending 10 items to OPEN for evaluation and possible insertion.
% Have created 10 valid-on-seeds descendants and have picked up 11 bad extensions.
%     Score = -4,468253 (regressionFit = 4,468251, penalties=2.24E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), athleteledsportsteam(_, A).  [covers 4,0/28,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -4,468253): teamplayssport(A, B) :- athleteplayssport(_, B), athleteledsportsteam(_, A).  [covers 4,0/28,0 pos, 0,0/0,0 neg]
%     Score = -4,219439 (regressionFit = 4,219437, penalties=2.24E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysforteam(B, _).  [covers 6,0/28,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -4,219439): teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysforteam(B, _).  [covers 6,0/28,0 pos, 0,0/0,0 neg]
%     Score = -4,022184 (regressionFit = 4,022182, penalties=2.24E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), athleteplaysforteam(_, A).  [covers 11,0/28,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -4,022184): teamplayssport(A, B) :- athleteplayssport(_, B), athleteplaysforteam(_, A).  [covers 11,0/28,0 pos, 0,0/0,0 neg]
%     Score = -4,258415 (regressionFit = 4,258412, penalties=2.24E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _).  [covers 20,0/28,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(_, A), athleteplayssport(_, A).  [covers 28,0/28,0 pos, 0,0/0,0 neg]
%     Score = -4,269078 (regressionFit = 4,269075, penalties=2.24E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(A, _).  [covers 11,0/28,0 pos, 0,0/0,0 neg]
%     Score = -4,436379 (regressionFit = 4,436377, penalties=2.24E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(_, A).  [covers 11,0/28,0 pos, 0,0/0,0 neg]
%     Score = -4,403357 (regressionFit = 4,403355, penalties=2.24E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(A, _).  [covers 16,0/28,0 pos, 0,0/0,0 neg]
%     Score = -4,467905 (regressionFit = 4,467903, penalties=2.24E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(_, A).  [covers 20,0/28,0 pos, 0,0/0,0 neg]
%     Score = -4,225269 (regressionFit = 4,225267, penalties=2.24E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _).  [covers 16,0/28,0 pos, 0,0/0,0 neg]

% Consider expanding [#2 of outerLoop #3, bodyLen=2] 'teamplayssport(A, B) :- athleteplayssport(_, B), athleteplaysforteam(_, A).  [covers 11,0/28,0 pos, 0,0/0,0 neg]' score=-4.022184402300419
%  At # nodes expanded = 2, |OPEN| = 9.  Pruned 12 variant children.  Sending 12 items to OPEN for evaluation and possible insertion.
% Have created 12 valid-on-seeds descendants and have picked up 5 bad extensions.
%     Score = -4,468254 (regressionFit = 4,468251, penalties=3.1400000000000004E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), athleteplaysforteam(C, A), athleteledsportsteam(C, A).  [covers 4,0/28,0 pos, 0,0/0,0 neg]
%     Score = -4,416880 (regressionFit = 4,416876, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), athleteplaysforteam(C, A), athleteledsportsteam(C, _).  [covers 5,0/28,0 pos, 0,0/0,0 neg]
%     Score = -3,599301 (regressionFit = 3,599298, penalties=3.1500000000000008E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysforteam(_, A), athleteplaysforteam(C, _).  [covers 3,0/28,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -3,599301): teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysforteam(_, A), athleteplaysforteam(C, _).  [covers 3,0/28,0 pos, 0,0/0,0 neg]
%     Score = -4,022185 (regressionFit = 4,022182, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), athleteplaysforteam(_, A), athleteplaysforteam(_, A).  [covers 11,0/28,0 pos, 0,0/0,0 neg]
%     Score = -4,451219 (regressionFit = 4,451216, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysforteam(_, A), athleteplaysinleague(C, _).  [covers 7,0/28,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), athleteplaysforteam(C, A), athleteplaysinleague(C, _).  [covers 2,0/28,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000008E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), athleteplaysforteam(C, A), athleteplayssport(C, _).  [covers 2,0/28,0 pos, 0,0/0,0 neg]
%     Score = -4,022185 (regressionFit = 4,022182, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), athleteplaysforteam(_, A), athleteplayssport(_, B).  [covers 11,0/28,0 pos, 0,0/0,0 neg]
%     Score = -4,140984 (regressionFit = 4,140981, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), athleteplaysforteam(_, A), teamalsoknownas(_, A).  [covers 5,0/28,0 pos, 0,0/0,0 neg]
%     Score = -4,022186 (regressionFit = 4,022182, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), athleteplaysforteam(_, A), teamplaysagainstteam(A, _).  [covers 11,0/28,0 pos, 0,0/0,0 neg]
%     Score = -4,022186 (regressionFit = 4,022182, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), athleteplaysforteam(_, A), teamplaysagainstteam(_, A).  [covers 11,0/28,0 pos, 0,0/0,0 neg]
%     Score = -3,299732 (regressionFit = 3,299729, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), athleteplaysforteam(_, A), teamplaysinleague(A, _).  [covers 7,0/28,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -3,299732): teamplayssport(A, B) :- athleteplayssport(_, B), athleteplaysforteam(_, A), teamplaysinleague(A, _).  [covers 7,0/28,0 pos, 0,0/0,0 neg]

% Consider expanding [#3 of outerLoop #3, bodyLen=2] 'teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysforteam(B, _).  [covers 6,0/28,0 pos, 0,0/0,0 neg]' score=-4.219438784423773
%  At # nodes expanded = 3, |OPEN| = 8.  Pruned 22 variant children.  Sending 11 items to OPEN for evaluation and possible insertion.
% Have created 11 valid-on-seeds descendants and have picked up 12 bad extensions.
%     Score = -4,367726 (regressionFit = 4,367723, penalties=3.2500000000000006E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysforteam(B, C), athleteledsportsteam(_, C).  [covers 3,0/28,0 pos, 0,0/0,0 neg]
%     Score = -3,599301 (regressionFit = 3,599298, penalties=3.1500000000000008E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysforteam(C, _), athleteplaysforteam(_, A).  [covers 3,0/28,0 pos, 0,0/0,0 neg]
%     Score = -4,219440 (regressionFit = 4,219437, penalties=3.1500000000000008E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysforteam(B, C), athleteplaysforteam(_, C).  [covers 6,0/28,0 pos, 0,0/0,0 neg]
%     Score = -4,219440 (regressionFit = 4,219437, penalties=3.2500000000000006E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysforteam(B, _), athleteplayssport(_, A).  [covers 6,0/28,0 pos, 0,0/0,0 neg]
%     Score = -4,135399 (regressionFit = 4,135396, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysforteam(C, _), teamalsoknownas(_, A).  [covers 4,0/28,0 pos, 0,0/0,0 neg]
%     Score = -3,599302 (regressionFit = 3,599298, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysforteam(C, _), teamplaysagainstteam(A, _).  [covers 3,0/28,0 pos, 0,0/0,0 neg]
%     Score = -4,219440 (regressionFit = 4,219437, penalties=3.2500000000000006E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysforteam(B, C), teamplaysagainstteam(C, _).  [covers 6,0/28,0 pos, 0,0/0,0 neg]
%     Score = -3,599302 (regressionFit = 3,599298, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysforteam(C, _), teamplaysagainstteam(_, A).  [covers 3,0/28,0 pos, 0,0/0,0 neg]
%     Score = -4,219440 (regressionFit = 4,219437, penalties=3.2500000000000006E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysforteam(B, C), teamplaysagainstteam(_, C).  [covers 6,0/28,0 pos, 0,0/0,0 neg]
%     Score = -4,135399 (regressionFit = 4,135396, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysforteam(C, _), teamplaysinleague(A, _).  [covers 4,0/28,0 pos, 0,0/0,0 neg]
%     Score = -4,219440 (regressionFit = 4,219437, penalties=3.2500000000000006E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysforteam(B, C), teamplaysinleague(C, _).  [covers 6,0/28,0 pos, 0,0/0,0 neg]

% Consider expanding [#4 of outerLoop #3, bodyLen=2] 'teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _).  [covers 16,0/28,0 pos, 0,0/0,0 neg]' score=-4.2252691545215075
%  At # nodes expanded = 4, |OPEN| = 7.  Pruned 10 variant children.  Sending 10 items to OPEN for evaluation and possible insertion.
% Have created 10 valid-on-seeds descendants and have picked up 5 bad extensions.
%     Score = -4,135399 (regressionFit = 4,135396, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, _), athleteplaysforteam(C, _).  [covers 4,0/28,0 pos, 0,0/0,0 neg]
%     Score = -3,299732 (regressionFit = 3,299729, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), athleteplaysforteam(_, A).  [covers 7,0/28,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -3,299732): teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), athleteplaysforteam(_, A).  [covers 7,0/28,0 pos, 0,0/0,0 neg]
%     Score = -4,456919 (regressionFit = 4,456916, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, _), athleteplaysinleague(C, _).  [covers 11,0/28,0 pos, 0,0/0,0 neg]
%     Score = -4,438629 (regressionFit = 4,438626, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(_, C).  [covers 7,0/28,0 pos, 0,0/0,0 neg]
%     Score = -4,225270 (regressionFit = 4,225267, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), athleteplayssport(_, B).  [covers 16,0/28,0 pos, 0,0/0,0 neg]
%     Score = -4,419844 (regressionFit = 4,419840, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), teamalsoknownas(A, _).  [covers 8,0/28,0 pos, 0,0/0,0 neg]
%     Score = -4,335068 (regressionFit = 4,335065, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), teamalsoknownas(_, A).  [covers 9,0/28,0 pos, 0,0/0,0 neg]
%     Score = -3,967372 (regressionFit = 3,967369, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), teamplaysagainstteam(A, _).  [covers 10,0/28,0 pos, 0,0/0,0 neg]
%     Score = -4,247290 (regressionFit = 4,247286, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), teamplaysagainstteam(_, A).  [covers 13,0/28,0 pos, 0,0/0,0 neg]
%     Score = -4,225270 (regressionFit = 4,225267, penalties=3.1500000000000008E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), teamplaysinleague(_, C).  [covers 16,0/28,0 pos, 0,0/0,0 neg]

% Consider expanding [#5 of outerLoop #3, bodyLen=2] 'teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _).  [covers 20,0/28,0 pos, 0,0/0,0 neg]' score=-4.25841452765562
%  At # nodes expanded = 5, |OPEN| = 6.  Pruned 10 variant children.  Sending 10 items to OPEN for evaluation and possible insertion.
% Have created 10 valid-on-seeds descendants and have picked up 5 bad extensions.
%     Score = -4,354470 (regressionFit = 4,354467, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(_, A).  [covers 3,0/28,0 pos, 0,0/0,0 neg]
%     Score = -4,451219 (regressionFit = 4,451216, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteplaysforteam(_, A).  [covers 7,0/28,0 pos, 0,0/0,0 neg]
%     Score = -4,258415 (regressionFit = 4,258412, penalties=3.1500000000000008E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, C), athleteplaysinleague(_, C).  [covers 20,0/28,0 pos, 0,0/0,0 neg]
%     Score = -4,258416 (regressionFit = 4,258412, penalties=3.2500000000000006E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteplayssport(_, A).  [covers 20,0/28,0 pos, 0,0/0,0 neg]
%     Score = -3,951785 (regressionFit = 3,951782, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(A, _).  [covers 8,0/28,0 pos, 0,0/0,0 neg]
%     Score = -4,399329 (regressionFit = 4,399326, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(_, A).  [covers 7,0/28,0 pos, 0,0/0,0 neg]
%     Score = -4,198685 (regressionFit = 4,198682, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(A, _).  [covers 12,0/28,0 pos, 0,0/0,0 neg]
%     Score = -3,824501 (regressionFit = 3,824498, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(_, A).  [covers 16,0/28,0 pos, 0,0/0,0 neg]
%     Score = -4,456919 (regressionFit = 4,456916, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysinleague(A, _).  [covers 11,0/28,0 pos, 0,0/0,0 neg]
%     Score = -4,258416 (regressionFit = 4,258412, penalties=3.2500000000000006E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, C), teamplaysinleague(_, C).  [covers 20,0/28,0 pos, 0,0/0,0 neg]

% Consider expanding [#6 of outerLoop #3, bodyLen=2] 'teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(A, _).  [covers 11,0/28,0 pos, 0,0/0,0 neg]' score=-4.269077550856592
%  At # nodes expanded = 6, |OPEN| = 5.  Pruned 22 variant children.  Sending 11 items to OPEN for evaluation and possible insertion.
% Have created 11 valid-on-seeds descendants and have picked up 10 bad extensions.
%     Score = -3,951785 (regressionFit = 3,951782, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamalsoknownas(A, _), athleteplaysinleague(C, _).  [covers 8,0/28,0 pos, 0,0/0,0 neg]
%     Score = -4,269079 (regressionFit = 4,269075, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(A, _), athleteplayssport(_, B).  [covers 11,0/28,0 pos, 0,0/0,0 neg]
%     Score = -4,405469 (regressionFit = 4,405466, penalties=3.04E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(A, C), teamalsoknownas(C, A).  [covers 8,0/28,0 pos, 0,0/0,0 neg]
%     Score = -4,269079 (regressionFit = 4,269075, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(A, _), teamalsoknownas(A, _).  [covers 11,0/28,0 pos, 0,0/0,0 neg]
%     Score = -4,323240 (regressionFit = 4,323237, penalties=3.1500000000000008E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(A, C), teamalsoknownas(C, _).  [covers 10,0/28,0 pos, 0,0/0,0 neg]
%     Score = -4,405470 (regressionFit = 4,405466, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(A, _), teamalsoknownas(_, A).  [covers 8,0/28,0 pos, 0,0/0,0 neg]
%     Score = -4,269078 (regressionFit = 4,269075, penalties=3.1500000000000008E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(A, C), teamalsoknownas(_, C).  [covers 11,0/28,0 pos, 0,0/0,0 neg]
%     Score = -4,468653 (regressionFit = 4,468650, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(A, _), teamplaysagainstteam(A, _).  [covers 7,0/28,0 pos, 0,0/0,0 neg]
%     Score = -4,461429 (regressionFit = 4,461425, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(A, _), teamplaysagainstteam(_, A).  [covers 8,0/28,0 pos, 0,0/0,0 neg]
%     Score = -4,419844 (regressionFit = 4,419840, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(A, _), teamplaysinleague(A, _).  [covers 8,0/28,0 pos, 0,0/0,0 neg]
%     Score = -4,323240 (regressionFit = 4,323237, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(A, C), teamplaysinleague(C, _).  [covers 10,0/28,0 pos, 0,0/0,0 neg]

% Consider expanding [#7 of outerLoop #3, bodyLen=2] 'teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(A, _).  [covers 16,0/28,0 pos, 0,0/0,0 neg]' score=-4.403357051339499
%  At # nodes expanded = 7, |OPEN| = 4.  Pruned 22 variant children.  Sending 19 items to OPEN for evaluation and possible insertion.
% Have created 19 valid-on-seeds descendants and have picked up 9 bad extensions.
%     Score = -4,468254 (regressionFit = 4,468251, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(A, _), athleteledsportsteam(_, A).  [covers 4,0/28,0 pos, 0,0/0,0 neg]
%     Score = -3,967372 (regressionFit = 3,967369, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(A, C), athleteledsportsteam(_, C).  [covers 10,0/28,0 pos, 0,0/0,0 neg]
%     Score = -3,599302 (regressionFit = 3,599298, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysagainstteam(A, _), athleteplaysforteam(C, _).  [covers 3,0/28,0 pos, 0,0/0,0 neg]
%     Score = -4,022186 (regressionFit = 4,022182, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(A, _), athleteplaysforteam(_, A).  [covers 11,0/28,0 pos, 0,0/0,0 neg]
%     Score = -4,312781 (regressionFit = 4,312778, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(A, C), athleteplaysforteam(_, C).  [covers 14,0/28,0 pos, 0,0/0,0 neg]
%     Score = -4,198685 (regressionFit = 4,198682, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysagainstteam(A, _), athleteplaysinleague(C, _).  [covers 12,0/28,0 pos, 0,0/0,0 neg]
%     Score = -4,403358 (regressionFit = 4,403355, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(A, _), athleteplayssport(_, B).  [covers 16,0/28,0 pos, 0,0/0,0 neg]
%     Score = -4,441688 (regressionFit = 4,441685, penalties=3.1400000000000004E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(A, C), teamalsoknownas(C, A).  [covers 5,0/28,0 pos, 0,0/0,0 neg]
%     Score = -4,468653 (regressionFit = 4,468650, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(A, _), teamalsoknownas(A, _).  [covers 7,0/28,0 pos, 0,0/0,0 neg]
%     Score = -4,457997 (regressionFit = 4,457994, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(A, C), teamalsoknownas(C, _).  [covers 12,0/28,0 pos, 0,0/0,0 neg]
%     Score = -4,384333 (regressionFit = 4,384329, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(A, _), teamalsoknownas(_, A).  [covers 7,0/28,0 pos, 0,0/0,0 neg]
%     Score = -4,391516 (regressionFit = 4,391513, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(A, C), teamalsoknownas(_, C).  [covers 12,0/28,0 pos, 0,0/0,0 neg]
%     Score = -4,363226 (regressionFit = 4,363223, penalties=3.04E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(A, C), teamplaysagainstteam(C, A).  [covers 15,0/28,0 pos, 0,0/0,0 neg]
%     Score = -4,403358 (regressionFit = 4,403355, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(A, _), teamplaysagainstteam(A, _).  [covers 16,0/28,0 pos, 0,0/0,0 neg]
%     Score = -4,403358 (regressionFit = 4,403355, penalties=3.1500000000000008E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(A, C), teamplaysagainstteam(C, _).  [covers 16,0/28,0 pos, 0,0/0,0 neg]
%     Score = -4,403358 (regressionFit = 4,403355, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(A, _), teamplaysagainstteam(_, A).  [covers 16,0/28,0 pos, 0,0/0,0 neg]
%     Score = -4,403358 (regressionFit = 4,403355, penalties=3.1500000000000008E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(A, C), teamplaysagainstteam(_, C).  [covers 16,0/28,0 pos, 0,0/0,0 neg]
%     Score = -3,967372 (regressionFit = 3,967369, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(A, _), teamplaysinleague(A, _).  [covers 10,0/28,0 pos, 0,0/0,0 neg]
%     Score = -4,174649 (regressionFit = 4,174645, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(A, C), teamplaysinleague(C, _).  [covers 12,0/28,0 pos, 0,0/0,0 neg]

% Consider expanding [#8 of outerLoop #3, bodyLen=2] 'teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(_, A).  [covers 11,0/28,0 pos, 0,0/0,0 neg]' score=-4.436379074715498
%  At # nodes expanded = 8, |OPEN| = 3.  Pruned 22 variant children.  Sending 18 items to OPEN for evaluation and possible insertion.
% Have created 18 valid-on-seeds descendants and have picked up 8 bad extensions.
%     Score = -4,467743 (regressionFit = 4,467740, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(C, A), athleteledsportsteam(_, C).  [covers 3,0/28,0 pos, 0,0/0,0 neg]
%     Score = -4,135399 (regressionFit = 4,135396, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamalsoknownas(_, A), athleteplaysforteam(C, _).  [covers 4,0/28,0 pos, 0,0/0,0 neg]
%     Score = -4,140984 (regressionFit = 4,140981, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(_, A), athleteplaysforteam(_, A).  [covers 5,0/28,0 pos, 0,0/0,0 neg]
%     Score = -4,392943 (regressionFit = 4,392940, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(C, A), athleteplaysforteam(_, C).  [covers 4,0/28,0 pos, 0,0/0,0 neg]
%     Score = -4,399329 (regressionFit = 4,399326, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamalsoknownas(_, A), athleteplaysinleague(C, _).  [covers 7,0/28,0 pos, 0,0/0,0 neg]
%     Score = -4,436380 (regressionFit = 4,436377, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(_, A), athleteplayssport(_, B).  [covers 11,0/28,0 pos, 0,0/0,0 neg]
%     Score = -4,405469 (regressionFit = 4,405466, penalties=3.04E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(C, A), teamalsoknownas(A, C).  [covers 8,0/28,0 pos, 0,0/0,0 neg]
%     Score = -4,405470 (regressionFit = 4,405466, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(_, A), teamalsoknownas(A, _).  [covers 8,0/28,0 pos, 0,0/0,0 neg]
%     Score = -4,436380 (regressionFit = 4,436377, penalties=3.1500000000000008E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(C, A), teamalsoknownas(C, _).  [covers 11,0/28,0 pos, 0,0/0,0 neg]
%     Score = -4,402493 (regressionFit = 4,402489, penalties=3.1500000000000008E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(C, A), teamalsoknownas(_, C).  [covers 10,0/28,0 pos, 0,0/0,0 neg]
%     Score = -4,441688 (regressionFit = 4,441685, penalties=3.1400000000000004E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(C, A), teamplaysagainstteam(A, C).  [covers 5,0/28,0 pos, 0,0/0,0 neg]
%     Score = -4,441688 (regressionFit = 4,441685, penalties=3.1400000000000004E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(C, A), teamplaysagainstteam(C, A).  [covers 5,0/28,0 pos, 0,0/0,0 neg]
%     Score = -4,384333 (regressionFit = 4,384329, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(_, A), teamplaysagainstteam(A, _).  [covers 7,0/28,0 pos, 0,0/0,0 neg]
%     Score = -4,443374 (regressionFit = 4,443371, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(C, A), teamplaysagainstteam(C, _).  [covers 7,0/28,0 pos, 0,0/0,0 neg]
%     Score = -4,384333 (regressionFit = 4,384329, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(_, A), teamplaysagainstteam(_, A).  [covers 7,0/28,0 pos, 0,0/0,0 neg]
%     Score = -4,443374 (regressionFit = 4,443371, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(C, A), teamplaysagainstteam(_, C).  [covers 7,0/28,0 pos, 0,0/0,0 neg]
%     Score = -4,335068 (regressionFit = 4,335065, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(_, A), teamplaysinleague(A, _).  [covers 9,0/28,0 pos, 0,0/0,0 neg]
%     Score = -4,402493 (regressionFit = 4,402489, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(C, A), teamplaysinleague(C, _).  [covers 10,0/28,0 pos, 0,0/0,0 neg]

% Consider expanding [#9 of outerLoop #3, bodyLen=2] 'teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(_, A).  [covers 20,0/28,0 pos, 0,0/0,0 neg]' score=-4.467905218020615
%  At # nodes expanded = 9, |OPEN| = 2.  Pruned 22 variant children.  Sending 19 items to OPEN for evaluation and possible insertion.
% Have created 19 valid-on-seeds descendants and have picked up 9 bad extensions.
%     Score = -4,468254 (regressionFit = 4,468251, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(_, A), athleteledsportsteam(_, A).  [covers 4,0/28,0 pos, 0,0/0,0 neg]
%     Score = -4,174649 (regressionFit = 4,174645, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(C, A), athleteledsportsteam(_, C).  [covers 12,0/28,0 pos, 0,0/0,0 neg]
%     Score = -3,599302 (regressionFit = 3,599298, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysagainstteam(_, A), athleteplaysforteam(C, _).  [covers 3,0/28,0 pos, 0,0/0,0 neg]
%     Score = -4,022186 (regressionFit = 4,022182, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(_, A), athleteplaysforteam(_, A).  [covers 11,0/28,0 pos, 0,0/0,0 neg]
%     Score = -4,363226 (regressionFit = 4,363223, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(C, A), athleteplaysforteam(_, C).  [covers 15,0/28,0 pos, 0,0/0,0 neg]
%     Score = -3,824501 (regressionFit = 3,824498, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysagainstteam(_, A), athleteplaysinleague(C, _).  [covers 16,0/28,0 pos, 0,0/0,0 neg]
%     Score = -4,467906 (regressionFit = 4,467903, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(_, A), athleteplayssport(_, B).  [covers 20,0/28,0 pos, 0,0/0,0 neg]
%     Score = -4,441688 (regressionFit = 4,441685, penalties=3.1400000000000004E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(C, A), teamalsoknownas(C, A).  [covers 5,0/28,0 pos, 0,0/0,0 neg]
%     Score = -4,461429 (regressionFit = 4,461425, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(_, A), teamalsoknownas(A, _).  [covers 8,0/28,0 pos, 0,0/0,0 neg]
%     Score = -4,457997 (regressionFit = 4,457994, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(C, A), teamalsoknownas(C, _).  [covers 12,0/28,0 pos, 0,0/0,0 neg]
%     Score = -4,384333 (regressionFit = 4,384329, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(_, A), teamalsoknownas(_, A).  [covers 7,0/28,0 pos, 0,0/0,0 neg]
%     Score = -4,391516 (regressionFit = 4,391513, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(C, A), teamalsoknownas(_, C).  [covers 12,0/28,0 pos, 0,0/0,0 neg]
%     Score = -4,363226 (regressionFit = 4,363223, penalties=3.04E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(C, A), teamplaysagainstteam(A, C).  [covers 15,0/28,0 pos, 0,0/0,0 neg]
%     Score = -4,403358 (regressionFit = 4,403355, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(_, A), teamplaysagainstteam(A, _).  [covers 16,0/28,0 pos, 0,0/0,0 neg]
%     Score = -4,467906 (regressionFit = 4,467903, penalties=3.1500000000000008E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(C, A), teamplaysagainstteam(C, _).  [covers 20,0/28,0 pos, 0,0/0,0 neg]
%     Score = -4,467906 (regressionFit = 4,467903, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(_, A), teamplaysagainstteam(_, A).  [covers 20,0/28,0 pos, 0,0/0,0 neg]
%     Score = -4,467906 (regressionFit = 4,467903, penalties=3.1500000000000008E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(C, A), teamplaysagainstteam(_, C).  [covers 20,0/28,0 pos, 0,0/0,0 neg]
%     Score = -4,247290 (regressionFit = 4,247286, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(_, A), teamplaysinleague(A, _).  [covers 13,0/28,0 pos, 0,0/0,0 neg]
%     Score = -4,401508 (regressionFit = 4,401505, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(C, A), teamplaysinleague(C, _).  [covers 16,0/28,0 pos, 0,0/0,0 neg]

***** Warning: #12 TOO MANY NODES CONSIDERED (i.e., 'expanded') for 'LearnOneClause': nodesConsidered = 10 and maxNodesToConsider = 10. *****


% The best node found: teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), athleteplaysforteam(_, A).  [covers 7,0/28,0 pos, 0,0/0,0 neg]

% The best node found: teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), athleteplaysforteam(_, A).  [covers 7,0/28,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,160.
% Will extend: teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), athleteplaysforteam(_, A).  [covers 7,0/28,0 pos, 0,0/0,0 neg]
% Path: 2;true,false
Comparing variance: 0.12588614606986254 to score=0.0025 #egs=7.0
Comparing variance: 0.11516789257192024 to score=0.0025 #egs=21.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 7,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,125886)
%         ILP node to extend: teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), athleteplaysforteam(_, A).  [covers 7,0/28,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -0,125886) into position #1 in the search queue (new size=3).
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 21,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,115168)
%         ILP node to extend: teamplayssport(_, A) :- athleteplayssport(_, A).  [covers 28,0/28,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -0,115168) into position #2 in the search queue (new size=4).

% Time for loop #3: 229 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #3, the best clause found is:
%      teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), athleteplaysforteam(_, A).  [covers 7,0/28,0 pos, 0,0/0,0 neg]
% This clause covers 7 positive examples, of which 7 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), athleteplaysforteam(_, A).  [covers 7,0/7,0 pos, 0,0/0,0 neg]'
%     Score = -3,299732 (regressionFit = 3,299729, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), athleteplaysforteam(_, A).  [covers 7,0/7,0 pos, 0,0/0,0 neg]

***** Warning: % Have only 7 positive examples, so cannot choose 10 of them. *****


% Have these 7 positive seeds: 0 1 2 3 4 5 6
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Consider expanding [#1 of outerLoop #4, bodyLen=3] 'teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), athleteplaysforteam(_, A).  [covers 7,0/7,0 pos, 0,0/0,0 neg]' score=-3.2997321164993627
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 16 variant children.  Sending 16 items to OPEN for evaluation and possible insertion.
% Have created 16 valid-on-seeds descendants and have picked up 6 bad extensions.
%     Score = -0,390594 (regressionFit = 0,390590, penalties=4.250000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), athleteplaysforteam(C, A), athleteledsportsteam(C, A).  [covers 3,0/7,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -0,390594): teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), athleteplaysforteam(C, A), athleteledsportsteam(C, A).  [covers 3,0/7,0 pos, 0,0/0,0 neg]
%     Score = -0,538641 (regressionFit = 0,538636, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), athleteplaysforteam(C, A), athleteledsportsteam(C, _).  [covers 4,0/7,0 pos, 0,0/0,0 neg]
%     Score = -0,390594 (regressionFit = 0,390590, penalties=4.4600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), athleteplaysforteam(_, A), athleteledsportsteam(_, A).  [covers 3,0/7,0 pos, 0,0/0,0 neg]
%     Score = -0,755425 (regressionFit = 0,755421, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, _), athleteplaysforteam(_, A), athleteplaysforteam(C, _).  [covers 3,0/7,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.3600000000000015E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), athleteplaysforteam(_, A), athleteplaysforteam(_, A).  [covers 7,0/7,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysforteam(D, A), athleteplaysinleague(D, C).  [covers 1,0/7,0 pos, 0,0/0,0 neg]
%     Score = -0,660492 (regressionFit = 0,660487, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, _), athleteplaysforteam(_, A), athleteplaysinleague(C, _).  [covers 3,0/7,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), athleteplaysforteam(C, A), athleteplaysinleague(C, _).  [covers 2,0/7,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysforteam(_, A), athleteplaysinleague(_, C).  [covers 2,0/7,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), athleteplaysforteam(C, A), athleteplayssport(C, _).  [covers 2,0/7,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.3600000000000015E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), athleteplaysforteam(_, A), athleteplayssport(_, B).  [covers 7,0/7,0 pos, 0,0/0,0 neg]
%     Score = -0,853215 (regressionFit = 0,853211, penalties=4.4600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), athleteplaysforteam(_, A), teamalsoknownas(A, _).  [covers 3,0/7,0 pos, 0,0/0,0 neg]
%     Score = -0,878530 (regressionFit = 0,878526, penalties=4.4600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), athleteplaysforteam(_, A), teamalsoknownas(_, A).  [covers 4,0/7,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.4600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), athleteplaysforteam(_, A), teamplaysagainstteam(A, _).  [covers 7,0/7,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.4600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), athleteplaysforteam(_, A), teamplaysagainstteam(_, A).  [covers 7,0/7,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysforteam(_, A), teamplaysinleague(_, C).  [covers 7,0/7,0 pos, 0,0/0,0 neg]

% Consider expanding [#2 of outerLoop #4, bodyLen=4] 'teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), athleteplaysforteam(C, A), athleteledsportsteam(C, A).  [covers 3,0/7,0 pos, 0,0/0,0 neg]' score=-0.39059396417092457
%  At # nodes expanded = 2, |OPEN| = 15.  Pruned 14 variant children.  Sending 9 items to OPEN for evaluation and possible insertion.
% Have created 9 valid-on-seeds descendants and have picked up 7 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=5.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, _), athleteplaysforteam(D, A), athleteledsportsteam(D, A), athleteplaysforteam(C, _).  [covers 1,0/7,0 pos, 0,0/0,0 neg]
%     Score = -0,390595 (regressionFit = 0,390590, penalties=5.2600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), athleteplaysforteam(C, A), athleteledsportsteam(C, A), athleteplaysforteam(_, A).  [covers 3,0/7,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.2600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, _), athleteplaysforteam(D, A), athleteledsportsteam(D, A), athleteplaysinleague(C, _).  [covers 2,0/7,0 pos, 0,0/0,0 neg]
%     Score = -0,390595 (regressionFit = 0,390590, penalties=5.2600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), athleteplaysforteam(C, A), athleteledsportsteam(C, A), athleteplayssport(_, B).  [covers 3,0/7,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.36E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), athleteplaysforteam(C, A), athleteledsportsteam(C, A), teamalsoknownas(A, _).  [covers 2,0/7,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.36E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), athleteplaysforteam(C, A), athleteledsportsteam(C, A), teamalsoknownas(_, A).  [covers 2,0/7,0 pos, 0,0/0,0 neg]
%     Score = -0,390595 (regressionFit = 0,390590, penalties=5.36E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), athleteplaysforteam(C, A), athleteledsportsteam(C, A), teamplaysagainstteam(A, _).  [covers 3,0/7,0 pos, 0,0/0,0 neg]
%     Score = -0,390595 (regressionFit = 0,390590, penalties=5.36E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), athleteplaysforteam(C, A), athleteledsportsteam(C, A), teamplaysagainstteam(_, A).  [covers 3,0/7,0 pos, 0,0/0,0 neg]
%     Score = -0,390595 (regressionFit = 0,390590, penalties=5.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysforteam(D, A), athleteledsportsteam(D, A), teamplaysinleague(_, C).  [covers 3,0/7,0 pos, 0,0/0,0 neg]

% Consider expanding [#3 of outerLoop #4, bodyLen=4] 'teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), athleteplaysforteam(_, A), athleteledsportsteam(_, A).  [covers 3,0/7,0 pos, 0,0/0,0 neg]' score=-0.39059417417092457
%  At # nodes expanded = 3, |OPEN| = 14.  Pruned 22 variant children.  Sending 10 items to OPEN for evaluation and possible insertion.
% Have created 10 valid-on-seeds descendants and have picked up 10 bad extensions.
%     Score = -0,390595 (regressionFit = 0,390590, penalties=5.2600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), athleteplaysforteam(_, A), athleteledsportsteam(C, A), athleteplaysforteam(C, A).  [covers 3,0/7,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.370000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, _), athleteplaysforteam(_, A), athleteledsportsteam(_, A), athleteplaysforteam(C, _).  [covers 1,0/7,0 pos, 0,0/0,0 neg]
%     Score = -0,390595 (regressionFit = 0,390590, penalties=5.47E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), athleteplaysforteam(_, A), athleteledsportsteam(_, A), athleteplaysforteam(_, A).  [covers 3,0/7,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.47E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, _), athleteplaysforteam(_, A), athleteledsportsteam(_, A), athleteplaysinleague(C, _).  [covers 2,0/7,0 pos, 0,0/0,0 neg]
%     Score = -0,390595 (regressionFit = 0,390590, penalties=5.47E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), athleteplaysforteam(_, A), athleteledsportsteam(_, A), athleteplayssport(_, B).  [covers 3,0/7,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.57E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), athleteplaysforteam(_, A), athleteledsportsteam(_, A), teamalsoknownas(A, _).  [covers 2,0/7,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.57E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), athleteplaysforteam(_, A), athleteledsportsteam(_, A), teamalsoknownas(_, A).  [covers 2,0/7,0 pos, 0,0/0,0 neg]
%     Score = -0,390595 (regressionFit = 0,390590, penalties=5.57E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), athleteplaysforteam(_, A), athleteledsportsteam(_, A), teamplaysagainstteam(A, _).  [covers 3,0/7,0 pos, 0,0/0,0 neg]
%     Score = -0,390595 (regressionFit = 0,390590, penalties=5.57E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), athleteplaysforteam(_, A), athleteledsportsteam(_, A), teamplaysagainstteam(_, A).  [covers 3,0/7,0 pos, 0,0/0,0 neg]
%     Score = -0,390595 (regressionFit = 0,390590, penalties=5.370000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysforteam(_, A), athleteledsportsteam(_, A), teamplaysinleague(_, C).  [covers 3,0/7,0 pos, 0,0/0,0 neg]

% Consider expanding [#4 of outerLoop #4, bodyLen=4] 'teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), athleteplaysforteam(C, A), athleteledsportsteam(C, _).  [covers 4,0/7,0 pos, 0,0/0,0 neg]' score=-0.5386408291212574
%  At # nodes expanded = 4, |OPEN| = 13.  Pruned 36 variant children.  Sending 19 items to OPEN for evaluation and possible insertion.
% Have created 19 valid-on-seeds descendants and have picked up 17 bad extensions.
%     Score = -0,538642 (regressionFit = 0,538636, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), athleteplaysforteam(C, A), athleteledsportsteam(C, D), athleteledsportsteam(_, D).  [covers 4,0/7,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, _), athleteplaysforteam(D, A), athleteledsportsteam(D, _), athleteplaysforteam(C, _).  [covers 1,0/7,0 pos, 0,0/0,0 neg]
%     Score = -0,538642 (regressionFit = 0,538636, penalties=5.370000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), athleteplaysforteam(C, A), athleteledsportsteam(C, _), athleteplaysforteam(_, A).  [covers 4,0/7,0 pos, 0,0/0,0 neg]
%     Score = -0,390595 (regressionFit = 0,390590, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), athleteplaysforteam(C, A), athleteledsportsteam(C, D), athleteplaysforteam(_, D).  [covers 3,0/7,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.2600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysforteam(D, A), athleteledsportsteam(D, _), athleteplaysinleague(D, C).  [covers 1,0/7,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.37E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, _), athleteplaysforteam(D, A), athleteledsportsteam(D, _), athleteplaysinleague(C, _).  [covers 2,0/7,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.37E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysforteam(D, A), athleteledsportsteam(D, _), athleteplaysinleague(_, C).  [covers 1,0/7,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.370000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), athleteplaysforteam(C, A), athleteledsportsteam(C, _), athleteplayssport(C, _).  [covers 1,0/7,0 pos, 0,0/0,0 neg]
%     Score = -0,538642 (regressionFit = 0,538636, penalties=5.370000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), athleteplaysforteam(C, A), athleteledsportsteam(C, _), athleteplayssport(_, B).  [covers 4,0/7,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.47E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), athleteplaysforteam(C, A), athleteledsportsteam(C, _), teamalsoknownas(A, _).  [covers 2,0/7,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.37E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), athleteplaysforteam(C, A), athleteledsportsteam(C, D), teamalsoknownas(D, _).  [covers 2,0/7,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.47E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), athleteplaysforteam(C, A), athleteledsportsteam(C, _), teamalsoknownas(_, A).  [covers 2,0/7,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.37E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), athleteplaysforteam(C, A), athleteledsportsteam(C, D), teamalsoknownas(_, D).  [covers 2,0/7,0 pos, 0,0/0,0 neg]
%     Score = -0,538642 (regressionFit = 0,538636, penalties=5.47E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), athleteplaysforteam(C, A), athleteledsportsteam(C, _), teamplaysagainstteam(A, _).  [covers 4,0/7,0 pos, 0,0/0,0 neg]
%     Score = -0,390595 (regressionFit = 0,390590, penalties=5.37E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), athleteplaysforteam(C, A), athleteledsportsteam(C, D), teamplaysagainstteam(D, _).  [covers 3,0/7,0 pos, 0,0/0,0 neg]
%     Score = -0,538642 (regressionFit = 0,538636, penalties=5.47E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), athleteplaysforteam(C, A), athleteledsportsteam(C, _), teamplaysagainstteam(_, A).  [covers 4,0/7,0 pos, 0,0/0,0 neg]
%     Score = -0,390595 (regressionFit = 0,390590, penalties=5.37E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), athleteplaysforteam(C, A), athleteledsportsteam(C, D), teamplaysagainstteam(_, D).  [covers 3,0/7,0 pos, 0,0/0,0 neg]
%     Score = -0,538642 (regressionFit = 0,538636, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), athleteplaysforteam(C, A), athleteledsportsteam(C, D), teamplaysinleague(D, _).  [covers 4,0/7,0 pos, 0,0/0,0 neg]
%     Score = -0,538642 (regressionFit = 0,538636, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysforteam(D, A), athleteledsportsteam(D, _), teamplaysinleague(_, C).  [covers 4,0/7,0 pos, 0,0/0,0 neg]

% Consider expanding [#5 of outerLoop #4, bodyLen=4] 'teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, _), athleteplaysforteam(_, A), athleteplaysinleague(C, _).  [covers 3,0/7,0 pos, 0,0/0,0 neg]' score=-0.6604918382678594
%  At # nodes expanded = 5, |OPEN| = 12.  Pruned 20 variant children.  Sending 12 items to OPEN for evaluation and possible insertion.
% Have created 12 valid-on-seeds descendants and have picked up 9 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=5.2600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, _), athleteplaysforteam(D, A), athleteplaysinleague(C, _), athleteledsportsteam(D, A).  [covers 2,0/7,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.47E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, _), athleteplaysforteam(_, A), athleteplaysinleague(C, _), athleteledsportsteam(_, A).  [covers 2,0/7,0 pos, 0,0/0,0 neg]
%     Score = -0,660493 (regressionFit = 0,660487, penalties=5.370000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, _), athleteplaysforteam(_, A), athleteplaysinleague(C, _), athleteplaysforteam(_, A).  [covers 3,0/7,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysforteam(_, A), athleteplaysinleague(C, _), athleteplaysinleague(_, D).  [covers 1,0/7,0 pos, 0,0/0,0 neg]
%     Score = -0,660493 (regressionFit = 0,660487, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, _), athleteplaysforteam(_, A), athleteplaysinleague(C, D), athleteplaysinleague(_, D).  [covers 3,0/7,0 pos, 0,0/0,0 neg]
%     Score = -0,660493 (regressionFit = 0,660487, penalties=5.370000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, _), athleteplaysforteam(_, A), athleteplaysinleague(C, _), athleteplayssport(_, B).  [covers 3,0/7,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.47E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, _), athleteplaysforteam(_, A), athleteplaysinleague(C, _), teamalsoknownas(A, _).  [covers 1,0/7,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.47E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, _), athleteplaysforteam(_, A), athleteplaysinleague(C, _), teamalsoknownas(_, A).  [covers 1,0/7,0 pos, 0,0/0,0 neg]
%     Score = -0,660493 (regressionFit = 0,660487, penalties=5.47E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, _), athleteplaysforteam(_, A), athleteplaysinleague(C, _), teamplaysagainstteam(A, _).  [covers 3,0/7,0 pos, 0,0/0,0 neg]
%     Score = -0,660493 (regressionFit = 0,660487, penalties=5.47E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, _), athleteplaysforteam(_, A), athleteplaysinleague(C, _), teamplaysagainstteam(_, A).  [covers 3,0/7,0 pos, 0,0/0,0 neg]
%     Score = -0,660493 (regressionFit = 0,660487, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysforteam(_, A), athleteplaysinleague(C, _), teamplaysinleague(_, D).  [covers 3,0/7,0 pos, 0,0/0,0 neg]
%     Score = -0,660493 (regressionFit = 0,660487, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, _), athleteplaysforteam(_, A), athleteplaysinleague(C, D), teamplaysinleague(_, D).  [covers 3,0/7,0 pos, 0,0/0,0 neg]

% Consider expanding [#6 of outerLoop #4, bodyLen=4] 'teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, _), athleteplaysforteam(_, A), athleteplaysforteam(C, _).  [covers 3,0/7,0 pos, 0,0/0,0 neg]' score=-0.7554252392865693
%  At # nodes expanded = 6, |OPEN| = 11.  Pruned 36 variant children.  Sending 16 items to OPEN for evaluation and possible insertion.
% Have created 16 valid-on-seeds descendants and have picked up 17 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=5.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, _), athleteplaysforteam(D, A), athleteplaysforteam(C, _), athleteledsportsteam(D, A).  [covers 1,0/7,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.370000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, _), athleteplaysforteam(_, A), athleteplaysforteam(C, _), athleteledsportsteam(_, A).  [covers 1,0/7,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, _), athleteplaysforteam(_, A), athleteplaysforteam(C, D), athleteledsportsteam(_, D).  [covers 1,0/7,0 pos, 0,0/0,0 neg]
%     Score = -0,755426 (regressionFit = 0,755421, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, _), athleteplaysforteam(_, A), athleteplaysforteam(C, _), athleteplaysforteam(_, A).  [covers 3,0/7,0 pos, 0,0/0,0 neg]
%     Score = -0,755426 (regressionFit = 0,755421, penalties=5.17E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, _), athleteplaysforteam(_, A), athleteplaysforteam(C, D), athleteplaysforteam(_, D).  [covers 3,0/7,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, _), athleteplaysforteam(D, A), athleteplaysforteam(C, _), athleteplaysinleague(D, _).  [covers 1,0/7,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.17E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, _), athleteplaysforteam(D, A), athleteplaysforteam(C, _), athleteplayssport(D, _).  [covers 1,0/7,0 pos, 0,0/0,0 neg]
%     Score = -0,755426 (regressionFit = 0,755421, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, _), athleteplaysforteam(_, A), athleteplaysforteam(C, _), athleteplayssport(_, B).  [covers 3,0/7,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.370000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, _), athleteplaysforteam(_, A), athleteplaysforteam(C, _), teamalsoknownas(A, _).  [covers 2,0/7,0 pos, 0,0/0,0 neg]
%     Score = -0,755426 (regressionFit = 0,755421, penalties=5.370000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, _), athleteplaysforteam(_, A), athleteplaysforteam(C, _), teamalsoknownas(_, A).  [covers 3,0/7,0 pos, 0,0/0,0 neg]
%     Score = -0,755426 (regressionFit = 0,755421, penalties=5.370000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, _), athleteplaysforteam(_, A), athleteplaysforteam(C, _), teamplaysagainstteam(A, _).  [covers 3,0/7,0 pos, 0,0/0,0 neg]
%     Score = -0,755426 (regressionFit = 0,755421, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, _), athleteplaysforteam(_, A), athleteplaysforteam(C, D), teamplaysagainstteam(D, _).  [covers 3,0/7,0 pos, 0,0/0,0 neg]
%     Score = -0,755426 (regressionFit = 0,755421, penalties=5.370000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, _), athleteplaysforteam(_, A), athleteplaysforteam(C, _), teamplaysagainstteam(_, A).  [covers 3,0/7,0 pos, 0,0/0,0 neg]
%     Score = -0,755426 (regressionFit = 0,755421, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, _), athleteplaysforteam(_, A), athleteplaysforteam(C, D), teamplaysagainstteam(_, D).  [covers 3,0/7,0 pos, 0,0/0,0 neg]
%     Score = -0,755426 (regressionFit = 0,755421, penalties=5.17E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, _), athleteplaysforteam(_, A), athleteplaysforteam(C, D), teamplaysinleague(D, _).  [covers 3,0/7,0 pos, 0,0/0,0 neg]
%     Score = -0,755426 (regressionFit = 0,755421, penalties=5.17E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysforteam(_, A), athleteplaysforteam(C, _), teamplaysinleague(_, D).  [covers 3,0/7,0 pos, 0,0/0,0 neg]

% Consider expanding [#7 of outerLoop #4, bodyLen=4] 'teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), athleteplaysforteam(_, A), teamalsoknownas(A, _).  [covers 3,0/7,0 pos, 0,0/0,0 neg]' score=-0.8532150018335782
%  At # nodes expanded = 7, |OPEN| = 10.  Pruned 36 variant children.  Sending 19 items to OPEN for evaluation and possible insertion.
% Have created 19 valid-on-seeds descendants and have picked up 13 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=5.36E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), athleteplaysforteam(C, A), teamalsoknownas(A, _), athleteledsportsteam(C, A).  [covers 2,0/7,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.57E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), athleteplaysforteam(_, A), teamalsoknownas(A, _), athleteledsportsteam(_, A).  [covers 2,0/7,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.370000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, _), athleteplaysforteam(_, A), teamalsoknownas(A, _), athleteplaysforteam(C, _).  [covers 2,0/7,0 pos, 0,0/0,0 neg]
%     Score = -0,853216 (regressionFit = 0,853211, penalties=5.47E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), athleteplaysforteam(_, A), teamalsoknownas(A, _), athleteplaysforteam(_, A).  [covers 3,0/7,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.47E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, _), athleteplaysforteam(_, A), teamalsoknownas(A, _), athleteplaysinleague(C, _).  [covers 1,0/7,0 pos, 0,0/0,0 neg]
%     Score = -0,853216 (regressionFit = 0,853211, penalties=5.47E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), athleteplaysforteam(_, A), teamalsoknownas(A, _), athleteplayssport(_, B).  [covers 3,0/7,0 pos, 0,0/0,0 neg]
%     Score = -0,853216 (regressionFit = 0,853211, penalties=5.2600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), athleteplaysforteam(_, A), teamalsoknownas(A, C), teamalsoknownas(C, A).  [covers 3,0/7,0 pos, 0,0/0,0 neg]
%     Score = -0,853216 (regressionFit = 0,853211, penalties=5.47E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), athleteplaysforteam(_, A), teamalsoknownas(A, _), teamalsoknownas(A, _).  [covers 3,0/7,0 pos, 0,0/0,0 neg]
%     Score = -0,853216 (regressionFit = 0,853211, penalties=5.370000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), athleteplaysforteam(_, A), teamalsoknownas(A, C), teamalsoknownas(C, _).  [covers 3,0/7,0 pos, 0,0/0,0 neg]
%     Score = -0,853216 (regressionFit = 0,853211, penalties=5.47E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), athleteplaysforteam(_, A), teamalsoknownas(A, _), teamalsoknownas(_, A).  [covers 3,0/7,0 pos, 0,0/0,0 neg]
%     Score = -0,853216 (regressionFit = 0,853211, penalties=5.370000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), athleteplaysforteam(_, A), teamalsoknownas(A, C), teamalsoknownas(_, C).  [covers 3,0/7,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.36E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), athleteplaysforteam(_, A), teamalsoknownas(A, C), teamplaysagainstteam(A, C).  [covers 2,0/7,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.36E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), athleteplaysforteam(_, A), teamalsoknownas(A, C), teamplaysagainstteam(C, A).  [covers 2,0/7,0 pos, 0,0/0,0 neg]
%     Score = -0,853216 (regressionFit = 0,853211, penalties=5.57E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), athleteplaysforteam(_, A), teamalsoknownas(A, _), teamplaysagainstteam(A, _).  [covers 3,0/7,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.47E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), athleteplaysforteam(_, A), teamalsoknownas(A, C), teamplaysagainstteam(C, _).  [covers 2,0/7,0 pos, 0,0/0,0 neg]
%     Score = -0,853216 (regressionFit = 0,853211, penalties=5.57E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), athleteplaysforteam(_, A), teamalsoknownas(A, _), teamplaysagainstteam(_, A).  [covers 3,0/7,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.47E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), athleteplaysforteam(_, A), teamalsoknownas(A, C), teamplaysagainstteam(_, C).  [covers 2,0/7,0 pos, 0,0/0,0 neg]
%     Score = -0,853216 (regressionFit = 0,853211, penalties=5.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysforteam(_, A), teamalsoknownas(A, D), teamplaysinleague(D, C).  [covers 3,0/7,0 pos, 0,0/0,0 neg]
%     Score = -0,853216 (regressionFit = 0,853211, penalties=5.370000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysforteam(_, A), teamalsoknownas(A, _), teamplaysinleague(_, C).  [covers 3,0/7,0 pos, 0,0/0,0 neg]

% Consider expanding [#8 of outerLoop #4, bodyLen=4] 'teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), athleteplaysforteam(_, A), teamalsoknownas(_, A).  [covers 4,0/7,0 pos, 0,0/0,0 neg]' score=-0.878530083246313
%  At # nodes expanded = 8, |OPEN| = 9.  Pruned 36 variant children.  Sending 23 items to OPEN for evaluation and possible insertion.
% Have created 23 valid-on-seeds descendants and have picked up 13 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=5.36E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), athleteplaysforteam(C, A), teamalsoknownas(_, A), athleteledsportsteam(C, A).  [covers 2,0/7,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.57E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), athleteplaysforteam(_, A), teamalsoknownas(_, A), athleteledsportsteam(_, A).  [covers 2,0/7,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.47E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), athleteplaysforteam(_, A), teamalsoknownas(C, A), athleteledsportsteam(_, C).  [covers 1,0/7,0 pos, 0,0/0,0 neg]
%     Score = -0,755426 (regressionFit = 0,755421, penalties=5.370000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, _), athleteplaysforteam(_, A), teamalsoknownas(_, A), athleteplaysforteam(C, _).  [covers 3,0/7,0 pos, 0,0/0,0 neg]
%     Score = -0,878531 (regressionFit = 0,878526, penalties=5.47E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), athleteplaysforteam(_, A), teamalsoknownas(_, A), athleteplaysforteam(_, A).  [covers 4,0/7,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.370000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), athleteplaysforteam(_, A), teamalsoknownas(C, A), athleteplaysforteam(_, C).  [covers 1,0/7,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.47E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, _), athleteplaysforteam(_, A), teamalsoknownas(_, A), athleteplaysinleague(C, _).  [covers 1,0/7,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.47E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), athleteplaysforteam(C, A), teamalsoknownas(_, A), athleteplaysinleague(C, _).  [covers 1,0/7,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.370000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), athleteplaysforteam(C, A), teamalsoknownas(_, A), athleteplayssport(C, _).  [covers 1,0/7,0 pos, 0,0/0,0 neg]
%     Score = -0,878531 (regressionFit = 0,878526, penalties=5.47E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), athleteplaysforteam(_, A), teamalsoknownas(_, A), athleteplayssport(_, B).  [covers 4,0/7,0 pos, 0,0/0,0 neg]
%     Score = -0,853216 (regressionFit = 0,853211, penalties=5.2600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), athleteplaysforteam(_, A), teamalsoknownas(C, A), teamalsoknownas(A, C).  [covers 3,0/7,0 pos, 0,0/0,0 neg]
%     Score = -0,853216 (regressionFit = 0,853211, penalties=5.47E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), athleteplaysforteam(_, A), teamalsoknownas(_, A), teamalsoknownas(A, _).  [covers 3,0/7,0 pos, 0,0/0,0 neg]
%     Score = -0,878531 (regressionFit = 0,878526, penalties=5.370000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), athleteplaysforteam(_, A), teamalsoknownas(C, A), teamalsoknownas(C, _).  [covers 4,0/7,0 pos, 0,0/0,0 neg]
%     Score = -0,878531 (regressionFit = 0,878526, penalties=5.370000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), athleteplaysforteam(_, A), teamalsoknownas(C, A), teamalsoknownas(_, C).  [covers 4,0/7,0 pos, 0,0/0,0 neg]
%     Score = -0,851868 (regressionFit = 0,851863, penalties=5.36E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), athleteplaysforteam(_, A), teamalsoknownas(C, A), teamplaysagainstteam(A, C).  [covers 3,0/7,0 pos, 0,0/0,0 neg]
%     Score = -0,851868 (regressionFit = 0,851863, penalties=5.36E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), athleteplaysforteam(_, A), teamalsoknownas(C, A), teamplaysagainstteam(C, A).  [covers 3,0/7,0 pos, 0,0/0,0 neg]
%     Score = -0,878531 (regressionFit = 0,878526, penalties=5.57E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), athleteplaysforteam(_, A), teamalsoknownas(_, A), teamplaysagainstteam(A, _).  [covers 4,0/7,0 pos, 0,0/0,0 neg]
%     Score = -0,851868 (regressionFit = 0,851863, penalties=5.47E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), athleteplaysforteam(_, A), teamalsoknownas(C, A), teamplaysagainstteam(C, _).  [covers 3,0/7,0 pos, 0,0/0,0 neg]
%     Score = -0,878531 (regressionFit = 0,878526, penalties=5.57E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), athleteplaysforteam(_, A), teamalsoknownas(_, A), teamplaysagainstteam(_, A).  [covers 4,0/7,0 pos, 0,0/0,0 neg]
%     Score = -0,851868 (regressionFit = 0,851863, penalties=5.47E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), athleteplaysforteam(_, A), teamalsoknownas(C, A), teamplaysagainstteam(_, C).  [covers 3,0/7,0 pos, 0,0/0,0 neg]
%     Score = -0,853216 (regressionFit = 0,853211, penalties=5.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysforteam(_, A), teamalsoknownas(D, A), teamplaysinleague(D, C).  [covers 3,0/7,0 pos, 0,0/0,0 neg]
%     Score = -0,878531 (regressionFit = 0,878526, penalties=5.370000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), athleteplaysforteam(_, A), teamalsoknownas(C, A), teamplaysinleague(C, _).  [covers 4,0/7,0 pos, 0,0/0,0 neg]
%     Score = -0,878531 (regressionFit = 0,878526, penalties=5.370000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysforteam(_, A), teamalsoknownas(_, A), teamplaysinleague(_, C).  [covers 4,0/7,0 pos, 0,0/0,0 neg]

% Consider expanding [#9 of outerLoop #4, bodyLen=4] 'teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), athleteplaysforteam(_, A), athleteplaysforteam(_, A).  [covers 7,0/7,0 pos, 0,0/0,0 neg]' score=-Infinity
%  At # nodes expanded = 9, |OPEN| = 8.  Pruned 22 variant children.  Sending 21 items to OPEN for evaluation and possible insertion.
% Have created 21 valid-on-seeds descendants and have picked up 7 bad extensions.
%     Score = -0,390595 (regressionFit = 0,390590, penalties=5.2600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), athleteplaysforteam(C, A), athleteplaysforteam(_, A), athleteledsportsteam(C, A).  [covers 3,0/7,0 pos, 0,0/0,0 neg]
%     Score = -0,390595 (regressionFit = 0,390590, penalties=5.2600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), athleteplaysforteam(_, A), athleteplaysforteam(C, A), athleteledsportsteam(C, A).  [covers 3,0/7,0 pos, 0,0/0,0 neg]
%     Score = -0,538642 (regressionFit = 0,538636, penalties=5.370000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), athleteplaysforteam(C, A), athleteplaysforteam(_, A), athleteledsportsteam(C, _).  [covers 4,0/7,0 pos, 0,0/0,0 neg]
%     Score = -0,538642 (regressionFit = 0,538636, penalties=5.370000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), athleteplaysforteam(_, A), athleteplaysforteam(C, A), athleteledsportsteam(C, _).  [covers 4,0/7,0 pos, 0,0/0,0 neg]
%     Score = -0,390595 (regressionFit = 0,390590, penalties=5.47E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), athleteplaysforteam(_, A), athleteplaysforteam(_, A), athleteledsportsteam(_, A).  [covers 3,0/7,0 pos, 0,0/0,0 neg]
%     Score = -0,755426 (regressionFit = 0,755421, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, _), athleteplaysforteam(_, A), athleteplaysforteam(_, A), athleteplaysforteam(C, _).  [covers 3,0/7,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.37E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), athleteplaysforteam(_, A), athleteplaysforteam(_, A), athleteplaysforteam(_, A).  [covers 7,0/7,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysforteam(D, A), athleteplaysforteam(_, A), athleteplaysinleague(D, C).  [covers 1,0/7,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysforteam(_, A), athleteplaysforteam(D, A), athleteplaysinleague(D, C).  [covers 1,0/7,0 pos, 0,0/0,0 neg]
%     Score = -0,660493 (regressionFit = 0,660487, penalties=5.370000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, _), athleteplaysforteam(_, A), athleteplaysforteam(_, A), athleteplaysinleague(C, _).  [covers 3,0/7,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.370000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), athleteplaysforteam(C, A), athleteplaysforteam(_, A), athleteplaysinleague(C, _).  [covers 2,0/7,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.370000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), athleteplaysforteam(_, A), athleteplaysforteam(C, A), athleteplaysinleague(C, _).  [covers 2,0/7,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.370000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysforteam(_, A), athleteplaysforteam(_, A), athleteplaysinleague(_, C).  [covers 2,0/7,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), athleteplaysforteam(C, A), athleteplaysforteam(_, A), athleteplayssport(C, _).  [covers 2,0/7,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), athleteplaysforteam(_, A), athleteplaysforteam(C, A), athleteplayssport(C, _).  [covers 2,0/7,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.37E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), athleteplaysforteam(_, A), athleteplaysforteam(_, A), athleteplayssport(_, B).  [covers 7,0/7,0 pos, 0,0/0,0 neg]
%     Score = -0,853216 (regressionFit = 0,853211, penalties=5.47E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), athleteplaysforteam(_, A), athleteplaysforteam(_, A), teamalsoknownas(A, _).  [covers 3,0/7,0 pos, 0,0/0,0 neg]
%     Score = -0,878531 (regressionFit = 0,878526, penalties=5.47E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), athleteplaysforteam(_, A), athleteplaysforteam(_, A), teamalsoknownas(_, A).  [covers 4,0/7,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.47E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), athleteplaysforteam(_, A), athleteplaysforteam(_, A), teamplaysagainstteam(A, _).  [covers 7,0/7,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.47E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), athleteplaysforteam(_, A), athleteplaysforteam(_, A), teamplaysagainstteam(_, A).  [covers 7,0/7,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysforteam(_, A), athleteplaysforteam(_, A), teamplaysinleague(_, C).  [covers 7,0/7,0 pos, 0,0/0,0 neg]

***** Warning: #13 TOO MANY NODES CONSIDERED (i.e., 'expanded') for 'LearnOneClause': nodesConsidered = 10 and maxNodesToConsider = 10. *****


% The best node found: teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), athleteplaysforteam(C, A), athleteledsportsteam(C, A).  [covers 3,0/7,0 pos, 0,0/0,0 neg]

% The best node found: teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), athleteplaysforteam(C, A), athleteledsportsteam(C, A).  [covers 3,0/7,0 pos, 0,0/0,0 neg]

% Expanding node at Level 3 with score = -0,126.
% Will extend: teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), athleteplaysforteam(C, A), athleteledsportsteam(C, A).  [covers 3,0/7,0 pos, 0,0/0,0 neg]
% Path: 2;true,false,true
Comparing variance: 0.10683767642546453 to score=0.0025 #egs=3.0
Comparing variance: 0.017519171223632744 to score=0.0025 #egs=4.0
%   Creating a TRUE-branch and FALSE-branch leaves because level = 3 >= 3

% Time for loop #4: 294 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #4, the best clause found is:
%      teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), athleteplaysforteam(C, A), athleteledsportsteam(C, A).  [covers 3,0/7,0 pos, 0,0/0,0 neg]
% This clause covers 3 positive examples, of which 3 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'teamplayssport(_, A) :- athleteplayssport(_, A).  [covers 28,0/21,0 pos, 0,0/0,0 neg]'
%     Score = -14,761118 (regressionFit = 14,761117, penalties=1.23E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(_, A).  [covers 21,0/21,0 pos, 0,0/0,0 neg]

% Have these 7 positive seeds: 0 3 6 8 12 14 15
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Consider expanding [#1 of outerLoop #5, bodyLen=1] 'teamplayssport(_, A) :- athleteplayssport(_, A).  [covers 21,0/21,0 pos, 0,0/0,0 neg]' score=-14.761117809573866
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 8 variant children.  Sending 9 items to OPEN for evaluation and possible insertion.
% Have created 9 valid-on-seeds descendants and have picked up 15 bad extensions.
%     Score = -2,415518 (regressionFit = 2,415516, penalties=2.24E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysforteam(B, _).  [covers 3,0/21,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -2,415518): teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysforteam(B, _).  [covers 3,0/21,0 pos, 0,0/0,0 neg]
%     Score = -2,394579 (regressionFit = 2,394577, penalties=2.24E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), athleteplaysforteam(_, A).  [covers 4,0/21,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -2,394579): teamplayssport(A, B) :- athleteplayssport(_, B), athleteplaysforteam(_, A).  [covers 4,0/21,0 pos, 0,0/0,0 neg]
%     Score = -2,352478 (regressionFit = 2,352476, penalties=2.24E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _).  [covers 17,0/21,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -2,352478): teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _).  [covers 17,0/21,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(_, A), athleteplayssport(_, A).  [covers 21,0/21,0 pos, 0,0/0,0 neg]
%     Score = -2,194288 (regressionFit = 2,194286, penalties=2.24E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(A, _).  [covers 8,0/21,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -2,194288): teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(A, _).  [covers 8,0/21,0 pos, 0,0/0,0 neg]
%     Score = -2,417835 (regressionFit = 2,417833, penalties=2.24E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(_, A).  [covers 7,0/21,0 pos, 0,0/0,0 neg]
%     Score = -2,310368 (regressionFit = 2,310366, penalties=2.24E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(A, _).  [covers 9,0/21,0 pos, 0,0/0,0 neg]
%     Score = -2,210544 (regressionFit = 2,210542, penalties=2.24E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(_, A).  [covers 13,0/21,0 pos, 0,0/0,0 neg]
%     Score = -2,415566 (regressionFit = 2,415563, penalties=2.24E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _).  [covers 9,0/21,0 pos, 0,0/0,0 neg]

% Consider expanding [#2 of outerLoop #5, bodyLen=2] 'teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(A, _).  [covers 8,0/21,0 pos, 0,0/0,0 neg]' score=-2.194287822404499
%  At # nodes expanded = 2, |OPEN| = 8.  Pruned 22 variant children.  Sending 9 items to OPEN for evaluation and possible insertion.
% Have created 9 valid-on-seeds descendants and have picked up 10 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamalsoknownas(A, _), athleteplaysforteam(C, _).  [covers 1,0/21,0 pos, 0,0/0,0 neg]
%     Score = -2,309035 (regressionFit = 2,309032, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamalsoknownas(A, _), athleteplaysinleague(C, _).  [covers 7,0/21,0 pos, 0,0/0,0 neg]
%     Score = -2,194289 (regressionFit = 2,194286, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(A, _), athleteplayssport(_, B).  [covers 8,0/21,0 pos, 0,0/0,0 neg]
%     Score = -2,226922 (regressionFit = 2,226919, penalties=3.04E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(A, C), teamalsoknownas(C, A).  [covers 5,0/21,0 pos, 0,0/0,0 neg]
%     Score = -2,210963 (regressionFit = 2,210960, penalties=3.1500000000000008E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(A, C), teamalsoknownas(C, _).  [covers 7,0/21,0 pos, 0,0/0,0 neg]
%     Score = -2,226923 (regressionFit = 2,226919, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(A, _), teamalsoknownas(_, A).  [covers 5,0/21,0 pos, 0,0/0,0 neg]
%     Score = -2,194289 (regressionFit = 2,194286, penalties=3.1500000000000008E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(A, C), teamalsoknownas(_, C).  [covers 8,0/21,0 pos, 0,0/0,0 neg]
%     Score = -2,258129 (regressionFit = 2,258125, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(A, _), teamplaysinleague(A, _).  [covers 5,0/21,0 pos, 0,0/0,0 neg]
%     Score = -2,210964 (regressionFit = 2,210960, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(A, C), teamplaysinleague(C, _).  [covers 7,0/21,0 pos, 0,0/0,0 neg]

% Consider expanding [#3 of outerLoop #5, bodyLen=2] 'teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(_, A).  [covers 13,0/21,0 pos, 0,0/0,0 neg]' score=-2.2105442792275984
%  At # nodes expanded = 3, |OPEN| = 7.  Pruned 22 variant children.  Sending 16 items to OPEN for evaluation and possible insertion.
% Have created 16 valid-on-seeds descendants and have picked up 9 bad extensions.
%     Score = -2,361196 (regressionFit = 2,361192, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(C, A), athleteledsportsteam(_, C).  [covers 5,0/21,0 pos, 0,0/0,0 neg]
%     Score = -2,394580 (regressionFit = 2,394577, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(_, A), athleteplaysforteam(_, A).  [covers 4,0/21,0 pos, 0,0/0,0 neg]
%     Score = -2,326199 (regressionFit = 2,326196, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(C, A), athleteplaysforteam(_, C).  [covers 8,0/21,0 pos, 0,0/0,0 neg]
%     Score = -2,210545 (regressionFit = 2,210542, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysagainstteam(_, A), athleteplaysinleague(C, _).  [covers 13,0/21,0 pos, 0,0/0,0 neg]
%     Score = -2,210545 (regressionFit = 2,210542, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(_, A), athleteplayssport(_, B).  [covers 13,0/21,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1400000000000004E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(C, A), teamalsoknownas(C, A).  [covers 2,0/21,0 pos, 0,0/0,0 neg]
%     Score = -2,339684 (regressionFit = 2,339680, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(C, A), teamalsoknownas(C, _).  [covers 7,0/21,0 pos, 0,0/0,0 neg]
%     Score = -2,376663 (regressionFit = 2,376660, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(_, A), teamalsoknownas(_, A).  [covers 3,0/21,0 pos, 0,0/0,0 neg]
%     Score = -2,351251 (regressionFit = 2,351248, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(C, A), teamalsoknownas(_, C).  [covers 6,0/21,0 pos, 0,0/0,0 neg]
%     Score = -2,326199 (regressionFit = 2,326196, penalties=3.04E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(C, A), teamplaysagainstteam(A, C).  [covers 8,0/21,0 pos, 0,0/0,0 neg]
%     Score = -2,310369 (regressionFit = 2,310366, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(_, A), teamplaysagainstteam(A, _).  [covers 9,0/21,0 pos, 0,0/0,0 neg]
%     Score = -2,210545 (regressionFit = 2,210542, penalties=3.1500000000000008E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(C, A), teamplaysagainstteam(C, _).  [covers 13,0/21,0 pos, 0,0/0,0 neg]
%     Score = -2,210545 (regressionFit = 2,210542, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(_, A), teamplaysagainstteam(_, A).  [covers 13,0/21,0 pos, 0,0/0,0 neg]
%     Score = -2,210545 (regressionFit = 2,210542, penalties=3.1500000000000008E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(C, A), teamplaysagainstteam(_, C).  [covers 13,0/21,0 pos, 0,0/0,0 neg]
%     Score = -2,353587 (regressionFit = 2,353584, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(_, A), teamplaysinleague(A, _).  [covers 6,0/21,0 pos, 0,0/0,0 neg]
%     Score = -2,313079 (regressionFit = 2,313076, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(C, A), teamplaysinleague(C, _).  [covers 9,0/21,0 pos, 0,0/0,0 neg]

% Consider expanding [#4 of outerLoop #5, bodyLen=2] 'teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(A, _).  [covers 9,0/21,0 pos, 0,0/0,0 neg]' score=-2.310367918112744
%  At # nodes expanded = 4, |OPEN| = 6.  Pruned 22 variant children.  Sending 16 items to OPEN for evaluation and possible insertion.
% Have created 16 valid-on-seeds descendants and have picked up 9 bad extensions.
%     Score = -2,376663 (regressionFit = 2,376660, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(A, C), athleteledsportsteam(_, C).  [covers 3,0/21,0 pos, 0,0/0,0 neg]
%     Score = -2,394580 (regressionFit = 2,394577, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(A, _), athleteplaysforteam(_, A).  [covers 4,0/21,0 pos, 0,0/0,0 neg]
%     Score = -2,339684 (regressionFit = 2,339680, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(A, C), athleteplaysforteam(_, C).  [covers 7,0/21,0 pos, 0,0/0,0 neg]
%     Score = -2,310369 (regressionFit = 2,310366, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysagainstteam(A, _), athleteplaysinleague(C, _).  [covers 9,0/21,0 pos, 0,0/0,0 neg]
%     Score = -2,310369 (regressionFit = 2,310366, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(A, _), athleteplayssport(_, B).  [covers 9,0/21,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1400000000000004E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(A, C), teamalsoknownas(C, A).  [covers 2,0/21,0 pos, 0,0/0,0 neg]
%     Score = -2,339684 (regressionFit = 2,339680, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(A, C), teamalsoknownas(C, _).  [covers 7,0/21,0 pos, 0,0/0,0 neg]
%     Score = -2,376663 (regressionFit = 2,376660, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(A, _), teamalsoknownas(_, A).  [covers 3,0/21,0 pos, 0,0/0,0 neg]
%     Score = -2,351251 (regressionFit = 2,351248, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(A, C), teamalsoknownas(_, C).  [covers 6,0/21,0 pos, 0,0/0,0 neg]
%     Score = -2,326199 (regressionFit = 2,326196, penalties=3.04E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(A, C), teamplaysagainstteam(C, A).  [covers 8,0/21,0 pos, 0,0/0,0 neg]
%     Score = -2,310369 (regressionFit = 2,310366, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(A, _), teamplaysagainstteam(A, _).  [covers 9,0/21,0 pos, 0,0/0,0 neg]
%     Score = -2,310369 (regressionFit = 2,310366, penalties=3.1500000000000008E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(A, C), teamplaysagainstteam(C, _).  [covers 9,0/21,0 pos, 0,0/0,0 neg]
%     Score = -2,310369 (regressionFit = 2,310366, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(A, _), teamplaysagainstteam(_, A).  [covers 9,0/21,0 pos, 0,0/0,0 neg]
%     Score = -2,310369 (regressionFit = 2,310366, penalties=3.1500000000000008E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(A, C), teamplaysagainstteam(_, C).  [covers 9,0/21,0 pos, 0,0/0,0 neg]
%     Score = -2,376663 (regressionFit = 2,376660, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(A, _), teamplaysinleague(A, _).  [covers 3,0/21,0 pos, 0,0/0,0 neg]
%     Score = -2,361196 (regressionFit = 2,361192, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(A, C), teamplaysinleague(C, _).  [covers 5,0/21,0 pos, 0,0/0,0 neg]

% Consider expanding [#5 of outerLoop #5, bodyLen=2] 'teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _).  [covers 17,0/21,0 pos, 0,0/0,0 neg]' score=-2.35247790043357
%  At # nodes expanded = 5, |OPEN| = 5.  Pruned 10 variant children.  Sending 9 items to OPEN for evaluation and possible insertion.
% Have created 9 valid-on-seeds descendants and have picked up 5 bad extensions.
%     Score = -2,394580 (regressionFit = 2,394577, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteplaysforteam(_, A).  [covers 4,0/21,0 pos, 0,0/0,0 neg]
%     Score = -2,352479 (regressionFit = 2,352476, penalties=3.1500000000000008E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, C), athleteplaysinleague(_, C).  [covers 17,0/21,0 pos, 0,0/0,0 neg]
%     Score = -2,352479 (regressionFit = 2,352476, penalties=3.2500000000000006E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteplayssport(_, A).  [covers 17,0/21,0 pos, 0,0/0,0 neg]
%     Score = -2,309035 (regressionFit = 2,309032, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(A, _).  [covers 7,0/21,0 pos, 0,0/0,0 neg]
%     Score = -2,399956 (regressionFit = 2,399952, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(_, A).  [covers 6,0/21,0 pos, 0,0/0,0 neg]
%     Score = -2,310369 (regressionFit = 2,310366, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(A, _).  [covers 9,0/21,0 pos, 0,0/0,0 neg]
%     Score = -2,210545 (regressionFit = 2,210542, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(_, A).  [covers 13,0/21,0 pos, 0,0/0,0 neg]
%     Score = -2,409146 (regressionFit = 2,409143, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysinleague(A, _).  [covers 8,0/21,0 pos, 0,0/0,0 neg]
%     Score = -2,352479 (regressionFit = 2,352476, penalties=3.2500000000000006E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, C), teamplaysinleague(_, C).  [covers 17,0/21,0 pos, 0,0/0,0 neg]

% Consider expanding [#6 of outerLoop #5, bodyLen=2] 'teamplayssport(A, B) :- athleteplayssport(_, B), athleteplaysforteam(_, A).  [covers 4,0/21,0 pos, 0,0/0,0 neg]' score=-2.394579064836534
%  At # nodes expanded = 6, |OPEN| = 4.  Pruned 12 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 8 bad extensions.
%     Score = -2,394580 (regressionFit = 2,394577, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysforteam(_, A), athleteplaysinleague(C, _).  [covers 4,0/21,0 pos, 0,0/0,0 neg]
%     Score = -2,394580 (regressionFit = 2,394577, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), athleteplaysforteam(_, A), athleteplayssport(_, B).  [covers 4,0/21,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), athleteplaysforteam(_, A), teamalsoknownas(_, A).  [covers 1,0/21,0 pos, 0,0/0,0 neg]
%     Score = -2,394580 (regressionFit = 2,394577, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), athleteplaysforteam(_, A), teamplaysagainstteam(A, _).  [covers 4,0/21,0 pos, 0,0/0,0 neg]
%     Score = -2,394580 (regressionFit = 2,394577, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), athleteplaysforteam(_, A), teamplaysagainstteam(_, A).  [covers 4,0/21,0 pos, 0,0/0,0 neg]

% Consider expanding [#7 of outerLoop #5, bodyLen=2] 'teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysforteam(B, _).  [covers 3,0/21,0 pos, 0,0/0,0 neg]' score=-2.4155180857328578
%  At # nodes expanded = 7, |OPEN| = 3.  Pruned 22 variant children.  Sending 9 items to OPEN for evaluation and possible insertion.
% Have created 9 valid-on-seeds descendants and have picked up 12 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysforteam(B, C), athleteledsportsteam(_, C).  [covers 2,0/21,0 pos, 0,0/0,0 neg]
%     Score = -2,415519 (regressionFit = 2,415516, penalties=3.1500000000000008E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysforteam(B, C), athleteplaysforteam(_, C).  [covers 3,0/21,0 pos, 0,0/0,0 neg]
%     Score = -2,415519 (regressionFit = 2,415516, penalties=3.2500000000000006E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysforteam(B, _), athleteplayssport(_, A).  [covers 3,0/21,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysforteam(C, _), teamalsoknownas(A, _).  [covers 1,0/21,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysforteam(C, _), teamalsoknownas(_, A).  [covers 1,0/21,0 pos, 0,0/0,0 neg]
%     Score = -2,415519 (regressionFit = 2,415516, penalties=3.2500000000000006E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysforteam(B, C), teamplaysagainstteam(C, _).  [covers 3,0/21,0 pos, 0,0/0,0 neg]
%     Score = -2,415519 (regressionFit = 2,415516, penalties=3.2500000000000006E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysforteam(B, C), teamplaysagainstteam(_, C).  [covers 3,0/21,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysforteam(C, _), teamplaysinleague(A, _).  [covers 1,0/21,0 pos, 0,0/0,0 neg]
%     Score = -2,415519 (regressionFit = 2,415516, penalties=3.2500000000000006E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysforteam(B, C), teamplaysinleague(C, _).  [covers 3,0/21,0 pos, 0,0/0,0 neg]

% Consider expanding [#8 of outerLoop #5, bodyLen=2] 'teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _).  [covers 9,0/21,0 pos, 0,0/0,0 neg]' score=-2.4155655140272674
%  At # nodes expanded = 8, |OPEN| = 2.  Pruned 10 variant children.  Sending 9 items to OPEN for evaluation and possible insertion.
% Have created 9 valid-on-seeds descendants and have picked up 5 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, _), athleteplaysforteam(C, _).  [covers 1,0/21,0 pos, 0,0/0,0 neg]
%     Score = -2,409146 (regressionFit = 2,409143, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, _), athleteplaysinleague(C, _).  [covers 8,0/21,0 pos, 0,0/0,0 neg]
%     Score = -2,390066 (regressionFit = 2,390062, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(_, C).  [covers 5,0/21,0 pos, 0,0/0,0 neg]
%     Score = -2,415567 (regressionFit = 2,415563, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), athleteplayssport(_, B).  [covers 9,0/21,0 pos, 0,0/0,0 neg]
%     Score = -2,258129 (regressionFit = 2,258125, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), teamalsoknownas(A, _).  [covers 5,0/21,0 pos, 0,0/0,0 neg]
%     Score = -2,412961 (regressionFit = 2,412958, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), teamalsoknownas(_, A).  [covers 5,0/21,0 pos, 0,0/0,0 neg]
%     Score = -2,376663 (regressionFit = 2,376660, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), teamplaysagainstteam(A, _).  [covers 3,0/21,0 pos, 0,0/0,0 neg]
%     Score = -2,353587 (regressionFit = 2,353584, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), teamplaysagainstteam(_, A).  [covers 6,0/21,0 pos, 0,0/0,0 neg]
%     Score = -2,415566 (regressionFit = 2,415563, penalties=3.1500000000000008E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), teamplaysinleague(_, C).  [covers 9,0/21,0 pos, 0,0/0,0 neg]

% Consider expanding [#9 of outerLoop #5, bodyLen=2] 'teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(_, A).  [covers 7,0/21,0 pos, 0,0/0,0 neg]' score=-2.417835252533005
%  At # nodes expanded = 9, |OPEN| = 1.  Pruned 22 variant children.  Sending 18 items to OPEN for evaluation and possible insertion.
% Have created 18 valid-on-seeds descendants and have picked up 8 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamalsoknownas(_, A), athleteplaysforteam(C, _).  [covers 1,0/21,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(_, A), athleteplaysforteam(_, A).  [covers 1,0/21,0 pos, 0,0/0,0 neg]
%     Score = -2,248480 (regressionFit = 2,248477, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(C, A), athleteplaysforteam(_, C).  [covers 3,0/21,0 pos, 0,0/0,0 neg]
%     Score = -2,399956 (regressionFit = 2,399952, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamalsoknownas(_, A), athleteplaysinleague(C, _).  [covers 6,0/21,0 pos, 0,0/0,0 neg]
%     Score = -2,417836 (regressionFit = 2,417833, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(_, A), athleteplayssport(_, B).  [covers 7,0/21,0 pos, 0,0/0,0 neg]
%     Score = -2,226922 (regressionFit = 2,226919, penalties=3.04E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(C, A), teamalsoknownas(A, C).  [covers 5,0/21,0 pos, 0,0/0,0 neg]
%     Score = -2,226923 (regressionFit = 2,226919, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(_, A), teamalsoknownas(A, _).  [covers 5,0/21,0 pos, 0,0/0,0 neg]
%     Score = -2,417836 (regressionFit = 2,417833, penalties=3.1500000000000008E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(C, A), teamalsoknownas(C, _).  [covers 7,0/21,0 pos, 0,0/0,0 neg]
%     Score = -2,417836 (regressionFit = 2,417833, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(_, A), teamalsoknownas(_, A).  [covers 7,0/21,0 pos, 0,0/0,0 neg]
%     Score = -2,418491 (regressionFit = 2,418488, penalties=3.1500000000000008E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(C, A), teamalsoknownas(_, C).  [covers 6,0/21,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1400000000000004E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(C, A), teamplaysagainstteam(A, C).  [covers 2,0/21,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1400000000000004E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(C, A), teamplaysagainstteam(C, A).  [covers 2,0/21,0 pos, 0,0/0,0 neg]
%     Score = -2,376663 (regressionFit = 2,376660, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(_, A), teamplaysagainstteam(A, _).  [covers 3,0/21,0 pos, 0,0/0,0 neg]
%     Score = -2,253559 (regressionFit = 2,253556, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(C, A), teamplaysagainstteam(C, _).  [covers 4,0/21,0 pos, 0,0/0,0 neg]
%     Score = -2,376663 (regressionFit = 2,376660, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(_, A), teamplaysagainstteam(_, A).  [covers 3,0/21,0 pos, 0,0/0,0 neg]
%     Score = -2,253559 (regressionFit = 2,253556, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(C, A), teamplaysagainstteam(_, C).  [covers 4,0/21,0 pos, 0,0/0,0 neg]
%     Score = -2,412961 (regressionFit = 2,412958, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(_, A), teamplaysinleague(A, _).  [covers 5,0/21,0 pos, 0,0/0,0 neg]
%     Score = -2,418491 (regressionFit = 2,418488, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(C, A), teamplaysinleague(C, _).  [covers 6,0/21,0 pos, 0,0/0,0 neg]

***** Warning: #14 TOO MANY NODES CONSIDERED (i.e., 'expanded') for 'LearnOneClause': nodesConsidered = 10 and maxNodesToConsider = 10. *****


% The best node found: teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(A, _).  [covers 8,0/21,0 pos, 0,0/0,0 neg]

% The best node found: teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(A, _).  [covers 8,0/21,0 pos, 0,0/0,0 neg]

% Expanding node at Level 3 with score = -0,115.
% Will extend: teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(A, _).  [covers 8,0/21,0 pos, 0,0/0,0 neg]
% Path: 2;true,false,false
Comparing variance: 0.008173812726231466 to score=0.0025 #egs=8.0
Comparing variance: 0.16376116004574207 to score=0.0025 #egs=13.0
%   Creating a TRUE-branch and FALSE-branch leaves because level = 3 >= 3

% Time for loop #5: 150 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #5, the best clause found is:
%      teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(A, _).  [covers 8,0/21,0 pos, 0,0/0,0 neg]
% This clause covers 8 positive examples, of which 8 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'teamplayssport(_, A) :- athleteplayssport(B, A), athleteledsportsteam(B, _).  [covers 381,0/381,0 pos, 0,0/0,0 neg]'
%     Score = -11,276491 (regressionFit = 11,276489, penalties=2.24E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteledsportsteam(B, _).  [covers 381,0/381,0 pos, 0,0/0,0 neg]

% Have these 5 positive seeds: 18 119 216 247 317
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Consider expanding [#1 of outerLoop #6, bodyLen=2] 'teamplayssport(_, A) :- athleteplayssport(B, A), athleteledsportsteam(B, _).  [covers 381,0/381,0 pos, 0,0/0,0 neg]' score=-11.276491242953622
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 22 variant children.  Sending 19 items to OPEN for evaluation and possible insertion.
% Have created 19 valid-on-seeds descendants and have picked up 16 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000008E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteledsportsteam(B, C), athleteledsportsteam(_, C).  [covers 381,0/381,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1400000000000004E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteledsportsteam(B, C), athleteplaysforteam(B, C).  [covers 381,0/381,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.35E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteledsportsteam(B, _), athleteplaysforteam(B, _).  [covers 381,0/381,0 pos, 0,0/0,0 neg]
%     Score = -6,712020 (regressionFit = 6,712017, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(_, A).  [covers 178,0/381,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -6,712020): teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(_, A).  [covers 178,0/381,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteledsportsteam(B, C), athleteplaysforteam(_, C).  [covers 381,0/381,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.35E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteledsportsteam(B, _), athleteplaysinleague(B, _).  [covers 381,0/381,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteledsportsteam(B, _), athleteplayssport(_, A).  [covers 381,0/381,0 pos, 0,0/0,0 neg]
%     Score = -6,804257 (regressionFit = 6,804254, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamalsoknownas(A, _).  [covers 83,0/381,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteledsportsteam(B, C), teamalsoknownas(C, _).  [covers 381,0/381,0 pos, 0,0/0,0 neg]
%     Score = -6,745831 (regressionFit = 6,745827, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamalsoknownas(_, A).  [covers 67,0/381,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteledsportsteam(B, C), teamalsoknownas(_, C).  [covers 381,0/381,0 pos, 0,0/0,0 neg]
%     Score = -6,797192 (regressionFit = 6,797189, penalties=3.0400000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, D).  [covers 157,0/381,0 pos, 0,0/0,0 neg]
%     Score = -6,807218 (regressionFit = 6,807215, penalties=3.0400000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(D, A).  [covers 167,0/381,0 pos, 0,0/0,0 neg]
%     Score = -6,756206 (regressionFit = 6,756203, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, _).  [covers 217,0/381,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteledsportsteam(B, C), teamplaysagainstteam(C, _).  [covers 381,0/381,0 pos, 0,0/0,0 neg]
%     Score = -6,766151 (regressionFit = 6,766148, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(_, A).  [covers 230,0/381,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteledsportsteam(B, C), teamplaysagainstteam(_, C).  [covers 381,0/381,0 pos, 0,0/0,0 neg]
%     Score = -6,755912 (regressionFit = 6,755909, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysinleague(A, _).  [covers 301,0/381,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteledsportsteam(B, C), teamplaysinleague(C, _).  [covers 381,0/381,0 pos, 0,0/0,0 neg]

% Consider expanding [#2 of outerLoop #6, bodyLen=3] 'teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(_, A).  [covers 178,0/381,0 pos, 0,0/0,0 neg]' score=-6.712020484521049
%  At # nodes expanded = 2, |OPEN| = 18.  Pruned 30 variant children.  Sending 17 items to OPEN for evaluation and possible insertion.
% Have created 17 valid-on-seeds descendants and have picked up 15 bad extensions.
%     Score = -6,712021 (regressionFit = 6,712017, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(_, A), athleteledsportsteam(_, D).  [covers 178,0/381,0 pos, 0,0/0,0 neg]
%     Score = -6,712021 (regressionFit = 6,712017, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(_, A), athleteplaysforteam(C, D).  [covers 178,0/381,0 pos, 0,0/0,0 neg]
%     Score = -6,712021 (regressionFit = 6,712017, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(_, A), athleteplaysforteam(C, _).  [covers 178,0/381,0 pos, 0,0/0,0 neg]
%     Score = -6,712021 (regressionFit = 6,712017, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(_, A), athleteplaysforteam(_, A).  [covers 178,0/381,0 pos, 0,0/0,0 neg]
%     Score = -6,712021 (regressionFit = 6,712017, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(_, A), athleteplaysforteam(_, D).  [covers 178,0/381,0 pos, 0,0/0,0 neg]
%     Score = -6,712022 (regressionFit = 6,712017, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(_, A), athleteplaysinleague(C, _).  [covers 178,0/381,0 pos, 0,0/0,0 neg]
%     Score = -6,712021 (regressionFit = 6,712017, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(_, A), athleteplayssport(_, B).  [covers 178,0/381,0 pos, 0,0/0,0 neg]
%     Score = -6,804589 (regressionFit = 6,804585, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(_, A), teamalsoknownas(A, _).  [covers 34,0/381,0 pos, 0,0/0,0 neg]
%     Score = -6,712021 (regressionFit = 6,712017, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(_, A), teamalsoknownas(D, _).  [covers 178,0/381,0 pos, 0,0/0,0 neg]
%     Score = -6,609062 (regressionFit = 6,609058, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(_, A), teamalsoknownas(_, A).  [covers 32,0/381,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -6,609062): teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(_, A), teamalsoknownas(_, A).  [covers 32,0/381,0 pos, 0,0/0,0 neg]
%     Score = -6,712021 (regressionFit = 6,712017, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(_, A), teamalsoknownas(_, D).  [covers 178,0/381,0 pos, 0,0/0,0 neg]
%     Score = -6,699230 (regressionFit = 6,699225, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(_, A), teamplaysagainstteam(A, _).  [covers 168,0/381,0 pos, 0,0/0,0 neg]
%     Score = -6,712021 (regressionFit = 6,712017, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(_, A), teamplaysagainstteam(D, _).  [covers 178,0/381,0 pos, 0,0/0,0 neg]
%     Score = -6,707358 (regressionFit = 6,707353, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(_, A), teamplaysagainstteam(_, A).  [covers 174,0/381,0 pos, 0,0/0,0 neg]
%     Score = -6,712021 (regressionFit = 6,712017, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(_, A), teamplaysagainstteam(_, D).  [covers 178,0/381,0 pos, 0,0/0,0 neg]
%     Score = -6,705158 (regressionFit = 6,705153, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(_, A), teamplaysinleague(A, _).  [covers 173,0/381,0 pos, 0,0/0,0 neg]
%     Score = -6,712021 (regressionFit = 6,712017, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(_, A), teamplaysinleague(D, _).  [covers 178,0/381,0 pos, 0,0/0,0 neg]

% Consider expanding [#3 of outerLoop #6, bodyLen=3] 'teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamalsoknownas(_, A).  [covers 67,0/381,0 pos, 0,0/0,0 neg]' score=-6.745830655230091
%  At # nodes expanded = 3, |OPEN| = 17.  Pruned 44 variant children.  Sending 19 items to OPEN for evaluation and possible insertion.
% Have created 19 valid-on-seeds descendants and have picked up 20 bad extensions.
%     Score = -6,745832 (regressionFit = 6,745827, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamalsoknownas(_, A), athleteledsportsteam(_, D).  [covers 67,0/381,0 pos, 0,0/0,0 neg]
%     Score = -6,745832 (regressionFit = 6,745827, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamalsoknownas(_, A), athleteplaysforteam(C, D).  [covers 67,0/381,0 pos, 0,0/0,0 neg]
%     Score = -6,745832 (regressionFit = 6,745827, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamalsoknownas(_, A), athleteplaysforteam(C, _).  [covers 67,0/381,0 pos, 0,0/0,0 neg]
%     Score = -6,609062 (regressionFit = 6,609058, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamalsoknownas(_, A), athleteplaysforteam(_, A).  [covers 32,0/381,0 pos, 0,0/0,0 neg]
%     Score = -6,745832 (regressionFit = 6,745827, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamalsoknownas(_, A), athleteplaysforteam(_, D).  [covers 67,0/381,0 pos, 0,0/0,0 neg]
%     Score = -6,745832 (regressionFit = 6,745827, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamalsoknownas(_, A), athleteplaysinleague(C, _).  [covers 67,0/381,0 pos, 0,0/0,0 neg]
%     Score = -6,745832 (regressionFit = 6,745827, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamalsoknownas(_, A), athleteplayssport(_, B).  [covers 67,0/381,0 pos, 0,0/0,0 neg]
%     Score = -6,792948 (regressionFit = 6,792944, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamalsoknownas(D, A), teamalsoknownas(A, D).  [covers 36,0/381,0 pos, 0,0/0,0 neg]
%     Score = -6,745832 (regressionFit = 6,745827, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamalsoknownas(_, A), teamalsoknownas(D, _).  [covers 67,0/381,0 pos, 0,0/0,0 neg]
%     Score = -6,745832 (regressionFit = 6,745827, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamalsoknownas(D, A), teamalsoknownas(D, _).  [covers 67,0/381,0 pos, 0,0/0,0 neg]
%     Score = -6,745832 (regressionFit = 6,745827, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamalsoknownas(_, A), teamalsoknownas(_, D).  [covers 67,0/381,0 pos, 0,0/0,0 neg]
%     Score = -6,807695 (regressionFit = 6,807691, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamalsoknownas(D, A), teamalsoknownas(_, D).  [covers 54,0/381,0 pos, 0,0/0,0 neg]
%     Score = -6,608995 (regressionFit = 6,608990, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamalsoknownas(_, A), teamplaysagainstteam(A, _).  [covers 32,0/381,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -6,608995): teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamalsoknownas(_, A), teamplaysagainstteam(A, _).  [covers 32,0/381,0 pos, 0,0/0,0 neg]
%     Score = -6,745832 (regressionFit = 6,745827, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamalsoknownas(_, A), teamplaysagainstteam(D, _).  [covers 67,0/381,0 pos, 0,0/0,0 neg]
%     Score = -6,638322 (regressionFit = 6,638317, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamalsoknownas(_, A), teamplaysagainstteam(_, A).  [covers 36,0/381,0 pos, 0,0/0,0 neg]
%     Score = -6,745832 (regressionFit = 6,745827, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamalsoknownas(_, A), teamplaysagainstteam(_, D).  [covers 67,0/381,0 pos, 0,0/0,0 neg]
%     Score = -6,710293 (regressionFit = 6,710288, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamalsoknownas(_, A), teamplaysinleague(A, _).  [covers 54,0/381,0 pos, 0,0/0,0 neg]
%     Score = -6,745832 (regressionFit = 6,745827, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamalsoknownas(_, A), teamplaysinleague(D, _).  [covers 67,0/381,0 pos, 0,0/0,0 neg]
%     Score = -6,742030 (regressionFit = 6,742025, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamalsoknownas(D, A), teamplaysinleague(D, _).  [covers 65,0/381,0 pos, 0,0/0,0 neg]

% Consider expanding [#4 of outerLoop #6, bodyLen=3] 'teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysinleague(A, _).  [covers 301,0/381,0 pos, 0,0/0,0 neg]' score=-6.755911753542773
%  At # nodes expanded = 4, |OPEN| = 16.  Pruned 26 variant children.  Sending 20 items to OPEN for evaluation and possible insertion.
% Have created 20 valid-on-seeds descendants and have picked up 10 bad extensions.
%     Score = -6,755913 (regressionFit = 6,755909, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysinleague(A, _), athleteledsportsteam(_, D).  [covers 301,0/381,0 pos, 0,0/0,0 neg]
%     Score = -6,755913 (regressionFit = 6,755909, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysinleague(A, _), athleteplaysforteam(C, D).  [covers 301,0/381,0 pos, 0,0/0,0 neg]
%     Score = -6,755913 (regressionFit = 6,755909, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysinleague(A, _), athleteplaysforteam(C, _).  [covers 301,0/381,0 pos, 0,0/0,0 neg]
%     Score = -6,705158 (regressionFit = 6,705153, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysinleague(A, _), athleteplaysforteam(_, A).  [covers 173,0/381,0 pos, 0,0/0,0 neg]
%     Score = -6,755913 (regressionFit = 6,755909, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysinleague(A, _), athleteplaysforteam(_, D).  [covers 301,0/381,0 pos, 0,0/0,0 neg]
%     Score = -6,783817 (regressionFit = 6,783813, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysinleague(A, D), athleteplaysinleague(C, D).  [covers 178,0/381,0 pos, 0,0/0,0 neg]
%     Score = -6,755913 (regressionFit = 6,755909, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysinleague(A, _), athleteplaysinleague(C, _).  [covers 301,0/381,0 pos, 0,0/0,0 neg]
%     Score = -6,752587 (regressionFit = 6,752582, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysinleague(A, D), athleteplaysinleague(_, D).  [covers 228,0/381,0 pos, 0,0/0,0 neg]
%     Score = -6,755913 (regressionFit = 6,755909, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysinleague(A, _), athleteplayssport(_, B).  [covers 301,0/381,0 pos, 0,0/0,0 neg]
%     Score = -6,807457 (regressionFit = 6,807453, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysinleague(A, _), teamalsoknownas(A, _).  [covers 67,0/381,0 pos, 0,0/0,0 neg]
%     Score = -6,755913 (regressionFit = 6,755909, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysinleague(A, _), teamalsoknownas(D, _).  [covers 301,0/381,0 pos, 0,0/0,0 neg]
%     Score = -6,710293 (regressionFit = 6,710288, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysinleague(A, _), teamalsoknownas(_, A).  [covers 54,0/381,0 pos, 0,0/0,0 neg]
%     Score = -6,755913 (regressionFit = 6,755909, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysinleague(A, _), teamalsoknownas(_, D).  [covers 301,0/381,0 pos, 0,0/0,0 neg]
%     Score = -6,735671 (regressionFit = 6,735666, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysinleague(A, _), teamplaysagainstteam(A, _).  [covers 202,0/381,0 pos, 0,0/0,0 neg]
%     Score = -6,755913 (regressionFit = 6,755909, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysinleague(A, _), teamplaysagainstteam(D, _).  [covers 301,0/381,0 pos, 0,0/0,0 neg]
%     Score = -6,741760 (regressionFit = 6,741755, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysinleague(A, _), teamplaysagainstteam(_, A).  [covers 209,0/381,0 pos, 0,0/0,0 neg]
%     Score = -6,755913 (regressionFit = 6,755909, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysinleague(A, _), teamplaysagainstteam(_, D).  [covers 301,0/381,0 pos, 0,0/0,0 neg]
%     Score = -6,771190 (regressionFit = 6,771186, penalties=3.95E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysinleague(A, E), teamplaysinleague(D, E).  [covers 245,0/381,0 pos, 0,0/0,0 neg]
%     Score = -6,755913 (regressionFit = 6,755909, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysinleague(A, _), teamplaysinleague(D, _).  [covers 301,0/381,0 pos, 0,0/0,0 neg]
%     Score = -6,755913 (regressionFit = 6,755909, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysinleague(A, D), teamplaysinleague(_, D).  [covers 301,0/381,0 pos, 0,0/0,0 neg]

% Consider expanding [#5 of outerLoop #6, bodyLen=3] 'teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, _).  [covers 217,0/381,0 pos, 0,0/0,0 neg]' score=-6.756205945825635
%  At # nodes expanded = 5, |OPEN| = 15.  Pruned 44 variant children.  Sending 30 items to OPEN for evaluation and possible insertion.
% Have created 30 valid-on-seeds descendants and have picked up 15 bad extensions.
%     Score = -6,756207 (regressionFit = 6,756203, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), athleteledsportsteam(_, D).  [covers 217,0/381,0 pos, 0,0/0,0 neg]
%     Score = -6,759431 (regressionFit = 6,759427, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, D), athleteledsportsteam(_, D).  [covers 184,0/381,0 pos, 0,0/0,0 neg]
%     Score = -6,756207 (regressionFit = 6,756203, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), athleteplaysforteam(C, D).  [covers 217,0/381,0 pos, 0,0/0,0 neg]
%     Score = -6,807610 (regressionFit = 6,807606, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, D), athleteplaysforteam(C, D).  [covers 167,0/381,0 pos, 0,0/0,0 neg]
%     Score = -6,756207 (regressionFit = 6,756203, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, _), athleteplaysforteam(C, _).  [covers 217,0/381,0 pos, 0,0/0,0 neg]
%     Score = -6,699230 (regressionFit = 6,699225, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, _), athleteplaysforteam(_, A).  [covers 168,0/381,0 pos, 0,0/0,0 neg]
%     Score = -6,756207 (regressionFit = 6,756203, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), athleteplaysforteam(_, D).  [covers 217,0/381,0 pos, 0,0/0,0 neg]
%     Score = -6,749741 (regressionFit = 6,749736, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, D), athleteplaysforteam(_, D).  [covers 211,0/381,0 pos, 0,0/0,0 neg]
%     Score = -6,756207 (regressionFit = 6,756203, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, _), athleteplaysinleague(C, _).  [covers 217,0/381,0 pos, 0,0/0,0 neg]
%     Score = -6,756207 (regressionFit = 6,756203, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, _), athleteplayssport(_, B).  [covers 217,0/381,0 pos, 0,0/0,0 neg]
%     Score = -6,806128 (regressionFit = 6,806124, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, _), teamalsoknownas(A, _).  [covers 36,0/381,0 pos, 0,0/0,0 neg]
%     Score = -6,756207 (regressionFit = 6,756203, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(D, _).  [covers 217,0/381,0 pos, 0,0/0,0 neg]
%     Score = -6,691261 (regressionFit = 6,691256, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, D), teamalsoknownas(D, _).  [covers 160,0/381,0 pos, 0,0/0,0 neg]
%     Score = -6,608995 (regressionFit = 6,608990, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, _), teamalsoknownas(_, A).  [covers 32,0/381,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -6,608995): teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, _), teamalsoknownas(_, A).  [covers 32,0/381,0 pos, 0,0/0,0 neg]
%     Score = -6,756207 (regressionFit = 6,756203, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(_, D).  [covers 217,0/381,0 pos, 0,0/0,0 neg]
%     Score = -6,789859 (regressionFit = 6,789854, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, D), teamalsoknownas(_, D).  [covers 164,0/381,0 pos, 0,0/0,0 neg]
%     Score = -6,797193 (regressionFit = 6,797189, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamplaysagainstteam(A, D).  [covers 157,0/381,0 pos, 0,0/0,0 neg]
%     Score = -6,807593 (regressionFit = 6,807589, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamplaysagainstteam(D, A).  [covers 161,0/381,0 pos, 0,0/0,0 neg]
%     Score = -6,769156 (regressionFit = 6,769152, penalties=3.95E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamplaysagainstteam(D, E).  [covers 194,0/381,0 pos, 0,0/0,0 neg]
%     Score = -6,745015 (regressionFit = 6,745011, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, D), teamplaysagainstteam(D, A).  [covers 204,0/381,0 pos, 0,0/0,0 neg]
%     Score = -6,769156 (regressionFit = 6,769152, penalties=3.95E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamplaysagainstteam(E, D).  [covers 194,0/381,0 pos, 0,0/0,0 neg]
%     Score = -6,756207 (regressionFit = 6,756203, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, _), teamplaysagainstteam(A, _).  [covers 217,0/381,0 pos, 0,0/0,0 neg]
%     Score = -6,756207 (regressionFit = 6,756203, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamplaysagainstteam(D, _).  [covers 217,0/381,0 pos, 0,0/0,0 neg]
%     Score = -6,755234 (regressionFit = 6,755230, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, D), teamplaysagainstteam(D, _).  [covers 215,0/381,0 pos, 0,0/0,0 neg]
%     Score = -6,753133 (regressionFit = 6,753129, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, _), teamplaysagainstteam(_, A).  [covers 212,0/381,0 pos, 0,0/0,0 neg]
%     Score = -6,756207 (regressionFit = 6,756203, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamplaysagainstteam(_, D).  [covers 217,0/381,0 pos, 0,0/0,0 neg]
%     Score = -6,756207 (regressionFit = 6,756203, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, D), teamplaysagainstteam(_, D).  [covers 217,0/381,0 pos, 0,0/0,0 neg]
%     Score = -6,735671 (regressionFit = 6,735666, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, _), teamplaysinleague(A, _).  [covers 202,0/381,0 pos, 0,0/0,0 neg]
%     Score = -6,756207 (regressionFit = 6,756203, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamplaysinleague(D, _).  [covers 217,0/381,0 pos, 0,0/0,0 neg]
%     Score = -6,755344 (regressionFit = 6,755340, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, D), teamplaysinleague(D, _).  [covers 216,0/381,0 pos, 0,0/0,0 neg]

% Consider expanding [#6 of outerLoop #6, bodyLen=3] 'teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(_, A).  [covers 230,0/381,0 pos, 0,0/0,0 neg]' score=-6.76615076000281
%  At # nodes expanded = 6, |OPEN| = 14.  Pruned 44 variant children.  Sending 30 items to OPEN for evaluation and possible insertion.
% Have created 30 valid-on-seeds descendants and have picked up 15 bad extensions.
%     Score = -6,766152 (regressionFit = 6,766148, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(_, A), athleteledsportsteam(_, D).  [covers 230,0/381,0 pos, 0,0/0,0 neg]
%     Score = -6,722004 (regressionFit = 6,722000, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(D, A), athleteledsportsteam(_, D).  [covers 198,0/381,0 pos, 0,0/0,0 neg]
%     Score = -6,766152 (regressionFit = 6,766148, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(_, A), athleteplaysforteam(C, D).  [covers 230,0/381,0 pos, 0,0/0,0 neg]
%     Score = -6,802098 (regressionFit = 6,802094, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(D, A), athleteplaysforteam(C, D).  [covers 175,0/381,0 pos, 0,0/0,0 neg]
%     Score = -6,766152 (regressionFit = 6,766148, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(_, A), athleteplaysforteam(C, _).  [covers 230,0/381,0 pos, 0,0/0,0 neg]
%     Score = -6,707358 (regressionFit = 6,707353, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(_, A), athleteplaysforteam(_, A).  [covers 174,0/381,0 pos, 0,0/0,0 neg]
%     Score = -6,766152 (regressionFit = 6,766148, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(_, A), athleteplaysforteam(_, D).  [covers 230,0/381,0 pos, 0,0/0,0 neg]
%     Score = -6,761656 (regressionFit = 6,761651, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(D, A), athleteplaysforteam(_, D).  [covers 226,0/381,0 pos, 0,0/0,0 neg]
%     Score = -6,766152 (regressionFit = 6,766148, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(_, A), athleteplaysinleague(C, _).  [covers 230,0/381,0 pos, 0,0/0,0 neg]
%     Score = -6,766152 (regressionFit = 6,766148, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(_, A), athleteplayssport(_, B).  [covers 230,0/381,0 pos, 0,0/0,0 neg]
%     Score = -6,807564 (regressionFit = 6,807560, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(_, A), teamalsoknownas(A, _).  [covers 45,0/381,0 pos, 0,0/0,0 neg]
%     Score = -6,766152 (regressionFit = 6,766148, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(_, A), teamalsoknownas(D, _).  [covers 230,0/381,0 pos, 0,0/0,0 neg]
%     Score = -6,697839 (regressionFit = 6,697834, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(D, A), teamalsoknownas(D, _).  [covers 169,0/381,0 pos, 0,0/0,0 neg]
%     Score = -6,638322 (regressionFit = 6,638317, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(_, A), teamalsoknownas(_, A).  [covers 36,0/381,0 pos, 0,0/0,0 neg]
%     Score = -6,766152 (regressionFit = 6,766148, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(_, A), teamalsoknownas(_, D).  [covers 230,0/381,0 pos, 0,0/0,0 neg]
%     Score = -6,787890 (regressionFit = 6,787886, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(D, A), teamalsoknownas(_, D).  [covers 167,0/381,0 pos, 0,0/0,0 neg]
%     Score = -6,797448 (regressionFit = 6,797444, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(_, A), teamplaysagainstteam(A, D).  [covers 156,0/381,0 pos, 0,0/0,0 neg]
%     Score = -6,745015 (regressionFit = 6,745011, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(D, A), teamplaysagainstteam(A, D).  [covers 204,0/381,0 pos, 0,0/0,0 neg]
%     Score = -6,807219 (regressionFit = 6,807215, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(_, A), teamplaysagainstteam(D, A).  [covers 167,0/381,0 pos, 0,0/0,0 neg]
%     Score = -6,775994 (regressionFit = 6,775990, penalties=3.95E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(E, A), teamplaysagainstteam(D, E).  [covers 202,0/381,0 pos, 0,0/0,0 neg]
%     Score = -6,775994 (regressionFit = 6,775990, penalties=3.95E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(E, A), teamplaysagainstteam(E, D).  [covers 202,0/381,0 pos, 0,0/0,0 neg]
%     Score = -6,753133 (regressionFit = 6,753129, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(_, A), teamplaysagainstteam(A, _).  [covers 212,0/381,0 pos, 0,0/0,0 neg]
%     Score = -6,766152 (regressionFit = 6,766148, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(_, A), teamplaysagainstteam(D, _).  [covers 230,0/381,0 pos, 0,0/0,0 neg]
%     Score = -6,766152 (regressionFit = 6,766148, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(D, A), teamplaysagainstteam(D, _).  [covers 230,0/381,0 pos, 0,0/0,0 neg]
%     Score = -6,766152 (regressionFit = 6,766148, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(_, A), teamplaysagainstteam(_, A).  [covers 230,0/381,0 pos, 0,0/0,0 neg]
%     Score = -6,766152 (regressionFit = 6,766148, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(_, A), teamplaysagainstteam(_, D).  [covers 230,0/381,0 pos, 0,0/0,0 neg]
%     Score = -6,766152 (regressionFit = 6,766148, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(D, A), teamplaysagainstteam(_, D).  [covers 230,0/381,0 pos, 0,0/0,0 neg]
%     Score = -6,741760 (regressionFit = 6,741755, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(_, A), teamplaysinleague(A, _).  [covers 209,0/381,0 pos, 0,0/0,0 neg]
%     Score = -6,766152 (regressionFit = 6,766148, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(_, A), teamplaysinleague(D, _).  [covers 230,0/381,0 pos, 0,0/0,0 neg]
%     Score = -6,765737 (regressionFit = 6,765732, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(D, A), teamplaysinleague(D, _).  [covers 229,0/381,0 pos, 0,0/0,0 neg]

% Consider expanding [#7 of outerLoop #6, bodyLen=3] 'teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, D).  [covers 157,0/381,0 pos, 0,0/0,0 neg]' score=-6.797192130462034
%  At # nodes expanded = 7, |OPEN| = 13.  Pruned 20 variant children.  Sending 8 items to OPEN for evaluation and possible insertion.
% Have created 8 valid-on-seeds descendants and have picked up 10 bad extensions.
%     Score = -6,798302 (regressionFit = 6,798298, penalties=4.040000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, D), athleteplaysforteam(C, D).  [covers 155,0/381,0 pos, 0,0/0,0 neg]
%     Score = -6,797193 (regressionFit = 6,797189, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, D), athleteplayssport(_, B).  [covers 157,0/381,0 pos, 0,0/0,0 neg]
%     Score = -6,799001 (regressionFit = 6,798997, penalties=3.940000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, D), teamplaysagainstteam(D, A).  [covers 151,0/381,0 pos, 0,0/0,0 neg]
%     Score = -6,797193 (regressionFit = 6,797189, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, D), teamplaysagainstteam(A, _).  [covers 157,0/381,0 pos, 0,0/0,0 neg]
%     Score = -6,797193 (regressionFit = 6,797189, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, D), teamplaysagainstteam(D, _).  [covers 157,0/381,0 pos, 0,0/0,0 neg]
%     Score = -6,797448 (regressionFit = 6,797444, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, D), teamplaysagainstteam(_, A).  [covers 156,0/381,0 pos, 0,0/0,0 neg]
%     Score = -6,797193 (regressionFit = 6,797189, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, D), teamplaysagainstteam(_, D).  [covers 157,0/381,0 pos, 0,0/0,0 neg]
%     Score = -6,797193 (regressionFit = 6,797189, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, D), teamplaysinleague(D, _).  [covers 157,0/381,0 pos, 0,0/0,0 neg]

% Consider expanding [#8 of outerLoop #6, bodyLen=3] 'teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamalsoknownas(A, _).  [covers 83,0/381,0 pos, 0,0/0,0 neg]' score=-6.8042571347108245
%  At # nodes expanded = 8, |OPEN| = 12.  Pruned 44 variant children.  Sending 19 items to OPEN for evaluation and possible insertion.
% Have created 19 valid-on-seeds descendants and have picked up 20 bad extensions.
%     Score = -6,804258 (regressionFit = 6,804254, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamalsoknownas(A, _), athleteledsportsteam(_, D).  [covers 83,0/381,0 pos, 0,0/0,0 neg]
%     Score = -6,804258 (regressionFit = 6,804254, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamalsoknownas(A, _), athleteplaysforteam(C, D).  [covers 83,0/381,0 pos, 0,0/0,0 neg]
%     Score = -6,804258 (regressionFit = 6,804254, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamalsoknownas(A, _), athleteplaysforteam(C, _).  [covers 83,0/381,0 pos, 0,0/0,0 neg]
%     Score = -6,804589 (regressionFit = 6,804585, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamalsoknownas(A, _), athleteplaysforteam(_, A).  [covers 34,0/381,0 pos, 0,0/0,0 neg]
%     Score = -6,804258 (regressionFit = 6,804254, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamalsoknownas(A, _), athleteplaysforteam(_, D).  [covers 83,0/381,0 pos, 0,0/0,0 neg]
%     Score = -6,804258 (regressionFit = 6,804254, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamalsoknownas(A, _), athleteplaysinleague(C, _).  [covers 83,0/381,0 pos, 0,0/0,0 neg]
%     Score = -6,804258 (regressionFit = 6,804254, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamalsoknownas(A, _), athleteplayssport(_, B).  [covers 83,0/381,0 pos, 0,0/0,0 neg]
%     Score = -6,792948 (regressionFit = 6,792944, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamalsoknownas(A, D), teamalsoknownas(D, A).  [covers 36,0/381,0 pos, 0,0/0,0 neg]
%     Score = -6,804258 (regressionFit = 6,804254, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamalsoknownas(A, _), teamalsoknownas(D, _).  [covers 83,0/381,0 pos, 0,0/0,0 neg]
%     Score = -6,780231 (regressionFit = 6,780227, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamalsoknownas(A, D), teamalsoknownas(D, _).  [covers 70,0/381,0 pos, 0,0/0,0 neg]
%     Score = -6,804258 (regressionFit = 6,804254, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamalsoknownas(A, _), teamalsoknownas(_, D).  [covers 83,0/381,0 pos, 0,0/0,0 neg]
%     Score = -6,804258 (regressionFit = 6,804254, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamalsoknownas(A, D), teamalsoknownas(_, D).  [covers 83,0/381,0 pos, 0,0/0,0 neg]
%     Score = -6,806128 (regressionFit = 6,806124, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamalsoknownas(A, _), teamplaysagainstteam(A, _).  [covers 36,0/381,0 pos, 0,0/0,0 neg]
%     Score = -6,804258 (regressionFit = 6,804254, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamalsoknownas(A, _), teamplaysagainstteam(D, _).  [covers 83,0/381,0 pos, 0,0/0,0 neg]
%     Score = -6,807564 (regressionFit = 6,807560, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamalsoknownas(A, _), teamplaysagainstteam(_, A).  [covers 45,0/381,0 pos, 0,0/0,0 neg]
%     Score = -6,804258 (regressionFit = 6,804254, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamalsoknownas(A, _), teamplaysagainstteam(_, D).  [covers 83,0/381,0 pos, 0,0/0,0 neg]
%     Score = -6,807457 (regressionFit = 6,807453, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamalsoknownas(A, _), teamplaysinleague(A, _).  [covers 67,0/381,0 pos, 0,0/0,0 neg]
%     Score = -6,804258 (regressionFit = 6,804254, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamalsoknownas(A, _), teamplaysinleague(D, _).  [covers 83,0/381,0 pos, 0,0/0,0 neg]
%     Score = -6,779369 (regressionFit = 6,779365, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamalsoknownas(A, D), teamplaysinleague(D, _).  [covers 76,0/381,0 pos, 0,0/0,0 neg]

% Consider expanding [#9 of outerLoop #6, bodyLen=3] 'teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(D, A).  [covers 167,0/381,0 pos, 0,0/0,0 neg]' score=-6.807218112896341
%  At # nodes expanded = 9, |OPEN| = 11.  Pruned 20 variant children.  Sending 8 items to OPEN for evaluation and possible insertion.
% Have created 8 valid-on-seeds descendants and have picked up 10 bad extensions.
%     Score = -6,807504 (regressionFit = 6,807500, penalties=4.040000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(D, A), athleteplaysforteam(C, D).  [covers 164,0/381,0 pos, 0,0/0,0 neg]
%     Score = -6,807219 (regressionFit = 6,807215, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(D, A), athleteplayssport(_, B).  [covers 167,0/381,0 pos, 0,0/0,0 neg]
%     Score = -6,799001 (regressionFit = 6,798997, penalties=3.940000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(D, A), teamplaysagainstteam(A, D).  [covers 151,0/381,0 pos, 0,0/0,0 neg]
%     Score = -6,807593 (regressionFit = 6,807589, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(D, A), teamplaysagainstteam(A, _).  [covers 161,0/381,0 pos, 0,0/0,0 neg]
%     Score = -6,807219 (regressionFit = 6,807215, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(D, A), teamplaysagainstteam(D, _).  [covers 167,0/381,0 pos, 0,0/0,0 neg]
%     Score = -6,807219 (regressionFit = 6,807215, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(D, A), teamplaysagainstteam(_, A).  [covers 167,0/381,0 pos, 0,0/0,0 neg]
%     Score = -6,807219 (regressionFit = 6,807215, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(D, A), teamplaysagainstteam(_, D).  [covers 167,0/381,0 pos, 0,0/0,0 neg]
%     Score = -6,807219 (regressionFit = 6,807215, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(D, A), teamplaysinleague(D, _).  [covers 167,0/381,0 pos, 0,0/0,0 neg]

***** Warning: #15 TOO MANY NODES CONSIDERED (i.e., 'expanded') for 'LearnOneClause': nodesConsidered = 10 and maxNodesToConsider = 10. *****


% The best node found: teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, _), teamalsoknownas(_, A).  [covers 32,0/381,0 pos, 0,0/0,0 neg]

% The best node found: teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, _), teamalsoknownas(_, A).  [covers 32,0/381,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,018.
% Will extend: teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, _), teamalsoknownas(_, A).  [covers 32,0/381,0 pos, 0,0/0,0 neg]
% Path: 2;true,true
Comparing variance: 0.08495727581474807 to score=0.0025 #egs=32.0
Comparing variance: 0.011147155895007812 to score=0.0025 #egs=349.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 32,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,084957)
%         ILP node to extend: teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, _), teamalsoknownas(_, A).  [covers 32,0/381,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -0,084957) into position #1 in the search queue (new size=2).
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 349,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,011147)
%         ILP node to extend: teamplayssport(_, A) :- athleteplayssport(B, A), athleteledsportsteam(B, _).  [covers 381,0/381,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -0,011147) into position #2 in the search queue (new size=3).

% Time for loop #6: 8,385 seconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #6, the best clause found is:
%      teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, _), teamalsoknownas(_, A).  [covers 32,0/381,0 pos, 0,0/0,0 neg]
% This clause covers 32 positive examples, of which 32 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, _), teamalsoknownas(_, A).  [covers 32,0/32,0 pos, 0,0/0,0 neg]'
%     Score = -6,608995 (regressionFit = 6,608990, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, _), teamalsoknownas(_, A).  [covers 32,0/32,0 pos, 0,0/0,0 neg]

% Have these 6 positive seeds: 1 11 12 14 25 28
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Consider expanding [#1 of outerLoop #7, bodyLen=4] 'teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, _), teamalsoknownas(_, A).  [covers 32,0/32,0 pos, 0,0/0,0 neg]' score=-6.6089945934296646
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 74 variant children.  Sending 56 items to OPEN for evaluation and possible insertion.
% Have created 56 valid-on-seeds descendants and have picked up 12 bad extensions.
%     Score = -2,706826 (regressionFit = 2,706820, penalties=5.370000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, _), teamalsoknownas(_, A), athleteledsportsteam(_, A).  [covers 19,0/32,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -2,706826): teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, _), teamalsoknownas(_, A), athleteledsportsteam(_, A).  [covers 19,0/32,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(_, A), athleteledsportsteam(_, D).  [covers 32,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,619802 (regressionFit = 2,619797, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, D), teamalsoknownas(_, A), athleteledsportsteam(_, D).  [covers 28,0/32,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -2,619802): teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, D), teamalsoknownas(_, A), athleteledsportsteam(_, D).  [covers 28,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,553921 (regressionFit = 2,553916, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, _), teamalsoknownas(D, A), athleteledsportsteam(_, D).  [covers 22,0/32,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -2,553921): teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, _), teamalsoknownas(D, A), athleteledsportsteam(_, D).  [covers 22,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,573633 (regressionFit = 2,573628, penalties=5.36E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, _), teamalsoknownas(_, A), athleteplaysforteam(C, A).  [covers 12,0/32,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.2600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(_, A), athleteplaysforteam(C, D).  [covers 32,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,717414 (regressionFit = 2,717409, penalties=5.2600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, D), teamalsoknownas(_, A), athleteplaysforteam(C, D).  [covers 24,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,476963 (regressionFit = 2,476958, penalties=5.2600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, _), teamalsoknownas(D, A), athleteplaysforteam(C, D).  [covers 16,0/32,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -2,476963): teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, _), teamalsoknownas(D, A), athleteplaysforteam(C, D).  [covers 16,0/32,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.47E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, _), teamalsoknownas(_, A), athleteplaysforteam(C, _).  [covers 32,0/32,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.47E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, _), teamalsoknownas(_, A), athleteplaysforteam(_, A).  [covers 31,0/32,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.37E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(_, A), athleteplaysforteam(_, D).  [covers 32,0/32,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.37E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, D), teamalsoknownas(_, A), athleteplaysforteam(_, D).  [covers 32,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,613319 (regressionFit = 2,613314, penalties=5.37E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, _), teamalsoknownas(D, A), athleteplaysforteam(_, D).  [covers 26,0/32,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.47E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, _), teamalsoknownas(_, A), athleteplaysinleague(C, _).  [covers 32,0/32,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.370000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, _), teamalsoknownas(_, A), athleteplayssport(_, B).  [covers 32,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,673883 (regressionFit = 2,673878, penalties=5.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(_, A), teamalsoknownas(A, D).  [covers 5,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,673883 (regressionFit = 2,673878, penalties=5.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, D), teamalsoknownas(_, A), teamalsoknownas(A, D).  [covers 5,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,553921 (regressionFit = 2,553916, penalties=5.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, _), teamalsoknownas(D, A), teamalsoknownas(A, D).  [covers 10,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,476963 (regressionFit = 2,476958, penalties=5.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(_, A), teamalsoknownas(D, A).  [covers 16,0/32,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -2,476963): teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(_, A), teamalsoknownas(D, A).  [covers 16,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,257258 (regressionFit = 2,257253, penalties=5.060000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(_, A), teamalsoknownas(D, E).  [covers 21,0/32,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -2,257258): teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(_, A), teamalsoknownas(D, E).  [covers 21,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,718039 (regressionFit = 2,718034, penalties=5.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, D), teamalsoknownas(_, A), teamalsoknownas(D, A).  [covers 22,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,315846 (regressionFit = 2,315841, penalties=5.060000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(_, A), teamalsoknownas(E, D).  [covers 20,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,681468 (regressionFit = 2,681463, penalties=5.060000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, D), teamalsoknownas(E, A), teamalsoknownas(D, E).  [covers 16,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,407913 (regressionFit = 2,407908, penalties=5.060000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(E, A), teamalsoknownas(E, D).  [covers 18,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,714940 (regressionFit = 2,714934, penalties=5.060000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, D), teamalsoknownas(E, A), teamalsoknownas(E, D).  [covers 23,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,702875 (regressionFit = 2,702869, penalties=5.370000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, _), teamalsoknownas(_, A), teamalsoknownas(A, _).  [covers 13,0/32,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(_, A), teamalsoknownas(D, _).  [covers 32,0/32,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, D), teamalsoknownas(_, A), teamalsoknownas(D, _).  [covers 31,0/32,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, _), teamalsoknownas(D, A), teamalsoknownas(D, _).  [covers 32,0/32,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.370000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, _), teamalsoknownas(_, A), teamalsoknownas(_, A).  [covers 32,0/32,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(_, A), teamalsoknownas(_, D).  [covers 32,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,658835 (regressionFit = 2,658830, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, D), teamalsoknownas(_, A), teamalsoknownas(_, D).  [covers 27,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,625849 (regressionFit = 2,625844, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, _), teamalsoknownas(D, A), teamalsoknownas(_, D).  [covers 19,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,564420 (regressionFit = 2,564415, penalties=5.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(_, A), teamplaysagainstteam(A, D).  [covers 23,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,718039 (regressionFit = 2,718034, penalties=5.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, _), teamalsoknownas(D, A), teamplaysagainstteam(A, D).  [covers 22,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,522180 (regressionFit = 2,522175, penalties=5.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(_, A), teamplaysagainstteam(D, A).  [covers 24,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,621656 (regressionFit = 2,621651, penalties=5.060000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(_, A), teamplaysagainstteam(D, E).  [covers 28,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,522180 (regressionFit = 2,522175, penalties=5.060000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(E, A), teamplaysagainstteam(D, E).  [covers 24,0/32,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, D), teamalsoknownas(_, A), teamplaysagainstteam(D, A).  [covers 31,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,621656 (regressionFit = 2,621651, penalties=5.060000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(_, A), teamplaysagainstteam(E, D).  [covers 28,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,613319 (regressionFit = 2,613314, penalties=5.060000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, D), teamalsoknownas(E, A), teamplaysagainstteam(D, E).  [covers 26,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,571001 (regressionFit = 2,570996, penalties=5.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, _), teamalsoknownas(D, A), teamplaysagainstteam(D, A).  [covers 23,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,522180 (regressionFit = 2,522175, penalties=5.060000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(E, A), teamplaysagainstteam(E, D).  [covers 24,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,613319 (regressionFit = 2,613314, penalties=5.060000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, D), teamalsoknownas(E, A), teamplaysagainstteam(E, D).  [covers 26,0/32,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.370000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, _), teamalsoknownas(_, A), teamplaysagainstteam(A, _).  [covers 32,0/32,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(_, A), teamplaysagainstteam(D, _).  [covers 32,0/32,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, D), teamalsoknownas(_, A), teamplaysagainstteam(D, _).  [covers 32,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,613319 (regressionFit = 2,613314, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, _), teamalsoknownas(D, A), teamplaysagainstteam(D, _).  [covers 26,0/32,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.370000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, _), teamalsoknownas(_, A), teamplaysagainstteam(_, A).  [covers 32,0/32,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(_, A), teamplaysagainstteam(_, D).  [covers 32,0/32,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, D), teamalsoknownas(_, A), teamplaysagainstteam(_, D).  [covers 32,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,613319 (regressionFit = 2,613314, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, _), teamalsoknownas(D, A), teamplaysagainstteam(_, D).  [covers 26,0/32,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.47E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, _), teamalsoknownas(_, A), teamplaysinleague(A, _).  [covers 32,0/32,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.37E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(_, A), teamplaysinleague(D, _).  [covers 32,0/32,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.37E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, D), teamalsoknownas(_, A), teamplaysinleague(D, _).  [covers 32,0/32,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.37E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, _), teamalsoknownas(D, A), teamplaysinleague(D, _).  [covers 32,0/32,0 pos, 0,0/0,0 neg]

% Consider expanding [#2 of outerLoop #7, bodyLen=5] 'teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(_, A), teamalsoknownas(D, E).  [covers 21,0/32,0 pos, 0,0/0,0 neg]' score=-2.257258460937478
%  At # nodes expanded = 2, |OPEN| = 55.  Pruned 72 variant children.  Sending 49 items to OPEN for evaluation and possible insertion.
% Have created 49 valid-on-seeds descendants and have picked up 17 bad extensions.
%     Score = -2,505396 (regressionFit = 2,505390, penalties=6.07E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(_, A), teamalsoknownas(D, E), athleteledsportsteam(_, A).  [covers 15,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,257259 (regressionFit = 2,257253, penalties=6.07E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(_, A), teamalsoknownas(D, E), athleteledsportsteam(_, D).  [covers 21,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,257259 (regressionFit = 2,257253, penalties=6.07E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(_, A), teamalsoknownas(D, E), athleteledsportsteam(_, E).  [covers 21,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,444741 (regressionFit = 2,444735, penalties=5.9700000000000004E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(F, A), teamalsoknownas(D, E), athleteledsportsteam(_, F).  [covers 17,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,365422 (regressionFit = 2,365416, penalties=6.060000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(_, A), teamalsoknownas(D, E), athleteplaysforteam(C, D).  [covers 19,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,624070 (regressionFit = 2,624064, penalties=5.960000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(F, A), teamalsoknownas(D, E), athleteplaysforteam(C, F).  [covers 9,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,257260 (regressionFit = 2,257253, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(_, A), teamalsoknownas(D, E), athleteplaysforteam(C, _).  [covers 21,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,315847 (regressionFit = 2,315841, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(_, A), teamalsoknownas(D, E), athleteplaysforteam(_, A).  [covers 20,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,257260 (regressionFit = 2,257253, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(_, A), teamalsoknownas(D, E), athleteplaysforteam(_, D).  [covers 21,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,257260 (regressionFit = 2,257253, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(_, A), teamalsoknownas(D, E), athleteplaysforteam(_, E).  [covers 21,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,257259 (regressionFit = 2,257253, penalties=6.070000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(F, A), teamalsoknownas(D, E), athleteplaysforteam(_, F).  [covers 21,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,257260 (regressionFit = 2,257253, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(_, A), teamalsoknownas(D, E), athleteplaysinleague(C, _).  [covers 21,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,257259 (regressionFit = 2,257253, penalties=6.07E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(_, A), teamalsoknownas(D, E), athleteplayssport(_, B).  [covers 21,0/32,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.9600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(_, A), teamalsoknownas(D, E), teamalsoknownas(A, D).  [covers 2,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,673884 (regressionFit = 2,673878, penalties=5.9600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(_, A), teamalsoknownas(D, E), teamalsoknownas(A, E).  [covers 5,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,684114 (regressionFit = 2,684108, penalties=5.8600000000000015E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(F, A), teamalsoknownas(D, E), teamalsoknownas(A, F).  [covers 4,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,592047 (regressionFit = 2,592041, penalties=5.9600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(_, A), teamalsoknownas(D, E), teamalsoknownas(D, A).  [covers 11,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,608786 (regressionFit = 2,608781, penalties=5.8600000000000015E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(F, A), teamalsoknownas(D, E), teamalsoknownas(F, D).  [covers 10,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,476964 (regressionFit = 2,476958, penalties=5.8600000000000015E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(F, A), teamalsoknownas(D, E), teamalsoknownas(F, E).  [covers 16,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,662868 (regressionFit = 2,662862, penalties=6.07E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(_, A), teamalsoknownas(D, E), teamalsoknownas(A, _).  [covers 6,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,257259 (regressionFit = 2,257253, penalties=6.07E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(_, A), teamalsoknownas(D, E), teamalsoknownas(D, _).  [covers 21,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,573634 (regressionFit = 2,573628, penalties=6.07E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(_, A), teamalsoknownas(D, E), teamalsoknownas(E, _).  [covers 12,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,257259 (regressionFit = 2,257253, penalties=5.9700000000000004E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(F, A), teamalsoknownas(D, E), teamalsoknownas(F, _).  [covers 21,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,257259 (regressionFit = 2,257253, penalties=6.07E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(_, A), teamalsoknownas(D, E), teamalsoknownas(_, A).  [covers 21,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,407914 (regressionFit = 2,407908, penalties=6.07E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(_, A), teamalsoknownas(D, E), teamalsoknownas(_, D).  [covers 18,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,257259 (regressionFit = 2,257253, penalties=6.07E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(_, A), teamalsoknownas(D, E), teamalsoknownas(_, E).  [covers 21,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,365422 (regressionFit = 2,365416, penalties=5.9600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(_, A), teamalsoknownas(D, E), teamplaysagainstteam(A, D).  [covers 19,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,365421 (regressionFit = 2,365416, penalties=5.8600000000000015E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(F, A), teamalsoknownas(D, E), teamplaysagainstteam(A, F).  [covers 19,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,365422 (regressionFit = 2,365416, penalties=5.9600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(_, A), teamalsoknownas(D, E), teamplaysagainstteam(D, A).  [covers 19,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,257259 (regressionFit = 2,257253, penalties=5.9600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(_, A), teamalsoknownas(D, E), teamplaysagainstteam(D, E).  [covers 21,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,407914 (regressionFit = 2,407908, penalties=5.8600000000000015E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(F, A), teamalsoknownas(D, E), teamplaysagainstteam(D, F).  [covers 18,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,257259 (regressionFit = 2,257253, penalties=5.9600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(_, A), teamalsoknownas(D, E), teamplaysagainstteam(E, A).  [covers 21,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,257259 (regressionFit = 2,257253, penalties=5.9600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(_, A), teamalsoknownas(D, E), teamplaysagainstteam(E, D).  [covers 21,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,315847 (regressionFit = 2,315841, penalties=5.8600000000000015E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(F, A), teamalsoknownas(D, E), teamplaysagainstteam(E, F).  [covers 20,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,407914 (regressionFit = 2,407908, penalties=5.8600000000000015E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(F, A), teamalsoknownas(D, E), teamplaysagainstteam(F, A).  [covers 18,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,444740 (regressionFit = 2,444735, penalties=5.8600000000000015E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(F, A), teamalsoknownas(D, E), teamplaysagainstteam(F, D).  [covers 17,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,315847 (regressionFit = 2,315841, penalties=5.8600000000000015E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(F, A), teamalsoknownas(D, E), teamplaysagainstteam(F, E).  [covers 20,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,257259 (regressionFit = 2,257253, penalties=6.07E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(_, A), teamalsoknownas(D, E), teamplaysagainstteam(A, _).  [covers 21,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,257259 (regressionFit = 2,257253, penalties=6.07E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(_, A), teamalsoknownas(D, E), teamplaysagainstteam(D, _).  [covers 21,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,257259 (regressionFit = 2,257253, penalties=6.07E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(_, A), teamalsoknownas(D, E), teamplaysagainstteam(E, _).  [covers 21,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,257259 (regressionFit = 2,257253, penalties=5.9700000000000004E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(F, A), teamalsoknownas(D, E), teamplaysagainstteam(F, _).  [covers 21,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,257259 (regressionFit = 2,257253, penalties=6.07E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(_, A), teamalsoknownas(D, E), teamplaysagainstteam(_, A).  [covers 21,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,257259 (regressionFit = 2,257253, penalties=6.07E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(_, A), teamalsoknownas(D, E), teamplaysagainstteam(_, D).  [covers 21,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,257259 (regressionFit = 2,257253, penalties=6.07E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(_, A), teamalsoknownas(D, E), teamplaysagainstteam(_, E).  [covers 21,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,257259 (regressionFit = 2,257253, penalties=5.9700000000000004E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(F, A), teamalsoknownas(D, E), teamplaysagainstteam(_, F).  [covers 21,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,257260 (regressionFit = 2,257253, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(_, A), teamalsoknownas(D, E), teamplaysinleague(A, _).  [covers 21,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,257260 (regressionFit = 2,257253, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(_, A), teamalsoknownas(D, E), teamplaysinleague(D, _).  [covers 21,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,257260 (regressionFit = 2,257253, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(_, A), teamalsoknownas(D, E), teamplaysinleague(E, _).  [covers 21,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,257259 (regressionFit = 2,257253, penalties=6.070000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(F, A), teamalsoknownas(D, E), teamplaysinleague(F, _).  [covers 21,0/32,0 pos, 0,0/0,0 neg]

% Consider expanding [#3 of outerLoop #7, bodyLen=5] 'teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(_, A), teamalsoknownas(E, D).  [covers 20,0/32,0 pos, 0,0/0,0 neg]' score=-2.315846324446616
%  At # nodes expanded = 3, |OPEN| = 54.  Pruned 72 variant children.  Sending 49 items to OPEN for evaluation and possible insertion.
% Have created 49 valid-on-seeds descendants and have picked up 17 bad extensions.
%     Score = -2,505396 (regressionFit = 2,505390, penalties=6.07E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(_, A), teamalsoknownas(E, D), athleteledsportsteam(_, A).  [covers 15,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,315847 (regressionFit = 2,315841, penalties=6.07E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(_, A), teamalsoknownas(E, D), athleteledsportsteam(_, D).  [covers 20,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,315847 (regressionFit = 2,315841, penalties=6.07E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(_, A), teamalsoknownas(E, D), athleteledsportsteam(_, E).  [covers 20,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,476964 (regressionFit = 2,476958, penalties=5.9700000000000004E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(F, A), teamalsoknownas(E, D), athleteledsportsteam(_, F).  [covers 16,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,592047 (regressionFit = 2,592041, penalties=6.060000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(_, A), teamalsoknownas(E, D), athleteplaysforteam(C, A).  [covers 11,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,315847 (regressionFit = 2,315841, penalties=6.060000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(_, A), teamalsoknownas(E, D), athleteplaysforteam(C, D).  [covers 20,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,315847 (regressionFit = 2,315841, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(_, A), teamalsoknownas(E, D), athleteplaysforteam(C, _).  [covers 20,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,315847 (regressionFit = 2,315841, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(_, A), teamalsoknownas(E, D), athleteplaysforteam(_, A).  [covers 20,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,315847 (regressionFit = 2,315841, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(_, A), teamalsoknownas(E, D), athleteplaysforteam(_, D).  [covers 20,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,315847 (regressionFit = 2,315841, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(_, A), teamalsoknownas(E, D), athleteplaysforteam(_, E).  [covers 20,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,315847 (regressionFit = 2,315841, penalties=6.070000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(F, A), teamalsoknownas(E, D), athleteplaysforteam(_, F).  [covers 20,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,315847 (regressionFit = 2,315841, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(_, A), teamalsoknownas(E, D), athleteplaysinleague(C, _).  [covers 20,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,315847 (regressionFit = 2,315841, penalties=6.07E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(_, A), teamalsoknownas(E, D), athleteplayssport(_, B).  [covers 20,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,673884 (regressionFit = 2,673878, penalties=5.9600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(_, A), teamalsoknownas(E, D), teamalsoknownas(A, D).  [covers 5,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,684114 (regressionFit = 2,684108, penalties=5.9600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(_, A), teamalsoknownas(E, D), teamalsoknownas(A, E).  [covers 4,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,684114 (regressionFit = 2,684108, penalties=5.8600000000000015E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(F, A), teamalsoknownas(E, D), teamalsoknownas(A, F).  [covers 4,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,444741 (regressionFit = 2,444735, penalties=5.9600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(_, A), teamalsoknownas(E, D), teamalsoknownas(E, A).  [covers 17,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,444740 (regressionFit = 2,444735, penalties=5.8600000000000015E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(F, A), teamalsoknownas(E, D), teamalsoknownas(F, D).  [covers 17,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,592047 (regressionFit = 2,592041, penalties=5.8600000000000015E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(F, A), teamalsoknownas(E, D), teamalsoknownas(F, E).  [covers 11,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,662868 (regressionFit = 2,662862, penalties=6.07E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(_, A), teamalsoknownas(E, D), teamalsoknownas(A, _).  [covers 6,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,444741 (regressionFit = 2,444735, penalties=6.07E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(_, A), teamalsoknownas(E, D), teamalsoknownas(D, _).  [covers 17,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,315847 (regressionFit = 2,315841, penalties=6.07E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(_, A), teamalsoknownas(E, D), teamalsoknownas(E, _).  [covers 20,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,315847 (regressionFit = 2,315841, penalties=5.9700000000000004E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(F, A), teamalsoknownas(E, D), teamalsoknownas(F, _).  [covers 20,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,315847 (regressionFit = 2,315841, penalties=6.07E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(_, A), teamalsoknownas(E, D), teamalsoknownas(_, A).  [covers 20,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,315847 (regressionFit = 2,315841, penalties=6.07E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(_, A), teamalsoknownas(E, D), teamalsoknownas(_, D).  [covers 20,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,444741 (regressionFit = 2,444735, penalties=6.07E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(_, A), teamalsoknownas(E, D), teamalsoknownas(_, E).  [covers 17,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,365422 (regressionFit = 2,365416, penalties=5.9600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(_, A), teamalsoknownas(E, D), teamplaysagainstteam(A, D).  [covers 19,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,365421 (regressionFit = 2,365416, penalties=5.8600000000000015E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(F, A), teamalsoknownas(E, D), teamplaysagainstteam(A, F).  [covers 19,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,407914 (regressionFit = 2,407908, penalties=5.9600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(_, A), teamalsoknownas(E, D), teamplaysagainstteam(D, A).  [covers 18,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,315847 (regressionFit = 2,315841, penalties=5.9600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(_, A), teamalsoknownas(E, D), teamplaysagainstteam(D, E).  [covers 20,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,365421 (regressionFit = 2,365416, penalties=5.8600000000000015E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(F, A), teamalsoknownas(E, D), teamplaysagainstteam(D, F).  [covers 19,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,315847 (regressionFit = 2,315841, penalties=5.9600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(_, A), teamalsoknownas(E, D), teamplaysagainstteam(E, A).  [covers 20,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,315847 (regressionFit = 2,315841, penalties=5.9600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(_, A), teamalsoknownas(E, D), teamplaysagainstteam(E, D).  [covers 20,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,476964 (regressionFit = 2,476958, penalties=5.8600000000000015E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(F, A), teamalsoknownas(E, D), teamplaysagainstteam(E, F).  [covers 16,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,407914 (regressionFit = 2,407908, penalties=5.8600000000000015E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(F, A), teamalsoknownas(E, D), teamplaysagainstteam(F, A).  [covers 18,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,365421 (regressionFit = 2,365416, penalties=5.8600000000000015E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(F, A), teamalsoknownas(E, D), teamplaysagainstteam(F, D).  [covers 19,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,476964 (regressionFit = 2,476958, penalties=5.8600000000000015E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(F, A), teamalsoknownas(E, D), teamplaysagainstteam(F, E).  [covers 16,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,315847 (regressionFit = 2,315841, penalties=6.07E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(_, A), teamalsoknownas(E, D), teamplaysagainstteam(A, _).  [covers 20,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,315847 (regressionFit = 2,315841, penalties=6.07E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(_, A), teamalsoknownas(E, D), teamplaysagainstteam(D, _).  [covers 20,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,315847 (regressionFit = 2,315841, penalties=6.07E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(_, A), teamalsoknownas(E, D), teamplaysagainstteam(E, _).  [covers 20,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,315847 (regressionFit = 2,315841, penalties=5.9700000000000004E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(F, A), teamalsoknownas(E, D), teamplaysagainstteam(F, _).  [covers 20,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,315847 (regressionFit = 2,315841, penalties=6.07E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(_, A), teamalsoknownas(E, D), teamplaysagainstteam(_, A).  [covers 20,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,315847 (regressionFit = 2,315841, penalties=6.07E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(_, A), teamalsoknownas(E, D), teamplaysagainstteam(_, D).  [covers 20,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,315847 (regressionFit = 2,315841, penalties=6.07E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(_, A), teamalsoknownas(E, D), teamplaysagainstteam(_, E).  [covers 20,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,315847 (regressionFit = 2,315841, penalties=5.9700000000000004E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(F, A), teamalsoknownas(E, D), teamplaysagainstteam(_, F).  [covers 20,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,315847 (regressionFit = 2,315841, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(_, A), teamalsoknownas(E, D), teamplaysinleague(A, _).  [covers 20,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,315847 (regressionFit = 2,315841, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(_, A), teamalsoknownas(E, D), teamplaysinleague(D, _).  [covers 20,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,315847 (regressionFit = 2,315841, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(_, A), teamalsoknownas(E, D), teamplaysinleague(E, _).  [covers 20,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,315847 (regressionFit = 2,315841, penalties=6.070000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(F, A), teamalsoknownas(E, D), teamplaysinleague(F, _).  [covers 20,0/32,0 pos, 0,0/0,0 neg]

% Consider expanding [#4 of outerLoop #7, bodyLen=5] 'teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(E, A), teamalsoknownas(E, D).  [covers 18,0/32,0 pos, 0,0/0,0 neg]' score=-2.4079129671038335
%  At # nodes expanded = 4, |OPEN| = 53.  Pruned 72 variant children.  Sending 51 items to OPEN for evaluation and possible insertion.
% Have created 51 valid-on-seeds descendants and have picked up 15 bad extensions.
%     Score = -2,530670 (regressionFit = 2,530663, penalties=6.07E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(E, A), teamalsoknownas(E, D), athleteledsportsteam(_, A).  [covers 14,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,407914 (regressionFit = 2,407908, penalties=6.07E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(E, A), teamalsoknownas(E, D), athleteledsportsteam(_, D).  [covers 18,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,444741 (regressionFit = 2,444735, penalties=5.9700000000000004E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(F, A), teamalsoknownas(F, D), athleteledsportsteam(_, E).  [covers 17,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,505396 (regressionFit = 2,505390, penalties=6.07E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(E, A), teamalsoknownas(E, D), athleteledsportsteam(_, E).  [covers 15,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,592047 (regressionFit = 2,592041, penalties=6.060000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(E, A), teamalsoknownas(E, D), athleteplaysforteam(C, A).  [covers 11,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,407914 (regressionFit = 2,407908, penalties=6.060000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(E, A), teamalsoknownas(E, D), athleteplaysforteam(C, D).  [covers 18,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,505396 (regressionFit = 2,505390, penalties=5.960000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(F, A), teamalsoknownas(F, D), athleteplaysforteam(C, E).  [covers 15,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,407914 (regressionFit = 2,407908, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(E, A), teamalsoknownas(E, D), athleteplaysforteam(C, _).  [covers 18,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,407914 (regressionFit = 2,407908, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(E, A), teamalsoknownas(E, D), athleteplaysforteam(_, A).  [covers 18,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,407914 (regressionFit = 2,407908, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(E, A), teamalsoknownas(E, D), athleteplaysforteam(_, D).  [covers 18,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,407914 (regressionFit = 2,407908, penalties=6.070000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(F, A), teamalsoknownas(F, D), athleteplaysforteam(_, E).  [covers 18,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,407914 (regressionFit = 2,407908, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(E, A), teamalsoknownas(E, D), athleteplaysforteam(_, E).  [covers 18,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,407914 (regressionFit = 2,407908, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(E, A), teamalsoknownas(E, D), athleteplaysinleague(C, _).  [covers 18,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,407914 (regressionFit = 2,407908, penalties=6.07E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(E, A), teamalsoknownas(E, D), athleteplayssport(_, B).  [covers 18,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,693638 (regressionFit = 2,693632, penalties=5.9600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(E, A), teamalsoknownas(E, D), teamalsoknownas(A, D).  [covers 3,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,673884 (regressionFit = 2,673878, penalties=5.8600000000000015E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(F, A), teamalsoknownas(F, D), teamalsoknownas(A, E).  [covers 5,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,684114 (regressionFit = 2,684108, penalties=5.9600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(E, A), teamalsoknownas(E, D), teamalsoknownas(A, E).  [covers 4,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,608786 (regressionFit = 2,608781, penalties=5.8600000000000015E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(F, A), teamalsoknownas(F, D), teamalsoknownas(D, E).  [covers 10,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,444740 (regressionFit = 2,444735, penalties=5.8600000000000015E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(F, A), teamalsoknownas(F, D), teamalsoknownas(E, A).  [covers 17,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,444740 (regressionFit = 2,444735, penalties=5.8600000000000015E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(F, A), teamalsoknownas(F, D), teamalsoknownas(E, D).  [covers 17,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,505396 (regressionFit = 2,505390, penalties=5.8600000000000015E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(F, A), teamalsoknownas(F, D), teamalsoknownas(F, E).  [covers 15,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,662868 (regressionFit = 2,662862, penalties=6.07E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(E, A), teamalsoknownas(E, D), teamalsoknownas(A, _).  [covers 6,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,573634 (regressionFit = 2,573628, penalties=6.07E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(E, A), teamalsoknownas(E, D), teamalsoknownas(D, _).  [covers 12,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,407914 (regressionFit = 2,407908, penalties=5.9700000000000004E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(F, A), teamalsoknownas(F, D), teamalsoknownas(E, _).  [covers 18,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,407914 (regressionFit = 2,407908, penalties=6.07E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(E, A), teamalsoknownas(E, D), teamalsoknownas(E, _).  [covers 18,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,407914 (regressionFit = 2,407908, penalties=6.07E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(E, A), teamalsoknownas(E, D), teamalsoknownas(_, A).  [covers 18,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,407914 (regressionFit = 2,407908, penalties=6.07E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(E, A), teamalsoknownas(E, D), teamalsoknownas(_, D).  [covers 18,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,476964 (regressionFit = 2,476958, penalties=5.9700000000000004E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(F, A), teamalsoknownas(F, D), teamalsoknownas(_, E).  [covers 16,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,505396 (regressionFit = 2,505390, penalties=5.9600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(E, A), teamalsoknownas(E, D), teamplaysagainstteam(A, D).  [covers 15,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,444741 (regressionFit = 2,444735, penalties=5.9600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(E, A), teamalsoknownas(E, D), teamplaysagainstteam(A, E).  [covers 17,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,505396 (regressionFit = 2,505390, penalties=5.9600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(E, A), teamalsoknownas(E, D), teamplaysagainstteam(D, A).  [covers 15,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,407914 (regressionFit = 2,407908, penalties=5.8600000000000015E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(F, A), teamalsoknownas(F, D), teamplaysagainstteam(D, E).  [covers 18,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,407914 (regressionFit = 2,407908, penalties=5.9600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(E, A), teamalsoknownas(E, D), teamplaysagainstteam(D, E).  [covers 18,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,407914 (regressionFit = 2,407908, penalties=5.8600000000000015E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(F, A), teamalsoknownas(F, D), teamplaysagainstteam(E, A).  [covers 18,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,407914 (regressionFit = 2,407908, penalties=5.8600000000000015E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(F, A), teamalsoknownas(F, D), teamplaysagainstteam(E, D).  [covers 18,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,407914 (regressionFit = 2,407908, penalties=5.8600000000000015E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(F, A), teamalsoknownas(F, D), teamplaysagainstteam(E, F).  [covers 18,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,444741 (regressionFit = 2,444735, penalties=5.9600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(E, A), teamalsoknownas(E, D), teamplaysagainstteam(E, A).  [covers 17,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,407914 (regressionFit = 2,407908, penalties=5.9600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(E, A), teamalsoknownas(E, D), teamplaysagainstteam(E, D).  [covers 18,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,407914 (regressionFit = 2,407908, penalties=5.8600000000000015E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(F, A), teamalsoknownas(F, D), teamplaysagainstteam(F, E).  [covers 18,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,407914 (regressionFit = 2,407908, penalties=6.07E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(E, A), teamalsoknownas(E, D), teamplaysagainstteam(A, _).  [covers 18,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,407914 (regressionFit = 2,407908, penalties=6.07E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(E, A), teamalsoknownas(E, D), teamplaysagainstteam(D, _).  [covers 18,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,407914 (regressionFit = 2,407908, penalties=5.9700000000000004E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(F, A), teamalsoknownas(F, D), teamplaysagainstteam(E, _).  [covers 18,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,407914 (regressionFit = 2,407908, penalties=6.07E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(E, A), teamalsoknownas(E, D), teamplaysagainstteam(E, _).  [covers 18,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,407914 (regressionFit = 2,407908, penalties=6.07E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(E, A), teamalsoknownas(E, D), teamplaysagainstteam(_, A).  [covers 18,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,407914 (regressionFit = 2,407908, penalties=6.07E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(E, A), teamalsoknownas(E, D), teamplaysagainstteam(_, D).  [covers 18,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,407914 (regressionFit = 2,407908, penalties=5.9700000000000004E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(F, A), teamalsoknownas(F, D), teamplaysagainstteam(_, E).  [covers 18,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,407914 (regressionFit = 2,407908, penalties=6.07E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(E, A), teamalsoknownas(E, D), teamplaysagainstteam(_, E).  [covers 18,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,407914 (regressionFit = 2,407908, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(E, A), teamalsoknownas(E, D), teamplaysinleague(A, _).  [covers 18,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,407914 (regressionFit = 2,407908, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(E, A), teamalsoknownas(E, D), teamplaysinleague(D, _).  [covers 18,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,407914 (regressionFit = 2,407908, penalties=6.070000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(F, A), teamalsoknownas(F, D), teamplaysinleague(E, _).  [covers 18,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,407914 (regressionFit = 2,407908, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(E, A), teamalsoknownas(E, D), teamplaysinleague(E, _).  [covers 18,0/32,0 pos, 0,0/0,0 neg]

% Consider expanding [#5 of outerLoop #7, bodyLen=5] 'teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(_, A), teamalsoknownas(D, A).  [covers 16,0/32,0 pos, 0,0/0,0 neg]' score=-2.476963049096746
%  At # nodes expanded = 5, |OPEN| = 52.  Pruned 72 variant children.  Sending 49 items to OPEN for evaluation and possible insertion.
% Have created 49 valid-on-seeds descendants and have picked up 16 bad extensions.
%     Score = -2,592047 (regressionFit = 2,592041, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(_, A), teamalsoknownas(D, A), athleteledsportsteam(_, A).  [covers 11,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,476964 (regressionFit = 2,476958, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(_, A), teamalsoknownas(D, A), athleteledsportsteam(_, D).  [covers 16,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,505396 (regressionFit = 2,505390, penalties=6.07E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(_, A), teamalsoknownas(D, A), athleteledsportsteam(_, E).  [covers 15,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,476964 (regressionFit = 2,476958, penalties=6.07E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(E, A), teamalsoknownas(D, A), athleteledsportsteam(_, E).  [covers 16,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,530670 (regressionFit = 2,530663, penalties=6.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(_, A), teamalsoknownas(D, A), athleteplaysforteam(C, D).  [covers 14,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,530669 (regressionFit = 2,530663, penalties=6.060000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(_, A), teamalsoknownas(D, A), athleteplaysforteam(C, E).  [covers 14,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,530669 (regressionFit = 2,530663, penalties=6.060000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(E, A), teamalsoknownas(D, A), athleteplaysforteam(C, E).  [covers 14,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,476964 (regressionFit = 2,476958, penalties=6.270000000000003E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(_, A), teamalsoknownas(D, A), athleteplaysforteam(C, _).  [covers 16,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,505397 (regressionFit = 2,505390, penalties=6.270000000000003E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(_, A), teamalsoknownas(D, A), athleteplaysforteam(_, A).  [covers 15,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,476964 (regressionFit = 2,476958, penalties=6.270000000000003E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(_, A), teamalsoknownas(D, A), athleteplaysforteam(_, D).  [covers 16,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,476964 (regressionFit = 2,476958, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(_, A), teamalsoknownas(D, A), athleteplaysforteam(_, E).  [covers 16,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,476964 (regressionFit = 2,476958, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(E, A), teamalsoknownas(D, A), athleteplaysforteam(_, E).  [covers 16,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,476964 (regressionFit = 2,476958, penalties=6.270000000000003E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(_, A), teamalsoknownas(D, A), athleteplaysinleague(C, _).  [covers 16,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,476964 (regressionFit = 2,476958, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(_, A), teamalsoknownas(D, A), athleteplayssport(_, B).  [covers 16,0/32,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.0600000000000004E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(_, A), teamalsoknownas(D, A), teamalsoknownas(A, D).  [covers 1,0/32,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.9600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(_, A), teamalsoknownas(D, A), teamalsoknownas(A, E).  [covers 2,0/32,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.9600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(E, A), teamalsoknownas(D, A), teamalsoknownas(A, E).  [covers 1,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,592047 (regressionFit = 2,592041, penalties=5.9600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(_, A), teamalsoknownas(D, A), teamalsoknownas(D, E).  [covers 11,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,530669 (regressionFit = 2,530663, penalties=5.9600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(_, A), teamalsoknownas(D, A), teamalsoknownas(E, A).  [covers 14,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,592047 (regressionFit = 2,592041, penalties=5.8600000000000015E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(F, A), teamalsoknownas(D, A), teamalsoknownas(F, E).  [covers 11,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,693638 (regressionFit = 2,693632, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(_, A), teamalsoknownas(D, A), teamalsoknownas(A, _).  [covers 3,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,476964 (regressionFit = 2,476958, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(_, A), teamalsoknownas(D, A), teamalsoknownas(D, _).  [covers 16,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,476964 (regressionFit = 2,476958, penalties=6.07E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(_, A), teamalsoknownas(D, A), teamalsoknownas(E, _).  [covers 16,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,476964 (regressionFit = 2,476958, penalties=6.07E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(E, A), teamalsoknownas(D, A), teamalsoknownas(E, _).  [covers 16,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,476964 (regressionFit = 2,476958, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(_, A), teamalsoknownas(D, A), teamalsoknownas(_, A).  [covers 16,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,530670 (regressionFit = 2,530663, penalties=6.07E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(_, A), teamalsoknownas(D, A), teamalsoknownas(_, E).  [covers 14,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,530669 (regressionFit = 2,530663, penalties=6.0600000000000004E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(_, A), teamalsoknownas(D, A), teamplaysagainstteam(A, D).  [covers 14,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,530669 (regressionFit = 2,530663, penalties=5.9600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(E, A), teamalsoknownas(D, A), teamplaysagainstteam(A, E).  [covers 14,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,505396 (regressionFit = 2,505390, penalties=6.0600000000000004E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(_, A), teamalsoknownas(D, A), teamplaysagainstteam(D, A).  [covers 15,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,476964 (regressionFit = 2,476958, penalties=5.9600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(_, A), teamalsoknownas(D, A), teamplaysagainstteam(D, E).  [covers 16,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,684114 (regressionFit = 2,684108, penalties=5.9600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(E, A), teamalsoknownas(D, A), teamplaysagainstteam(D, E).  [covers 4,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,476964 (regressionFit = 2,476958, penalties=5.9600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(_, A), teamalsoknownas(D, A), teamplaysagainstteam(E, A).  [covers 16,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,476964 (regressionFit = 2,476958, penalties=5.9600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(_, A), teamalsoknownas(D, A), teamplaysagainstteam(E, D).  [covers 16,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,476964 (regressionFit = 2,476958, penalties=5.8600000000000015E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(F, A), teamalsoknownas(D, A), teamplaysagainstteam(E, F).  [covers 16,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,505396 (regressionFit = 2,505390, penalties=5.9600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(E, A), teamalsoknownas(D, A), teamplaysagainstteam(E, A).  [covers 15,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,684114 (regressionFit = 2,684108, penalties=5.9600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(E, A), teamalsoknownas(D, A), teamplaysagainstteam(E, D).  [covers 4,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,476964 (regressionFit = 2,476958, penalties=5.8600000000000015E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(F, A), teamalsoknownas(D, A), teamplaysagainstteam(F, E).  [covers 16,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,476964 (regressionFit = 2,476958, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(_, A), teamalsoknownas(D, A), teamplaysagainstteam(A, _).  [covers 16,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,476964 (regressionFit = 2,476958, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(_, A), teamalsoknownas(D, A), teamplaysagainstteam(D, _).  [covers 16,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,476964 (regressionFit = 2,476958, penalties=6.07E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(_, A), teamalsoknownas(D, A), teamplaysagainstteam(E, _).  [covers 16,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,476964 (regressionFit = 2,476958, penalties=6.07E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(E, A), teamalsoknownas(D, A), teamplaysagainstteam(E, _).  [covers 16,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,476964 (regressionFit = 2,476958, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(_, A), teamalsoknownas(D, A), teamplaysagainstteam(_, A).  [covers 16,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,476964 (regressionFit = 2,476958, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(_, A), teamalsoknownas(D, A), teamplaysagainstteam(_, D).  [covers 16,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,476964 (regressionFit = 2,476958, penalties=6.07E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(_, A), teamalsoknownas(D, A), teamplaysagainstteam(_, E).  [covers 16,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,476964 (regressionFit = 2,476958, penalties=6.07E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(E, A), teamalsoknownas(D, A), teamplaysagainstteam(_, E).  [covers 16,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,476964 (regressionFit = 2,476958, penalties=6.270000000000003E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(_, A), teamalsoknownas(D, A), teamplaysinleague(A, _).  [covers 16,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,476964 (regressionFit = 2,476958, penalties=6.270000000000003E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(_, A), teamalsoknownas(D, A), teamplaysinleague(D, _).  [covers 16,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,476964 (regressionFit = 2,476958, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(_, A), teamalsoknownas(D, A), teamplaysinleague(E, _).  [covers 16,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,476964 (regressionFit = 2,476958, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(E, A), teamalsoknownas(D, A), teamplaysinleague(E, _).  [covers 16,0/32,0 pos, 0,0/0,0 neg]

% Consider expanding [#6 of outerLoop #7, bodyLen=5] 'teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, _), teamalsoknownas(D, A), athleteplaysforteam(C, D).  [covers 16,0/32,0 pos, 0,0/0,0 neg]' score=-2.4769631490967456
%  At # nodes expanded = 6, |OPEN| = 51.  Pruned 72 variant children.  Sending 43 items to OPEN for evaluation and possible insertion.
% Have created 43 valid-on-seeds descendants and have picked up 21 bad extensions.
%     Score = -2,592047 (regressionFit = 2,592041, penalties=6.270000000000003E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, _), teamalsoknownas(D, A), athleteplaysforteam(C, D), athleteledsportsteam(_, A).  [covers 11,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,476964 (regressionFit = 2,476958, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(E, A), athleteplaysforteam(C, E), athleteledsportsteam(_, D).  [covers 16,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,505396 (regressionFit = 2,505390, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, D), teamalsoknownas(E, A), athleteplaysforteam(C, E), athleteledsportsteam(_, D).  [covers 15,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,476964 (regressionFit = 2,476958, penalties=6.270000000000003E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, _), teamalsoknownas(D, A), athleteplaysforteam(C, D), athleteledsportsteam(_, D).  [covers 16,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,505397 (regressionFit = 2,505390, penalties=6.270000000000003E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, _), teamalsoknownas(D, A), athleteplaysforteam(C, D), athleteplaysforteam(_, A).  [covers 15,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,476964 (regressionFit = 2,476958, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(E, A), athleteplaysforteam(C, E), athleteplaysforteam(_, D).  [covers 16,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,476964 (regressionFit = 2,476958, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, D), teamalsoknownas(E, A), athleteplaysforteam(C, E), athleteplaysforteam(_, D).  [covers 16,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,476964 (regressionFit = 2,476958, penalties=6.270000000000003E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, _), teamalsoknownas(D, A), athleteplaysforteam(C, D), athleteplaysforteam(_, D).  [covers 16,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,476964 (regressionFit = 2,476958, penalties=6.370000000000002E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, _), teamalsoknownas(D, A), athleteplaysforteam(C, D), athleteplaysinleague(C, _).  [covers 16,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,476964 (regressionFit = 2,476958, penalties=6.270000000000003E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, _), teamalsoknownas(D, A), athleteplaysforteam(C, D), athleteplayssport(_, B).  [covers 16,0/32,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.060000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(E, A), athleteplaysforteam(C, E), teamalsoknownas(A, D).  [covers 1,0/32,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.060000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, D), teamalsoknownas(E, A), athleteplaysforteam(C, E), teamalsoknownas(A, D).  [covers 2,0/32,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, _), teamalsoknownas(D, A), athleteplaysforteam(C, D), teamalsoknownas(A, D).  [covers 1,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,624070 (regressionFit = 2,624064, penalties=5.960000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(F, A), athleteplaysforteam(C, F), teamalsoknownas(D, E).  [covers 9,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,530669 (regressionFit = 2,530663, penalties=6.060000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, D), teamalsoknownas(E, A), athleteplaysforteam(C, E), teamalsoknownas(D, A).  [covers 14,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,592047 (regressionFit = 2,592041, penalties=6.060000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, D), teamalsoknownas(E, A), athleteplaysforteam(C, E), teamalsoknownas(E, D).  [covers 11,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,693638 (regressionFit = 2,693632, penalties=6.270000000000003E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, _), teamalsoknownas(D, A), athleteplaysforteam(C, D), teamalsoknownas(A, _).  [covers 3,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,530670 (regressionFit = 2,530663, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(E, A), athleteplaysforteam(C, E), teamalsoknownas(D, _).  [covers 14,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,476964 (regressionFit = 2,476958, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, D), teamalsoknownas(E, A), athleteplaysforteam(C, E), teamalsoknownas(D, _).  [covers 16,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,476964 (regressionFit = 2,476958, penalties=6.270000000000003E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, _), teamalsoknownas(D, A), athleteplaysforteam(C, D), teamalsoknownas(D, _).  [covers 16,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,476964 (regressionFit = 2,476958, penalties=6.270000000000003E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, _), teamalsoknownas(D, A), athleteplaysforteam(C, D), teamalsoknownas(_, A).  [covers 16,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,530670 (regressionFit = 2,530663, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, D), teamalsoknownas(E, A), athleteplaysforteam(C, E), teamalsoknownas(_, D).  [covers 14,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,530669 (regressionFit = 2,530663, penalties=6.060000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(E, A), athleteplaysforteam(C, E), teamplaysagainstteam(A, D).  [covers 14,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,530670 (regressionFit = 2,530663, penalties=6.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, _), teamalsoknownas(D, A), athleteplaysforteam(C, D), teamplaysagainstteam(A, D).  [covers 14,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,476964 (regressionFit = 2,476958, penalties=6.060000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(E, A), athleteplaysforteam(C, E), teamplaysagainstteam(D, A).  [covers 16,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,476964 (regressionFit = 2,476958, penalties=5.960000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(F, A), athleteplaysforteam(C, F), teamplaysagainstteam(D, E).  [covers 16,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,476964 (regressionFit = 2,476958, penalties=6.060000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, D), teamalsoknownas(E, A), athleteplaysforteam(C, E), teamplaysagainstteam(D, A).  [covers 16,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,476964 (regressionFit = 2,476958, penalties=5.960000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(F, A), athleteplaysforteam(C, F), teamplaysagainstteam(E, D).  [covers 16,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,476964 (regressionFit = 2,476958, penalties=6.060000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, D), teamalsoknownas(E, A), athleteplaysforteam(C, E), teamplaysagainstteam(D, E).  [covers 16,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,505396 (regressionFit = 2,505390, penalties=6.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, _), teamalsoknownas(D, A), athleteplaysforteam(C, D), teamplaysagainstteam(D, A).  [covers 15,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,476964 (regressionFit = 2,476958, penalties=6.060000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, D), teamalsoknownas(E, A), athleteplaysforteam(C, E), teamplaysagainstteam(E, D).  [covers 16,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,476964 (regressionFit = 2,476958, penalties=6.270000000000003E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, _), teamalsoknownas(D, A), athleteplaysforteam(C, D), teamplaysagainstteam(A, _).  [covers 16,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,476964 (regressionFit = 2,476958, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(E, A), athleteplaysforteam(C, E), teamplaysagainstteam(D, _).  [covers 16,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,476964 (regressionFit = 2,476958, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, D), teamalsoknownas(E, A), athleteplaysforteam(C, E), teamplaysagainstteam(D, _).  [covers 16,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,476964 (regressionFit = 2,476958, penalties=6.270000000000003E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, _), teamalsoknownas(D, A), athleteplaysforteam(C, D), teamplaysagainstteam(D, _).  [covers 16,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,476964 (regressionFit = 2,476958, penalties=6.270000000000003E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, _), teamalsoknownas(D, A), athleteplaysforteam(C, D), teamplaysagainstteam(_, A).  [covers 16,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,476964 (regressionFit = 2,476958, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(E, A), athleteplaysforteam(C, E), teamplaysagainstteam(_, D).  [covers 16,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,476964 (regressionFit = 2,476958, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, D), teamalsoknownas(E, A), athleteplaysforteam(C, E), teamplaysagainstteam(_, D).  [covers 16,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,476964 (regressionFit = 2,476958, penalties=6.270000000000003E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, _), teamalsoknownas(D, A), athleteplaysforteam(C, D), teamplaysagainstteam(_, D).  [covers 16,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,476964 (regressionFit = 2,476958, penalties=6.370000000000002E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, _), teamalsoknownas(D, A), athleteplaysforteam(C, D), teamplaysinleague(A, _).  [covers 16,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,476964 (regressionFit = 2,476958, penalties=6.270000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(E, A), athleteplaysforteam(C, E), teamplaysinleague(D, _).  [covers 16,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,476964 (regressionFit = 2,476958, penalties=6.270000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, D), teamalsoknownas(E, A), athleteplaysforteam(C, E), teamplaysinleague(D, _).  [covers 16,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,476964 (regressionFit = 2,476958, penalties=6.370000000000002E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, _), teamalsoknownas(D, A), athleteplaysforteam(C, D), teamplaysinleague(D, _).  [covers 16,0/32,0 pos, 0,0/0,0 neg]

% Consider expanding [#7 of outerLoop #7, bodyLen=5] 'teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(E, A), teamplaysagainstteam(D, E).  [covers 24,0/32,0 pos, 0,0/0,0 neg]' score=-2.5221800914600165
%  At # nodes expanded = 7, |OPEN| = 50.  Pruned 72 variant children.  Sending 52 items to OPEN for evaluation and possible insertion.
% Have created 52 valid-on-seeds descendants and have picked up 14 bad extensions.
%     Score = -2,690042 (regressionFit = 2,690036, penalties=6.07E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(E, A), teamplaysagainstteam(D, E), athleteledsportsteam(_, A).  [covers 17,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,522181 (regressionFit = 2,522175, penalties=6.07E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(E, A), teamplaysagainstteam(D, E), athleteledsportsteam(_, D).  [covers 24,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,564421 (regressionFit = 2,564415, penalties=5.9700000000000004E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(F, A), teamplaysagainstteam(D, F), athleteledsportsteam(_, E).  [covers 23,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,646003 (regressionFit = 2,645997, penalties=6.07E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(E, A), teamplaysagainstteam(D, E), athleteledsportsteam(_, E).  [covers 20,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,573634 (regressionFit = 2,573628, penalties=6.060000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(E, A), teamplaysagainstteam(D, E), athleteplaysforteam(C, A).  [covers 12,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,522181 (regressionFit = 2,522175, penalties=6.060000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(E, A), teamplaysagainstteam(D, E), athleteplaysforteam(C, D).  [covers 24,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,624356 (regressionFit = 2,624350, penalties=5.960000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(F, A), teamplaysagainstteam(D, F), athleteplaysforteam(C, E).  [covers 21,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,522181 (regressionFit = 2,522175, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(E, A), teamplaysagainstteam(D, E), athleteplaysforteam(C, _).  [covers 24,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,564421 (regressionFit = 2,564415, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(E, A), teamplaysagainstteam(D, E), athleteplaysforteam(_, A).  [covers 23,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,522181 (regressionFit = 2,522175, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(E, A), teamplaysagainstteam(D, E), athleteplaysforteam(_, D).  [covers 24,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,522181 (regressionFit = 2,522175, penalties=6.070000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(F, A), teamplaysagainstteam(D, F), athleteplaysforteam(_, E).  [covers 24,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,522181 (regressionFit = 2,522175, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(E, A), teamplaysagainstteam(D, E), athleteplaysforteam(_, E).  [covers 24,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,522181 (regressionFit = 2,522175, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(E, A), teamplaysagainstteam(D, E), athleteplaysinleague(C, _).  [covers 24,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,522181 (regressionFit = 2,522175, penalties=6.07E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(E, A), teamplaysagainstteam(D, E), athleteplayssport(_, B).  [covers 24,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,673884 (regressionFit = 2,673878, penalties=5.9600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(E, A), teamplaysagainstteam(D, E), teamalsoknownas(A, D).  [covers 5,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,673884 (regressionFit = 2,673878, penalties=5.8600000000000015E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(F, A), teamplaysagainstteam(D, F), teamalsoknownas(A, E).  [covers 5,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,684114 (regressionFit = 2,684108, penalties=5.9600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(E, A), teamplaysagainstteam(D, E), teamalsoknownas(A, E).  [covers 4,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,684114 (regressionFit = 2,684108, penalties=5.9600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(E, A), teamplaysagainstteam(D, E), teamalsoknownas(D, A).  [covers 4,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,407914 (regressionFit = 2,407908, penalties=5.8600000000000015E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(F, A), teamplaysagainstteam(D, F), teamalsoknownas(D, E).  [covers 18,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,624356 (regressionFit = 2,624350, penalties=5.8600000000000015E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(F, A), teamplaysagainstteam(D, F), teamalsoknownas(E, A).  [covers 21,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,365421 (regressionFit = 2,365416, penalties=5.8600000000000015E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(F, A), teamplaysagainstteam(D, F), teamalsoknownas(E, D).  [covers 19,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,407914 (regressionFit = 2,407908, penalties=5.9600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(E, A), teamplaysagainstteam(D, E), teamalsoknownas(E, D).  [covers 18,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,678206 (regressionFit = 2,678200, penalties=5.8600000000000015E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(F, A), teamplaysagainstteam(D, F), teamalsoknownas(F, E).  [covers 18,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,662868 (regressionFit = 2,662862, penalties=6.07E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(E, A), teamplaysagainstteam(D, E), teamalsoknownas(A, _).  [covers 6,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,407914 (regressionFit = 2,407908, penalties=6.07E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(E, A), teamplaysagainstteam(D, E), teamalsoknownas(D, _).  [covers 18,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,522181 (regressionFit = 2,522175, penalties=5.9700000000000004E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(F, A), teamplaysagainstteam(D, F), teamalsoknownas(E, _).  [covers 24,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,522181 (regressionFit = 2,522175, penalties=6.07E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(E, A), teamplaysagainstteam(D, E), teamalsoknownas(E, _).  [covers 24,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,522181 (regressionFit = 2,522175, penalties=6.07E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(E, A), teamplaysagainstteam(D, E), teamalsoknownas(_, A).  [covers 24,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,101025 (regressionFit = 2,101019, penalties=6.07E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(E, A), teamplaysagainstteam(D, E), teamalsoknownas(_, D).  [covers 23,0/32,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -2,101025): teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(E, A), teamplaysagainstteam(D, E), teamalsoknownas(_, D).  [covers 23,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,597686 (regressionFit = 2,597680, penalties=5.9700000000000004E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(F, A), teamplaysagainstteam(D, F), teamalsoknownas(_, E).  [covers 22,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,624356 (regressionFit = 2,624350, penalties=5.9600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(E, A), teamplaysagainstteam(D, E), teamplaysagainstteam(A, D).  [covers 21,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,624356 (regressionFit = 2,624350, penalties=5.9600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(E, A), teamplaysagainstteam(D, E), teamplaysagainstteam(A, E).  [covers 21,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,624356 (regressionFit = 2,624350, penalties=5.9600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(E, A), teamplaysagainstteam(D, E), teamplaysagainstteam(D, A).  [covers 21,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,522181 (regressionFit = 2,522175, penalties=5.8600000000000015E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(F, A), teamplaysagainstteam(D, F), teamplaysagainstteam(D, E).  [covers 24,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,522181 (regressionFit = 2,522175, penalties=5.8600000000000015E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(F, A), teamplaysagainstteam(D, F), teamplaysagainstteam(E, A).  [covers 24,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,522181 (regressionFit = 2,522175, penalties=5.8600000000000015E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(F, A), teamplaysagainstteam(D, F), teamplaysagainstteam(E, D).  [covers 24,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,522181 (regressionFit = 2,522175, penalties=5.8600000000000015E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(F, A), teamplaysagainstteam(D, F), teamplaysagainstteam(E, F).  [covers 24,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,624356 (regressionFit = 2,624350, penalties=5.9600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(E, A), teamplaysagainstteam(D, E), teamplaysagainstteam(E, A).  [covers 21,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,522181 (regressionFit = 2,522175, penalties=5.9600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(E, A), teamplaysagainstteam(D, E), teamplaysagainstteam(E, D).  [covers 24,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,522181 (regressionFit = 2,522175, penalties=5.8600000000000015E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(F, A), teamplaysagainstteam(D, F), teamplaysagainstteam(F, E).  [covers 24,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,522181 (regressionFit = 2,522175, penalties=6.07E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(E, A), teamplaysagainstteam(D, E), teamplaysagainstteam(A, _).  [covers 24,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,522181 (regressionFit = 2,522175, penalties=6.07E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(E, A), teamplaysagainstteam(D, E), teamplaysagainstteam(D, _).  [covers 24,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,522181 (regressionFit = 2,522175, penalties=5.9700000000000004E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(F, A), teamplaysagainstteam(D, F), teamplaysagainstteam(E, _).  [covers 24,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,522181 (regressionFit = 2,522175, penalties=6.07E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(E, A), teamplaysagainstteam(D, E), teamplaysagainstteam(E, _).  [covers 24,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,522181 (regressionFit = 2,522175, penalties=6.07E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(E, A), teamplaysagainstteam(D, E), teamplaysagainstteam(_, A).  [covers 24,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,522181 (regressionFit = 2,522175, penalties=6.07E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(E, A), teamplaysagainstteam(D, E), teamplaysagainstteam(_, D).  [covers 24,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,522181 (regressionFit = 2,522175, penalties=5.9700000000000004E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(F, A), teamplaysagainstteam(D, F), teamplaysagainstteam(_, E).  [covers 24,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,522181 (regressionFit = 2,522175, penalties=6.07E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(E, A), teamplaysagainstteam(D, E), teamplaysagainstteam(_, E).  [covers 24,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,522181 (regressionFit = 2,522175, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(E, A), teamplaysagainstteam(D, E), teamplaysinleague(A, _).  [covers 24,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,522181 (regressionFit = 2,522175, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(E, A), teamplaysagainstteam(D, E), teamplaysinleague(D, _).  [covers 24,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,522181 (regressionFit = 2,522175, penalties=6.070000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(F, A), teamplaysagainstteam(D, F), teamplaysinleague(E, _).  [covers 24,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,522181 (regressionFit = 2,522175, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(E, A), teamplaysagainstteam(D, E), teamplaysinleague(E, _).  [covers 24,0/32,0 pos, 0,0/0,0 neg]

% Consider expanding [#8 of outerLoop #7, bodyLen=5] 'teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(E, A), teamplaysagainstteam(E, D).  [covers 24,0/32,0 pos, 0,0/0,0 neg]' score=-2.5221800914600165
%  At # nodes expanded = 8, |OPEN| = 49.  Pruned 72 variant children.  Sending 52 items to OPEN for evaluation and possible insertion.
% Have created 52 valid-on-seeds descendants and have picked up 14 bad extensions.
%     Score = -2,690042 (regressionFit = 2,690036, penalties=6.07E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(E, A), teamplaysagainstteam(E, D), athleteledsportsteam(_, A).  [covers 17,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,522181 (regressionFit = 2,522175, penalties=6.07E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(E, A), teamplaysagainstteam(E, D), athleteledsportsteam(_, D).  [covers 24,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,564421 (regressionFit = 2,564415, penalties=5.9700000000000004E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(F, A), teamplaysagainstteam(F, D), athleteledsportsteam(_, E).  [covers 23,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,646003 (regressionFit = 2,645997, penalties=6.07E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(E, A), teamplaysagainstteam(E, D), athleteledsportsteam(_, E).  [covers 20,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,573634 (regressionFit = 2,573628, penalties=6.060000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(E, A), teamplaysagainstteam(E, D), athleteplaysforteam(C, A).  [covers 12,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,522181 (regressionFit = 2,522175, penalties=6.060000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(E, A), teamplaysagainstteam(E, D), athleteplaysforteam(C, D).  [covers 24,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,624356 (regressionFit = 2,624350, penalties=5.960000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(F, A), teamplaysagainstteam(F, D), athleteplaysforteam(C, E).  [covers 21,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,522181 (regressionFit = 2,522175, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(E, A), teamplaysagainstteam(E, D), athleteplaysforteam(C, _).  [covers 24,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,564421 (regressionFit = 2,564415, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(E, A), teamplaysagainstteam(E, D), athleteplaysforteam(_, A).  [covers 23,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,522181 (regressionFit = 2,522175, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(E, A), teamplaysagainstteam(E, D), athleteplaysforteam(_, D).  [covers 24,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,522181 (regressionFit = 2,522175, penalties=6.070000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(F, A), teamplaysagainstteam(F, D), athleteplaysforteam(_, E).  [covers 24,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,522181 (regressionFit = 2,522175, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(E, A), teamplaysagainstteam(E, D), athleteplaysforteam(_, E).  [covers 24,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,522181 (regressionFit = 2,522175, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(E, A), teamplaysagainstteam(E, D), athleteplaysinleague(C, _).  [covers 24,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,522181 (regressionFit = 2,522175, penalties=6.07E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(E, A), teamplaysagainstteam(E, D), athleteplayssport(_, B).  [covers 24,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,673884 (regressionFit = 2,673878, penalties=5.9600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(E, A), teamplaysagainstteam(E, D), teamalsoknownas(A, D).  [covers 5,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,673884 (regressionFit = 2,673878, penalties=5.8600000000000015E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(F, A), teamplaysagainstteam(F, D), teamalsoknownas(A, E).  [covers 5,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,684114 (regressionFit = 2,684108, penalties=5.9600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(E, A), teamplaysagainstteam(E, D), teamalsoknownas(A, E).  [covers 4,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,684114 (regressionFit = 2,684108, penalties=5.9600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(E, A), teamplaysagainstteam(E, D), teamalsoknownas(D, A).  [covers 4,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,444740 (regressionFit = 2,444735, penalties=5.8600000000000015E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(F, A), teamplaysagainstteam(F, D), teamalsoknownas(D, E).  [covers 17,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,624356 (regressionFit = 2,624350, penalties=5.8600000000000015E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(F, A), teamplaysagainstteam(F, D), teamalsoknownas(E, A).  [covers 21,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,365421 (regressionFit = 2,365416, penalties=5.8600000000000015E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(F, A), teamplaysagainstteam(F, D), teamalsoknownas(E, D).  [covers 19,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,407914 (regressionFit = 2,407908, penalties=5.9600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(E, A), teamplaysagainstteam(E, D), teamalsoknownas(E, D).  [covers 18,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,678206 (regressionFit = 2,678200, penalties=5.8600000000000015E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(F, A), teamplaysagainstteam(F, D), teamalsoknownas(F, E).  [covers 18,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,662868 (regressionFit = 2,662862, penalties=6.07E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(E, A), teamplaysagainstteam(E, D), teamalsoknownas(A, _).  [covers 6,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,407914 (regressionFit = 2,407908, penalties=6.07E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(E, A), teamplaysagainstteam(E, D), teamalsoknownas(D, _).  [covers 18,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,522181 (regressionFit = 2,522175, penalties=5.9700000000000004E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(F, A), teamplaysagainstteam(F, D), teamalsoknownas(E, _).  [covers 24,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,522181 (regressionFit = 2,522175, penalties=6.07E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(E, A), teamplaysagainstteam(E, D), teamalsoknownas(E, _).  [covers 24,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,522181 (regressionFit = 2,522175, penalties=6.07E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(E, A), teamplaysagainstteam(E, D), teamalsoknownas(_, A).  [covers 24,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,101025 (regressionFit = 2,101019, penalties=6.07E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(E, A), teamplaysagainstteam(E, D), teamalsoknownas(_, D).  [covers 23,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,597686 (regressionFit = 2,597680, penalties=5.9700000000000004E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(F, A), teamplaysagainstteam(F, D), teamalsoknownas(_, E).  [covers 22,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,624356 (regressionFit = 2,624350, penalties=5.9600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(E, A), teamplaysagainstteam(E, D), teamplaysagainstteam(A, D).  [covers 21,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,624356 (regressionFit = 2,624350, penalties=5.9600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(E, A), teamplaysagainstteam(E, D), teamplaysagainstteam(A, E).  [covers 21,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,624356 (regressionFit = 2,624350, penalties=5.9600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(E, A), teamplaysagainstteam(E, D), teamplaysagainstteam(D, A).  [covers 21,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,522181 (regressionFit = 2,522175, penalties=5.8600000000000015E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(F, A), teamplaysagainstteam(F, D), teamplaysagainstteam(D, E).  [covers 24,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,522181 (regressionFit = 2,522175, penalties=5.9600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(E, A), teamplaysagainstteam(E, D), teamplaysagainstteam(D, E).  [covers 24,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,522181 (regressionFit = 2,522175, penalties=5.8600000000000015E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(F, A), teamplaysagainstteam(F, D), teamplaysagainstteam(E, A).  [covers 24,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,522181 (regressionFit = 2,522175, penalties=5.8600000000000015E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(F, A), teamplaysagainstteam(F, D), teamplaysagainstteam(E, D).  [covers 24,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,522181 (regressionFit = 2,522175, penalties=5.8600000000000015E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(F, A), teamplaysagainstteam(F, D), teamplaysagainstteam(E, F).  [covers 24,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,624356 (regressionFit = 2,624350, penalties=5.9600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(E, A), teamplaysagainstteam(E, D), teamplaysagainstteam(E, A).  [covers 21,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,522181 (regressionFit = 2,522175, penalties=5.8600000000000015E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(F, A), teamplaysagainstteam(F, D), teamplaysagainstteam(F, E).  [covers 24,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,522181 (regressionFit = 2,522175, penalties=6.07E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(E, A), teamplaysagainstteam(E, D), teamplaysagainstteam(A, _).  [covers 24,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,522181 (regressionFit = 2,522175, penalties=6.07E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(E, A), teamplaysagainstteam(E, D), teamplaysagainstteam(D, _).  [covers 24,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,522181 (regressionFit = 2,522175, penalties=5.9700000000000004E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(F, A), teamplaysagainstteam(F, D), teamplaysagainstteam(E, _).  [covers 24,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,522181 (regressionFit = 2,522175, penalties=6.07E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(E, A), teamplaysagainstteam(E, D), teamplaysagainstteam(E, _).  [covers 24,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,522181 (regressionFit = 2,522175, penalties=6.07E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(E, A), teamplaysagainstteam(E, D), teamplaysagainstteam(_, A).  [covers 24,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,522181 (regressionFit = 2,522175, penalties=6.07E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(E, A), teamplaysagainstteam(E, D), teamplaysagainstteam(_, D).  [covers 24,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,522181 (regressionFit = 2,522175, penalties=5.9700000000000004E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(F, A), teamplaysagainstteam(F, D), teamplaysagainstteam(_, E).  [covers 24,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,522181 (regressionFit = 2,522175, penalties=6.07E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(E, A), teamplaysagainstteam(E, D), teamplaysagainstteam(_, E).  [covers 24,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,522181 (regressionFit = 2,522175, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(E, A), teamplaysagainstteam(E, D), teamplaysinleague(A, _).  [covers 24,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,522181 (regressionFit = 2,522175, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(E, A), teamplaysagainstteam(E, D), teamplaysinleague(D, _).  [covers 24,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,522181 (regressionFit = 2,522175, penalties=6.070000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(F, A), teamplaysagainstteam(F, D), teamplaysinleague(E, _).  [covers 24,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,522181 (regressionFit = 2,522175, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(E, A), teamplaysagainstteam(E, D), teamplaysinleague(E, _).  [covers 24,0/32,0 pos, 0,0/0,0 neg]

% Consider expanding [#9 of outerLoop #7, bodyLen=5] 'teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(_, A), teamplaysagainstteam(D, A).  [covers 24,0/32,0 pos, 0,0/0,0 neg]' score=-2.522180191460017
%  At # nodes expanded = 9, |OPEN| = 48.  Pruned 72 variant children.  Sending 53 items to OPEN for evaluation and possible insertion.
% Have created 53 valid-on-seeds descendants and have picked up 13 bad extensions.
%     Score = -2,690042 (regressionFit = 2,690036, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(_, A), teamplaysagainstteam(D, A), athleteledsportsteam(_, A).  [covers 17,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,522181 (regressionFit = 2,522175, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(_, A), teamplaysagainstteam(D, A), athleteledsportsteam(_, D).  [covers 24,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,564421 (regressionFit = 2,564415, penalties=6.07E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(_, A), teamplaysagainstteam(D, A), athleteledsportsteam(_, E).  [covers 23,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,646003 (regressionFit = 2,645997, penalties=6.07E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(E, A), teamplaysagainstteam(D, A), athleteledsportsteam(_, E).  [covers 20,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,638081 (regressionFit = 2,638075, penalties=6.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(_, A), teamplaysagainstteam(D, A), athleteplaysforteam(C, A).  [covers 8,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,522181 (regressionFit = 2,522175, penalties=6.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(_, A), teamplaysagainstteam(D, A), athleteplaysforteam(C, D).  [covers 24,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,564421 (regressionFit = 2,564415, penalties=6.060000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(_, A), teamplaysagainstteam(D, A), athleteplaysforteam(C, E).  [covers 23,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,476964 (regressionFit = 2,476958, penalties=6.060000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(E, A), teamplaysagainstteam(D, A), athleteplaysforteam(C, E).  [covers 16,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,522181 (regressionFit = 2,522175, penalties=6.270000000000003E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(_, A), teamplaysagainstteam(D, A), athleteplaysforteam(C, _).  [covers 24,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,564421 (regressionFit = 2,564415, penalties=6.270000000000003E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(_, A), teamplaysagainstteam(D, A), athleteplaysforteam(_, A).  [covers 23,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,522181 (regressionFit = 2,522175, penalties=6.270000000000003E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(_, A), teamplaysagainstteam(D, A), athleteplaysforteam(_, D).  [covers 24,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,522181 (regressionFit = 2,522175, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(_, A), teamplaysagainstteam(D, A), athleteplaysforteam(_, E).  [covers 24,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,522181 (regressionFit = 2,522175, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(E, A), teamplaysagainstteam(D, A), athleteplaysforteam(_, E).  [covers 24,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,522181 (regressionFit = 2,522175, penalties=6.270000000000003E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(_, A), teamplaysagainstteam(D, A), athleteplaysinleague(C, _).  [covers 24,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,522181 (regressionFit = 2,522175, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(_, A), teamplaysagainstteam(D, A), athleteplayssport(_, B).  [covers 24,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,673884 (regressionFit = 2,673878, penalties=6.0600000000000004E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(_, A), teamplaysagainstteam(D, A), teamalsoknownas(A, D).  [covers 5,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,673884 (regressionFit = 2,673878, penalties=5.9600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(_, A), teamplaysagainstteam(D, A), teamalsoknownas(A, E).  [covers 5,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,684114 (regressionFit = 2,684108, penalties=5.9600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(E, A), teamplaysagainstteam(D, A), teamalsoknownas(A, E).  [covers 4,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,505396 (regressionFit = 2,505390, penalties=6.0600000000000004E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(_, A), teamplaysagainstteam(D, A), teamalsoknownas(D, A).  [covers 15,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,365422 (regressionFit = 2,365416, penalties=5.9600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(_, A), teamplaysagainstteam(D, A), teamalsoknownas(D, E).  [covers 19,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,624356 (regressionFit = 2,624350, penalties=5.9600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(_, A), teamplaysagainstteam(D, A), teamalsoknownas(E, A).  [covers 21,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,407914 (regressionFit = 2,407908, penalties=5.9600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(_, A), teamplaysagainstteam(D, A), teamalsoknownas(E, D).  [covers 18,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,505396 (regressionFit = 2,505390, penalties=5.9600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(E, A), teamplaysagainstteam(D, A), teamalsoknownas(E, D).  [covers 15,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,678206 (regressionFit = 2,678200, penalties=5.8600000000000015E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(F, A), teamplaysagainstteam(D, A), teamalsoknownas(F, E).  [covers 18,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,662868 (regressionFit = 2,662862, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(_, A), teamplaysagainstteam(D, A), teamalsoknownas(A, _).  [covers 6,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,101025 (regressionFit = 2,101019, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(_, A), teamplaysagainstteam(D, A), teamalsoknownas(D, _).  [covers 23,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,522181 (regressionFit = 2,522175, penalties=6.07E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(_, A), teamplaysagainstteam(D, A), teamalsoknownas(E, _).  [covers 24,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,522181 (regressionFit = 2,522175, penalties=6.07E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(E, A), teamplaysagainstteam(D, A), teamalsoknownas(E, _).  [covers 24,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,522181 (regressionFit = 2,522175, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(_, A), teamplaysagainstteam(D, A), teamalsoknownas(_, A).  [covers 24,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,257260 (regressionFit = 2,257253, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(_, A), teamplaysagainstteam(D, A), teamalsoknownas(_, D).  [covers 21,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,597686 (regressionFit = 2,597680, penalties=6.07E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(_, A), teamplaysagainstteam(D, A), teamalsoknownas(_, E).  [covers 22,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,564421 (regressionFit = 2,564415, penalties=6.0600000000000004E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(_, A), teamplaysagainstteam(D, A), teamplaysagainstteam(A, D).  [covers 23,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,624356 (regressionFit = 2,624350, penalties=5.9600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(E, A), teamplaysagainstteam(D, A), teamplaysagainstteam(A, E).  [covers 21,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,522181 (regressionFit = 2,522175, penalties=5.9600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(_, A), teamplaysagainstteam(D, A), teamplaysagainstteam(D, E).  [covers 24,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,624356 (regressionFit = 2,624350, penalties=5.9600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(E, A), teamplaysagainstteam(D, A), teamplaysagainstteam(D, E).  [covers 21,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,522181 (regressionFit = 2,522175, penalties=5.9600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(_, A), teamplaysagainstteam(D, A), teamplaysagainstteam(E, A).  [covers 24,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,522181 (regressionFit = 2,522175, penalties=5.9600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(_, A), teamplaysagainstteam(D, A), teamplaysagainstteam(E, D).  [covers 24,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,522181 (regressionFit = 2,522175, penalties=5.8600000000000015E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(F, A), teamplaysagainstteam(D, A), teamplaysagainstteam(E, F).  [covers 24,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,624356 (regressionFit = 2,624350, penalties=5.9600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(E, A), teamplaysagainstteam(D, A), teamplaysagainstteam(E, A).  [covers 21,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,624356 (regressionFit = 2,624350, penalties=5.9600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(E, A), teamplaysagainstteam(D, A), teamplaysagainstteam(E, D).  [covers 21,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,522181 (regressionFit = 2,522175, penalties=5.8600000000000015E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(F, A), teamplaysagainstteam(D, A), teamplaysagainstteam(F, E).  [covers 24,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,522181 (regressionFit = 2,522175, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(_, A), teamplaysagainstteam(D, A), teamplaysagainstteam(A, _).  [covers 24,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,522181 (regressionFit = 2,522175, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(_, A), teamplaysagainstteam(D, A), teamplaysagainstteam(D, _).  [covers 24,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,522181 (regressionFit = 2,522175, penalties=6.07E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(_, A), teamplaysagainstteam(D, A), teamplaysagainstteam(E, _).  [covers 24,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,522181 (regressionFit = 2,522175, penalties=6.07E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(E, A), teamplaysagainstteam(D, A), teamplaysagainstteam(E, _).  [covers 24,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,522181 (regressionFit = 2,522175, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(_, A), teamplaysagainstteam(D, A), teamplaysagainstteam(_, A).  [covers 24,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,522181 (regressionFit = 2,522175, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(_, A), teamplaysagainstteam(D, A), teamplaysagainstteam(_, D).  [covers 24,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,522181 (regressionFit = 2,522175, penalties=6.07E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(_, A), teamplaysagainstteam(D, A), teamplaysagainstteam(_, E).  [covers 24,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,522181 (regressionFit = 2,522175, penalties=6.07E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(E, A), teamplaysagainstteam(D, A), teamplaysagainstteam(_, E).  [covers 24,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,522181 (regressionFit = 2,522175, penalties=6.270000000000003E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(_, A), teamplaysagainstteam(D, A), teamplaysinleague(A, _).  [covers 24,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,522181 (regressionFit = 2,522175, penalties=6.270000000000003E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(_, A), teamplaysagainstteam(D, A), teamplaysinleague(D, _).  [covers 24,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,522181 (regressionFit = 2,522175, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(_, A), teamplaysagainstteam(D, A), teamplaysinleague(E, _).  [covers 24,0/32,0 pos, 0,0/0,0 neg]
%     Score = -2,522181 (regressionFit = 2,522175, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(E, A), teamplaysagainstteam(D, A), teamplaysinleague(E, _).  [covers 24,0/32,0 pos, 0,0/0,0 neg]

***** Warning: #16 TOO MANY NODES CONSIDERED (i.e., 'expanded') for 'LearnOneClause': nodesConsidered = 10 and maxNodesToConsider = 10. *****


% The best node found: teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(E, A), teamplaysagainstteam(D, E), teamalsoknownas(_, D).  [covers 23,0/32,0 pos, 0,0/0,0 neg]

% The best node found: teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(E, A), teamplaysagainstteam(D, E), teamalsoknownas(_, D).  [covers 23,0/32,0 pos, 0,0/0,0 neg]

% Expanding node at Level 3 with score = -0,085.
% Will extend: teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(E, A), teamplaysagainstteam(D, E), teamalsoknownas(_, D).  [covers 23,0/32,0 pos, 0,0/0,0 neg]
% Path: 2;true,true,true
Comparing variance: 3.8616453030440226E-17 to score=0.0025 #egs=23.0
Comparing variance: 0.23344656647182704 to score=0.0025 #egs=9.0
%   Creating a TRUE-branch and FALSE-branch leaves because level = 3 >= 3

% Time for loop #7: 8,014 seconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #7, the best clause found is:
%      teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(E, A), teamplaysagainstteam(D, E), teamalsoknownas(_, D).  [covers 23,0/32,0 pos, 0,0/0,0 neg]
% This clause covers 23 positive examples, of which 23 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'teamplayssport(_, A) :- athleteplayssport(B, A), athleteledsportsteam(B, _).  [covers 381,0/349,0 pos, 0,0/0,0 neg]'
%     Score = -11,276491 (regressionFit = 11,276489, penalties=2.24E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteledsportsteam(B, _).  [covers 349,0/349,0 pos, 0,0/0,0 neg]

% Have these 7 positive seeds: 67 87 94 96 140 164 215
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Consider expanding [#1 of outerLoop #8, bodyLen=2] 'teamplayssport(_, A) :- athleteplayssport(B, A), athleteledsportsteam(B, _).  [covers 349,0/349,0 pos, 0,0/0,0 neg]' score=-11.276491242953622
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 22 variant children.  Sending 20 items to OPEN for evaluation and possible insertion.
% Have created 20 valid-on-seeds descendants and have picked up 23 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteledsportsteam(B, _), athleteledsportsteam(B, _).  [covers 349,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,859523 (regressionFit = 3,859520, penalties=3.1500000000000008E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteledsportsteam(_, A).  [covers 89,0/349,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -3,859523): teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteledsportsteam(_, A).  [covers 89,0/349,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000008E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteledsportsteam(B, C), athleteledsportsteam(_, C).  [covers 349,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,888938 (regressionFit = 3,888935, penalties=3.1400000000000004E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(C, A).  [covers 57,0/349,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1400000000000004E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteledsportsteam(B, C), athleteplaysforteam(B, C).  [covers 349,0/349,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.35E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteledsportsteam(B, _), athleteplaysforteam(B, _).  [covers 349,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,860120 (regressionFit = 3,860117, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(_, A).  [covers 147,0/349,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteledsportsteam(B, C), athleteplaysforteam(_, C).  [covers 349,0/349,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.35E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteledsportsteam(B, _), athleteplaysinleague(B, _).  [covers 349,0/349,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteledsportsteam(B, _), athleteplayssport(_, A).  [covers 349,0/349,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteledsportsteam(B, C), teamalsoknownas(C, _).  [covers 349,0/349,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteledsportsteam(B, C), teamalsoknownas(_, C).  [covers 349,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,882719 (regressionFit = 3,882716, penalties=3.0400000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, D).  [covers 134,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,890330 (regressionFit = 3,890327, penalties=3.0400000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(D, A).  [covers 143,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,877457 (regressionFit = 3,877454, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, _).  [covers 185,0/349,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteledsportsteam(B, C), teamplaysagainstteam(C, _).  [covers 349,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,880863 (regressionFit = 3,880860, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(_, A).  [covers 198,0/349,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteledsportsteam(B, C), teamplaysagainstteam(_, C).  [covers 349,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,864776 (regressionFit = 3,864773, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysinleague(A, _).  [covers 269,0/349,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteledsportsteam(B, C), teamplaysinleague(C, _).  [covers 349,0/349,0 pos, 0,0/0,0 neg]

% Consider expanding [#2 of outerLoop #8, bodyLen=3] 'teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteledsportsteam(_, A).  [covers 89,0/349,0 pos, 0,0/0,0 neg]' score=-3.859522784672388
%  At # nodes expanded = 2, |OPEN| = 19.  Pruned 30 variant children.  Sending 25 items to OPEN for evaluation and possible insertion.
% Have created 25 valid-on-seeds descendants and have picked up 8 bad extensions.
%     Score = -3,859524 (regressionFit = 3,859520, penalties=4.16E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteledsportsteam(_, A), athleteledsportsteam(_, A).  [covers 89,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,859524 (regressionFit = 3,859520, penalties=4.060000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteledsportsteam(_, A), athleteledsportsteam(_, D).  [covers 89,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,889143 (regressionFit = 3,889139, penalties=4.150000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteledsportsteam(_, A), athleteplaysforteam(C, A).  [covers 50,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,859524 (regressionFit = 3,859520, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteledsportsteam(_, A), athleteplaysforteam(C, D).  [covers 89,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,848009 (regressionFit = 3,848005, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteledsportsteam(D, A), athleteplaysforteam(D, A).  [covers 69,0/349,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -3,848009): teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteledsportsteam(D, A), athleteplaysforteam(D, A).  [covers 69,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,888799 (regressionFit = 3,888795, penalties=3.95E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteledsportsteam(E, A), athleteplaysforteam(E, D).  [covers 58,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,859524 (regressionFit = 3,859520, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteledsportsteam(_, A), athleteplaysforteam(C, _).  [covers 89,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,857744 (regressionFit = 3,857740, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteledsportsteam(D, A), athleteplaysforteam(D, _).  [covers 85,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,853703 (regressionFit = 3,853699, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteledsportsteam(_, A), athleteplaysforteam(_, A).  [covers 78,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,859524 (regressionFit = 3,859520, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteledsportsteam(_, A), athleteplaysforteam(_, D).  [covers 89,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,859524 (regressionFit = 3,859520, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteledsportsteam(_, A), athleteplaysinleague(C, _).  [covers 89,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,851103 (regressionFit = 3,851099, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteledsportsteam(D, A), athleteplaysinleague(D, _).  [covers 79,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,888676 (regressionFit = 3,888672, penalties=3.95E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteledsportsteam(D, A), athleteplayssport(D, B).  [covers 62,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,851565 (regressionFit = 3,851561, penalties=4.060000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteledsportsteam(D, A), athleteplayssport(D, _).  [covers 77,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,859524 (regressionFit = 3,859520, penalties=4.16E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteledsportsteam(_, A), athleteplayssport(_, B).  [covers 89,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,859524 (regressionFit = 3,859520, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteledsportsteam(_, A), teamalsoknownas(D, _).  [covers 89,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,859524 (regressionFit = 3,859520, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteledsportsteam(_, A), teamalsoknownas(_, D).  [covers 89,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,888159 (regressionFit = 3,888155, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteledsportsteam(_, A), teamplaysagainstteam(A, D).  [covers 81,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,888058 (regressionFit = 3,888054, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteledsportsteam(_, A), teamplaysagainstteam(D, A).  [covers 81,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,857364 (regressionFit = 3,857360, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteledsportsteam(_, A), teamplaysagainstteam(A, _).  [covers 86,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,859524 (regressionFit = 3,859520, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteledsportsteam(_, A), teamplaysagainstteam(D, _).  [covers 89,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,858199 (regressionFit = 3,858195, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteledsportsteam(_, A), teamplaysagainstteam(_, A).  [covers 87,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,859524 (regressionFit = 3,859520, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteledsportsteam(_, A), teamplaysagainstteam(_, D).  [covers 89,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,859524 (regressionFit = 3,859520, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteledsportsteam(_, A), teamplaysinleague(A, _).  [covers 89,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,859524 (regressionFit = 3,859520, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteledsportsteam(_, A), teamplaysinleague(D, _).  [covers 89,0/349,0 pos, 0,0/0,0 neg]

% Consider expanding [#3 of outerLoop #8, bodyLen=3] 'teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(_, A).  [covers 147,0/349,0 pos, 0,0/0,0 neg]' score=-3.860120329004922
%  At # nodes expanded = 3, |OPEN| = 18.  Pruned 30 variant children.  Sending 25 items to OPEN for evaluation and possible insertion.
% Have created 25 valid-on-seeds descendants and have picked up 8 bad extensions.
%     Score = -3,848009 (regressionFit = 3,848005, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(D, A), athleteledsportsteam(D, A).  [covers 69,0/349,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -3,848009): teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(D, A), athleteledsportsteam(D, A).  [covers 69,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,888787 (regressionFit = 3,888783, penalties=3.95E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(E, A), athleteledsportsteam(E, D).  [covers 62,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,860222 (regressionFit = 3,860218, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(D, A), athleteledsportsteam(D, _).  [covers 85,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,853703 (regressionFit = 3,853699, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(_, A), athleteledsportsteam(_, A).  [covers 78,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,860121 (regressionFit = 3,860117, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(_, A), athleteledsportsteam(_, D).  [covers 147,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,888939 (regressionFit = 3,888935, penalties=4.150000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(_, A), athleteplaysforteam(C, A).  [covers 57,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,860121 (regressionFit = 3,860117, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(_, A), athleteplaysforteam(C, D).  [covers 147,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,860121 (regressionFit = 3,860117, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(_, A), athleteplaysforteam(C, _).  [covers 147,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,860121 (regressionFit = 3,860117, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(_, A), athleteplaysforteam(_, A).  [covers 147,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,860121 (regressionFit = 3,860117, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(_, A), athleteplaysforteam(_, D).  [covers 147,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,860121 (regressionFit = 3,860117, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(_, A), athleteplaysinleague(C, _).  [covers 147,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,818014 (regressionFit = 3,818010, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(D, A), athleteplaysinleague(D, _).  [covers 104,0/349,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -3,818014): teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(D, A), athleteplaysinleague(D, _).  [covers 104,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,887937 (regressionFit = 3,887933, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(D, A), athleteplayssport(D, B).  [covers 76,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,818478 (regressionFit = 3,818474, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(D, A), athleteplayssport(D, _).  [covers 101,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,860121 (regressionFit = 3,860117, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(_, A), athleteplayssport(_, B).  [covers 147,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,860121 (regressionFit = 3,860117, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(_, A), teamalsoknownas(D, _).  [covers 147,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,860121 (regressionFit = 3,860117, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(_, A), teamalsoknownas(_, D).  [covers 147,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,885243 (regressionFit = 3,885239, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(_, A), teamplaysagainstteam(A, D).  [covers 110,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,888992 (regressionFit = 3,888988, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(_, A), teamplaysagainstteam(D, A).  [covers 114,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,855045 (regressionFit = 3,855041, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(_, A), teamplaysagainstteam(A, _).  [covers 137,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,860121 (regressionFit = 3,860117, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(_, A), teamplaysagainstteam(D, _).  [covers 147,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,858343 (regressionFit = 3,858338, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(_, A), teamplaysagainstteam(_, A).  [covers 143,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,860121 (regressionFit = 3,860117, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(_, A), teamplaysagainstteam(_, D).  [covers 147,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,857282 (regressionFit = 3,857278, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(_, A), teamplaysinleague(A, _).  [covers 142,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,860121 (regressionFit = 3,860117, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(_, A), teamplaysinleague(D, _).  [covers 147,0/349,0 pos, 0,0/0,0 neg]

% Consider expanding [#4 of outerLoop #8, bodyLen=3] 'teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysinleague(A, _).  [covers 269,0/349,0 pos, 0,0/0,0 neg]' score=-3.8647759270505277
%  At # nodes expanded = 4, |OPEN| = 17.  Pruned 26 variant children.  Sending 23 items to OPEN for evaluation and possible insertion.
% Have created 23 valid-on-seeds descendants and have picked up 7 bad extensions.
%     Score = -3,864777 (regressionFit = 3,864773, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysinleague(A, _), athleteledsportsteam(C, _).  [covers 269,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,859524 (regressionFit = 3,859520, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysinleague(A, _), athleteledsportsteam(_, A).  [covers 89,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,864777 (regressionFit = 3,864773, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysinleague(A, _), athleteledsportsteam(_, D).  [covers 269,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,888969 (regressionFit = 3,888965, penalties=4.250000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysinleague(A, _), athleteplaysforteam(C, A).  [covers 56,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,864777 (regressionFit = 3,864773, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysinleague(A, _), athleteplaysforteam(C, D).  [covers 269,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,864777 (regressionFit = 3,864773, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysinleague(A, _), athleteplaysforteam(C, _).  [covers 269,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,857282 (regressionFit = 3,857278, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysinleague(A, _), athleteplaysforteam(_, A).  [covers 142,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,864777 (regressionFit = 3,864773, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysinleague(A, _), athleteplaysforteam(_, D).  [covers 269,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,874287 (regressionFit = 3,874283, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysinleague(A, D), athleteplaysinleague(C, D).  [covers 157,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,864777 (regressionFit = 3,864773, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysinleague(A, _), athleteplaysinleague(C, _).  [covers 269,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,877329 (regressionFit = 3,877325, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysinleague(A, D), athleteplaysinleague(_, D).  [covers 202,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,864777 (regressionFit = 3,864773, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysinleague(A, _), athleteplayssport(_, B).  [covers 269,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,864777 (regressionFit = 3,864773, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysinleague(A, _), teamalsoknownas(D, _).  [covers 269,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,864777 (regressionFit = 3,864773, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysinleague(A, _), teamalsoknownas(_, D).  [covers 269,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,884586 (regressionFit = 3,884582, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysinleague(A, _), teamplaysagainstteam(A, D).  [covers 129,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,889900 (regressionFit = 3,889896, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysinleague(A, _), teamplaysagainstteam(D, A).  [covers 136,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,868622 (regressionFit = 3,868617, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysinleague(A, _), teamplaysagainstteam(A, _).  [covers 170,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,864777 (regressionFit = 3,864773, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysinleague(A, _), teamplaysagainstteam(D, _).  [covers 269,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,870839 (regressionFit = 3,870835, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysinleague(A, _), teamplaysagainstteam(_, A).  [covers 177,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,864777 (regressionFit = 3,864773, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysinleague(A, _), teamplaysagainstteam(_, D).  [covers 269,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,880721 (regressionFit = 3,880717, penalties=3.95E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysinleague(A, E), teamplaysinleague(D, E).  [covers 219,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,864777 (regressionFit = 3,864773, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysinleague(A, _), teamplaysinleague(D, _).  [covers 269,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,864777 (regressionFit = 3,864773, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysinleague(A, D), teamplaysinleague(_, D).  [covers 269,0/349,0 pos, 0,0/0,0 neg]

% Consider expanding [#5 of outerLoop #8, bodyLen=3] 'teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, _).  [covers 185,0/349,0 pos, 0,0/0,0 neg]' score=-3.8774571972957483
%  At # nodes expanded = 5, |OPEN| = 16.  Pruned 44 variant children.  Sending 33 items to OPEN for evaluation and possible insertion.
% Have created 33 valid-on-seeds descendants and have picked up 12 bad extensions.
%     Score = -3,877458 (regressionFit = 3,877454, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, _), athleteledsportsteam(C, _).  [covers 185,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,857364 (regressionFit = 3,857360, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, _), athleteledsportsteam(_, A).  [covers 86,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,877458 (regressionFit = 3,877454, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), athleteledsportsteam(_, D).  [covers 185,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,856931 (regressionFit = 3,856926, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, D), athleteledsportsteam(_, D).  [covers 156,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,888939 (regressionFit = 3,888935, penalties=4.250000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, _), athleteplaysforteam(C, A).  [covers 57,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,877458 (regressionFit = 3,877454, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), athleteplaysforteam(C, D).  [covers 185,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,882201 (regressionFit = 3,882196, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, D), athleteplaysforteam(C, D).  [covers 143,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,877458 (regressionFit = 3,877454, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, _), athleteplaysforteam(C, _).  [covers 185,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,855045 (regressionFit = 3,855041, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, _), athleteplaysforteam(_, A).  [covers 137,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,877458 (regressionFit = 3,877454, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), athleteplaysforteam(_, D).  [covers 185,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,874917 (regressionFit = 3,874913, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, D), athleteplaysforteam(_, D).  [covers 179,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,877458 (regressionFit = 3,877454, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, _), athleteplaysinleague(C, _).  [covers 185,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,877458 (regressionFit = 3,877454, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, _), athleteplayssport(_, B).  [covers 185,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,885141 (regressionFit = 3,885137, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(D, E).  [covers 114,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,887735 (regressionFit = 3,887731, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(E, D).  [covers 76,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,877458 (regressionFit = 3,877454, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(D, _).  [covers 185,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,854223 (regressionFit = 3,854218, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, D), teamalsoknownas(D, _).  [covers 129,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,877458 (regressionFit = 3,877454, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(_, D).  [covers 185,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,884398 (regressionFit = 3,884394, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, D), teamalsoknownas(_, D).  [covers 137,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,882720 (regressionFit = 3,882716, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamplaysagainstteam(A, D).  [covers 134,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,890185 (regressionFit = 3,890181, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamplaysagainstteam(D, A).  [covers 137,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,863304 (regressionFit = 3,863300, penalties=3.95E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamplaysagainstteam(D, E).  [covers 166,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,874708 (regressionFit = 3,874704, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, D), teamplaysagainstteam(D, A).  [covers 173,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,863304 (regressionFit = 3,863300, penalties=3.95E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamplaysagainstteam(E, D).  [covers 166,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,877458 (regressionFit = 3,877454, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, _), teamplaysagainstteam(A, _).  [covers 185,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,877458 (regressionFit = 3,877454, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamplaysagainstteam(D, _).  [covers 185,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,877231 (regressionFit = 3,877227, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, D), teamplaysagainstteam(D, _).  [covers 183,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,876564 (regressionFit = 3,876560, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, _), teamplaysagainstteam(_, A).  [covers 180,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,877458 (regressionFit = 3,877454, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamplaysagainstteam(_, D).  [covers 185,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,877458 (regressionFit = 3,877454, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, D), teamplaysagainstteam(_, D).  [covers 185,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,868622 (regressionFit = 3,868617, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, _), teamplaysinleague(A, _).  [covers 170,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,877458 (regressionFit = 3,877454, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamplaysinleague(D, _).  [covers 185,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,877148 (regressionFit = 3,877144, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, D), teamplaysinleague(D, _).  [covers 184,0/349,0 pos, 0,0/0,0 neg]

% Consider expanding [#6 of outerLoop #8, bodyLen=3] 'teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(_, A).  [covers 198,0/349,0 pos, 0,0/0,0 neg]' score=-3.8808631153937307
%  At # nodes expanded = 6, |OPEN| = 15.  Pruned 44 variant children.  Sending 33 items to OPEN for evaluation and possible insertion.
% Have created 33 valid-on-seeds descendants and have picked up 12 bad extensions.
%     Score = -3,880864 (regressionFit = 3,880860, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(_, A), athleteledsportsteam(C, _).  [covers 198,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,858199 (regressionFit = 3,858195, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(_, A), athleteledsportsteam(_, A).  [covers 87,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,880864 (regressionFit = 3,880860, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(_, A), athleteledsportsteam(_, D).  [covers 198,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,863983 (regressionFit = 3,863979, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(D, A), athleteledsportsteam(_, D).  [covers 168,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,888939 (regressionFit = 3,888935, penalties=4.250000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(_, A), athleteplaysforteam(C, A).  [covers 57,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,880864 (regressionFit = 3,880860, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(_, A), athleteplaysforteam(C, D).  [covers 198,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,890329 (regressionFit = 3,890325, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(D, A), athleteplaysforteam(C, D).  [covers 150,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,880864 (regressionFit = 3,880860, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(_, A), athleteplaysforteam(C, _).  [covers 198,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,858343 (regressionFit = 3,858338, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(_, A), athleteplaysforteam(_, A).  [covers 143,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,880864 (regressionFit = 3,880860, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(_, A), athleteplaysforteam(_, D).  [covers 198,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,879083 (regressionFit = 3,879079, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(D, A), athleteplaysforteam(_, D).  [covers 194,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,880864 (regressionFit = 3,880860, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(_, A), athleteplaysinleague(C, _).  [covers 198,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,880864 (regressionFit = 3,880860, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(_, A), athleteplayssport(_, B).  [covers 198,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,884763 (regressionFit = 3,884759, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(E, A), teamalsoknownas(D, E).  [covers 113,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,886518 (regressionFit = 3,886514, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(E, A), teamalsoknownas(E, D).  [covers 87,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,880864 (regressionFit = 3,880860, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(_, A), teamalsoknownas(D, _).  [covers 198,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,853637 (regressionFit = 3,853632, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(D, A), teamalsoknownas(D, _).  [covers 137,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,880864 (regressionFit = 3,880860, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(_, A), teamalsoknownas(_, D).  [covers 198,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,882463 (regressionFit = 3,882459, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(D, A), teamalsoknownas(_, D).  [covers 140,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,882814 (regressionFit = 3,882810, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(_, A), teamplaysagainstteam(A, D).  [covers 133,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,874708 (regressionFit = 3,874704, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(D, A), teamplaysagainstteam(A, D).  [covers 173,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,890331 (regressionFit = 3,890327, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(_, A), teamplaysagainstteam(D, A).  [covers 143,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,869036 (regressionFit = 3,869032, penalties=3.95E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(E, A), teamplaysagainstteam(D, E).  [covers 175,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,869036 (regressionFit = 3,869032, penalties=3.95E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(E, A), teamplaysagainstteam(E, D).  [covers 175,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,876564 (regressionFit = 3,876560, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(_, A), teamplaysagainstteam(A, _).  [covers 180,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,880864 (regressionFit = 3,880860, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(_, A), teamplaysagainstteam(D, _).  [covers 198,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,880864 (regressionFit = 3,880860, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(D, A), teamplaysagainstteam(D, _).  [covers 198,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,880864 (regressionFit = 3,880860, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(_, A), teamplaysagainstteam(_, A).  [covers 198,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,880864 (regressionFit = 3,880860, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(_, A), teamplaysagainstteam(_, D).  [covers 198,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,880864 (regressionFit = 3,880860, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(D, A), teamplaysagainstteam(_, D).  [covers 198,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,870839 (regressionFit = 3,870835, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(_, A), teamplaysinleague(A, _).  [covers 177,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,880864 (regressionFit = 3,880860, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(_, A), teamplaysinleague(D, _).  [covers 198,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,880774 (regressionFit = 3,880769, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(D, A), teamplaysinleague(D, _).  [covers 197,0/349,0 pos, 0,0/0,0 neg]

% Consider expanding [#7 of outerLoop #8, bodyLen=3] 'teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, D).  [covers 134,0/349,0 pos, 0,0/0,0 neg]' score=-3.8827188209864163
%  At # nodes expanded = 7, |OPEN| = 14.  Pruned 20 variant children.  Sending 18 items to OPEN for evaluation and possible insertion.
% Have created 18 valid-on-seeds descendants and have picked up 7 bad extensions.
%     Score = -3,888159 (regressionFit = 3,888155, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, D), athleteledsportsteam(_, A).  [covers 81,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,882720 (regressionFit = 3,882716, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, D), athleteledsportsteam(_, D).  [covers 134,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,890124 (regressionFit = 3,890120, penalties=4.040000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, D), athleteplaysforteam(C, A).  [covers 11,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,883456 (regressionFit = 3,883452, penalties=4.040000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, D), athleteplaysforteam(C, D).  [covers 132,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,882720 (regressionFit = 3,882716, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, D), athleteplaysforteam(C, _).  [covers 134,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,885243 (regressionFit = 3,885239, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, D), athleteplaysforteam(_, A).  [covers 110,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,882720 (regressionFit = 3,882716, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, D), athleteplaysforteam(_, D).  [covers 134,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,885041 (regressionFit = 3,885037, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, D), athleteplaysinleague(C, _).  [covers 132,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,882720 (regressionFit = 3,882716, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, D), athleteplayssport(_, B).  [covers 134,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,886671 (regressionFit = 3,886667, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, D), teamalsoknownas(D, _).  [covers 100,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,886050 (regressionFit = 3,886046, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, D), teamalsoknownas(_, D).  [covers 113,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,883580 (regressionFit = 3,883576, penalties=3.940000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, D), teamplaysagainstteam(D, A).  [covers 128,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,882720 (regressionFit = 3,882716, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, D), teamplaysagainstteam(A, _).  [covers 134,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,882720 (regressionFit = 3,882716, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, D), teamplaysagainstteam(D, _).  [covers 134,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,882814 (regressionFit = 3,882810, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, D), teamplaysagainstteam(_, A).  [covers 133,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,882720 (regressionFit = 3,882716, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, D), teamplaysagainstteam(_, D).  [covers 134,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,884586 (regressionFit = 3,884582, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, D), teamplaysinleague(A, _).  [covers 129,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,882720 (regressionFit = 3,882716, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, D), teamplaysinleague(D, _).  [covers 134,0/349,0 pos, 0,0/0,0 neg]

% Consider expanding [#8 of outerLoop #8, bodyLen=3] 'teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(C, A).  [covers 57,0/349,0 pos, 0,0/0,0 neg]' score=-3.8889383163760196
%  At # nodes expanded = 8, |OPEN| = 13.  Pruned 20 variant children.  Sending 14 items to OPEN for evaluation and possible insertion.
% Have created 14 valid-on-seeds descendants and have picked up 8 bad extensions.
%     Score = -3,889143 (regressionFit = 3,889139, penalties=4.150000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(C, A), athleteledsportsteam(_, A).  [covers 50,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,888939 (regressionFit = 3,888935, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(C, A), athleteledsportsteam(_, D).  [covers 57,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,888939 (regressionFit = 3,888935, penalties=4.150000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(C, A), athleteplaysforteam(_, A).  [covers 57,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,888998 (regressionFit = 3,888994, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(C, A), athleteplaysforteam(_, D).  [covers 55,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,889028 (regressionFit = 3,889024, penalties=4.250000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(C, A), athleteplaysinleague(C, _).  [covers 54,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,888939 (regressionFit = 3,888935, penalties=4.150000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(C, A), athleteplayssport(_, B).  [covers 57,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,890124 (regressionFit = 3,890120, penalties=4.040000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(C, A), teamplaysagainstteam(A, D).  [covers 11,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,890124 (regressionFit = 3,890120, penalties=4.040000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(C, A), teamplaysagainstteam(D, A).  [covers 11,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,888939 (regressionFit = 3,888935, penalties=4.250000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(C, A), teamplaysagainstteam(A, _).  [covers 57,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,888999 (regressionFit = 3,888994, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(C, A), teamplaysagainstteam(D, _).  [covers 55,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,888939 (regressionFit = 3,888935, penalties=4.250000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(C, A), teamplaysagainstteam(_, A).  [covers 57,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,888999 (regressionFit = 3,888994, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(C, A), teamplaysagainstteam(_, D).  [covers 55,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,888969 (regressionFit = 3,888965, penalties=4.250000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(C, A), teamplaysinleague(A, _).  [covers 56,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,888939 (regressionFit = 3,888935, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(C, A), teamplaysinleague(D, _).  [covers 57,0/349,0 pos, 0,0/0,0 neg]

% Consider expanding [#9 of outerLoop #8, bodyLen=3] 'teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(D, A).  [covers 143,0/349,0 pos, 0,0/0,0 neg]' score=-3.8903295717354966
%  At # nodes expanded = 9, |OPEN| = 12.  Pruned 20 variant children.  Sending 18 items to OPEN for evaluation and possible insertion.
% Have created 18 valid-on-seeds descendants and have picked up 7 bad extensions.
%     Score = -3,888058 (regressionFit = 3,888054, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(D, A), athleteledsportsteam(_, A).  [covers 81,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,890331 (regressionFit = 3,890327, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(D, A), athleteledsportsteam(_, D).  [covers 143,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,890124 (regressionFit = 3,890120, penalties=4.040000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(D, A), athleteplaysforteam(C, A).  [covers 11,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,890225 (regressionFit = 3,890221, penalties=4.040000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(D, A), athleteplaysforteam(C, D).  [covers 140,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,890331 (regressionFit = 3,890327, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(D, A), athleteplaysforteam(C, _).  [covers 143,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,888992 (regressionFit = 3,888988, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(D, A), athleteplaysforteam(_, A).  [covers 114,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,890331 (regressionFit = 3,890327, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(D, A), athleteplaysforteam(_, D).  [covers 143,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,889777 (regressionFit = 3,889773, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(D, A), athleteplaysinleague(C, _).  [covers 140,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,890331 (regressionFit = 3,890327, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(D, A), athleteplayssport(_, B).  [covers 143,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,886147 (regressionFit = 3,886142, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(D, A), teamalsoknownas(D, _).  [covers 104,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,884975 (regressionFit = 3,884971, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(D, A), teamalsoknownas(_, D).  [covers 114,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,883580 (regressionFit = 3,883576, penalties=3.940000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(D, A), teamplaysagainstteam(A, D).  [covers 128,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,890185 (regressionFit = 3,890181, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(D, A), teamplaysagainstteam(A, _).  [covers 137,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,890331 (regressionFit = 3,890327, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(D, A), teamplaysagainstteam(D, _).  [covers 143,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,890331 (regressionFit = 3,890327, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(D, A), teamplaysagainstteam(_, A).  [covers 143,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,890331 (regressionFit = 3,890327, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(D, A), teamplaysagainstteam(_, D).  [covers 143,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,889900 (regressionFit = 3,889896, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(D, A), teamplaysinleague(A, _).  [covers 136,0/349,0 pos, 0,0/0,0 neg]
%     Score = -3,890331 (regressionFit = 3,890327, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(D, A), teamplaysinleague(D, _).  [covers 143,0/349,0 pos, 0,0/0,0 neg]

***** Warning: #17 TOO MANY NODES CONSIDERED (i.e., 'expanded') for 'LearnOneClause': nodesConsidered = 10 and maxNodesToConsider = 10. *****


% The best node found: teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(D, A), athleteplaysinleague(D, _).  [covers 104,0/349,0 pos, 0,0/0,0 neg]

% The best node found: teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(D, A), athleteplaysinleague(D, _).  [covers 104,0/349,0 pos, 0,0/0,0 neg]

% Expanding node at Level 3 with score = -0,011.
% Will extend: teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(D, A), athleteplaysinleague(D, _).  [covers 104,0/349,0 pos, 0,0/0,0 neg]
% Path: 2;true,true,false
Comparing variance: 0.026946175097899188 to score=0.0025 #egs=104.0
Comparing variance: 0.004145338861073355 to score=0.0025 #egs=245.0
%   Creating a TRUE-branch and FALSE-branch leaves because level = 3 >= 3

% Time for loop #8: 8,803 seconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #8, the best clause found is:
%      teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(D, A), athleteplaysinleague(D, _).  [covers 104,0/349,0 pos, 0,0/0,0 neg]
% This clause covers 104 positive examples, of which 104 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% ******************************************

% Have stopped ILP's outer loop because have reached the maximum number of learned clauses (8).

% ******************************************
Created a leaf under (teamplayssport(D, E) :- athleteplayssport(Anon55671, E))

%%%%%  WILL-Produced Tree #3 @ 13:22:22 10/22/21.  [Using 33.485.456 memory cells.]  %%%%%


% FOR teamplayssport(A, B):
%   if ( athleteplayssport(C, B) )
%   then if ( athleteledsportsteam(C, D) )
%   | then if ( teamplaysagainstteam(A, E), teamalsoknownas(F, A) )
%   | | then if ( teamplaysagainstteam(D, F), teamalsoknownas(G, D) )
%   | | | then return 0.5548321993441706;  // std dev = 2,98e-08, 23,000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return 0.24583945135291488;  // std dev = 1,449, 9,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=6 */
%   | | else if ( athleteplaysforteam(H, A), athleteplaysinleague(H, I) )
%   | | | then return 0.5281645604490696;  // std dev = 1,674, 104,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=101 */
%   | | | else return 0.5596437682205031;  // std dev = 1,008, 245,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=244 */
%   | else if ( teamplaysinleague(A, J), athleteplaysforteam(K, A) )
%   | | then if ( athleteledsportsteam(K, A) )
%   | | | then return 0.343781181251428;  // std dev = 0,566, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return -0.19118713231387038;  // std dev = 0,265, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( teamalsoknownas(A, L) )
%   | | | then return 0.6416993557614659;  // std dev = 0,256, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.42891010931988355;  // std dev = 1,459, 13,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=10 */
%   else return -0.10961441273721338;  // std dev = 0,062, 752,000 (wgt'ed) examples reached here.  /* #neg=749 #pos=3 */


% Clauses:

teamplayssport(A, B, 0.5548321993441706) :- 
     athleteplayssport(C, B), 
     athleteledsportsteam(C, D), 
     teamplaysagainstteam(A, E), 
     teamalsoknownas(F, A), 
     teamplaysagainstteam(D, F), 
     teamalsoknownas(G, D), 
     !. // Clause #1.

teamplayssport(A, B, 0.24583945135291488) :- 
     athleteplayssport(C, B), 
     athleteledsportsteam(C, D), 
     teamplaysagainstteam(A, E), 
     teamalsoknownas(F, A), 
     !. // Clause #2.

teamplayssport(A, B, 0.5281645604490696) :- 
     athleteplayssport(C, B), 
     athleteledsportsteam(C, D), 
     athleteplaysforteam(E, A), 
     athleteplaysinleague(E, F), 
     !. // Clause #3.

teamplayssport(A, B, 0.5596437682205031) :- 
     athleteplayssport(C, B), 
     athleteledsportsteam(C, D), 
     !. // Clause #4.

teamplayssport(A, B, 0.343781181251428) :- 
     athleteplayssport(C, B), 
     teamplaysinleague(A, D), 
     athleteplaysforteam(E, A), 
     athleteledsportsteam(E, A), 
     !. // Clause #5.

teamplayssport(A, B, -0.19118713231387038) :- 
     athleteplayssport(C, B), 
     teamplaysinleague(A, D), 
     athleteplaysforteam(E, A), 
     !. // Clause #6.

teamplayssport(A, B, 0.6416993557614659) :- 
     athleteplayssport(C, B), 
     teamalsoknownas(A, D), 
     !. // Clause #7.

teamplayssport(A, B, 0.42891010931988355) :- 
     athleteplayssport(C, B), 
     !. // Clause #8.

teamplayssport(A, B, -0.10961441273721338) :- !. // Clause #9.


% The flattened versions of these clauses:

flattened_teamplayssport(a, b, 0.5548321993441706) :-  /* #pos=23 */ 
   athleteplayssport(uniqueVar25, b),
   athleteledsportsteam(uniqueVar25, uniqueVar26),
   teamplaysagainstteam(a, underscore),
   teamalsoknownas(uniqueVar27, a),
   teamplaysagainstteam(uniqueVar26, uniqueVar27),
   teamalsoknownas(underscore, uniqueVar26),
   !. // Flattened version of clause #1.

flattened_teamplayssport(a, b, 0.24583945135291488) :-  /* #neg=3 #pos=6 */ 
   athleteplayssport(uniqueVar28, b),
   athleteledsportsteam(uniqueVar28, underscore),
   teamplaysagainstteam(a, underscore),
   teamalsoknownas(underscore, a),
   !. // Flattened version of clause #2.

flattened_teamplayssport(a, b, 0.5281645604490696) :-  /* #neg=3 #pos=101 */ 
   athleteplayssport(uniqueVar29, b),
   athleteledsportsteam(uniqueVar29, underscore),
   athleteplaysforteam(uniqueVar30, a),
   athleteplaysinleague(uniqueVar30, underscore),
   !. // Flattened version of clause #3.

flattened_teamplayssport(underscore, a, 0.5596437682205031) :-  /* #neg=1 #pos=244 */ 
   athleteplayssport(uniqueVar31, a),
   athleteledsportsteam(uniqueVar31, underscore),
   !. // Flattened version of clause #4.

flattened_teamplayssport(a, b, 0.343781181251428) :-  /* #neg=1 #pos=2 */ 
   athleteplayssport(underscore, b),
   teamplaysinleague(a, underscore),
   athleteplaysforteam(uniqueVar32, a),
   athleteledsportsteam(uniqueVar32, a),
   !. // Flattened version of clause #5.

flattened_teamplayssport(a, b, -0.19118713231387038) :-  /* #neg=4 */ 
   athleteplayssport(underscore, b),
   teamplaysinleague(a, underscore),
   athleteplaysforteam(underscore, a),
   !. // Flattened version of clause #6.

flattened_teamplayssport(a, b, 0.6416993557614659) :-  /* #pos=8 */ 
   athleteplayssport(underscore, b),
   teamalsoknownas(a, underscore),
   !. // Flattened version of clause #7.

flattened_teamplayssport(underscore, a, 0.42891010931988355) :-  /* #neg=3 #pos=10 */ 
   athleteplayssport(underscore, a),
   !. // Flattened version of clause #8.

flattened_teamplayssport(underscore, underscore, -0.10961441273721338) :-  /* #neg=749 #pos=3 */ 
   !. // Flattened version of clause #9.


% The unique flattened literals:
%   teamplaysagainstteam(uniqueVar26, uniqueVar27)
%   athleteplayssport(underscore, b)
%   teamalsoknownas(underscore, uniqueVar26)
%   teamplaysagainstteam(a, underscore)
%   athleteledsportsteam(uniqueVar28, underscore)
%   athleteledsportsteam(uniqueVar31, underscore)
%   athleteledsportsteam(uniqueVar25, uniqueVar26)
%   athleteplaysforteam(uniqueVar30, a)
%   athleteplayssport(uniqueVar29, b)
%   teamalsoknownas(a, underscore)
%   athleteledsportsteam(uniqueVar29, underscore)
%   athleteplayssport(underscore, a)
%   athleteplayssport(uniqueVar28, b)
%   athleteplayssport(uniqueVar25, b)
%   athleteplaysinleague(uniqueVar30, underscore)
%   athleteplaysforteam(uniqueVar32, a)
%   athleteledsportsteam(uniqueVar32, a)
%   athleteplayssport(uniqueVar31, a)
%   teamplaysinleague(a, underscore)
%   athleteplaysforteam(underscore, a)
%   teamalsoknownas(uniqueVar27, a)
%   teamalsoknownas(underscore, a)

% Saving model in: train/models/bRDNs/teamplayssport.model.ckpt
% Time taken to learn 3 trees is 1 minutes and 24,945 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.011147155895009142
Set score:0.0025
% Only 1161 out of 1161 converged.
% Kept 397 of the 397 positive examples.
% Kept 771 of the 159.991 negative examples.
% Dataset size: 1.168
Computing probabilities
prob time:882 milliseconds
No hidden examples for : teamplayssport
Time to build dataset: 923 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.06678517394336311
Set score:0.0025
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Have these 7 positive seeds: 99 458 501 678 854 957 978
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = teamplayssport(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  teamplayssport(_, _).  [covers 1.168,0/1.168,0 pos, 0,0/0,0 neg]
% Most-general root: teamplayssport(_, _).  [covers 1.168,0/1.168,0 pos, 0,0/0,0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #1, bodyLen=0] 'teamplayssport(_, _).  [covers 1.168,0/1.168,0 pos, 0,0/0,0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 4 variant children.  Sending 8 items to OPEN for evaluation and possible insertion.
% Have created 8 valid-on-seeds descendants and have picked up 2 bad extensions.
%     Score = -78,004745 (regressionFit = 78,004744, penalties=1.23E-6) for clause:  teamplayssport(A, _) :- athleteledsportsteam(_, A).  [covers 316,0/1.168,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -78,004745): teamplayssport(A, _) :- athleteledsportsteam(_, A).  [covers 316,0/1.168,0 pos, 0,0/0,0 neg]
%     Score = -78,003873 (regressionFit = 78,003871, penalties=1.23E-6) for clause:  teamplayssport(A, _) :- athleteplaysforteam(_, A).  [covers 530,0/1.168,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -78,003873): teamplayssport(A, _) :- athleteplaysforteam(_, A).  [covers 530,0/1.168,0 pos, 0,0/0,0 neg]
%     Score = -7,095813 (regressionFit = 7,095812, penalties=1.23E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(_, A).  [covers 399,0/1.168,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -7,095813): teamplayssport(_, A) :- athleteplayssport(_, A).  [covers 399,0/1.168,0 pos, 0,0/0,0 neg]
%     Score = -78,000334 (regressionFit = 78,000333, penalties=1.23E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(A, _).  [covers 269,0/1.168,0 pos, 0,0/0,0 neg]
%     Score = -78,003408 (regressionFit = 78,003407, penalties=1.23E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(_, A).  [covers 224,0/1.168,0 pos, 0,0/0,0 neg]
%     Score = -78,004030 (regressionFit = 78,004028, penalties=1.23E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, _).  [covers 662,0/1.168,0 pos, 0,0/0,0 neg]
%     Score = -77,995690 (regressionFit = 77,995688, penalties=1.23E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(_, A).  [covers 718,0/1.168,0 pos, 0,0/0,0 neg]
%     Score = -78,002007 (regressionFit = 78,002006, penalties=1.23E-6) for clause:  teamplayssport(A, _) :- teamplaysinleague(A, _).  [covers 894,0/1.168,0 pos, 0,0/0,0 neg]

% Consider expanding [#2 of outerLoop #1, bodyLen=1] 'teamplayssport(_, A) :- athleteplayssport(_, A).  [covers 399,0/1.168,0 pos, 0,0/0,0 neg]' score=-7.0958133072093235
%  At # nodes expanded = 2, |OPEN| = 7.  Pruned 8 variant children.  Sending 13 items to OPEN for evaluation and possible insertion.
% Have created 13 valid-on-seeds descendants and have picked up 2 bad extensions.
%     Score = -68,681121 (regressionFit = 68,681119, penalties=2.0300000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, A).  [covers 74,0/1.168,0 pos, 0,0/0,0 neg]
%     Score = -12,920340 (regressionFit = 12,920337, penalties=2.24E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteledsportsteam(B, _).  [covers 376,0/1.168,0 pos, 0,0/0,0 neg]
%     Score = -64,727648 (regressionFit = 64,727646, penalties=2.24E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), athleteledsportsteam(_, A).  [covers 109,0/1.168,0 pos, 0,0/0,0 neg]
%     Score = -66,008037 (regressionFit = 66,008035, penalties=2.0300000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysforteam(C, A).  [covers 93,0/1.168,0 pos, 0,0/0,0 neg]
%     Score = -11,998260 (regressionFit = 11,998258, penalties=2.24E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysforteam(B, _).  [covers 379,0/1.168,0 pos, 0,0/0,0 neg]
%     Score = -52,967783 (regressionFit = 52,967780, penalties=2.24E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), athleteplaysforteam(_, A).  [covers 180,0/1.168,0 pos, 0,0/0,0 neg]
%     Score = -8,753208 (regressionFit = 8,753206, penalties=2.24E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _).  [covers 395,0/1.168,0 pos, 0,0/0,0 neg]
%     Score = -7,095814 (regressionFit = 7,095812, penalties=2.24E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(_, A), athleteplayssport(_, A).  [covers 399,0/1.168,0 pos, 0,0/0,0 neg]
%     Score = -65,425717 (regressionFit = 65,425715, penalties=2.24E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(A, _).  [covers 91,0/1.168,0 pos, 0,0/0,0 neg]
%     Score = -68,201609 (regressionFit = 68,201607, penalties=2.24E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(_, A).  [covers 71,0/1.168,0 pos, 0,0/0,0 neg]
%     Score = -45,773934 (regressionFit = 45,773932, penalties=2.24E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(A, _).  [covers 225,0/1.168,0 pos, 0,0/0,0 neg]
%     Score = -42,502409 (regressionFit = 42,502407, penalties=2.24E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(_, A).  [covers 242,0/1.168,0 pos, 0,0/0,0 neg]
%     Score = -30,104830 (regressionFit = 30,104828, penalties=2.24E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _).  [covers 308,0/1.168,0 pos, 0,0/0,0 neg]

% Consider expanding [#3 of outerLoop #1, bodyLen=1] 'teamplayssport(A, _) :- teamplaysagainstteam(_, A).  [covers 718,0/1.168,0 pos, 0,0/0,0 neg]' score=-77.99568967647325
%  At # nodes expanded = 3, |OPEN| = 6.  Pruned 14 variant children.  Sending 18 items to OPEN for evaluation and possible insertion.
% Have created 18 valid-on-seeds descendants and have picked up 4 bad extensions.
%     Score = -78,004828 (regressionFit = 78,004825, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(_, A), athleteledsportsteam(_, A).  [covers 310,0/1.168,0 pos, 0,0/0,0 neg]
%     Score = -77,990218 (regressionFit = 77,990216, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(B, A), athleteledsportsteam(_, B).  [covers 595,0/1.168,0 pos, 0,0/0,0 neg]
%     Score = -78,004684 (regressionFit = 78,004681, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(_, A), athleteplaysforteam(_, A).  [covers 517,0/1.168,0 pos, 0,0/0,0 neg]
%     Score = -78,004903 (regressionFit = 78,004900, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(B, A), athleteplaysforteam(_, B).  [covers 683,0/1.168,0 pos, 0,0/0,0 neg]
%     Score = -42,502409 (regressionFit = 42,502407, penalties=2.24E-6) for clause:  teamplayssport(A, B) :- teamplaysagainstteam(_, A), athleteplayssport(_, B).  [covers 242,0/1.168,0 pos, 0,0/0,0 neg]
%     Score = -78,001450 (regressionFit = 78,001448, penalties=2.1300000000000004E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(B, A), teamalsoknownas(A, B).  [covers 48,0/1.168,0 pos, 0,0/0,0 neg]
%     Score = -78,004946 (regressionFit = 78,004943, penalties=2.1300000000000004E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(B, A), teamalsoknownas(B, A).  [covers 67,0/1.168,0 pos, 0,0/0,0 neg]
%     Score = -77,979945 (regressionFit = 77,979943, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(_, A), teamalsoknownas(A, _).  [covers 145,0/1.168,0 pos, 0,0/0,0 neg]
%     Score = -78,002040 (regressionFit = 78,002038, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(B, A), teamalsoknownas(B, _).  [covers 517,0/1.168,0 pos, 0,0/0,0 neg]
%     Score = -78,001561 (regressionFit = 78,001559, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(_, A), teamalsoknownas(_, A).  [covers 118,0/1.168,0 pos, 0,0/0,0 neg]
%     Score = -77,979719 (regressionFit = 77,979717, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(B, A), teamalsoknownas(_, B).  [covers 512,0/1.168,0 pos, 0,0/0,0 neg]
%     Score = -77,993255 (regressionFit = 77,993252, penalties=2.0300000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(B, A), teamplaysagainstteam(A, B).  [covers 628,0/1.168,0 pos, 0,0/0,0 neg]
%     Score = -78,000320 (regressionFit = 78,000317, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(_, A), teamplaysagainstteam(A, _).  [covers 651,0/1.168,0 pos, 0,0/0,0 neg]
%     Score = -77,995691 (regressionFit = 77,995688, penalties=2.1400000000000003E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(B, A), teamplaysagainstteam(B, _).  [covers 718,0/1.168,0 pos, 0,0/0,0 neg]
%     Score = -77,995691 (regressionFit = 77,995688, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(_, A), teamplaysagainstteam(_, A).  [covers 718,0/1.168,0 pos, 0,0/0,0 neg]
%     Score = -77,995691 (regressionFit = 77,995688, penalties=2.1400000000000003E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(B, A), teamplaysagainstteam(_, B).  [covers 718,0/1.168,0 pos, 0,0/0,0 neg]
%     Score = -77,992135 (regressionFit = 77,992133, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(_, A), teamplaysinleague(A, _).  [covers 631,0/1.168,0 pos, 0,0/0,0 neg]
%     Score = -77,984741 (regressionFit = 77,984738, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(B, A), teamplaysinleague(B, _).  [covers 707,0/1.168,0 pos, 0,0/0,0 neg]

% Consider expanding [#4 of outerLoop #1, bodyLen=1] 'teamplayssport(A, _) :- teamalsoknownas(A, _).  [covers 269,0/1.168,0 pos, 0,0/0,0 neg]' score=-78.00033399186283
%  At # nodes expanded = 4, |OPEN| = 5.  Pruned 14 variant children.  Sending 18 items to OPEN for evaluation and possible insertion.
% Have created 18 valid-on-seeds descendants and have picked up 4 bad extensions.
%     Score = -77,979576 (regressionFit = 77,979574, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(A, _), athleteledsportsteam(_, A).  [covers 47,0/1.168,0 pos, 0,0/0,0 neg]
%     Score = -78,002423 (regressionFit = 78,002421, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(A, B), athleteledsportsteam(_, B).  [covers 49,0/1.168,0 pos, 0,0/0,0 neg]
%     Score = -77,984636 (regressionFit = 77,984633, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(A, _), athleteplaysforteam(_, A).  [covers 95,0/1.168,0 pos, 0,0/0,0 neg]
%     Score = -78,004819 (regressionFit = 78,004816, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(A, B), athleteplaysforteam(_, B).  [covers 58,0/1.168,0 pos, 0,0/0,0 neg]
%     Score = -65,425717 (regressionFit = 65,425715, penalties=2.24E-6) for clause:  teamplayssport(A, B) :- teamalsoknownas(A, _), athleteplayssport(_, B).  [covers 91,0/1.168,0 pos, 0,0/0,0 neg]
%     Score = -78,004147 (regressionFit = 78,004144, penalties=2.0300000000000005E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(A, B), teamalsoknownas(B, A).  [covers 134,0/1.168,0 pos, 0,0/0,0 neg]
%     Score = -78,000335 (regressionFit = 78,000333, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(A, _), teamalsoknownas(A, _).  [covers 269,0/1.168,0 pos, 0,0/0,0 neg]
%     Score = -78,002896 (regressionFit = 78,002894, penalties=2.1400000000000003E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(A, B), teamalsoknownas(B, _).  [covers 233,0/1.168,0 pos, 0,0/0,0 neg]
%     Score = -78,002413 (regressionFit = 78,002410, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(A, _), teamalsoknownas(_, A).  [covers 144,0/1.168,0 pos, 0,0/0,0 neg]
%     Score = -78,000335 (regressionFit = 78,000333, penalties=2.1400000000000003E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(A, B), teamalsoknownas(_, B).  [covers 269,0/1.168,0 pos, 0,0/0,0 neg]
%     Score = -78,001450 (regressionFit = 78,001448, penalties=2.1300000000000004E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(A, B), teamplaysagainstteam(A, B).  [covers 48,0/1.168,0 pos, 0,0/0,0 neg]
%     Score = -78,001450 (regressionFit = 78,001448, penalties=2.1300000000000004E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(A, B), teamplaysagainstteam(B, A).  [covers 48,0/1.168,0 pos, 0,0/0,0 neg]
%     Score = -77,882498 (regressionFit = 77,882496, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(A, _), teamplaysagainstteam(A, _).  [covers 107,0/1.168,0 pos, 0,0/0,0 neg]
%     Score = -78,000699 (regressionFit = 78,000697, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(A, B), teamplaysagainstteam(B, _).  [covers 62,0/1.168,0 pos, 0,0/0,0 neg]
%     Score = -77,979945 (regressionFit = 77,979943, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(A, _), teamplaysagainstteam(_, A).  [covers 145,0/1.168,0 pos, 0,0/0,0 neg]
%     Score = -78,004834 (regressionFit = 78,004832, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(A, B), teamplaysagainstteam(_, B).  [covers 67,0/1.168,0 pos, 0,0/0,0 neg]
%     Score = -77,955173 (regressionFit = 77,955170, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(A, _), teamplaysinleague(A, _).  [covers 198,0/1.168,0 pos, 0,0/0,0 neg]
%     Score = -77,996659 (regressionFit = 77,996657, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(A, B), teamplaysinleague(B, _).  [covers 247,0/1.168,0 pos, 0,0/0,0 neg]

% Consider expanding [#5 of outerLoop #1, bodyLen=1] 'teamplayssport(A, _) :- teamplaysinleague(A, _).  [covers 894,0/1.168,0 pos, 0,0/0,0 neg]' score=-78.00200737903705
%  At # nodes expanded = 5, |OPEN| = 4.  Pruned 4 variant children.  Sending 9 items to OPEN for evaluation and possible insertion.
% Have created 9 valid-on-seeds descendants and have picked up 2 bad extensions.
%     Score = -78,004833 (regressionFit = 78,004830, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysinleague(A, _), athleteledsportsteam(_, A).  [covers 310,0/1.168,0 pos, 0,0/0,0 neg]
%     Score = -78,002682 (regressionFit = 78,002679, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysinleague(A, _), athleteplaysforteam(_, A).  [covers 504,0/1.168,0 pos, 0,0/0,0 neg]
%     Score = -77,893539 (regressionFit = 77,893537, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysinleague(A, B), athleteplaysinleague(_, B).  [covers 692,0/1.168,0 pos, 0,0/0,0 neg]
%     Score = -30,104830 (regressionFit = 30,104828, penalties=2.24E-6) for clause:  teamplayssport(A, B) :- teamplaysinleague(A, _), athleteplayssport(_, B).  [covers 308,0/1.168,0 pos, 0,0/0,0 neg]
%     Score = -77,955173 (regressionFit = 77,955170, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysinleague(A, _), teamalsoknownas(A, _).  [covers 198,0/1.168,0 pos, 0,0/0,0 neg]
%     Score = -77,994578 (regressionFit = 77,994576, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysinleague(A, _), teamalsoknownas(_, A).  [covers 165,0/1.168,0 pos, 0,0/0,0 neg]
%     Score = -77,995371 (regressionFit = 77,995369, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysinleague(A, _), teamplaysagainstteam(A, _).  [covers 600,0/1.168,0 pos, 0,0/0,0 neg]
%     Score = -77,992135 (regressionFit = 77,992133, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysinleague(A, _), teamplaysagainstteam(_, A).  [covers 631,0/1.168,0 pos, 0,0/0,0 neg]
%     Score = -78,002008 (regressionFit = 78,002006, penalties=2.1400000000000003E-6) for clause:  teamplayssport(A, _) :- teamplaysinleague(A, B), teamplaysinleague(_, B).  [covers 894,0/1.168,0 pos, 0,0/0,0 neg]

% Consider expanding [#6 of outerLoop #1, bodyLen=1] 'teamplayssport(A, _) :- teamalsoknownas(_, A).  [covers 224,0/1.168,0 pos, 0,0/0,0 neg]' score=-78.00340841008179
%  At # nodes expanded = 6, |OPEN| = 3.  Pruned 14 variant children.  Sending 18 items to OPEN for evaluation and possible insertion.
% Have created 18 valid-on-seeds descendants and have picked up 4 bad extensions.
%     Score = -77,987954 (regressionFit = 77,987952, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(_, A), athleteledsportsteam(_, A).  [covers 55,0/1.168,0 pos, 0,0/0,0 neg]
%     Score = -77,992800 (regressionFit = 77,992798, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteledsportsteam(_, B).  [covers 69,0/1.168,0 pos, 0,0/0,0 neg]
%     Score = -77,995546 (regressionFit = 77,995544, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(_, A), athleteplaysforteam(_, A).  [covers 93,0/1.168,0 pos, 0,0/0,0 neg]
%     Score = -77,993720 (regressionFit = 77,993717, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B).  [covers 90,0/1.168,0 pos, 0,0/0,0 neg]
%     Score = -68,201609 (regressionFit = 68,201607, penalties=2.24E-6) for clause:  teamplayssport(A, B) :- teamalsoknownas(_, A), athleteplayssport(_, B).  [covers 71,0/1.168,0 pos, 0,0/0,0 neg]
%     Score = -78,004147 (regressionFit = 78,004144, penalties=2.0300000000000005E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(A, B).  [covers 134,0/1.168,0 pos, 0,0/0,0 neg]
%     Score = -78,002413 (regressionFit = 78,002410, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(_, A), teamalsoknownas(A, _).  [covers 144,0/1.168,0 pos, 0,0/0,0 neg]
%     Score = -78,003409 (regressionFit = 78,003407, penalties=2.1400000000000003E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(B, _).  [covers 224,0/1.168,0 pos, 0,0/0,0 neg]
%     Score = -78,003409 (regressionFit = 78,003407, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(_, A), teamalsoknownas(_, A).  [covers 224,0/1.168,0 pos, 0,0/0,0 neg]
%     Score = -78,004207 (regressionFit = 78,004205, penalties=2.1400000000000003E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(_, B).  [covers 184,0/1.168,0 pos, 0,0/0,0 neg]
%     Score = -78,003970 (regressionFit = 78,003968, penalties=2.1300000000000004E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamplaysagainstteam(A, B).  [covers 66,0/1.168,0 pos, 0,0/0,0 neg]
%     Score = -78,004946 (regressionFit = 78,004943, penalties=2.1300000000000004E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamplaysagainstteam(B, A).  [covers 67,0/1.168,0 pos, 0,0/0,0 neg]
%     Score = -77,983208 (regressionFit = 77,983206, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(_, A), teamplaysagainstteam(A, _).  [covers 102,0/1.168,0 pos, 0,0/0,0 neg]
%     Score = -78,003607 (regressionFit = 78,003605, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamplaysagainstteam(B, _).  [covers 93,0/1.168,0 pos, 0,0/0,0 neg]
%     Score = -78,001561 (regressionFit = 78,001559, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(_, A), teamplaysagainstteam(_, A).  [covers 118,0/1.168,0 pos, 0,0/0,0 neg]
%     Score = -78,003607 (regressionFit = 78,003605, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamplaysagainstteam(_, B).  [covers 93,0/1.168,0 pos, 0,0/0,0 neg]
%     Score = -77,994578 (regressionFit = 77,994576, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(_, A), teamplaysinleague(A, _).  [covers 165,0/1.168,0 pos, 0,0/0,0 neg]
%     Score = -78,004918 (regressionFit = 78,004916, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamplaysinleague(B, _).  [covers 213,0/1.168,0 pos, 0,0/0,0 neg]

% Consider expanding [#7 of outerLoop #1, bodyLen=1] 'teamplayssport(A, _) :- athleteplaysforteam(_, A).  [covers 530,0/1.168,0 pos, 0,0/0,0 neg]' score=-78.0038726682768
%  At # nodes expanded = 7, |OPEN| = 2.  Pruned 8 variant children.  Sending 13 items to OPEN for evaluation and possible insertion.
% Have created 13 valid-on-seeds descendants and have picked up 2 bad extensions.
%     Score = -77,994553 (regressionFit = 77,994551, penalties=2.1300000000000004E-6) for clause:  teamplayssport(A, _) :- athleteplaysforteam(B, A), athleteledsportsteam(B, A).  [covers 259,0/1.168,0 pos, 0,0/0,0 neg]
%     Score = -77,997621 (regressionFit = 77,997619, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- athleteplaysforteam(B, A), athleteledsportsteam(B, _).  [covers 308,0/1.168,0 pos, 0,0/0,0 neg]
%     Score = -78,004862 (regressionFit = 78,004859, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- athleteplaysforteam(_, A), athleteledsportsteam(_, A).  [covers 284,0/1.168,0 pos, 0,0/0,0 neg]
%     Score = -78,003874 (regressionFit = 78,003871, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- athleteplaysforteam(_, A), athleteplaysforteam(_, A).  [covers 530,0/1.168,0 pos, 0,0/0,0 neg]
%     Score = -77,998029 (regressionFit = 77,998026, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- athleteplaysforteam(B, A), athleteplaysinleague(B, _).  [covers 365,0/1.168,0 pos, 0,0/0,0 neg]
%     Score = -66,008037 (regressionFit = 66,008035, penalties=2.0300000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplaysforteam(C, A), athleteplayssport(C, B).  [covers 93,0/1.168,0 pos, 0,0/0,0 neg]
%     Score = -77,996854 (regressionFit = 77,996852, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- athleteplaysforteam(B, A), athleteplayssport(B, _).  [covers 352,0/1.168,0 pos, 0,0/0,0 neg]
%     Score = -52,967783 (regressionFit = 52,967780, penalties=2.24E-6) for clause:  teamplayssport(A, B) :- athleteplaysforteam(_, A), athleteplayssport(_, B).  [covers 180,0/1.168,0 pos, 0,0/0,0 neg]
%     Score = -77,984636 (regressionFit = 77,984633, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- athleteplaysforteam(_, A), teamalsoknownas(A, _).  [covers 95,0/1.168,0 pos, 0,0/0,0 neg]
%     Score = -77,995546 (regressionFit = 77,995544, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- athleteplaysforteam(_, A), teamalsoknownas(_, A).  [covers 93,0/1.168,0 pos, 0,0/0,0 neg]
%     Score = -77,998862 (regressionFit = 77,998860, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- athleteplaysforteam(_, A), teamplaysagainstteam(A, _).  [covers 505,0/1.168,0 pos, 0,0/0,0 neg]
%     Score = -78,004684 (regressionFit = 78,004681, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- athleteplaysforteam(_, A), teamplaysagainstteam(_, A).  [covers 517,0/1.168,0 pos, 0,0/0,0 neg]
%     Score = -78,002682 (regressionFit = 78,002679, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- athleteplaysforteam(_, A), teamplaysinleague(A, _).  [covers 504,0/1.168,0 pos, 0,0/0,0 neg]

% Consider expanding [#8 of outerLoop #1, bodyLen=1] 'teamplayssport(A, _) :- teamplaysagainstteam(A, _).  [covers 662,0/1.168,0 pos, 0,0/0,0 neg]' score=-78.00402955772721
%  At # nodes expanded = 8, |OPEN| = 1.  Pruned 14 variant children.  Sending 18 items to OPEN for evaluation and possible insertion.
% Have created 18 valid-on-seeds descendants and have picked up 4 bad extensions.
%     Score = -78,004840 (regressionFit = 78,004838, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, _), athleteledsportsteam(_, A).  [covers 307,0/1.168,0 pos, 0,0/0,0 neg]
%     Score = -77,987073 (regressionFit = 77,987070, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, B), athleteledsportsteam(_, B).  [covers 552,0/1.168,0 pos, 0,0/0,0 neg]
%     Score = -77,998862 (regressionFit = 77,998860, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, _), athleteplaysforteam(_, A).  [covers 505,0/1.168,0 pos, 0,0/0,0 neg]
%     Score = -78,005085 (regressionFit = 78,005083, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, B), athleteplaysforteam(_, B).  [covers 635,0/1.168,0 pos, 0,0/0,0 neg]
%     Score = -45,773934 (regressionFit = 45,773932, penalties=2.24E-6) for clause:  teamplayssport(A, B) :- teamplaysagainstteam(A, _), athleteplayssport(_, B).  [covers 225,0/1.168,0 pos, 0,0/0,0 neg]
%     Score = -78,001450 (regressionFit = 78,001448, penalties=2.1300000000000004E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, B), teamalsoknownas(A, B).  [covers 48,0/1.168,0 pos, 0,0/0,0 neg]
%     Score = -78,003970 (regressionFit = 78,003968, penalties=2.1300000000000004E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, B), teamalsoknownas(B, A).  [covers 66,0/1.168,0 pos, 0,0/0,0 neg]
%     Score = -77,882498 (regressionFit = 77,882496, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, _), teamalsoknownas(A, _).  [covers 107,0/1.168,0 pos, 0,0/0,0 neg]
%     Score = -78,004367 (regressionFit = 78,004365, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, B), teamalsoknownas(B, _).  [covers 488,0/1.168,0 pos, 0,0/0,0 neg]
%     Score = -77,983208 (regressionFit = 77,983206, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, _), teamalsoknownas(_, A).  [covers 102,0/1.168,0 pos, 0,0/0,0 neg]
%     Score = -78,001990 (regressionFit = 78,001987, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, B), teamalsoknownas(_, B).  [covers 494,0/1.168,0 pos, 0,0/0,0 neg]
%     Score = -77,993255 (regressionFit = 77,993252, penalties=2.0300000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, B), teamplaysagainstteam(B, A).  [covers 628,0/1.168,0 pos, 0,0/0,0 neg]
%     Score = -78,004031 (regressionFit = 78,004028, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, _), teamplaysagainstteam(A, _).  [covers 662,0/1.168,0 pos, 0,0/0,0 neg]
%     Score = -78,002476 (regressionFit = 78,002474, penalties=2.1400000000000003E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, B), teamplaysagainstteam(B, _).  [covers 658,0/1.168,0 pos, 0,0/0,0 neg]
%     Score = -78,000320 (regressionFit = 78,000317, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, _), teamplaysagainstteam(_, A).  [covers 651,0/1.168,0 pos, 0,0/0,0 neg]
%     Score = -78,004030 (regressionFit = 78,004028, penalties=2.1400000000000003E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, B), teamplaysagainstteam(_, B).  [covers 662,0/1.168,0 pos, 0,0/0,0 neg]
%     Score = -77,995371 (regressionFit = 77,995369, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, _), teamplaysinleague(A, _).  [covers 600,0/1.168,0 pos, 0,0/0,0 neg]
%     Score = -78,000512 (regressionFit = 78,000510, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, B), teamplaysinleague(B, _).  [covers 650,0/1.168,0 pos, 0,0/0,0 neg]

% Consider expanding [#9 of outerLoop #1, bodyLen=1] 'teamplayssport(A, _) :- athleteledsportsteam(_, A).  [covers 316,0/1.168,0 pos, 0,0/0,0 neg]' score=-78.00474514202182
%  At # nodes expanded = 9, |OPEN| = 0.  Pruned 8 variant children.  Sending 13 items to OPEN for evaluation and possible insertion.
% Have created 13 valid-on-seeds descendants and have picked up 2 bad extensions.
%     Score = -78,004746 (regressionFit = 78,004744, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- athleteledsportsteam(_, A), athleteledsportsteam(_, A).  [covers 316,0/1.168,0 pos, 0,0/0,0 neg]
%     Score = -77,994553 (regressionFit = 77,994551, penalties=2.1300000000000004E-6) for clause:  teamplayssport(A, _) :- athleteledsportsteam(B, A), athleteplaysforteam(B, A).  [covers 259,0/1.168,0 pos, 0,0/0,0 neg]
%     Score = -78,001312 (regressionFit = 78,001309, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- athleteledsportsteam(B, A), athleteplaysforteam(B, _).  [covers 308,0/1.168,0 pos, 0,0/0,0 neg]
%     Score = -78,004862 (regressionFit = 78,004859, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- athleteledsportsteam(_, A), athleteplaysforteam(_, A).  [covers 284,0/1.168,0 pos, 0,0/0,0 neg]
%     Score = -78,002766 (regressionFit = 78,002764, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- athleteledsportsteam(B, A), athleteplaysinleague(B, _).  [covers 273,0/1.168,0 pos, 0,0/0,0 neg]
%     Score = -68,681121 (regressionFit = 68,681119, penalties=2.0300000000000005E-6) for clause:  teamplayssport(A, B) :- athleteledsportsteam(C, A), athleteplayssport(C, B).  [covers 74,0/1.168,0 pos, 0,0/0,0 neg]
%     Score = -78,003262 (regressionFit = 78,003260, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- athleteledsportsteam(B, A), athleteplayssport(B, _).  [covers 262,0/1.168,0 pos, 0,0/0,0 neg]
%     Score = -64,727648 (regressionFit = 64,727646, penalties=2.24E-6) for clause:  teamplayssport(A, B) :- athleteledsportsteam(_, A), athleteplayssport(_, B).  [covers 109,0/1.168,0 pos, 0,0/0,0 neg]
%     Score = -77,979576 (regressionFit = 77,979574, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- athleteledsportsteam(_, A), teamalsoknownas(A, _).  [covers 47,0/1.168,0 pos, 0,0/0,0 neg]
%     Score = -77,987954 (regressionFit = 77,987952, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- athleteledsportsteam(_, A), teamalsoknownas(_, A).  [covers 55,0/1.168,0 pos, 0,0/0,0 neg]
%     Score = -78,004840 (regressionFit = 78,004838, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- athleteledsportsteam(_, A), teamplaysagainstteam(A, _).  [covers 307,0/1.168,0 pos, 0,0/0,0 neg]
%     Score = -78,004828 (regressionFit = 78,004825, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- athleteledsportsteam(_, A), teamplaysagainstteam(_, A).  [covers 310,0/1.168,0 pos, 0,0/0,0 neg]
%     Score = -78,004833 (regressionFit = 78,004830, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- athleteledsportsteam(_, A), teamplaysinleague(A, _).  [covers 310,0/1.168,0 pos, 0,0/0,0 neg]

% The best node found: teamplayssport(_, A) :- athleteplayssport(_, A).  [covers 399,0/1.168,0 pos, 0,0/0,0 neg]

% The best node found: teamplayssport(_, A) :- athleteplayssport(_, A).  [covers 399,0/1.168,0 pos, 0,0/0,0 neg]

% Expanding node at Level 0 with score = 1,797693e+308.
% Will extend: teamplayssport(_, A) :- athleteplayssport(_, A).  [covers 399,0/1.168,0 pos, 0,0/0,0 neg]
% Path: 3;
Comparing variance: 0.010510641041403295 to score=0.0025 #egs=399.0
Comparing variance: 0.003773818337697541 to score=0.0025 #egs=769.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 399,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,010511)
%         ILP node to extend: teamplayssport(_, A) :- athleteplayssport(_, A).  [covers 399,0/1.168,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 1 and with score = -0,010511) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 769,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,003774)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 1 and with score = -0,003774) into the LAST position (#2) in the search queue.

% Time for loop #1: 1,379 seconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      teamplayssport(_, A) :- athleteplayssport(_, A).  [covers 399,0/1.168,0 pos, 0,0/0,0 neg]
% This clause covers 399 positive examples, of which 399 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'teamplayssport(_, A) :- athleteplayssport(_, A).  [covers 399,0/399,0 pos, 0,0/0,0 neg]'
%     Score = -7,095813 (regressionFit = 7,095812, penalties=1.23E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(_, A).  [covers 399,0/399,0 pos, 0,0/0,0 neg]

% Have these 5 positive seeds: 90 92 249 256 287
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Consider expanding [#1 of outerLoop #2, bodyLen=1] 'teamplayssport(_, A) :- athleteplayssport(_, A).  [covers 399,0/399,0 pos, 0,0/0,0 neg]' score=-7.0958133072093235
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 8 variant children.  Sending 12 items to OPEN for evaluation and possible insertion.
% Have created 12 valid-on-seeds descendants and have picked up 4 bad extensions.
%     Score = -4,193551 (regressionFit = 4,193549, penalties=2.0300000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, A).  [covers 74,0/399,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -4,193551): teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, A).  [covers 74,0/399,0 pos, 0,0/0,0 neg]
%     Score = -4,191874 (regressionFit = 4,191872, penalties=2.24E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteledsportsteam(B, _).  [covers 376,0/399,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -4,191874): teamplayssport(_, A) :- athleteplayssport(B, A), athleteledsportsteam(B, _).  [covers 376,0/399,0 pos, 0,0/0,0 neg]
%     Score = -4,179542 (regressionFit = 4,179539, penalties=2.24E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), athleteledsportsteam(_, A).  [covers 109,0/399,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -4,179542): teamplayssport(A, B) :- athleteplayssport(_, B), athleteledsportsteam(_, A).  [covers 109,0/399,0 pos, 0,0/0,0 neg]
%     Score = -4,192985 (regressionFit = 4,192983, penalties=2.0300000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysforteam(C, A).  [covers 93,0/399,0 pos, 0,0/0,0 neg]
%     Score = -4,187142 (regressionFit = 4,187140, penalties=2.24E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysforteam(B, _).  [covers 379,0/399,0 pos, 0,0/0,0 neg]
%     Score = -4,193450 (regressionFit = 4,193448, penalties=2.24E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), athleteplaysforteam(_, A).  [covers 180,0/399,0 pos, 0,0/0,0 neg]
%     Score = -4,113010 (regressionFit = 4,113008, penalties=2.24E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _).  [covers 395,0/399,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(_, A), athleteplayssport(_, A).  [covers 399,0/399,0 pos, 0,0/0,0 neg]
%     Score = -4,167370 (regressionFit = 4,167368, penalties=2.24E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(A, _).  [covers 91,0/399,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -4,167370): teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(A, _).  [covers 91,0/399,0 pos, 0,0/0,0 neg]
%     Score = -4,191718 (regressionFit = 4,191716, penalties=2.24E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(A, _).  [covers 225,0/399,0 pos, 0,0/0,0 neg]
%     Score = -4,193105 (regressionFit = 4,193103, penalties=2.24E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(_, A).  [covers 242,0/399,0 pos, 0,0/0,0 neg]
%     Score = -4,175553 (regressionFit = 4,175551, penalties=2.24E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _).  [covers 308,0/399,0 pos, 0,0/0,0 neg]

% Consider expanding [#2 of outerLoop #2, bodyLen=2] 'teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _).  [covers 395,0/399,0 pos, 0,0/0,0 neg]' score=-4.113010136721421
%  At # nodes expanded = 2, |OPEN| = 11.  Pruned 10 variant children.  Sending 14 items to OPEN for evaluation and possible insertion.
% Have created 14 valid-on-seeds descendants and have picked up 2 bad extensions.
%     Score = -4,193545 (regressionFit = 4,193542, penalties=3.1400000000000004E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, A).  [covers 72,0/399,0 pos, 0,0/0,0 neg]
%     Score = -4,191875 (regressionFit = 4,191872, penalties=3.35E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteledsportsteam(B, _).  [covers 376,0/399,0 pos, 0,0/0,0 neg]
%     Score = -4,179543 (regressionFit = 4,179539, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(_, A).  [covers 109,0/399,0 pos, 0,0/0,0 neg]
%     Score = -4,192986 (regressionFit = 4,192983, penalties=3.1400000000000004E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteplaysforteam(C, A).  [covers 90,0/399,0 pos, 0,0/0,0 neg]
%     Score = -4,191875 (regressionFit = 4,191872, penalties=3.35E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteplaysforteam(B, _).  [covers 376,0/399,0 pos, 0,0/0,0 neg]
%     Score = -4,193451 (regressionFit = 4,193448, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteplaysforteam(_, A).  [covers 180,0/399,0 pos, 0,0/0,0 neg]
%     Score = -4,113011 (regressionFit = 4,113008, penalties=3.1500000000000008E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, C), athleteplaysinleague(_, C).  [covers 395,0/399,0 pos, 0,0/0,0 neg]
%     Score = -4,113011 (regressionFit = 4,113008, penalties=3.2500000000000006E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteplayssport(_, A).  [covers 395,0/399,0 pos, 0,0/0,0 neg]
%     Score = -4,178409 (regressionFit = 4,178406, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(A, _).  [covers 90,0/399,0 pos, 0,0/0,0 neg]
%     Score = -4,191719 (regressionFit = 4,191716, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(A, _).  [covers 225,0/399,0 pos, 0,0/0,0 neg]
%     Score = -4,193106 (regressionFit = 4,193103, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(_, A).  [covers 242,0/399,0 pos, 0,0/0,0 neg]
%     Score = -4,147160 (regressionFit = 4,147157, penalties=3.0400000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), teamplaysinleague(A, D).  [covers 181,0/399,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -4,147160): teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), teamplaysinleague(A, D).  [covers 181,0/399,0 pos, 0,0/0,0 neg]
%     Score = -4,163729 (regressionFit = 4,163726, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysinleague(A, _).  [covers 307,0/399,0 pos, 0,0/0,0 neg]
%     Score = -4,113011 (regressionFit = 4,113008, penalties=3.2500000000000006E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, C), teamplaysinleague(_, C).  [covers 395,0/399,0 pos, 0,0/0,0 neg]

% Consider expanding [#3 of outerLoop #2, bodyLen=2] 'teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(A, _).  [covers 91,0/399,0 pos, 0,0/0,0 neg]' score=-4.167369879608613
%  At # nodes expanded = 3, |OPEN| = 10.  Pruned 22 variant children.  Sending 23 items to OPEN for evaluation and possible insertion.
% Have created 23 valid-on-seeds descendants and have picked up 5 bad extensions.
%     Score = -4,193731 (regressionFit = 4,193728, penalties=3.1400000000000004E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamalsoknownas(A, _), athleteledsportsteam(C, A).  [covers 14,0/399,0 pos, 0,0/0,0 neg]
%     Score = -4,193746 (regressionFit = 4,193743, penalties=3.0400000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamalsoknownas(A, D), athleteledsportsteam(C, D).  [covers 11,0/399,0 pos, 0,0/0,0 neg]
%     Score = -4,185727 (regressionFit = 4,185723, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamalsoknownas(A, _), athleteledsportsteam(C, _).  [covers 82,0/399,0 pos, 0,0/0,0 neg]
%     Score = -4,191939 (regressionFit = 4,191936, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(A, _), athleteledsportsteam(_, A).  [covers 18,0/399,0 pos, 0,0/0,0 neg]
%     Score = -4,190327 (regressionFit = 4,190323, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(A, C), athleteledsportsteam(_, C).  [covers 16,0/399,0 pos, 0,0/0,0 neg]
%     Score = -4,193726 (regressionFit = 4,193723, penalties=3.1400000000000004E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamalsoknownas(A, _), athleteplaysforteam(C, A).  [covers 17,0/399,0 pos, 0,0/0,0 neg]
%     Score = -4,193731 (regressionFit = 4,193728, penalties=3.0400000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamalsoknownas(A, D), athleteplaysforteam(C, D).  [covers 14,0/399,0 pos, 0,0/0,0 neg]
%     Score = -4,176972 (regressionFit = 4,176969, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamalsoknownas(A, _), athleteplaysforteam(C, _).  [covers 83,0/399,0 pos, 0,0/0,0 neg]
%     Score = -4,174382 (regressionFit = 4,174378, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(A, _), athleteplaysforteam(_, A).  [covers 34,0/399,0 pos, 0,0/0,0 neg]
%     Score = -4,190720 (regressionFit = 4,190716, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(A, C), athleteplaysforteam(_, C).  [covers 20,0/399,0 pos, 0,0/0,0 neg]
%     Score = -4,178409 (regressionFit = 4,178406, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamalsoknownas(A, _), athleteplaysinleague(C, _).  [covers 90,0/399,0 pos, 0,0/0,0 neg]
%     Score = -4,167371 (regressionFit = 4,167368, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(A, _), athleteplayssport(_, B).  [covers 91,0/399,0 pos, 0,0/0,0 neg]
%     Score = -4,167371 (regressionFit = 4,167368, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(A, _), teamalsoknownas(A, _).  [covers 91,0/399,0 pos, 0,0/0,0 neg]
%     Score = -4,166761 (regressionFit = 4,166758, penalties=3.1500000000000008E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(A, C), teamalsoknownas(C, _).  [covers 78,0/399,0 pos, 0,0/0,0 neg]
%     Score = -4,167371 (regressionFit = 4,167368, penalties=3.1500000000000008E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(A, C), teamalsoknownas(_, C).  [covers 91,0/399,0 pos, 0,0/0,0 neg]
%     Score = -4,190743 (regressionFit = 4,190739, penalties=3.1400000000000004E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(A, C), teamplaysagainstteam(A, C).  [covers 17,0/399,0 pos, 0,0/0,0 neg]
%     Score = -4,190743 (regressionFit = 4,190739, penalties=3.1400000000000004E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(A, C), teamplaysagainstteam(C, A).  [covers 17,0/399,0 pos, 0,0/0,0 neg]
%     Score = -4,168092 (regressionFit = 4,168089, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(A, _), teamplaysagainstteam(A, _).  [covers 40,0/399,0 pos, 0,0/0,0 neg]
%     Score = -4,189190 (regressionFit = 4,189186, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(A, C), teamplaysagainstteam(C, _).  [covers 22,0/399,0 pos, 0,0/0,0 neg]
%     Score = -4,172596 (regressionFit = 4,172592, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(A, _), teamplaysagainstteam(_, A).  [covers 50,0/399,0 pos, 0,0/0,0 neg]
%     Score = -4,189463 (regressionFit = 4,189460, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(A, C), teamplaysagainstteam(_, C).  [covers 23,0/399,0 pos, 0,0/0,0 neg]
%     Score = -4,169694 (regressionFit = 4,169690, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(A, _), teamplaysinleague(A, _).  [covers 72,0/399,0 pos, 0,0/0,0 neg]
%     Score = -4,167394 (regressionFit = 4,167390, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(A, C), teamplaysinleague(C, _).  [covers 84,0/399,0 pos, 0,0/0,0 neg]

% Consider expanding [#4 of outerLoop #2, bodyLen=2] 'teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _).  [covers 308,0/399,0 pos, 0,0/0,0 neg]' score=-4.175553147238584
%  At # nodes expanded = 4, |OPEN| = 9.  Pruned 10 variant children.  Sending 14 items to OPEN for evaluation and possible insertion.
% Have created 14 valid-on-seeds descendants and have picked up 2 bad extensions.
%     Score = -4,193552 (regressionFit = 4,193549, penalties=3.1400000000000004E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, _), athleteledsportsteam(C, A).  [covers 74,0/399,0 pos, 0,0/0,0 neg]
%     Score = -4,192059 (regressionFit = 4,192056, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, _), athleteledsportsteam(C, _).  [covers 296,0/399,0 pos, 0,0/0,0 neg]
%     Score = -4,178000 (regressionFit = 4,177997, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), athleteledsportsteam(_, A).  [covers 108,0/399,0 pos, 0,0/0,0 neg]
%     Score = -4,193003 (regressionFit = 4,193000, penalties=3.1400000000000004E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, _), athleteplaysforteam(C, A).  [covers 92,0/399,0 pos, 0,0/0,0 neg]
%     Score = -4,193735 (regressionFit = 4,193732, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, _), athleteplaysforteam(C, _).  [covers 297,0/399,0 pos, 0,0/0,0 neg]
%     Score = -4,193690 (regressionFit = 4,193686, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), athleteplaysforteam(_, A).  [covers 171,0/399,0 pos, 0,0/0,0 neg]
%     Score = -4,147160 (regressionFit = 4,147157, penalties=3.0400000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(C, D).  [covers 181,0/399,0 pos, 0,0/0,0 neg]
%     Score = -4,163729 (regressionFit = 4,163726, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, _), athleteplaysinleague(C, _).  [covers 307,0/399,0 pos, 0,0/0,0 neg]
%     Score = -4,138392 (regressionFit = 4,138389, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(_, C).  [covers 231,0/399,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -4,138392): teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(_, C).  [covers 231,0/399,0 pos, 0,0/0,0 neg]
%     Score = -4,175554 (regressionFit = 4,175551, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), athleteplayssport(_, B).  [covers 308,0/399,0 pos, 0,0/0,0 neg]
%     Score = -4,169694 (regressionFit = 4,169690, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), teamalsoknownas(A, _).  [covers 72,0/399,0 pos, 0,0/0,0 neg]
%     Score = -4,186322 (regressionFit = 4,186319, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), teamplaysagainstteam(A, _).  [covers 204,0/399,0 pos, 0,0/0,0 neg]
%     Score = -4,188136 (regressionFit = 4,188133, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), teamplaysagainstteam(_, A).  [covers 214,0/399,0 pos, 0,0/0,0 neg]
%     Score = -4,175554 (regressionFit = 4,175551, penalties=3.1500000000000008E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), teamplaysinleague(_, C).  [covers 308,0/399,0 pos, 0,0/0,0 neg]

% Consider expanding [#5 of outerLoop #2, bodyLen=2] 'teamplayssport(A, B) :- athleteplayssport(_, B), athleteledsportsteam(_, A).  [covers 109,0/399,0 pos, 0,0/0,0 neg]' score=-4.17954160763773
%  At # nodes expanded = 5, |OPEN| = 8.  Pruned 12 variant children.  Sending 16 items to OPEN for evaluation and possible insertion.
% Have created 16 valid-on-seeds descendants and have picked up 2 bad extensions.
%     Score = -4,193552 (regressionFit = 4,193549, penalties=3.04E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(_, A), athleteledsportsteam(C, A).  [covers 74,0/399,0 pos, 0,0/0,0 neg]
%     Score = -4,192393 (regressionFit = 4,192390, penalties=3.1500000000000008E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(_, A), athleteledsportsteam(C, _).  [covers 104,0/399,0 pos, 0,0/0,0 neg]
%     Score = -4,179543 (regressionFit = 4,179539, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), athleteledsportsteam(_, A), athleteledsportsteam(_, A).  [covers 109,0/399,0 pos, 0,0/0,0 neg]
%     Score = -4,193339 (regressionFit = 4,193336, penalties=3.1400000000000004E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(_, A), athleteplaysforteam(C, A).  [covers 69,0/399,0 pos, 0,0/0,0 neg]
%     Score = -4,178050 (regressionFit = 4,178047, penalties=3.1400000000000004E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), athleteledsportsteam(C, A), athleteplaysforteam(C, A).  [covers 87,0/399,0 pos, 0,0/0,0 neg]
%     Score = -4,192393 (regressionFit = 4,192390, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(_, A), athleteplaysforteam(C, _).  [covers 104,0/399,0 pos, 0,0/0,0 neg]
%     Score = -4,179246 (regressionFit = 4,179243, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), athleteledsportsteam(C, A), athleteplaysforteam(C, _).  [covers 105,0/399,0 pos, 0,0/0,0 neg]
%     Score = -4,179564 (regressionFit = 4,179561, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), athleteledsportsteam(_, A), athleteplaysforteam(_, A).  [covers 98,0/399,0 pos, 0,0/0,0 neg]
%     Score = -4,179543 (regressionFit = 4,179539, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(_, A), athleteplaysinleague(C, _).  [covers 109,0/399,0 pos, 0,0/0,0 neg]
%     Score = -4,165865 (regressionFit = 4,165861, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), athleteledsportsteam(C, A), athleteplaysinleague(C, _).  [covers 94,0/399,0 pos, 0,0/0,0 neg]
%     Score = -4,193552 (regressionFit = 4,193549, penalties=3.04E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), athleteledsportsteam(C, A), athleteplayssport(C, B).  [covers 74,0/399,0 pos, 0,0/0,0 neg]
%     Score = -4,179543 (regressionFit = 4,179539, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), athleteledsportsteam(_, A), athleteplayssport(_, B).  [covers 109,0/399,0 pos, 0,0/0,0 neg]
%     Score = -4,191939 (regressionFit = 4,191936, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), athleteledsportsteam(_, A), teamalsoknownas(A, _).  [covers 18,0/399,0 pos, 0,0/0,0 neg]
%     Score = -4,178919 (regressionFit = 4,178916, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), athleteledsportsteam(_, A), teamplaysagainstteam(A, _).  [covers 106,0/399,0 pos, 0,0/0,0 neg]
%     Score = -4,179330 (regressionFit = 4,179327, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), athleteledsportsteam(_, A), teamplaysagainstteam(_, A).  [covers 107,0/399,0 pos, 0,0/0,0 neg]
%     Score = -4,178000 (regressionFit = 4,177997, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), athleteledsportsteam(_, A), teamplaysinleague(A, _).  [covers 108,0/399,0 pos, 0,0/0,0 neg]

% Consider expanding [#6 of outerLoop #2, bodyLen=2] 'teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysforteam(B, _).  [covers 379,0/399,0 pos, 0,0/0,0 neg]' score=-4.187142417896263
%  At # nodes expanded = 6, |OPEN| = 7.  Pruned 22 variant children.  Sending 22 items to OPEN for evaluation and possible insertion.
% Have created 22 valid-on-seeds descendants and have picked up 6 bad extensions.
%     Score = -4,193555 (regressionFit = 4,193552, penalties=3.1400000000000004E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysforteam(C, _), athleteledsportsteam(C, A).  [covers 71,0/399,0 pos, 0,0/0,0 neg]
%     Score = -4,191875 (regressionFit = 4,191872, penalties=3.1400000000000004E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysforteam(B, C), athleteledsportsteam(B, C).  [covers 376,0/399,0 pos, 0,0/0,0 neg]
%     Score = -4,191875 (regressionFit = 4,191872, penalties=3.35E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysforteam(B, _), athleteledsportsteam(B, _).  [covers 376,0/399,0 pos, 0,0/0,0 neg]
%     Score = -4,192393 (regressionFit = 4,192390, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysforteam(C, _), athleteledsportsteam(_, A).  [covers 104,0/399,0 pos, 0,0/0,0 neg]
%     Score = -4,193712 (regressionFit = 4,193709, penalties=3.2500000000000006E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysforteam(B, C), athleteledsportsteam(_, C).  [covers 378,0/399,0 pos, 0,0/0,0 neg]
%     Score = -4,187143 (regressionFit = 4,187140, penalties=3.2500000000000006E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysforteam(B, _), athleteplaysforteam(B, _).  [covers 379,0/399,0 pos, 0,0/0,0 neg]
%     Score = -4,173818 (regressionFit = 4,173815, penalties=3.1500000000000008E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysforteam(C, _), athleteplaysforteam(_, A).  [covers 172,0/399,0 pos, 0,0/0,0 neg]
%     Score = -4,187143 (regressionFit = 4,187140, penalties=3.1500000000000008E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysforteam(B, C), athleteplaysforteam(_, C).  [covers 379,0/399,0 pos, 0,0/0,0 neg]
%     Score = -4,191875 (regressionFit = 4,191872, penalties=3.35E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysforteam(B, _), athleteplaysinleague(B, _).  [covers 376,0/399,0 pos, 0,0/0,0 neg]
%     Score = -4,187143 (regressionFit = 4,187140, penalties=3.2500000000000006E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysforteam(B, _), athleteplayssport(_, A).  [covers 379,0/399,0 pos, 0,0/0,0 neg]
%     Score = -4,193731 (regressionFit = 4,193728, penalties=3.0400000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysforteam(C, D), teamalsoknownas(A, D).  [covers 14,0/399,0 pos, 0,0/0,0 neg]
%     Score = -4,176972 (regressionFit = 4,176969, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysforteam(C, _), teamalsoknownas(A, _).  [covers 83,0/399,0 pos, 0,0/0,0 neg]
%     Score = -4,191875 (regressionFit = 4,191872, penalties=3.2500000000000006E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysforteam(B, C), teamalsoknownas(C, _).  [covers 376,0/399,0 pos, 0,0/0,0 neg]
%     Score = -4,191875 (regressionFit = 4,191872, penalties=3.2500000000000006E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysforteam(B, C), teamalsoknownas(_, C).  [covers 376,0/399,0 pos, 0,0/0,0 neg]
%     Score = -4,191842 (regressionFit = 4,191839, penalties=3.0400000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysforteam(C, D), teamplaysagainstteam(A, D).  [covers 172,0/399,0 pos, 0,0/0,0 neg]
%     Score = -4,191222 (regressionFit = 4,191218, penalties=3.0400000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysforteam(C, D), teamplaysagainstteam(D, A).  [covers 179,0/399,0 pos, 0,0/0,0 neg]
%     Score = -4,190205 (regressionFit = 4,190202, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysforteam(C, _), teamplaysagainstteam(A, _).  [covers 212,0/399,0 pos, 0,0/0,0 neg]
%     Score = -4,187143 (regressionFit = 4,187140, penalties=3.2500000000000006E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysforteam(B, C), teamplaysagainstteam(C, _).  [covers 379,0/399,0 pos, 0,0/0,0 neg]
%     Score = -4,189540 (regressionFit = 4,189537, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysforteam(C, _), teamplaysagainstteam(_, A).  [covers 225,0/399,0 pos, 0,0/0,0 neg]
%     Score = -4,187143 (regressionFit = 4,187140, penalties=3.2500000000000006E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysforteam(B, C), teamplaysagainstteam(_, C).  [covers 379,0/399,0 pos, 0,0/0,0 neg]
%     Score = -4,193735 (regressionFit = 4,193732, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysforteam(C, _), teamplaysinleague(A, _).  [covers 297,0/399,0 pos, 0,0/0,0 neg]
%     Score = -4,187143 (regressionFit = 4,187140, penalties=3.2500000000000006E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysforteam(B, C), teamplaysinleague(C, _).  [covers 379,0/399,0 pos, 0,0/0,0 neg]

% Consider expanding [#7 of outerLoop #2, bodyLen=2] 'teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(A, _).  [covers 225,0/399,0 pos, 0,0/0,0 neg]' score=-4.191717986949796
%  At # nodes expanded = 7, |OPEN| = 6.  Pruned 22 variant children.  Sending 23 items to OPEN for evaluation and possible insertion.
% Have created 23 valid-on-seeds descendants and have picked up 5 bad extensions.
%     Score = -4,193570 (regressionFit = 4,193567, penalties=3.1400000000000004E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysagainstteam(A, _), athleteledsportsteam(C, A).  [covers 73,0/399,0 pos, 0,0/0,0 neg]
%     Score = -4,188087 (regressionFit = 4,188083, penalties=3.0400000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysagainstteam(A, D), athleteledsportsteam(C, D).  [covers 157,0/399,0 pos, 0,0/0,0 neg]
%     Score = -4,190205 (regressionFit = 4,190202, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysagainstteam(A, _), athleteledsportsteam(C, _).  [covers 212,0/399,0 pos, 0,0/0,0 neg]
%     Score = -4,178919 (regressionFit = 4,178916, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(A, _), athleteledsportsteam(_, A).  [covers 106,0/399,0 pos, 0,0/0,0 neg]
%     Score = -4,177601 (regressionFit = 4,177598, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(A, C), athleteledsportsteam(_, C).  [covers 187,0/399,0 pos, 0,0/0,0 neg]
%     Score = -4,193057 (regressionFit = 4,193053, penalties=3.1400000000000004E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysagainstteam(A, _), athleteplaysforteam(C, A).  [covers 92,0/399,0 pos, 0,0/0,0 neg]
%     Score = -4,191842 (regressionFit = 4,191839, penalties=3.0400000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysagainstteam(A, D), athleteplaysforteam(C, D).  [covers 172,0/399,0 pos, 0,0/0,0 neg]
%     Score = -4,190205 (regressionFit = 4,190202, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysagainstteam(A, _), athleteplaysforteam(C, _).  [covers 212,0/399,0 pos, 0,0/0,0 neg]
%     Score = -4,193542 (regressionFit = 4,193538, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(A, _), athleteplaysforteam(_, A).  [covers 170,0/399,0 pos, 0,0/0,0 neg]
%     Score = -4,190108 (regressionFit = 4,190105, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(A, C), athleteplaysforteam(_, C).  [covers 217,0/399,0 pos, 0,0/0,0 neg]
%     Score = -4,191719 (regressionFit = 4,191716, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysagainstteam(A, _), athleteplaysinleague(C, _).  [covers 225,0/399,0 pos, 0,0/0,0 neg]
%     Score = -4,191719 (regressionFit = 4,191716, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(A, _), athleteplayssport(_, B).  [covers 225,0/399,0 pos, 0,0/0,0 neg]
%     Score = -4,190743 (regressionFit = 4,190739, penalties=3.1400000000000004E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(A, C), teamalsoknownas(A, C).  [covers 17,0/399,0 pos, 0,0/0,0 neg]
%     Score = -4,168092 (regressionFit = 4,168089, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(A, _), teamalsoknownas(A, _).  [covers 40,0/399,0 pos, 0,0/0,0 neg]
%     Score = -4,184841 (regressionFit = 4,184838, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(A, C), teamalsoknownas(C, _).  [covers 166,0/399,0 pos, 0,0/0,0 neg]
%     Score = -4,181084 (regressionFit = 4,181081, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(A, C), teamalsoknownas(_, C).  [covers 171,0/399,0 pos, 0,0/0,0 neg]
%     Score = -4,190457 (regressionFit = 4,190454, penalties=3.04E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(A, C), teamplaysagainstteam(C, A).  [covers 211,0/399,0 pos, 0,0/0,0 neg]
%     Score = -4,191719 (regressionFit = 4,191716, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(A, _), teamplaysagainstteam(A, _).  [covers 225,0/399,0 pos, 0,0/0,0 neg]
%     Score = -4,191793 (regressionFit = 4,191790, penalties=3.1500000000000008E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(A, C), teamplaysagainstteam(C, _).  [covers 223,0/399,0 pos, 0,0/0,0 neg]
%     Score = -4,191791 (regressionFit = 4,191788, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(A, _), teamplaysagainstteam(_, A).  [covers 220,0/399,0 pos, 0,0/0,0 neg]
%     Score = -4,191719 (regressionFit = 4,191716, penalties=3.1500000000000008E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(A, C), teamplaysagainstteam(_, C).  [covers 225,0/399,0 pos, 0,0/0,0 neg]
%     Score = -4,186322 (regressionFit = 4,186319, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(A, _), teamplaysinleague(A, _).  [covers 204,0/399,0 pos, 0,0/0,0 neg]
%     Score = -4,189986 (regressionFit = 4,189983, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(A, C), teamplaysinleague(C, _).  [covers 220,0/399,0 pos, 0,0/0,0 neg]

% Consider expanding [#8 of outerLoop #2, bodyLen=2] 'teamplayssport(_, A) :- athleteplayssport(B, A), athleteledsportsteam(B, _).  [covers 376,0/399,0 pos, 0,0/0,0 neg]' score=-4.191873754618468
%  At # nodes expanded = 8, |OPEN| = 5.  Pruned 22 variant children.  Sending 21 items to OPEN for evaluation and possible insertion.
% Have created 21 valid-on-seeds descendants and have picked up 6 bad extensions.
%     Score = -4,192393 (regressionFit = 4,192390, penalties=3.1500000000000008E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteledsportsteam(_, A).  [covers 104,0/399,0 pos, 0,0/0,0 neg]
%     Score = -4,191875 (regressionFit = 4,191872, penalties=3.1500000000000008E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteledsportsteam(B, C), athleteledsportsteam(_, C).  [covers 376,0/399,0 pos, 0,0/0,0 neg]
%     Score = -4,193349 (regressionFit = 4,193346, penalties=3.1400000000000004E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(C, A).  [covers 69,0/399,0 pos, 0,0/0,0 neg]
%     Score = -4,191875 (regressionFit = 4,191872, penalties=3.1400000000000004E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteledsportsteam(B, C), athleteplaysforteam(B, C).  [covers 376,0/399,0 pos, 0,0/0,0 neg]
%     Score = -4,191875 (regressionFit = 4,191872, penalties=3.35E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteledsportsteam(B, _), athleteplaysforteam(B, _).  [covers 376,0/399,0 pos, 0,0/0,0 neg]
%     Score = -4,173818 (regressionFit = 4,173815, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(_, A).  [covers 172,0/399,0 pos, 0,0/0,0 neg]
%     Score = -4,191875 (regressionFit = 4,191872, penalties=3.2500000000000006E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteledsportsteam(B, C), athleteplaysforteam(_, C).  [covers 376,0/399,0 pos, 0,0/0,0 neg]
%     Score = -4,191875 (regressionFit = 4,191872, penalties=3.35E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteledsportsteam(B, _), athleteplaysinleague(B, _).  [covers 376,0/399,0 pos, 0,0/0,0 neg]
%     Score = -4,191875 (regressionFit = 4,191872, penalties=3.2500000000000006E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteledsportsteam(B, _), athleteplayssport(_, A).  [covers 376,0/399,0 pos, 0,0/0,0 neg]
%     Score = -4,193746 (regressionFit = 4,193743, penalties=3.0400000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamalsoknownas(A, D).  [covers 11,0/399,0 pos, 0,0/0,0 neg]
%     Score = -4,185727 (regressionFit = 4,185723, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamalsoknownas(A, _).  [covers 82,0/399,0 pos, 0,0/0,0 neg]
%     Score = -4,191875 (regressionFit = 4,191872, penalties=3.2500000000000006E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteledsportsteam(B, C), teamalsoknownas(C, _).  [covers 376,0/399,0 pos, 0,0/0,0 neg]
%     Score = -4,191875 (regressionFit = 4,191872, penalties=3.2500000000000006E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteledsportsteam(B, C), teamalsoknownas(_, C).  [covers 376,0/399,0 pos, 0,0/0,0 neg]
%     Score = -4,188087 (regressionFit = 4,188083, penalties=3.0400000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, D).  [covers 157,0/399,0 pos, 0,0/0,0 neg]
%     Score = -4,189060 (regressionFit = 4,189057, penalties=3.0400000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(D, A).  [covers 166,0/399,0 pos, 0,0/0,0 neg]
%     Score = -4,190205 (regressionFit = 4,190202, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, _).  [covers 212,0/399,0 pos, 0,0/0,0 neg]
%     Score = -4,191875 (regressionFit = 4,191872, penalties=3.2500000000000006E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteledsportsteam(B, C), teamplaysagainstteam(C, _).  [covers 376,0/399,0 pos, 0,0/0,0 neg]
%     Score = -4,189540 (regressionFit = 4,189537, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(_, A).  [covers 225,0/399,0 pos, 0,0/0,0 neg]
%     Score = -4,191875 (regressionFit = 4,191872, penalties=3.2500000000000006E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteledsportsteam(B, C), teamplaysagainstteam(_, C).  [covers 376,0/399,0 pos, 0,0/0,0 neg]
%     Score = -4,192059 (regressionFit = 4,192056, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysinleague(A, _).  [covers 296,0/399,0 pos, 0,0/0,0 neg]
%     Score = -4,191875 (regressionFit = 4,191872, penalties=3.2500000000000006E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteledsportsteam(B, C), teamplaysinleague(C, _).  [covers 376,0/399,0 pos, 0,0/0,0 neg]

% Consider expanding [#9 of outerLoop #2, bodyLen=2] 'teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysforteam(C, A).  [covers 93,0/399,0 pos, 0,0/0,0 neg]' score=-4.1929854713820225
%  At # nodes expanded = 9, |OPEN| = 4.  Pruned 6 variant children.  Sending 10 items to OPEN for evaluation and possible insertion.
% Have created 10 valid-on-seeds descendants and have picked up 2 bad extensions.
%     Score = -4,193520 (regressionFit = 4,193517, penalties=3.0300000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysforteam(C, A), athleteledsportsteam(C, A).  [covers 53,0/399,0 pos, 0,0/0,0 neg]
%     Score = -4,193349 (regressionFit = 4,193346, penalties=3.1400000000000004E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysforteam(C, A), athleteledsportsteam(C, _).  [covers 69,0/399,0 pos, 0,0/0,0 neg]
%     Score = -4,193339 (regressionFit = 4,193336, penalties=3.1400000000000004E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysforteam(C, A), athleteledsportsteam(_, A).  [covers 69,0/399,0 pos, 0,0/0,0 neg]
%     Score = -4,192986 (regressionFit = 4,192983, penalties=3.04E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysforteam(C, A), athleteplaysforteam(_, A).  [covers 93,0/399,0 pos, 0,0/0,0 neg]
%     Score = -4,192986 (regressionFit = 4,192983, penalties=3.1400000000000004E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysforteam(C, A), athleteplaysinleague(C, _).  [covers 90,0/399,0 pos, 0,0/0,0 neg]
%     Score = -4,192986 (regressionFit = 4,192983, penalties=3.04E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysforteam(C, A), athleteplayssport(_, B).  [covers 93,0/399,0 pos, 0,0/0,0 neg]
%     Score = -4,193726 (regressionFit = 4,193723, penalties=3.1400000000000004E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysforteam(C, A), teamalsoknownas(A, _).  [covers 17,0/399,0 pos, 0,0/0,0 neg]
%     Score = -4,193057 (regressionFit = 4,193053, penalties=3.1400000000000004E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysforteam(C, A), teamplaysagainstteam(A, _).  [covers 92,0/399,0 pos, 0,0/0,0 neg]
%     Score = -4,192987 (regressionFit = 4,192983, penalties=3.1400000000000004E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysforteam(C, A), teamplaysagainstteam(_, A).  [covers 93,0/399,0 pos, 0,0/0,0 neg]
%     Score = -4,193003 (regressionFit = 4,193000, penalties=3.1400000000000004E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysforteam(C, A), teamplaysinleague(A, _).  [covers 92,0/399,0 pos, 0,0/0,0 neg]

***** Warning: #18 TOO MANY NODES CONSIDERED (i.e., 'expanded') for 'LearnOneClause': nodesConsidered = 10 and maxNodesToConsider = 10. *****


% The best node found: teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(_, C).  [covers 231,0/399,0 pos, 0,0/0,0 neg]

% The best node found: teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(_, C).  [covers 231,0/399,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,011.
% Will extend: teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(_, C).  [covers 231,0/399,0 pos, 0,0/0,0 neg]
% Path: 3;true
Comparing variance: 0.014180527677108557 to score=0.0025 #egs=231.0
Comparing variance: 0.005135039470756024 to score=0.0025 #egs=168.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 231,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,014181)
%         ILP node to extend: teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(_, C).  [covers 231,0/399,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -0,014181) into position #1 in the search queue (new size=2).
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 168,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,005135)
%         ILP node to extend: teamplayssport(_, A) :- athleteplayssport(_, A).  [covers 399,0/399,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -0,005135) into position #2 in the search queue (new size=3).

% Time for loop #2: 6,650 seconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #2, the best clause found is:
%      teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(_, C).  [covers 231,0/399,0 pos, 0,0/0,0 neg]
% This clause covers 231 positive examples, of which 231 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(_, C).  [covers 231,0/231,0 pos, 0,0/0,0 neg]'
%     Score = -4,138392 (regressionFit = 4,138389, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(_, C).  [covers 231,0/231,0 pos, 0,0/0,0 neg]

% Have these 7 positive seeds: 6 68 114 121 136 159 163
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Consider expanding [#1 of outerLoop #3, bodyLen=3] 'teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(_, C).  [covers 231,0/231,0 pos, 0,0/0,0 neg]' score=-4.138391774499088
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 16 variant children.  Sending 20 items to OPEN for evaluation and possible insertion.
% Have created 20 valid-on-seeds descendants and have picked up 2 bad extensions.
%     Score = -3,261396 (regressionFit = 3,261392, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, A).  [covers 73,0/231,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -3,261396): teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, A).  [covers 73,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,271073 (regressionFit = 3,271069, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(D, C), athleteledsportsteam(D, A).  [covers 90,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,001481 (regressionFit = 3,001477, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _).  [covers 224,0/231,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -3,001481): teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _).  [covers 224,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,274417 (regressionFit = 3,274413, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(D, C), athleteledsportsteam(D, _).  [covers 189,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,274048 (regressionFit = 3,274044, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(_, C), athleteledsportsteam(_, A).  [covers 103,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,252513 (regressionFit = 3,252508, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteplaysforteam(C, A).  [covers 89,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,275322 (regressionFit = 3,275318, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(D, C), athleteplaysforteam(D, A).  [covers 108,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,001481 (regressionFit = 3,001477, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteplaysforteam(C, _).  [covers 224,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,274417 (regressionFit = 3,274413, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(D, C), athleteplaysforteam(D, _).  [covers 189,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,256107 (regressionFit = 3,256102, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(_, C), athleteplaysforteam(_, A).  [covers 158,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,272955 (regressionFit = 3,272951, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteplaysinleague(C, D).  [covers 181,0/231,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteplaysinleague(C, _).  [covers 231,0/231,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(_, C), athleteplaysinleague(_, C).  [covers 231,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,272955 (regressionFit = 3,272951, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(D, C), athleteplayssport(D, B).  [covers 181,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,274996 (regressionFit = 3,274992, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(D, C), athleteplayssport(D, _).  [covers 191,0/231,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(_, C), athleteplayssport(_, B).  [covers 231,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,265267 (regressionFit = 3,265262, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(_, C), teamalsoknownas(_, A).  [covers 26,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,272161 (regressionFit = 3,272157, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(_, C), teamplaysagainstteam(A, _).  [covers 189,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,265579 (regressionFit = 3,265574, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(_, C), teamplaysagainstteam(_, A).  [covers 197,0/231,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(_, C), teamplaysinleague(_, C).  [covers 231,0/231,0 pos, 0,0/0,0 neg]

% Consider expanding [#2 of outerLoop #3, bodyLen=4] 'teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _).  [covers 224,0/231,0 pos, 0,0/0,0 neg]' score=-3.0014814543214667
%  At # nodes expanded = 2, |OPEN| = 19.  Pruned 36 variant children.  Sending 33 items to OPEN for evaluation and possible insertion.
% Have created 33 valid-on-seeds descendants and have picked up 6 bad extensions.
%     Score = -3,255441 (regressionFit = 3,255436, penalties=5.060000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteledsportsteam(C, _), athleteledsportsteam(E, A).  [covers 88,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,224940 (regressionFit = 3,224935, penalties=4.960000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteledsportsteam(C, F), athleteledsportsteam(E, F).  [covers 187,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,001482 (regressionFit = 3,001477, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _), athleteledsportsteam(C, _).  [covers 224,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,224940 (regressionFit = 3,224935, penalties=5.1700000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteledsportsteam(C, _), athleteledsportsteam(E, _).  [covers 187,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,248324 (regressionFit = 3,248319, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _), athleteledsportsteam(_, A).  [covers 101,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,001482 (regressionFit = 3,001477, penalties=5.1700000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, E), athleteledsportsteam(_, E).  [covers 224,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,261445 (regressionFit = 3,261440, penalties=5.2600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _), athleteplaysforteam(C, A).  [covers 67,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,001482 (regressionFit = 3,001477, penalties=5.1600000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, E), athleteplaysforteam(C, E).  [covers 224,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,241212 (regressionFit = 3,241207, penalties=5.1600000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteledsportsteam(C, _), athleteplaysforteam(E, A).  [covers 106,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,224940 (regressionFit = 3,224935, penalties=5.060000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteledsportsteam(C, F), athleteplaysforteam(E, F).  [covers 187,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,001483 (regressionFit = 3,001477, penalties=5.37E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _), athleteplaysforteam(C, _).  [covers 224,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,224940 (regressionFit = 3,224935, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteledsportsteam(C, _), athleteplaysforteam(E, _).  [covers 187,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,147881 (regressionFit = 3,147876, penalties=5.37E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _), athleteplaysforteam(_, A).  [covers 156,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,001482 (regressionFit = 3,001477, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, E), athleteplaysforteam(_, E).  [covers 224,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,240549 (regressionFit = 3,240544, penalties=5.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _), athleteplaysinleague(C, D).  [covers 178,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,001482 (regressionFit = 3,001477, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _), athleteplaysinleague(C, _).  [covers 224,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,001482 (regressionFit = 3,001477, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _), athleteplaysinleague(_, D).  [covers 224,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,238350 (regressionFit = 3,238345, penalties=5.060000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteledsportsteam(C, _), athleteplayssport(E, B).  [covers 179,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,218507 (regressionFit = 3,218502, penalties=5.1700000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteledsportsteam(C, _), athleteplayssport(E, _).  [covers 189,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,001482 (regressionFit = 3,001477, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _), athleteplayssport(_, B).  [covers 224,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,274982 (regressionFit = 3,274976, penalties=5.1600000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, E), teamalsoknownas(E, A).  [covers 14,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,001482 (regressionFit = 3,001477, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, E), teamalsoknownas(E, _).  [covers 224,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,264948 (regressionFit = 3,264943, penalties=5.37E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _), teamalsoknownas(_, A).  [covers 25,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,001482 (regressionFit = 3,001477, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, E), teamalsoknownas(_, E).  [covers 224,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,267097 (regressionFit = 3,267091, penalties=5.1600000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, E), teamplaysagainstteam(A, E).  [covers 148,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,263774 (regressionFit = 3,263769, penalties=5.1600000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, E), teamplaysagainstteam(E, A).  [covers 154,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,183779 (regressionFit = 3,183773, penalties=5.37E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _), teamplaysagainstteam(A, _).  [covers 185,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,001482 (regressionFit = 3,001477, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, E), teamplaysagainstteam(E, _).  [covers 224,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,167955 (regressionFit = 3,167950, penalties=5.37E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _), teamplaysagainstteam(_, A).  [covers 190,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,001482 (regressionFit = 3,001477, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, E), teamplaysagainstteam(_, E).  [covers 224,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,257483 (regressionFit = 3,257478, penalties=5.060000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, E), teamplaysinleague(E, D).  [covers 197,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,001482 (regressionFit = 3,001477, penalties=5.1700000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, E), teamplaysinleague(E, _).  [covers 224,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,001482 (regressionFit = 3,001477, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _), teamplaysinleague(_, D).  [covers 224,0/231,0 pos, 0,0/0,0 neg]

% Consider expanding [#3 of outerLoop #3, bodyLen=4] 'teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteplaysforteam(C, _).  [covers 224,0/231,0 pos, 0,0/0,0 neg]' score=-3.0014814543214667
%  At # nodes expanded = 3, |OPEN| = 18.  Pruned 36 variant children.  Sending 33 items to OPEN for evaluation and possible insertion.
% Have created 33 valid-on-seeds descendants and have picked up 6 bad extensions.
%     Score = -3,262175 (regressionFit = 3,262170, penalties=5.2600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteplaysforteam(C, _), athleteledsportsteam(C, A).  [covers 70,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,001482 (regressionFit = 3,001477, penalties=5.1600000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteplaysforteam(C, E), athleteledsportsteam(C, E).  [covers 224,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,255441 (regressionFit = 3,255436, penalties=5.1600000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteplaysforteam(C, _), athleteledsportsteam(E, A).  [covers 88,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,224940 (regressionFit = 3,224935, penalties=5.060000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteplaysforteam(C, F), athleteledsportsteam(E, F).  [covers 187,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,001483 (regressionFit = 3,001477, penalties=5.37E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteplaysforteam(C, _), athleteledsportsteam(C, _).  [covers 224,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,224940 (regressionFit = 3,224935, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteplaysforteam(C, _), athleteledsportsteam(E, _).  [covers 187,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,248324 (regressionFit = 3,248319, penalties=5.37E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteplaysforteam(C, _), athleteledsportsteam(_, A).  [covers 101,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,001482 (regressionFit = 3,001477, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteplaysforteam(C, E), athleteledsportsteam(_, E).  [covers 224,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,241212 (regressionFit = 3,241207, penalties=5.060000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteplaysforteam(C, _), athleteplaysforteam(E, A).  [covers 106,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,224940 (regressionFit = 3,224935, penalties=4.960000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteplaysforteam(C, F), athleteplaysforteam(E, F).  [covers 187,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,001482 (regressionFit = 3,001477, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteplaysforteam(C, _), athleteplaysforteam(C, _).  [covers 224,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,224940 (regressionFit = 3,224935, penalties=5.1700000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteplaysforteam(C, _), athleteplaysforteam(E, _).  [covers 187,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,147881 (regressionFit = 3,147876, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteplaysforteam(C, _), athleteplaysforteam(_, A).  [covers 156,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,001482 (regressionFit = 3,001477, penalties=5.1700000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteplaysforteam(C, E), athleteplaysforteam(_, E).  [covers 224,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,240549 (regressionFit = 3,240544, penalties=5.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteplaysforteam(C, _), athleteplaysinleague(C, D).  [covers 178,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,001482 (regressionFit = 3,001477, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteplaysforteam(C, _), athleteplaysinleague(C, _).  [covers 224,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,001482 (regressionFit = 3,001477, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteplaysforteam(C, _), athleteplaysinleague(_, D).  [covers 224,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,238350 (regressionFit = 3,238345, penalties=5.060000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteplaysforteam(C, _), athleteplayssport(E, B).  [covers 179,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,218507 (regressionFit = 3,218502, penalties=5.1700000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteplaysforteam(C, _), athleteplayssport(E, _).  [covers 189,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,001482 (regressionFit = 3,001477, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteplaysforteam(C, _), athleteplayssport(_, B).  [covers 224,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,274757 (regressionFit = 3,274752, penalties=5.1600000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteplaysforteam(C, E), teamalsoknownas(E, A).  [covers 18,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,001482 (regressionFit = 3,001477, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteplaysforteam(C, E), teamalsoknownas(E, _).  [covers 224,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,264948 (regressionFit = 3,264943, penalties=5.37E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteplaysforteam(C, _), teamalsoknownas(_, A).  [covers 25,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,001482 (regressionFit = 3,001477, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteplaysforteam(C, E), teamalsoknownas(_, E).  [covers 224,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,256547 (regressionFit = 3,256542, penalties=5.1600000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteplaysforteam(C, E), teamplaysagainstteam(A, E).  [covers 160,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,260807 (regressionFit = 3,260802, penalties=5.1600000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteplaysforteam(C, E), teamplaysagainstteam(E, A).  [covers 160,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,183779 (regressionFit = 3,183773, penalties=5.37E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteplaysforteam(C, _), teamplaysagainstteam(A, _).  [covers 185,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,001482 (regressionFit = 3,001477, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteplaysforteam(C, E), teamplaysagainstteam(E, _).  [covers 224,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,167955 (regressionFit = 3,167950, penalties=5.37E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteplaysforteam(C, _), teamplaysagainstteam(_, A).  [covers 190,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,001482 (regressionFit = 3,001477, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteplaysforteam(C, E), teamplaysagainstteam(_, E).  [covers 224,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,265691 (regressionFit = 3,265686, penalties=5.060000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteplaysforteam(C, E), teamplaysinleague(E, D).  [covers 189,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,001482 (regressionFit = 3,001477, penalties=5.1700000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteplaysforteam(C, E), teamplaysinleague(E, _).  [covers 224,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,001482 (regressionFit = 3,001477, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteplaysforteam(C, _), teamplaysinleague(_, D).  [covers 224,0/231,0 pos, 0,0/0,0 neg]

% Consider expanding [#4 of outerLoop #3, bodyLen=4] 'teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteplaysforteam(C, A).  [covers 89,0/231,0 pos, 0,0/0,0 neg]' score=-3.2525126204939876
%  At # nodes expanded = 4, |OPEN| = 17.  Pruned 14 variant children.  Sending 18 items to OPEN for evaluation and possible insertion.
% Have created 18 valid-on-seeds descendants and have picked up 2 bad extensions.
%     Score = -3,265918 (regressionFit = 3,265913, penalties=5.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteplaysforteam(C, A), athleteledsportsteam(C, A).  [covers 52,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,263161 (regressionFit = 3,263156, penalties=5.050000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteplaysforteam(C, A), athleteledsportsteam(E, A).  [covers 61,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,261445 (regressionFit = 3,261440, penalties=5.2600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteplaysforteam(C, A), athleteledsportsteam(C, _).  [covers 67,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,252514 (regressionFit = 3,252508, penalties=5.1600000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteplaysforteam(C, A), athleteledsportsteam(E, _).  [covers 89,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,261037 (regressionFit = 3,261031, penalties=5.2600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteplaysforteam(C, A), athleteledsportsteam(_, A).  [covers 68,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,252653 (regressionFit = 3,252648, penalties=4.950000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteplaysforteam(C, A), athleteplaysforteam(E, A).  [covers 88,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,252514 (regressionFit = 3,252508, penalties=5.060000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteplaysforteam(C, A), athleteplaysforteam(E, _).  [covers 89,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,252514 (regressionFit = 3,252508, penalties=5.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteplaysforteam(C, A), athleteplaysforteam(_, A).  [covers 89,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,253548 (regressionFit = 3,253543, penalties=5.050000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteplaysforteam(C, A), athleteplaysinleague(C, D).  [covers 86,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,253548 (regressionFit = 3,253543, penalties=5.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteplaysforteam(C, A), athleteplaysinleague(C, _).  [covers 86,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,252514 (regressionFit = 3,252508, penalties=5.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteplaysforteam(C, A), athleteplaysinleague(_, D).  [covers 89,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,252513 (regressionFit = 3,252508, penalties=4.950000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteplaysforteam(C, A), athleteplayssport(E, B).  [covers 89,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,252514 (regressionFit = 3,252508, penalties=5.060000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteplaysforteam(C, A), athleteplayssport(E, _).  [covers 89,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,252514 (regressionFit = 3,252508, penalties=5.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteplaysforteam(C, A), athleteplayssport(_, B).  [covers 89,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,274926 (regressionFit = 3,274921, penalties=5.2600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteplaysforteam(C, A), teamalsoknownas(_, A).  [covers 15,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,253309 (regressionFit = 3,253304, penalties=5.2600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteplaysforteam(C, A), teamplaysagainstteam(A, _).  [covers 88,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,252514 (regressionFit = 3,252508, penalties=5.2600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteplaysforteam(C, A), teamplaysagainstteam(_, A).  [covers 89,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,252514 (regressionFit = 3,252508, penalties=5.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteplaysforteam(C, A), teamplaysinleague(_, D).  [covers 89,0/231,0 pos, 0,0/0,0 neg]

% Consider expanding [#5 of outerLoop #3, bodyLen=4] 'teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(_, C), athleteplaysforteam(_, A).  [covers 158,0/231,0 pos, 0,0/0,0 neg]' score=-3.256106751629936

***** Warning: #1 TOO MANY NODES CONSIDERED (i.e., 'expanded') for 'HornClauseProver': nodesConsidered = 1.000.000 and maxNodesToConsider = 1.000.000. *****


***** Warning: #1 MaxNodesConsidered reached while proving:
  [athleteplayssport(Anon92005, baseball), teamplaysinleague(mariners, Anon94285), athleteplaysinleague(Anon95305, Anon94285), athleteplaysforteam(Anon97587, mariners), athleteledsportsteam(Anon92005, mariners)]. *****


***** Warning: #2 TOO MANY NODES CONSIDERED (i.e., 'expanded') for 'HornClauseProver': nodesConsidered = 1.000.000 and maxNodesToConsider = 1.000.000. *****


***** Warning: #2 MaxNodesConsidered reached while proving:
  [athleteplayssport(Anon92005, baseball), teamplaysinleague(mariners, Anon94285), athleteplaysinleague(Anon95305, Anon94285), athleteplaysforteam(Anon97587, mariners), athleteledsportsteam(Anon95305, mariners)]. *****


***** Warning: #3 TOO MANY NODES CONSIDERED (i.e., 'expanded') for 'HornClauseProver': nodesConsidered = 1.000.000 and maxNodesToConsider = 1.000.000. *****


***** Warning: #3 MaxNodesConsidered reached while proving:
  [athleteplayssport(Anon92005, baseball), teamplaysinleague(mariners, Anon94285), athleteplaysinleague(Anon95305, Anon94285), athleteplaysforteam(Anon97587, mariners), athleteledsportsteam(Anon97587, mariners)]. *****


***** Warning: #4 TOO MANY NODES CONSIDERED (i.e., 'expanded') for 'HornClauseProver': nodesConsidered = 1.000.000 and maxNodesToConsider = 1.000.000. *****


***** Warning: #4 MaxNodesConsidered reached while proving:
  [athleteplayssport(Anon92005, baseball), teamplaysinleague(mariners, Anon94285), athleteplaysinleague(Anon95305, Anon94285), athleteplaysforteam(Anon97587, mariners), athleteplaysforteam(Anon92005, mariners), differentlyBoundOutputVars(athleteplaysforteam(Anon92005, mariners), athleteplaysforteam(Anon97587, mariners))]. *****


***** Warning: #5 TOO MANY NODES CONSIDERED (i.e., 'expanded') for 'HornClauseProver': nodesConsidered = 1.000.000 and maxNodesToConsider = 1.000.000. *****


***** Warning: #5 MaxNodesConsidered reached while proving:
  [athleteplayssport(Anon92005, baseball), teamplaysinleague(mariners, Anon94285), athleteplaysinleague(Anon95305, Anon94285), athleteplaysforteam(Anon97587, mariners), athleteplaysforteam(Anon97587, Anon100385), newTermBoundByThisVariable(Anon100385, mariners)]. *****


***** Warning: #6 TOO MANY NODES CONSIDERED (i.e., 'expanded') for 'HornClauseProver': nodesConsidered = 1.000.000 and maxNodesToConsider = 1.000.000. *****


***** Warning: #6 MaxNodesConsidered reached while proving:
  [athleteplayssport(Anon92005, baseball), teamplaysinleague(mariners, Anon94285), athleteplaysinleague(Anon95305, Anon94285), athleteplaysforteam(Anon97587, mariners), athleteplaysinleague(Anon95305, Anon100389), newTermBoundByThisVariable(Anon100389, Anon94285)]. *****


***** Warning: #7 TOO MANY NODES CONSIDERED (i.e., 'expanded') for 'HornClauseProver': nodesConsidered = 1.000.000 and maxNodesToConsider = 1.000.000. *****


***** Warning: #7 MaxNodesConsidered reached while proving:
  [athleteplayssport(Anon92005, baseball), teamplaysinleague(mariners, Anon94285), athleteplaysinleague(Anon95305, Anon94285), athleteplaysforteam(Anon97587, mariners), athleteplayssport(Anon92005, Anon100393), newTermBoundByThisVariable(Anon100393, baseball)]. *****


***** Warning: #8 TOO MANY NODES CONSIDERED (i.e., 'expanded') for 'HornClauseProver': nodesConsidered = 1.000.000 and maxNodesToConsider = 1.000.000. *****


***** Warning: #8 MaxNodesConsidered reached while proving:
  [athleteplayssport(Anon92005, baseball), teamplaysinleague(mariners, Anon94285), athleteplaysinleague(Anon95305, Anon94285), athleteplaysforteam(Anon97587, mariners), athleteplayssport(Anon97587, Anon100393), newTermBoundByThisVariable(Anon100393, baseball)]. *****


***** Warning: #9 TOO MANY NODES CONSIDERED (i.e., 'expanded') for 'HornClauseProver': nodesConsidered = 1.000.000 and maxNodesToConsider = 1.000.000. *****


***** Warning: #9 MaxNodesConsidered reached while proving:
  [athleteplayssport(Anon92005, baseball), teamplaysinleague(mariners, Anon94285), athleteplaysinleague(Anon95305, Anon94285), athleteplaysforteam(Anon97587, mariners), teamalsoknownas(mariners, mariners)]. *****


***** Warning: #10 TOO MANY NODES CONSIDERED (i.e., 'expanded') for 'HornClauseProver': nodesConsidered = 1.000.000 and maxNodesToConsider = 1.000.000. *****


***** Warning: #10 MaxNodesConsidered reached while proving:
  [athleteplayssport(Anon92005, baseball), teamplaysinleague(mariners, Anon94285), athleteplaysinleague(Anon95305, Anon94285), athleteplaysforteam(Anon97587, mariners), teamplaysagainstteam(mariners, mariners)]. *****


***** Warning: #11 TOO MANY NODES CONSIDERED (i.e., 'expanded') for 'HornClauseProver': nodesConsidered = 1.000.000 and maxNodesToConsider = 1.000.000. *****


***** Warning: #11 MaxNodesConsidered reached while proving:
  [athleteplayssport(Anon92005, baseball), teamplaysinleague(mariners, Anon94285), athleteplaysinleague(Anon95305, Anon94285), athleteplaysforteam(Anon97587, mariners), teamplaysinleague(mariners, Anon100405), newTermBoundByThisVariable(Anon100405, Anon94285)]. *****

%  At # nodes expanded = 5, |OPEN| = 16.  Pruned 22 variant children.  Sending 26 items to OPEN for evaluation and possible insertion.
% Have created 26 valid-on-seeds descendants and have picked up 2 bad extensions.
%     Score = -3,262306 (regressionFit = 3,262301, penalties=5.2600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteplaysforteam(_, A), athleteledsportsteam(C, A).  [covers 66,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,269605 (regressionFit = 3,269599, penalties=5.2600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(D, C), athleteplaysforteam(_, A), athleteledsportsteam(D, A).  [covers 81,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,270931 (regressionFit = 3,270926, penalties=5.2600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(_, C), athleteplaysforteam(D, A), athleteledsportsteam(D, A).  [covers 81,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,147881 (regressionFit = 3,147876, penalties=5.37E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteplaysforteam(_, A), athleteledsportsteam(C, _).  [covers 156,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,273872 (regressionFit = 3,273867, penalties=5.37E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(D, C), athleteplaysforteam(_, A), athleteledsportsteam(D, _).  [covers 144,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,274392 (regressionFit = 3,274386, penalties=5.37E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(_, C), athleteplaysforteam(D, A), athleteledsportsteam(D, _).  [covers 96,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,273081 (regressionFit = 3,273076, penalties=5.47E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(_, C), athleteplaysforteam(_, A), athleteledsportsteam(_, A).  [covers 92,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,252514 (regressionFit = 3,252508, penalties=5.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteplaysforteam(_, A), athleteplaysforteam(C, A).  [covers 89,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,275323 (regressionFit = 3,275318, penalties=5.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(D, C), athleteplaysforteam(_, A), athleteplaysforteam(D, A).  [covers 108,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,147881 (regressionFit = 3,147876, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteplaysforteam(_, A), athleteplaysforteam(C, _).  [covers 156,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,273872 (regressionFit = 3,273867, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(D, C), athleteplaysforteam(_, A), athleteplaysforteam(D, _).  [covers 144,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,256108 (regressionFit = 3,256102, penalties=5.370000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(_, C), athleteplaysforteam(_, A), athleteplaysforteam(_, A).  [covers 158,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,275158 (regressionFit = 3,275153, penalties=5.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteplaysforteam(_, A), athleteplaysinleague(C, D).  [covers 136,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,275323 (regressionFit = 3,275318, penalties=5.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(_, C), athleteplaysforteam(D, A), athleteplaysinleague(D, C).  [covers 108,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,256108 (regressionFit = 3,256102, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteplaysforteam(_, A), athleteplaysinleague(C, _).  [covers 158,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,275693 (regressionFit = 3,275687, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(_, C), athleteplaysforteam(D, A), athleteplaysinleague(D, _).  [covers 118,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,256108 (regressionFit = 3,256102, penalties=5.370000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(_, C), athleteplaysforteam(_, A), athleteplaysinleague(_, C).  [covers 158,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,275158 (regressionFit = 3,275153, penalties=5.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(D, C), athleteplaysforteam(_, A), athleteplayssport(D, B).  [covers 136,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,252514 (regressionFit = 3,252508, penalties=5.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(_, C), athleteplaysforteam(D, A), athleteplayssport(D, B).  [covers 89,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,273513 (regressionFit = 3,273508, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(D, C), athleteplaysforteam(_, A), athleteplayssport(D, _).  [covers 145,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,275690 (regressionFit = 3,275684, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(_, C), athleteplaysforteam(D, A), athleteplayssport(D, _).  [covers 114,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,256108 (regressionFit = 3,256102, penalties=5.370000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(_, C), athleteplaysforteam(_, A), athleteplayssport(_, B).  [covers 158,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,264525 (regressionFit = 3,264519, penalties=5.47E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(_, C), athleteplaysforteam(_, A), teamalsoknownas(_, A).  [covers 22,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,260323 (regressionFit = 3,260317, penalties=5.47E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(_, C), athleteplaysforteam(_, A), teamplaysagainstteam(A, _).  [covers 151,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,257268 (regressionFit = 3,257262, penalties=5.47E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(_, C), athleteplaysforteam(_, A), teamplaysagainstteam(_, A).  [covers 156,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,256108 (regressionFit = 3,256102, penalties=5.370000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(_, C), athleteplaysforteam(_, A), teamplaysinleague(_, C).  [covers 158,0/231,0 pos, 0,0/0,0 neg]

% Consider expanding [#6 of outerLoop #3, bodyLen=4] 'teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, A).  [covers 73,0/231,0 pos, 0,0/0,0 neg]' score=-3.2613962843852415
%  At # nodes expanded = 6, |OPEN| = 15.  Pruned 14 variant children.  Sending 15 items to OPEN for evaluation and possible insertion.
% Have created 15 valid-on-seeds descendants and have picked up 2 bad extensions.
%     Score = -3,261918 (regressionFit = 3,261913, penalties=4.950000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteledsportsteam(C, A), athleteledsportsteam(E, A).  [covers 70,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,261397 (regressionFit = 3,261392, penalties=5.060000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteledsportsteam(C, A), athleteledsportsteam(E, _).  [covers 73,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,261397 (regressionFit = 3,261392, penalties=5.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, A), athleteledsportsteam(_, A).  [covers 73,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,265918 (regressionFit = 3,265913, penalties=5.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, A), athleteplaysforteam(C, A).  [covers 52,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,262516 (regressionFit = 3,262511, penalties=5.050000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteledsportsteam(C, A), athleteplaysforteam(E, A).  [covers 63,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,261397 (regressionFit = 3,261392, penalties=5.1600000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteledsportsteam(C, A), athleteplaysforteam(E, _).  [covers 73,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,262306 (regressionFit = 3,262301, penalties=5.2600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, A), athleteplaysforteam(_, A).  [covers 66,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,261918 (regressionFit = 3,261913, penalties=5.050000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, A), athleteplaysinleague(C, D).  [covers 70,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,261397 (regressionFit = 3,261392, penalties=5.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, A), athleteplaysinleague(_, D).  [covers 73,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,261397 (regressionFit = 3,261392, penalties=4.950000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteledsportsteam(C, A), athleteplayssport(E, B).  [covers 73,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,261397 (regressionFit = 3,261392, penalties=5.060000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteledsportsteam(C, A), athleteplayssport(E, _).  [covers 73,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,261397 (regressionFit = 3,261392, penalties=5.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, A), athleteplayssport(_, B).  [covers 73,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,261817 (regressionFit = 3,261812, penalties=5.2600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, A), teamplaysagainstteam(A, _).  [covers 72,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,261817 (regressionFit = 3,261812, penalties=5.2600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, A), teamplaysagainstteam(_, A).  [covers 72,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,261397 (regressionFit = 3,261392, penalties=5.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, A), teamplaysinleague(_, D).  [covers 73,0/231,0 pos, 0,0/0,0 neg]

% Consider expanding [#7 of outerLoop #3, bodyLen=4] 'teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(_, C), teamalsoknownas(_, A).  [covers 26,0/231,0 pos, 0,0/0,0 neg]' score=-3.265266502875477

***** Warning: #12 TOO MANY NODES CONSIDERED (i.e., 'expanded') for 'HornClauseProver': nodesConsidered = 1.000.000 and maxNodesToConsider = 1.000.000. *****


***** Warning: #12 MaxNodesConsidered reached while proving:
  [athleteplayssport(Anon92005, baseball), teamplaysinleague(mariners, Anon94285), athleteplaysinleague(Anon95305, Anon94285), teamalsoknownas(Anon97599, mariners), athleteplaysinleague(Anon95305, Anon101499), newTermBoundByThisVariable(Anon101499, Anon94285)]. *****


***** Warning: #13 TOO MANY NODES CONSIDERED (i.e., 'expanded') for 'HornClauseProver': nodesConsidered = 1.000.000 and maxNodesToConsider = 1.000.000. *****


***** Warning: #13 MaxNodesConsidered reached while proving:
  [athleteplayssport(Anon92005, baseball), teamplaysinleague(mariners, Anon94285), athleteplaysinleague(Anon95305, Anon94285), teamalsoknownas(Anon97599, mariners), athleteplayssport(Anon92005, Anon101503), newTermBoundByThisVariable(Anon101503, baseball)]. *****


***** Warning: #14 TOO MANY NODES CONSIDERED (i.e., 'expanded') for 'HornClauseProver': nodesConsidered = 1.000.000 and maxNodesToConsider = 1.000.000. *****


***** Warning: #14 MaxNodesConsidered reached while proving:
  [athleteplayssport(Anon92005, baseball), teamplaysinleague(mariners, Anon94285), athleteplaysinleague(Anon95305, Anon94285), teamalsoknownas(Anon97599, mariners), teamalsoknownas(Anon97599, Anon101507), newTermBoundByThisVariable(Anon101507, mariners, Anon97599)]. *****


***** Warning: #15 TOO MANY NODES CONSIDERED (i.e., 'expanded') for 'HornClauseProver': nodesConsidered = 1.000.000 and maxNodesToConsider = 1.000.000. *****


***** Warning: #15 MaxNodesConsidered reached while proving:
  [athleteplayssport(Anon92005, baseball), teamplaysinleague(mariners, Anon94285), athleteplaysinleague(Anon95305, Anon94285), teamalsoknownas(Anon97599, mariners), teamalsoknownas(Anon101509, mariners), newTermBoundByThisVariable(Anon101509, mariners, Anon97599)]. *****


***** Warning: #16 TOO MANY NODES CONSIDERED (i.e., 'expanded') for 'HornClauseProver': nodesConsidered = 1.000.000 and maxNodesToConsider = 1.000.000. *****


***** Warning: #16 MaxNodesConsidered reached while proving:
  [athleteplayssport(Anon92005, baseball), teamplaysinleague(mariners, Anon94285), athleteplaysinleague(Anon95305, Anon94285), teamalsoknownas(Anon97599, mariners), teamplaysinleague(mariners, Anon101515), newTermBoundByThisVariable(Anon101515, Anon94285)]. *****


***** Warning: #17 TOO MANY NODES CONSIDERED (i.e., 'expanded') for 'HornClauseProver': nodesConsidered = 1.000.000 and maxNodesToConsider = 1.000.000. *****


***** Warning: #17 MaxNodesConsidered reached while proving:
  [athleteplayssport(Anon92005, baseball), teamplaysinleague(mariners, Anon94285), athleteplaysinleague(Anon95305, Anon94285), teamalsoknownas(Anon97599, mariners), teamplaysinleague(Anon97599, Anon101515), newTermBoundByThisVariable(Anon101515, Anon94285)]. *****

%  At # nodes expanded = 7, |OPEN| = 14.  Pruned 36 variant children.  Sending 28 items to OPEN for evaluation and possible insertion.
% Have created 28 valid-on-seeds descendants and have picked up 7 bad extensions.
%     Score = -3,274982 (regressionFit = 3,274976, penalties=5.1600000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), teamalsoknownas(E, A), athleteledsportsteam(C, E).  [covers 14,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,274870 (regressionFit = 3,274865, penalties=5.1600000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(D, C), teamalsoknownas(E, A), athleteledsportsteam(D, E).  [covers 16,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,264948 (regressionFit = 3,264943, penalties=5.37E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), teamalsoknownas(_, A), athleteledsportsteam(C, _).  [covers 25,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,274641 (regressionFit = 3,274636, penalties=5.37E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(D, C), teamalsoknownas(_, A), athleteledsportsteam(D, _).  [covers 20,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,274927 (regressionFit = 3,274921, penalties=5.47E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(_, C), teamalsoknownas(_, A), athleteledsportsteam(_, A).  [covers 15,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,274870 (regressionFit = 3,274865, penalties=5.37E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(_, C), teamalsoknownas(D, A), athleteledsportsteam(_, D).  [covers 16,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,274926 (regressionFit = 3,274921, penalties=5.2600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), teamalsoknownas(_, A), athleteplaysforteam(C, A).  [covers 15,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,274757 (regressionFit = 3,274752, penalties=5.1600000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), teamalsoknownas(E, A), athleteplaysforteam(C, E).  [covers 18,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,274814 (regressionFit = 3,274809, penalties=5.2600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(D, C), teamalsoknownas(_, A), athleteplaysforteam(D, A).  [covers 17,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,274641 (regressionFit = 3,274636, penalties=5.1600000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(D, C), teamalsoknownas(E, A), athleteplaysforteam(D, E).  [covers 20,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,264948 (regressionFit = 3,264943, penalties=5.37E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), teamalsoknownas(_, A), athleteplaysforteam(C, _).  [covers 25,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,274641 (regressionFit = 3,274636, penalties=5.37E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(D, C), teamalsoknownas(_, A), athleteplaysforteam(D, _).  [covers 20,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,264525 (regressionFit = 3,264519, penalties=5.47E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(_, C), teamalsoknownas(_, A), athleteplaysforteam(_, A).  [covers 22,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,274641 (regressionFit = 3,274636, penalties=5.37E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(_, C), teamalsoknownas(D, A), athleteplaysforteam(_, D).  [covers 20,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,274641 (regressionFit = 3,274636, penalties=5.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), teamalsoknownas(_, A), athleteplaysinleague(C, D).  [covers 20,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,265267 (regressionFit = 3,265262, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), teamalsoknownas(_, A), athleteplaysinleague(C, _).  [covers 26,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,265268 (regressionFit = 3,265262, penalties=5.370000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(_, C), teamalsoknownas(_, A), athleteplaysinleague(_, C).  [covers 26,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,274641 (regressionFit = 3,274636, penalties=5.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(D, C), teamalsoknownas(_, A), athleteplayssport(D, B).  [covers 20,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,274641 (regressionFit = 3,274636, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(D, C), teamalsoknownas(_, A), athleteplayssport(D, _).  [covers 20,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,265268 (regressionFit = 3,265262, penalties=5.370000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(_, C), teamalsoknownas(_, A), athleteplayssport(_, B).  [covers 26,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,274814 (regressionFit = 3,274809, penalties=5.2600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(_, C), teamalsoknownas(D, A), teamplaysagainstteam(A, D).  [covers 17,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,274814 (regressionFit = 3,274809, penalties=5.2600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(_, C), teamalsoknownas(D, A), teamplaysagainstteam(D, A).  [covers 17,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,265003 (regressionFit = 3,264997, penalties=5.47E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(_, C), teamalsoknownas(_, A), teamplaysagainstteam(A, _).  [covers 24,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,274641 (regressionFit = 3,274636, penalties=5.37E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(_, C), teamalsoknownas(D, A), teamplaysagainstteam(D, _).  [covers 20,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,265174 (regressionFit = 3,265169, penalties=5.47E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(_, C), teamalsoknownas(_, A), teamplaysagainstteam(_, A).  [covers 25,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,274641 (regressionFit = 3,274636, penalties=5.37E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(_, C), teamalsoknownas(D, A), teamplaysagainstteam(_, D).  [covers 20,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,274641 (regressionFit = 3,274636, penalties=5.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(_, C), teamalsoknownas(D, A), teamplaysinleague(D, C).  [covers 20,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,265268 (regressionFit = 3,265262, penalties=5.370000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(_, C), teamalsoknownas(_, A), teamplaysinleague(_, C).  [covers 26,0/231,0 pos, 0,0/0,0 neg]

% Consider expanding [#8 of outerLoop #3, bodyLen=4] 'teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(_, C), teamplaysagainstteam(_, A).  [covers 197,0/231,0 pos, 0,0/0,0 neg]' score=-3.265578846434746

***** Warning: #18 TOO MANY NODES CONSIDERED (i.e., 'expanded') for 'HornClauseProver': nodesConsidered = 1.000.000 and maxNodesToConsider = 1.000.000. *****


***** Warning: #18 MaxNodesConsidered reached while proving:
  [athleteplayssport(Anon92005, baseball), teamplaysinleague(mariners, Anon94285), athleteplaysinleague(Anon95305, Anon94285), teamplaysagainstteam(Anon97603, mariners), athleteledsportsteam(Anon92005, mariners)]. *****


***** Warning: #19 TOO MANY NODES CONSIDERED (i.e., 'expanded') for 'HornClauseProver': nodesConsidered = 1.000.000 and maxNodesToConsider = 1.000.000. *****


***** Warning: #19 MaxNodesConsidered reached while proving:
  [athleteplayssport(Anon92005, baseball), teamplaysinleague(mariners, Anon94285), athleteplaysinleague(Anon95305, Anon94285), teamplaysagainstteam(Anon97603, mariners), athleteledsportsteam(Anon95305, mariners)]. *****


***** Warning: #20 TOO MANY NODES CONSIDERED (i.e., 'expanded') for 'HornClauseProver': nodesConsidered = 1.000.000 and maxNodesToConsider = 1.000.000. *****


***** Warning: #20 MaxNodesConsidered reached while proving:
  [athleteplayssport(Anon92005, baseball), teamplaysinleague(mariners, Anon94285), athleteplaysinleague(Anon95305, Anon94285), teamplaysagainstteam(Anon97603, mariners), athleteplaysforteam(Anon92005, mariners)]. *****


***** Warning: #21 TOO MANY NODES CONSIDERED (i.e., 'expanded') for 'HornClauseProver': nodesConsidered = 1.000.000 and maxNodesToConsider = 1.000.000. *****


***** Warning: #21 MaxNodesConsidered reached while proving:
  [athleteplayssport(Anon92005, basketball), teamplaysinleague(losangeleslakers, Anon94285), athleteplaysinleague(Anon95305, Anon94285), teamplaysagainstteam(Anon97603, losangeleslakers), athleteplaysinleague(Anon95305, Anon102279), newTermBoundByThisVariable(Anon102279, Anon94285)]. *****


***** Warning: #22 TOO MANY NODES CONSIDERED (i.e., 'expanded') for 'HornClauseProver': nodesConsidered = 1.000.000 and maxNodesToConsider = 1.000.000. *****


***** Warning: #22 MaxNodesConsidered reached while proving:
  [athleteplayssport(Anon92005, baseball), teamplaysinleague(mariners, Anon94285), athleteplaysinleague(Anon95305, Anon94285), teamplaysagainstteam(Anon97603, mariners), athleteplaysinleague(Anon95305, Anon102279), newTermBoundByThisVariable(Anon102279, Anon94285)]. *****


***** Warning: #23 TOO MANY NODES CONSIDERED (i.e., 'expanded') for 'HornClauseProver': nodesConsidered = 1.000.000 and maxNodesToConsider = 1.000.000. *****


***** Warning: #23 MaxNodesConsidered reached while proving:
  [athleteplayssport(Anon92005, basketball), teamplaysinleague(losangeleslakers, Anon94285), athleteplaysinleague(Anon95305, Anon94285), teamplaysagainstteam(Anon97603, losangeleslakers), athleteplayssport(Anon92005, Anon102283), newTermBoundByThisVariable(Anon102283, basketball)]. *****


***** Warning: #24 TOO MANY NODES CONSIDERED (i.e., 'expanded') for 'HornClauseProver': nodesConsidered = 1.000.000 and maxNodesToConsider = 1.000.000. *****


***** Warning: #24 MaxNodesConsidered reached while proving:
  [athleteplayssport(Anon92005, baseball), teamplaysinleague(mariners, Anon94285), athleteplaysinleague(Anon95305, Anon94285), teamplaysagainstteam(Anon97603, mariners), athleteplayssport(Anon92005, Anon102283), newTermBoundByThisVariable(Anon102283, baseball)]. *****


***** Warning: #25 TOO MANY NODES CONSIDERED (i.e., 'expanded') for 'HornClauseProver': nodesConsidered = 1.000.000 and maxNodesToConsider = 1.000.000. *****


***** Warning: #25 MaxNodesConsidered reached while proving:
  [athleteplayssport(Anon92005, baseball), teamplaysinleague(mariners, Anon94285), athleteplaysinleague(Anon95305, Anon94285), teamplaysagainstteam(Anon97603, mariners), teamalsoknownas(mariners, mariners)]. *****


***** Warning: #26 TOO MANY NODES CONSIDERED (i.e., 'expanded') for 'HornClauseProver': nodesConsidered = 1.000.000 and maxNodesToConsider = 1.000.000. *****


***** Warning: #26 MaxNodesConsidered reached while proving:
  [athleteplayssport(Anon92005, baseball), teamplaysinleague(mariners, Anon94285), athleteplaysinleague(Anon95305, Anon94285), teamplaysagainstteam(Anon97603, mariners), teamalsoknownas(mariners, Anon97603)]. *****


***** Warning: #27 TOO MANY NODES CONSIDERED (i.e., 'expanded') for 'HornClauseProver': nodesConsidered = 1.000.000 and maxNodesToConsider = 1.000.000. *****


***** Warning: #27 MaxNodesConsidered reached while proving:
  [athleteplayssport(Anon92005, baseball), teamplaysinleague(mariners, Anon94285), athleteplaysinleague(Anon95305, Anon94285), teamplaysagainstteam(Anon97603, mariners), teamalsoknownas(Anon97603, Anon97603)]. *****


***** Warning: #28 TOO MANY NODES CONSIDERED (i.e., 'expanded') for 'HornClauseProver': nodesConsidered = 1.000.000 and maxNodesToConsider = 1.000.000. *****


***** Warning: #28 MaxNodesConsidered reached while proving:
  [athleteplayssport(Anon92005, basketball), teamplaysinleague(losangeleslakers, Anon94285), athleteplaysinleague(Anon95305, Anon94285), teamplaysagainstteam(Anon97603, losangeleslakers), teamplaysinleague(losangeleslakers, Anon102295), newTermBoundByThisVariable(Anon102295, Anon94285)]. *****


***** Warning: #29 TOO MANY NODES CONSIDERED (i.e., 'expanded') for 'HornClauseProver': nodesConsidered = 1.000.000 and maxNodesToConsider = 1.000.000. *****


***** Warning: #29 MaxNodesConsidered reached while proving:
  [athleteplayssport(Anon92005, baseball), teamplaysinleague(mariners, Anon94285), athleteplaysinleague(Anon95305, Anon94285), teamplaysagainstteam(Anon97603, mariners), teamplaysinleague(mariners, Anon102295), newTermBoundByThisVariable(Anon102295, Anon94285)]. *****

%  At # nodes expanded = 8, |OPEN| = 13.  Pruned 36 variant children.  Sending 34 items to OPEN for evaluation and possible insertion.
% Have created 34 valid-on-seeds descendants and have picked up 5 bad extensions.
%     Score = -3,261817 (regressionFit = 3,261812, penalties=5.2600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), teamplaysagainstteam(_, A), athleteledsportsteam(C, A).  [covers 72,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,263774 (regressionFit = 3,263769, penalties=5.1600000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), teamplaysagainstteam(E, A), athleteledsportsteam(C, E).  [covers 154,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,270763 (regressionFit = 3,270758, penalties=5.2600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(D, C), teamplaysagainstteam(_, A), athleteledsportsteam(D, A).  [covers 89,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,262885 (regressionFit = 3,262880, penalties=5.1600000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(D, C), teamplaysagainstteam(E, A), athleteledsportsteam(D, E).  [covers 155,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,167955 (regressionFit = 3,167950, penalties=5.37E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), teamplaysagainstteam(_, A), athleteledsportsteam(C, _).  [covers 190,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,270838 (regressionFit = 3,270833, penalties=5.37E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(D, C), teamplaysagainstteam(_, A), athleteledsportsteam(D, _).  [covers 171,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,273873 (regressionFit = 3,273868, penalties=5.47E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(_, C), teamplaysagainstteam(_, A), athleteledsportsteam(_, A).  [covers 102,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,275199 (regressionFit = 3,275194, penalties=5.37E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(_, C), teamplaysagainstteam(D, A), athleteledsportsteam(_, D).  [covers 177,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,252514 (regressionFit = 3,252508, penalties=5.2600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), teamplaysagainstteam(_, A), athleteplaysforteam(C, A).  [covers 89,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,260807 (regressionFit = 3,260802, penalties=5.1600000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), teamplaysagainstteam(E, A), athleteplaysforteam(C, E).  [covers 160,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,275323 (regressionFit = 3,275318, penalties=5.2600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(D, C), teamplaysagainstteam(_, A), athleteplaysforteam(D, A).  [covers 108,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,264880 (regressionFit = 3,264875, penalties=5.1600000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(D, C), teamplaysagainstteam(E, A), athleteplaysforteam(D, E).  [covers 161,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,167955 (regressionFit = 3,167950, penalties=5.37E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), teamplaysagainstteam(_, A), athleteplaysforteam(C, _).  [covers 190,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,270838 (regressionFit = 3,270833, penalties=5.37E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(D, C), teamplaysagainstteam(_, A), athleteplaysforteam(D, _).  [covers 171,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,257268 (regressionFit = 3,257262, penalties=5.47E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(_, C), teamplaysagainstteam(_, A), athleteplaysforteam(_, A).  [covers 156,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,270880 (regressionFit = 3,270875, penalties=5.37E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(_, C), teamplaysagainstteam(D, A), athleteplaysforteam(_, D).  [covers 192,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,268717 (regressionFit = 3,268711, penalties=5.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), teamplaysagainstteam(_, A), athleteplaysinleague(C, D).  [covers 164,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,265580 (regressionFit = 3,265574, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), teamplaysagainstteam(_, A), athleteplaysinleague(C, _).  [covers 197,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,265580 (regressionFit = 3,265574, penalties=5.370000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(_, C), teamplaysagainstteam(_, A), athleteplaysinleague(_, C).  [covers 197,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,268717 (regressionFit = 3,268711, penalties=5.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(D, C), teamplaysagainstteam(_, A), athleteplayssport(D, B).  [covers 164,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,271879 (regressionFit = 3,271874, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(D, C), teamplaysagainstteam(_, A), athleteplayssport(D, _).  [covers 173,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,265580 (regressionFit = 3,265574, penalties=5.370000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(_, C), teamplaysagainstteam(_, A), athleteplayssport(_, B).  [covers 197,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,274814 (regressionFit = 3,274809, penalties=5.2600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(_, C), teamplaysagainstteam(D, A), teamalsoknownas(D, A).  [covers 17,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,274796 (regressionFit = 3,274790, penalties=5.37E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(_, C), teamplaysagainstteam(D, A), teamalsoknownas(D, _).  [covers 149,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,265174 (regressionFit = 3,265169, penalties=5.47E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(_, C), teamplaysagainstteam(_, A), teamalsoknownas(_, A).  [covers 25,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,271628 (regressionFit = 3,271623, penalties=5.37E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(_, C), teamplaysagainstteam(D, A), teamalsoknownas(_, D).  [covers 148,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,275192 (regressionFit = 3,275186, penalties=5.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(_, C), teamplaysagainstteam(D, A), teamplaysagainstteam(A, D).  [covers 180,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,273214 (regressionFit = 3,273209, penalties=5.370000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(_, C), teamplaysagainstteam(_, A), teamplaysagainstteam(A, _).  [covers 184,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,265580 (regressionFit = 3,265574, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(_, C), teamplaysagainstteam(D, A), teamplaysagainstteam(D, _).  [covers 197,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,265580 (regressionFit = 3,265574, penalties=5.370000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(_, C), teamplaysagainstteam(_, A), teamplaysagainstteam(_, A).  [covers 197,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,265580 (regressionFit = 3,265574, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(_, C), teamplaysagainstteam(D, A), teamplaysagainstteam(_, D).  [covers 197,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,274136 (regressionFit = 3,274131, penalties=5.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(_, C), teamplaysagainstteam(D, A), teamplaysinleague(D, C).  [covers 189,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,265580 (regressionFit = 3,265574, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(_, C), teamplaysagainstteam(D, A), teamplaysinleague(D, _).  [covers 197,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,265580 (regressionFit = 3,265574, penalties=5.370000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(_, C), teamplaysagainstteam(_, A), teamplaysinleague(_, C).  [covers 197,0/231,0 pos, 0,0/0,0 neg]

% Consider expanding [#9 of outerLoop #3, bodyLen=4] 'teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(D, C), athleteledsportsteam(D, A).  [covers 90,0/231,0 pos, 0,0/0,0 neg]' score=-3.2710729515901753
%  At # nodes expanded = 9, |OPEN| = 12.  Pruned 14 variant children.  Sending 17 items to OPEN for evaluation and possible insertion.
% Have created 17 valid-on-seeds descendants and have picked up 2 bad extensions.
%     Score = -3,261918 (regressionFit = 3,261913, penalties=4.950000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteledsportsteam(E, A), athleteledsportsteam(C, A).  [covers 70,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,255441 (regressionFit = 3,255436, penalties=5.060000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteledsportsteam(E, A), athleteledsportsteam(C, _).  [covers 88,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,271074 (regressionFit = 3,271069, penalties=5.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(D, C), athleteledsportsteam(D, A), athleteledsportsteam(_, A).  [covers 90,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,263161 (regressionFit = 3,263156, penalties=5.050000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteledsportsteam(E, A), athleteplaysforteam(C, A).  [covers 61,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,265101 (regressionFit = 3,265096, penalties=5.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(D, C), athleteledsportsteam(D, A), athleteplaysforteam(D, A).  [covers 68,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,255441 (regressionFit = 3,255436, penalties=5.1600000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteledsportsteam(E, A), athleteplaysforteam(C, _).  [covers 88,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,270385 (regressionFit = 3,270380, penalties=5.2600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(D, C), athleteledsportsteam(D, A), athleteplaysforteam(D, _).  [covers 87,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,269605 (regressionFit = 3,269599, penalties=5.2600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(D, C), athleteledsportsteam(D, A), athleteplaysforteam(_, A).  [covers 81,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,268964 (regressionFit = 3,268959, penalties=4.950000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteledsportsteam(E, A), athleteplaysinleague(C, D).  [covers 83,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,271074 (regressionFit = 3,271069, penalties=5.060000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteledsportsteam(E, A), athleteplaysinleague(C, _).  [covers 90,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,271074 (regressionFit = 3,271069, penalties=5.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(D, C), athleteledsportsteam(D, A), athleteplaysinleague(_, C).  [covers 90,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,261918 (regressionFit = 3,261913, penalties=5.050000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(D, C), athleteledsportsteam(D, A), athleteplayssport(D, B).  [covers 70,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,269472 (regressionFit = 3,269467, penalties=5.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(D, C), athleteledsportsteam(D, A), athleteplayssport(D, _).  [covers 83,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,271074 (regressionFit = 3,271069, penalties=5.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(D, C), athleteledsportsteam(D, A), athleteplayssport(_, B).  [covers 90,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,270763 (regressionFit = 3,270758, penalties=5.2600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(D, C), athleteledsportsteam(D, A), teamplaysagainstteam(A, _).  [covers 89,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,270763 (regressionFit = 3,270758, penalties=5.2600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(D, C), athleteledsportsteam(D, A), teamplaysagainstteam(_, A).  [covers 89,0/231,0 pos, 0,0/0,0 neg]
%     Score = -3,271074 (regressionFit = 3,271069, penalties=5.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(D, C), athleteledsportsteam(D, A), teamplaysinleague(_, C).  [covers 90,0/231,0 pos, 0,0/0,0 neg]

***** Warning: #19 TOO MANY NODES CONSIDERED (i.e., 'expanded') for 'LearnOneClause': nodesConsidered = 10 and maxNodesToConsider = 10. *****


% The best node found: teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _).  [covers 224,0/231,0 pos, 0,0/0,0 neg]

% The best node found: teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _).  [covers 224,0/231,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,014.
% Will extend: teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _).  [covers 224,0/231,0 pos, 0,0/0,0 neg]
% Path: 3;true,true
Comparing variance: 0.009134651908456368 to score=0.0025 #egs=224.0
Comparing variance: 0.13647359526103436 to score=0.0025 #egs=7.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 224,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,009135)
%         ILP node to extend: teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _).  [covers 224,0/231,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -0,009135) into position #1 in the search queue (new size=3).
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 7,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,136474)
%         ILP node to extend: teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(_, C).  [covers 231,0/231,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -0,136474) into position #1 in the search queue (new size=4).

% Time for loop #3: 1 minutes and 5,744 seconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #3, the best clause found is:
%      teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _).  [covers 224,0/231,0 pos, 0,0/0,0 neg]
% This clause covers 224 positive examples, of which 224 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(_, C).  [covers 231,0/7,0 pos, 0,0/0,0 neg]'
%     Score = -4,138392 (regressionFit = 4,138389, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(_, C).  [covers 7,0/7,0 pos, 0,0/0,0 neg]

% Have these 7 positive seeds: 0 1 2 3 4 5 6
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Consider expanding [#1 of outerLoop #4, bodyLen=3] 'teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(_, C).  [covers 7,0/7,0 pos, 0,0/0,0 neg]' score=-4.138391774499088
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 16 variant children.  Sending 17 items to OPEN for evaluation and possible insertion.
% Have created 17 valid-on-seeds descendants and have picked up 6 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(D, C), athleteledsportsteam(D, A).  [covers 2,0/7,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(D, C), athleteledsportsteam(D, _).  [covers 2,0/7,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(_, C), athleteledsportsteam(_, A).  [covers 2,0/7,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(D, C), athleteplaysforteam(D, A).  [covers 2,0/7,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(D, C), athleteplaysforteam(D, _).  [covers 2,0/7,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(_, C), athleteplaysforteam(_, A).  [covers 2,0/7,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteplaysinleague(C, D).  [covers 2,0/7,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteplaysinleague(C, _).  [covers 7,0/7,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(_, C), athleteplaysinleague(_, C).  [covers 7,0/7,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(D, C), athleteplayssport(D, B).  [covers 2,0/7,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(D, C), athleteplayssport(D, _).  [covers 2,0/7,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(_, C), athleteplayssport(_, B).  [covers 7,0/7,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(_, C), teamalsoknownas(A, _).  [covers 2,0/7,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(_, C), teamalsoknownas(_, A).  [covers 1,0/7,0 pos, 0,0/0,0 neg]
%     Score = -0,659917 (regressionFit = 0,659912, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(_, C), teamplaysagainstteam(A, _).  [covers 4,0/7,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -0,659917): teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(_, C), teamplaysagainstteam(A, _).  [covers 4,0/7,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(_, C), teamplaysagainstteam(_, A).  [covers 7,0/7,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(_, C), teamplaysinleague(_, C).  [covers 7,0/7,0 pos, 0,0/0,0 neg]

% Consider expanding [#2 of outerLoop #4, bodyLen=4] 'teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(_, C), teamplaysagainstteam(A, _).  [covers 4,0/7,0 pos, 0,0/0,0 neg]' score=-0.6599167907195108

***** Warning: #30 TOO MANY NODES CONSIDERED (i.e., 'expanded') for 'HornClauseProver': nodesConsidered = 1.000.000 and maxNodesToConsider = 1.000.000. *****


***** Warning: #30 MaxNodesConsidered reached while proving:
  [athleteplayssport(Anon92005, golf), teamplaysinleague(phillies, Anon94285), athleteplaysinleague(Anon95305, Anon94285), teamplaysagainstteam(phillies, Anon103745), athleteledsportsteam(Anon92005, phillies)]. *****


***** Warning: #31 TOO MANY NODES CONSIDERED (i.e., 'expanded') for 'HornClauseProver': nodesConsidered = 1.000.000 and maxNodesToConsider = 1.000.000. *****


***** Warning: #31 MaxNodesConsidered reached while proving:
  [athleteplayssport(Anon92005, golf), teamplaysinleague(losangeleslakers, Anon94285), athleteplaysinleague(Anon95305, Anon94285), teamplaysagainstteam(losangeleslakers, Anon103745), athleteledsportsteam(Anon92005, losangeleslakers)]. *****


***** Warning: #32 TOO MANY NODES CONSIDERED (i.e., 'expanded') for 'HornClauseProver': nodesConsidered = 1.000.000 and maxNodesToConsider = 1.000.000. *****


***** Warning: #32 MaxNodesConsidered reached while proving:
  [athleteplayssport(Anon92005, golf), teamplaysinleague(phillies, Anon94285), athleteplaysinleague(Anon95305, Anon94285), teamplaysagainstteam(phillies, Anon103745), athleteledsportsteam(Anon92005, Anon103745)]. *****


***** Warning: #33 TOO MANY NODES CONSIDERED (i.e., 'expanded') for 'HornClauseProver': nodesConsidered = 1.000.000 and maxNodesToConsider = 1.000.000. *****


***** Warning: #33 MaxNodesConsidered reached while proving:
  [athleteplayssport(Anon92005, golf), teamplaysinleague(losangeleslakers, Anon94285), athleteplaysinleague(Anon95305, Anon94285), teamplaysagainstteam(losangeleslakers, Anon103745), athleteledsportsteam(Anon92005, Anon103745)]. *****


***** Warning: #34 TOO MANY NODES CONSIDERED (i.e., 'expanded') for 'HornClauseProver': nodesConsidered = 1.000.000 and maxNodesToConsider = 1.000.000. *****


***** Warning: #34 MaxNodesConsidered reached while proving:
  [athleteplayssport(Anon92005, golf), teamplaysinleague(phillies, Anon94285), athleteplaysinleague(Anon95305, Anon94285), teamplaysagainstteam(phillies, Anon103745), athleteplaysforteam(Anon92005, phillies)]. *****


***** Warning: #35 TOO MANY NODES CONSIDERED (i.e., 'expanded') for 'HornClauseProver': nodesConsidered = 1.000.000 and maxNodesToConsider = 1.000.000. *****


***** Warning: #35 MaxNodesConsidered reached while proving:
  [athleteplayssport(Anon92005, golf), teamplaysinleague(losangeleslakers, Anon94285), athleteplaysinleague(Anon95305, Anon94285), teamplaysagainstteam(losangeleslakers, Anon103745), athleteplaysforteam(Anon92005, losangeleslakers)]. *****


***** Warning: #36 TOO MANY NODES CONSIDERED (i.e., 'expanded') for 'HornClauseProver': nodesConsidered = 1.000.000 and maxNodesToConsider = 1.000.000. *****


***** Warning: #36 MaxNodesConsidered reached while proving:
  [athleteplayssport(Anon92005, golf), teamplaysinleague(phillies, Anon94285), athleteplaysinleague(Anon95305, Anon94285), teamplaysagainstteam(phillies, Anon103745), athleteplaysforteam(Anon92005, Anon103745)]. *****


***** Warning: #37 TOO MANY NODES CONSIDERED (i.e., 'expanded') for 'HornClauseProver': nodesConsidered = 1.000.000 and maxNodesToConsider = 1.000.000. *****


***** Warning: #37 MaxNodesConsidered reached while proving:
  [athleteplayssport(Anon92005, golf), teamplaysinleague(losangeleslakers, Anon94285), athleteplaysinleague(Anon95305, Anon94285), teamplaysagainstteam(losangeleslakers, Anon103745), athleteplaysforteam(Anon92005, Anon103745)]. *****


***** Warning: #38 TOO MANY NODES CONSIDERED (i.e., 'expanded') for 'HornClauseProver': nodesConsidered = 1.000.000 and maxNodesToConsider = 1.000.000. *****


***** Warning: #38 MaxNodesConsidered reached while proving:
  [athleteplayssport(Anon92005, golf), teamplaysinleague(phillies, Anon94285), athleteplaysinleague(Anon95305, Anon94285), teamplaysagainstteam(phillies, Anon103745), athleteplaysinleague(Anon92005, Anon94285), differentlyBoundOutputVars(athleteplaysinleague(Anon92005, Anon94285), athleteplaysinleague(Anon95305, Anon94285))]. *****


***** Warning: #39 TOO MANY NODES CONSIDERED (i.e., 'expanded') for 'HornClauseProver': nodesConsidered = 1.000.000 and maxNodesToConsider = 1.000.000. *****


***** Warning: #39 MaxNodesConsidered reached while proving:
  [athleteplayssport(Anon92005, golf), teamplaysinleague(phillies, Anon94285), athleteplaysinleague(Anon95305, Anon94285), teamplaysagainstteam(phillies, Anon103745), athleteplaysinleague(Anon95305, Anon104177), newTermBoundByThisVariable(Anon104177, Anon94285)]. *****


***** Warning: #40 TOO MANY NODES CONSIDERED (i.e., 'expanded') for 'HornClauseProver': nodesConsidered = 1.000.000 and maxNodesToConsider = 1.000.000. *****


***** Warning: #40 MaxNodesConsidered reached while proving:
  [athleteplayssport(Anon92005, golf), teamplaysinleague(losangeleslakers, Anon94285), athleteplaysinleague(Anon95305, Anon94285), teamplaysagainstteam(losangeleslakers, Anon103745), athleteplaysinleague(Anon95305, Anon104177), newTermBoundByThisVariable(Anon104177, Anon94285)]. *****


***** Warning: #41 TOO MANY NODES CONSIDERED (i.e., 'expanded') for 'HornClauseProver': nodesConsidered = 1.000.000 and maxNodesToConsider = 1.000.000. *****


***** Warning: #41 MaxNodesConsidered reached while proving:
  [athleteplayssport(Anon92005, golf), teamplaysinleague(phillies, Anon94285), athleteplaysinleague(Anon95305, Anon94285), teamplaysagainstteam(phillies, Anon103745), athleteplayssport(Anon92005, Anon104181), newTermBoundByThisVariable(Anon104181, golf)]. *****


***** Warning: #42 TOO MANY NODES CONSIDERED (i.e., 'expanded') for 'HornClauseProver': nodesConsidered = 1.000.000 and maxNodesToConsider = 1.000.000. *****


***** Warning: #42 MaxNodesConsidered reached while proving:
  [athleteplayssport(Anon92005, golf), teamplaysinleague(losangeleslakers, Anon94285), athleteplaysinleague(Anon95305, Anon94285), teamplaysagainstteam(losangeleslakers, Anon103745), athleteplayssport(Anon92005, Anon104181), newTermBoundByThisVariable(Anon104181, golf)]. *****


***** Warning: #43 TOO MANY NODES CONSIDERED (i.e., 'expanded') for 'HornClauseProver': nodesConsidered = 1.000.000 and maxNodesToConsider = 1.000.000. *****


***** Warning: #43 MaxNodesConsidered reached while proving:
  [athleteplayssport(Anon92005, golf), teamplaysinleague(phillies, Anon94285), athleteplaysinleague(Anon95305, Anon94285), teamplaysagainstteam(phillies, Anon103745), teamalsoknownas(phillies, phillies)]. *****


***** Warning: #44 TOO MANY NODES CONSIDERED (i.e., 'expanded') for 'HornClauseProver': nodesConsidered = 1.000.000 and maxNodesToConsider = 1.000.000. *****


***** Warning: #44 MaxNodesConsidered reached while proving:
  [athleteplayssport(Anon92005, golf), teamplaysinleague(losangeleslakers, Anon94285), athleteplaysinleague(Anon95305, Anon94285), teamplaysagainstteam(losangeleslakers, Anon103745), teamalsoknownas(losangeleslakers, losangeleslakers)]. *****


***** Warning: #45 TOO MANY NODES CONSIDERED (i.e., 'expanded') for 'HornClauseProver': nodesConsidered = 1.000.000 and maxNodesToConsider = 1.000.000. *****


***** Warning: #45 MaxNodesConsidered reached while proving:
  [athleteplayssport(Anon92005, golf), teamplaysinleague(phillies, Anon94285), athleteplaysinleague(Anon95305, Anon94285), teamplaysagainstteam(phillies, Anon103745), teamalsoknownas(phillies, Anon103745)]. *****


***** Warning: #46 TOO MANY NODES CONSIDERED (i.e., 'expanded') for 'HornClauseProver': nodesConsidered = 1.000.000 and maxNodesToConsider = 1.000.000. *****


***** Warning: #46 MaxNodesConsidered reached while proving:
  [athleteplayssport(Anon92005, golf), teamplaysinleague(losangeleslakers, Anon94285), athleteplaysinleague(Anon95305, Anon94285), teamplaysagainstteam(losangeleslakers, Anon103745), teamalsoknownas(losangeleslakers, Anon103745)]. *****


***** Warning: #47 TOO MANY NODES CONSIDERED (i.e., 'expanded') for 'HornClauseProver': nodesConsidered = 1.000.000 and maxNodesToConsider = 1.000.000. *****


***** Warning: #47 MaxNodesConsidered reached while proving:
  [athleteplayssport(Anon92005, golf), teamplaysinleague(phillies, Anon94285), athleteplaysinleague(Anon95305, Anon94285), teamplaysagainstteam(phillies, Anon103745), teamalsoknownas(Anon103745, phillies)]. *****


***** Warning: #48 TOO MANY NODES CONSIDERED (i.e., 'expanded') for 'HornClauseProver': nodesConsidered = 1.000.000 and maxNodesToConsider = 1.000.000. *****


***** Warning: #48 MaxNodesConsidered reached while proving:
  [athleteplayssport(Anon92005, golf), teamplaysinleague(losangeleslakers, Anon94285), athleteplaysinleague(Anon95305, Anon94285), teamplaysagainstteam(losangeleslakers, Anon103745), teamalsoknownas(Anon103745, losangeleslakers)]. *****


***** Warning: #49 TOO MANY NODES CONSIDERED (i.e., 'expanded') for 'HornClauseProver': nodesConsidered = 1.000.000 and maxNodesToConsider = 1.000.000. *****


***** Warning: #49 MaxNodesConsidered reached while proving:
  [athleteplayssport(Anon92005, golf), teamplaysinleague(phillies, Anon94285), athleteplaysinleague(Anon95305, Anon94285), teamplaysagainstteam(phillies, Anon103745), teamalsoknownas(Anon103745, Anon103745)]. *****


***** Warning: #50 TOO MANY NODES CONSIDERED (i.e., 'expanded') for 'HornClauseProver': nodesConsidered = 1.000.000 and maxNodesToConsider = 1.000.000. *****


***** Warning: #50 MaxNodesConsidered reached while proving:
  [athleteplayssport(Anon92005, golf), teamplaysinleague(losangeleslakers, Anon94285), athleteplaysinleague(Anon95305, Anon94285), teamplaysagainstteam(losangeleslakers, Anon103745), teamalsoknownas(Anon103745, Anon103745)]. *****


***** Warning: #51 TOO MANY NODES CONSIDERED (i.e., 'expanded') for 'HornClauseProver': nodesConsidered = 1.000.000 and maxNodesToConsider = 1.000.000. *****


***** Warning: #51 MaxNodesConsidered reached while proving:
  [athleteplayssport(Anon92005, golf), teamplaysinleague(phillies, Anon94285), athleteplaysinleague(Anon95305, Anon94285), teamplaysagainstteam(phillies, Anon103745), teamalsoknownas(phillies, Anon104185)]. *****


***** Warning: #52 TOO MANY NODES CONSIDERED (i.e., 'expanded') for 'HornClauseProver': nodesConsidered = 1.000.000 and maxNodesToConsider = 1.000.000. *****


***** Warning: #52 MaxNodesConsidered reached while proving:
  [athleteplayssport(Anon92005, golf), teamplaysinleague(losangeleslakers, Anon94285), athleteplaysinleague(Anon95305, Anon94285), teamplaysagainstteam(losangeleslakers, Anon103745), teamalsoknownas(losangeleslakers, Anon104185)]. *****


***** Warning: #53 TOO MANY NODES CONSIDERED (i.e., 'expanded') for 'HornClauseProver': nodesConsidered = 1.000.000 and maxNodesToConsider = 1.000.000. *****


***** Warning: #53 MaxNodesConsidered reached while proving:
  [athleteplayssport(Anon92005, golf), teamplaysinleague(phillies, Anon94285), athleteplaysinleague(Anon95305, Anon94285), teamplaysagainstteam(phillies, Anon103745), teamalsoknownas(Anon104187, phillies)]. *****


***** Warning: #54 TOO MANY NODES CONSIDERED (i.e., 'expanded') for 'HornClauseProver': nodesConsidered = 1.000.000 and maxNodesToConsider = 1.000.000. *****


***** Warning: #54 MaxNodesConsidered reached while proving:
  [athleteplayssport(Anon92005, golf), teamplaysinleague(losangeleslakers, Anon94285), athleteplaysinleague(Anon95305, Anon94285), teamplaysagainstteam(losangeleslakers, Anon103745), teamalsoknownas(Anon104187, losangeleslakers)]. *****


***** Warning: #55 TOO MANY NODES CONSIDERED (i.e., 'expanded') for 'HornClauseProver': nodesConsidered = 1.000.000 and maxNodesToConsider = 1.000.000. *****


***** Warning: #55 MaxNodesConsidered reached while proving:
  [athleteplayssport(Anon92005, golf), teamplaysinleague(phillies, Anon94285), athleteplaysinleague(Anon95305, Anon94285), teamplaysagainstteam(phillies, Anon103745), teamplaysinleague(phillies, Anon104193), newTermBoundByThisVariable(Anon104193, Anon94285)]. *****


***** Warning: #56 TOO MANY NODES CONSIDERED (i.e., 'expanded') for 'HornClauseProver': nodesConsidered = 1.000.000 and maxNodesToConsider = 1.000.000. *****


***** Warning: #56 MaxNodesConsidered reached while proving:
  [athleteplayssport(Anon92005, golf), teamplaysinleague(losangeleslakers, Anon94285), athleteplaysinleague(Anon95305, Anon94285), teamplaysagainstteam(losangeleslakers, Anon103745), teamplaysinleague(losangeleslakers, Anon104193), newTermBoundByThisVariable(Anon104193, Anon94285)]. *****

%  At # nodes expanded = 2, |OPEN| = 16.  Pruned 36 variant children.  Sending 28 items to OPEN for evaluation and possible insertion.
% Have created 28 valid-on-seeds descendants and have picked up 10 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=5.2600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(D, C), teamplaysagainstteam(A, _), athleteledsportsteam(D, A).  [covers 2,0/7,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.1600000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(D, C), teamplaysagainstteam(A, E), athleteledsportsteam(D, E).  [covers 2,0/7,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.37E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(D, C), teamplaysagainstteam(A, _), athleteledsportsteam(D, _).  [covers 2,0/7,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.47E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(_, C), teamplaysagainstteam(A, _), athleteledsportsteam(_, A).  [covers 2,0/7,0 pos, 0,0/0,0 neg]
%     Score = -0,659918 (regressionFit = 0,659912, penalties=5.37E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(_, C), teamplaysagainstteam(A, D), athleteledsportsteam(_, D).  [covers 4,0/7,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.2600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(D, C), teamplaysagainstteam(A, _), athleteplaysforteam(D, A).  [covers 2,0/7,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.1600000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(D, C), teamplaysagainstteam(A, E), athleteplaysforteam(D, E).  [covers 2,0/7,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.37E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(D, C), teamplaysagainstteam(A, _), athleteplaysforteam(D, _).  [covers 2,0/7,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.47E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(_, C), teamplaysagainstteam(A, _), athleteplaysforteam(_, A).  [covers 2,0/7,0 pos, 0,0/0,0 neg]
%     Score = -0,659918 (regressionFit = 0,659912, penalties=5.37E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(_, C), teamplaysagainstteam(A, D), athleteplaysforteam(_, D).  [covers 4,0/7,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), teamplaysagainstteam(A, _), athleteplaysinleague(C, D).  [covers 2,0/7,0 pos, 0,0/0,0 neg]
%     Score = -0,659918 (regressionFit = 0,659912, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), teamplaysagainstteam(A, _), athleteplaysinleague(C, _).  [covers 4,0/7,0 pos, 0,0/0,0 neg]
%     Score = -0,659918 (regressionFit = 0,659912, penalties=5.370000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(_, C), teamplaysagainstteam(A, _), athleteplaysinleague(_, C).  [covers 4,0/7,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(D, C), teamplaysagainstteam(A, _), athleteplayssport(D, B).  [covers 2,0/7,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(D, C), teamplaysagainstteam(A, _), athleteplayssport(D, _).  [covers 2,0/7,0 pos, 0,0/0,0 neg]
%     Score = -0,659918 (regressionFit = 0,659912, penalties=5.370000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(_, C), teamplaysagainstteam(A, _), athleteplayssport(_, B).  [covers 4,0/7,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.47E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(_, C), teamplaysagainstteam(A, _), teamalsoknownas(A, _).  [covers 1,0/7,0 pos, 0,0/0,0 neg]
%     Score = -0,659918 (regressionFit = 0,659912, penalties=5.37E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(_, C), teamplaysagainstteam(A, D), teamalsoknownas(D, _).  [covers 4,0/7,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.47E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(_, C), teamplaysagainstteam(A, _), teamalsoknownas(_, A).  [covers 1,0/7,0 pos, 0,0/0,0 neg]
%     Score = -0,659918 (regressionFit = 0,659912, penalties=5.37E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(_, C), teamplaysagainstteam(A, D), teamalsoknownas(_, D).  [covers 4,0/7,0 pos, 0,0/0,0 neg]
%     Score = -0,659918 (regressionFit = 0,659912, penalties=5.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(_, C), teamplaysagainstteam(A, D), teamplaysagainstteam(D, A).  [covers 4,0/7,0 pos, 0,0/0,0 neg]
%     Score = -0,659918 (regressionFit = 0,659912, penalties=5.370000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(_, C), teamplaysagainstteam(A, _), teamplaysagainstteam(A, _).  [covers 4,0/7,0 pos, 0,0/0,0 neg]
%     Score = -0,659918 (regressionFit = 0,659912, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(_, C), teamplaysagainstteam(A, D), teamplaysagainstteam(D, _).  [covers 4,0/7,0 pos, 0,0/0,0 neg]
%     Score = -0,659918 (regressionFit = 0,659912, penalties=5.370000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(_, C), teamplaysagainstteam(A, _), teamplaysagainstteam(_, A).  [covers 4,0/7,0 pos, 0,0/0,0 neg]
%     Score = -0,659918 (regressionFit = 0,659912, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(_, C), teamplaysagainstteam(A, D), teamplaysagainstteam(_, D).  [covers 4,0/7,0 pos, 0,0/0,0 neg]
%     Score = -0,659918 (regressionFit = 0,659912, penalties=5.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(_, C), teamplaysagainstteam(A, D), teamplaysinleague(D, C).  [covers 4,0/7,0 pos, 0,0/0,0 neg]
%     Score = -0,659918 (regressionFit = 0,659912, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(_, C), teamplaysagainstteam(A, D), teamplaysinleague(D, _).  [covers 4,0/7,0 pos, 0,0/0,0 neg]
%     Score = -0,659918 (regressionFit = 0,659912, penalties=5.370000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(_, C), teamplaysagainstteam(A, _), teamplaysinleague(_, C).  [covers 4,0/7,0 pos, 0,0/0,0 neg]

% Consider expanding [#3 of outerLoop #4, bodyLen=4] 'teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(D, C), athleteledsportsteam(D, A).  [covers 2,0/7,0 pos, 0,0/0,0 neg]' score=-Infinity

% Consider expanding [#4 of outerLoop #4, bodyLen=4] 'teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(D, C), athleteledsportsteam(D, _).  [covers 2,0/7,0 pos, 0,0/0,0 neg]' score=-Infinity

% Consider expanding [#5 of outerLoop #4, bodyLen=4] 'teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(_, C), athleteledsportsteam(_, A).  [covers 2,0/7,0 pos, 0,0/0,0 neg]' score=-Infinity

% Consider expanding [#6 of outerLoop #4, bodyLen=4] 'teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(D, C), athleteplaysforteam(D, A).  [covers 2,0/7,0 pos, 0,0/0,0 neg]' score=-Infinity

% Consider expanding [#7 of outerLoop #4, bodyLen=4] 'teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(D, C), athleteplaysforteam(D, _).  [covers 2,0/7,0 pos, 0,0/0,0 neg]' score=-Infinity

% Consider expanding [#8 of outerLoop #4, bodyLen=4] 'teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(_, C), athleteplaysforteam(_, A).  [covers 2,0/7,0 pos, 0,0/0,0 neg]' score=-Infinity

% Consider expanding [#9 of outerLoop #4, bodyLen=4] 'teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteplaysinleague(C, D).  [covers 2,0/7,0 pos, 0,0/0,0 neg]' score=-Infinity

***** Warning: #20 TOO MANY NODES CONSIDERED (i.e., 'expanded') for 'LearnOneClause': nodesConsidered = 10 and maxNodesToConsider = 10. *****


% The best node found: teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(_, C), teamplaysagainstteam(A, _).  [covers 4,0/7,0 pos, 0,0/0,0 neg]

% The best node found: teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(_, C), teamplaysagainstteam(A, _).  [covers 4,0/7,0 pos, 0,0/0,0 neg]

% Expanding node at Level 3 with score = -0,136.
% Will extend: teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(_, C), teamplaysagainstteam(A, _).  [covers 4,0/7,0 pos, 0,0/0,0 neg]
% Path: 3;true,true,false
Comparing variance: 0.16433971684571652 to score=0.0025 #egs=4.0
Comparing variance: 8.511877788815644E-4 to score=0.0025 #egs=3.0
%   Creating a TRUE-branch and FALSE-branch leaves because level = 3 >= 3

% Time for loop #4: 16,934 seconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #4, the best clause found is:
%      teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(_, C), teamplaysagainstteam(A, _).  [covers 4,0/7,0 pos, 0,0/0,0 neg]
% This clause covers 4 positive examples, of which 4 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _).  [covers 224,0/224,0 pos, 0,0/0,0 neg]'
%     Score = -3,001481 (regressionFit = 3,001477, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _).  [covers 224,0/224,0 pos, 0,0/0,0 neg]

% Have these 7 positive seeds: 29 108 118 124 127 204 206
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Consider expanding [#1 of outerLoop #5, bodyLen=4] 'teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _).  [covers 224,0/224,0 pos, 0,0/0,0 neg]' score=-3.0014814543214667
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 36 variant children.  Sending 33 items to OPEN for evaluation and possible insertion.
% Have created 33 valid-on-seeds descendants and have picked up 12 bad extensions.
%     Score = -2,041208 (regressionFit = 2,041203, penalties=5.060000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteledsportsteam(C, _), athleteledsportsteam(E, A).  [covers 88,0/224,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -2,041208): teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteledsportsteam(C, _), athleteledsportsteam(E, A).  [covers 88,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,044796 (regressionFit = 2,044792, penalties=4.960000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteledsportsteam(C, F), athleteledsportsteam(E, F).  [covers 187,0/224,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _), athleteledsportsteam(C, _).  [covers 224,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,044797 (regressionFit = 2,044792, penalties=5.1700000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteledsportsteam(C, _), athleteledsportsteam(E, _).  [covers 187,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,038956 (regressionFit = 2,038951, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _), athleteledsportsteam(_, A).  [covers 101,0/224,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -2,038956): teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _), athleteledsportsteam(_, A).  [covers 101,0/224,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.1700000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, E), athleteledsportsteam(_, E).  [covers 224,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,042490 (regressionFit = 2,042484, penalties=5.2600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _), athleteplaysforteam(C, A).  [covers 67,0/224,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.1600000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, E), athleteplaysforteam(C, E).  [covers 224,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,035796 (regressionFit = 2,035790, penalties=5.1600000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteledsportsteam(C, _), athleteplaysforteam(E, A).  [covers 106,0/224,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -2,035796): teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteledsportsteam(C, _), athleteplaysforteam(E, A).  [covers 106,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,044797 (regressionFit = 2,044792, penalties=5.060000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteledsportsteam(C, F), athleteplaysforteam(E, F).  [covers 187,0/224,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.37E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _), athleteplaysforteam(C, _).  [covers 224,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,044797 (regressionFit = 2,044792, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteledsportsteam(C, _), athleteplaysforteam(E, _).  [covers 187,0/224,0 pos, 0,0/0,0 neg]
%     Score = -1,992494 (regressionFit = 1,992489, penalties=5.37E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _), athleteplaysforteam(_, A).  [covers 156,0/224,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -1,992494): teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _), athleteplaysforteam(_, A).  [covers 156,0/224,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, E), athleteplaysforteam(_, E).  [covers 224,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,045811 (regressionFit = 2,045806, penalties=5.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _), athleteplaysinleague(C, D).  [covers 178,0/224,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _), athleteplaysinleague(C, _).  [covers 224,0/224,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _), athleteplaysinleague(_, D).  [covers 224,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,045648 (regressionFit = 2,045643, penalties=5.060000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteledsportsteam(C, _), athleteplayssport(E, B).  [covers 179,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,044037 (regressionFit = 2,044031, penalties=5.1700000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteledsportsteam(C, _), athleteplayssport(E, _).  [covers 189,0/224,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _), athleteplayssport(_, B).  [covers 224,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,045940 (regressionFit = 2,045935, penalties=5.1600000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, E), teamalsoknownas(A, E).  [covers 11,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,037260 (regressionFit = 2,037255, penalties=5.37E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _), teamalsoknownas(A, _).  [covers 39,0/224,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, E), teamalsoknownas(E, _).  [covers 224,0/224,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, E), teamalsoknownas(_, E).  [covers 224,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,045161 (regressionFit = 2,045156, penalties=5.1600000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, E), teamplaysagainstteam(A, E).  [covers 148,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,045666 (regressionFit = 2,045661, penalties=5.1600000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, E), teamplaysagainstteam(E, A).  [covers 154,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,030363 (regressionFit = 2,030357, penalties=5.37E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _), teamplaysagainstteam(A, _).  [covers 185,0/224,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, E), teamplaysagainstteam(E, _).  [covers 224,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,026716 (regressionFit = 2,026710, penalties=5.37E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _), teamplaysagainstteam(_, A).  [covers 190,0/224,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, E), teamplaysagainstteam(_, E).  [covers 224,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,036747 (regressionFit = 2,036742, penalties=5.060000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, E), teamplaysinleague(E, D).  [covers 197,0/224,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.1700000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, E), teamplaysinleague(E, _).  [covers 224,0/224,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _), teamplaysinleague(_, D).  [covers 224,0/224,0 pos, 0,0/0,0 neg]

% Consider expanding [#2 of outerLoop #5, bodyLen=5] 'teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _), athleteplaysforteam(_, A).  [covers 156,0/224,0 pos, 0,0/0,0 neg]' score=-1.9924941919896442
%  At # nodes expanded = 2, |OPEN| = 32.  Pruned 46 variant children.  Sending 39 items to OPEN for evaluation and possible insertion.
% Have created 39 valid-on-seeds descendants and have picked up 8 bad extensions.
%     Score = -2,041132 (regressionFit = 2,041126, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteledsportsteam(C, _), athleteplaysforteam(_, A), athleteledsportsteam(E, A).  [covers 79,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,026706 (regressionFit = 2,026700, penalties=6.070000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteledsportsteam(C, F), athleteplaysforteam(_, A), athleteledsportsteam(E, F).  [covers 142,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,039751 (regressionFit = 2,039745, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _), athleteplaysforteam(E, A), athleteledsportsteam(E, A).  [covers 79,0/224,0 pos, 0,0/0,0 neg]
%     Score = -1,992495 (regressionFit = 1,992489, penalties=6.3800000000000024E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _), athleteplaysforteam(_, A), athleteledsportsteam(C, _).  [covers 156,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,026706 (regressionFit = 2,026700, penalties=6.2800000000000026E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteledsportsteam(C, _), athleteplaysforteam(_, A), athleteledsportsteam(E, _).  [covers 142,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,036901 (regressionFit = 2,036895, penalties=6.2800000000000026E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _), athleteplaysforteam(E, A), athleteledsportsteam(E, _).  [covers 94,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,038896 (regressionFit = 2,038889, penalties=6.3800000000000024E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _), athleteplaysforteam(_, A), athleteledsportsteam(_, A).  [covers 90,0/224,0 pos, 0,0/0,0 neg]
%     Score = -1,992495 (regressionFit = 1,992489, penalties=6.2800000000000026E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, E), athleteplaysforteam(_, A), athleteledsportsteam(_, E).  [covers 156,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,042491 (regressionFit = 2,042484, penalties=6.270000000000003E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _), athleteplaysforteam(_, A), athleteplaysforteam(C, A).  [covers 67,0/224,0 pos, 0,0/0,0 neg]
%     Score = -1,992495 (regressionFit = 1,992489, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, E), athleteplaysforteam(_, A), athleteplaysforteam(C, E).  [covers 156,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,035797 (regressionFit = 2,035790, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteledsportsteam(C, _), athleteplaysforteam(_, A), athleteplaysforteam(E, A).  [covers 106,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,026706 (regressionFit = 2,026700, penalties=6.070000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteledsportsteam(C, F), athleteplaysforteam(_, A), athleteplaysforteam(E, F).  [covers 142,0/224,0 pos, 0,0/0,0 neg]
%     Score = -1,992495 (regressionFit = 1,992489, penalties=6.3800000000000024E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _), athleteplaysforteam(_, A), athleteplaysforteam(C, _).  [covers 156,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,026706 (regressionFit = 2,026700, penalties=6.2800000000000026E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteledsportsteam(C, _), athleteplaysforteam(_, A), athleteplaysforteam(E, _).  [covers 142,0/224,0 pos, 0,0/0,0 neg]
%     Score = -1,992495 (regressionFit = 1,992489, penalties=6.3800000000000024E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _), athleteplaysforteam(_, A), athleteplaysforteam(_, A).  [covers 156,0/224,0 pos, 0,0/0,0 neg]
%     Score = -1,992495 (regressionFit = 1,992489, penalties=6.2800000000000026E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, E), athleteplaysforteam(_, A), athleteplaysforteam(_, E).  [covers 156,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,030642 (regressionFit = 2,030636, penalties=6.270000000000003E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _), athleteplaysforteam(_, A), athleteplaysinleague(C, D).  [covers 134,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,035797 (regressionFit = 2,035790, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _), athleteplaysforteam(E, A), athleteplaysinleague(E, D).  [covers 106,0/224,0 pos, 0,0/0,0 neg]
%     Score = -1,992495 (regressionFit = 1,992489, penalties=6.3800000000000024E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _), athleteplaysforteam(_, A), athleteplaysinleague(C, _).  [covers 156,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,032392 (regressionFit = 2,032386, penalties=6.2800000000000026E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _), athleteplaysforteam(E, A), athleteplaysinleague(E, _).  [covers 116,0/224,0 pos, 0,0/0,0 neg]
%     Score = -1,992495 (regressionFit = 1,992489, penalties=6.3800000000000024E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _), athleteplaysforteam(_, A), athleteplaysinleague(_, D).  [covers 156,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,030642 (regressionFit = 2,030636, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteledsportsteam(C, _), athleteplaysforteam(_, A), athleteplayssport(E, B).  [covers 134,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,039801 (regressionFit = 2,039795, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _), athleteplaysforteam(E, A), athleteplayssport(E, B).  [covers 89,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,025717 (regressionFit = 2,025711, penalties=6.2800000000000026E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteledsportsteam(C, _), athleteplaysforteam(_, A), athleteplayssport(E, _).  [covers 143,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,033531 (regressionFit = 2,033525, penalties=6.2800000000000026E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _), athleteplaysforteam(E, A), athleteplayssport(E, _).  [covers 112,0/224,0 pos, 0,0/0,0 neg]
%     Score = -1,992495 (regressionFit = 1,992489, penalties=6.3800000000000024E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _), athleteplaysforteam(_, A), athleteplayssport(_, B).  [covers 156,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,045941 (regressionFit = 2,045935, penalties=6.270000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, E), athleteplaysforteam(_, A), teamalsoknownas(A, E).  [covers 11,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,036374 (regressionFit = 2,036368, penalties=6.480000000000002E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _), athleteplaysforteam(_, A), teamalsoknownas(A, _).  [covers 28,0/224,0 pos, 0,0/0,0 neg]
%     Score = -1,992495 (regressionFit = 1,992489, penalties=6.3800000000000024E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, E), athleteplaysforteam(_, A), teamalsoknownas(E, _).  [covers 156,0/224,0 pos, 0,0/0,0 neg]
%     Score = -1,992495 (regressionFit = 1,992489, penalties=6.3800000000000024E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, E), athleteplaysforteam(_, A), teamalsoknownas(_, E).  [covers 156,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,035194 (regressionFit = 2,035188, penalties=6.270000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, E), athleteplaysforteam(_, A), teamplaysagainstteam(A, E).  [covers 124,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,034146 (regressionFit = 2,034140, penalties=6.270000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, E), athleteplaysforteam(_, A), teamplaysagainstteam(E, A).  [covers 127,0/224,0 pos, 0,0/0,0 neg]
%     Score = -1,998343 (regressionFit = 1,998336, penalties=6.480000000000002E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _), athleteplaysforteam(_, A), teamplaysagainstteam(A, _).  [covers 149,0/224,0 pos, 0,0/0,0 neg]
%     Score = -1,992495 (regressionFit = 1,992489, penalties=6.3800000000000024E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, E), athleteplaysforteam(_, A), teamplaysagainstteam(E, _).  [covers 156,0/224,0 pos, 0,0/0,0 neg]
%     Score = -1,994055 (regressionFit = 1,994049, penalties=6.480000000000002E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _), athleteplaysforteam(_, A), teamplaysagainstteam(_, A).  [covers 154,0/224,0 pos, 0,0/0,0 neg]
%     Score = -1,992495 (regressionFit = 1,992489, penalties=6.3800000000000024E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, E), athleteplaysforteam(_, A), teamplaysagainstteam(_, E).  [covers 156,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,013492 (regressionFit = 2,013486, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, E), athleteplaysforteam(_, A), teamplaysinleague(E, D).  [covers 146,0/224,0 pos, 0,0/0,0 neg]
%     Score = -1,992495 (regressionFit = 1,992489, penalties=6.2800000000000026E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, E), athleteplaysforteam(_, A), teamplaysinleague(E, _).  [covers 156,0/224,0 pos, 0,0/0,0 neg]
%     Score = -1,992495 (regressionFit = 1,992489, penalties=6.3800000000000024E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _), athleteplaysforteam(_, A), teamplaysinleague(_, D).  [covers 156,0/224,0 pos, 0,0/0,0 neg]

% Consider expanding [#3 of outerLoop #5, bodyLen=5] 'teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _), teamplaysagainstteam(_, A).  [covers 190,0/224,0 pos, 0,0/0,0 neg]' score=-2.026715669299532
%  At # nodes expanded = 3, |OPEN| = 31.  Pruned 64 variant children.  Sending 49 items to OPEN for evaluation and possible insertion.
% Have created 49 valid-on-seeds descendants and have picked up 11 bad extensions.
%     Score = -2,041371 (regressionFit = 2,041365, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteledsportsteam(C, _), teamplaysagainstteam(_, A), athleteledsportsteam(E, A).  [covers 87,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,046079 (regressionFit = 2,046073, penalties=6.070000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteledsportsteam(C, F), teamplaysagainstteam(_, A), athleteledsportsteam(E, F).  [covers 169,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,045460 (regressionFit = 2,045454, penalties=6.070000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteledsportsteam(C, _), teamplaysagainstteam(F, A), athleteledsportsteam(E, F).  [covers 153,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,026717 (regressionFit = 2,026710, penalties=6.3800000000000024E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _), teamplaysagainstteam(_, A), athleteledsportsteam(C, _).  [covers 190,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,046079 (regressionFit = 2,046073, penalties=6.2800000000000026E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteledsportsteam(C, _), teamplaysagainstteam(_, A), athleteledsportsteam(E, _).  [covers 169,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,039159 (regressionFit = 2,039153, penalties=6.3800000000000024E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _), teamplaysagainstteam(_, A), athleteledsportsteam(_, A).  [covers 100,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,026717 (regressionFit = 2,026710, penalties=6.2800000000000026E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, E), teamplaysagainstteam(_, A), athleteledsportsteam(_, E).  [covers 190,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,044777 (regressionFit = 2,044771, penalties=6.2800000000000026E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _), teamplaysagainstteam(E, A), athleteledsportsteam(_, E).  [covers 172,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,042491 (regressionFit = 2,042484, penalties=6.370000000000002E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _), teamplaysagainstteam(_, A), athleteplaysforteam(C, A).  [covers 67,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,026717 (regressionFit = 2,026710, penalties=6.270000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, E), teamplaysagainstteam(_, A), athleteplaysforteam(C, E).  [covers 190,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,045463 (regressionFit = 2,045456, penalties=6.270000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _), teamplaysagainstteam(E, A), athleteplaysforteam(C, E).  [covers 158,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,035797 (regressionFit = 2,035790, penalties=6.270000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteledsportsteam(C, _), teamplaysagainstteam(_, A), athleteplaysforteam(E, A).  [covers 106,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,046079 (regressionFit = 2,046073, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteledsportsteam(C, F), teamplaysagainstteam(_, A), athleteplaysforteam(E, F).  [covers 169,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,045743 (regressionFit = 2,045737, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteledsportsteam(C, _), teamplaysagainstteam(F, A), athleteplaysforteam(E, F).  [covers 159,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,026717 (regressionFit = 2,026710, penalties=6.480000000000002E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _), teamplaysagainstteam(_, A), athleteplaysforteam(C, _).  [covers 190,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,046079 (regressionFit = 2,046073, penalties=6.3800000000000024E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteledsportsteam(C, _), teamplaysagainstteam(_, A), athleteplaysforteam(E, _).  [covers 169,0/224,0 pos, 0,0/0,0 neg]
%     Score = -1,994055 (regressionFit = 1,994049, penalties=6.480000000000002E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _), teamplaysagainstteam(_, A), athleteplaysforteam(_, A).  [covers 154,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,026717 (regressionFit = 2,026710, penalties=6.3800000000000024E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, E), teamplaysagainstteam(_, A), athleteplaysforteam(_, E).  [covers 190,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,030982 (regressionFit = 2,030976, penalties=6.3800000000000024E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _), teamplaysagainstteam(E, A), athleteplaysforteam(_, E).  [covers 187,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,046148 (regressionFit = 2,046141, penalties=6.270000000000003E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _), teamplaysagainstteam(_, A), athleteplaysinleague(C, D).  [covers 161,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,026717 (regressionFit = 2,026710, penalties=6.3800000000000024E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _), teamplaysagainstteam(_, A), athleteplaysinleague(C, _).  [covers 190,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,026717 (regressionFit = 2,026710, penalties=6.3800000000000024E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _), teamplaysagainstteam(_, A), athleteplaysinleague(_, D).  [covers 190,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,046167 (regressionFit = 2,046161, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteledsportsteam(C, _), teamplaysagainstteam(_, A), athleteplayssport(E, B).  [covers 162,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,045891 (regressionFit = 2,045885, penalties=6.2800000000000026E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteledsportsteam(C, _), teamplaysagainstteam(_, A), athleteplayssport(E, _).  [covers 171,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,026717 (regressionFit = 2,026710, penalties=6.3800000000000024E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _), teamplaysagainstteam(_, A), athleteplayssport(_, B).  [covers 190,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,045941 (regressionFit = 2,045935, penalties=6.270000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, E), teamplaysagainstteam(_, A), teamalsoknownas(A, E).  [covers 11,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,045785 (regressionFit = 2,045779, penalties=6.270000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _), teamplaysagainstteam(E, A), teamalsoknownas(A, E).  [covers 14,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,036633 (regressionFit = 2,036627, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, E), teamplaysagainstteam(F, A), teamalsoknownas(E, F).  [covers 126,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,036039 (regressionFit = 2,036033, penalties=6.480000000000002E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _), teamplaysagainstteam(_, A), teamalsoknownas(A, _).  [covers 33,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,026717 (regressionFit = 2,026710, penalties=6.3800000000000024E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, E), teamplaysagainstteam(_, A), teamalsoknownas(E, _).  [covers 190,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,044030 (regressionFit = 2,044023, penalties=6.3800000000000024E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _), teamplaysagainstteam(E, A), teamalsoknownas(E, _).  [covers 144,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,026717 (regressionFit = 2,026710, penalties=6.3800000000000024E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, E), teamplaysagainstteam(_, A), teamalsoknownas(_, E).  [covers 190,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,046006 (regressionFit = 2,046000, penalties=6.3800000000000024E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _), teamplaysagainstteam(E, A), teamalsoknownas(_, E).  [covers 143,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,045158 (regressionFit = 2,045152, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, E), teamplaysagainstteam(_, A), teamplaysagainstteam(A, E).  [covers 147,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,037782 (regressionFit = 2,037776, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _), teamplaysagainstteam(E, A), teamplaysagainstteam(A, E).  [covers 176,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,045667 (regressionFit = 2,045661, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, E), teamplaysagainstteam(_, A), teamplaysagainstteam(E, A).  [covers 154,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,044896 (regressionFit = 2,044890, penalties=6.070000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, E), teamplaysagainstteam(F, A), teamplaysagainstteam(E, F).  [covers 174,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,044896 (regressionFit = 2,044890, penalties=6.070000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, E), teamplaysagainstteam(F, A), teamplaysagainstteam(F, E).  [covers 174,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,032294 (regressionFit = 2,032287, penalties=6.3800000000000024E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _), teamplaysagainstteam(_, A), teamplaysagainstteam(A, _).  [covers 180,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,026717 (regressionFit = 2,026710, penalties=6.2800000000000026E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, E), teamplaysagainstteam(_, A), teamplaysagainstteam(E, _).  [covers 190,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,026717 (regressionFit = 2,026710, penalties=6.2800000000000026E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _), teamplaysagainstteam(E, A), teamplaysagainstteam(E, _).  [covers 190,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,026717 (regressionFit = 2,026710, penalties=6.3800000000000024E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _), teamplaysagainstteam(_, A), teamplaysagainstteam(_, A).  [covers 190,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,026717 (regressionFit = 2,026710, penalties=6.2800000000000026E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, E), teamplaysagainstteam(_, A), teamplaysagainstteam(_, E).  [covers 190,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,026717 (regressionFit = 2,026710, penalties=6.2800000000000026E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _), teamplaysagainstteam(E, A), teamplaysagainstteam(_, E).  [covers 190,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,042953 (regressionFit = 2,042946, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, E), teamplaysagainstteam(_, A), teamplaysinleague(E, D).  [covers 174,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,037300 (regressionFit = 2,037294, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _), teamplaysagainstteam(E, A), teamplaysinleague(E, D).  [covers 183,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,026717 (regressionFit = 2,026710, penalties=6.2800000000000026E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, E), teamplaysagainstteam(_, A), teamplaysinleague(E, _).  [covers 190,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,026717 (regressionFit = 2,026710, penalties=6.2800000000000026E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _), teamplaysagainstteam(E, A), teamplaysinleague(E, _).  [covers 190,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,026717 (regressionFit = 2,026710, penalties=6.3800000000000024E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _), teamplaysagainstteam(_, A), teamplaysinleague(_, D).  [covers 190,0/224,0 pos, 0,0/0,0 neg]

% Consider expanding [#4 of outerLoop #5, bodyLen=5] 'teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _), teamplaysagainstteam(A, _).  [covers 185,0/224,0 pos, 0,0/0,0 neg]' score=-2.030362708282085
%  At # nodes expanded = 4, |OPEN| = 30.  Pruned 64 variant children.  Sending 50 items to OPEN for evaluation and possible insertion.
% Have created 50 valid-on-seeds descendants and have picked up 10 bad extensions.
%     Score = -2,041371 (regressionFit = 2,041365, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteledsportsteam(C, _), teamplaysagainstteam(A, _), athleteledsportsteam(E, A).  [covers 87,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,046164 (regressionFit = 2,046158, penalties=6.070000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteledsportsteam(C, F), teamplaysagainstteam(A, _), athleteledsportsteam(E, F).  [covers 166,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,044869 (regressionFit = 2,044863, penalties=6.070000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteledsportsteam(C, _), teamplaysagainstteam(A, F), athleteledsportsteam(E, F).  [covers 147,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,030364 (regressionFit = 2,030357, penalties=6.3800000000000024E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _), teamplaysagainstteam(A, _), athleteledsportsteam(C, _).  [covers 185,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,046164 (regressionFit = 2,046158, penalties=6.2800000000000026E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteledsportsteam(C, _), teamplaysagainstteam(A, _), athleteledsportsteam(E, _).  [covers 166,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,039496 (regressionFit = 2,039489, penalties=6.3800000000000024E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _), teamplaysagainstteam(A, _), athleteledsportsteam(_, A).  [covers 99,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,030364 (regressionFit = 2,030357, penalties=6.2800000000000026E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, E), teamplaysagainstteam(A, _), athleteledsportsteam(_, E).  [covers 185,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,045445 (regressionFit = 2,045439, penalties=6.2800000000000026E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _), teamplaysagainstteam(A, E), athleteledsportsteam(_, E).  [covers 164,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,042491 (regressionFit = 2,042484, penalties=6.370000000000002E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _), teamplaysagainstteam(A, _), athleteplaysforteam(C, A).  [covers 67,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,030364 (regressionFit = 2,030357, penalties=6.270000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, E), teamplaysagainstteam(A, _), athleteplaysforteam(C, E).  [covers 185,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,045110 (regressionFit = 2,045104, penalties=6.270000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _), teamplaysagainstteam(A, E), athleteplaysforteam(C, E).  [covers 155,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,036211 (regressionFit = 2,036205, penalties=6.270000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteledsportsteam(C, _), teamplaysagainstteam(A, _), athleteplaysforteam(E, A).  [covers 105,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,046164 (regressionFit = 2,046158, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteledsportsteam(C, F), teamplaysagainstteam(A, _), athleteplaysforteam(E, F).  [covers 166,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,045715 (regressionFit = 2,045708, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteledsportsteam(C, _), teamplaysagainstteam(A, F), athleteplaysforteam(E, F).  [covers 158,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,030364 (regressionFit = 2,030357, penalties=6.480000000000002E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _), teamplaysagainstteam(A, _), athleteplaysforteam(C, _).  [covers 185,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,046164 (regressionFit = 2,046158, penalties=6.3800000000000024E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteledsportsteam(C, _), teamplaysagainstteam(A, _), athleteplaysforteam(E, _).  [covers 166,0/224,0 pos, 0,0/0,0 neg]
%     Score = -1,998343 (regressionFit = 1,998336, penalties=6.480000000000002E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _), teamplaysagainstteam(A, _), athleteplaysforteam(_, A).  [covers 149,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,030364 (regressionFit = 2,030357, penalties=6.3800000000000024E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, E), teamplaysagainstteam(A, _), athleteplaysforteam(_, E).  [covers 185,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,033722 (regressionFit = 2,033715, penalties=6.3800000000000024E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _), teamplaysagainstteam(A, E), athleteplaysforteam(_, E).  [covers 181,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,046039 (regressionFit = 2,046033, penalties=6.270000000000003E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _), teamplaysagainstteam(A, _), athleteplaysinleague(C, D).  [covers 157,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,030364 (regressionFit = 2,030357, penalties=6.3800000000000024E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _), teamplaysagainstteam(A, _), athleteplaysinleague(C, _).  [covers 185,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,030364 (regressionFit = 2,030357, penalties=6.3800000000000024E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _), teamplaysagainstteam(A, _), athleteplaysinleague(_, D).  [covers 185,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,046102 (regressionFit = 2,046096, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteledsportsteam(C, _), teamplaysagainstteam(A, _), athleteplayssport(E, B).  [covers 158,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,046086 (regressionFit = 2,046080, penalties=6.2800000000000026E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteledsportsteam(C, _), teamplaysagainstteam(A, _), athleteplayssport(E, _).  [covers 168,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,030364 (regressionFit = 2,030357, penalties=6.3800000000000024E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _), teamplaysagainstteam(A, _), athleteplayssport(_, B).  [covers 185,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,045941 (regressionFit = 2,045935, penalties=6.270000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, E), teamplaysagainstteam(A, _), teamalsoknownas(A, E).  [covers 11,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,045785 (regressionFit = 2,045779, penalties=6.270000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _), teamplaysagainstteam(A, E), teamalsoknownas(A, E).  [covers 14,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,036974 (regressionFit = 2,036968, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, E), teamplaysagainstteam(A, F), teamalsoknownas(E, F).  [covers 129,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,041938 (regressionFit = 2,041931, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, E), teamplaysagainstteam(A, F), teamalsoknownas(F, E).  [covers 91,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,035112 (regressionFit = 2,035105, penalties=6.480000000000002E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _), teamplaysagainstteam(A, _), teamalsoknownas(A, _).  [covers 30,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,030364 (regressionFit = 2,030357, penalties=6.3800000000000024E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, E), teamplaysagainstteam(A, _), teamalsoknownas(E, _).  [covers 185,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,045341 (regressionFit = 2,045335, penalties=6.3800000000000024E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _), teamplaysagainstteam(A, E), teamalsoknownas(E, _).  [covers 139,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,030364 (regressionFit = 2,030357, penalties=6.3800000000000024E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, E), teamplaysagainstteam(A, _), teamalsoknownas(_, E).  [covers 185,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,045537 (regressionFit = 2,045531, penalties=6.3800000000000024E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _), teamplaysagainstteam(A, E), teamalsoknownas(_, E).  [covers 147,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,045162 (regressionFit = 2,045156, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, E), teamplaysagainstteam(A, _), teamplaysagainstteam(A, E).  [covers 148,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,045414 (regressionFit = 2,045408, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, E), teamplaysagainstteam(A, _), teamplaysagainstteam(E, A).  [covers 149,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,044177 (regressionFit = 2,044171, penalties=6.070000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, E), teamplaysagainstteam(A, F), teamplaysagainstteam(E, F).  [covers 172,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,037782 (regressionFit = 2,037776, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _), teamplaysagainstteam(A, E), teamplaysagainstteam(E, A).  [covers 176,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,044177 (regressionFit = 2,044171, penalties=6.070000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, E), teamplaysagainstteam(A, F), teamplaysagainstteam(F, E).  [covers 172,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,030364 (regressionFit = 2,030357, penalties=6.3800000000000024E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _), teamplaysagainstteam(A, _), teamplaysagainstteam(A, _).  [covers 185,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,030364 (regressionFit = 2,030357, penalties=6.2800000000000026E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, E), teamplaysagainstteam(A, _), teamplaysagainstteam(E, _).  [covers 185,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,030680 (regressionFit = 2,030674, penalties=6.2800000000000026E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _), teamplaysagainstteam(A, E), teamplaysagainstteam(E, _).  [covers 184,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,032294 (regressionFit = 2,032287, penalties=6.3800000000000024E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _), teamplaysagainstteam(A, _), teamplaysagainstteam(_, A).  [covers 180,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,030364 (regressionFit = 2,030357, penalties=6.2800000000000026E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, E), teamplaysagainstteam(A, _), teamplaysagainstteam(_, E).  [covers 185,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,030364 (regressionFit = 2,030357, penalties=6.2800000000000026E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _), teamplaysagainstteam(A, E), teamplaysagainstteam(_, E).  [covers 185,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,043881 (regressionFit = 2,043875, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, E), teamplaysagainstteam(A, _), teamplaysinleague(E, D).  [covers 170,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,036280 (regressionFit = 2,036274, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _), teamplaysagainstteam(A, E), teamplaysinleague(E, D).  [covers 179,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,030364 (regressionFit = 2,030357, penalties=6.2800000000000026E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, E), teamplaysagainstteam(A, _), teamplaysinleague(E, _).  [covers 185,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,030364 (regressionFit = 2,030357, penalties=6.2800000000000026E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _), teamplaysagainstteam(A, E), teamplaysinleague(E, _).  [covers 185,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,030364 (regressionFit = 2,030357, penalties=6.3800000000000024E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _), teamplaysagainstteam(A, _), teamplaysinleague(_, D).  [covers 185,0/224,0 pos, 0,0/0,0 neg]

% Consider expanding [#5 of outerLoop #5, bodyLen=5] 'teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteledsportsteam(C, _), athleteplaysforteam(E, A).  [covers 106,0/224,0 pos, 0,0/0,0 neg]' score=-2.0357956258910685
%  At # nodes expanded = 5, |OPEN| = 29.  Pruned 34 variant children.  Sending 29 items to OPEN for evaluation and possible insertion.
% Have created 29 valid-on-seeds descendants and have picked up 8 bad extensions.
%     Score = -2,042013 (regressionFit = 2,042006, penalties=6.060000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteledsportsteam(C, _), athleteplaysforteam(E, A), athleteledsportsteam(E, A).  [covers 66,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,035797 (regressionFit = 2,035790, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteledsportsteam(C, _), athleteplaysforteam(E, A), athleteledsportsteam(C, _).  [covers 106,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,039853 (regressionFit = 2,039847, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteledsportsteam(C, _), athleteplaysforteam(E, A), athleteledsportsteam(E, _).  [covers 79,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,040289 (regressionFit = 2,040282, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteledsportsteam(C, _), athleteplaysforteam(E, A), athleteledsportsteam(_, A).  [covers 83,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,035797 (regressionFit = 2,035790, penalties=6.070000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteledsportsteam(C, F), athleteplaysforteam(E, A), athleteledsportsteam(_, F).  [covers 106,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,042453 (regressionFit = 2,042447, penalties=6.060000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteledsportsteam(C, _), athleteplaysforteam(E, A), athleteplaysforteam(C, A).  [covers 66,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,035796 (regressionFit = 2,035790, penalties=5.960000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteledsportsteam(C, F), athleteplaysforteam(E, A), athleteplaysforteam(C, F).  [covers 106,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,035797 (regressionFit = 2,035790, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteledsportsteam(C, _), athleteplaysforteam(E, A), athleteplaysforteam(C, _).  [covers 106,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,035797 (regressionFit = 2,035790, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteledsportsteam(C, _), athleteplaysforteam(E, A), athleteplaysforteam(_, A).  [covers 106,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,035797 (regressionFit = 2,035790, penalties=6.070000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteledsportsteam(C, F), athleteplaysforteam(E, A), athleteplaysforteam(_, F).  [covers 106,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,038037 (regressionFit = 2,038031, penalties=6.060000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteledsportsteam(C, _), athleteplaysforteam(E, A), athleteplaysinleague(C, D).  [covers 98,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,035797 (regressionFit = 2,035790, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteledsportsteam(C, _), athleteplaysforteam(E, A), athleteplaysinleague(C, _).  [covers 106,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,035797 (regressionFit = 2,035790, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteledsportsteam(C, _), athleteplaysforteam(E, A), athleteplaysinleague(_, D).  [covers 106,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,040038 (regressionFit = 2,040032, penalties=6.060000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteledsportsteam(C, _), athleteplaysforteam(E, A), athleteplayssport(E, B).  [covers 86,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,037061 (regressionFit = 2,037055, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteledsportsteam(C, _), athleteplaysforteam(E, A), athleteplayssport(E, _).  [covers 99,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,035797 (regressionFit = 2,035790, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteledsportsteam(C, _), athleteplaysforteam(E, A), athleteplayssport(_, B).  [covers 106,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,045941 (regressionFit = 2,045935, penalties=6.060000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteledsportsteam(C, F), athleteplaysforteam(E, A), teamalsoknownas(A, F).  [covers 11,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,045635 (regressionFit = 2,045629, penalties=6.270000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteledsportsteam(C, _), athleteplaysforteam(E, A), teamalsoknownas(A, _).  [covers 18,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,035797 (regressionFit = 2,035790, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteledsportsteam(C, F), athleteplaysforteam(E, A), teamalsoknownas(F, _).  [covers 106,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,035797 (regressionFit = 2,035790, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteledsportsteam(C, F), athleteplaysforteam(E, A), teamalsoknownas(_, F).  [covers 106,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,037963 (regressionFit = 2,037957, penalties=6.060000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteledsportsteam(C, F), athleteplaysforteam(E, A), teamplaysagainstteam(A, F).  [covers 102,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,037758 (regressionFit = 2,037752, penalties=6.060000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteledsportsteam(C, F), athleteplaysforteam(E, A), teamplaysagainstteam(F, A).  [covers 102,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,036211 (regressionFit = 2,036205, penalties=6.270000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteledsportsteam(C, _), athleteplaysforteam(E, A), teamplaysagainstteam(A, _).  [covers 105,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,035797 (regressionFit = 2,035790, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteledsportsteam(C, F), athleteplaysforteam(E, A), teamplaysagainstteam(F, _).  [covers 106,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,035797 (regressionFit = 2,035790, penalties=6.270000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteledsportsteam(C, _), athleteplaysforteam(E, A), teamplaysagainstteam(_, A).  [covers 106,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,035797 (regressionFit = 2,035790, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteledsportsteam(C, F), athleteplaysforteam(E, A), teamplaysagainstteam(_, F).  [covers 106,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,035796 (regressionFit = 2,035790, penalties=5.960000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteledsportsteam(C, F), athleteplaysforteam(E, A), teamplaysinleague(F, D).  [covers 106,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,035797 (regressionFit = 2,035790, penalties=6.070000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteledsportsteam(C, F), athleteplaysforteam(E, A), teamplaysinleague(F, _).  [covers 106,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,035797 (regressionFit = 2,035790, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteledsportsteam(C, _), athleteplaysforteam(E, A), teamplaysinleague(_, D).  [covers 106,0/224,0 pos, 0,0/0,0 neg]

% Consider expanding [#6 of outerLoop #5, bodyLen=5] 'teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, E), teamplaysinleague(E, D).  [covers 197,0/224,0 pos, 0,0/0,0 neg]' score=-2.0367468618252995
%  At # nodes expanded = 6, |OPEN| = 28.  Pruned 34 variant children.  Sending 31 items to OPEN for evaluation and possible insertion.
% Have created 31 valid-on-seeds descendants and have picked up 6 bad extensions.
%     Score = -2,027016 (regressionFit = 2,027011, penalties=5.8600000000000015E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteledsportsteam(C, F), teamplaysinleague(F, D), athleteledsportsteam(E, A).  [covers 0,0/224,0 pos, 0,0/0,0 neg]Coverage only partially computed- took too long to compute.
%     Score = -2,044828 (regressionFit = 2,044822, penalties=5.8600000000000015E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteledsportsteam(C, F), teamplaysinleague(F, D), athleteledsportsteam(E, F).  [covers 186,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,036748 (regressionFit = 2,036742, penalties=6.07E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, E), teamplaysinleague(E, D), athleteledsportsteam(C, _).  [covers 197,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,044828 (regressionFit = 2,044822, penalties=5.9700000000000004E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteledsportsteam(C, F), teamplaysinleague(F, D), athleteledsportsteam(E, _).  [covers 186,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,040322 (regressionFit = 2,040315, penalties=6.07E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, E), teamplaysinleague(E, D), athleteledsportsteam(_, A).  [covers 99,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,036748 (regressionFit = 2,036742, penalties=6.07E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, E), teamplaysinleague(E, D), athleteledsportsteam(_, E).  [covers 197,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,026808 (regressionFit = 2,026802, penalties=6.060000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, E), teamplaysinleague(E, D), athleteplaysforteam(C, A).  [covers 0,0/224,0 pos, 0,0/0,0 neg]Coverage only partially computed- took too long to compute.
%     Score = -2,035378 (regressionFit = 2,035372, penalties=6.060000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, E), teamplaysinleague(E, D), athleteplaysforteam(C, E).  [covers 189,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,030190 (regressionFit = 2,030185, penalties=5.960000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteledsportsteam(C, F), teamplaysinleague(F, D), athleteplaysforteam(E, A).  [covers 0,0/224,0 pos, 0,0/0,0 neg]Coverage only partially computed- took too long to compute.
%     Score = -2,044828 (regressionFit = 2,044822, penalties=5.960000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteledsportsteam(C, F), teamplaysinleague(F, D), athleteplaysforteam(E, F).  [covers 186,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,036748 (regressionFit = 2,036742, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, E), teamplaysinleague(E, D), athleteplaysforteam(C, _).  [covers 197,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,044828 (regressionFit = 2,044822, penalties=6.070000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteledsportsteam(C, F), teamplaysinleague(F, D), athleteplaysforteam(E, _).  [covers 186,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,013492 (regressionFit = 2,013486, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, E), teamplaysinleague(E, D), athleteplaysforteam(_, A).  [covers 146,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,036748 (regressionFit = 2,036742, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, E), teamplaysinleague(E, D), athleteplaysforteam(_, E).  [covers 197,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,045823 (regressionFit = 2,045817, penalties=5.9600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, E), teamplaysinleague(E, D), athleteplaysinleague(C, D).  [covers 177,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,044828 (regressionFit = 2,044822, penalties=6.07E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, E), teamplaysinleague(E, D), athleteplaysinleague(C, _).  [covers 186,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,036748 (regressionFit = 2,036742, penalties=6.07E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, E), teamplaysinleague(E, D), athleteplaysinleague(_, D).  [covers 197,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,045812 (regressionFit = 2,045806, penalties=5.8600000000000015E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteledsportsteam(C, F), teamplaysinleague(F, D), athleteplayssport(E, B).  [covers 178,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,044828 (regressionFit = 2,044822, penalties=5.9700000000000004E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteledsportsteam(C, F), teamplaysinleague(F, D), athleteplayssport(E, _).  [covers 186,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,036748 (regressionFit = 2,036742, penalties=6.07E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, E), teamplaysinleague(E, D), athleteplayssport(_, B).  [covers 197,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,025810 (regressionFit = 2,025804, penalties=6.060000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, E), teamplaysinleague(E, D), teamalsoknownas(A, E).  [covers 0,0/224,0 pos, 0,0/0,0 neg]Coverage only partially computed- took too long to compute.
%     Score = -2,041663 (regressionFit = 2,041657, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, E), teamplaysinleague(E, D), teamalsoknownas(A, _).  [covers 26,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,001020 (regressionFit = 2,001013, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, E), teamplaysinleague(E, D), teamalsoknownas(E, _).  [covers 185,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,001020 (regressionFit = 2,001013, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, E), teamplaysinleague(E, D), teamalsoknownas(_, E).  [covers 185,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,045171 (regressionFit = 2,045165, penalties=6.060000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, E), teamplaysinleague(E, D), teamplaysagainstteam(A, E).  [covers 147,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,045646 (regressionFit = 2,045640, penalties=6.060000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, E), teamplaysinleague(E, D), teamplaysagainstteam(E, A).  [covers 150,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,043881 (regressionFit = 2,043875, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, E), teamplaysinleague(E, D), teamplaysagainstteam(A, _).  [covers 170,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,036748 (regressionFit = 2,036742, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, E), teamplaysinleague(E, D), teamplaysagainstteam(E, _).  [covers 197,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,042953 (regressionFit = 2,042946, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, E), teamplaysinleague(E, D), teamplaysagainstteam(_, A).  [covers 174,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,036748 (regressionFit = 2,036742, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, E), teamplaysinleague(E, D), teamplaysagainstteam(_, E).  [covers 197,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,036748 (regressionFit = 2,036742, penalties=6.07E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, E), teamplaysinleague(E, D), teamplaysinleague(_, D).  [covers 197,0/224,0 pos, 0,0/0,0 neg]

% Consider expanding [#7 of outerLoop #5, bodyLen=5] 'teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _), teamalsoknownas(A, _).  [covers 39,0/224,0 pos, 0,0/0,0 neg]' score=-2.0372602456203928
%  At # nodes expanded = 7, |OPEN| = 27.  Pruned 64 variant children.  Sending 43 items to OPEN for evaluation and possible insertion.
% Have created 43 valid-on-seeds descendants and have picked up 16 bad extensions.
%     Score = -2,045730 (regressionFit = 2,045724, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteledsportsteam(C, _), teamalsoknownas(A, _), athleteledsportsteam(E, A).  [covers 15,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,045626 (regressionFit = 2,045620, penalties=6.070000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteledsportsteam(C, F), teamalsoknownas(A, _), athleteledsportsteam(E, F).  [covers 21,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,045891 (regressionFit = 2,045885, penalties=6.070000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteledsportsteam(C, _), teamalsoknownas(A, F), athleteledsportsteam(E, F).  [covers 12,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,045626 (regressionFit = 2,045620, penalties=6.2800000000000026E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteledsportsteam(C, _), teamalsoknownas(A, _), athleteledsportsteam(E, _).  [covers 21,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,045731 (regressionFit = 2,045724, penalties=6.3800000000000024E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _), teamalsoknownas(A, _), athleteledsportsteam(_, A).  [covers 15,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,037261 (regressionFit = 2,037255, penalties=6.2800000000000026E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, E), teamalsoknownas(A, _), athleteledsportsteam(_, E).  [covers 39,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,045839 (regressionFit = 2,045833, penalties=6.2800000000000026E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _), teamalsoknownas(A, E), athleteledsportsteam(_, E).  [covers 13,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,037261 (regressionFit = 2,037255, penalties=6.270000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, E), teamalsoknownas(A, _), athleteplaysforteam(C, E).  [covers 39,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,045635 (regressionFit = 2,045629, penalties=6.270000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteledsportsteam(C, _), teamalsoknownas(A, _), athleteplaysforteam(E, A).  [covers 18,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,045626 (regressionFit = 2,045620, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteledsportsteam(C, F), teamalsoknownas(A, _), athleteplaysforteam(E, F).  [covers 21,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,045674 (regressionFit = 2,045668, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteledsportsteam(C, _), teamalsoknownas(A, F), athleteplaysforteam(E, F).  [covers 16,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,037261 (regressionFit = 2,037255, penalties=6.480000000000002E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _), teamalsoknownas(A, _), athleteplaysforteam(C, _).  [covers 39,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,045627 (regressionFit = 2,045620, penalties=6.3800000000000024E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteledsportsteam(C, _), teamalsoknownas(A, _), athleteplaysforteam(E, _).  [covers 21,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,036374 (regressionFit = 2,036368, penalties=6.480000000000002E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _), teamalsoknownas(A, _), athleteplaysforteam(_, A).  [covers 28,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,037261 (regressionFit = 2,037255, penalties=6.3800000000000024E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, E), teamalsoknownas(A, _), athleteplaysforteam(_, E).  [covers 39,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,045675 (regressionFit = 2,045668, penalties=6.3800000000000024E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _), teamalsoknownas(A, E), athleteplaysforteam(_, E).  [covers 16,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,037261 (regressionFit = 2,037255, penalties=6.3800000000000024E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _), teamalsoknownas(A, _), athleteplaysinleague(C, _).  [covers 39,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,037261 (regressionFit = 2,037255, penalties=6.3800000000000024E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _), teamalsoknownas(A, _), athleteplaysinleague(_, D).  [covers 39,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,045126 (regressionFit = 2,045120, penalties=6.2800000000000026E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteledsportsteam(C, _), teamalsoknownas(A, _), athleteplayssport(E, _).  [covers 23,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,037261 (regressionFit = 2,037255, penalties=6.3800000000000024E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _), teamalsoknownas(A, _), athleteplayssport(_, B).  [covers 39,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,045941 (regressionFit = 2,045935, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, E), teamalsoknownas(A, _), teamalsoknownas(A, E).  [covers 11,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,037261 (regressionFit = 2,037255, penalties=6.3800000000000024E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _), teamalsoknownas(A, _), teamalsoknownas(A, _).  [covers 39,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,037261 (regressionFit = 2,037255, penalties=6.2800000000000026E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, E), teamalsoknownas(A, _), teamalsoknownas(E, _).  [covers 39,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,037821 (regressionFit = 2,037814, penalties=6.2800000000000026E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _), teamalsoknownas(A, E), teamalsoknownas(E, _).  [covers 28,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,037261 (regressionFit = 2,037255, penalties=6.2800000000000026E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, E), teamalsoknownas(A, _), teamalsoknownas(_, E).  [covers 39,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,037261 (regressionFit = 2,037255, penalties=6.2800000000000026E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _), teamalsoknownas(A, E), teamalsoknownas(_, E).  [covers 39,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,045608 (regressionFit = 2,045602, penalties=6.270000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, E), teamalsoknownas(A, _), teamplaysagainstteam(A, E).  [covers 20,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,045785 (regressionFit = 2,045779, penalties=6.270000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _), teamalsoknownas(A, E), teamplaysagainstteam(A, E).  [covers 14,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,045646 (regressionFit = 2,045640, penalties=6.270000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, E), teamalsoknownas(A, _), teamplaysagainstteam(E, A).  [covers 21,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,045674 (regressionFit = 2,045668, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, E), teamalsoknownas(A, F), teamplaysagainstteam(E, F).  [covers 16,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,045785 (regressionFit = 2,045779, penalties=6.270000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _), teamalsoknownas(A, E), teamplaysagainstteam(E, A).  [covers 14,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,045674 (regressionFit = 2,045668, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, E), teamalsoknownas(A, F), teamplaysagainstteam(F, E).  [covers 16,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,035112 (regressionFit = 2,035105, penalties=6.480000000000002E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _), teamalsoknownas(A, _), teamplaysagainstteam(A, _).  [covers 30,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,037261 (regressionFit = 2,037255, penalties=6.3800000000000024E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, E), teamalsoknownas(A, _), teamplaysagainstteam(E, _).  [covers 39,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,045617 (regressionFit = 2,045611, penalties=6.3800000000000024E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _), teamalsoknownas(A, E), teamplaysagainstteam(E, _).  [covers 17,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,036039 (regressionFit = 2,036033, penalties=6.480000000000002E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _), teamalsoknownas(A, _), teamplaysagainstteam(_, A).  [covers 33,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,037261 (regressionFit = 2,037255, penalties=6.3800000000000024E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, E), teamalsoknownas(A, _), teamplaysagainstteam(_, E).  [covers 39,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,045636 (regressionFit = 2,045629, penalties=6.3800000000000024E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _), teamalsoknownas(A, E), teamplaysagainstteam(_, E).  [covers 18,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,041663 (regressionFit = 2,041657, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, E), teamalsoknownas(A, _), teamplaysinleague(E, D).  [covers 26,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,045674 (regressionFit = 2,045668, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _), teamalsoknownas(A, E), teamplaysinleague(E, D).  [covers 16,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,037261 (regressionFit = 2,037255, penalties=6.2800000000000026E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, E), teamalsoknownas(A, _), teamplaysinleague(E, _).  [covers 39,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,038094 (regressionFit = 2,038088, penalties=6.2800000000000026E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _), teamalsoknownas(A, E), teamplaysinleague(E, _).  [covers 34,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,037261 (regressionFit = 2,037255, penalties=6.3800000000000024E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _), teamalsoknownas(A, _), teamplaysinleague(_, D).  [covers 39,0/224,0 pos, 0,0/0,0 neg]

% Consider expanding [#8 of outerLoop #5, bodyLen=5] 'teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _), athleteledsportsteam(_, A).  [covers 101,0/224,0 pos, 0,0/0,0 neg]' score=-2.038955880330527
%  At # nodes expanded = 8, |OPEN| = 26.  Pruned 46 variant children.  Sending 40 items to OPEN for evaluation and possible insertion.
% Have created 40 valid-on-seeds descendants and have picked up 7 bad extensions.
%     Score = -2,041209 (regressionFit = 2,041203, penalties=6.07E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteledsportsteam(C, _), athleteledsportsteam(_, A), athleteledsportsteam(E, A).  [covers 88,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,040321 (regressionFit = 2,040315, penalties=5.9700000000000004E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteledsportsteam(C, F), athleteledsportsteam(_, A), athleteledsportsteam(E, F).  [covers 99,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,038957 (regressionFit = 2,038951, penalties=6.2800000000000026E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _), athleteledsportsteam(_, A), athleteledsportsteam(C, _).  [covers 101,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,040322 (regressionFit = 2,040315, penalties=6.180000000000002E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteledsportsteam(C, _), athleteledsportsteam(_, A), athleteledsportsteam(E, _).  [covers 99,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,038957 (regressionFit = 2,038951, penalties=6.2800000000000026E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _), athleteledsportsteam(_, A), athleteledsportsteam(_, A).  [covers 101,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,038957 (regressionFit = 2,038951, penalties=6.180000000000002E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, E), athleteledsportsteam(_, A), athleteledsportsteam(_, E).  [covers 101,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,043063 (regressionFit = 2,043057, penalties=6.270000000000003E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _), athleteledsportsteam(_, A), athleteplaysforteam(C, A).  [covers 61,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,038957 (regressionFit = 2,038951, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, E), athleteledsportsteam(_, A), athleteplaysforteam(C, E).  [covers 101,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,040289 (regressionFit = 2,040282, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteledsportsteam(C, _), athleteledsportsteam(_, A), athleteplaysforteam(E, A).  [covers 83,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,040322 (regressionFit = 2,040315, penalties=6.070000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteledsportsteam(C, F), athleteledsportsteam(_, A), athleteplaysforteam(E, F).  [covers 99,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,039751 (regressionFit = 2,039745, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _), athleteledsportsteam(E, A), athleteplaysforteam(E, A).  [covers 79,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,042926 (regressionFit = 2,042920, penalties=6.070000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, E), athleteledsportsteam(F, A), athleteplaysforteam(F, E).  [covers 70,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,038957 (regressionFit = 2,038951, penalties=6.3800000000000024E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _), athleteledsportsteam(_, A), athleteplaysforteam(C, _).  [covers 101,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,040322 (regressionFit = 2,040315, penalties=6.2800000000000026E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteledsportsteam(C, _), athleteledsportsteam(_, A), athleteplaysforteam(E, _).  [covers 99,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,039219 (regressionFit = 2,039213, penalties=6.2800000000000026E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _), athleteledsportsteam(E, A), athleteplaysforteam(E, _).  [covers 97,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,038896 (regressionFit = 2,038889, penalties=6.3800000000000024E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _), athleteledsportsteam(_, A), athleteplaysforteam(_, A).  [covers 90,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,038957 (regressionFit = 2,038951, penalties=6.2800000000000026E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, E), athleteledsportsteam(_, A), athleteplaysforteam(_, E).  [covers 101,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,041245 (regressionFit = 2,041239, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _), athleteledsportsteam(_, A), athleteplaysinleague(C, D).  [covers 92,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,041209 (regressionFit = 2,041203, penalties=6.07E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _), athleteledsportsteam(E, A), athleteplaysinleague(E, D).  [covers 88,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,038957 (regressionFit = 2,038951, penalties=6.2800000000000026E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _), athleteledsportsteam(_, A), athleteplaysinleague(C, _).  [covers 101,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,041111 (regressionFit = 2,041105, penalties=6.180000000000002E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _), athleteledsportsteam(E, A), athleteplaysinleague(E, _).  [covers 91,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,038957 (regressionFit = 2,038951, penalties=6.2800000000000026E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _), athleteledsportsteam(_, A), athleteplaysinleague(_, D).  [covers 101,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,041245 (regressionFit = 2,041239, penalties=6.07E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteledsportsteam(C, _), athleteledsportsteam(_, A), athleteplayssport(E, B).  [covers 92,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,042906 (regressionFit = 2,042900, penalties=6.07E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _), athleteledsportsteam(E, A), athleteplayssport(E, B).  [covers 73,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,040322 (regressionFit = 2,040315, penalties=6.180000000000002E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteledsportsteam(C, _), athleteledsportsteam(_, A), athleteplayssport(E, _).  [covers 99,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,040726 (regressionFit = 2,040720, penalties=6.180000000000002E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _), athleteledsportsteam(E, A), athleteplayssport(E, _).  [covers 89,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,038957 (regressionFit = 2,038951, penalties=6.2800000000000026E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _), athleteledsportsteam(_, A), athleteplayssport(_, B).  [covers 101,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,045929 (regressionFit = 2,045922, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, E), athleteledsportsteam(_, A), teamalsoknownas(A, E).  [covers 10,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,045731 (regressionFit = 2,045724, penalties=6.3800000000000024E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _), athleteledsportsteam(_, A), teamalsoknownas(A, _).  [covers 15,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,038957 (regressionFit = 2,038951, penalties=6.2800000000000026E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, E), athleteledsportsteam(_, A), teamalsoknownas(E, _).  [covers 101,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,038957 (regressionFit = 2,038951, penalties=6.2800000000000026E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, E), athleteledsportsteam(_, A), teamalsoknownas(_, E).  [covers 101,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,041395 (regressionFit = 2,041389, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, E), athleteledsportsteam(_, A), teamplaysagainstteam(A, E).  [covers 96,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,041237 (regressionFit = 2,041231, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, E), athleteledsportsteam(_, A), teamplaysagainstteam(E, A).  [covers 96,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,039496 (regressionFit = 2,039489, penalties=6.3800000000000024E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _), athleteledsportsteam(_, A), teamplaysagainstteam(A, _).  [covers 99,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,038957 (regressionFit = 2,038951, penalties=6.2800000000000026E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, E), athleteledsportsteam(_, A), teamplaysagainstteam(E, _).  [covers 101,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,039159 (regressionFit = 2,039153, penalties=6.3800000000000024E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _), athleteledsportsteam(_, A), teamplaysagainstteam(_, A).  [covers 100,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,038957 (regressionFit = 2,038951, penalties=6.2800000000000026E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, E), athleteledsportsteam(_, A), teamplaysagainstteam(_, E).  [covers 101,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,040322 (regressionFit = 2,040315, penalties=6.07E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, E), athleteledsportsteam(_, A), teamplaysinleague(E, D).  [covers 99,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,038957 (regressionFit = 2,038951, penalties=6.180000000000002E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, E), athleteledsportsteam(_, A), teamplaysinleague(E, _).  [covers 101,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,038957 (regressionFit = 2,038951, penalties=6.2800000000000026E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _), athleteledsportsteam(_, A), teamplaysinleague(_, D).  [covers 101,0/224,0 pos, 0,0/0,0 neg]

% Consider expanding [#9 of outerLoop #5, bodyLen=5] 'teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteledsportsteam(C, _), athleteledsportsteam(E, A).  [covers 88,0/224,0 pos, 0,0/0,0 neg]' score=-2.0412082277329433
%  At # nodes expanded = 9, |OPEN| = 25.  Pruned 34 variant children.  Sending 30 items to OPEN for evaluation and possible insertion.
% Have created 30 valid-on-seeds descendants and have picked up 7 bad extensions.
%     Score = -2,041209 (regressionFit = 2,041203, penalties=6.07E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteledsportsteam(C, _), athleteledsportsteam(E, A), athleteledsportsteam(C, _).  [covers 88,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,041209 (regressionFit = 2,041203, penalties=6.07E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteledsportsteam(C, _), athleteledsportsteam(E, A), athleteledsportsteam(_, A).  [covers 88,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,041209 (regressionFit = 2,041203, penalties=5.9700000000000004E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteledsportsteam(C, F), athleteledsportsteam(E, A), athleteledsportsteam(_, F).  [covers 88,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,043276 (regressionFit = 2,043270, penalties=6.060000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteledsportsteam(C, _), athleteledsportsteam(E, A), athleteplaysforteam(C, A).  [covers 56,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,041209 (regressionFit = 2,041203, penalties=5.960000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteledsportsteam(C, F), athleteledsportsteam(E, A), athleteplaysforteam(C, F).  [covers 88,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,042013 (regressionFit = 2,042006, penalties=6.060000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteledsportsteam(C, _), athleteledsportsteam(E, A), athleteplaysforteam(E, A).  [covers 66,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,043165 (regressionFit = 2,043159, penalties=5.960000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteledsportsteam(C, F), athleteledsportsteam(E, A), athleteplaysforteam(E, F).  [covers 65,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,041209 (regressionFit = 2,041203, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteledsportsteam(C, _), athleteledsportsteam(E, A), athleteplaysforteam(C, _).  [covers 88,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,041424 (regressionFit = 2,041418, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteledsportsteam(C, _), athleteledsportsteam(E, A), athleteplaysforteam(E, _).  [covers 85,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,041132 (regressionFit = 2,041126, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteledsportsteam(C, _), athleteledsportsteam(E, A), athleteplaysforteam(_, A).  [covers 79,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,041209 (regressionFit = 2,041203, penalties=6.070000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteledsportsteam(C, F), athleteledsportsteam(E, A), athleteplaysforteam(_, F).  [covers 88,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,042022 (regressionFit = 2,042016, penalties=5.9600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteledsportsteam(C, _), athleteledsportsteam(E, A), athleteplaysinleague(C, D).  [covers 81,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,041209 (regressionFit = 2,041203, penalties=6.07E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteledsportsteam(C, _), athleteledsportsteam(E, A), athleteplaysinleague(C, _).  [covers 88,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,041209 (regressionFit = 2,041203, penalties=6.07E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteledsportsteam(C, _), athleteledsportsteam(E, A), athleteplaysinleague(_, D).  [covers 88,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,042945 (regressionFit = 2,042939, penalties=5.9600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteledsportsteam(C, _), athleteledsportsteam(E, A), athleteplayssport(E, B).  [covers 70,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,041600 (regressionFit = 2,041594, penalties=6.07E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteledsportsteam(C, _), athleteledsportsteam(E, A), athleteplayssport(E, _).  [covers 81,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,041209 (regressionFit = 2,041203, penalties=6.07E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteledsportsteam(C, _), athleteledsportsteam(E, A), athleteplayssport(_, B).  [covers 88,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,045928 (regressionFit = 2,045922, penalties=5.960000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteledsportsteam(C, F), athleteledsportsteam(E, A), teamalsoknownas(A, F).  [covers 10,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,045730 (regressionFit = 2,045724, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteledsportsteam(C, _), athleteledsportsteam(E, A), teamalsoknownas(A, _).  [covers 15,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,041209 (regressionFit = 2,041203, penalties=6.070000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteledsportsteam(C, F), athleteledsportsteam(E, A), teamalsoknownas(F, _).  [covers 88,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,041209 (regressionFit = 2,041203, penalties=6.070000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteledsportsteam(C, F), athleteledsportsteam(E, A), teamalsoknownas(_, F).  [covers 88,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,041930 (regressionFit = 2,041924, penalties=5.960000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteledsportsteam(C, F), athleteledsportsteam(E, A), teamplaysagainstteam(A, F).  [covers 86,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,041930 (regressionFit = 2,041924, penalties=5.960000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteledsportsteam(C, F), athleteledsportsteam(E, A), teamplaysagainstteam(F, A).  [covers 86,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,041371 (regressionFit = 2,041365, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteledsportsteam(C, _), athleteledsportsteam(E, A), teamplaysagainstteam(A, _).  [covers 87,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,041209 (regressionFit = 2,041203, penalties=6.070000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteledsportsteam(C, F), athleteledsportsteam(E, A), teamplaysagainstteam(F, _).  [covers 88,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,041371 (regressionFit = 2,041365, penalties=6.170000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteledsportsteam(C, _), athleteledsportsteam(E, A), teamplaysagainstteam(_, A).  [covers 87,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,041209 (regressionFit = 2,041203, penalties=6.070000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteledsportsteam(C, F), athleteledsportsteam(E, A), teamplaysagainstteam(_, F).  [covers 88,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,041209 (regressionFit = 2,041203, penalties=5.8600000000000015E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteledsportsteam(C, F), athleteledsportsteam(E, A), teamplaysinleague(F, D).  [covers 88,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,041209 (regressionFit = 2,041203, penalties=5.9700000000000004E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteledsportsteam(C, F), athleteledsportsteam(E, A), teamplaysinleague(F, _).  [covers 88,0/224,0 pos, 0,0/0,0 neg]
%     Score = -2,041209 (regressionFit = 2,041203, penalties=6.07E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(E, D), athleteledsportsteam(C, _), athleteledsportsteam(E, A), teamplaysinleague(_, D).  [covers 88,0/224,0 pos, 0,0/0,0 neg]

***** Warning: #21 TOO MANY NODES CONSIDERED (i.e., 'expanded') for 'LearnOneClause': nodesConsidered = 10 and maxNodesToConsider = 10. *****


% The best node found: teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _), athleteplaysforteam(_, A).  [covers 156,0/224,0 pos, 0,0/0,0 neg]

% The best node found: teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _), athleteplaysforteam(_, A).  [covers 156,0/224,0 pos, 0,0/0,0 neg]

% Expanding node at Level 3 with score = -0,009.
% Will extend: teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _), athleteplaysforteam(_, A).  [covers 156,0/224,0 pos, 0,0/0,0 neg]
% Path: 3;true,true,true
Comparing variance: 2.646447557529778E-4 to score=0.0025 #egs=156.0
Comparing variance: 0.028694180001355582 to score=0.0025 #egs=68.0
%   Creating a TRUE-branch and FALSE-branch leaves because level = 3 >= 3

% Time for loop #5: 2 minutes and 47,210 seconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #5, the best clause found is:
%      teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, D), athleteplaysinleague(_, D), athleteledsportsteam(C, _), athleteplaysforteam(_, A).  [covers 156,0/224,0 pos, 0,0/0,0 neg]
% This clause covers 156 positive examples, of which 156 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'teamplayssport(_, A) :- athleteplayssport(_, A).  [covers 399,0/168,0 pos, 0,0/0,0 neg]'
%     Score = -7,095813 (regressionFit = 7,095812, penalties=1.23E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(_, A).  [covers 168,0/168,0 pos, 0,0/0,0 neg]

% Have these 6 positive seeds: 23 57 59 74 79 142
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Consider expanding [#1 of outerLoop #6, bodyLen=1] 'teamplayssport(_, A) :- athleteplayssport(_, A).  [covers 168,0/168,0 pos, 0,0/0,0 neg]' score=-7.0958133072093235
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 8 variant children.  Sending 8 items to OPEN for evaluation and possible insertion.
% Have created 8 valid-on-seeds descendants and have picked up 8 bad extensions.
%     Score = -0,791927 (regressionFit = 0,791925, penalties=2.24E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteledsportsteam(B, _).  [covers 152,0/168,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -0,791927): teamplayssport(_, A) :- athleteplayssport(B, A), athleteledsportsteam(B, _).  [covers 152,0/168,0 pos, 0,0/0,0 neg]
%     Score = -0,795028 (regressionFit = 0,795026, penalties=2.24E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysforteam(B, _).  [covers 155,0/168,0 pos, 0,0/0,0 neg]
%     Score = -0,796030 (regressionFit = 0,796027, penalties=2.24E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _).  [covers 164,0/168,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(_, A), athleteplayssport(_, A).  [covers 168,0/168,0 pos, 0,0/0,0 neg]
%     Score = -0,860001 (regressionFit = 0,859999, penalties=2.24E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(A, _).  [covers 50,0/168,0 pos, 0,0/0,0 neg]
%     Score = -0,849709 (regressionFit = 0,849707, penalties=2.24E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(A, _).  [covers 36,0/168,0 pos, 0,0/0,0 neg]
%     Score = -0,852895 (regressionFit = 0,852893, penalties=2.24E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(_, A).  [covers 45,0/168,0 pos, 0,0/0,0 neg]
%     Score = -0,862306 (regressionFit = 0,862304, penalties=2.24E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _).  [covers 77,0/168,0 pos, 0,0/0,0 neg]

% Consider expanding [#2 of outerLoop #6, bodyLen=2] 'teamplayssport(_, A) :- athleteplayssport(B, A), athleteledsportsteam(B, _).  [covers 152,0/168,0 pos, 0,0/0,0 neg]' score=-0.7919272183414668
%  At # nodes expanded = 2, |OPEN| = 7.  Pruned 22 variant children.  Sending 15 items to OPEN for evaluation and possible insertion.
% Have created 15 valid-on-seeds descendants and have picked up 10 bad extensions.
%     Score = -0,791928 (regressionFit = 0,791925, penalties=3.1500000000000008E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteledsportsteam(B, C), athleteledsportsteam(_, C).  [covers 152,0/168,0 pos, 0,0/0,0 neg]
%     Score = -0,791928 (regressionFit = 0,791925, penalties=3.1400000000000004E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteledsportsteam(B, C), athleteplaysforteam(B, C).  [covers 152,0/168,0 pos, 0,0/0,0 neg]
%     Score = -0,791928 (regressionFit = 0,791925, penalties=3.35E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteledsportsteam(B, _), athleteplaysforteam(B, _).  [covers 152,0/168,0 pos, 0,0/0,0 neg]
%     Score = -0,791928 (regressionFit = 0,791925, penalties=3.2500000000000006E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteledsportsteam(B, C), athleteplaysforteam(_, C).  [covers 152,0/168,0 pos, 0,0/0,0 neg]
%     Score = -0,791928 (regressionFit = 0,791925, penalties=3.35E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteledsportsteam(B, _), athleteplaysinleague(B, _).  [covers 152,0/168,0 pos, 0,0/0,0 neg]
%     Score = -0,791928 (regressionFit = 0,791925, penalties=3.2500000000000006E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteledsportsteam(B, _), athleteplayssport(_, A).  [covers 152,0/168,0 pos, 0,0/0,0 neg]
%     Score = -0,860699 (regressionFit = 0,860696, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamalsoknownas(A, _).  [covers 43,0/168,0 pos, 0,0/0,0 neg]
%     Score = -0,791928 (regressionFit = 0,791925, penalties=3.2500000000000006E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteledsportsteam(B, C), teamalsoknownas(C, _).  [covers 152,0/168,0 pos, 0,0/0,0 neg]
%     Score = -0,791928 (regressionFit = 0,791925, penalties=3.2500000000000006E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteledsportsteam(B, C), teamalsoknownas(_, C).  [covers 152,0/168,0 pos, 0,0/0,0 neg]
%     Score = -0,860179 (regressionFit = 0,860176, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, _).  [covers 27,0/168,0 pos, 0,0/0,0 neg]
%     Score = -0,791928 (regressionFit = 0,791925, penalties=3.2500000000000006E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteledsportsteam(B, C), teamplaysagainstteam(C, _).  [covers 152,0/168,0 pos, 0,0/0,0 neg]
%     Score = -0,861748 (regressionFit = 0,861745, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(_, A).  [covers 35,0/168,0 pos, 0,0/0,0 neg]
%     Score = -0,791928 (regressionFit = 0,791925, penalties=3.2500000000000006E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteledsportsteam(B, C), teamplaysagainstteam(_, C).  [covers 152,0/168,0 pos, 0,0/0,0 neg]
%     Score = -0,857366 (regressionFit = 0,857363, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysinleague(A, _).  [covers 72,0/168,0 pos, 0,0/0,0 neg]
%     Score = -0,791928 (regressionFit = 0,791925, penalties=3.2500000000000006E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteledsportsteam(B, C), teamplaysinleague(C, _).  [covers 152,0/168,0 pos, 0,0/0,0 neg]

% Consider expanding [#3 of outerLoop #6, bodyLen=2] 'teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysforteam(B, _).  [covers 155,0/168,0 pos, 0,0/0,0 neg]' score=-0.7950280249125105
%  At # nodes expanded = 3, |OPEN| = 6.  Pruned 22 variant children.  Sending 16 items to OPEN for evaluation and possible insertion.
% Have created 16 valid-on-seeds descendants and have picked up 10 bad extensions.
%     Score = -0,791928 (regressionFit = 0,791925, penalties=3.1400000000000004E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysforteam(B, C), athleteledsportsteam(B, C).  [covers 152,0/168,0 pos, 0,0/0,0 neg]
%     Score = -0,791928 (regressionFit = 0,791925, penalties=3.35E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysforteam(B, _), athleteledsportsteam(B, _).  [covers 152,0/168,0 pos, 0,0/0,0 neg]
%     Score = -0,747801 (regressionFit = 0,747798, penalties=3.2500000000000006E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysforteam(B, C), athleteledsportsteam(_, C).  [covers 154,0/168,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -0,747801): teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysforteam(B, C), athleteledsportsteam(_, C).  [covers 154,0/168,0 pos, 0,0/0,0 neg]
%     Score = -0,795029 (regressionFit = 0,795026, penalties=3.2500000000000006E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysforteam(B, _), athleteplaysforteam(B, _).  [covers 155,0/168,0 pos, 0,0/0,0 neg]
%     Score = -0,795029 (regressionFit = 0,795026, penalties=3.1500000000000008E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysforteam(B, C), athleteplaysforteam(_, C).  [covers 155,0/168,0 pos, 0,0/0,0 neg]
%     Score = -0,791928 (regressionFit = 0,791925, penalties=3.35E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysforteam(B, _), athleteplaysinleague(B, _).  [covers 152,0/168,0 pos, 0,0/0,0 neg]
%     Score = -0,795029 (regressionFit = 0,795026, penalties=3.2500000000000006E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysforteam(B, _), athleteplayssport(_, A).  [covers 155,0/168,0 pos, 0,0/0,0 neg]
%     Score = -0,862575 (regressionFit = 0,862572, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysforteam(C, _), teamalsoknownas(A, _).  [covers 44,0/168,0 pos, 0,0/0,0 neg]
%     Score = -0,791928 (regressionFit = 0,791925, penalties=3.2500000000000006E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysforteam(B, C), teamalsoknownas(C, _).  [covers 152,0/168,0 pos, 0,0/0,0 neg]
%     Score = -0,791928 (regressionFit = 0,791925, penalties=3.2500000000000006E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysforteam(B, C), teamalsoknownas(_, C).  [covers 152,0/168,0 pos, 0,0/0,0 neg]
%     Score = -0,860179 (regressionFit = 0,860176, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysforteam(C, _), teamplaysagainstteam(A, _).  [covers 27,0/168,0 pos, 0,0/0,0 neg]
%     Score = -0,795029 (regressionFit = 0,795026, penalties=3.2500000000000006E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysforteam(B, C), teamplaysagainstteam(C, _).  [covers 155,0/168,0 pos, 0,0/0,0 neg]
%     Score = -0,861748 (regressionFit = 0,861745, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysforteam(C, _), teamplaysagainstteam(_, A).  [covers 35,0/168,0 pos, 0,0/0,0 neg]
%     Score = -0,795029 (regressionFit = 0,795026, penalties=3.2500000000000006E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysforteam(B, C), teamplaysagainstteam(_, C).  [covers 155,0/168,0 pos, 0,0/0,0 neg]
%     Score = -0,862111 (regressionFit = 0,862108, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysforteam(C, _), teamplaysinleague(A, _).  [covers 73,0/168,0 pos, 0,0/0,0 neg]
%     Score = -0,795029 (regressionFit = 0,795026, penalties=3.2500000000000006E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysforteam(B, C), teamplaysinleague(C, _).  [covers 155,0/168,0 pos, 0,0/0,0 neg]

% Consider expanding [#4 of outerLoop #6, bodyLen=2] 'teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _).  [covers 164,0/168,0 pos, 0,0/0,0 neg]' score=-0.7960295465309605
%  At # nodes expanded = 4, |OPEN| = 5.  Pruned 10 variant children.  Sending 9 items to OPEN for evaluation and possible insertion.
% Have created 9 valid-on-seeds descendants and have picked up 5 bad extensions.
%     Score = -0,791928 (regressionFit = 0,791925, penalties=3.35E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteledsportsteam(B, _).  [covers 152,0/168,0 pos, 0,0/0,0 neg]
%     Score = -0,791928 (regressionFit = 0,791925, penalties=3.35E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteplaysforteam(B, _).  [covers 152,0/168,0 pos, 0,0/0,0 neg]
%     Score = -0,796030 (regressionFit = 0,796027, penalties=3.1500000000000008E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, C), athleteplaysinleague(_, C).  [covers 164,0/168,0 pos, 0,0/0,0 neg]
%     Score = -0,796031 (regressionFit = 0,796027, penalties=3.2500000000000006E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteplayssport(_, A).  [covers 164,0/168,0 pos, 0,0/0,0 neg]
%     Score = -0,862689 (regressionFit = 0,862686, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(A, _).  [covers 49,0/168,0 pos, 0,0/0,0 neg]
%     Score = -0,849710 (regressionFit = 0,849707, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(A, _).  [covers 36,0/168,0 pos, 0,0/0,0 neg]
%     Score = -0,852896 (regressionFit = 0,852893, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(_, A).  [covers 45,0/168,0 pos, 0,0/0,0 neg]
%     Score = -0,861849 (regressionFit = 0,861846, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysinleague(A, _).  [covers 76,0/168,0 pos, 0,0/0,0 neg]
%     Score = -0,796031 (regressionFit = 0,796027, penalties=3.2500000000000006E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, C), teamplaysinleague(_, C).  [covers 164,0/168,0 pos, 0,0/0,0 neg]

% Consider expanding [#5 of outerLoop #6, bodyLen=2] 'teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(A, _).  [covers 36,0/168,0 pos, 0,0/0,0 neg]' score=-0.8497087511921521
%  At # nodes expanded = 5, |OPEN| = 4.  Pruned 22 variant children.  Sending 15 items to OPEN for evaluation and possible insertion.
% Have created 15 valid-on-seeds descendants and have picked up 10 bad extensions.
%     Score = -0,860179 (regressionFit = 0,860176, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysagainstteam(A, _), athleteledsportsteam(C, _).  [covers 27,0/168,0 pos, 0,0/0,0 neg]
%     Score = -0,860179 (regressionFit = 0,860176, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysagainstteam(A, _), athleteplaysforteam(C, _).  [covers 27,0/168,0 pos, 0,0/0,0 neg]
%     Score = -0,851131 (regressionFit = 0,851128, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(A, C), athleteplaysforteam(_, C).  [covers 32,0/168,0 pos, 0,0/0,0 neg]
%     Score = -0,849710 (regressionFit = 0,849707, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysagainstteam(A, _), athleteplaysinleague(C, _).  [covers 36,0/168,0 pos, 0,0/0,0 neg]
%     Score = -0,849710 (regressionFit = 0,849707, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(A, _), athleteplayssport(_, B).  [covers 36,0/168,0 pos, 0,0/0,0 neg]
%     Score = -0,841157 (regressionFit = 0,841154, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(A, _), teamalsoknownas(A, _).  [covers 9,0/168,0 pos, 0,0/0,0 neg]
%     Score = -0,842998 (regressionFit = 0,842994, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(A, C), teamalsoknownas(C, _).  [covers 23,0/168,0 pos, 0,0/0,0 neg]
%     Score = -0,845805 (regressionFit = 0,845802, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(A, C), teamalsoknownas(_, C).  [covers 20,0/168,0 pos, 0,0/0,0 neg]
%     Score = -0,845210 (regressionFit = 0,845207, penalties=3.04E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(A, C), teamplaysagainstteam(C, A).  [covers 31,0/168,0 pos, 0,0/0,0 neg]
%     Score = -0,849710 (regressionFit = 0,849707, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(A, _), teamplaysagainstteam(A, _).  [covers 36,0/168,0 pos, 0,0/0,0 neg]
%     Score = -0,848656 (regressionFit = 0,848653, penalties=3.1500000000000008E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(A, C), teamplaysagainstteam(C, _).  [covers 35,0/168,0 pos, 0,0/0,0 neg]
%     Score = -0,849710 (regressionFit = 0,849707, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(A, _), teamplaysagainstteam(_, A).  [covers 36,0/168,0 pos, 0,0/0,0 neg]
%     Score = -0,849710 (regressionFit = 0,849707, penalties=3.1500000000000008E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(A, C), teamplaysagainstteam(_, C).  [covers 36,0/168,0 pos, 0,0/0,0 neg]
%     Score = -0,845698 (regressionFit = 0,845694, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(A, _), teamplaysinleague(A, _).  [covers 15,0/168,0 pos, 0,0/0,0 neg]
%     Score = -0,852325 (regressionFit = 0,852322, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(A, C), teamplaysinleague(C, _).  [covers 31,0/168,0 pos, 0,0/0,0 neg]

% Consider expanding [#6 of outerLoop #6, bodyLen=2] 'teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(_, A).  [covers 45,0/168,0 pos, 0,0/0,0 neg]' score=-0.8528951454180932
%  At # nodes expanded = 6, |OPEN| = 3.  Pruned 22 variant children.  Sending 14 items to OPEN for evaluation and possible insertion.
% Have created 14 valid-on-seeds descendants and have picked up 10 bad extensions.
%     Score = -0,861748 (regressionFit = 0,861745, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysagainstteam(_, A), athleteledsportsteam(C, _).  [covers 35,0/168,0 pos, 0,0/0,0 neg]
%     Score = -0,853700 (regressionFit = 0,853697, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(C, A), athleteledsportsteam(_, C).  [covers 25,0/168,0 pos, 0,0/0,0 neg]
%     Score = -0,861748 (regressionFit = 0,861745, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysagainstteam(_, A), athleteplaysforteam(C, _).  [covers 35,0/168,0 pos, 0,0/0,0 neg]
%     Score = -0,855609 (regressionFit = 0,855606, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(C, A), athleteplaysforteam(_, C).  [covers 41,0/168,0 pos, 0,0/0,0 neg]
%     Score = -0,852896 (regressionFit = 0,852893, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysagainstteam(_, A), athleteplaysinleague(C, _).  [covers 45,0/168,0 pos, 0,0/0,0 neg]
%     Score = -0,852896 (regressionFit = 0,852893, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(_, A), athleteplayssport(_, B).  [covers 45,0/168,0 pos, 0,0/0,0 neg]
%     Score = -0,852707 (regressionFit = 0,852704, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(_, A), teamalsoknownas(A, _).  [covers 15,0/168,0 pos, 0,0/0,0 neg]
%     Score = -0,850806 (regressionFit = 0,850803, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(C, A), teamalsoknownas(C, _).  [covers 26,0/168,0 pos, 0,0/0,0 neg]
%     Score = -0,845210 (regressionFit = 0,845207, penalties=3.04E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(C, A), teamplaysagainstteam(A, C).  [covers 31,0/168,0 pos, 0,0/0,0 neg]
%     Score = -0,849710 (regressionFit = 0,849707, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(_, A), teamplaysagainstteam(A, _).  [covers 36,0/168,0 pos, 0,0/0,0 neg]
%     Score = -0,852896 (regressionFit = 0,852893, penalties=3.1500000000000008E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(C, A), teamplaysagainstteam(C, _).  [covers 45,0/168,0 pos, 0,0/0,0 neg]
%     Score = -0,852896 (regressionFit = 0,852893, penalties=3.1500000000000008E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(C, A), teamplaysagainstteam(_, C).  [covers 45,0/168,0 pos, 0,0/0,0 neg]
%     Score = -0,849088 (regressionFit = 0,849085, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(_, A), teamplaysinleague(A, _).  [covers 17,0/168,0 pos, 0,0/0,0 neg]
%     Score = -0,855069 (regressionFit = 0,855066, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(C, A), teamplaysinleague(C, _).  [covers 40,0/168,0 pos, 0,0/0,0 neg]

% Consider expanding [#7 of outerLoop #6, bodyLen=2] 'teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(A, _).  [covers 50,0/168,0 pos, 0,0/0,0 neg]' score=-0.8600011741957759
%  At # nodes expanded = 7, |OPEN| = 2.  Pruned 22 variant children.  Sending 10 items to OPEN for evaluation and possible insertion.
% Have created 10 valid-on-seeds descendants and have picked up 11 bad extensions.
%     Score = -0,860699 (regressionFit = 0,860696, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamalsoknownas(A, _), athleteledsportsteam(C, _).  [covers 43,0/168,0 pos, 0,0/0,0 neg]
%     Score = -0,862575 (regressionFit = 0,862572, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamalsoknownas(A, _), athleteplaysforteam(C, _).  [covers 44,0/168,0 pos, 0,0/0,0 neg]
%     Score = -0,862689 (regressionFit = 0,862686, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamalsoknownas(A, _), athleteplaysinleague(C, _).  [covers 49,0/168,0 pos, 0,0/0,0 neg]
%     Score = -0,860002 (regressionFit = 0,859999, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(A, _), athleteplayssport(_, B).  [covers 50,0/168,0 pos, 0,0/0,0 neg]
%     Score = -0,859798 (regressionFit = 0,859795, penalties=3.1500000000000008E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(A, C), teamalsoknownas(C, _).  [covers 48,0/168,0 pos, 0,0/0,0 neg]
%     Score = -0,860002 (regressionFit = 0,859999, penalties=3.1500000000000008E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(A, C), teamalsoknownas(_, C).  [covers 50,0/168,0 pos, 0,0/0,0 neg]
%     Score = -0,841157 (regressionFit = 0,841154, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(A, _), teamplaysagainstteam(A, _).  [covers 9,0/168,0 pos, 0,0/0,0 neg]
%     Score = -0,852707 (regressionFit = 0,852704, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(A, _), teamplaysagainstteam(_, A).  [covers 15,0/168,0 pos, 0,0/0,0 neg]
%     Score = -0,856366 (regressionFit = 0,856363, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(A, _), teamplaysinleague(A, _).  [covers 31,0/168,0 pos, 0,0/0,0 neg]
%     Score = -0,859534 (regressionFit = 0,859530, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(A, C), teamplaysinleague(C, _).  [covers 48,0/168,0 pos, 0,0/0,0 neg]

% Consider expanding [#8 of outerLoop #6, bodyLen=2] 'teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _).  [covers 77,0/168,0 pos, 0,0/0,0 neg]' score=-0.86230614586271
%  At # nodes expanded = 8, |OPEN| = 1.  Pruned 10 variant children.  Sending 8 items to OPEN for evaluation and possible insertion.
% Have created 8 valid-on-seeds descendants and have picked up 5 bad extensions.
%     Score = -0,857366 (regressionFit = 0,857363, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, _), athleteledsportsteam(C, _).  [covers 72,0/168,0 pos, 0,0/0,0 neg]
%     Score = -0,862111 (regressionFit = 0,862108, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, _), athleteplaysforteam(C, _).  [covers 73,0/168,0 pos, 0,0/0,0 neg]
%     Score = -0,861849 (regressionFit = 0,861846, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, _), athleteplaysinleague(C, _).  [covers 76,0/168,0 pos, 0,0/0,0 neg]
%     Score = -0,862307 (regressionFit = 0,862304, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), athleteplayssport(_, B).  [covers 77,0/168,0 pos, 0,0/0,0 neg]
%     Score = -0,856366 (regressionFit = 0,856363, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), teamalsoknownas(A, _).  [covers 31,0/168,0 pos, 0,0/0,0 neg]
%     Score = -0,845698 (regressionFit = 0,845694, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), teamplaysagainstteam(A, _).  [covers 15,0/168,0 pos, 0,0/0,0 neg]
%     Score = -0,849088 (regressionFit = 0,849085, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), teamplaysagainstteam(_, A).  [covers 17,0/168,0 pos, 0,0/0,0 neg]
%     Score = -0,862307 (regressionFit = 0,862304, penalties=3.1500000000000008E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), teamplaysinleague(_, C).  [covers 77,0/168,0 pos, 0,0/0,0 neg]

% Consider expanding [#9 of outerLoop #6, bodyLen=2] 'teamplayssport(_, A) :- athleteplayssport(_, A), athleteplayssport(_, A).  [covers 168,0/168,0 pos, 0,0/0,0 neg]' score=-Infinity
%  At # nodes expanded = 9, |OPEN| = 0.  Pruned 12 variant children.  Sending 11 items to OPEN for evaluation and possible insertion.
% Have created 11 valid-on-seeds descendants and have picked up 6 bad extensions.
%     Score = -0,791928 (regressionFit = 0,791925, penalties=3.2500000000000006E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplayssport(_, A), athleteledsportsteam(B, _).  [covers 152,0/168,0 pos, 0,0/0,0 neg]
%     Score = -0,791928 (regressionFit = 0,791925, penalties=3.2500000000000006E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(_, A), athleteplayssport(B, A), athleteledsportsteam(B, _).  [covers 152,0/168,0 pos, 0,0/0,0 neg]
%     Score = -0,795029 (regressionFit = 0,795026, penalties=3.2500000000000006E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplayssport(_, A), athleteplaysforteam(B, _).  [covers 155,0/168,0 pos, 0,0/0,0 neg]
%     Score = -0,795029 (regressionFit = 0,795026, penalties=3.2500000000000006E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(_, A), athleteplayssport(B, A), athleteplaysforteam(B, _).  [covers 155,0/168,0 pos, 0,0/0,0 neg]
%     Score = -0,796031 (regressionFit = 0,796027, penalties=3.2500000000000006E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplayssport(_, A), athleteplaysinleague(B, _).  [covers 164,0/168,0 pos, 0,0/0,0 neg]
%     Score = -0,796031 (regressionFit = 0,796027, penalties=3.2500000000000006E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(_, A), athleteplayssport(B, A), athleteplaysinleague(B, _).  [covers 164,0/168,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(_, A), athleteplayssport(_, A), athleteplayssport(_, A).  [covers 168,0/168,0 pos, 0,0/0,0 neg]
%     Score = -0,860002 (regressionFit = 0,859999, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), athleteplayssport(_, B), teamalsoknownas(A, _).  [covers 50,0/168,0 pos, 0,0/0,0 neg]
%     Score = -0,849710 (regressionFit = 0,849707, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), athleteplayssport(_, B), teamplaysagainstteam(A, _).  [covers 36,0/168,0 pos, 0,0/0,0 neg]
%     Score = -0,852896 (regressionFit = 0,852893, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), athleteplayssport(_, B), teamplaysagainstteam(_, A).  [covers 45,0/168,0 pos, 0,0/0,0 neg]
%     Score = -0,862307 (regressionFit = 0,862304, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), athleteplayssport(_, B), teamplaysinleague(A, _).  [covers 77,0/168,0 pos, 0,0/0,0 neg]

% The best node found: teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysforteam(B, C), athleteledsportsteam(_, C).  [covers 154,0/168,0 pos, 0,0/0,0 neg]

% The best node found: teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysforteam(B, C), athleteledsportsteam(_, C).  [covers 154,0/168,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,005.
% Will extend: teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysforteam(B, C), athleteledsportsteam(_, C).  [covers 154,0/168,0 pos, 0,0/0,0 neg]
% Path: 3;true,false
Comparing variance: 0.003641627218538907 to score=0.0025 #egs=154.0
Comparing variance: 0.013356215888969387 to score=0.0025 #egs=14.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 154,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,003642)
%         ILP node to extend: teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysforteam(B, C), athleteledsportsteam(_, C).  [covers 154,0/168,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -0,003642) into the LAST position (#2) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 14,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,013356)
%         ILP node to extend: teamplayssport(_, A) :- athleteplayssport(_, A).  [covers 168,0/168,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -0,013356) into position #1 in the search queue (new size=3).

% Time for loop #6: 1,561 seconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #6, the best clause found is:
%      teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysforteam(B, C), athleteledsportsteam(_, C).  [covers 154,0/168,0 pos, 0,0/0,0 neg]
% This clause covers 154 positive examples, of which 154 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'teamplayssport(_, A) :- athleteplayssport(_, A).  [covers 168,0/14,0 pos, 0,0/0,0 neg]'
%     Score = -7,095813 (regressionFit = 7,095812, penalties=1.23E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(_, A).  [covers 14,0/14,0 pos, 0,0/0,0 neg]

% Have these 7 positive seeds: 2 4 6 7 10 11 13
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Consider expanding [#1 of outerLoop #7, bodyLen=1] 'teamplayssport(_, A) :- athleteplayssport(_, A).  [covers 14,0/14,0 pos, 0,0/0,0 neg]' score=-7.0958133072093235
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 8 variant children.  Sending 9 items to OPEN for evaluation and possible insertion.
% Have created 9 valid-on-seeds descendants and have picked up 12 bad extensions.
%     Score = -0,181849 (regressionFit = 0,181847, penalties=2.24E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), athleteledsportsteam(_, A).  [covers 3,0/14,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -0,181849): teamplayssport(A, B) :- athleteplayssport(_, B), athleteledsportsteam(_, A).  [covers 3,0/14,0 pos, 0,0/0,0 neg]
%     Score = -0,168314 (regressionFit = 0,168311, penalties=2.24E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), athleteplaysforteam(_, A).  [covers 6,0/14,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -0,168314): teamplayssport(A, B) :- athleteplayssport(_, B), athleteplaysforteam(_, A).  [covers 6,0/14,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _).  [covers 12,0/14,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(_, A), athleteplayssport(_, A).  [covers 14,0/14,0 pos, 0,0/0,0 neg]
%     Score = -0,186344 (regressionFit = 0,186342, penalties=2.24E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(A, _).  [covers 7,0/14,0 pos, 0,0/0,0 neg]
%     Score = -0,183759 (regressionFit = 0,183757, penalties=2.24E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(_, A).  [covers 6,0/14,0 pos, 0,0/0,0 neg]
%     Score = -0,133876 (regressionFit = 0,133874, penalties=2.24E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(A, _).  [covers 9,0/14,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -0,133876): teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(A, _).  [covers 9,0/14,0 pos, 0,0/0,0 neg]
%     Score = -0,112658 (regressionFit = 0,112656, penalties=2.24E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(_, A).  [covers 10,0/14,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -0,112658): teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(_, A).  [covers 10,0/14,0 pos, 0,0/0,0 neg]
%     Score = -0,178955 (regressionFit = 0,178953, penalties=2.24E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _).  [covers 5,0/14,0 pos, 0,0/0,0 neg]

% Consider expanding [#2 of outerLoop #7, bodyLen=2] 'teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(_, A).  [covers 10,0/14,0 pos, 0,0/0,0 neg]' score=-0.11265839490111847
%  At # nodes expanded = 2, |OPEN| = 8.  Pruned 22 variant children.  Sending 19 items to OPEN for evaluation and possible insertion.
% Have created 19 valid-on-seeds descendants and have picked up 8 bad extensions.
%     Score = -0,181850 (regressionFit = 0,181847, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(_, A), athleteledsportsteam(_, A).  [covers 3,0/14,0 pos, 0,0/0,0 neg]
%     Score = -0,181750 (regressionFit = 0,181747, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(C, A), athleteledsportsteam(_, C).  [covers 4,0/14,0 pos, 0,0/0,0 neg]
%     Score = -0,168315 (regressionFit = 0,168311, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(_, A), athleteplaysforteam(_, A).  [covers 6,0/14,0 pos, 0,0/0,0 neg]
%     Score = -0,158121 (regressionFit = 0,158118, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(C, A), athleteplaysforteam(_, C).  [covers 7,0/14,0 pos, 0,0/0,0 neg]
%     Score = -0,112659 (regressionFit = 0,112656, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysagainstteam(_, A), athleteplaysinleague(C, _).  [covers 10,0/14,0 pos, 0,0/0,0 neg]
%     Score = -0,112659 (regressionFit = 0,112656, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(_, A), athleteplayssport(_, B).  [covers 10,0/14,0 pos, 0,0/0,0 neg]
%     Score = -0,183084 (regressionFit = 0,183081, penalties=3.1400000000000004E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(C, A), teamalsoknownas(A, C).  [covers 3,0/14,0 pos, 0,0/0,0 neg]
%     Score = -0,186191 (regressionFit = 0,186188, penalties=3.1400000000000004E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(C, A), teamalsoknownas(C, A).  [covers 3,0/14,0 pos, 0,0/0,0 neg]
%     Score = -0,173523 (regressionFit = 0,173520, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(_, A), teamalsoknownas(A, _).  [covers 4,0/14,0 pos, 0,0/0,0 neg]
%     Score = -0,179038 (regressionFit = 0,179034, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(C, A), teamalsoknownas(C, _).  [covers 6,0/14,0 pos, 0,0/0,0 neg]
%     Score = -0,186191 (regressionFit = 0,186188, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(_, A), teamalsoknownas(_, A).  [covers 3,0/14,0 pos, 0,0/0,0 neg]
%     Score = -0,177998 (regressionFit = 0,177995, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(C, A), teamalsoknownas(_, C).  [covers 5,0/14,0 pos, 0,0/0,0 neg]
%     Score = -0,158419 (regressionFit = 0,158416, penalties=3.04E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(C, A), teamplaysagainstteam(A, C).  [covers 8,0/14,0 pos, 0,0/0,0 neg]
%     Score = -0,133877 (regressionFit = 0,133874, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(_, A), teamplaysagainstteam(A, _).  [covers 9,0/14,0 pos, 0,0/0,0 neg]
%     Score = -0,112659 (regressionFit = 0,112656, penalties=3.1500000000000008E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(C, A), teamplaysagainstteam(C, _).  [covers 10,0/14,0 pos, 0,0/0,0 neg]
%     Score = -0,112659 (regressionFit = 0,112656, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(_, A), teamplaysagainstteam(_, A).  [covers 10,0/14,0 pos, 0,0/0,0 neg]
%     Score = -0,112659 (regressionFit = 0,112656, penalties=3.1500000000000008E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(C, A), teamplaysagainstteam(_, C).  [covers 10,0/14,0 pos, 0,0/0,0 neg]
%     Score = -0,186782 (regressionFit = 0,186779, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(_, A), teamplaysinleague(A, _).  [covers 3,0/14,0 pos, 0,0/0,0 neg]
%     Score = -0,173171 (regressionFit = 0,173168, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(C, A), teamplaysinleague(C, _).  [covers 6,0/14,0 pos, 0,0/0,0 neg]

% Consider expanding [#3 of outerLoop #7, bodyLen=2] 'teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(A, _).  [covers 9,0/14,0 pos, 0,0/0,0 neg]' score=-0.1338761687612678
%  At # nodes expanded = 3, |OPEN| = 7.  Pruned 22 variant children.  Sending 19 items to OPEN for evaluation and possible insertion.
% Have created 19 valid-on-seeds descendants and have picked up 8 bad extensions.
%     Score = -0,181850 (regressionFit = 0,181847, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(A, _), athleteledsportsteam(_, A).  [covers 3,0/14,0 pos, 0,0/0,0 neg]
%     Score = -0,186782 (regressionFit = 0,186779, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(A, C), athleteledsportsteam(_, C).  [covers 3,0/14,0 pos, 0,0/0,0 neg]
%     Score = -0,168315 (regressionFit = 0,168311, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(A, _), athleteplaysforteam(_, A).  [covers 6,0/14,0 pos, 0,0/0,0 neg]
%     Score = -0,158121 (regressionFit = 0,158118, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(A, C), athleteplaysforteam(_, C).  [covers 7,0/14,0 pos, 0,0/0,0 neg]
%     Score = -0,133877 (regressionFit = 0,133874, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysagainstteam(A, _), athleteplaysinleague(C, _).  [covers 9,0/14,0 pos, 0,0/0,0 neg]
%     Score = -0,133877 (regressionFit = 0,133874, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(A, _), athleteplayssport(_, B).  [covers 9,0/14,0 pos, 0,0/0,0 neg]
%     Score = -0,183084 (regressionFit = 0,183081, penalties=3.1400000000000004E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(A, C), teamalsoknownas(A, C).  [covers 3,0/14,0 pos, 0,0/0,0 neg]
%     Score = -0,186191 (regressionFit = 0,186188, penalties=3.1400000000000004E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(A, C), teamalsoknownas(C, A).  [covers 3,0/14,0 pos, 0,0/0,0 neg]
%     Score = -0,173523 (regressionFit = 0,173520, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(A, _), teamalsoknownas(A, _).  [covers 4,0/14,0 pos, 0,0/0,0 neg]
%     Score = -0,166877 (regressionFit = 0,166873, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(A, C), teamalsoknownas(C, _).  [covers 7,0/14,0 pos, 0,0/0,0 neg]
%     Score = -0,186191 (regressionFit = 0,186188, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(A, _), teamalsoknownas(_, A).  [covers 3,0/14,0 pos, 0,0/0,0 neg]
%     Score = -0,165694 (regressionFit = 0,165691, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(A, C), teamalsoknownas(_, C).  [covers 6,0/14,0 pos, 0,0/0,0 neg]
%     Score = -0,158419 (regressionFit = 0,158416, penalties=3.04E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(A, C), teamplaysagainstteam(C, A).  [covers 8,0/14,0 pos, 0,0/0,0 neg]
%     Score = -0,133877 (regressionFit = 0,133874, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(A, _), teamplaysagainstteam(A, _).  [covers 9,0/14,0 pos, 0,0/0,0 neg]
%     Score = -0,133877 (regressionFit = 0,133874, penalties=3.1500000000000008E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(A, C), teamplaysagainstteam(C, _).  [covers 9,0/14,0 pos, 0,0/0,0 neg]
%     Score = -0,133877 (regressionFit = 0,133874, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(A, _), teamplaysagainstteam(_, A).  [covers 9,0/14,0 pos, 0,0/0,0 neg]
%     Score = -0,133877 (regressionFit = 0,133874, penalties=3.1500000000000008E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(A, C), teamplaysagainstteam(_, C).  [covers 9,0/14,0 pos, 0,0/0,0 neg]
%     Score = -0,186782 (regressionFit = 0,186779, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(A, _), teamplaysinleague(A, _).  [covers 3,0/14,0 pos, 0,0/0,0 neg]
%     Score = -0,177998 (regressionFit = 0,177995, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(A, C), teamplaysinleague(C, _).  [covers 5,0/14,0 pos, 0,0/0,0 neg]

% Consider expanding [#4 of outerLoop #7, bodyLen=2] 'teamplayssport(A, B) :- athleteplayssport(_, B), athleteplaysforteam(_, A).  [covers 6,0/14,0 pos, 0,0/0,0 neg]' score=-0.1683136884451562
%  At # nodes expanded = 4, |OPEN| = 6.  Pruned 12 variant children.  Sending 10 items to OPEN for evaluation and possible insertion.
% Have created 10 valid-on-seeds descendants and have picked up 6 bad extensions.
%     Score = -0,181850 (regressionFit = 0,181847, penalties=3.1400000000000004E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), athleteplaysforteam(C, A), athleteledsportsteam(C, A).  [covers 3,0/14,0 pos, 0,0/0,0 neg]
%     Score = -0,181850 (regressionFit = 0,181847, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), athleteplaysforteam(_, A), athleteledsportsteam(_, A).  [covers 3,0/14,0 pos, 0,0/0,0 neg]
%     Score = -0,168315 (regressionFit = 0,168311, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), athleteplaysforteam(_, A), athleteplaysforteam(_, A).  [covers 6,0/14,0 pos, 0,0/0,0 neg]
%     Score = -0,168315 (regressionFit = 0,168311, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysforteam(_, A), athleteplaysinleague(C, _).  [covers 6,0/14,0 pos, 0,0/0,0 neg]
%     Score = -0,168315 (regressionFit = 0,168311, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), athleteplaysforteam(_, A), athleteplayssport(_, B).  [covers 6,0/14,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), athleteplaysforteam(_, A), teamalsoknownas(A, _).  [covers 1,0/14,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), athleteplaysforteam(_, A), teamalsoknownas(_, A).  [covers 2,0/14,0 pos, 0,0/0,0 neg]
%     Score = -0,168315 (regressionFit = 0,168311, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), athleteplaysforteam(_, A), teamplaysagainstteam(A, _).  [covers 6,0/14,0 pos, 0,0/0,0 neg]
%     Score = -0,168315 (regressionFit = 0,168311, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), athleteplaysforteam(_, A), teamplaysagainstteam(_, A).  [covers 6,0/14,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), athleteplaysforteam(_, A), teamplaysinleague(A, _).  [covers 2,0/14,0 pos, 0,0/0,0 neg]

% Consider expanding [#5 of outerLoop #7, bodyLen=2] 'teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _).  [covers 5,0/14,0 pos, 0,0/0,0 neg]' score=-0.1789548249852711
%  At # nodes expanded = 5, |OPEN| = 5.  Pruned 10 variant children.  Sending 9 items to OPEN for evaluation and possible insertion.
% Have created 9 valid-on-seeds descendants and have picked up 5 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), athleteledsportsteam(_, A).  [covers 2,0/14,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), athleteplaysforteam(_, A).  [covers 2,0/14,0 pos, 0,0/0,0 neg]
%     Score = -0,185467 (regressionFit = 0,185464, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, _), athleteplaysinleague(C, _).  [covers 4,0/14,0 pos, 0,0/0,0 neg]
%     Score = -0,178956 (regressionFit = 0,178953, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), athleteplayssport(_, B).  [covers 5,0/14,0 pos, 0,0/0,0 neg]
%     Score = -0,174738 (regressionFit = 0,174735, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), teamalsoknownas(A, _).  [covers 4,0/14,0 pos, 0,0/0,0 neg]
%     Score = -0,174738 (regressionFit = 0,174735, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), teamalsoknownas(_, A).  [covers 4,0/14,0 pos, 0,0/0,0 neg]
%     Score = -0,186782 (regressionFit = 0,186779, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), teamplaysagainstteam(A, _).  [covers 3,0/14,0 pos, 0,0/0,0 neg]
%     Score = -0,186782 (regressionFit = 0,186779, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), teamplaysagainstteam(_, A).  [covers 3,0/14,0 pos, 0,0/0,0 neg]
%     Score = -0,178956 (regressionFit = 0,178953, penalties=3.1500000000000008E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), teamplaysinleague(_, C).  [covers 5,0/14,0 pos, 0,0/0,0 neg]

% Consider expanding [#6 of outerLoop #7, bodyLen=2] 'teamplayssport(A, B) :- athleteplayssport(_, B), athleteledsportsteam(_, A).  [covers 3,0/14,0 pos, 0,0/0,0 neg]' score=-0.18184921142951743
%  At # nodes expanded = 6, |OPEN| = 4.  Pruned 12 variant children.  Sending 9 items to OPEN for evaluation and possible insertion.
% Have created 9 valid-on-seeds descendants and have picked up 6 bad extensions.
%     Score = -0,181850 (regressionFit = 0,181847, penalties=3.1400000000000004E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), athleteledsportsteam(C, A), athleteplaysforteam(C, A).  [covers 3,0/14,0 pos, 0,0/0,0 neg]
%     Score = -0,181850 (regressionFit = 0,181847, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), athleteledsportsteam(_, A), athleteplaysforteam(_, A).  [covers 3,0/14,0 pos, 0,0/0,0 neg]
%     Score = -0,181850 (regressionFit = 0,181847, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(_, A), athleteplaysinleague(C, _).  [covers 3,0/14,0 pos, 0,0/0,0 neg]
%     Score = -0,181850 (regressionFit = 0,181847, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), athleteledsportsteam(_, A), athleteplayssport(_, B).  [covers 3,0/14,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), athleteledsportsteam(_, A), teamalsoknownas(A, _).  [covers 1,0/14,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), athleteledsportsteam(_, A), teamalsoknownas(_, A).  [covers 1,0/14,0 pos, 0,0/0,0 neg]
%     Score = -0,181850 (regressionFit = 0,181847, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), athleteledsportsteam(_, A), teamplaysagainstteam(A, _).  [covers 3,0/14,0 pos, 0,0/0,0 neg]
%     Score = -0,181850 (regressionFit = 0,181847, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), athleteledsportsteam(_, A), teamplaysagainstteam(_, A).  [covers 3,0/14,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), athleteledsportsteam(_, A), teamplaysinleague(A, _).  [covers 2,0/14,0 pos, 0,0/0,0 neg]

% Consider expanding [#7 of outerLoop #7, bodyLen=2] 'teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(_, A).  [covers 6,0/14,0 pos, 0,0/0,0 neg]' score=-0.1837592402546851
%  At # nodes expanded = 7, |OPEN| = 3.  Pruned 22 variant children.  Sending 13 items to OPEN for evaluation and possible insertion.
% Have created 13 valid-on-seeds descendants and have picked up 8 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(_, A), athleteledsportsteam(_, A).  [covers 1,0/14,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(_, A), athleteplaysforteam(_, A).  [covers 2,0/14,0 pos, 0,0/0,0 neg]
%     Score = -0,182402 (regressionFit = 0,182399, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamalsoknownas(_, A), athleteplaysinleague(C, _).  [covers 5,0/14,0 pos, 0,0/0,0 neg]
%     Score = -0,183760 (regressionFit = 0,183757, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(_, A), athleteplayssport(_, B).  [covers 6,0/14,0 pos, 0,0/0,0 neg]
%     Score = -0,179718 (regressionFit = 0,179715, penalties=3.04E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(C, A), teamalsoknownas(A, C).  [covers 5,0/14,0 pos, 0,0/0,0 neg]
%     Score = -0,186191 (regressionFit = 0,186188, penalties=3.1400000000000004E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(C, A), teamplaysagainstteam(A, C).  [covers 3,0/14,0 pos, 0,0/0,0 neg]
%     Score = -0,186191 (regressionFit = 0,186188, penalties=3.1400000000000004E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(C, A), teamplaysagainstteam(C, A).  [covers 3,0/14,0 pos, 0,0/0,0 neg]
%     Score = -0,186191 (regressionFit = 0,186188, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(_, A), teamplaysagainstteam(A, _).  [covers 3,0/14,0 pos, 0,0/0,0 neg]
%     Score = -0,180941 (regressionFit = 0,180937, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(C, A), teamplaysagainstteam(C, _).  [covers 5,0/14,0 pos, 0,0/0,0 neg]
%     Score = -0,186191 (regressionFit = 0,186188, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(_, A), teamplaysagainstteam(_, A).  [covers 3,0/14,0 pos, 0,0/0,0 neg]
%     Score = -0,180941 (regressionFit = 0,180937, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(C, A), teamplaysagainstteam(_, C).  [covers 5,0/14,0 pos, 0,0/0,0 neg]
%     Score = -0,174738 (regressionFit = 0,174735, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(_, A), teamplaysinleague(A, _).  [covers 4,0/14,0 pos, 0,0/0,0 neg]
%     Score = -0,179718 (regressionFit = 0,179715, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(C, A), teamplaysinleague(C, _).  [covers 5,0/14,0 pos, 0,0/0,0 neg]

% Consider expanding [#8 of outerLoop #7, bodyLen=2] 'teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(A, _).  [covers 7,0/14,0 pos, 0,0/0,0 neg]' score=-0.18634435436519398
%  At # nodes expanded = 8, |OPEN| = 2.  Pruned 22 variant children.  Sending 16 items to OPEN for evaluation and possible insertion.
% Have created 16 valid-on-seeds descendants and have picked up 8 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(A, _), athleteledsportsteam(_, A).  [covers 1,0/14,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(A, _), athleteplaysforteam(_, A).  [covers 1,0/14,0 pos, 0,0/0,0 neg]
%     Score = -0,182423 (regressionFit = 0,182420, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(A, C), athleteplaysforteam(_, C).  [covers 3,0/14,0 pos, 0,0/0,0 neg]
%     Score = -0,165064 (regressionFit = 0,165061, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamalsoknownas(A, _), athleteplaysinleague(C, _).  [covers 6,0/14,0 pos, 0,0/0,0 neg]
%     Score = -0,186345 (regressionFit = 0,186342, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(A, _), athleteplayssport(_, B).  [covers 7,0/14,0 pos, 0,0/0,0 neg]
%     Score = -0,179718 (regressionFit = 0,179715, penalties=3.04E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(A, C), teamalsoknownas(C, A).  [covers 5,0/14,0 pos, 0,0/0,0 neg]
%     Score = -0,186180 (regressionFit = 0,186177, penalties=3.1500000000000008E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(A, C), teamalsoknownas(C, _).  [covers 6,0/14,0 pos, 0,0/0,0 neg]
%     Score = -0,186345 (regressionFit = 0,186342, penalties=3.1500000000000008E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(A, C), teamalsoknownas(_, C).  [covers 7,0/14,0 pos, 0,0/0,0 neg]
%     Score = -0,183084 (regressionFit = 0,183081, penalties=3.1400000000000004E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(A, C), teamplaysagainstteam(A, C).  [covers 3,0/14,0 pos, 0,0/0,0 neg]
%     Score = -0,183084 (regressionFit = 0,183081, penalties=3.1400000000000004E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(A, C), teamplaysagainstteam(C, A).  [covers 3,0/14,0 pos, 0,0/0,0 neg]
%     Score = -0,173523 (regressionFit = 0,173520, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(A, _), teamplaysagainstteam(A, _).  [covers 4,0/14,0 pos, 0,0/0,0 neg]
%     Score = -0,180153 (regressionFit = 0,180149, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(A, C), teamplaysagainstteam(C, _).  [covers 4,0/14,0 pos, 0,0/0,0 neg]
%     Score = -0,173523 (regressionFit = 0,173520, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(A, _), teamplaysagainstteam(_, A).  [covers 4,0/14,0 pos, 0,0/0,0 neg]
%     Score = -0,180153 (regressionFit = 0,180149, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(A, C), teamplaysagainstteam(_, C).  [covers 4,0/14,0 pos, 0,0/0,0 neg]
%     Score = -0,174738 (regressionFit = 0,174735, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(A, _), teamplaysinleague(A, _).  [covers 4,0/14,0 pos, 0,0/0,0 neg]
%     Score = -0,186181 (regressionFit = 0,186177, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(A, C), teamplaysinleague(C, _).  [covers 6,0/14,0 pos, 0,0/0,0 neg]

% Consider expanding [#9 of outerLoop #7, bodyLen=2] 'teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _).  [covers 12,0/14,0 pos, 0,0/0,0 neg]' score=-Infinity
%  At # nodes expanded = 9, |OPEN| = 1.  Pruned 10 variant children.  Sending 10 items to OPEN for evaluation and possible insertion.
% Have created 10 valid-on-seeds descendants and have picked up 5 bad extensions.
%     Score = -0,181850 (regressionFit = 0,181847, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(_, A).  [covers 3,0/14,0 pos, 0,0/0,0 neg]
%     Score = -0,168315 (regressionFit = 0,168311, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteplaysforteam(_, A).  [covers 6,0/14,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000008E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, C), athleteplaysinleague(_, C).  [covers 12,0/14,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteplayssport(_, A).  [covers 12,0/14,0 pos, 0,0/0,0 neg]
%     Score = -0,165064 (regressionFit = 0,165061, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(A, _).  [covers 6,0/14,0 pos, 0,0/0,0 neg]
%     Score = -0,182402 (regressionFit = 0,182399, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(_, A).  [covers 5,0/14,0 pos, 0,0/0,0 neg]
%     Score = -0,133877 (regressionFit = 0,133874, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(A, _).  [covers 9,0/14,0 pos, 0,0/0,0 neg]
%     Score = -0,112659 (regressionFit = 0,112656, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(_, A).  [covers 10,0/14,0 pos, 0,0/0,0 neg]
%     Score = -0,185467 (regressionFit = 0,185464, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysinleague(A, _).  [covers 4,0/14,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, C), teamplaysinleague(_, C).  [covers 12,0/14,0 pos, 0,0/0,0 neg]

***** Warning: #22 TOO MANY NODES CONSIDERED (i.e., 'expanded') for 'LearnOneClause': nodesConsidered = 10 and maxNodesToConsider = 10. *****


% The best node found: teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(_, A).  [covers 10,0/14,0 pos, 0,0/0,0 neg]

% The best node found: teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(_, A).  [covers 10,0/14,0 pos, 0,0/0,0 neg]

% Expanding node at Level 3 with score = -0,013.
% Will extend: teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(_, A).  [covers 10,0/14,0 pos, 0,0/0,0 neg]
% Path: 3;true,false,false
Comparing variance: 0.001381380311621383 to score=0.0025 #egs=10.0
Comparing variance: 0.02471058794622616 to score=0.0025 #egs=4.0
%   Creating a TRUE-branch and FALSE-branch leaves because level = 3 >= 3

% Time for loop #7: 186 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #7, the best clause found is:
%      teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(_, A).  [covers 10,0/14,0 pos, 0,0/0,0 neg]
% This clause covers 10 positive examples, of which 10 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 7 positive seeds: 44 108 330 465 541 582 608
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = teamplayssport(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  teamplayssport(_, _).  [covers 769,0/769,0 pos, 0,0/0,0 neg]
% Most-general root: teamplayssport(_, _).  [covers 769,0/769,0 pos, 0,0/0,0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #8, bodyLen=0] 'teamplayssport(_, _).  [covers 769,0/769,0 pos, 0,0/0,0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 4 variant children.  Sending 6 items to OPEN for evaluation and possible insertion.
% Have created 6 valid-on-seeds descendants and have picked up 4 bad extensions.
%     Score = -2,901821 (regressionFit = 2,901820, penalties=1.23E-6) for clause:  teamplayssport(A, _) :- athleteplaysforteam(_, A).  [covers 350,0/769,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -2,901821): teamplayssport(A, _) :- athleteplaysforteam(_, A).  [covers 350,0/769,0 pos, 0,0/0,0 neg]
%     Score = -2,902002 (regressionFit = 2,902001, penalties=1.23E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(A, _).  [covers 178,0/769,0 pos, 0,0/0,0 neg]
%     Score = -2,893317 (regressionFit = 2,893316, penalties=1.23E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(_, A).  [covers 153,0/769,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -2,893317): teamplayssport(A, _) :- teamalsoknownas(_, A).  [covers 153,0/769,0 pos, 0,0/0,0 neg]
%     Score = -2,900787 (regressionFit = 2,900786, penalties=1.23E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, _).  [covers 437,0/769,0 pos, 0,0/0,0 neg]
%     Score = -2,901441 (regressionFit = 2,901439, penalties=1.23E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(_, A).  [covers 476,0/769,0 pos, 0,0/0,0 neg]
%     Score = -2,894546 (regressionFit = 2,894545, penalties=1.23E-6) for clause:  teamplayssport(A, _) :- teamplaysinleague(A, _).  [covers 586,0/769,0 pos, 0,0/0,0 neg]

% Consider expanding [#2 of outerLoop #8, bodyLen=1] 'teamplayssport(A, _) :- teamalsoknownas(_, A).  [covers 153,0/769,0 pos, 0,0/0,0 neg]' score=-2.8933170609476924
%  At # nodes expanded = 2, |OPEN| = 5.  Pruned 14 variant children.  Sending 10 items to OPEN for evaluation and possible insertion.
% Have created 10 valid-on-seeds descendants and have picked up 9 bad extensions.
%     Score = -2,900970 (regressionFit = 2,900968, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteledsportsteam(_, B).  [covers 47,0/769,0 pos, 0,0/0,0 neg]
%     Score = -2,897471 (regressionFit = 2,897468, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), athleteplaysforteam(_, B).  [covers 63,0/769,0 pos, 0,0/0,0 neg]
%     Score = -2,900287 (regressionFit = 2,900285, penalties=2.0300000000000005E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(A, B).  [covers 92,0/769,0 pos, 0,0/0,0 neg]
%     Score = -2,893318 (regressionFit = 2,893316, penalties=2.1400000000000003E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(B, _).  [covers 153,0/769,0 pos, 0,0/0,0 neg]
%     Score = -2,890302 (regressionFit = 2,890300, penalties=2.1400000000000003E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(_, B).  [covers 125,0/769,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -2,890302): teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(_, B).  [covers 125,0/769,0 pos, 0,0/0,0 neg]
%     Score = -2,897677 (regressionFit = 2,897675, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamplaysagainstteam(B, _).  [covers 64,0/769,0 pos, 0,0/0,0 neg]
%     Score = -2,870518 (regressionFit = 2,870516, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(_, A), teamplaysagainstteam(_, A).  [covers 81,0/769,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -2,870518): teamplayssport(A, _) :- teamalsoknownas(_, A), teamplaysagainstteam(_, A).  [covers 81,0/769,0 pos, 0,0/0,0 neg]
%     Score = -2,897677 (regressionFit = 2,897675, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamplaysagainstteam(_, B).  [covers 64,0/769,0 pos, 0,0/0,0 neg]
%     Score = -2,900986 (regressionFit = 2,900984, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(_, A), teamplaysinleague(A, _).  [covers 109,0/769,0 pos, 0,0/0,0 neg]
%     Score = -2,892217 (regressionFit = 2,892214, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamplaysinleague(B, _).  [covers 145,0/769,0 pos, 0,0/0,0 neg]

% Consider expanding [#3 of outerLoop #8, bodyLen=1] 'teamplayssport(A, _) :- teamplaysinleague(A, _).  [covers 586,0/769,0 pos, 0,0/0,0 neg]' score=-2.894546258412204
%  At # nodes expanded = 3, |OPEN| = 4.  Pruned 4 variant children.  Sending 7 items to OPEN for evaluation and possible insertion.
% Have created 7 valid-on-seeds descendants and have picked up 4 bad extensions.
%     Score = -2,901957 (regressionFit = 2,901955, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysinleague(A, _), athleteplaysforteam(_, A).  [covers 333,0/769,0 pos, 0,0/0,0 neg]
%     Score = -2,900790 (regressionFit = 2,900787, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysinleague(A, B), athleteplaysinleague(_, B).  [covers 461,0/769,0 pos, 0,0/0,0 neg]
%     Score = -2,898737 (regressionFit = 2,898735, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysinleague(A, _), teamalsoknownas(A, _).  [covers 126,0/769,0 pos, 0,0/0,0 neg]
%     Score = -2,900986 (regressionFit = 2,900984, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysinleague(A, _), teamalsoknownas(_, A).  [covers 109,0/769,0 pos, 0,0/0,0 neg]
%     Score = -2,901531 (regressionFit = 2,901529, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysinleague(A, _), teamplaysagainstteam(A, _).  [covers 396,0/769,0 pos, 0,0/0,0 neg]
%     Score = -2,901297 (regressionFit = 2,901295, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysinleague(A, _), teamplaysagainstteam(_, A).  [covers 417,0/769,0 pos, 0,0/0,0 neg]
%     Score = -2,894547 (regressionFit = 2,894545, penalties=2.1400000000000003E-6) for clause:  teamplayssport(A, _) :- teamplaysinleague(A, B), teamplaysinleague(_, B).  [covers 586,0/769,0 pos, 0,0/0,0 neg]

% Consider expanding [#4 of outerLoop #8, bodyLen=1] 'teamplayssport(A, _) :- teamplaysagainstteam(A, _).  [covers 437,0/769,0 pos, 0,0/0,0 neg]' score=-2.9007873622819993
%  At # nodes expanded = 4, |OPEN| = 3.  Pruned 14 variant children.  Sending 12 items to OPEN for evaluation and possible insertion.
% Have created 12 valid-on-seeds descendants and have picked up 8 bad extensions.
%     Score = -2,901842 (regressionFit = 2,901840, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, B), athleteledsportsteam(_, B).  [covers 365,0/769,0 pos, 0,0/0,0 neg]
%     Score = -2,901911 (regressionFit = 2,901909, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, _), athleteplaysforteam(_, A).  [covers 335,0/769,0 pos, 0,0/0,0 neg]
%     Score = -2,900390 (regressionFit = 2,900388, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, B), athleteplaysforteam(_, B).  [covers 418,0/769,0 pos, 0,0/0,0 neg]
%     Score = -2,898262 (regressionFit = 2,898259, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, B), teamalsoknownas(B, _).  [covers 322,0/769,0 pos, 0,0/0,0 neg]
%     Score = -2,896802 (regressionFit = 2,896800, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, B), teamalsoknownas(_, B).  [covers 323,0/769,0 pos, 0,0/0,0 neg]
%     Score = -2,900465 (regressionFit = 2,900463, penalties=2.0300000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, B), teamplaysagainstteam(B, A).  [covers 417,0/769,0 pos, 0,0/0,0 neg]
%     Score = -2,900788 (regressionFit = 2,900786, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, _), teamplaysagainstteam(A, _).  [covers 437,0/769,0 pos, 0,0/0,0 neg]
%     Score = -2,900761 (regressionFit = 2,900758, penalties=2.1400000000000003E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, B), teamplaysagainstteam(B, _).  [covers 435,0/769,0 pos, 0,0/0,0 neg]
%     Score = -2,900704 (regressionFit = 2,900702, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, _), teamplaysagainstteam(_, A).  [covers 431,0/769,0 pos, 0,0/0,0 neg]
%     Score = -2,900788 (regressionFit = 2,900786, penalties=2.1400000000000003E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, B), teamplaysagainstteam(_, B).  [covers 437,0/769,0 pos, 0,0/0,0 neg]
%     Score = -2,901531 (regressionFit = 2,901529, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, _), teamplaysinleague(A, _).  [covers 396,0/769,0 pos, 0,0/0,0 neg]
%     Score = -2,900618 (regressionFit = 2,900616, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, B), teamplaysinleague(B, _).  [covers 430,0/769,0 pos, 0,0/0,0 neg]

% Consider expanding [#5 of outerLoop #8, bodyLen=1] 'teamplayssport(A, _) :- teamplaysagainstteam(_, A).  [covers 476,0/769,0 pos, 0,0/0,0 neg]' score=-2.90144069478642
%  At # nodes expanded = 5, |OPEN| = 2.  Pruned 14 variant children.  Sending 13 items to OPEN for evaluation and possible insertion.
% Have created 13 valid-on-seeds descendants and have picked up 8 bad extensions.
%     Score = -2,901632 (regressionFit = 2,901630, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(B, A), athleteledsportsteam(_, B).  [covers 393,0/769,0 pos, 0,0/0,0 neg]
%     Score = -2,901880 (regressionFit = 2,901878, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(_, A), athleteplaysforteam(_, A).  [covers 341,0/769,0 pos, 0,0/0,0 neg]
%     Score = -2,901047 (regressionFit = 2,901045, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(B, A), athleteplaysforteam(_, B).  [covers 450,0/769,0 pos, 0,0/0,0 neg]
%     Score = -2,897993 (regressionFit = 2,897990, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(_, A), teamalsoknownas(A, _).  [covers 95,0/769,0 pos, 0,0/0,0 neg]
%     Score = -2,899130 (regressionFit = 2,899128, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(B, A), teamalsoknownas(B, _).  [covers 342,0/769,0 pos, 0,0/0,0 neg]
%     Score = -2,870518 (regressionFit = 2,870516, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(_, A), teamalsoknownas(_, A).  [covers 81,0/769,0 pos, 0,0/0,0 neg]
%     Score = -2,900465 (regressionFit = 2,900463, penalties=2.0300000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(B, A), teamplaysagainstteam(A, B).  [covers 417,0/769,0 pos, 0,0/0,0 neg]
%     Score = -2,900704 (regressionFit = 2,900702, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(_, A), teamplaysagainstteam(A, _).  [covers 431,0/769,0 pos, 0,0/0,0 neg]
%     Score = -2,901442 (regressionFit = 2,901439, penalties=2.1400000000000003E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(B, A), teamplaysagainstteam(B, _).  [covers 476,0/769,0 pos, 0,0/0,0 neg]
%     Score = -2,901442 (regressionFit = 2,901439, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(_, A), teamplaysagainstteam(_, A).  [covers 476,0/769,0 pos, 0,0/0,0 neg]
%     Score = -2,901442 (regressionFit = 2,901439, penalties=2.1400000000000003E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(B, A), teamplaysagainstteam(_, B).  [covers 476,0/769,0 pos, 0,0/0,0 neg]
%     Score = -2,901297 (regressionFit = 2,901295, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(_, A), teamplaysinleague(A, _).  [covers 417,0/769,0 pos, 0,0/0,0 neg]
%     Score = -2,901331 (regressionFit = 2,901329, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(B, A), teamplaysinleague(B, _).  [covers 470,0/769,0 pos, 0,0/0,0 neg]

% Consider expanding [#6 of outerLoop #8, bodyLen=1] 'teamplayssport(A, _) :- athleteplaysforteam(_, A).  [covers 350,0/769,0 pos, 0,0/0,0 neg]' score=-2.901821458235459
%  At # nodes expanded = 6, |OPEN| = 1.  Pruned 8 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants and have picked up 5 bad extensions.
%     Score = -2,901911 (regressionFit = 2,901909, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- athleteplaysforteam(_, A), teamplaysagainstteam(A, _).  [covers 335,0/769,0 pos, 0,0/0,0 neg]
%     Score = -2,901880 (regressionFit = 2,901878, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- athleteplaysforteam(_, A), teamplaysagainstteam(_, A).  [covers 341,0/769,0 pos, 0,0/0,0 neg]
%     Score = -2,901957 (regressionFit = 2,901955, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- athleteplaysforteam(_, A), teamplaysinleague(A, _).  [covers 333,0/769,0 pos, 0,0/0,0 neg]

% Consider expanding [#7 of outerLoop #8, bodyLen=1] 'teamplayssport(A, _) :- teamalsoknownas(A, _).  [covers 178,0/769,0 pos, 0,0/0,0 neg]' score=-2.902002310333538
%  At # nodes expanded = 7, |OPEN| = 0.  Pruned 14 variant children.  Sending 6 items to OPEN for evaluation and possible insertion.
% Have created 6 valid-on-seeds descendants and have picked up 11 bad extensions.
%     Score = -2,900287 (regressionFit = 2,900285, penalties=2.0300000000000005E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(A, B), teamalsoknownas(B, A).  [covers 92,0/769,0 pos, 0,0/0,0 neg]
%     Score = -2,901845 (regressionFit = 2,901843, penalties=2.1400000000000003E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(A, B), teamalsoknownas(B, _).  [covers 155,0/769,0 pos, 0,0/0,0 neg]
%     Score = -2,902003 (regressionFit = 2,902001, penalties=2.1400000000000003E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(A, B), teamalsoknownas(_, B).  [covers 178,0/769,0 pos, 0,0/0,0 neg]
%     Score = -2,897993 (regressionFit = 2,897990, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(A, _), teamplaysagainstteam(_, A).  [covers 95,0/769,0 pos, 0,0/0,0 neg]
%     Score = -2,898737 (regressionFit = 2,898735, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(A, _), teamplaysinleague(A, _).  [covers 126,0/769,0 pos, 0,0/0,0 neg]
%     Score = -2,901881 (regressionFit = 2,901879, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(A, B), teamplaysinleague(B, _).  [covers 163,0/769,0 pos, 0,0/0,0 neg]

% The best node found: teamplayssport(A, _) :- teamalsoknownas(_, A), teamplaysagainstteam(_, A).  [covers 81,0/769,0 pos, 0,0/0,0 neg]

% The best node found: teamplayssport(A, _) :- teamalsoknownas(_, A), teamplaysagainstteam(_, A).  [covers 81,0/769,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,004.
% Will extend: teamplayssport(A, _) :- teamalsoknownas(_, A), teamplaysagainstteam(_, A).  [covers 81,0/769,0 pos, 0,0/0,0 neg]
% Path: 3;false
Comparing variance: 0.023084712867270978 to score=0.0025 #egs=81.0
Comparing variance: 0.0014544394782604105 to score=0.0025 #egs=688.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 81,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,023085)
%         ILP node to extend: teamplayssport(A, _) :- teamalsoknownas(_, A), teamplaysagainstteam(_, A).  [covers 81,0/769,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -0,023085) into position #1 in the search queue (new size=2).
%   Creating a FALSE-branch leaf because good enough fit since score < 0.0025

% Time for loop #8: 260 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #8, the best clause found is:
%      teamplayssport(A, _) :- teamalsoknownas(_, A), teamplaysagainstteam(_, A).  [covers 81,0/769,0 pos, 0,0/0,0 neg]
% This clause covers 81 positive examples, of which 81 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% ******************************************

% Have stopped ILP's outer loop because have reached the maximum number of learned clauses (8).

% ******************************************
Created a leaf under (teamplayssport(D, E) :- teamalsoknownas(Anon120657, D), teamplaysagainstteam(Anon120771, D))
Created a leaf under (teamplayssport(D, E) :- athleteplaysforteam(Anon92005, Anon115587), athleteledsportsteam(Anon116089, Anon115587))

%%%%%  WILL-Produced Tree #4 @ 13:26:43 10/22/21.  [Using 33.511.976 memory cells.]  %%%%%


% FOR teamplayssport(A, B):
%   if ( athleteplayssport(C, B) )
%   then if ( teamplaysinleague(A, D), athleteplaysinleague(E, D) )
%   | then if ( athleteledsportsteam(C, F) )
%   | | then if ( athleteplaysforteam(G, A) )
%   | | | then return 0.42645128640361574;  // std dev = 0,203, 156,000 (wgt'ed) examples reached here.  /* #pos=156 */
%   | | | else return 0.39278571266274354;  // std dev = 1,397, 68,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=66 */
%   | | else if ( teamplaysagainstteam(A, H) )
%   | | | then return 0.037330628731241544;  // std dev = 0,811, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.45244297825785945;  // std dev = 0,051, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( athleteplaysforteam(C, I), athleteledsportsteam(J, I) )
%   | | then return 0.4261127009559929;  // std dev = 0,060, 154,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=153 */
%   | | else if ( teamplaysagainstteam(K, A) )
%   | | | then return 0.4746457326529844;  // std dev = 0,118, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.6359398851835663;  // std dev = 0,314, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( teamalsoknownas(L, A), teamplaysagainstteam(M, A) )
%   | then return -0.08069192813254944;  // std dev = 0,152, 81,000 (wgt'ed) examples reached here.  /* #neg=79 #pos=2 */
%   | else return -0.10155736531217101;  // std dev = 1,000, 688,000 (wgt'ed) examples reached here.  /* #neg=687 #pos=1 */


% Clauses:

teamplayssport(A, B, 0.42645128640361574) :- 
     athleteplayssport(C, B), 
     teamplaysinleague(A, D), 
     athleteplaysinleague(E, D), 
     athleteledsportsteam(C, F), 
     athleteplaysforteam(G, A), 
     !. // Clause #1.

teamplayssport(A, B, 0.39278571266274354) :- 
     athleteplayssport(C, B), 
     teamplaysinleague(A, D), 
     athleteplaysinleague(E, D), 
     athleteledsportsteam(C, F), 
     !. // Clause #2.

teamplayssport(A, B, 0.037330628731241544) :- 
     athleteplayssport(C, B), 
     teamplaysinleague(A, D), 
     athleteplaysinleague(E, D), 
     teamplaysagainstteam(A, F), 
     !. // Clause #3.

teamplayssport(A, B, 0.45244297825785945) :- 
     athleteplayssport(C, B), 
     teamplaysinleague(A, D), 
     athleteplaysinleague(E, D), 
     !. // Clause #4.

teamplayssport(A, B, 0.4261127009559929) :- 
     athleteplayssport(C, B), 
     athleteplaysforteam(C, D), 
     athleteledsportsteam(E, D), 
     !. // Clause #5.

teamplayssport(A, B, 0.4746457326529844) :- 
     athleteplayssport(C, B), 
     teamplaysagainstteam(D, A), 
     !. // Clause #6.

teamplayssport(A, B, 0.6359398851835663) :- 
     athleteplayssport(C, B), 
     !. // Clause #7.

teamplayssport(A, B, -0.08069192813254944) :- 
     teamalsoknownas(C, A), 
     teamplaysagainstteam(D, A), 
     !. // Clause #8.

teamplayssport(A, B, -0.10155736531217101) :- !. // Clause #9.


% The flattened versions of these clauses:

flattened_teamplayssport(a, b, 0.42645128640361574) :-  /* #pos=156 */ 
   athleteplayssport(uniqueVar33, b),
   teamplaysinleague(a, uniqueVar34),
   athleteplaysinleague(underscore, uniqueVar34),
   athleteledsportsteam(uniqueVar33, underscore),
   athleteplaysforteam(underscore, a),
   !. // Flattened version of clause #1.

flattened_teamplayssport(a, b, 0.39278571266274354) :-  /* #neg=2 #pos=66 */ 
   athleteplayssport(uniqueVar35, b),
   teamplaysinleague(a, uniqueVar36),
   athleteplaysinleague(underscore, uniqueVar36),
   athleteledsportsteam(uniqueVar35, underscore),
   !. // Flattened version of clause #2.

flattened_teamplayssport(a, b, 0.037330628731241544) :-  /* #neg=2 #pos=2 */ 
   athleteplayssport(underscore, b),
   teamplaysinleague(a, uniqueVar37),
   athleteplaysinleague(underscore, uniqueVar37),
   teamplaysagainstteam(a, underscore),
   !. // Flattened version of clause #3.

flattened_teamplayssport(a, b, 0.45244297825785945) :-  /* #pos=3 */ 
   athleteplayssport(underscore, b),
   teamplaysinleague(a, uniqueVar38),
   athleteplaysinleague(underscore, uniqueVar38),
   !. // Flattened version of clause #4.

flattened_teamplayssport(underscore, a, 0.4261127009559929) :-  /* #neg=1 #pos=153 */ 
   athleteplayssport(uniqueVar39, a),
   athleteplaysforteam(uniqueVar39, uniqueVar40),
   athleteledsportsteam(underscore, uniqueVar40),
   !. // Flattened version of clause #5.

flattened_teamplayssport(a, b, 0.4746457326529844) :-  /* #pos=10 */ 
   athleteplayssport(underscore, b),
   teamplaysagainstteam(underscore, a),
   !. // Flattened version of clause #6.

flattened_teamplayssport(underscore, a, 0.6359398851835663) :-  /* #pos=4 */ 
   athleteplayssport(underscore, a),
   !. // Flattened version of clause #7.

flattened_teamplayssport(a, underscore, -0.08069192813254944) :-  /* #neg=79 #pos=2 */ 
   teamalsoknownas(underscore, a),
   teamplaysagainstteam(underscore, a),
   !. // Flattened version of clause #8.

flattened_teamplayssport(underscore, underscore, -0.10155736531217101) :-  /* #neg=687 #pos=1 */ 
   !. // Flattened version of clause #9.


% The unique flattened literals:
%   athleteplayssport(uniqueVar35, b)
%   teamplaysagainstteam(underscore, a)
%   teamplaysinleague(a, uniqueVar34)
%   athleteledsportsteam(uniqueVar35, underscore)
%   athleteplayssport(underscore, b)
%   teamplaysinleague(a, uniqueVar38)
%   teamplaysinleague(a, uniqueVar36)
%   teamplaysagainstteam(a, underscore)
%   athleteplaysinleague(underscore, uniqueVar37)
%   athleteplayssport(uniqueVar39, a)
%   athleteplaysinleague(underscore, uniqueVar34)
%   athleteledsportsteam(uniqueVar33, underscore)
%   athleteplaysinleague(underscore, uniqueVar36)
%   athleteplayssport(uniqueVar33, b)
%   athleteplayssport(underscore, a)
%   athleteledsportsteam(underscore, uniqueVar40)
%   teamplaysinleague(a, uniqueVar37)
%   athleteplaysforteam(uniqueVar39, uniqueVar40)
%   athleteplaysforteam(underscore, a)
%   athleteplaysinleague(underscore, uniqueVar38)
%   teamalsoknownas(underscore, a)

% Saving model in: train/models/bRDNs/teamplayssport.model.ckpt
% Time taken to learn 4 trees is 5 minutes and 46,730 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.00377381833769754
Set score:9.43454584424385E-4
% Only 1168 out of 1168 converged.
% Kept 397 of the 397 positive examples.
% Kept 805 of the 159.991 negative examples.
% Dataset size: 1.202
Computing probabilities
prob time:5 seconds
No hidden examples for : teamplayssport
Time to build dataset: 5 seconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.045433470637734445
Set score:9.43454584424385E-4
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Have these 7 positive seeds: 85 148 232 252 362 438 593
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = teamplayssport(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  teamplayssport(_, _).  [covers 1.202,0/1.202,0 pos, 0,0/0,0 neg]
% Most-general root: teamplayssport(_, _).  [covers 1.202,0/1.202,0 pos, 0,0/0,0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #1, bodyLen=0] 'teamplayssport(_, _).  [covers 1.202,0/1.202,0 pos, 0,0/0,0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 4 variant children.  Sending 8 items to OPEN for evaluation and possible insertion.
% Have created 8 valid-on-seeds descendants and have picked up 2 bad extensions.
%     Score = -54,588646 (regressionFit = 54,588645, penalties=1.23E-6) for clause:  teamplayssport(A, _) :- athleteledsportsteam(_, A).  [covers 339,0/1.202,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -54,588646): teamplayssport(A, _) :- athleteledsportsteam(_, A).  [covers 339,0/1.202,0 pos, 0,0/0,0 neg]
%     Score = -54,611024 (regressionFit = 54,611023, penalties=1.23E-6) for clause:  teamplayssport(A, _) :- athleteplaysforteam(_, A).  [covers 547,0/1.202,0 pos, 0,0/0,0 neg]
%     Score = -12,127749 (regressionFit = 12,127748, penalties=1.23E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(_, A).  [covers 407,0/1.202,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -12,127749): teamplayssport(_, A) :- athleteplayssport(_, A).  [covers 407,0/1.202,0 pos, 0,0/0,0 neg]
%     Score = -54,595766 (regressionFit = 54,595765, penalties=1.23E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(A, _).  [covers 267,0/1.202,0 pos, 0,0/0,0 neg]
%     Score = -54,542333 (regressionFit = 54,542332, penalties=1.23E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(_, A).  [covers 204,0/1.202,0 pos, 0,0/0,0 neg]
%     Score = -54,610845 (regressionFit = 54,610844, penalties=1.23E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, _).  [covers 684,0/1.202,0 pos, 0,0/0,0 neg]
%     Score = -54,604763 (regressionFit = 54,604762, penalties=1.23E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(_, A).  [covers 728,0/1.202,0 pos, 0,0/0,0 neg]
%     Score = -54,595500 (regressionFit = 54,595499, penalties=1.23E-6) for clause:  teamplayssport(A, _) :- teamplaysinleague(A, _).  [covers 929,0/1.202,0 pos, 0,0/0,0 neg]

% Consider expanding [#2 of outerLoop #1, bodyLen=1] 'teamplayssport(_, A) :- athleteplayssport(_, A).  [covers 407,0/1.202,0 pos, 0,0/0,0 neg]' score=-12.127748927472835
%  At # nodes expanded = 2, |OPEN| = 7.  Pruned 8 variant children.  Sending 10 items to OPEN for evaluation and possible insertion.
% Have created 10 valid-on-seeds descendants and have picked up 4 bad extensions.
%     Score = -14,030250 (regressionFit = 14,030248, penalties=2.24E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteledsportsteam(B, _).  [covers 379,0/1.202,0 pos, 0,0/0,0 neg]
%     Score = -13,680958 (regressionFit = 13,680956, penalties=2.24E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysforteam(B, _).  [covers 384,0/1.202,0 pos, 0,0/0,0 neg]
%     Score = -38,949506 (regressionFit = 38,949504, penalties=2.24E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), athleteplaysforteam(_, A).  [covers 183,0/1.202,0 pos, 0,0/0,0 neg]
%     Score = -12,690296 (regressionFit = 12,690294, penalties=2.24E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _).  [covers 400,0/1.202,0 pos, 0,0/0,0 neg]
%     Score = -12,127750 (regressionFit = 12,127748, penalties=2.24E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(_, A), athleteplayssport(_, A).  [covers 407,0/1.202,0 pos, 0,0/0,0 neg]
%     Score = -47,265432 (regressionFit = 47,265430, penalties=2.24E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(A, _).  [covers 93,0/1.202,0 pos, 0,0/0,0 neg]
%     Score = -48,788360 (regressionFit = 48,788358, penalties=2.24E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(_, A).  [covers 73,0/1.202,0 pos, 0,0/0,0 neg]
%     Score = -34,544029 (regressionFit = 34,544027, penalties=2.24E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(A, _).  [covers 229,0/1.202,0 pos, 0,0/0,0 neg]
%     Score = -32,444097 (regressionFit = 32,444095, penalties=2.24E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(_, A).  [covers 246,0/1.202,0 pos, 0,0/0,0 neg]
%     Score = -25,598692 (regressionFit = 25,598689, penalties=2.24E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _).  [covers 314,0/1.202,0 pos, 0,0/0,0 neg]

% Consider expanding [#3 of outerLoop #1, bodyLen=1] 'teamplayssport(A, _) :- teamalsoknownas(_, A).  [covers 204,0/1.202,0 pos, 0,0/0,0 neg]' score=-54.54233289380078
%  At # nodes expanded = 3, |OPEN| = 6.  Pruned 14 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 11 bad extensions.
%     Score = -48,788360 (regressionFit = 48,788358, penalties=2.24E-6) for clause:  teamplayssport(A, B) :- teamalsoknownas(_, A), athleteplayssport(_, B).  [covers 73,0/1.202,0 pos, 0,0/0,0 neg]
%     Score = -54,597038 (regressionFit = 54,597036, penalties=2.0300000000000005E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(A, B).  [covers 126,0/1.202,0 pos, 0,0/0,0 neg]
%     Score = -54,542334 (regressionFit = 54,542332, penalties=2.1400000000000003E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(B, _).  [covers 204,0/1.202,0 pos, 0,0/0,0 neg]
%     Score = -54,555742 (regressionFit = 54,555740, penalties=2.1400000000000003E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(_, B).  [covers 172,0/1.202,0 pos, 0,0/0,0 neg]
%     Score = -54,521748 (regressionFit = 54,521745, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamplaysinleague(B, _).  [covers 192,0/1.202,0 pos, 0,0/0,0 neg]

% Consider expanding [#4 of outerLoop #1, bodyLen=1] 'teamplayssport(A, _) :- athleteledsportsteam(_, A).  [covers 339,0/1.202,0 pos, 0,0/0,0 neg]' score=-54.58864588235969
%  At # nodes expanded = 4, |OPEN| = 5.  Pruned 8 variant children.  Sending 9 items to OPEN for evaluation and possible insertion.
% Have created 9 valid-on-seeds descendants and have picked up 3 bad extensions.
%     Score = -54,588647 (regressionFit = 54,588645, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- athleteledsportsteam(_, A), athleteledsportsteam(_, A).  [covers 339,0/1.202,0 pos, 0,0/0,0 neg]
%     Score = -54,604633 (regressionFit = 54,604631, penalties=2.1300000000000004E-6) for clause:  teamplayssport(A, _) :- athleteledsportsteam(B, A), athleteplaysforteam(B, A).  [covers 268,0/1.202,0 pos, 0,0/0,0 neg]
%     Score = -54,587900 (regressionFit = 54,587898, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- athleteledsportsteam(B, A), athleteplaysforteam(B, _).  [covers 327,0/1.202,0 pos, 0,0/0,0 neg]
%     Score = -54,594078 (regressionFit = 54,594075, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- athleteledsportsteam(_, A), athleteplaysforteam(_, A).  [covers 307,0/1.202,0 pos, 0,0/0,0 neg]
%     Score = -54,579317 (regressionFit = 54,579314, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- athleteledsportsteam(B, A), athleteplaysinleague(B, _).  [covers 294,0/1.202,0 pos, 0,0/0,0 neg]
%     Score = -54,572583 (regressionFit = 54,572581, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- athleteledsportsteam(B, A), athleteplayssport(B, _).  [covers 283,0/1.202,0 pos, 0,0/0,0 neg]
%     Score = -54,575910 (regressionFit = 54,575908, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- athleteledsportsteam(_, A), teamplaysagainstteam(A, _).  [covers 334,0/1.202,0 pos, 0,0/0,0 neg]
%     Score = -54,582565 (regressionFit = 54,582563, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- athleteledsportsteam(_, A), teamplaysagainstteam(_, A).  [covers 335,0/1.202,0 pos, 0,0/0,0 neg]
%     Score = -54,585075 (regressionFit = 54,585072, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- athleteledsportsteam(_, A), teamplaysinleague(A, _).  [covers 337,0/1.202,0 pos, 0,0/0,0 neg]

% Consider expanding [#5 of outerLoop #1, bodyLen=1] 'teamplayssport(A, _) :- teamplaysinleague(A, _).  [covers 929,0/1.202,0 pos, 0,0/0,0 neg]' score=-54.59550022252478
%  At # nodes expanded = 5, |OPEN| = 4.  Pruned 4 variant children.  Sending 7 items to OPEN for evaluation and possible insertion.
% Have created 7 valid-on-seeds descendants and have picked up 2 bad extensions.
%     Score = -54,585075 (regressionFit = 54,585072, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysinleague(A, _), athleteledsportsteam(_, A).  [covers 337,0/1.202,0 pos, 0,0/0,0 neg]
%     Score = -54,610442 (regressionFit = 54,610439, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysinleague(A, _), athleteplaysforteam(_, A).  [covers 516,0/1.202,0 pos, 0,0/0,0 neg]
%     Score = -54,592319 (regressionFit = 54,592317, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysinleague(A, B), athleteplaysinleague(_, B).  [covers 703,0/1.202,0 pos, 0,0/0,0 neg]
%     Score = -25,598692 (regressionFit = 25,598689, penalties=2.24E-6) for clause:  teamplayssport(A, B) :- teamplaysinleague(A, _), athleteplayssport(_, B).  [covers 314,0/1.202,0 pos, 0,0/0,0 neg]
%     Score = -54,610803 (regressionFit = 54,610801, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysinleague(A, _), teamplaysagainstteam(A, _).  [covers 618,0/1.202,0 pos, 0,0/0,0 neg]
%     Score = -54,606129 (regressionFit = 54,606127, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysinleague(A, _), teamplaysagainstteam(_, A).  [covers 638,0/1.202,0 pos, 0,0/0,0 neg]
%     Score = -54,595501 (regressionFit = 54,595499, penalties=2.1400000000000003E-6) for clause:  teamplayssport(A, _) :- teamplaysinleague(A, B), teamplaysinleague(_, B).  [covers 929,0/1.202,0 pos, 0,0/0,0 neg]

% Consider expanding [#6 of outerLoop #1, bodyLen=1] 'teamplayssport(A, _) :- teamalsoknownas(A, _).  [covers 267,0/1.202,0 pos, 0,0/0,0 neg]' score=-54.595766484623255
%  At # nodes expanded = 6, |OPEN| = 3.  Pruned 14 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 11 bad extensions.
%     Score = -47,265432 (regressionFit = 47,265430, penalties=2.24E-6) for clause:  teamplayssport(A, B) :- teamalsoknownas(A, _), athleteplayssport(_, B).  [covers 93,0/1.202,0 pos, 0,0/0,0 neg]
%     Score = -54,597038 (regressionFit = 54,597036, penalties=2.0300000000000005E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(A, B), teamalsoknownas(B, A).  [covers 126,0/1.202,0 pos, 0,0/0,0 neg]
%     Score = -54,603702 (regressionFit = 54,603700, penalties=2.1400000000000003E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(A, B), teamalsoknownas(B, _).  [covers 232,0/1.202,0 pos, 0,0/0,0 neg]
%     Score = -54,595767 (regressionFit = 54,595765, penalties=2.1400000000000003E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(A, B), teamalsoknownas(_, B).  [covers 267,0/1.202,0 pos, 0,0/0,0 neg]
%     Score = -54,589937 (regressionFit = 54,589934, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(A, B), teamplaysinleague(B, _).  [covers 244,0/1.202,0 pos, 0,0/0,0 neg]

% Consider expanding [#7 of outerLoop #1, bodyLen=1] 'teamplayssport(A, _) :- teamplaysagainstteam(_, A).  [covers 728,0/1.202,0 pos, 0,0/0,0 neg]' score=-54.60476319776638
%  At # nodes expanded = 7, |OPEN| = 2.  Pruned 14 variant children.  Sending 14 items to OPEN for evaluation and possible insertion.
% Have created 14 valid-on-seeds descendants and have picked up 6 bad extensions.
%     Score = -54,582565 (regressionFit = 54,582563, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(_, A), athleteledsportsteam(_, A).  [covers 335,0/1.202,0 pos, 0,0/0,0 neg]
%     Score = -54,610946 (regressionFit = 54,610944, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(B, A), athleteledsportsteam(_, B).  [covers 609,0/1.202,0 pos, 0,0/0,0 neg]
%     Score = -54,610709 (regressionFit = 54,610707, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(_, A), athleteplaysforteam(_, A).  [covers 533,0/1.202,0 pos, 0,0/0,0 neg]
%     Score = -54,599550 (regressionFit = 54,599548, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(B, A), athleteplaysforteam(_, B).  [covers 696,0/1.202,0 pos, 0,0/0,0 neg]
%     Score = -32,444097 (regressionFit = 32,444095, penalties=2.24E-6) for clause:  teamplayssport(A, B) :- teamplaysagainstteam(_, A), athleteplayssport(_, B).  [covers 246,0/1.202,0 pos, 0,0/0,0 neg]
%     Score = -54,609863 (regressionFit = 54,609861, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(B, A), teamalsoknownas(B, _).  [covers 530,0/1.202,0 pos, 0,0/0,0 neg]
%     Score = -54,610388 (regressionFit = 54,610386, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(B, A), teamalsoknownas(_, B).  [covers 523,0/1.202,0 pos, 0,0/0,0 neg]
%     Score = -54,604014 (regressionFit = 54,604012, penalties=2.0300000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(B, A), teamplaysagainstteam(A, B).  [covers 632,0/1.202,0 pos, 0,0/0,0 neg]
%     Score = -54,609754 (regressionFit = 54,609752, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(_, A), teamplaysagainstteam(A, _).  [covers 666,0/1.202,0 pos, 0,0/0,0 neg]
%     Score = -54,604764 (regressionFit = 54,604762, penalties=2.1400000000000003E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(B, A), teamplaysagainstteam(B, _).  [covers 728,0/1.202,0 pos, 0,0/0,0 neg]
%     Score = -54,604764 (regressionFit = 54,604762, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(_, A), teamplaysagainstteam(_, A).  [covers 728,0/1.202,0 pos, 0,0/0,0 neg]
%     Score = -54,604764 (regressionFit = 54,604762, penalties=2.1400000000000003E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(B, A), teamplaysagainstteam(_, B).  [covers 728,0/1.202,0 pos, 0,0/0,0 neg]
%     Score = -54,606129 (regressionFit = 54,606127, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(_, A), teamplaysinleague(A, _).  [covers 638,0/1.202,0 pos, 0,0/0,0 neg]
%     Score = -54,604337 (regressionFit = 54,604335, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(B, A), teamplaysinleague(B, _).  [covers 712,0/1.202,0 pos, 0,0/0,0 neg]

% Consider expanding [#8 of outerLoop #1, bodyLen=1] 'teamplayssport(A, _) :- teamplaysagainstteam(A, _).  [covers 684,0/1.202,0 pos, 0,0/0,0 neg]' score=-54.61084493431175
%  At # nodes expanded = 8, |OPEN| = 1.  Pruned 14 variant children.  Sending 14 items to OPEN for evaluation and possible insertion.
% Have created 14 valid-on-seeds descendants and have picked up 6 bad extensions.
%     Score = -54,575910 (regressionFit = 54,575908, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, _), athleteledsportsteam(_, A).  [covers 334,0/1.202,0 pos, 0,0/0,0 neg]
%     Score = -54,610679 (regressionFit = 54,610677, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, B), athleteledsportsteam(_, B).  [covers 564,0/1.202,0 pos, 0,0/0,0 neg]
%     Score = -54,610001 (regressionFit = 54,609999, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, _), athleteplaysforteam(_, A).  [covers 521,0/1.202,0 pos, 0,0/0,0 neg]
%     Score = -54,603858 (regressionFit = 54,603856, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, B), athleteplaysforteam(_, B).  [covers 650,0/1.202,0 pos, 0,0/0,0 neg]
%     Score = -34,544029 (regressionFit = 34,544027, penalties=2.24E-6) for clause:  teamplayssport(A, B) :- teamplaysagainstteam(A, _), athleteplayssport(_, B).  [covers 229,0/1.202,0 pos, 0,0/0,0 neg]
%     Score = -54,608031 (regressionFit = 54,608028, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, B), teamalsoknownas(B, _).  [covers 502,0/1.202,0 pos, 0,0/0,0 neg]
%     Score = -54,602474 (regressionFit = 54,602472, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, B), teamalsoknownas(_, B).  [covers 519,0/1.202,0 pos, 0,0/0,0 neg]
%     Score = -54,604014 (regressionFit = 54,604012, penalties=2.0300000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, B), teamplaysagainstteam(B, A).  [covers 632,0/1.202,0 pos, 0,0/0,0 neg]
%     Score = -54,610846 (regressionFit = 54,610844, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, _), teamplaysagainstteam(A, _).  [covers 684,0/1.202,0 pos, 0,0/0,0 neg]
%     Score = -54,610856 (regressionFit = 54,610854, penalties=2.1400000000000003E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, B), teamplaysagainstteam(B, _).  [covers 678,0/1.202,0 pos, 0,0/0,0 neg]
%     Score = -54,609754 (regressionFit = 54,609752, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, _), teamplaysagainstteam(_, A).  [covers 666,0/1.202,0 pos, 0,0/0,0 neg]
%     Score = -54,610846 (regressionFit = 54,610844, penalties=2.1400000000000003E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, B), teamplaysagainstteam(_, B).  [covers 684,0/1.202,0 pos, 0,0/0,0 neg]
%     Score = -54,610803 (regressionFit = 54,610801, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, _), teamplaysinleague(A, _).  [covers 618,0/1.202,0 pos, 0,0/0,0 neg]
%     Score = -54,609996 (regressionFit = 54,609994, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, B), teamplaysinleague(B, _).  [covers 666,0/1.202,0 pos, 0,0/0,0 neg]

% Consider expanding [#9 of outerLoop #1, bodyLen=1] 'teamplayssport(A, _) :- athleteplaysforteam(_, A).  [covers 547,0/1.202,0 pos, 0,0/0,0 neg]' score=-54.61102418772417
%  At # nodes expanded = 9, |OPEN| = 0.  Pruned 8 variant children.  Sending 10 items to OPEN for evaluation and possible insertion.
% Have created 10 valid-on-seeds descendants and have picked up 3 bad extensions.
%     Score = -54,604633 (regressionFit = 54,604631, penalties=2.1300000000000004E-6) for clause:  teamplayssport(A, _) :- athleteplaysforteam(B, A), athleteledsportsteam(B, A).  [covers 268,0/1.202,0 pos, 0,0/0,0 neg]
%     Score = -54,594652 (regressionFit = 54,594649, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- athleteplaysforteam(B, A), athleteledsportsteam(B, _).  [covers 326,0/1.202,0 pos, 0,0/0,0 neg]
%     Score = -54,594078 (regressionFit = 54,594075, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- athleteplaysforteam(_, A), athleteledsportsteam(_, A).  [covers 307,0/1.202,0 pos, 0,0/0,0 neg]
%     Score = -54,611025 (regressionFit = 54,611023, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- athleteplaysforteam(_, A), athleteplaysforteam(_, A).  [covers 547,0/1.202,0 pos, 0,0/0,0 neg]
%     Score = -54,596334 (regressionFit = 54,596332, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- athleteplaysforteam(B, A), athleteplaysinleague(B, _).  [covers 385,0/1.202,0 pos, 0,0/0,0 neg]
%     Score = -54,594485 (regressionFit = 54,594483, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- athleteplaysforteam(B, A), athleteplayssport(B, _).  [covers 370,0/1.202,0 pos, 0,0/0,0 neg]
%     Score = -38,949506 (regressionFit = 38,949504, penalties=2.24E-6) for clause:  teamplayssport(A, B) :- athleteplaysforteam(_, A), athleteplayssport(_, B).  [covers 183,0/1.202,0 pos, 0,0/0,0 neg]
%     Score = -54,610001 (regressionFit = 54,609999, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- athleteplaysforteam(_, A), teamplaysagainstteam(A, _).  [covers 521,0/1.202,0 pos, 0,0/0,0 neg]
%     Score = -54,610709 (regressionFit = 54,610707, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- athleteplaysforteam(_, A), teamplaysagainstteam(_, A).  [covers 533,0/1.202,0 pos, 0,0/0,0 neg]
%     Score = -54,610442 (regressionFit = 54,610439, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- athleteplaysforteam(_, A), teamplaysinleague(A, _).  [covers 516,0/1.202,0 pos, 0,0/0,0 neg]

% The best node found: teamplayssport(_, A) :- athleteplayssport(_, A).  [covers 407,0/1.202,0 pos, 0,0/0,0 neg]

% The best node found: teamplayssport(_, A) :- athleteplayssport(_, A).  [covers 407,0/1.202,0 pos, 0,0/0,0 neg]

% Expanding node at Level 0 with score = 1,797693e+308.
% Will extend: teamplayssport(_, A) :- athleteplayssport(_, A).  [covers 407,0/1.202,0 pos, 0,0/0,0 neg]
% Path: 4;
Comparing variance: 0.02267090814535522 to score=9.43454584424385E-4 #egs=407.0
Comparing variance: 0.0036486642544820867 to score=9.43454584424385E-4 #egs=795.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 407,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,022671)
%         ILP node to extend: teamplayssport(_, A) :- athleteplayssport(_, A).  [covers 407,0/1.202,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 1 and with score = -0,022671) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 795,0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0,003649)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 1 and with score = -0,003649) into the LAST position (#2) in the search queue.

% Time for loop #1: 1,003 seconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      teamplayssport(_, A) :- athleteplayssport(_, A).  [covers 407,0/1.202,0 pos, 0,0/0,0 neg]
% This clause covers 407 positive examples, of which 407 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'teamplayssport(_, A) :- athleteplayssport(_, A).  [covers 407,0/407,0 pos, 0,0/0,0 neg]'
%     Score = -12,127749 (regressionFit = 12,127748, penalties=1.23E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(_, A).  [covers 407,0/407,0 pos, 0,0/0,0 neg]

% Have these 7 positive seeds: 33 166 181 202 252 270 326
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Consider expanding [#1 of outerLoop #2, bodyLen=1] 'teamplayssport(_, A) :- athleteplayssport(_, A).  [covers 407,0/407,0 pos, 0,0/0,0 neg]' score=-12.127748927472835
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 8 variant children.  Sending 12 items to OPEN for evaluation and possible insertion.
% Have created 12 valid-on-seeds descendants and have picked up 6 bad extensions.
%     Score = -9,202508 (regressionFit = 9,202506, penalties=2.0300000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, A).  [covers 74,0/407,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -9,202508): teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, A).  [covers 74,0/407,0 pos, 0,0/0,0 neg]
%     Score = -8,873417 (regressionFit = 8,873414, penalties=2.24E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteledsportsteam(B, _).  [covers 379,0/407,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -8,873417): teamplayssport(_, A) :- athleteplayssport(B, A), athleteledsportsteam(B, _).  [covers 379,0/407,0 pos, 0,0/0,0 neg]
%     Score = -9,186459 (regressionFit = 9,186457, penalties=2.24E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), athleteledsportsteam(_, A).  [covers 113,0/407,0 pos, 0,0/0,0 neg]
%     Score = -9,193392 (regressionFit = 9,193390, penalties=2.0300000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysforteam(C, A).  [covers 93,0/407,0 pos, 0,0/0,0 neg]
%     Score = -8,933139 (regressionFit = 8,933137, penalties=2.24E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysforteam(B, _).  [covers 384,0/407,0 pos, 0,0/0,0 neg]
%     Score = -9,212554 (regressionFit = 9,212551, penalties=2.24E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), athleteplaysforteam(_, A).  [covers 183,0/407,0 pos, 0,0/0,0 neg]
%     Score = -9,161028 (regressionFit = 9,161025, penalties=2.24E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _).  [covers 400,0/407,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(_, A), athleteplayssport(_, A).  [covers 407,0/407,0 pos, 0,0/0,0 neg]
%     Score = -9,220811 (regressionFit = 9,220808, penalties=2.24E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(A, _).  [covers 93,0/407,0 pos, 0,0/0,0 neg]
%     Score = -9,220334 (regressionFit = 9,220332, penalties=2.24E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(A, _).  [covers 229,0/407,0 pos, 0,0/0,0 neg]
%     Score = -9,211774 (regressionFit = 9,211772, penalties=2.24E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(_, A).  [covers 246,0/407,0 pos, 0,0/0,0 neg]
%     Score = -9,224029 (regressionFit = 9,224027, penalties=2.24E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _).  [covers 314,0/407,0 pos, 0,0/0,0 neg]

% Consider expanding [#2 of outerLoop #2, bodyLen=2] 'teamplayssport(_, A) :- athleteplayssport(B, A), athleteledsportsteam(B, _).  [covers 379,0/407,0 pos, 0,0/0,0 neg]' score=-8.873416584142838
%  At # nodes expanded = 2, |OPEN| = 11.  Pruned 22 variant children.  Sending 20 items to OPEN for evaluation and possible insertion.
% Have created 20 valid-on-seeds descendants and have picked up 7 bad extensions.
%     Score = -9,227031 (regressionFit = 9,227028, penalties=3.1500000000000008E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteledsportsteam(_, A).  [covers 106,0/407,0 pos, 0,0/0,0 neg]
%     Score = -8,873417 (regressionFit = 8,873414, penalties=3.1500000000000008E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteledsportsteam(B, C), athleteledsportsteam(_, C).  [covers 379,0/407,0 pos, 0,0/0,0 neg]
%     Score = -9,204653 (regressionFit = 9,204650, penalties=3.1400000000000004E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(C, A).  [covers 69,0/407,0 pos, 0,0/0,0 neg]
%     Score = -8,873417 (regressionFit = 8,873414, penalties=3.1400000000000004E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteledsportsteam(B, C), athleteplaysforteam(B, C).  [covers 379,0/407,0 pos, 0,0/0,0 neg]
%     Score = -8,873418 (regressionFit = 8,873414, penalties=3.35E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteledsportsteam(B, _), athleteplaysforteam(B, _).  [covers 379,0/407,0 pos, 0,0/0,0 neg]
%     Score = -9,146875 (regressionFit = 9,146872, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(_, A).  [covers 173,0/407,0 pos, 0,0/0,0 neg]
%     Score = -8,873418 (regressionFit = 8,873414, penalties=3.2500000000000006E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteledsportsteam(B, C), athleteplaysforteam(_, C).  [covers 379,0/407,0 pos, 0,0/0,0 neg]
%     Score = -8,873418 (regressionFit = 8,873414, penalties=3.35E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteledsportsteam(B, _), athleteplaysinleague(B, _).  [covers 379,0/407,0 pos, 0,0/0,0 neg]
%     Score = -8,873418 (regressionFit = 8,873414, penalties=3.2500000000000006E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteledsportsteam(B, _), athleteplayssport(_, A).  [covers 379,0/407,0 pos, 0,0/0,0 neg]
%     Score = -9,213237 (regressionFit = 9,213234, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamalsoknownas(A, _).  [covers 83,0/407,0 pos, 0,0/0,0 neg]
%     Score = -8,873418 (regressionFit = 8,873414, penalties=3.2500000000000006E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteledsportsteam(B, C), teamalsoknownas(C, _).  [covers 379,0/407,0 pos, 0,0/0,0 neg]
%     Score = -8,873418 (regressionFit = 8,873414, penalties=3.2500000000000006E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteledsportsteam(B, C), teamalsoknownas(_, C).  [covers 379,0/407,0 pos, 0,0/0,0 neg]
%     Score = -9,221368 (regressionFit = 9,221365, penalties=3.0400000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, D).  [covers 158,0/407,0 pos, 0,0/0,0 neg]
%     Score = -9,217917 (regressionFit = 9,217914, penalties=3.0400000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(D, A).  [covers 167,0/407,0 pos, 0,0/0,0 neg]
%     Score = -9,147083 (regressionFit = 9,147080, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, _).  [covers 213,0/407,0 pos, 0,0/0,0 neg]
%     Score = -8,873418 (regressionFit = 8,873414, penalties=3.2500000000000006E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteledsportsteam(B, C), teamplaysagainstteam(C, _).  [covers 379,0/407,0 pos, 0,0/0,0 neg]
%     Score = -9,132533 (regressionFit = 9,132529, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(_, A).  [covers 226,0/407,0 pos, 0,0/0,0 neg]
%     Score = -8,873418 (regressionFit = 8,873414, penalties=3.2500000000000006E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteledsportsteam(B, C), teamplaysagainstteam(_, C).  [covers 379,0/407,0 pos, 0,0/0,0 neg]
%     Score = -9,157922 (regressionFit = 9,157919, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysinleague(A, _).  [covers 298,0/407,0 pos, 0,0/0,0 neg]
%     Score = -8,873418 (regressionFit = 8,873414, penalties=3.2500000000000006E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteledsportsteam(B, C), teamplaysinleague(C, _).  [covers 379,0/407,0 pos, 0,0/0,0 neg]

% Consider expanding [#3 of outerLoop #2, bodyLen=2] 'teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysforteam(B, _).  [covers 384,0/407,0 pos, 0,0/0,0 neg]' score=-8.933138854893663
%  At # nodes expanded = 3, |OPEN| = 10.  Pruned 22 variant children.  Sending 21 items to OPEN for evaluation and possible insertion.
% Have created 21 valid-on-seeds descendants and have picked up 7 bad extensions.
%     Score = -9,203567 (regressionFit = 9,203564, penalties=3.1400000000000004E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysforteam(C, _), athleteledsportsteam(C, A).  [covers 71,0/407,0 pos, 0,0/0,0 neg]
%     Score = -8,873417 (regressionFit = 8,873414, penalties=3.1400000000000004E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysforteam(B, C), athleteledsportsteam(B, C).  [covers 379,0/407,0 pos, 0,0/0,0 neg]
%     Score = -8,873418 (regressionFit = 8,873414, penalties=3.35E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysforteam(B, _), athleteledsportsteam(B, _).  [covers 379,0/407,0 pos, 0,0/0,0 neg]
%     Score = -9,205123 (regressionFit = 9,205120, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysforteam(C, _), athleteledsportsteam(_, A).  [covers 109,0/407,0 pos, 0,0/0,0 neg]
%     Score = -9,008483 (regressionFit = 9,008480, penalties=3.2500000000000006E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysforteam(B, C), athleteledsportsteam(_, C).  [covers 383,0/407,0 pos, 0,0/0,0 neg]
%     Score = -8,933140 (regressionFit = 8,933137, penalties=3.2500000000000006E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysforteam(B, _), athleteplaysforteam(B, _).  [covers 384,0/407,0 pos, 0,0/0,0 neg]
%     Score = -9,202978 (regressionFit = 9,202975, penalties=3.1500000000000008E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysforteam(C, _), athleteplaysforteam(_, A).  [covers 176,0/407,0 pos, 0,0/0,0 neg]
%     Score = -8,933140 (regressionFit = 8,933137, penalties=3.1500000000000008E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysforteam(B, C), athleteplaysforteam(_, C).  [covers 384,0/407,0 pos, 0,0/0,0 neg]
%     Score = -8,873418 (regressionFit = 8,873414, penalties=3.35E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysforteam(B, _), athleteplaysinleague(B, _).  [covers 379,0/407,0 pos, 0,0/0,0 neg]
%     Score = -8,933140 (regressionFit = 8,933137, penalties=3.2500000000000006E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysforteam(B, _), athleteplayssport(_, A).  [covers 384,0/407,0 pos, 0,0/0,0 neg]
%     Score = -9,203269 (regressionFit = 9,203265, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysforteam(C, _), teamalsoknownas(A, _).  [covers 84,0/407,0 pos, 0,0/0,0 neg]
%     Score = -8,873418 (regressionFit = 8,873414, penalties=3.2500000000000006E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysforteam(B, C), teamalsoknownas(C, _).  [covers 379,0/407,0 pos, 0,0/0,0 neg]
%     Score = -8,873418 (regressionFit = 8,873414, penalties=3.2500000000000006E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysforteam(B, C), teamalsoknownas(_, C).  [covers 379,0/407,0 pos, 0,0/0,0 neg]
%     Score = -9,220496 (regressionFit = 9,220493, penalties=3.0400000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysforteam(C, D), teamplaysagainstteam(A, D).  [covers 174,0/407,0 pos, 0,0/0,0 neg]
%     Score = -9,219951 (regressionFit = 9,219948, penalties=3.0400000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysforteam(C, D), teamplaysagainstteam(D, A).  [covers 181,0/407,0 pos, 0,0/0,0 neg]
%     Score = -9,202543 (regressionFit = 9,202540, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysforteam(C, _), teamplaysagainstteam(A, _).  [covers 216,0/407,0 pos, 0,0/0,0 neg]
%     Score = -8,933140 (regressionFit = 8,933137, penalties=3.2500000000000006E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysforteam(B, C), teamplaysagainstteam(C, _).  [covers 384,0/407,0 pos, 0,0/0,0 neg]
%     Score = -9,194377 (regressionFit = 9,194374, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysforteam(C, _), teamplaysagainstteam(_, A).  [covers 229,0/407,0 pos, 0,0/0,0 neg]
%     Score = -8,933140 (regressionFit = 8,933137, penalties=3.2500000000000006E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysforteam(B, C), teamplaysagainstteam(_, C).  [covers 384,0/407,0 pos, 0,0/0,0 neg]
%     Score = -9,202632 (regressionFit = 9,202629, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysforteam(C, _), teamplaysinleague(A, _).  [covers 302,0/407,0 pos, 0,0/0,0 neg]
%     Score = -8,933140 (regressionFit = 8,933137, penalties=3.2500000000000006E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysforteam(B, C), teamplaysinleague(C, _).  [covers 384,0/407,0 pos, 0,0/0,0 neg]

% Consider expanding [#4 of outerLoop #2, bodyLen=2] 'teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _).  [covers 400,0/407,0 pos, 0,0/0,0 neg]' score=-9.16102773537154
%  At # nodes expanded = 4, |OPEN| = 9.  Pruned 10 variant children.  Sending 14 items to OPEN for evaluation and possible insertion.
% Have created 14 valid-on-seeds descendants and have picked up 2 bad extensions.
%     Score = -9,203125 (regressionFit = 9,203122, penalties=3.1400000000000004E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(C, A).  [covers 72,0/407,0 pos, 0,0/0,0 neg]
%     Score = -8,873418 (regressionFit = 8,873414, penalties=3.35E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteledsportsteam(B, _).  [covers 379,0/407,0 pos, 0,0/0,0 neg]
%     Score = -9,223329 (regressionFit = 9,223326, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(_, A).  [covers 110,0/407,0 pos, 0,0/0,0 neg]
%     Score = -9,194598 (regressionFit = 9,194595, penalties=3.1400000000000004E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteplaysforteam(C, A).  [covers 90,0/407,0 pos, 0,0/0,0 neg]
%     Score = -8,873418 (regressionFit = 8,873414, penalties=3.35E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteplaysforteam(B, _).  [covers 379,0/407,0 pos, 0,0/0,0 neg]
%     Score = -9,165707 (regressionFit = 9,165703, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteplaysforteam(_, A).  [covers 180,0/407,0 pos, 0,0/0,0 neg]
%     Score = -9,161029 (regressionFit = 9,161025, penalties=3.1500000000000008E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, C), athleteplaysinleague(_, C).  [covers 400,0/407,0 pos, 0,0/0,0 neg]
%     Score = -9,161029 (regressionFit = 9,161025, penalties=3.2500000000000006E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteplayssport(_, A).  [covers 400,0/407,0 pos, 0,0/0,0 neg]
%     Score = -9,225181 (regressionFit = 9,225178, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(A, _).  [covers 92,0/407,0 pos, 0,0/0,0 neg]
%     Score = -9,183440 (regressionFit = 9,183436, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(A, _).  [covers 226,0/407,0 pos, 0,0/0,0 neg]
%     Score = -9,163602 (regressionFit = 9,163599, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(_, A).  [covers 243,0/407,0 pos, 0,0/0,0 neg]
%     Score = -9,200762 (regressionFit = 9,200759, penalties=3.0400000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D), teamplaysinleague(A, D).  [covers 180,0/407,0 pos, 0,0/0,0 neg]
%     Score = -9,223639 (regressionFit = 9,223636, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysinleague(A, _).  [covers 310,0/407,0 pos, 0,0/0,0 neg]
%     Score = -9,161029 (regressionFit = 9,161025, penalties=3.2500000000000006E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, C), teamplaysinleague(_, C).  [covers 400,0/407,0 pos, 0,0/0,0 neg]

% Consider expanding [#5 of outerLoop #2, bodyLen=2] 'teamplayssport(A, B) :- athleteplayssport(_, B), athleteledsportsteam(_, A).  [covers 113,0/407,0 pos, 0,0/0,0 neg]' score=-9.186459101327916
%  At # nodes expanded = 5, |OPEN| = 8.  Pruned 12 variant children.  Sending 16 items to OPEN for evaluation and possible insertion.
% Have created 16 valid-on-seeds descendants and have picked up 2 bad extensions.
%     Score = -9,202509 (regressionFit = 9,202506, penalties=3.04E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(_, A), athleteledsportsteam(C, A).  [covers 74,0/407,0 pos, 0,0/0,0 neg]
%     Score = -9,227031 (regressionFit = 9,227028, penalties=3.1500000000000008E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(_, A), athleteledsportsteam(C, _).  [covers 106,0/407,0 pos, 0,0/0,0 neg]
%     Score = -9,186460 (regressionFit = 9,186457, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), athleteledsportsteam(_, A), athleteledsportsteam(_, A).  [covers 113,0/407,0 pos, 0,0/0,0 neg]
%     Score = -9,204588 (regressionFit = 9,204585, penalties=3.1400000000000004E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(_, A), athleteplaysforteam(C, A).  [covers 69,0/407,0 pos, 0,0/0,0 neg]
%     Score = -9,224704 (regressionFit = 9,224700, penalties=3.1400000000000004E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), athleteledsportsteam(C, A), athleteplaysforteam(C, A).  [covers 88,0/407,0 pos, 0,0/0,0 neg]
%     Score = -9,205123 (regressionFit = 9,205120, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(_, A), athleteplaysforteam(C, _).  [covers 109,0/407,0 pos, 0,0/0,0 neg]
%     Score = -9,199479 (regressionFit = 9,199476, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), athleteledsportsteam(C, A), athleteplaysforteam(C, _).  [covers 108,0/407,0 pos, 0,0/0,0 neg]
%     Score = -9,212668 (regressionFit = 9,212665, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), athleteledsportsteam(_, A), athleteplaysforteam(_, A).  [covers 101,0/407,0 pos, 0,0/0,0 neg]
%     Score = -9,223329 (regressionFit = 9,223326, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(_, A), athleteplaysinleague(C, _).  [covers 110,0/407,0 pos, 0,0/0,0 neg]
%     Score = -9,176515 (regressionFit = 9,176512, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), athleteledsportsteam(C, A), athleteplaysinleague(C, _).  [covers 97,0/407,0 pos, 0,0/0,0 neg]
%     Score = -9,202509 (regressionFit = 9,202506, penalties=3.04E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), athleteledsportsteam(C, A), athleteplayssport(C, B).  [covers 74,0/407,0 pos, 0,0/0,0 neg]
%     Score = -9,174687 (regressionFit = 9,174683, penalties=3.1500000000000008E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), athleteledsportsteam(C, A), athleteplayssport(C, _).  [covers 95,0/407,0 pos, 0,0/0,0 neg]
%     Score = -9,186460 (regressionFit = 9,186457, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), athleteledsportsteam(_, A), athleteplayssport(_, B).  [covers 113,0/407,0 pos, 0,0/0,0 neg]
%     Score = -9,182865 (regressionFit = 9,182861, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), athleteledsportsteam(_, A), teamplaysagainstteam(A, _).  [covers 110,0/407,0 pos, 0,0/0,0 neg]
%     Score = -9,184277 (regressionFit = 9,184274, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), athleteledsportsteam(_, A), teamplaysagainstteam(_, A).  [covers 111,0/407,0 pos, 0,0/0,0 neg]
%     Score = -9,183886 (regressionFit = 9,183883, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), athleteledsportsteam(_, A), teamplaysinleague(A, _).  [covers 112,0/407,0 pos, 0,0/0,0 neg]

% Consider expanding [#6 of outerLoop #2, bodyLen=2] 'teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysforteam(C, A).  [covers 93,0/407,0 pos, 0,0/0,0 neg]' score=-9.193391652035034
%  At # nodes expanded = 6, |OPEN| = 7.  Pruned 6 variant children.  Sending 8 items to OPEN for evaluation and possible insertion.
% Have created 8 valid-on-seeds descendants and have picked up 2 bad extensions.
%     Score = -9,211078 (regressionFit = 9,211075, penalties=3.0300000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysforteam(C, A), athleteledsportsteam(C, A).  [covers 53,0/407,0 pos, 0,0/0,0 neg]
%     Score = -9,204588 (regressionFit = 9,204585, penalties=3.1400000000000004E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysforteam(C, A), athleteledsportsteam(_, A).  [covers 69,0/407,0 pos, 0,0/0,0 neg]
%     Score = -9,193393 (regressionFit = 9,193390, penalties=3.04E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysforteam(C, A), athleteplaysforteam(_, A).  [covers 93,0/407,0 pos, 0,0/0,0 neg]
%     Score = -9,194598 (regressionFit = 9,194595, penalties=3.1400000000000004E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysforteam(C, A), athleteplaysinleague(C, _).  [covers 90,0/407,0 pos, 0,0/0,0 neg]
%     Score = -9,193393 (regressionFit = 9,193390, penalties=3.04E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysforteam(C, A), athleteplayssport(_, B).  [covers 93,0/407,0 pos, 0,0/0,0 neg]
%     Score = -9,194221 (regressionFit = 9,194217, penalties=3.1400000000000004E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysforteam(C, A), teamplaysagainstteam(A, _).  [covers 92,0/407,0 pos, 0,0/0,0 neg]
%     Score = -9,193393 (regressionFit = 9,193390, penalties=3.1400000000000004E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysforteam(C, A), teamplaysagainstteam(_, A).  [covers 93,0/407,0 pos, 0,0/0,0 neg]
%     Score = -9,193899 (regressionFit = 9,193896, penalties=3.1400000000000004E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysforteam(C, A), teamplaysinleague(A, _).  [covers 92,0/407,0 pos, 0,0/0,0 neg]

% Consider expanding [#7 of outerLoop #2, bodyLen=2] 'teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, A).  [covers 74,0/407,0 pos, 0,0/0,0 neg]' score=-9.202508059958518
%  At # nodes expanded = 7, |OPEN| = 6.  Pruned 6 variant children.  Sending 9 items to OPEN for evaluation and possible insertion.
% Have created 9 valid-on-seeds descendants and have picked up 2 bad extensions.
%     Score = -9,202509 (regressionFit = 9,202506, penalties=3.04E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, A), athleteledsportsteam(_, A).  [covers 74,0/407,0 pos, 0,0/0,0 neg]
%     Score = -9,211078 (regressionFit = 9,211075, penalties=3.0300000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, A), athleteplaysforteam(C, A).  [covers 53,0/407,0 pos, 0,0/0,0 neg]
%     Score = -9,203567 (regressionFit = 9,203564, penalties=3.1400000000000004E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, A), athleteplaysforteam(C, _).  [covers 71,0/407,0 pos, 0,0/0,0 neg]
%     Score = -9,206056 (regressionFit = 9,206053, penalties=3.1400000000000004E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, A), athleteplaysforteam(_, A).  [covers 67,0/407,0 pos, 0,0/0,0 neg]
%     Score = -9,203125 (regressionFit = 9,203122, penalties=3.1400000000000004E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, A), athleteplaysinleague(C, _).  [covers 72,0/407,0 pos, 0,0/0,0 neg]
%     Score = -9,202509 (regressionFit = 9,202506, penalties=3.04E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, A), athleteplayssport(_, B).  [covers 74,0/407,0 pos, 0,0/0,0 neg]
%     Score = -9,203329 (regressionFit = 9,203326, penalties=3.1400000000000004E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, A), teamplaysagainstteam(A, _).  [covers 73,0/407,0 pos, 0,0/0,0 neg]
%     Score = -9,203329 (regressionFit = 9,203326, penalties=3.1400000000000004E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, A), teamplaysagainstteam(_, A).  [covers 73,0/407,0 pos, 0,0/0,0 neg]
%     Score = -9,202509 (regressionFit = 9,202506, penalties=3.1400000000000004E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, A), teamplaysinleague(A, _).  [covers 74,0/407,0 pos, 0,0/0,0 neg]

% Consider expanding [#8 of outerLoop #2, bodyLen=2] 'teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(_, A).  [covers 246,0/407,0 pos, 0,0/0,0 neg]' score=-9.21177422874639
%  At # nodes expanded = 8, |OPEN| = 5.  Pruned 22 variant children.  Sending 21 items to OPEN for evaluation and possible insertion.
% Have created 21 valid-on-seeds descendants and have picked up 6 bad extensions.
%     Score = -9,203329 (regressionFit = 9,203326, penalties=3.1400000000000004E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysagainstteam(_, A), athleteledsportsteam(C, A).  [covers 73,0/407,0 pos, 0,0/0,0 neg]
%     Score = -9,217917 (regressionFit = 9,217914, penalties=3.0400000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysagainstteam(D, A), athleteledsportsteam(C, D).  [covers 167,0/407,0 pos, 0,0/0,0 neg]
%     Score = -9,132533 (regressionFit = 9,132529, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysagainstteam(_, A), athleteledsportsteam(C, _).  [covers 226,0/407,0 pos, 0,0/0,0 neg]
%     Score = -9,184277 (regressionFit = 9,184274, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(_, A), athleteledsportsteam(_, A).  [covers 111,0/407,0 pos, 0,0/0,0 neg]
%     Score = -9,222792 (regressionFit = 9,222788, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(C, A), athleteledsportsteam(_, C).  [covers 205,0/407,0 pos, 0,0/0,0 neg]
%     Score = -9,193393 (regressionFit = 9,193390, penalties=3.1400000000000004E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysagainstteam(_, A), athleteplaysforteam(C, A).  [covers 93,0/407,0 pos, 0,0/0,0 neg]
%     Score = -9,219951 (regressionFit = 9,219948, penalties=3.0400000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysagainstteam(D, A), athleteplaysforteam(C, D).  [covers 181,0/407,0 pos, 0,0/0,0 neg]
%     Score = -9,194377 (regressionFit = 9,194374, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysagainstteam(_, A), athleteplaysforteam(C, _).  [covers 229,0/407,0 pos, 0,0/0,0 neg]
%     Score = -9,213947 (regressionFit = 9,213944, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(_, A), athleteplaysforteam(_, A).  [covers 179,0/407,0 pos, 0,0/0,0 neg]
%     Score = -9,218918 (regressionFit = 9,218914, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(C, A), athleteplaysforteam(_, C).  [covers 237,0/407,0 pos, 0,0/0,0 neg]
%     Score = -9,163602 (regressionFit = 9,163599, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysagainstteam(_, A), athleteplaysinleague(C, _).  [covers 243,0/407,0 pos, 0,0/0,0 neg]
%     Score = -9,211775 (regressionFit = 9,211772, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(_, A), athleteplayssport(_, B).  [covers 246,0/407,0 pos, 0,0/0,0 neg]
%     Score = -9,224881 (regressionFit = 9,224878, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(C, A), teamalsoknownas(C, _).  [covers 178,0/407,0 pos, 0,0/0,0 neg]
%     Score = -9,203702 (regressionFit = 9,203699, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(C, A), teamalsoknownas(_, C).  [covers 175,0/407,0 pos, 0,0/0,0 neg]
%     Score = -9,224778 (regressionFit = 9,224774, penalties=3.04E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(C, A), teamplaysagainstteam(A, C).  [covers 215,0/407,0 pos, 0,0/0,0 neg]
%     Score = -9,221736 (regressionFit = 9,221733, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(_, A), teamplaysagainstteam(A, _).  [covers 224,0/407,0 pos, 0,0/0,0 neg]
%     Score = -9,211775 (regressionFit = 9,211772, penalties=3.1500000000000008E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(C, A), teamplaysagainstteam(C, _).  [covers 246,0/407,0 pos, 0,0/0,0 neg]
%     Score = -9,211775 (regressionFit = 9,211772, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(_, A), teamplaysagainstteam(_, A).  [covers 246,0/407,0 pos, 0,0/0,0 neg]
%     Score = -9,211775 (regressionFit = 9,211772, penalties=3.1500000000000008E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(C, A), teamplaysagainstteam(_, C).  [covers 246,0/407,0 pos, 0,0/0,0 neg]
%     Score = -9,211730 (regressionFit = 9,211727, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(_, A), teamplaysinleague(A, _).  [covers 217,0/407,0 pos, 0,0/0,0 neg]
%     Score = -9,215863 (regressionFit = 9,215860, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(C, A), teamplaysinleague(C, _).  [covers 241,0/407,0 pos, 0,0/0,0 neg]

% Consider expanding [#9 of outerLoop #2, bodyLen=2] 'teamplayssport(A, B) :- athleteplayssport(_, B), athleteplaysforteam(_, A).  [covers 183,0/407,0 pos, 0,0/0,0 neg]' score=-9.212553556728327
%  At # nodes expanded = 9, |OPEN| = 4.  Pruned 12 variant children.  Sending 16 items to OPEN for evaluation and possible insertion.
% Have created 16 valid-on-seeds descendants and have picked up 2 bad extensions.
%     Score = -9,206056 (regressionFit = 9,206053, penalties=3.1400000000000004E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysforteam(_, A), athleteledsportsteam(C, A).  [covers 67,0/407,0 pos, 0,0/0,0 neg]
%     Score = -9,224704 (regressionFit = 9,224700, penalties=3.1400000000000004E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), athleteplaysforteam(C, A), athleteledsportsteam(C, A).  [covers 88,0/407,0 pos, 0,0/0,0 neg]
%     Score = -9,146875 (regressionFit = 9,146872, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysforteam(_, A), athleteledsportsteam(C, _).  [covers 173,0/407,0 pos, 0,0/0,0 neg]
%     Score = -9,224333 (regressionFit = 9,224330, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), athleteplaysforteam(C, A), athleteledsportsteam(C, _).  [covers 106,0/407,0 pos, 0,0/0,0 neg]
%     Score = -9,212668 (regressionFit = 9,212665, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), athleteplaysforteam(_, A), athleteledsportsteam(_, A).  [covers 101,0/407,0 pos, 0,0/0,0 neg]
%     Score = -9,193393 (regressionFit = 9,193390, penalties=3.04E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysforteam(_, A), athleteplaysforteam(C, A).  [covers 93,0/407,0 pos, 0,0/0,0 neg]
%     Score = -9,202978 (regressionFit = 9,202975, penalties=3.1500000000000008E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysforteam(_, A), athleteplaysforteam(C, _).  [covers 176,0/407,0 pos, 0,0/0,0 neg]
%     Score = -9,212555 (regressionFit = 9,212551, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), athleteplaysforteam(_, A), athleteplaysforteam(_, A).  [covers 183,0/407,0 pos, 0,0/0,0 neg]
%     Score = -9,165707 (regressionFit = 9,165703, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysforteam(_, A), athleteplaysinleague(C, _).  [covers 180,0/407,0 pos, 0,0/0,0 neg]
%     Score = -9,225784 (regressionFit = 9,225780, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), athleteplaysforteam(C, A), athleteplaysinleague(C, _).  [covers 126,0/407,0 pos, 0,0/0,0 neg]
%     Score = -9,193393 (regressionFit = 9,193390, penalties=3.04E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), athleteplaysforteam(C, A), athleteplayssport(C, B).  [covers 93,0/407,0 pos, 0,0/0,0 neg]
%     Score = -9,225468 (regressionFit = 9,225465, penalties=3.1500000000000008E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), athleteplaysforteam(C, A), athleteplayssport(C, _).  [covers 123,0/407,0 pos, 0,0/0,0 neg]
%     Score = -9,212555 (regressionFit = 9,212551, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), athleteplaysforteam(_, A), athleteplayssport(_, B).  [covers 183,0/407,0 pos, 0,0/0,0 neg]
%     Score = -9,216236 (regressionFit = 9,216233, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), athleteplaysforteam(_, A), teamplaysagainstteam(A, _).  [covers 173,0/407,0 pos, 0,0/0,0 neg]
%     Score = -9,213947 (regressionFit = 9,213944, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), athleteplaysforteam(_, A), teamplaysagainstteam(_, A).  [covers 179,0/407,0 pos, 0,0/0,0 neg]
%     Score = -9,218990 (regressionFit = 9,218987, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), athleteplaysforteam(_, A), teamplaysinleague(A, _).  [covers 174,0/407,0 pos, 0,0/0,0 neg]

***** Warning: #23 TOO MANY NODES CONSIDERED (i.e., 'expanded') for 'LearnOneClause': nodesConsidered = 10 and maxNodesToConsider = 10. *****


% The best node found: teamplayssport(_, A) :- athleteplayssport(B, A), athleteledsportsteam(B, _).  [covers 379,0/407,0 pos, 0,0/0,0 neg]

% The best node found: teamplayssport(_, A) :- athleteplayssport(B, A), athleteledsportsteam(B, _).  [covers 379,0/407,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,023.
% Will extend: teamplayssport(_, A) :- athleteplayssport(B, A), athleteledsportsteam(B, _).  [covers 379,0/407,0 pos, 0,0/0,0 neg]
% Path: 4;true
Comparing variance: 0.013145036075974918 to score=9.43454584424385E-4 #egs=379.0
Comparing variance: 0.1389802025481551 to score=9.43454584424385E-4 #egs=28.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 379,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,013145)
%         ILP node to extend: teamplayssport(_, A) :- athleteplayssport(B, A), athleteledsportsteam(B, _).  [covers 379,0/407,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -0,013145) into position #1 in the search queue (new size=2).
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 28,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,138980)
%         ILP node to extend: teamplayssport(_, A) :- athleteplayssport(_, A).  [covers 407,0/407,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -0,138980) into position #1 in the search queue (new size=3).

% Time for loop #2: 6,676 seconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #2, the best clause found is:
%      teamplayssport(_, A) :- athleteplayssport(B, A), athleteledsportsteam(B, _).  [covers 379,0/407,0 pos, 0,0/0,0 neg]
% This clause covers 379 positive examples, of which 379 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'teamplayssport(_, A) :- athleteplayssport(_, A).  [covers 407,0/28,0 pos, 0,0/0,0 neg]'
%     Score = -12,127749 (regressionFit = 12,127748, penalties=1.23E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(_, A).  [covers 28,0/28,0 pos, 0,0/0,0 neg]

% Have these 7 positive seeds: 1 10 13 15 16 19 21
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Consider expanding [#1 of outerLoop #3, bodyLen=1] 'teamplayssport(_, A) :- athleteplayssport(_, A).  [covers 28,0/28,0 pos, 0,0/0,0 neg]' score=-12.127748927472835
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 8 variant children.  Sending 9 items to OPEN for evaluation and possible insertion.
% Have created 9 valid-on-seeds descendants and have picked up 10 bad extensions.
%     Score = -3,696683 (regressionFit = 3,696681, penalties=2.24E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), athleteledsportsteam(_, A).  [covers 7,0/28,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -3,696683): teamplayssport(A, B) :- athleteplayssport(_, B), athleteledsportsteam(_, A).  [covers 7,0/28,0 pos, 0,0/0,0 neg]
%     Score = -3,847614 (regressionFit = 3,847611, penalties=2.24E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), athleteplaysforteam(_, A).  [covers 10,0/28,0 pos, 0,0/0,0 neg]
%     Score = -3,890067 (regressionFit = 3,890065, penalties=2.24E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _).  [covers 21,0/28,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(_, A), athleteplayssport(_, A).  [covers 28,0/28,0 pos, 0,0/0,0 neg]
%     Score = -3,792281 (regressionFit = 3,792279, penalties=2.24E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(A, _).  [covers 10,0/28,0 pos, 0,0/0,0 neg]
%     Score = -3,656552 (regressionFit = 3,656550, penalties=2.24E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(_, A).  [covers 8,0/28,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -3,656552): teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(_, A).  [covers 8,0/28,0 pos, 0,0/0,0 neg]
%     Score = -3,878879 (regressionFit = 3,878877, penalties=2.24E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(A, _).  [covers 16,0/28,0 pos, 0,0/0,0 neg]
%     Score = -3,875025 (regressionFit = 3,875023, penalties=2.24E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(_, A).  [covers 20,0/28,0 pos, 0,0/0,0 neg]
%     Score = -3,721251 (regressionFit = 3,721249, penalties=2.24E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _).  [covers 16,0/28,0 pos, 0,0/0,0 neg]

% Consider expanding [#2 of outerLoop #3, bodyLen=2] 'teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(_, A).  [covers 8,0/28,0 pos, 0,0/0,0 neg]' score=-3.6565519606912757
%  At # nodes expanded = 2, |OPEN| = 8.  Pruned 22 variant children.  Sending 13 items to OPEN for evaluation and possible insertion.
% Have created 13 valid-on-seeds descendants and have picked up 8 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(_, A), athleteledsportsteam(_, A).  [covers 2,0/28,0 pos, 0,0/0,0 neg]
%     Score = -3,890998 (regressionFit = 3,890995, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(_, A), athleteplaysforteam(_, A).  [covers 3,0/28,0 pos, 0,0/0,0 neg]
%     Score = -3,660818 (regressionFit = 3,660815, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamalsoknownas(_, A), athleteplaysinleague(C, _).  [covers 6,0/28,0 pos, 0,0/0,0 neg]
%     Score = -3,656553 (regressionFit = 3,656550, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(_, A), athleteplayssport(_, B).  [covers 8,0/28,0 pos, 0,0/0,0 neg]
%     Score = -3,535870 (regressionFit = 3,535867, penalties=3.04E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(C, A), teamalsoknownas(A, C).  [covers 6,0/28,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -3,535870): teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(C, A), teamalsoknownas(A, C).  [covers 6,0/28,0 pos, 0,0/0,0 neg]
%     Score = -3,868681 (regressionFit = 3,868678, penalties=3.1400000000000004E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(C, A), teamplaysagainstteam(A, C).  [covers 4,0/28,0 pos, 0,0/0,0 neg]
%     Score = -3,868681 (regressionFit = 3,868678, penalties=3.1400000000000004E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(C, A), teamplaysagainstteam(C, A).  [covers 4,0/28,0 pos, 0,0/0,0 neg]
%     Score = -3,834573 (regressionFit = 3,834570, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(_, A), teamplaysagainstteam(A, _).  [covers 5,0/28,0 pos, 0,0/0,0 neg]
%     Score = -3,749228 (regressionFit = 3,749225, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(C, A), teamplaysagainstteam(C, _).  [covers 6,0/28,0 pos, 0,0/0,0 neg]
%     Score = -3,834573 (regressionFit = 3,834570, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(_, A), teamplaysagainstteam(_, A).  [covers 5,0/28,0 pos, 0,0/0,0 neg]
%     Score = -3,749228 (regressionFit = 3,749225, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(C, A), teamplaysagainstteam(_, C).  [covers 6,0/28,0 pos, 0,0/0,0 neg]
%     Score = -3,733603 (regressionFit = 3,733600, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(_, A), teamplaysinleague(A, _).  [covers 6,0/28,0 pos, 0,0/0,0 neg]
%     Score = -3,701566 (regressionFit = 3,701563, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(C, A), teamplaysinleague(C, _).  [covers 7,0/28,0 pos, 0,0/0,0 neg]

% Consider expanding [#3 of outerLoop #3, bodyLen=2] 'teamplayssport(A, B) :- athleteplayssport(_, B), athleteledsportsteam(_, A).  [covers 7,0/28,0 pos, 0,0/0,0 neg]' score=-3.6966827659815853
%  At # nodes expanded = 3, |OPEN| = 7.  Pruned 12 variant children.  Sending 9 items to OPEN for evaluation and possible insertion.
% Have created 9 valid-on-seeds descendants and have picked up 6 bad extensions.
%     Score = -3,848809 (regressionFit = 3,848806, penalties=3.1400000000000004E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), athleteledsportsteam(C, A), athleteplaysforteam(C, A).  [covers 5,0/28,0 pos, 0,0/0,0 neg]
%     Score = -3,696684 (regressionFit = 3,696681, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), athleteledsportsteam(_, A), athleteplaysforteam(_, A).  [covers 7,0/28,0 pos, 0,0/0,0 neg]
%     Score = -3,890274 (regressionFit = 3,890270, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(_, A), athleteplaysinleague(C, _).  [covers 4,0/28,0 pos, 0,0/0,0 neg]
%     Score = -3,696684 (regressionFit = 3,696681, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), athleteledsportsteam(_, A), athleteplayssport(_, B).  [covers 7,0/28,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), athleteledsportsteam(_, A), teamalsoknownas(A, _).  [covers 1,0/28,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), athleteledsportsteam(_, A), teamalsoknownas(_, A).  [covers 2,0/28,0 pos, 0,0/0,0 neg]
%     Score = -3,696684 (regressionFit = 3,696681, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), athleteledsportsteam(_, A), teamplaysagainstteam(A, _).  [covers 7,0/28,0 pos, 0,0/0,0 neg]
%     Score = -3,696684 (regressionFit = 3,696681, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), athleteledsportsteam(_, A), teamplaysagainstteam(_, A).  [covers 7,0/28,0 pos, 0,0/0,0 neg]
%     Score = -3,600424 (regressionFit = 3,600420, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), athleteledsportsteam(_, A), teamplaysinleague(A, _).  [covers 6,0/28,0 pos, 0,0/0,0 neg]

% Consider expanding [#4 of outerLoop #3, bodyLen=2] 'teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _).  [covers 16,0/28,0 pos, 0,0/0,0 neg]' score=-3.721250798669591
%  At # nodes expanded = 4, |OPEN| = 6.  Pruned 10 variant children.  Sending 9 items to OPEN for evaluation and possible insertion.
% Have created 9 valid-on-seeds descendants and have picked up 5 bad extensions.
%     Score = -3,600424 (regressionFit = 3,600420, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), athleteledsportsteam(_, A).  [covers 6,0/28,0 pos, 0,0/0,0 neg]
%     Score = -3,600424 (regressionFit = 3,600420, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), athleteplaysforteam(_, A).  [covers 6,0/28,0 pos, 0,0/0,0 neg]
%     Score = -3,848178 (regressionFit = 3,848175, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, _), athleteplaysinleague(C, _).  [covers 12,0/28,0 pos, 0,0/0,0 neg]
%     Score = -3,721252 (regressionFit = 3,721249, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), athleteplayssport(_, B).  [covers 16,0/28,0 pos, 0,0/0,0 neg]
%     Score = -3,855068 (regressionFit = 3,855065, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), teamalsoknownas(A, _).  [covers 7,0/28,0 pos, 0,0/0,0 neg]
%     Score = -3,733603 (regressionFit = 3,733600, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), teamalsoknownas(_, A).  [covers 6,0/28,0 pos, 0,0/0,0 neg]
%     Score = -3,857218 (regressionFit = 3,857215, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), teamplaysagainstteam(A, _).  [covers 9,0/28,0 pos, 0,0/0,0 neg]
%     Score = -3,891405 (regressionFit = 3,891401, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), teamplaysagainstteam(_, A).  [covers 12,0/28,0 pos, 0,0/0,0 neg]
%     Score = -3,721252 (regressionFit = 3,721249, penalties=3.1500000000000008E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), teamplaysinleague(_, C).  [covers 16,0/28,0 pos, 0,0/0,0 neg]

% Consider expanding [#5 of outerLoop #3, bodyLen=2] 'teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(A, _).  [covers 10,0/28,0 pos, 0,0/0,0 neg]' score=-3.7922809021667505
%  At # nodes expanded = 5, |OPEN| = 5.  Pruned 22 variant children.  Sending 14 items to OPEN for evaluation and possible insertion.
% Have created 14 valid-on-seeds descendants and have picked up 8 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(A, _), athleteledsportsteam(_, A).  [covers 1,0/28,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(A, _), athleteplaysforteam(_, A).  [covers 1,0/28,0 pos, 0,0/0,0 neg]
%     Score = -3,803726 (regressionFit = 3,803723, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(A, C), athleteplaysforteam(_, C).  [covers 3,0/28,0 pos, 0,0/0,0 neg]
%     Score = -3,867012 (regressionFit = 3,867009, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamalsoknownas(A, _), athleteplaysinleague(C, _).  [covers 9,0/28,0 pos, 0,0/0,0 neg]
%     Score = -3,792282 (regressionFit = 3,792279, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(A, _), athleteplayssport(_, B).  [covers 10,0/28,0 pos, 0,0/0,0 neg]
%     Score = -3,535870 (regressionFit = 3,535867, penalties=3.04E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(A, C), teamalsoknownas(C, A).  [covers 6,0/28,0 pos, 0,0/0,0 neg]
%     Score = -3,787233 (regressionFit = 3,787230, penalties=3.1400000000000004E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(A, C), teamplaysagainstteam(A, C).  [covers 3,0/28,0 pos, 0,0/0,0 neg]
%     Score = -3,787233 (regressionFit = 3,787230, penalties=3.1400000000000004E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(A, C), teamplaysagainstteam(C, A).  [covers 3,0/28,0 pos, 0,0/0,0 neg]
%     Score = -3,717572 (regressionFit = 3,717568, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(A, _), teamplaysagainstteam(A, _).  [covers 5,0/28,0 pos, 0,0/0,0 neg]
%     Score = -3,766067 (regressionFit = 3,766063, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(A, C), teamplaysagainstteam(C, _).  [covers 4,0/28,0 pos, 0,0/0,0 neg]
%     Score = -3,698238 (regressionFit = 3,698235, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(A, _), teamplaysagainstteam(_, A).  [covers 6,0/28,0 pos, 0,0/0,0 neg]
%     Score = -3,766067 (regressionFit = 3,766063, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(A, C), teamplaysagainstteam(_, C).  [covers 4,0/28,0 pos, 0,0/0,0 neg]
%     Score = -3,855068 (regressionFit = 3,855065, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(A, _), teamplaysinleague(A, _).  [covers 7,0/28,0 pos, 0,0/0,0 neg]
%     Score = -3,814472 (regressionFit = 3,814469, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(A, C), teamplaysinleague(C, _).  [covers 9,0/28,0 pos, 0,0/0,0 neg]

% Consider expanding [#6 of outerLoop #3, bodyLen=2] 'teamplayssport(A, B) :- athleteplayssport(_, B), athleteplaysforteam(_, A).  [covers 10,0/28,0 pos, 0,0/0,0 neg]' score=-3.847613692167234
%  At # nodes expanded = 6, |OPEN| = 4.  Pruned 12 variant children.  Sending 10 items to OPEN for evaluation and possible insertion.
% Have created 10 valid-on-seeds descendants and have picked up 6 bad extensions.
%     Score = -3,848809 (regressionFit = 3,848806, penalties=3.1400000000000004E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), athleteplaysforteam(C, A), athleteledsportsteam(C, A).  [covers 5,0/28,0 pos, 0,0/0,0 neg]
%     Score = -3,696684 (regressionFit = 3,696681, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), athleteplaysforteam(_, A), athleteledsportsteam(_, A).  [covers 7,0/28,0 pos, 0,0/0,0 neg]
%     Score = -3,847615 (regressionFit = 3,847611, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), athleteplaysforteam(_, A), athleteplaysforteam(_, A).  [covers 10,0/28,0 pos, 0,0/0,0 neg]
%     Score = -3,858347 (regressionFit = 3,858344, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysforteam(_, A), athleteplaysinleague(C, _).  [covers 7,0/28,0 pos, 0,0/0,0 neg]
%     Score = -3,847615 (regressionFit = 3,847611, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), athleteplaysforteam(_, A), athleteplayssport(_, B).  [covers 10,0/28,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), athleteplaysforteam(_, A), teamalsoknownas(A, _).  [covers 1,0/28,0 pos, 0,0/0,0 neg]
%     Score = -3,890998 (regressionFit = 3,890995, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), athleteplaysforteam(_, A), teamalsoknownas(_, A).  [covers 3,0/28,0 pos, 0,0/0,0 neg]
%     Score = -3,847615 (regressionFit = 3,847611, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), athleteplaysforteam(_, A), teamplaysagainstteam(A, _).  [covers 10,0/28,0 pos, 0,0/0,0 neg]
%     Score = -3,847615 (regressionFit = 3,847611, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), athleteplaysforteam(_, A), teamplaysagainstteam(_, A).  [covers 10,0/28,0 pos, 0,0/0,0 neg]
%     Score = -3,600424 (regressionFit = 3,600420, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), athleteplaysforteam(_, A), teamplaysinleague(A, _).  [covers 6,0/28,0 pos, 0,0/0,0 neg]

% Consider expanding [#7 of outerLoop #3, bodyLen=2] 'teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(_, A).  [covers 20,0/28,0 pos, 0,0/0,0 neg]' score=-3.8750252074260074
%  At # nodes expanded = 7, |OPEN| = 3.  Pruned 22 variant children.  Sending 19 items to OPEN for evaluation and possible insertion.
% Have created 19 valid-on-seeds descendants and have picked up 8 bad extensions.
%     Score = -3,696684 (regressionFit = 3,696681, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(_, A), athleteledsportsteam(_, A).  [covers 7,0/28,0 pos, 0,0/0,0 neg]
%     Score = -3,886641 (regressionFit = 3,886638, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(C, A), athleteledsportsteam(_, C).  [covers 11,0/28,0 pos, 0,0/0,0 neg]
%     Score = -3,847615 (regressionFit = 3,847611, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(_, A), athleteplaysforteam(_, A).  [covers 10,0/28,0 pos, 0,0/0,0 neg]
%     Score = -3,862556 (regressionFit = 3,862553, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(C, A), athleteplaysforteam(_, C).  [covers 15,0/28,0 pos, 0,0/0,0 neg]
%     Score = -3,655971 (regressionFit = 3,655968, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysagainstteam(_, A), athleteplaysinleague(C, _).  [covers 17,0/28,0 pos, 0,0/0,0 neg]
%     Score = -3,875026 (regressionFit = 3,875023, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(_, A), athleteplayssport(_, B).  [covers 20,0/28,0 pos, 0,0/0,0 neg]
%     Score = -3,787233 (regressionFit = 3,787230, penalties=3.1400000000000004E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(C, A), teamalsoknownas(A, C).  [covers 3,0/28,0 pos, 0,0/0,0 neg]
%     Score = -3,868681 (regressionFit = 3,868678, penalties=3.1400000000000004E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(C, A), teamalsoknownas(C, A).  [covers 4,0/28,0 pos, 0,0/0,0 neg]
%     Score = -3,698238 (regressionFit = 3,698235, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(_, A), teamalsoknownas(A, _).  [covers 6,0/28,0 pos, 0,0/0,0 neg]
%     Score = -3,886354 (regressionFit = 3,886350, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(C, A), teamalsoknownas(C, _).  [covers 13,0/28,0 pos, 0,0/0,0 neg]
%     Score = -3,834573 (regressionFit = 3,834570, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(_, A), teamalsoknownas(_, A).  [covers 5,0/28,0 pos, 0,0/0,0 neg]
%     Score = -3,879930 (regressionFit = 3,879927, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(C, A), teamalsoknownas(_, C).  [covers 11,0/28,0 pos, 0,0/0,0 neg]
%     Score = -3,867737 (regressionFit = 3,867734, penalties=3.04E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(C, A), teamplaysagainstteam(A, C).  [covers 15,0/28,0 pos, 0,0/0,0 neg]
%     Score = -3,878880 (regressionFit = 3,878877, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(_, A), teamplaysagainstteam(A, _).  [covers 16,0/28,0 pos, 0,0/0,0 neg]
%     Score = -3,875026 (regressionFit = 3,875023, penalties=3.1500000000000008E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(C, A), teamplaysagainstteam(C, _).  [covers 20,0/28,0 pos, 0,0/0,0 neg]
%     Score = -3,875026 (regressionFit = 3,875023, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(_, A), teamplaysagainstteam(_, A).  [covers 20,0/28,0 pos, 0,0/0,0 neg]
%     Score = -3,875026 (regressionFit = 3,875023, penalties=3.1500000000000008E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(C, A), teamplaysagainstteam(_, C).  [covers 20,0/28,0 pos, 0,0/0,0 neg]
%     Score = -3,891405 (regressionFit = 3,891401, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(_, A), teamplaysinleague(A, _).  [covers 12,0/28,0 pos, 0,0/0,0 neg]
%     Score = -3,879453 (regressionFit = 3,879449, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(C, A), teamplaysinleague(C, _).  [covers 16,0/28,0 pos, 0,0/0,0 neg]

% Consider expanding [#8 of outerLoop #3, bodyLen=2] 'teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(A, _).  [covers 16,0/28,0 pos, 0,0/0,0 neg]' score=-3.8788789570455653
%  At # nodes expanded = 8, |OPEN| = 2.  Pruned 22 variant children.  Sending 19 items to OPEN for evaluation and possible insertion.
% Have created 19 valid-on-seeds descendants and have picked up 8 bad extensions.
%     Score = -3,696684 (regressionFit = 3,696681, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(A, _), athleteledsportsteam(_, A).  [covers 7,0/28,0 pos, 0,0/0,0 neg]
%     Score = -3,857218 (regressionFit = 3,857215, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(A, C), athleteledsportsteam(_, C).  [covers 9,0/28,0 pos, 0,0/0,0 neg]
%     Score = -3,847615 (regressionFit = 3,847611, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(A, _), athleteplaysforteam(_, A).  [covers 10,0/28,0 pos, 0,0/0,0 neg]
%     Score = -3,837625 (regressionFit = 3,837622, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(A, C), athleteplaysforteam(_, C).  [covers 14,0/28,0 pos, 0,0/0,0 neg]
%     Score = -3,830007 (regressionFit = 3,830004, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysagainstteam(A, _), athleteplaysinleague(C, _).  [covers 13,0/28,0 pos, 0,0/0,0 neg]
%     Score = -3,878880 (regressionFit = 3,878877, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(A, _), athleteplayssport(_, B).  [covers 16,0/28,0 pos, 0,0/0,0 neg]
%     Score = -3,787233 (regressionFit = 3,787230, penalties=3.1400000000000004E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(A, C), teamalsoknownas(A, C).  [covers 3,0/28,0 pos, 0,0/0,0 neg]
%     Score = -3,868681 (regressionFit = 3,868678, penalties=3.1400000000000004E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(A, C), teamalsoknownas(C, A).  [covers 4,0/28,0 pos, 0,0/0,0 neg]
%     Score = -3,717572 (regressionFit = 3,717568, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(A, _), teamalsoknownas(A, _).  [covers 5,0/28,0 pos, 0,0/0,0 neg]
%     Score = -3,817859 (regressionFit = 3,817856, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(A, C), teamalsoknownas(C, _).  [covers 12,0/28,0 pos, 0,0/0,0 neg]
%     Score = -3,834573 (regressionFit = 3,834570, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(A, _), teamalsoknownas(_, A).  [covers 5,0/28,0 pos, 0,0/0,0 neg]
%     Score = -3,890703 (regressionFit = 3,890700, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(A, C), teamalsoknownas(_, C).  [covers 12,0/28,0 pos, 0,0/0,0 neg]
%     Score = -3,867737 (regressionFit = 3,867734, penalties=3.04E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(A, C), teamplaysagainstteam(C, A).  [covers 15,0/28,0 pos, 0,0/0,0 neg]
%     Score = -3,878880 (regressionFit = 3,878877, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(A, _), teamplaysagainstteam(A, _).  [covers 16,0/28,0 pos, 0,0/0,0 neg]
%     Score = -3,878880 (regressionFit = 3,878877, penalties=3.1500000000000008E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(A, C), teamplaysagainstteam(C, _).  [covers 16,0/28,0 pos, 0,0/0,0 neg]
%     Score = -3,878880 (regressionFit = 3,878877, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(A, _), teamplaysagainstteam(_, A).  [covers 16,0/28,0 pos, 0,0/0,0 neg]
%     Score = -3,878880 (regressionFit = 3,878877, penalties=3.1500000000000008E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(A, C), teamplaysagainstteam(_, C).  [covers 16,0/28,0 pos, 0,0/0,0 neg]
%     Score = -3,857218 (regressionFit = 3,857215, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(A, _), teamplaysinleague(A, _).  [covers 9,0/28,0 pos, 0,0/0,0 neg]
%     Score = -3,776783 (regressionFit = 3,776779, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(A, C), teamplaysinleague(C, _).  [covers 12,0/28,0 pos, 0,0/0,0 neg]

% Consider expanding [#9 of outerLoop #3, bodyLen=2] 'teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _).  [covers 21,0/28,0 pos, 0,0/0,0 neg]' score=-3.890067294305362
%  At # nodes expanded = 9, |OPEN| = 1.  Pruned 10 variant children.  Sending 10 items to OPEN for evaluation and possible insertion.
% Have created 10 valid-on-seeds descendants and have picked up 5 bad extensions.
%     Score = -3,890274 (regressionFit = 3,890270, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteledsportsteam(_, A).  [covers 4,0/28,0 pos, 0,0/0,0 neg]
%     Score = -3,858347 (regressionFit = 3,858344, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteplaysforteam(_, A).  [covers 7,0/28,0 pos, 0,0/0,0 neg]
%     Score = -3,890068 (regressionFit = 3,890065, penalties=3.1500000000000008E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, C), athleteplaysinleague(_, C).  [covers 21,0/28,0 pos, 0,0/0,0 neg]
%     Score = -3,890068 (regressionFit = 3,890065, penalties=3.2500000000000006E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteplayssport(_, A).  [covers 21,0/28,0 pos, 0,0/0,0 neg]
%     Score = -3,867012 (regressionFit = 3,867009, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(A, _).  [covers 9,0/28,0 pos, 0,0/0,0 neg]
%     Score = -3,660818 (regressionFit = 3,660815, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(_, A).  [covers 6,0/28,0 pos, 0,0/0,0 neg]
%     Score = -3,830007 (regressionFit = 3,830004, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(A, _).  [covers 13,0/28,0 pos, 0,0/0,0 neg]
%     Score = -3,655971 (regressionFit = 3,655968, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(_, A).  [covers 17,0/28,0 pos, 0,0/0,0 neg]
%     Score = -3,848178 (regressionFit = 3,848175, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysinleague(A, _).  [covers 12,0/28,0 pos, 0,0/0,0 neg]
%     Score = -3,890068 (regressionFit = 3,890065, penalties=3.2500000000000006E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, C), teamplaysinleague(_, C).  [covers 21,0/28,0 pos, 0,0/0,0 neg]

***** Warning: #24 TOO MANY NODES CONSIDERED (i.e., 'expanded') for 'LearnOneClause': nodesConsidered = 10 and maxNodesToConsider = 10. *****


% The best node found: teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(C, A), teamalsoknownas(A, C).  [covers 6,0/28,0 pos, 0,0/0,0 neg]

% The best node found: teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(C, A), teamalsoknownas(A, C).  [covers 6,0/28,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,139.
% Will extend: teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(C, A), teamalsoknownas(A, C).  [covers 6,0/28,0 pos, 0,0/0,0 neg]
% Path: 4;true,false
Comparing variance: 0.009292918200141886 to score=9.43454584424385E-4 #egs=6.0
Comparing variance: 0.15818680307444263 to score=9.43454584424385E-4 #egs=22.0
%   Creating a TRUE-branch leaf because wgtedCountTrueBranchPos = 6,0 < 2.1 * minPosCov = 6,3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 22,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,158187)
%         ILP node to extend: teamplayssport(_, A) :- athleteplayssport(_, A).  [covers 28,0/28,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -0,158187) into position #1 in the search queue (new size=3).

% Time for loop #3: 238 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #3, the best clause found is:
%      teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(C, A), teamalsoknownas(A, C).  [covers 6,0/28,0 pos, 0,0/0,0 neg]
% This clause covers 6 positive examples, of which 6 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'teamplayssport(_, A) :- athleteplayssport(_, A).  [covers 28,0/22,0 pos, 0,0/0,0 neg]'
%     Score = -12,127749 (regressionFit = 12,127748, penalties=1.23E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(_, A).  [covers 22,0/22,0 pos, 0,0/0,0 neg]

% Have these 7 positive seeds: 1 2 8 9 10 15 17
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Consider expanding [#1 of outerLoop #4, bodyLen=1] 'teamplayssport(_, A) :- athleteplayssport(_, A).  [covers 22,0/22,0 pos, 0,0/0,0 neg]' score=-12.127748927472835
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 8 variant children.  Sending 10 items to OPEN for evaluation and possible insertion.
% Have created 10 valid-on-seeds descendants and have picked up 14 bad extensions.
%     Score = -3,322617 (regressionFit = 3,322615, penalties=2.24E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), athleteledsportsteam(_, A).  [covers 6,0/22,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -3,322617): teamplayssport(A, B) :- athleteplayssport(_, B), athleteledsportsteam(_, A).  [covers 6,0/22,0 pos, 0,0/0,0 neg]
%     Score = -3,473639 (regressionFit = 3,473637, penalties=2.24E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysforteam(B, _).  [covers 4,0/22,0 pos, 0,0/0,0 neg]
%     Score = -3,474543 (regressionFit = 3,474541, penalties=2.24E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), athleteplaysforteam(_, A).  [covers 9,0/22,0 pos, 0,0/0,0 neg]
%     Score = -3,479956 (regressionFit = 3,479953, penalties=2.24E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _).  [covers 16,0/22,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(_, A), athleteplayssport(_, A).  [covers 22,0/22,0 pos, 0,0/0,0 neg]
%     Score = -3,459317 (regressionFit = 3,459314, penalties=2.24E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(A, _).  [covers 4,0/22,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(_, A).  [covers 2,0/22,0 pos, 0,0/0,0 neg]
%     Score = -3,475994 (regressionFit = 3,475991, penalties=2.24E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(A, _).  [covers 13,0/22,0 pos, 0,0/0,0 neg]
%     Score = -3,357839 (regressionFit = 3,357837, penalties=2.24E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(_, A).  [covers 17,0/22,0 pos, 0,0/0,0 neg]
%     Score = -3,019384 (regressionFit = 3,019382, penalties=2.24E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _).  [covers 11,0/22,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -3,019384): teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _).  [covers 11,0/22,0 pos, 0,0/0,0 neg]

% Consider expanding [#2 of outerLoop #4, bodyLen=2] 'teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _).  [covers 11,0/22,0 pos, 0,0/0,0 neg]' score=-3.019383774160667
%  At # nodes expanded = 2, |OPEN| = 9.  Pruned 10 variant children.  Sending 11 items to OPEN for evaluation and possible insertion.
% Have created 11 valid-on-seeds descendants and have picked up 5 bad extensions.
%     Score = -3,195859 (regressionFit = 3,195856, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), athleteledsportsteam(_, A).  [covers 5,0/22,0 pos, 0,0/0,0 neg]
%     Score = -3,250583 (regressionFit = 3,250579, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, _), athleteplaysforteam(C, _).  [covers 3,0/22,0 pos, 0,0/0,0 neg]
%     Score = -3,195859 (regressionFit = 3,195856, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), athleteplaysforteam(_, A).  [covers 5,0/22,0 pos, 0,0/0,0 neg]
%     Score = -3,347811 (regressionFit = 3,347808, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysinleague(A, _), athleteplaysinleague(C, _).  [covers 8,0/22,0 pos, 0,0/0,0 neg]
%     Score = -2,865727 (regressionFit = 2,865724, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(_, C).  [covers 10,0/22,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -2,865727): teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(_, C).  [covers 10,0/22,0 pos, 0,0/0,0 neg]
%     Score = -3,019385 (regressionFit = 3,019382, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), athleteplayssport(_, B).  [covers 11,0/22,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), teamalsoknownas(A, _).  [covers 2,0/22,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), teamalsoknownas(_, A).  [covers 1,0/22,0 pos, 0,0/0,0 neg]
%     Score = -3,360124 (regressionFit = 3,360120, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), teamplaysagainstteam(A, _).  [covers 6,0/22,0 pos, 0,0/0,0 neg]
%     Score = -3,477950 (regressionFit = 3,477947, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, _), teamplaysagainstteam(_, A).  [covers 9,0/22,0 pos, 0,0/0,0 neg]
%     Score = -3,019385 (regressionFit = 3,019382, penalties=3.1500000000000008E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), teamplaysinleague(_, C).  [covers 11,0/22,0 pos, 0,0/0,0 neg]

% Consider expanding [#3 of outerLoop #4, bodyLen=2] 'teamplayssport(A, B) :- athleteplayssport(_, B), athleteledsportsteam(_, A).  [covers 6,0/22,0 pos, 0,0/0,0 neg]' score=-3.3226168565265
%  At # nodes expanded = 3, |OPEN| = 8.  Pruned 12 variant children.  Sending 8 items to OPEN for evaluation and possible insertion.
% Have created 8 valid-on-seeds descendants and have picked up 8 bad extensions.
%     Score = -3,250583 (regressionFit = 3,250579, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(_, A), athleteplaysforteam(C, _).  [covers 3,0/22,0 pos, 0,0/0,0 neg]
%     Score = -3,389582 (regressionFit = 3,389578, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), athleteledsportsteam(C, A), athleteplaysforteam(C, _).  [covers 5,0/22,0 pos, 0,0/0,0 neg]
%     Score = -3,322618 (regressionFit = 3,322615, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), athleteledsportsteam(_, A), athleteplaysforteam(_, A).  [covers 6,0/22,0 pos, 0,0/0,0 neg]
%     Score = -3,322618 (regressionFit = 3,322615, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), athleteledsportsteam(_, A), athleteplayssport(_, B).  [covers 6,0/22,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), athleteledsportsteam(_, A), teamalsoknownas(_, A).  [covers 1,0/22,0 pos, 0,0/0,0 neg]
%     Score = -3,322618 (regressionFit = 3,322615, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), athleteledsportsteam(_, A), teamplaysagainstteam(A, _).  [covers 6,0/22,0 pos, 0,0/0,0 neg]
%     Score = -3,322618 (regressionFit = 3,322615, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), athleteledsportsteam(_, A), teamplaysagainstteam(_, A).  [covers 6,0/22,0 pos, 0,0/0,0 neg]
%     Score = -3,195859 (regressionFit = 3,195856, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), athleteledsportsteam(_, A), teamplaysinleague(A, _).  [covers 5,0/22,0 pos, 0,0/0,0 neg]

% Consider expanding [#4 of outerLoop #4, bodyLen=2] 'teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(_, A).  [covers 17,0/22,0 pos, 0,0/0,0 neg]' score=-3.35783921975175
%  At # nodes expanded = 4, |OPEN| = 7.  Pruned 22 variant children.  Sending 19 items to OPEN for evaluation and possible insertion.
% Have created 19 valid-on-seeds descendants and have picked up 9 bad extensions.
%     Score = -3,322618 (regressionFit = 3,322615, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(_, A), athleteledsportsteam(_, A).  [covers 6,0/22,0 pos, 0,0/0,0 neg]
%     Score = -3,458998 (regressionFit = 3,458995, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(C, A), athleteledsportsteam(_, C).  [covers 8,0/22,0 pos, 0,0/0,0 neg]
%     Score = -3,250583 (regressionFit = 3,250579, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysagainstteam(_, A), athleteplaysforteam(C, _).  [covers 3,0/22,0 pos, 0,0/0,0 neg]
%     Score = -3,474544 (regressionFit = 3,474541, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(_, A), athleteplaysforteam(_, A).  [covers 9,0/22,0 pos, 0,0/0,0 neg]
%     Score = -3,456109 (regressionFit = 3,456106, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(C, A), athleteplaysforteam(_, C).  [covers 12,0/22,0 pos, 0,0/0,0 neg]
%     Score = -3,062272 (regressionFit = 3,062269, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysagainstteam(_, A), athleteplaysinleague(C, _).  [covers 14,0/22,0 pos, 0,0/0,0 neg]
%     Score = -3,357840 (regressionFit = 3,357837, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(_, A), athleteplayssport(_, B).  [covers 17,0/22,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1400000000000004E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(C, A), teamalsoknownas(C, A).  [covers 2,0/22,0 pos, 0,0/0,0 neg]
%     Score = -3,379148 (regressionFit = 3,379145, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(_, A), teamalsoknownas(A, _).  [covers 3,0/22,0 pos, 0,0/0,0 neg]
%     Score = -3,475571 (regressionFit = 3,475567, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(C, A), teamalsoknownas(C, _).  [covers 10,0/22,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(_, A), teamalsoknownas(_, A).  [covers 2,0/22,0 pos, 0,0/0,0 neg]
%     Score = -3,476860 (regressionFit = 3,476856, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(C, A), teamalsoknownas(_, C).  [covers 8,0/22,0 pos, 0,0/0,0 neg]
%     Score = -3,461382 (regressionFit = 3,461379, penalties=3.04E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(C, A), teamplaysagainstteam(A, C).  [covers 12,0/22,0 pos, 0,0/0,0 neg]
%     Score = -3,475995 (regressionFit = 3,475991, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(_, A), teamplaysagainstteam(A, _).  [covers 13,0/22,0 pos, 0,0/0,0 neg]
%     Score = -3,357840 (regressionFit = 3,357837, penalties=3.1500000000000008E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(C, A), teamplaysagainstteam(C, _).  [covers 17,0/22,0 pos, 0,0/0,0 neg]
%     Score = -3,357840 (regressionFit = 3,357837, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(_, A), teamplaysagainstteam(_, A).  [covers 17,0/22,0 pos, 0,0/0,0 neg]
%     Score = -3,357840 (regressionFit = 3,357837, penalties=3.1500000000000008E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(C, A), teamplaysagainstteam(_, C).  [covers 17,0/22,0 pos, 0,0/0,0 neg]
%     Score = -3,477950 (regressionFit = 3,477947, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(_, A), teamplaysinleague(A, _).  [covers 9,0/22,0 pos, 0,0/0,0 neg]
%     Score = -3,476363 (regressionFit = 3,476359, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(C, A), teamplaysinleague(C, _).  [covers 13,0/22,0 pos, 0,0/0,0 neg]

% Consider expanding [#5 of outerLoop #4, bodyLen=2] 'teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(A, _).  [covers 4,0/22,0 pos, 0,0/0,0 neg]' score=-3.4593165140333197
%  At # nodes expanded = 5, |OPEN| = 6.  Pruned 22 variant children.  Sending 7 items to OPEN for evaluation and possible insertion.
% Have created 7 valid-on-seeds descendants and have picked up 11 bad extensions.
%     Score = -3,459318 (regressionFit = 3,459314, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamalsoknownas(A, _), athleteplaysinleague(C, _).  [covers 4,0/22,0 pos, 0,0/0,0 neg]
%     Score = -3,459318 (regressionFit = 3,459314, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(A, _), athleteplayssport(_, B).  [covers 4,0/22,0 pos, 0,0/0,0 neg]
%     Score = -3,407908 (regressionFit = 3,407905, penalties=3.1500000000000008E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(A, C), teamalsoknownas(C, _).  [covers 3,0/22,0 pos, 0,0/0,0 neg]
%     Score = -3,459317 (regressionFit = 3,459314, penalties=3.1500000000000008E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(A, C), teamalsoknownas(_, C).  [covers 4,0/22,0 pos, 0,0/0,0 neg]
%     Score = -3,379148 (regressionFit = 3,379145, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(A, _), teamplaysagainstteam(_, A).  [covers 3,0/22,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(A, _), teamplaysinleague(A, _).  [covers 2,0/22,0 pos, 0,0/0,0 neg]
%     Score = -3,407908 (regressionFit = 3,407905, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamalsoknownas(A, C), teamplaysinleague(C, _).  [covers 3,0/22,0 pos, 0,0/0,0 neg]

% Consider expanding [#6 of outerLoop #4, bodyLen=2] 'teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysforteam(B, _).  [covers 4,0/22,0 pos, 0,0/0,0 neg]' score=-3.473639336652652
%  At # nodes expanded = 6, |OPEN| = 5.  Pruned 22 variant children.  Sending 12 items to OPEN for evaluation and possible insertion.
% Have created 12 valid-on-seeds descendants and have picked up 12 bad extensions.
%     Score = -3,250583 (regressionFit = 3,250579, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysforteam(C, _), athleteledsportsteam(_, A).  [covers 3,0/22,0 pos, 0,0/0,0 neg]
%     Score = -3,473640 (regressionFit = 3,473637, penalties=3.2500000000000006E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysforteam(B, C), athleteledsportsteam(_, C).  [covers 4,0/22,0 pos, 0,0/0,0 neg]
%     Score = -3,250583 (regressionFit = 3,250579, penalties=3.1500000000000008E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysforteam(C, _), athleteplaysforteam(_, A).  [covers 3,0/22,0 pos, 0,0/0,0 neg]
%     Score = -3,473640 (regressionFit = 3,473637, penalties=3.1500000000000008E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysforteam(B, C), athleteplaysforteam(_, C).  [covers 4,0/22,0 pos, 0,0/0,0 neg]
%     Score = -3,473640 (regressionFit = 3,473637, penalties=3.2500000000000006E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysforteam(B, _), athleteplayssport(_, A).  [covers 4,0/22,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysforteam(C, _), teamalsoknownas(_, A).  [covers 1,0/22,0 pos, 0,0/0,0 neg]
%     Score = -3,250583 (regressionFit = 3,250579, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysforteam(C, _), teamplaysagainstteam(A, _).  [covers 3,0/22,0 pos, 0,0/0,0 neg]
%     Score = -3,473640 (regressionFit = 3,473637, penalties=3.2500000000000006E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysforteam(B, C), teamplaysagainstteam(C, _).  [covers 4,0/22,0 pos, 0,0/0,0 neg]
%     Score = -3,250583 (regressionFit = 3,250579, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysforteam(C, _), teamplaysagainstteam(_, A).  [covers 3,0/22,0 pos, 0,0/0,0 neg]
%     Score = -3,473640 (regressionFit = 3,473637, penalties=3.2500000000000006E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysforteam(B, C), teamplaysagainstteam(_, C).  [covers 4,0/22,0 pos, 0,0/0,0 neg]
%     Score = -3,250583 (regressionFit = 3,250579, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysforteam(C, _), teamplaysinleague(A, _).  [covers 3,0/22,0 pos, 0,0/0,0 neg]
%     Score = -3,473640 (regressionFit = 3,473637, penalties=3.2500000000000006E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysforteam(B, C), teamplaysinleague(C, _).  [covers 4,0/22,0 pos, 0,0/0,0 neg]

% Consider expanding [#7 of outerLoop #4, bodyLen=2] 'teamplayssport(A, B) :- athleteplayssport(_, B), athleteplaysforteam(_, A).  [covers 9,0/22,0 pos, 0,0/0,0 neg]' score=-3.474542769699837
%  At # nodes expanded = 7, |OPEN| = 4.  Pruned 12 variant children.  Sending 12 items to OPEN for evaluation and possible insertion.
% Have created 12 valid-on-seeds descendants and have picked up 6 bad extensions.
%     Score = -3,389582 (regressionFit = 3,389578, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), athleteplaysforteam(C, A), athleteledsportsteam(C, _).  [covers 5,0/22,0 pos, 0,0/0,0 neg]
%     Score = -3,322618 (regressionFit = 3,322615, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), athleteplaysforteam(_, A), athleteledsportsteam(_, A).  [covers 6,0/22,0 pos, 0,0/0,0 neg]
%     Score = -3,250583 (regressionFit = 3,250579, penalties=3.1500000000000008E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysforteam(_, A), athleteplaysforteam(C, _).  [covers 3,0/22,0 pos, 0,0/0,0 neg]
%     Score = -3,474544 (regressionFit = 3,474541, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), athleteplaysforteam(_, A), athleteplaysforteam(_, A).  [covers 9,0/22,0 pos, 0,0/0,0 neg]
%     Score = -3,397870 (regressionFit = 3,397867, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysforteam(_, A), athleteplaysinleague(C, _).  [covers 6,0/22,0 pos, 0,0/0,0 neg]
%     Score = -3,055265 (regressionFit = 3,055262, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), athleteplaysforteam(C, A), athleteplaysinleague(C, _).  [covers 3,0/22,0 pos, 0,0/0,0 neg]
%     Score = -3,055265 (regressionFit = 3,055262, penalties=3.1500000000000008E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), athleteplaysforteam(C, A), athleteplayssport(C, _).  [covers 3,0/22,0 pos, 0,0/0,0 neg]
%     Score = -3,474544 (regressionFit = 3,474541, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), athleteplaysforteam(_, A), athleteplayssport(_, B).  [covers 9,0/22,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), athleteplaysforteam(_, A), teamalsoknownas(_, A).  [covers 2,0/22,0 pos, 0,0/0,0 neg]
%     Score = -3,474544 (regressionFit = 3,474541, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), athleteplaysforteam(_, A), teamplaysagainstteam(A, _).  [covers 9,0/22,0 pos, 0,0/0,0 neg]
%     Score = -3,474544 (regressionFit = 3,474541, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), athleteplaysforteam(_, A), teamplaysagainstteam(_, A).  [covers 9,0/22,0 pos, 0,0/0,0 neg]
%     Score = -3,195859 (regressionFit = 3,195856, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), athleteplaysforteam(_, A), teamplaysinleague(A, _).  [covers 5,0/22,0 pos, 0,0/0,0 neg]

% Consider expanding [#8 of outerLoop #4, bodyLen=2] 'teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(A, _).  [covers 13,0/22,0 pos, 0,0/0,0 neg]' score=-3.4759935651712994
%  At # nodes expanded = 8, |OPEN| = 3.  Pruned 22 variant children.  Sending 18 items to OPEN for evaluation and possible insertion.
% Have created 18 valid-on-seeds descendants and have picked up 9 bad extensions.
%     Score = -3,322618 (regressionFit = 3,322615, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(A, _), athleteledsportsteam(_, A).  [covers 6,0/22,0 pos, 0,0/0,0 neg]
%     Score = -3,360123 (regressionFit = 3,360120, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(A, C), athleteledsportsteam(_, C).  [covers 6,0/22,0 pos, 0,0/0,0 neg]
%     Score = -3,250583 (regressionFit = 3,250579, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysagainstteam(A, _), athleteplaysforteam(C, _).  [covers 3,0/22,0 pos, 0,0/0,0 neg]
%     Score = -3,474544 (regressionFit = 3,474541, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(A, _), athleteplaysforteam(_, A).  [covers 9,0/22,0 pos, 0,0/0,0 neg]
%     Score = -3,417692 (regressionFit = 3,417688, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(A, C), athleteplaysforteam(_, C).  [covers 11,0/22,0 pos, 0,0/0,0 neg]
%     Score = -3,408917 (regressionFit = 3,408914, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), teamplaysagainstteam(A, _), athleteplaysinleague(C, _).  [covers 10,0/22,0 pos, 0,0/0,0 neg]
%     Score = -3,475995 (regressionFit = 3,475991, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(A, _), athleteplayssport(_, B).  [covers 13,0/22,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1400000000000004E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(A, C), teamalsoknownas(C, A).  [covers 2,0/22,0 pos, 0,0/0,0 neg]
%     Score = -3,407706 (regressionFit = 3,407703, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(A, C), teamalsoknownas(C, _).  [covers 9,0/22,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(A, _), teamalsoknownas(_, A).  [covers 2,0/22,0 pos, 0,0/0,0 neg]
%     Score = -3,475219 (regressionFit = 3,475215, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(A, C), teamalsoknownas(_, C).  [covers 9,0/22,0 pos, 0,0/0,0 neg]
%     Score = -3,461382 (regressionFit = 3,461379, penalties=3.04E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(A, C), teamplaysagainstteam(C, A).  [covers 12,0/22,0 pos, 0,0/0,0 neg]
%     Score = -3,475995 (regressionFit = 3,475991, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(A, _), teamplaysagainstteam(A, _).  [covers 13,0/22,0 pos, 0,0/0,0 neg]
%     Score = -3,475994 (regressionFit = 3,475991, penalties=3.1500000000000008E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(A, C), teamplaysagainstteam(C, _).  [covers 13,0/22,0 pos, 0,0/0,0 neg]
%     Score = -3,475995 (regressionFit = 3,475991, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(A, _), teamplaysagainstteam(_, A).  [covers 13,0/22,0 pos, 0,0/0,0 neg]
%     Score = -3,475994 (regressionFit = 3,475991, penalties=3.1500000000000008E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(A, C), teamplaysagainstteam(_, C).  [covers 13,0/22,0 pos, 0,0/0,0 neg]
%     Score = -3,360124 (regressionFit = 3,360120, penalties=3.35E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(A, _), teamplaysinleague(A, _).  [covers 6,0/22,0 pos, 0,0/0,0 neg]
%     Score = -3,300795 (regressionFit = 3,300792, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysagainstteam(A, C), teamplaysinleague(C, _).  [covers 9,0/22,0 pos, 0,0/0,0 neg]

% Consider expanding [#9 of outerLoop #4, bodyLen=2] 'teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _).  [covers 16,0/22,0 pos, 0,0/0,0 neg]' score=-3.4799555373487245
%  At # nodes expanded = 9, |OPEN| = 2.  Pruned 10 variant children.  Sending 9 items to OPEN for evaluation and possible insertion.
% Have created 9 valid-on-seeds descendants and have picked up 5 bad extensions.
%     Score = -3,397870 (regressionFit = 3,397867, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), athleteplaysforteam(_, A).  [covers 6,0/22,0 pos, 0,0/0,0 neg]
%     Score = -3,479956 (regressionFit = 3,479953, penalties=3.1500000000000008E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, C), athleteplaysinleague(_, C).  [covers 16,0/22,0 pos, 0,0/0,0 neg]
%     Score = -3,479957 (regressionFit = 3,479953, penalties=3.2500000000000006E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, _), athleteplayssport(_, A).  [covers 16,0/22,0 pos, 0,0/0,0 neg]
%     Score = -3,459318 (regressionFit = 3,459314, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(A, _).  [covers 4,0/22,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamalsoknownas(_, A).  [covers 1,0/22,0 pos, 0,0/0,0 neg]
%     Score = -3,408917 (regressionFit = 3,408914, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(A, _).  [covers 10,0/22,0 pos, 0,0/0,0 neg]
%     Score = -3,062272 (regressionFit = 3,062269, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysagainstteam(_, A).  [covers 14,0/22,0 pos, 0,0/0,0 neg]
%     Score = -3,347811 (regressionFit = 3,347808, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, _), teamplaysinleague(A, _).  [covers 8,0/22,0 pos, 0,0/0,0 neg]
%     Score = -3,479957 (regressionFit = 3,479953, penalties=3.2500000000000006E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteplaysinleague(B, C), teamplaysinleague(_, C).  [covers 16,0/22,0 pos, 0,0/0,0 neg]

***** Warning: #25 TOO MANY NODES CONSIDERED (i.e., 'expanded') for 'LearnOneClause': nodesConsidered = 10 and maxNodesToConsider = 10. *****


% The best node found: teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(_, C).  [covers 10,0/22,0 pos, 0,0/0,0 neg]

% The best node found: teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(_, C).  [covers 10,0/22,0 pos, 0,0/0,0 neg]

% Expanding node at Level 3 with score = -0,158.
% Will extend: teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(_, C).  [covers 10,0/22,0 pos, 0,0/0,0 neg]
% Path: 4;true,false,false
Comparing variance: 0.14690053585488433 to score=9.43454584424385E-4 #egs=10.0
Comparing variance: 0.11639323797947827 to score=9.43454584424385E-4 #egs=12.0
%   Creating a TRUE-branch and FALSE-branch leaves because level = 3 >= 3

% Time for loop #4: 155 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #4, the best clause found is:
%      teamplayssport(A, B) :- athleteplayssport(_, B), teamplaysinleague(A, C), athleteplaysinleague(_, C).  [covers 10,0/22,0 pos, 0,0/0,0 neg]
% This clause covers 10 positive examples, of which 10 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'teamplayssport(_, A) :- athleteplayssport(B, A), athleteledsportsteam(B, _).  [covers 379,0/379,0 pos, 0,0/0,0 neg]'
%     Score = -8,873417 (regressionFit = 8,873414, penalties=2.24E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteledsportsteam(B, _).  [covers 379,0/379,0 pos, 0,0/0,0 neg]

% Have these 7 positive seeds: 26 123 156 184 229 255 267
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Consider expanding [#1 of outerLoop #5, bodyLen=2] 'teamplayssport(_, A) :- athleteplayssport(B, A), athleteledsportsteam(B, _).  [covers 379,0/379,0 pos, 0,0/0,0 neg]' score=-8.873416584142838
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 22 variant children.  Sending 21 items to OPEN for evaluation and possible insertion.
% Have created 21 valid-on-seeds descendants and have picked up 14 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteledsportsteam(B, _), athleteledsportsteam(B, _).  [covers 379,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,971376 (regressionFit = 4,971373, penalties=3.1500000000000008E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteledsportsteam(_, A).  [covers 106,0/379,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -4,971376): teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteledsportsteam(_, A).  [covers 106,0/379,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000008E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteledsportsteam(B, C), athleteledsportsteam(_, C).  [covers 379,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,976004 (regressionFit = 4,976001, penalties=3.1400000000000004E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(C, A).  [covers 69,0/379,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1400000000000004E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteledsportsteam(B, C), athleteplaysforteam(B, C).  [covers 379,0/379,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.35E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteledsportsteam(B, _), athleteplaysforteam(B, _).  [covers 379,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,959979 (regressionFit = 4,959976, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(_, A).  [covers 173,0/379,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -4,959979): teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(_, A).  [covers 173,0/379,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteledsportsteam(B, C), athleteplaysforteam(_, C).  [covers 379,0/379,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.35E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteledsportsteam(B, _), athleteplaysinleague(B, _).  [covers 379,0/379,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteledsportsteam(B, _), athleteplayssport(_, A).  [covers 379,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,980668 (regressionFit = 4,980664, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamalsoknownas(A, _).  [covers 83,0/379,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteledsportsteam(B, C), teamalsoknownas(C, _).  [covers 379,0/379,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteledsportsteam(B, C), teamalsoknownas(_, C).  [covers 379,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,978991 (regressionFit = 4,978988, penalties=3.0400000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, D).  [covers 158,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,980352 (regressionFit = 4,980349, penalties=3.0400000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(D, A).  [covers 167,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,967968 (regressionFit = 4,967964, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, _).  [covers 213,0/379,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteledsportsteam(B, C), teamplaysagainstteam(C, _).  [covers 379,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,964248 (regressionFit = 4,964245, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(_, A).  [covers 226,0/379,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteledsportsteam(B, C), teamplaysagainstteam(_, C).  [covers 379,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,981949 (regressionFit = 4,981945, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysinleague(A, _).  [covers 298,0/379,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteledsportsteam(B, C), teamplaysinleague(C, _).  [covers 379,0/379,0 pos, 0,0/0,0 neg]

% Consider expanding [#2 of outerLoop #5, bodyLen=3] 'teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(_, A).  [covers 173,0/379,0 pos, 0,0/0,0 neg]' score=-4.959979179146285
%  At # nodes expanded = 2, |OPEN| = 20.  Pruned 30 variant children.  Sending 23 items to OPEN for evaluation and possible insertion.
% Have created 23 valid-on-seeds descendants and have picked up 9 bad extensions.
%     Score = -4,981794 (regressionFit = 4,981790, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(D, A), athleteledsportsteam(D, A).  [covers 83,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,959980 (regressionFit = 4,959976, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(_, A), athleteledsportsteam(C, _).  [covers 173,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,981962 (regressionFit = 4,981957, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(_, A), athleteledsportsteam(_, A).  [covers 94,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,959980 (regressionFit = 4,959976, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(_, A), athleteledsportsteam(_, D).  [covers 173,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,976005 (regressionFit = 4,976001, penalties=4.150000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(_, A), athleteplaysforteam(C, A).  [covers 69,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,959980 (regressionFit = 4,959976, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(_, A), athleteplaysforteam(C, D).  [covers 173,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,959980 (regressionFit = 4,959976, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(_, A), athleteplaysforteam(C, _).  [covers 173,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,959980 (regressionFit = 4,959976, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(_, A), athleteplaysforteam(_, A).  [covers 173,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,959980 (regressionFit = 4,959976, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(_, A), athleteplaysforteam(_, D).  [covers 173,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,959980 (regressionFit = 4,959976, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(_, A), athleteplaysinleague(C, _).  [covers 173,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,981325 (regressionFit = 4,981321, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(D, A), athleteplaysinleague(D, _).  [covers 123,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,972643 (regressionFit = 4,972639, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(D, A), athleteplayssport(D, B).  [covers 93,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,959980 (regressionFit = 4,959976, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(_, A), athleteplayssport(_, B).  [covers 173,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,959980 (regressionFit = 4,959976, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(_, A), teamalsoknownas(D, _).  [covers 173,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,959980 (regressionFit = 4,959976, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(_, A), teamalsoknownas(_, D).  [covers 173,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,981636 (regressionFit = 4,981632, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(_, A), teamplaysagainstteam(A, D).  [covers 132,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,981516 (regressionFit = 4,981512, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(_, A), teamplaysagainstteam(D, A).  [covers 136,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,962439 (regressionFit = 4,962434, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(_, A), teamplaysagainstteam(A, _).  [covers 163,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,959980 (regressionFit = 4,959976, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(_, A), teamplaysagainstteam(D, _).  [covers 173,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,960799 (regressionFit = 4,960795, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(_, A), teamplaysagainstteam(_, A).  [covers 169,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,959980 (regressionFit = 4,959976, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(_, A), teamplaysagainstteam(_, D).  [covers 173,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,961826 (regressionFit = 4,961822, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(_, A), teamplaysinleague(A, _).  [covers 168,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,959980 (regressionFit = 4,959976, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(_, A), teamplaysinleague(D, _).  [covers 173,0/379,0 pos, 0,0/0,0 neg]

% Consider expanding [#3 of outerLoop #5, bodyLen=3] 'teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(_, A).  [covers 226,0/379,0 pos, 0,0/0,0 neg]' score=-4.964248341677668
%  At # nodes expanded = 3, |OPEN| = 19.  Pruned 44 variant children.  Sending 34 items to OPEN for evaluation and possible insertion.
% Have created 34 valid-on-seeds descendants and have picked up 11 bad extensions.
%     Score = -4,980353 (regressionFit = 4,980349, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(D, A), athleteledsportsteam(C, D).  [covers 167,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,964249 (regressionFit = 4,964245, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(_, A), athleteledsportsteam(C, _).  [covers 226,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,970722 (regressionFit = 4,970718, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(_, A), athleteledsportsteam(_, A).  [covers 104,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,964249 (regressionFit = 4,964245, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(_, A), athleteledsportsteam(_, D).  [covers 226,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,979570 (regressionFit = 4,979566, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(D, A), athleteledsportsteam(_, D).  [covers 194,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,976005 (regressionFit = 4,976001, penalties=4.250000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(_, A), athleteplaysforteam(C, A).  [covers 69,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,964249 (regressionFit = 4,964245, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(_, A), athleteplaysforteam(C, D).  [covers 226,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,980383 (regressionFit = 4,980379, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(D, A), athleteplaysforteam(C, D).  [covers 174,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,964249 (regressionFit = 4,964245, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(_, A), athleteplaysforteam(C, _).  [covers 226,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,960799 (regressionFit = 4,960795, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(_, A), athleteplaysforteam(_, A).  [covers 169,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,964249 (regressionFit = 4,964245, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(_, A), athleteplaysforteam(_, D).  [covers 226,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,966456 (regressionFit = 4,966451, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(D, A), athleteplaysforteam(_, D).  [covers 222,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,964249 (regressionFit = 4,964245, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(_, A), athleteplaysinleague(C, _).  [covers 226,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,964249 (regressionFit = 4,964245, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(_, A), athleteplayssport(_, B).  [covers 226,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,965626 (regressionFit = 4,965622, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(E, A), teamalsoknownas(D, E).  [covers 134,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,981965 (regressionFit = 4,981961, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(E, A), teamalsoknownas(E, D).  [covers 109,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,964249 (regressionFit = 4,964245, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(_, A), teamalsoknownas(D, _).  [covers 226,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,980528 (regressionFit = 4,980524, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(D, A), teamalsoknownas(D, _).  [covers 165,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,964249 (regressionFit = 4,964245, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(_, A), teamalsoknownas(_, D).  [covers 226,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,968293 (regressionFit = 4,968289, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(D, A), teamalsoknownas(_, D).  [covers 164,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,978857 (regressionFit = 4,978853, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(_, A), teamplaysagainstteam(A, D).  [covers 157,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,973165 (regressionFit = 4,973161, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(D, A), teamplaysagainstteam(A, D).  [covers 200,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,980353 (regressionFit = 4,980349, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(_, A), teamplaysagainstteam(D, A).  [covers 167,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,979862 (regressionFit = 4,979858, penalties=3.95E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(E, A), teamplaysagainstteam(D, E).  [covers 199,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,979862 (regressionFit = 4,979858, penalties=3.95E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(E, A), teamplaysagainstteam(E, D).  [covers 199,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,969204 (regressionFit = 4,969199, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(_, A), teamplaysagainstteam(A, _).  [covers 208,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,964249 (regressionFit = 4,964245, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(_, A), teamplaysagainstteam(D, _).  [covers 226,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,964249 (regressionFit = 4,964245, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(D, A), teamplaysagainstteam(D, _).  [covers 226,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,964249 (regressionFit = 4,964245, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(_, A), teamplaysagainstteam(_, A).  [covers 226,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,964249 (regressionFit = 4,964245, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(_, A), teamplaysagainstteam(_, D).  [covers 226,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,964249 (regressionFit = 4,964245, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(D, A), teamplaysagainstteam(_, D).  [covers 226,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,972928 (regressionFit = 4,972924, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(_, A), teamplaysinleague(A, _).  [covers 205,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,964249 (regressionFit = 4,964245, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(_, A), teamplaysinleague(D, _).  [covers 226,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,964372 (regressionFit = 4,964368, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(D, A), teamplaysinleague(D, _).  [covers 225,0/379,0 pos, 0,0/0,0 neg]

% Consider expanding [#4 of outerLoop #5, bodyLen=3] 'teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, _).  [covers 213,0/379,0 pos, 0,0/0,0 neg]' score=-4.967967648315722
%  At # nodes expanded = 4, |OPEN| = 18.  Pruned 44 variant children.  Sending 34 items to OPEN for evaluation and possible insertion.
% Have created 34 valid-on-seeds descendants and have picked up 11 bad extensions.
%     Score = -4,978992 (regressionFit = 4,978988, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, D), athleteledsportsteam(C, D).  [covers 158,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,967969 (regressionFit = 4,967964, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, _), athleteledsportsteam(C, _).  [covers 213,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,970231 (regressionFit = 4,970227, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, _), athleteledsportsteam(_, A).  [covers 103,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,967969 (regressionFit = 4,967964, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), athleteledsportsteam(_, D).  [covers 213,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,981041 (regressionFit = 4,981037, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, D), athleteledsportsteam(_, D).  [covers 181,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,976005 (regressionFit = 4,976001, penalties=4.250000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, _), athleteplaysforteam(C, A).  [covers 69,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,967969 (regressionFit = 4,967964, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), athleteplaysforteam(C, D).  [covers 213,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,979543 (regressionFit = 4,979538, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, D), athleteplaysforteam(C, D).  [covers 167,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,967969 (regressionFit = 4,967964, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, _), athleteplaysforteam(C, _).  [covers 213,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,962439 (regressionFit = 4,962434, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, _), athleteplaysforteam(_, A).  [covers 163,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,967969 (regressionFit = 4,967964, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), athleteplaysforteam(_, D).  [covers 213,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,970329 (regressionFit = 4,970324, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, D), athleteplaysforteam(_, D).  [covers 207,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,967969 (regressionFit = 4,967964, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, _), athleteplaysinleague(C, _).  [covers 213,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,967969 (regressionFit = 4,967964, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, _), athleteplayssport(_, B).  [covers 213,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,965033 (regressionFit = 4,965029, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(D, E).  [covers 135,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,981455 (regressionFit = 4,981451, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(E, D).  [covers 97,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,967969 (regressionFit = 4,967964, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(D, _).  [covers 213,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,981259 (regressionFit = 4,981255, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, D), teamalsoknownas(D, _).  [covers 156,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,967969 (regressionFit = 4,967964, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(_, D).  [covers 213,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,981254 (regressionFit = 4,981249, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, D), teamalsoknownas(_, D).  [covers 162,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,978992 (regressionFit = 4,978988, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamplaysagainstteam(A, D).  [covers 158,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,979718 (regressionFit = 4,979714, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamplaysagainstteam(D, A).  [covers 161,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,980103 (regressionFit = 4,980099, penalties=3.95E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamplaysagainstteam(D, E).  [covers 191,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,973165 (regressionFit = 4,973161, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, D), teamplaysagainstteam(D, A).  [covers 200,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,980103 (regressionFit = 4,980099, penalties=3.95E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamplaysagainstteam(E, D).  [covers 191,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,967969 (regressionFit = 4,967964, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, _), teamplaysagainstteam(A, _).  [covers 213,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,967969 (regressionFit = 4,967964, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamplaysagainstteam(D, _).  [covers 213,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,968331 (regressionFit = 4,968327, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, D), teamplaysagainstteam(D, _).  [covers 211,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,969204 (regressionFit = 4,969199, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, _), teamplaysagainstteam(_, A).  [covers 208,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,967969 (regressionFit = 4,967964, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamplaysagainstteam(_, D).  [covers 213,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,967969 (regressionFit = 4,967964, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, D), teamplaysagainstteam(_, D).  [covers 213,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,974121 (regressionFit = 4,974116, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, _), teamplaysinleague(A, _).  [covers 198,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,967969 (regressionFit = 4,967964, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamplaysinleague(D, _).  [covers 213,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,968235 (regressionFit = 4,968231, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, D), teamplaysinleague(D, _).  [covers 212,0/379,0 pos, 0,0/0,0 neg]

% Consider expanding [#5 of outerLoop #5, bodyLen=3] 'teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteledsportsteam(_, A).  [covers 106,0/379,0 pos, 0,0/0,0 neg]' score=-4.971376201258331
%  At # nodes expanded = 5, |OPEN| = 17.  Pruned 30 variant children.  Sending 22 items to OPEN for evaluation and possible insertion.
% Have created 22 valid-on-seeds descendants and have picked up 9 bad extensions.
%     Score = -4,971377 (regressionFit = 4,971373, penalties=4.16E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteledsportsteam(_, A), athleteledsportsteam(C, _).  [covers 106,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,971377 (regressionFit = 4,971373, penalties=4.060000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteledsportsteam(_, A), athleteledsportsteam(_, D).  [covers 106,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,976885 (regressionFit = 4,976881, penalties=4.150000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteledsportsteam(_, A), athleteplaysforteam(C, A).  [covers 62,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,971377 (regressionFit = 4,971373, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteledsportsteam(_, A), athleteplaysforteam(C, D).  [covers 106,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,981794 (regressionFit = 4,981790, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteledsportsteam(D, A), athleteplaysforteam(D, A).  [covers 83,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,979434 (regressionFit = 4,979430, penalties=3.95E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteledsportsteam(E, A), athleteplaysforteam(E, D).  [covers 72,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,971377 (regressionFit = 4,971373, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteledsportsteam(_, A), athleteplaysforteam(C, _).  [covers 106,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,981962 (regressionFit = 4,981957, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteledsportsteam(_, A), athleteplaysforteam(_, A).  [covers 94,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,971377 (regressionFit = 4,971373, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteledsportsteam(_, A), athleteplaysforteam(_, D).  [covers 106,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,971377 (regressionFit = 4,971373, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteledsportsteam(_, A), athleteplaysinleague(C, _).  [covers 106,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,975384 (regressionFit = 4,975380, penalties=3.95E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteledsportsteam(D, A), athleteplayssport(D, B).  [covers 74,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,971377 (regressionFit = 4,971373, penalties=4.16E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteledsportsteam(_, A), athleteplayssport(_, B).  [covers 106,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,971377 (regressionFit = 4,971373, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteledsportsteam(_, A), teamalsoknownas(D, _).  [covers 106,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,971377 (regressionFit = 4,971373, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteledsportsteam(_, A), teamalsoknownas(_, D).  [covers 106,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,964512 (regressionFit = 4,964508, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteledsportsteam(_, A), teamplaysagainstteam(A, D).  [covers 99,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,964744 (regressionFit = 4,964740, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteledsportsteam(_, A), teamplaysagainstteam(D, A).  [covers 99,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,970231 (regressionFit = 4,970227, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteledsportsteam(_, A), teamplaysagainstteam(A, _).  [covers 103,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,971377 (regressionFit = 4,971373, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteledsportsteam(_, A), teamplaysagainstteam(D, _).  [covers 106,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,970722 (regressionFit = 4,970718, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteledsportsteam(_, A), teamplaysagainstteam(_, A).  [covers 104,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,971377 (regressionFit = 4,971373, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteledsportsteam(_, A), teamplaysagainstteam(_, D).  [covers 106,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,971377 (regressionFit = 4,971373, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteledsportsteam(_, A), teamplaysinleague(A, _).  [covers 106,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,971377 (regressionFit = 4,971373, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteledsportsteam(_, A), teamplaysinleague(D, _).  [covers 106,0/379,0 pos, 0,0/0,0 neg]

% Consider expanding [#6 of outerLoop #5, bodyLen=3] 'teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(C, A).  [covers 69,0/379,0 pos, 0,0/0,0 neg]' score=-4.976004123160748
%  At # nodes expanded = 6, |OPEN| = 16.  Pruned 20 variant children.  Sending 9 items to OPEN for evaluation and possible insertion.
% Have created 9 valid-on-seeds descendants and have picked up 11 bad extensions.
%     Score = -4,976005 (regressionFit = 4,976001, penalties=4.150000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(C, A), athleteplaysforteam(_, A).  [covers 69,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,976260 (regressionFit = 4,976256, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(C, A), athleteplaysforteam(_, D).  [covers 67,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,976005 (regressionFit = 4,976001, penalties=4.150000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(C, A), athleteplayssport(_, B).  [covers 69,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,976005 (regressionFit = 4,976001, penalties=4.250000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(C, A), teamplaysagainstteam(A, _).  [covers 69,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,976260 (regressionFit = 4,976256, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(C, A), teamplaysagainstteam(D, _).  [covers 67,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,976005 (regressionFit = 4,976001, penalties=4.250000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(C, A), teamplaysagainstteam(_, A).  [covers 69,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,976260 (regressionFit = 4,976256, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(C, A), teamplaysagainstteam(_, D).  [covers 67,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,976135 (regressionFit = 4,976131, penalties=4.250000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(C, A), teamplaysinleague(A, _).  [covers 68,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,976005 (regressionFit = 4,976001, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(C, A), teamplaysinleague(D, _).  [covers 69,0/379,0 pos, 0,0/0,0 neg]

% Consider expanding [#7 of outerLoop #5, bodyLen=3] 'teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, D).  [covers 158,0/379,0 pos, 0,0/0,0 neg]' score=-4.978991430358664
%  At # nodes expanded = 7, |OPEN| = 15.  Pruned 20 variant children.  Sending 18 items to OPEN for evaluation and possible insertion.
% Have created 18 valid-on-seeds descendants and have picked up 8 bad extensions.
%     Score = -4,978992 (regressionFit = 4,978988, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, D), athleteledsportsteam(C, _).  [covers 158,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,964512 (regressionFit = 4,964508, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, D), athleteledsportsteam(_, A).  [covers 99,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,978992 (regressionFit = 4,978988, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, D), athleteledsportsteam(_, D).  [covers 158,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,978401 (regressionFit = 4,978397, penalties=4.040000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, D), athleteplaysforteam(C, D).  [covers 156,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,978993 (regressionFit = 4,978988, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, D), athleteplaysforteam(C, _).  [covers 158,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,981636 (regressionFit = 4,981632, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, D), athleteplaysforteam(_, A).  [covers 132,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,978993 (regressionFit = 4,978988, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, D), athleteplaysforteam(_, D).  [covers 158,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,977435 (regressionFit = 4,977431, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, D), athleteplaysinleague(C, _).  [covers 156,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,978992 (regressionFit = 4,978988, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, D), athleteplayssport(_, B).  [covers 158,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,981936 (regressionFit = 4,981932, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, D), teamalsoknownas(D, _).  [covers 123,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,974931 (regressionFit = 4,974927, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, D), teamalsoknownas(_, D).  [covers 136,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,980220 (regressionFit = 4,980216, penalties=3.940000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, D), teamplaysagainstteam(D, A).  [covers 151,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,978992 (regressionFit = 4,978988, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, D), teamplaysagainstteam(A, _).  [covers 158,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,978992 (regressionFit = 4,978988, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, D), teamplaysagainstteam(D, _).  [covers 158,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,978857 (regressionFit = 4,978853, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, D), teamplaysagainstteam(_, A).  [covers 157,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,978992 (regressionFit = 4,978988, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, D), teamplaysagainstteam(_, D).  [covers 158,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,977607 (regressionFit = 4,977603, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, D), teamplaysinleague(A, _).  [covers 153,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,978993 (regressionFit = 4,978988, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, D), teamplaysinleague(D, _).  [covers 158,0/379,0 pos, 0,0/0,0 neg]

% Consider expanding [#8 of outerLoop #5, bodyLen=3] 'teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(D, A).  [covers 167,0/379,0 pos, 0,0/0,0 neg]' score=-4.980351746729455
%  At # nodes expanded = 8, |OPEN| = 14.  Pruned 20 variant children.  Sending 18 items to OPEN for evaluation and possible insertion.
% Have created 18 valid-on-seeds descendants and have picked up 8 bad extensions.
%     Score = -4,980353 (regressionFit = 4,980349, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(D, A), athleteledsportsteam(C, _).  [covers 167,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,964744 (regressionFit = 4,964740, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(D, A), athleteledsportsteam(_, A).  [covers 99,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,980353 (regressionFit = 4,980349, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(D, A), athleteledsportsteam(_, D).  [covers 167,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,979801 (regressionFit = 4,979797, penalties=4.040000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(D, A), athleteplaysforteam(C, D).  [covers 164,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,980353 (regressionFit = 4,980349, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(D, A), athleteplaysforteam(C, _).  [covers 167,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,981516 (regressionFit = 4,981512, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(D, A), athleteplaysforteam(_, A).  [covers 136,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,980353 (regressionFit = 4,980349, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(D, A), athleteplaysforteam(_, D).  [covers 167,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,978811 (regressionFit = 4,978807, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(D, A), athleteplaysinleague(C, _).  [covers 164,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,980353 (regressionFit = 4,980349, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(D, A), athleteplayssport(_, B).  [covers 167,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,981765 (regressionFit = 4,981761, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(D, A), teamalsoknownas(D, _).  [covers 128,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,981322 (regressionFit = 4,981317, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(D, A), teamalsoknownas(_, D).  [covers 136,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,980220 (regressionFit = 4,980216, penalties=3.940000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(D, A), teamplaysagainstteam(A, D).  [covers 151,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,979718 (regressionFit = 4,979714, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(D, A), teamplaysagainstteam(A, _).  [covers 161,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,980353 (regressionFit = 4,980349, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(D, A), teamplaysagainstteam(D, _).  [covers 167,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,980353 (regressionFit = 4,980349, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(D, A), teamplaysagainstteam(_, A).  [covers 167,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,980353 (regressionFit = 4,980349, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(D, A), teamplaysagainstteam(_, D).  [covers 167,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,979066 (regressionFit = 4,979062, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(D, A), teamplaysinleague(A, _).  [covers 160,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,980353 (regressionFit = 4,980349, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(D, A), teamplaysinleague(D, _).  [covers 167,0/379,0 pos, 0,0/0,0 neg]

% Consider expanding [#9 of outerLoop #5, bodyLen=3] 'teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamalsoknownas(A, _).  [covers 83,0/379,0 pos, 0,0/0,0 neg]' score=-4.980667661604081
%  At # nodes expanded = 9, |OPEN| = 13.  Pruned 44 variant children.  Sending 15 items to OPEN for evaluation and possible insertion.
% Have created 15 valid-on-seeds descendants and have picked up 21 bad extensions.
%     Score = -4,980669 (regressionFit = 4,980664, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamalsoknownas(A, _), athleteledsportsteam(_, D).  [covers 83,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,980669 (regressionFit = 4,980664, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamalsoknownas(A, _), athleteplaysforteam(C, D).  [covers 83,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,980669 (regressionFit = 4,980664, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamalsoknownas(A, _), athleteplaysforteam(C, _).  [covers 83,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,980669 (regressionFit = 4,980664, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamalsoknownas(A, _), athleteplaysforteam(_, D).  [covers 83,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,980669 (regressionFit = 4,980664, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamalsoknownas(A, _), athleteplaysinleague(C, _).  [covers 83,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,980669 (regressionFit = 4,980664, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamalsoknownas(A, _), athleteplayssport(_, B).  [covers 83,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,980669 (regressionFit = 4,980664, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamalsoknownas(A, _), teamalsoknownas(D, _).  [covers 83,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,981531 (regressionFit = 4,981526, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamalsoknownas(A, D), teamalsoknownas(D, _).  [covers 71,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,980669 (regressionFit = 4,980664, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamalsoknownas(A, _), teamalsoknownas(_, D).  [covers 83,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,980669 (regressionFit = 4,980664, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamalsoknownas(A, D), teamalsoknownas(_, D).  [covers 83,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,980669 (regressionFit = 4,980664, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamalsoknownas(A, _), teamplaysagainstteam(D, _).  [covers 83,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,980669 (regressionFit = 4,980664, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamalsoknownas(A, _), teamplaysagainstteam(_, D).  [covers 83,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,981812 (regressionFit = 4,981808, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamalsoknownas(A, _), teamplaysinleague(A, _).  [covers 67,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,980669 (regressionFit = 4,980664, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamalsoknownas(A, _), teamplaysinleague(D, _).  [covers 83,0/379,0 pos, 0,0/0,0 neg]
%     Score = -4,981258 (regressionFit = 4,981254, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamalsoknownas(A, D), teamplaysinleague(D, _).  [covers 77,0/379,0 pos, 0,0/0,0 neg]

***** Warning: #26 TOO MANY NODES CONSIDERED (i.e., 'expanded') for 'LearnOneClause': nodesConsidered = 10 and maxNodesToConsider = 10. *****


% The best node found: teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(_, A).  [covers 173,0/379,0 pos, 0,0/0,0 neg]

% The best node found: teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(_, A).  [covers 173,0/379,0 pos, 0,0/0,0 neg]

% Expanding node at Level 2 with score = -0,013.
% Will extend: teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(_, A).  [covers 173,0/379,0 pos, 0,0/0,0 neg]
% Path: 4;true,true
Comparing variance: 0.005775220601435978 to score=9.43454584424385E-4 #egs=173.0
Comparing variance: 0.01922748915096049 to score=9.43454584424385E-4 #egs=206.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 173,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,005775)
%         ILP node to extend: teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(_, A).  [covers 173,0/379,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -0,005775) into position #1 in the search queue (new size=2).
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 206,0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0,019227)
%         ILP node to extend: teamplayssport(_, A) :- athleteplayssport(B, A), athleteledsportsteam(B, _).  [covers 379,0/379,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -0,019227) into position #1 in the search queue (new size=3).

% Time for loop #5: 8,404 seconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #5, the best clause found is:
%      teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(_, A).  [covers 173,0/379,0 pos, 0,0/0,0 neg]
% This clause covers 173 positive examples, of which 173 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'teamplayssport(_, A) :- athleteplayssport(B, A), athleteledsportsteam(B, _).  [covers 379,0/206,0 pos, 0,0/0,0 neg]'
%     Score = -8,873417 (regressionFit = 8,873414, penalties=2.24E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteledsportsteam(B, _).  [covers 206,0/206,0 pos, 0,0/0,0 neg]

% Have these 7 positive seeds: 1 13 31 37 50 56 95
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Consider expanding [#1 of outerLoop #6, bodyLen=2] 'teamplayssport(_, A) :- athleteplayssport(B, A), athleteledsportsteam(B, _).  [covers 206,0/206,0 pos, 0,0/0,0 neg]' score=-8.873416584142838
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 22 variant children.  Sending 20 items to OPEN for evaluation and possible insertion.
% Have created 20 valid-on-seeds descendants and have picked up 22 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteledsportsteam(B, _), athleteledsportsteam(B, _).  [covers 206,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,906006 (regressionFit = 3,906003, penalties=3.1500000000000008E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteledsportsteam(_, A).  [covers 12,0/206,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -3,906006): teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteledsportsteam(_, A).  [covers 12,0/206,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000008E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteledsportsteam(B, C), athleteledsportsteam(_, C).  [covers 206,0/206,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1400000000000004E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteledsportsteam(B, C), athleteplaysforteam(B, C).  [covers 206,0/206,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.35E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteledsportsteam(B, _), athleteplaysforteam(B, _).  [covers 206,0/206,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteledsportsteam(B, C), athleteplaysforteam(_, C).  [covers 206,0/206,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.35E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteledsportsteam(B, _), athleteplaysinleague(B, _).  [covers 206,0/206,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteledsportsteam(B, _), athleteplayssport(_, A).  [covers 206,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,959381 (regressionFit = 3,959378, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamalsoknownas(A, _).  [covers 50,0/206,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteledsportsteam(B, C), teamalsoknownas(C, _).  [covers 206,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,953013 (regressionFit = 3,953009, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamalsoknownas(_, A).  [covers 36,0/206,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteledsportsteam(B, C), teamalsoknownas(_, C).  [covers 206,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,949295 (regressionFit = 3,949292, penalties=3.0400000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, D).  [covers 26,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,955608 (regressionFit = 3,955605, penalties=3.0400000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(D, A).  [covers 31,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,960311 (regressionFit = 3,960308, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, _).  [covers 50,0/206,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteledsportsteam(B, C), teamplaysagainstteam(C, _).  [covers 206,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,959208 (regressionFit = 3,959205, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(_, A).  [covers 57,0/206,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteledsportsteam(B, C), teamplaysagainstteam(_, C).  [covers 206,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,955575 (regressionFit = 3,955571, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysinleague(A, _).  [covers 130,0/206,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  teamplayssport(_, A) :- athleteplayssport(B, A), athleteledsportsteam(B, C), teamplaysinleague(C, _).  [covers 206,0/206,0 pos, 0,0/0,0 neg]

% Consider expanding [#2 of outerLoop #6, bodyLen=3] 'teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteledsportsteam(_, A).  [covers 12,0/206,0 pos, 0,0/0,0 neg]' score=-3.9060057559880588
%  At # nodes expanded = 2, |OPEN| = 19.  Pruned 30 variant children.  Sending 18 items to OPEN for evaluation and possible insertion.
% Have created 18 valid-on-seeds descendants and have picked up 12 bad extensions.
%     Score = -3,906007 (regressionFit = 3,906003, penalties=4.060000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteledsportsteam(_, A), athleteledsportsteam(_, D).  [covers 12,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,906007 (regressionFit = 3,906003, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteledsportsteam(_, A), athleteplaysforteam(C, D).  [covers 12,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,906007 (regressionFit = 3,906003, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteledsportsteam(_, A), athleteplaysforteam(C, _).  [covers 12,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,898731 (regressionFit = 3,898727, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteledsportsteam(D, A), athleteplaysforteam(D, _).  [covers 11,0/206,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -3,898731): teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteledsportsteam(D, A), athleteplaysforteam(D, _).  [covers 11,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,906007 (regressionFit = 3,906003, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteledsportsteam(_, A), athleteplaysforteam(_, D).  [covers 12,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,906007 (regressionFit = 3,906003, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteledsportsteam(_, A), athleteplaysinleague(C, _).  [covers 12,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,898731 (regressionFit = 3,898727, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteledsportsteam(D, A), athleteplaysinleague(D, _).  [covers 11,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,906007 (regressionFit = 3,906003, penalties=4.16E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteledsportsteam(_, A), athleteplayssport(_, B).  [covers 12,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,906007 (regressionFit = 3,906003, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteledsportsteam(_, A), teamalsoknownas(D, _).  [covers 12,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,906007 (regressionFit = 3,906003, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteledsportsteam(_, A), teamalsoknownas(_, D).  [covers 12,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,897354 (regressionFit = 3,897350, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteledsportsteam(_, A), teamplaysagainstteam(A, D).  [covers 11,0/206,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -3,897354): teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteledsportsteam(_, A), teamplaysagainstteam(A, D).  [covers 11,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,897354 (regressionFit = 3,897350, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteledsportsteam(_, A), teamplaysagainstteam(D, A).  [covers 11,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,897354 (regressionFit = 3,897350, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteledsportsteam(_, A), teamplaysagainstteam(A, _).  [covers 11,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,906007 (regressionFit = 3,906003, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteledsportsteam(_, A), teamplaysagainstteam(D, _).  [covers 12,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,897354 (regressionFit = 3,897350, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteledsportsteam(_, A), teamplaysagainstteam(_, A).  [covers 11,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,906007 (regressionFit = 3,906003, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteledsportsteam(_, A), teamplaysagainstteam(_, D).  [covers 12,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,906007 (regressionFit = 3,906003, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteledsportsteam(_, A), teamplaysinleague(A, _).  [covers 12,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,906007 (regressionFit = 3,906003, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteledsportsteam(_, A), teamplaysinleague(D, _).  [covers 12,0/206,0 pos, 0,0/0,0 neg]

% Consider expanding [#3 of outerLoop #6, bodyLen=3] 'teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, D).  [covers 26,0/206,0 pos, 0,0/0,0 neg]' score=-3.949294636369293
%  At # nodes expanded = 3, |OPEN| = 18.  Pruned 20 variant children.  Sending 16 items to OPEN for evaluation and possible insertion.
% Have created 16 valid-on-seeds descendants and have picked up 8 bad extensions.
%     Score = -3,897354 (regressionFit = 3,897350, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, D), athleteledsportsteam(_, A).  [covers 11,0/206,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -3,897354): teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, D), athleteledsportsteam(_, A).  [covers 11,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,949296 (regressionFit = 3,949292, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, D), athleteledsportsteam(_, D).  [covers 26,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,949296 (regressionFit = 3,949292, penalties=4.040000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, D), athleteplaysforteam(C, D).  [covers 26,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,949296 (regressionFit = 3,949292, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, D), athleteplaysforteam(C, _).  [covers 26,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,949296 (regressionFit = 3,949292, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, D), athleteplaysforteam(_, D).  [covers 26,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,945530 (regressionFit = 3,945526, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, D), athleteplaysinleague(C, _).  [covers 25,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,949296 (regressionFit = 3,949292, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, D), athleteplayssport(_, B).  [covers 26,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,956092 (regressionFit = 3,956087, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, D), teamalsoknownas(D, _).  [covers 16,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,939075 (regressionFit = 3,939071, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, D), teamalsoknownas(_, D).  [covers 21,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,951230 (regressionFit = 3,951226, penalties=3.940000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, D), teamplaysagainstteam(D, A).  [covers 24,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,949296 (regressionFit = 3,949292, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, D), teamplaysagainstteam(A, _).  [covers 26,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,949296 (regressionFit = 3,949292, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, D), teamplaysagainstteam(D, _).  [covers 26,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,948031 (regressionFit = 3,948027, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, D), teamplaysagainstteam(_, A).  [covers 25,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,949296 (regressionFit = 3,949292, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, D), teamplaysagainstteam(_, D).  [covers 26,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,944443 (regressionFit = 3,944438, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, D), teamplaysinleague(A, _).  [covers 24,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,949296 (regressionFit = 3,949292, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, D), teamplaysinleague(D, _).  [covers 26,0/206,0 pos, 0,0/0,0 neg]

% Consider expanding [#4 of outerLoop #6, bodyLen=3] 'teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamalsoknownas(_, A).  [covers 36,0/206,0 pos, 0,0/0,0 neg]' score=-3.9530126511076733
%  At # nodes expanded = 4, |OPEN| = 17.  Pruned 44 variant children.  Sending 16 items to OPEN for evaluation and possible insertion.
% Have created 16 valid-on-seeds descendants and have picked up 20 bad extensions.
%     Score = -3,953014 (regressionFit = 3,953009, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamalsoknownas(_, A), athleteledsportsteam(_, D).  [covers 36,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,953014 (regressionFit = 3,953009, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamalsoknownas(_, A), athleteplaysforteam(C, D).  [covers 36,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,953014 (regressionFit = 3,953009, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamalsoknownas(_, A), athleteplaysforteam(C, _).  [covers 36,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,953014 (regressionFit = 3,953009, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamalsoknownas(_, A), athleteplaysforteam(_, D).  [covers 36,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,953014 (regressionFit = 3,953009, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamalsoknownas(_, A), athleteplaysinleague(C, _).  [covers 36,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,953014 (regressionFit = 3,953009, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamalsoknownas(_, A), athleteplayssport(_, B).  [covers 36,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,941407 (regressionFit = 3,941403, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamalsoknownas(D, A), teamalsoknownas(A, D).  [covers 26,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,953014 (regressionFit = 3,953009, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamalsoknownas(_, A), teamalsoknownas(D, _).  [covers 36,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,953014 (regressionFit = 3,953009, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamalsoknownas(D, A), teamalsoknownas(D, _).  [covers 36,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,953014 (regressionFit = 3,953009, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamalsoknownas(_, A), teamalsoknownas(_, D).  [covers 36,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,952226 (regressionFit = 3,952221, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamalsoknownas(D, A), teamalsoknownas(_, D).  [covers 35,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,953014 (regressionFit = 3,953009, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamalsoknownas(_, A), teamplaysagainstteam(D, _).  [covers 36,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,953014 (regressionFit = 3,953009, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamalsoknownas(_, A), teamplaysagainstteam(_, D).  [covers 36,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,935362 (regressionFit = 3,935358, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamalsoknownas(_, A), teamplaysinleague(A, _).  [covers 23,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,953014 (regressionFit = 3,953009, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamalsoknownas(_, A), teamplaysinleague(D, _).  [covers 36,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,951384 (regressionFit = 3,951380, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamalsoknownas(D, A), teamplaysinleague(D, _).  [covers 34,0/206,0 pos, 0,0/0,0 neg]

% Consider expanding [#5 of outerLoop #6, bodyLen=3] 'teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysinleague(A, _).  [covers 130,0/206,0 pos, 0,0/0,0 neg]' score=-3.955574749291751
%  At # nodes expanded = 5, |OPEN| = 16.  Pruned 26 variant children.  Sending 22 items to OPEN for evaluation and possible insertion.
% Have created 22 valid-on-seeds descendants and have picked up 8 bad extensions.
%     Score = -3,955576 (regressionFit = 3,955571, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysinleague(A, _), athleteledsportsteam(C, _).  [covers 130,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,906007 (regressionFit = 3,906003, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysinleague(A, _), athleteledsportsteam(_, A).  [covers 12,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,955576 (regressionFit = 3,955571, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysinleague(A, _), athleteledsportsteam(_, D).  [covers 130,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,955576 (regressionFit = 3,955571, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysinleague(A, _), athleteplaysforteam(C, D).  [covers 130,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,955576 (regressionFit = 3,955571, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysinleague(A, _), athleteplaysforteam(C, _).  [covers 130,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,955576 (regressionFit = 3,955571, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysinleague(A, _), athleteplaysforteam(_, D).  [covers 130,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,960763 (regressionFit = 3,960758, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysinleague(A, D), athleteplaysinleague(C, D).  [covers 44,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,955576 (regressionFit = 3,955571, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysinleague(A, _), athleteplaysinleague(C, _).  [covers 130,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,955005 (regressionFit = 3,955000, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysinleague(A, D), athleteplaysinleague(_, D).  [covers 67,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,955576 (regressionFit = 3,955571, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysinleague(A, _), athleteplayssport(_, B).  [covers 130,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,955576 (regressionFit = 3,955571, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysinleague(A, _), teamalsoknownas(D, _).  [covers 130,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,935362 (regressionFit = 3,935358, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysinleague(A, _), teamalsoknownas(_, A).  [covers 23,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,955576 (regressionFit = 3,955571, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysinleague(A, _), teamalsoknownas(_, D).  [covers 130,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,944443 (regressionFit = 3,944438, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysinleague(A, _), teamplaysagainstteam(A, D).  [covers 24,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,951005 (regressionFit = 3,951001, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysinleague(A, _), teamplaysagainstteam(D, A).  [covers 28,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,960065 (regressionFit = 3,960060, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysinleague(A, _), teamplaysagainstteam(A, _).  [covers 39,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,955576 (regressionFit = 3,955571, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysinleague(A, _), teamplaysagainstteam(D, _).  [covers 130,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,960321 (regressionFit = 3,960317, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysinleague(A, _), teamplaysagainstteam(_, A).  [covers 41,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,955576 (regressionFit = 3,955571, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysinleague(A, _), teamplaysagainstteam(_, D).  [covers 130,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,959772 (regressionFit = 3,959768, penalties=3.95E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysinleague(A, E), teamplaysinleague(D, E).  [covers 94,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,955576 (regressionFit = 3,955571, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysinleague(A, _), teamplaysinleague(D, _).  [covers 130,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,955576 (regressionFit = 3,955571, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysinleague(A, D), teamplaysinleague(_, D).  [covers 130,0/206,0 pos, 0,0/0,0 neg]

% Consider expanding [#6 of outerLoop #6, bodyLen=3] 'teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(D, A).  [covers 31,0/206,0 pos, 0,0/0,0 neg]' score=-3.9556076132597435
%  At # nodes expanded = 6, |OPEN| = 15.  Pruned 20 variant children.  Sending 16 items to OPEN for evaluation and possible insertion.
% Have created 16 valid-on-seeds descendants and have picked up 8 bad extensions.
%     Score = -3,897354 (regressionFit = 3,897350, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(D, A), athleteledsportsteam(_, A).  [covers 11,0/206,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -3,897354): teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(D, A), athleteledsportsteam(_, A).  [covers 11,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,955609 (regressionFit = 3,955605, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(D, A), athleteledsportsteam(_, D).  [covers 31,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,954960 (regressionFit = 3,954956, penalties=4.040000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(D, A), athleteplaysforteam(C, D).  [covers 30,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,955609 (regressionFit = 3,955605, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(D, A), athleteplaysforteam(C, _).  [covers 31,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,955609 (regressionFit = 3,955605, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(D, A), athleteplaysforteam(_, D).  [covers 31,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,951668 (regressionFit = 3,951664, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(D, A), athleteplaysinleague(C, _).  [covers 29,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,955609 (regressionFit = 3,955605, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(D, A), athleteplayssport(_, B).  [covers 31,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,954374 (regressionFit = 3,954370, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(D, A), teamalsoknownas(D, _).  [covers 17,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,953758 (regressionFit = 3,953754, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(D, A), teamalsoknownas(_, D).  [covers 18,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,951230 (regressionFit = 3,951226, penalties=3.940000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(D, A), teamplaysagainstteam(A, D).  [covers 24,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,954988 (regressionFit = 3,954984, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(D, A), teamplaysagainstteam(A, _).  [covers 30,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,955609 (regressionFit = 3,955605, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(D, A), teamplaysagainstteam(D, _).  [covers 31,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,955609 (regressionFit = 3,955605, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(D, A), teamplaysagainstteam(_, A).  [covers 31,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,955609 (regressionFit = 3,955605, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(D, A), teamplaysagainstteam(_, D).  [covers 31,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,951005 (regressionFit = 3,951001, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(D, A), teamplaysinleague(A, _).  [covers 28,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,955609 (regressionFit = 3,955605, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(D, A), teamplaysinleague(D, _).  [covers 31,0/206,0 pos, 0,0/0,0 neg]

% Consider expanding [#7 of outerLoop #6, bodyLen=3] 'teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(_, A).  [covers 57,0/206,0 pos, 0,0/0,0 neg]' score=-3.959208452069068
%  At # nodes expanded = 7, |OPEN| = 14.  Pruned 44 variant children.  Sending 30 items to OPEN for evaluation and possible insertion.
% Have created 30 valid-on-seeds descendants and have picked up 14 bad extensions.
%     Score = -3,959209 (regressionFit = 3,959205, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(_, A), athleteledsportsteam(C, _).  [covers 57,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,897354 (regressionFit = 3,897350, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(_, A), athleteledsportsteam(_, A).  [covers 11,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,959209 (regressionFit = 3,959205, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(_, A), athleteledsportsteam(_, D).  [covers 57,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,959586 (regressionFit = 3,959582, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(D, A), athleteledsportsteam(_, D).  [covers 38,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,959209 (regressionFit = 3,959205, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(_, A), athleteplaysforteam(C, D).  [covers 57,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,957657 (regressionFit = 3,957653, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(D, A), athleteplaysforteam(C, D).  [covers 36,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,959210 (regressionFit = 3,959205, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(_, A), athleteplaysforteam(C, _).  [covers 57,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,959209 (regressionFit = 3,959205, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(_, A), athleteplaysforteam(_, D).  [covers 57,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,959606 (regressionFit = 3,959601, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(D, A), athleteplaysforteam(_, D).  [covers 55,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,959210 (regressionFit = 3,959205, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(_, A), athleteplaysinleague(C, _).  [covers 57,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,959209 (regressionFit = 3,959205, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(_, A), athleteplayssport(_, B).  [covers 57,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,954057 (regressionFit = 3,954053, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(E, A), teamalsoknownas(D, E).  [covers 18,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,959209 (regressionFit = 3,959205, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(_, A), teamalsoknownas(D, _).  [covers 57,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,958031 (regressionFit = 3,958027, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(D, A), teamalsoknownas(D, _).  [covers 34,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,959209 (regressionFit = 3,959205, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(_, A), teamalsoknownas(_, D).  [covers 57,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,945972 (regressionFit = 3,945968, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(D, A), teamalsoknownas(_, D).  [covers 30,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,948031 (regressionFit = 3,948027, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(_, A), teamplaysagainstteam(A, D).  [covers 25,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,960856 (regressionFit = 3,960852, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(D, A), teamplaysagainstteam(A, D).  [covers 43,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,955609 (regressionFit = 3,955605, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(_, A), teamplaysagainstteam(D, A).  [covers 31,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,960832 (regressionFit = 3,960828, penalties=3.95E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(E, A), teamplaysagainstteam(D, E).  [covers 44,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,960832 (regressionFit = 3,960828, penalties=3.95E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(E, A), teamplaysagainstteam(E, D).  [covers 44,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,960638 (regressionFit = 3,960634, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(_, A), teamplaysagainstteam(A, _).  [covers 47,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,959209 (regressionFit = 3,959205, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(_, A), teamplaysagainstteam(D, _).  [covers 57,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,959209 (regressionFit = 3,959205, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(D, A), teamplaysagainstteam(D, _).  [covers 57,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,959209 (regressionFit = 3,959205, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(_, A), teamplaysagainstteam(_, A).  [covers 57,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,959209 (regressionFit = 3,959205, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(_, A), teamplaysagainstteam(_, D).  [covers 57,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,959209 (regressionFit = 3,959205, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(D, A), teamplaysagainstteam(_, D).  [covers 57,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,960321 (regressionFit = 3,960317, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(_, A), teamplaysinleague(A, _).  [covers 41,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,959209 (regressionFit = 3,959205, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(_, A), teamplaysinleague(D, _).  [covers 57,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,959318 (regressionFit = 3,959314, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(D, A), teamplaysinleague(D, _).  [covers 56,0/206,0 pos, 0,0/0,0 neg]

% Consider expanding [#8 of outerLoop #6, bodyLen=3] 'teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamalsoknownas(A, _).  [covers 50,0/206,0 pos, 0,0/0,0 neg]' score=-3.959381293387227
%  At # nodes expanded = 8, |OPEN| = 13.  Pruned 44 variant children.  Sending 15 items to OPEN for evaluation and possible insertion.
% Have created 15 valid-on-seeds descendants and have picked up 21 bad extensions.
%     Score = -3,959382 (regressionFit = 3,959378, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamalsoknownas(A, _), athleteledsportsteam(_, D).  [covers 50,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,959382 (regressionFit = 3,959378, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamalsoknownas(A, _), athleteplaysforteam(C, D).  [covers 50,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,959382 (regressionFit = 3,959378, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamalsoknownas(A, _), athleteplaysforteam(C, _).  [covers 50,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,959382 (regressionFit = 3,959378, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamalsoknownas(A, _), athleteplaysforteam(_, D).  [covers 50,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,959382 (regressionFit = 3,959378, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamalsoknownas(A, _), athleteplaysinleague(C, _).  [covers 50,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,959382 (regressionFit = 3,959378, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamalsoknownas(A, _), athleteplayssport(_, B).  [covers 50,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,941407 (regressionFit = 3,941403, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamalsoknownas(A, D), teamalsoknownas(D, A).  [covers 26,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,959382 (regressionFit = 3,959378, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamalsoknownas(A, _), teamalsoknownas(D, _).  [covers 50,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,958939 (regressionFit = 3,958935, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamalsoknownas(A, D), teamalsoknownas(D, _).  [covers 49,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,959382 (regressionFit = 3,959378, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamalsoknownas(A, _), teamalsoknownas(_, D).  [covers 50,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,959382 (regressionFit = 3,959378, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamalsoknownas(A, D), teamalsoknownas(_, D).  [covers 50,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,959382 (regressionFit = 3,959378, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamalsoknownas(A, _), teamplaysagainstteam(D, _).  [covers 50,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,959382 (regressionFit = 3,959378, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamalsoknownas(A, _), teamplaysagainstteam(_, D).  [covers 50,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,959382 (regressionFit = 3,959378, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamalsoknownas(A, _), teamplaysinleague(D, _).  [covers 50,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,958530 (regressionFit = 3,958525, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamalsoknownas(A, D), teamplaysinleague(D, _).  [covers 48,0/206,0 pos, 0,0/0,0 neg]

% Consider expanding [#9 of outerLoop #6, bodyLen=3] 'teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, _).  [covers 50,0/206,0 pos, 0,0/0,0 neg]' score=-3.9603110123325855
%  At # nodes expanded = 9, |OPEN| = 12.  Pruned 44 variant children.  Sending 30 items to OPEN for evaluation and possible insertion.
% Have created 30 valid-on-seeds descendants and have picked up 14 bad extensions.
%     Score = -3,960312 (regressionFit = 3,960308, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, _), athleteledsportsteam(C, _).  [covers 50,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,897354 (regressionFit = 3,897350, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, _), athleteledsportsteam(_, A).  [covers 11,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,960312 (regressionFit = 3,960308, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), athleteledsportsteam(_, D).  [covers 50,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,955508 (regressionFit = 3,955504, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, D), athleteledsportsteam(_, D).  [covers 31,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,960312 (regressionFit = 3,960308, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), athleteplaysforteam(C, D).  [covers 50,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,953437 (regressionFit = 3,953433, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, D), athleteplaysforteam(C, D).  [covers 31,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,960312 (regressionFit = 3,960308, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, _), athleteplaysforteam(C, _).  [covers 50,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,960312 (regressionFit = 3,960308, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), athleteplaysforteam(_, D).  [covers 50,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,960633 (regressionFit = 3,960629, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, D), athleteplaysforteam(_, D).  [covers 47,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,960312 (regressionFit = 3,960308, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, _), athleteplaysinleague(C, _).  [covers 50,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,960312 (regressionFit = 3,960308, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, _), athleteplayssport(_, B).  [covers 50,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,952907 (regressionFit = 3,952903, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamalsoknownas(D, E).  [covers 21,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,960312 (regressionFit = 3,960308, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(D, _).  [covers 50,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,953155 (regressionFit = 3,953151, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, D), teamalsoknownas(D, _).  [covers 26,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,960312 (regressionFit = 3,960308, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamalsoknownas(_, D).  [covers 50,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,956069 (regressionFit = 3,956064, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, D), teamalsoknownas(_, D).  [covers 29,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,949296 (regressionFit = 3,949292, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamplaysagainstteam(A, D).  [covers 26,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,954988 (regressionFit = 3,954984, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamplaysagainstteam(D, A).  [covers 30,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,960571 (regressionFit = 3,960567, penalties=3.95E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamplaysagainstteam(D, E).  [covers 41,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,960856 (regressionFit = 3,960852, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, D), teamplaysagainstteam(D, A).  [covers 43,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,960571 (regressionFit = 3,960567, penalties=3.95E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, E), teamplaysagainstteam(E, D).  [covers 41,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,960312 (regressionFit = 3,960308, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, _), teamplaysagainstteam(A, _).  [covers 50,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,960312 (regressionFit = 3,960308, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamplaysagainstteam(D, _).  [covers 50,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,960492 (regressionFit = 3,960487, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, D), teamplaysagainstteam(D, _).  [covers 48,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,960638 (regressionFit = 3,960634, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, _), teamplaysagainstteam(_, A).  [covers 47,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,960312 (regressionFit = 3,960308, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamplaysagainstteam(_, D).  [covers 50,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,960312 (regressionFit = 3,960308, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, D), teamplaysagainstteam(_, D).  [covers 50,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,960065 (regressionFit = 3,960060, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, _), teamplaysinleague(A, _).  [covers 39,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,960312 (regressionFit = 3,960308, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(A, _), teamplaysinleague(D, _).  [covers 50,0/206,0 pos, 0,0/0,0 neg]
%     Score = -3,960312 (regressionFit = 3,960308, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), teamplaysagainstteam(A, D), teamplaysinleague(D, _).  [covers 50,0/206,0 pos, 0,0/0,0 neg]

***** Warning: #27 TOO MANY NODES CONSIDERED (i.e., 'expanded') for 'LearnOneClause': nodesConsidered = 10 and maxNodesToConsider = 10. *****


% The best node found: teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(D, A), athleteledsportsteam(_, A).  [covers 11,0/206,0 pos, 0,0/0,0 neg]

% The best node found: teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(D, A), athleteledsportsteam(_, A).  [covers 11,0/206,0 pos, 0,0/0,0 neg]

% Expanding node at Level 3 with score = -0,019.
% Will extend: teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(D, A), athleteledsportsteam(_, A).  [covers 11,0/206,0 pos, 0,0/0,0 neg]
% Path: 4;true,true,false
Comparing variance: 0.08264462809917353 to score=9.43454584424385E-4 #egs=11.0
Comparing variance: 0.01532440565428315 to score=9.43454584424385E-4 #egs=195.0
%   Creating a TRUE-branch and FALSE-branch leaves because level = 3 >= 3

% Time for loop #6: 2,940 seconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #6, the best clause found is:
%      teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), teamplaysagainstteam(D, A), athleteledsportsteam(_, A).  [covers 11,0/206,0 pos, 0,0/0,0 neg]
% This clause covers 11 positive examples, of which 11 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(_, A).  [covers 173,0/173,0 pos, 0,0/0,0 neg]'
%     Score = -4,959979 (regressionFit = 4,959976, penalties=3.2500000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(_, A).  [covers 173,0/173,0 pos, 0,0/0,0 neg]

% Have these 7 positive seeds: 28 29 30 32 61 64 65
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Consider expanding [#1 of outerLoop #7, bodyLen=3] 'teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(_, A).  [covers 173,0/173,0 pos, 0,0/0,0 neg]' score=-4.959979179146285
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 30 variant children.  Sending 29 items to OPEN for evaluation and possible insertion.
% Have created 29 valid-on-seeds descendants and have picked up 16 bad extensions.
%     Score = -0,984384 (regressionFit = 0,984380, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(D, A), athleteledsportsteam(D, A).  [covers 83,0/173,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -0,984384): teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(D, A), athleteledsportsteam(D, A).  [covers 83,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,999113 (regressionFit = 0,999109, penalties=3.95E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(E, A), athleteledsportsteam(E, D).  [covers 74,0/173,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(_, A), athleteledsportsteam(C, _).  [covers 173,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,986503 (regressionFit = 0,986499, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(D, A), athleteledsportsteam(D, _).  [covers 100,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,983845 (regressionFit = 0,983841, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(_, A), athleteledsportsteam(_, A).  [covers 94,0/173,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -0,983845): teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(_, A), athleteledsportsteam(_, A).  [covers 94,0/173,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(_, A), athleteledsportsteam(_, D).  [covers 173,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,999116 (regressionFit = 0,999112, penalties=4.150000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(_, A), athleteplaysforteam(C, A).  [covers 69,0/173,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(_, A), athleteplaysforteam(C, D).  [covers 173,0/173,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(_, A), athleteplaysforteam(C, _).  [covers 173,0/173,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(_, A), athleteplaysforteam(_, A).  [covers 173,0/173,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(_, A), athleteplaysforteam(_, D).  [covers 173,0/173,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(_, A), athleteplaysinleague(C, _).  [covers 173,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,981542 (regressionFit = 0,981537, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(D, A), athleteplaysinleague(D, _).  [covers 123,0/173,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -0,981542): teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(D, A), athleteplaysinleague(D, _).  [covers 123,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,999087 (regressionFit = 0,999083, penalties=4.05E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(D, A), athleteplayssport(D, B).  [covers 93,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,982658 (regressionFit = 0,982654, penalties=4.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(D, A), athleteplayssport(D, _).  [covers 120,0/173,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(_, A), athleteplayssport(_, B).  [covers 173,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,998770 (regressionFit = 0,998766, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(_, A), teamalsoknownas(D, A).  [covers 15,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,985520 (regressionFit = 0,985515, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(_, A), teamalsoknownas(A, _).  [covers 33,0/173,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(_, A), teamalsoknownas(D, _).  [covers 173,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,989502 (regressionFit = 0,989498, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(_, A), teamalsoknownas(_, A).  [covers 29,0/173,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(_, A), teamalsoknownas(_, D).  [covers 173,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,971646 (regressionFit = 0,971642, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(_, A), teamplaysagainstteam(A, D).  [covers 132,0/173,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -0,971646): teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(_, A), teamplaysagainstteam(A, D).  [covers 132,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,969320 (regressionFit = 0,969315, penalties=4.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(_, A), teamplaysagainstteam(D, A).  [covers 136,0/173,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -0,969320): teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(_, A), teamplaysagainstteam(D, A).  [covers 136,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,999111 (regressionFit = 0,999107, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(_, A), teamplaysagainstteam(A, _).  [covers 163,0/173,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(_, A), teamplaysagainstteam(D, _).  [covers 173,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,999115 (regressionFit = 0,999110, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(_, A), teamplaysagainstteam(_, A).  [covers 169,0/173,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(_, A), teamplaysagainstteam(_, D).  [covers 173,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,999001 (regressionFit = 0,998997, penalties=4.360000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(_, A), teamplaysinleague(A, _).  [covers 168,0/173,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.260000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(_, A), teamplaysinleague(D, _).  [covers 173,0/173,0 pos, 0,0/0,0 neg]

% Consider expanding [#2 of outerLoop #7, bodyLen=4] 'teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(_, A), teamplaysagainstteam(D, A).  [covers 136,0/173,0 pos, 0,0/0,0 neg]' score=-0.9693195025572686
%  At # nodes expanded = 2, |OPEN| = 28.  Pruned 28 variant children.  Sending 26 items to OPEN for evaluation and possible insertion.
% Have created 26 valid-on-seeds descendants and have picked up 8 bad extensions.
%     Score = -0,977909 (regressionFit = 0,977904, penalties=4.950000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(E, A), teamplaysagainstteam(D, A), athleteledsportsteam(E, A).  [covers 77,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,999106 (regressionFit = 0,999101, penalties=4.950000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(E, A), teamplaysagainstteam(D, A), athleteledsportsteam(E, D).  [covers 25,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,969321 (regressionFit = 0,969315, penalties=5.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(_, A), teamplaysagainstteam(D, A), athleteledsportsteam(C, _).  [covers 136,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,979865 (regressionFit = 0,979860, penalties=5.060000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(E, A), teamplaysagainstteam(D, A), athleteledsportsteam(E, _).  [covers 91,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,977624 (regressionFit = 0,977619, penalties=5.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(_, A), teamplaysagainstteam(D, A), athleteledsportsteam(_, A).  [covers 88,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,969321 (regressionFit = 0,969315, penalties=5.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(_, A), teamplaysagainstteam(D, A), athleteledsportsteam(_, D).  [covers 136,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,968299 (regressionFit = 0,968294, penalties=5.050000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(_, A), teamplaysagainstteam(D, A), athleteplaysforteam(C, D).  [covers 134,0/173,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -0,968299): teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(_, A), teamplaysagainstteam(D, A), athleteplaysforteam(C, D).  [covers 134,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,969321 (regressionFit = 0,969315, penalties=5.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(_, A), teamplaysagainstteam(D, A), athleteplaysforteam(C, _).  [covers 136,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,969321 (regressionFit = 0,969315, penalties=5.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(_, A), teamplaysagainstteam(D, A), athleteplaysforteam(_, A).  [covers 136,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,969321 (regressionFit = 0,969315, penalties=5.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(_, A), teamplaysagainstteam(D, A), athleteplaysforteam(_, D).  [covers 136,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,966512 (regressionFit = 0,966506, penalties=5.2600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(_, A), teamplaysagainstteam(D, A), athleteplaysinleague(C, _).  [covers 135,0/173,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -0,966512): teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(_, A), teamplaysagainstteam(D, A), athleteplaysinleague(C, _).  [covers 135,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,977634 (regressionFit = 0,977628, penalties=5.1600000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(E, A), teamplaysagainstteam(D, A), athleteplaysinleague(E, _).  [covers 115,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,999115 (regressionFit = 0,999110, penalties=4.950000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(E, A), teamplaysagainstteam(D, A), athleteplayssport(E, B).  [covers 90,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,977757 (regressionFit = 0,977752, penalties=5.060000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(E, A), teamplaysagainstteam(D, A), athleteplayssport(E, _).  [covers 111,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,969321 (regressionFit = 0,969315, penalties=5.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(_, A), teamplaysagainstteam(D, A), athleteplayssport(_, B).  [covers 136,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,998771 (regressionFit = 0,998766, penalties=5.15E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(_, A), teamplaysagainstteam(D, A), teamalsoknownas(D, A).  [covers 15,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,999107 (regressionFit = 0,999102, penalties=5.2600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(_, A), teamplaysagainstteam(D, A), teamalsoknownas(A, _).  [covers 21,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,974505 (regressionFit = 0,974499, penalties=5.2600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(_, A), teamplaysagainstteam(D, A), teamalsoknownas(D, _).  [covers 111,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,974621 (regressionFit = 0,974616, penalties=5.2600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(_, A), teamplaysagainstteam(D, A), teamalsoknownas(_, D).  [covers 118,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,972888 (regressionFit = 0,972883, penalties=5.050000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(_, A), teamplaysagainstteam(D, A), teamplaysagainstteam(A, D).  [covers 127,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,970841 (regressionFit = 0,970836, penalties=5.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(_, A), teamplaysagainstteam(D, A), teamplaysagainstteam(A, _).  [covers 131,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,969321 (regressionFit = 0,969315, penalties=5.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(_, A), teamplaysagainstteam(D, A), teamplaysagainstteam(D, _).  [covers 136,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,969321 (regressionFit = 0,969315, penalties=5.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(_, A), teamplaysagainstteam(D, A), teamplaysagainstteam(_, A).  [covers 136,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,969321 (regressionFit = 0,969315, penalties=5.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(_, A), teamplaysagainstteam(D, A), teamplaysagainstteam(_, D).  [covers 136,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,971367 (regressionFit = 0,971362, penalties=5.2600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(_, A), teamplaysagainstteam(D, A), teamplaysinleague(A, _).  [covers 132,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,969321 (regressionFit = 0,969315, penalties=5.2600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(_, A), teamplaysagainstteam(D, A), teamplaysinleague(D, _).  [covers 136,0/173,0 pos, 0,0/0,0 neg]

% Consider expanding [#3 of outerLoop #7, bodyLen=4] 'teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(_, A), teamplaysagainstteam(A, D).  [covers 132,0/173,0 pos, 0,0/0,0 neg]' score=-0.9716461868724687
%  At # nodes expanded = 3, |OPEN| = 27.  Pruned 28 variant children.  Sending 24 items to OPEN for evaluation and possible insertion.
% Have created 24 valid-on-seeds descendants and have picked up 9 bad extensions.
%     Score = -0,977572 (regressionFit = 0,977567, penalties=4.950000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(E, A), teamplaysagainstteam(A, D), athleteledsportsteam(E, A).  [covers 77,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,999116 (regressionFit = 0,999111, penalties=4.950000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(E, A), teamplaysagainstteam(A, D), athleteledsportsteam(E, D).  [covers 23,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,971647 (regressionFit = 0,971642, penalties=5.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(_, A), teamplaysagainstteam(A, D), athleteledsportsteam(C, _).  [covers 132,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,979545 (regressionFit = 0,979540, penalties=5.060000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(E, A), teamplaysagainstteam(A, D), athleteledsportsteam(E, _).  [covers 91,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,977286 (regressionFit = 0,977281, penalties=5.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(_, A), teamplaysagainstteam(A, D), athleteledsportsteam(_, A).  [covers 88,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,971647 (regressionFit = 0,971642, penalties=5.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(_, A), teamplaysagainstteam(A, D), athleteledsportsteam(_, D).  [covers 132,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,970658 (regressionFit = 0,970653, penalties=5.050000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(_, A), teamplaysagainstteam(A, D), athleteplaysforteam(C, D).  [covers 130,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,971647 (regressionFit = 0,971642, penalties=5.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(_, A), teamplaysagainstteam(A, D), athleteplaysforteam(C, _).  [covers 132,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,971647 (regressionFit = 0,971642, penalties=5.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(_, A), teamplaysagainstteam(A, D), athleteplaysforteam(_, A).  [covers 132,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,971647 (regressionFit = 0,971642, penalties=5.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(_, A), teamplaysagainstteam(A, D), athleteplaysforteam(_, D).  [covers 132,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,968960 (regressionFit = 0,968955, penalties=5.2600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(_, A), teamplaysagainstteam(A, D), athleteplaysinleague(C, _).  [covers 131,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,978176 (regressionFit = 0,978171, penalties=5.1600000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(E, A), teamplaysagainstteam(A, D), athleteplaysinleague(E, _).  [covers 116,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,999118 (regressionFit = 0,999113, penalties=4.950000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(E, A), teamplaysagainstteam(A, D), athleteplayssport(E, B).  [covers 90,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,978317 (regressionFit = 0,978312, penalties=5.060000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(E, A), teamplaysagainstteam(A, D), athleteplayssport(E, _).  [covers 112,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,971647 (regressionFit = 0,971642, penalties=5.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(_, A), teamplaysagainstteam(A, D), athleteplayssport(_, B).  [covers 132,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,975210 (regressionFit = 0,975205, penalties=5.2600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(_, A), teamplaysagainstteam(A, D), teamalsoknownas(D, _).  [covers 107,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,975619 (regressionFit = 0,975614, penalties=5.2600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(_, A), teamplaysagainstteam(A, D), teamalsoknownas(_, D).  [covers 115,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,972888 (regressionFit = 0,972883, penalties=5.050000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(_, A), teamplaysagainstteam(A, D), teamplaysagainstteam(D, A).  [covers 127,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,971647 (regressionFit = 0,971642, penalties=5.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(_, A), teamplaysagainstteam(A, D), teamplaysagainstteam(A, _).  [covers 132,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,971647 (regressionFit = 0,971642, penalties=5.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(_, A), teamplaysagainstteam(A, D), teamplaysagainstteam(D, _).  [covers 132,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,971647 (regressionFit = 0,971642, penalties=5.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(_, A), teamplaysagainstteam(A, D), teamplaysagainstteam(_, A).  [covers 132,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,971647 (regressionFit = 0,971642, penalties=5.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(_, A), teamplaysagainstteam(A, D), teamplaysagainstteam(_, D).  [covers 132,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,971857 (regressionFit = 0,971851, penalties=5.2600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(_, A), teamplaysagainstteam(A, D), teamplaysinleague(A, _).  [covers 129,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,971647 (regressionFit = 0,971642, penalties=5.2600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(_, A), teamplaysagainstteam(A, D), teamplaysinleague(D, _).  [covers 132,0/173,0 pos, 0,0/0,0 neg]

% Consider expanding [#4 of outerLoop #7, bodyLen=4] 'teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(D, A), athleteplaysinleague(D, _).  [covers 123,0/173,0 pos, 0,0/0,0 neg]' score=-0.9815417008776662
%  At # nodes expanded = 4, |OPEN| = 26.  Pruned 36 variant children.  Sending 30 items to OPEN for evaluation and possible insertion.
% Have created 30 valid-on-seeds descendants and have picked up 8 bad extensions.
%     Score = -0,978207 (regressionFit = 0,978202, penalties=5.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(D, A), athleteplaysinleague(D, _), athleteledsportsteam(D, A).  [covers 70,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,999113 (regressionFit = 0,999108, penalties=5.060000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(E, A), athleteplaysinleague(E, _), athleteledsportsteam(E, D).  [covers 70,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,981543 (regressionFit = 0,981537, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(D, A), athleteplaysinleague(D, _), athleteledsportsteam(C, _).  [covers 123,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,980972 (regressionFit = 0,980967, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(D, A), athleteplaysinleague(D, _), athleteledsportsteam(D, _).  [covers 89,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,979423 (regressionFit = 0,979418, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(D, A), athleteplaysinleague(D, _), athleteledsportsteam(_, A).  [covers 87,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,981543 (regressionFit = 0,981537, penalties=5.1700000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(E, A), athleteplaysinleague(E, _), athleteledsportsteam(_, D).  [covers 123,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,999115 (regressionFit = 0,999109, penalties=5.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(D, A), athleteplaysinleague(D, _), athleteplaysforteam(C, A).  [covers 68,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,981543 (regressionFit = 0,981537, penalties=5.060000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(E, A), athleteplaysinleague(E, _), athleteplaysforteam(C, D).  [covers 123,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,981543 (regressionFit = 0,981537, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(D, A), athleteplaysinleague(D, _), athleteplaysforteam(C, _).  [covers 123,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,981543 (regressionFit = 0,981537, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(D, A), athleteplaysinleague(D, _), athleteplaysforteam(_, A).  [covers 123,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,981543 (regressionFit = 0,981537, penalties=5.1700000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(E, A), athleteplaysinleague(E, _), athleteplaysforteam(_, D).  [covers 123,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,998815 (regressionFit = 0,998810, penalties=5.060000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(D, A), athleteplaysinleague(D, E), athleteplaysinleague(C, E).  [covers 108,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,981543 (regressionFit = 0,981537, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(D, A), athleteplaysinleague(D, _), athleteplaysinleague(C, _).  [covers 123,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,981543 (regressionFit = 0,981537, penalties=5.1700000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(D, A), athleteplaysinleague(D, E), athleteplaysinleague(_, E).  [covers 123,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,999082 (regressionFit = 0,999077, penalties=5.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(D, A), athleteplaysinleague(D, _), athleteplayssport(D, B).  [covers 90,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,981600 (regressionFit = 0,981595, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(D, A), athleteplaysinleague(D, _), athleteplayssport(D, _).  [covers 115,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,981543 (regressionFit = 0,981537, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(D, A), athleteplaysinleague(D, _), athleteplayssport(_, B).  [covers 123,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,981543 (regressionFit = 0,981537, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(E, A), athleteplaysinleague(E, _), teamalsoknownas(D, _).  [covers 123,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,981543 (regressionFit = 0,981537, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(E, A), athleteplaysinleague(E, _), teamalsoknownas(_, D).  [covers 123,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,978176 (regressionFit = 0,978171, penalties=5.1600000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(E, A), athleteplaysinleague(E, _), teamplaysagainstteam(A, D).  [covers 116,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,977634 (regressionFit = 0,977628, penalties=5.1600000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(E, A), athleteplaysinleague(E, _), teamplaysagainstteam(D, A).  [covers 115,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,981360 (regressionFit = 0,981354, penalties=5.37E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(D, A), athleteplaysinleague(D, _), teamplaysagainstteam(A, _).  [covers 122,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,981543 (regressionFit = 0,981537, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(E, A), athleteplaysinleague(E, _), teamplaysagainstteam(D, _).  [covers 123,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,981543 (regressionFit = 0,981537, penalties=5.37E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(D, A), athleteplaysinleague(D, _), teamplaysagainstteam(_, A).  [covers 123,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,981543 (regressionFit = 0,981537, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(E, A), athleteplaysinleague(E, _), teamplaysagainstteam(_, D).  [covers 123,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,981276 (regressionFit = 0,981271, penalties=5.1600000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(D, A), athleteplaysinleague(D, E), teamplaysinleague(A, E).  [covers 107,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,981693 (regressionFit = 0,981688, penalties=5.060000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(E, A), athleteplaysinleague(E, F), teamplaysinleague(D, F).  [covers 122,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,980867 (regressionFit = 0,980862, penalties=5.37E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(D, A), athleteplaysinleague(D, _), teamplaysinleague(A, _).  [covers 121,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,981543 (regressionFit = 0,981537, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(E, A), athleteplaysinleague(E, _), teamplaysinleague(D, _).  [covers 123,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,981693 (regressionFit = 0,981688, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(D, A), athleteplaysinleague(D, E), teamplaysinleague(_, E).  [covers 122,0/173,0 pos, 0,0/0,0 neg]

% Consider expanding [#5 of outerLoop #7, bodyLen=4] 'teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(D, A), athleteplayssport(D, _).  [covers 120,0/173,0 pos, 0,0/0,0 neg]' score=-0.9826580699560563
%  At # nodes expanded = 5, |OPEN| = 25.  Pruned 32 variant children.  Sending 25 items to OPEN for evaluation and possible insertion.
% Have created 25 valid-on-seeds descendants and have picked up 10 bad extensions.
%     Score = -0,978425 (regressionFit = 0,978420, penalties=5.060000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(D, A), athleteplayssport(D, _), athleteledsportsteam(D, A).  [covers 67,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,999116 (regressionFit = 0,999111, penalties=4.96E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(E, A), athleteplayssport(E, _), athleteledsportsteam(E, D).  [covers 71,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,982659 (regressionFit = 0,982654, penalties=5.17E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(D, A), athleteplayssport(D, _), athleteledsportsteam(C, _).  [covers 120,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,982493 (regressionFit = 0,982488, penalties=5.17E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(D, A), athleteplayssport(D, _), athleteledsportsteam(D, _).  [covers 89,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,979972 (regressionFit = 0,979967, penalties=5.17E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(D, A), athleteplayssport(D, _), athleteledsportsteam(_, A).  [covers 85,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,982659 (regressionFit = 0,982654, penalties=5.070000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(E, A), athleteplayssport(E, _), athleteledsportsteam(_, D).  [covers 120,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,999117 (regressionFit = 0,999112, penalties=5.060000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(D, A), athleteplayssport(D, _), athleteplaysforteam(C, A).  [covers 69,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,982659 (regressionFit = 0,982654, penalties=4.96E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(E, A), athleteplayssport(E, _), athleteplaysforteam(C, D).  [covers 120,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,982659 (regressionFit = 0,982654, penalties=5.17E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(D, A), athleteplayssport(D, _), athleteplaysforteam(C, _).  [covers 120,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,982659 (regressionFit = 0,982654, penalties=5.17E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(D, A), athleteplayssport(D, _), athleteplaysforteam(_, A).  [covers 120,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,982659 (regressionFit = 0,982654, penalties=5.070000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(E, A), athleteplayssport(E, _), athleteplaysforteam(_, D).  [covers 120,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,982659 (regressionFit = 0,982654, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(D, A), athleteplayssport(D, _), athleteplaysinleague(C, _).  [covers 120,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,981600 (regressionFit = 0,981595, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(D, A), athleteplayssport(D, _), athleteplaysinleague(D, _).  [covers 115,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,982659 (regressionFit = 0,982654, penalties=5.17E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(D, A), athleteplayssport(D, _), athleteplayssport(_, B).  [covers 120,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,982659 (regressionFit = 0,982654, penalties=5.070000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(D, A), athleteplayssport(D, E), athleteplayssport(_, E).  [covers 120,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,982659 (regressionFit = 0,982654, penalties=5.1700000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(E, A), athleteplayssport(E, _), teamalsoknownas(D, _).  [covers 120,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,982659 (regressionFit = 0,982654, penalties=5.1700000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(E, A), athleteplayssport(E, _), teamalsoknownas(_, D).  [covers 120,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,978317 (regressionFit = 0,978312, penalties=5.060000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(E, A), athleteplayssport(E, _), teamplaysagainstteam(A, D).  [covers 112,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,977757 (regressionFit = 0,977752, penalties=5.060000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(E, A), athleteplayssport(E, _), teamplaysagainstteam(D, A).  [covers 111,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,982460 (regressionFit = 0,982454, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(D, A), athleteplayssport(D, _), teamplaysagainstteam(A, _).  [covers 119,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,982659 (regressionFit = 0,982654, penalties=5.1700000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(E, A), athleteplayssport(E, _), teamplaysagainstteam(D, _).  [covers 120,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,982659 (regressionFit = 0,982654, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(D, A), athleteplayssport(D, _), teamplaysagainstteam(_, A).  [covers 120,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,982659 (regressionFit = 0,982654, penalties=5.1700000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(E, A), athleteplayssport(E, _), teamplaysagainstteam(_, D).  [covers 120,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,981966 (regressionFit = 0,981960, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(D, A), athleteplayssport(D, _), teamplaysinleague(A, _).  [covers 118,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,982659 (regressionFit = 0,982654, penalties=5.1700000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(E, A), athleteplayssport(E, _), teamplaysinleague(D, _).  [covers 120,0/173,0 pos, 0,0/0,0 neg]

% Consider expanding [#6 of outerLoop #7, bodyLen=4] 'teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(_, A), athleteledsportsteam(_, A).  [covers 94,0/173,0 pos, 0,0/0,0 neg]' score=-0.9838449939306609
%  At # nodes expanded = 6, |OPEN| = 24.  Pruned 38 variant children.  Sending 32 items to OPEN for evaluation and possible insertion.
% Have created 32 valid-on-seeds descendants and have picked up 9 bad extensions.
%     Score = -0,984385 (regressionFit = 0,984380, penalties=5.060000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(D, A), athleteledsportsteam(_, A), athleteledsportsteam(D, A).  [covers 83,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,999118 (regressionFit = 0,999113, penalties=4.96E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(E, A), athleteledsportsteam(_, A), athleteledsportsteam(E, D).  [covers 65,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,983846 (regressionFit = 0,983841, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(_, A), athleteledsportsteam(_, A), athleteledsportsteam(C, _).  [covers 94,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,984328 (regressionFit = 0,984323, penalties=5.17E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(D, A), athleteledsportsteam(_, A), athleteledsportsteam(D, _).  [covers 86,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,983846 (regressionFit = 0,983841, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(_, A), athleteledsportsteam(_, A), athleteledsportsteam(_, A).  [covers 94,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,983846 (regressionFit = 0,983841, penalties=5.17E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(_, A), athleteledsportsteam(_, A), athleteledsportsteam(_, D).  [covers 94,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,999118 (regressionFit = 0,999113, penalties=5.1600000000000006E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(_, A), athleteledsportsteam(_, A), athleteplaysforteam(C, A).  [covers 62,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,983846 (regressionFit = 0,983841, penalties=5.060000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(_, A), athleteledsportsteam(_, A), athleteplaysforteam(C, D).  [covers 94,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,984385 (regressionFit = 0,984380, penalties=5.060000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(_, A), athleteledsportsteam(D, A), athleteplaysforteam(D, A).  [covers 83,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,999118 (regressionFit = 0,999113, penalties=4.96E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(_, A), athleteledsportsteam(E, A), athleteplaysforteam(E, D).  [covers 65,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,983846 (regressionFit = 0,983841, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(_, A), athleteledsportsteam(_, A), athleteplaysforteam(C, _).  [covers 94,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,984041 (regressionFit = 0,984036, penalties=5.17E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(_, A), athleteledsportsteam(D, A), athleteplaysforteam(D, _).  [covers 91,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,983846 (regressionFit = 0,983841, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(_, A), athleteledsportsteam(_, A), athleteplaysforteam(_, A).  [covers 94,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,983846 (regressionFit = 0,983841, penalties=5.17E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(_, A), athleteledsportsteam(_, A), athleteplaysforteam(_, D).  [covers 94,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,983846 (regressionFit = 0,983841, penalties=5.370000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(_, A), athleteledsportsteam(_, A), athleteplaysinleague(C, _).  [covers 94,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,979423 (regressionFit = 0,979418, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(D, A), athleteledsportsteam(_, A), athleteplaysinleague(D, _).  [covers 87,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,978515 (regressionFit = 0,978510, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(_, A), athleteledsportsteam(D, A), athleteplaysinleague(D, _).  [covers 83,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,999117 (regressionFit = 0,999111, penalties=5.060000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(D, A), athleteledsportsteam(_, A), athleteplayssport(D, B).  [covers 69,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,999116 (regressionFit = 0,999111, penalties=5.060000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(_, A), athleteledsportsteam(D, A), athleteplayssport(D, B).  [covers 67,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,979972 (regressionFit = 0,979967, penalties=5.17E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(D, A), athleteledsportsteam(_, A), athleteplayssport(D, _).  [covers 85,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,979186 (regressionFit = 0,979181, penalties=5.17E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(_, A), athleteledsportsteam(D, A), athleteplayssport(D, _).  [covers 83,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,983846 (regressionFit = 0,983841, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(_, A), athleteledsportsteam(_, A), athleteplayssport(_, B).  [covers 94,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,983846 (regressionFit = 0,983841, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(_, A), athleteledsportsteam(_, A), teamalsoknownas(D, _).  [covers 94,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,983846 (regressionFit = 0,983841, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(_, A), athleteledsportsteam(_, A), teamalsoknownas(_, D).  [covers 94,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,977286 (regressionFit = 0,977281, penalties=5.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(_, A), athleteledsportsteam(_, A), teamplaysagainstteam(A, D).  [covers 88,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,977624 (regressionFit = 0,977619, penalties=5.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(_, A), athleteledsportsteam(_, A), teamplaysagainstteam(D, A).  [covers 88,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,983766 (regressionFit = 0,983761, penalties=5.370000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(_, A), athleteledsportsteam(_, A), teamplaysagainstteam(A, _).  [covers 92,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,983846 (regressionFit = 0,983841, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(_, A), athleteledsportsteam(_, A), teamplaysagainstteam(D, _).  [covers 94,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,984071 (regressionFit = 0,984065, penalties=5.370000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(_, A), athleteledsportsteam(_, A), teamplaysagainstteam(_, A).  [covers 93,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,983846 (regressionFit = 0,983841, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(_, A), athleteledsportsteam(_, A), teamplaysagainstteam(_, D).  [covers 94,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,983846 (regressionFit = 0,983841, penalties=5.370000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(_, A), athleteledsportsteam(_, A), teamplaysinleague(A, _).  [covers 94,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,983846 (regressionFit = 0,983841, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(_, A), athleteledsportsteam(_, A), teamplaysinleague(D, _).  [covers 94,0/173,0 pos, 0,0/0,0 neg]

% Consider expanding [#7 of outerLoop #7, bodyLen=4] 'teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(D, A), athleteledsportsteam(D, A).  [covers 83,0/173,0 pos, 0,0/0,0 neg]' score=-0.9843840723042081
%  At # nodes expanded = 7, |OPEN| = 23.  Pruned 28 variant children.  Sending 23 items to OPEN for evaluation and possible insertion.
% Have created 23 valid-on-seeds descendants and have picked up 9 bad extensions.
%     Score = -0,984385 (regressionFit = 0,984380, penalties=5.060000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(D, A), athleteledsportsteam(D, A), athleteledsportsteam(C, _).  [covers 83,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,984385 (regressionFit = 0,984380, penalties=5.060000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(D, A), athleteledsportsteam(D, A), athleteledsportsteam(_, A).  [covers 83,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,984385 (regressionFit = 0,984380, penalties=4.96E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(E, A), athleteledsportsteam(E, A), athleteledsportsteam(_, D).  [covers 83,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,999118 (regressionFit = 0,999113, penalties=4.95E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(D, A), athleteledsportsteam(D, A), athleteplaysforteam(C, A).  [covers 59,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,984385 (regressionFit = 0,984380, penalties=4.85E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(E, A), athleteledsportsteam(E, A), athleteplaysforteam(C, D).  [covers 83,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,984385 (regressionFit = 0,984380, penalties=5.060000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(D, A), athleteledsportsteam(D, A), athleteplaysforteam(C, _).  [covers 83,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,984385 (regressionFit = 0,984380, penalties=5.060000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(D, A), athleteledsportsteam(D, A), athleteplaysforteam(_, A).  [covers 83,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,984385 (regressionFit = 0,984380, penalties=4.96E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(E, A), athleteledsportsteam(E, A), athleteplaysforteam(_, D).  [covers 83,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,984385 (regressionFit = 0,984380, penalties=5.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(D, A), athleteledsportsteam(D, A), athleteplaysinleague(C, _).  [covers 83,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,978207 (regressionFit = 0,978202, penalties=5.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(D, A), athleteledsportsteam(D, A), athleteplaysinleague(D, _).  [covers 70,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,999117 (regressionFit = 0,999112, penalties=4.95E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(D, A), athleteledsportsteam(D, A), athleteplayssport(D, B).  [covers 53,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,978425 (regressionFit = 0,978420, penalties=5.060000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(D, A), athleteledsportsteam(D, A), athleteplayssport(D, _).  [covers 67,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,984385 (regressionFit = 0,984380, penalties=5.060000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(D, A), athleteledsportsteam(D, A), athleteplayssport(_, B).  [covers 83,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,984385 (regressionFit = 0,984380, penalties=5.060000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(E, A), athleteledsportsteam(E, A), teamalsoknownas(D, _).  [covers 83,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,984385 (regressionFit = 0,984380, penalties=5.060000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(E, A), athleteledsportsteam(E, A), teamalsoknownas(_, D).  [covers 83,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,977572 (regressionFit = 0,977567, penalties=4.950000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(E, A), athleteledsportsteam(E, A), teamplaysagainstteam(A, D).  [covers 77,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,977909 (regressionFit = 0,977904, penalties=4.950000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(E, A), athleteledsportsteam(E, A), teamplaysagainstteam(D, A).  [covers 77,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,984219 (regressionFit = 0,984213, penalties=5.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(D, A), athleteledsportsteam(D, A), teamplaysagainstteam(A, _).  [covers 81,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,984385 (regressionFit = 0,984380, penalties=5.060000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(E, A), athleteledsportsteam(E, A), teamplaysagainstteam(D, _).  [covers 83,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,984562 (regressionFit = 0,984557, penalties=5.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(D, A), athleteledsportsteam(D, A), teamplaysagainstteam(_, A).  [covers 82,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,984385 (regressionFit = 0,984380, penalties=5.060000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(E, A), athleteledsportsteam(E, A), teamplaysagainstteam(_, D).  [covers 83,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,984385 (regressionFit = 0,984380, penalties=5.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(D, A), athleteledsportsteam(D, A), teamplaysinleague(A, _).  [covers 83,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,984385 (regressionFit = 0,984380, penalties=5.060000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(E, A), athleteledsportsteam(E, A), teamplaysinleague(D, _).  [covers 83,0/173,0 pos, 0,0/0,0 neg]

% Consider expanding [#8 of outerLoop #7, bodyLen=4] 'teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(_, A), teamalsoknownas(A, _).  [covers 33,0/173,0 pos, 0,0/0,0 neg]' score=-0.9855197928319591
%  At # nodes expanded = 8, |OPEN| = 22.  Pruned 56 variant children.  Sending 17 items to OPEN for evaluation and possible insertion.
% Have created 17 valid-on-seeds descendants and have picked up 28 bad extensions.
%     Score = -0,985521 (regressionFit = 0,985515, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(_, A), teamalsoknownas(A, _), athleteledsportsteam(_, D).  [covers 33,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,985521 (regressionFit = 0,985515, penalties=5.160000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(_, A), teamalsoknownas(A, _), athleteplaysforteam(C, D).  [covers 33,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,985521 (regressionFit = 0,985515, penalties=5.370000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(_, A), teamalsoknownas(A, _), athleteplaysforteam(C, _).  [covers 33,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,985521 (regressionFit = 0,985515, penalties=5.370000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(_, A), teamalsoknownas(A, _), athleteplaysforteam(_, A).  [covers 33,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,985521 (regressionFit = 0,985515, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(_, A), teamalsoknownas(A, _), athleteplaysforteam(_, D).  [covers 33,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,985521 (regressionFit = 0,985515, penalties=5.47E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(_, A), teamalsoknownas(A, _), athleteplaysinleague(C, _).  [covers 33,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,985521 (regressionFit = 0,985515, penalties=5.370000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(_, A), teamalsoknownas(A, _), athleteplayssport(_, B).  [covers 33,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,985521 (regressionFit = 0,985515, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(_, A), teamalsoknownas(A, _), teamalsoknownas(D, _).  [covers 33,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,981158 (regressionFit = 0,981153, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(_, A), teamalsoknownas(A, D), teamalsoknownas(D, _).  [covers 22,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,985521 (regressionFit = 0,985515, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(_, A), teamalsoknownas(A, _), teamalsoknownas(_, D).  [covers 33,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,985521 (regressionFit = 0,985515, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(_, A), teamalsoknownas(A, D), teamalsoknownas(_, D).  [covers 33,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,999107 (regressionFit = 0,999102, penalties=5.2600000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(_, A), teamalsoknownas(A, _), teamplaysagainstteam(D, A).  [covers 21,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,985521 (regressionFit = 0,985515, penalties=5.37E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(_, A), teamalsoknownas(A, _), teamplaysagainstteam(D, _).  [covers 33,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,984953 (regressionFit = 0,984948, penalties=5.47E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(_, A), teamalsoknownas(A, _), teamplaysagainstteam(_, A).  [covers 32,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,985521 (regressionFit = 0,985515, penalties=5.37E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(_, A), teamalsoknownas(A, _), teamplaysagainstteam(_, D).  [covers 33,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,985521 (regressionFit = 0,985515, penalties=5.37E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(_, A), teamalsoknownas(A, _), teamplaysinleague(D, _).  [covers 33,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,984365 (regressionFit = 0,984360, penalties=5.37E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(_, A), teamalsoknownas(A, D), teamplaysinleague(D, _).  [covers 29,0/173,0 pos, 0,0/0,0 neg]

% Consider expanding [#9 of outerLoop #7, bodyLen=4] 'teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(D, A), athleteledsportsteam(D, _).  [covers 100,0/173,0 pos, 0,0/0,0 neg]' score=-0.9865027755542681
%  At # nodes expanded = 9, |OPEN| = 21.  Pruned 56 variant children.  Sending 33 items to OPEN for evaluation and possible insertion.
% Have created 33 valid-on-seeds descendants and have picked up 18 bad extensions.
%     Score = -0,986504 (regressionFit = 0,986499, penalties=5.17E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(D, A), athleteledsportsteam(D, _), athleteledsportsteam(C, _).  [covers 100,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,984328 (regressionFit = 0,984323, penalties=5.17E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(D, A), athleteledsportsteam(D, _), athleteledsportsteam(_, A).  [covers 86,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,986504 (regressionFit = 0,986499, penalties=5.070000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(E, A), athleteledsportsteam(E, _), athleteledsportsteam(_, D).  [covers 100,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,986504 (regressionFit = 0,986499, penalties=5.070000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(D, A), athleteledsportsteam(D, E), athleteledsportsteam(_, E).  [covers 100,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,999117 (regressionFit = 0,999112, penalties=5.060000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(D, A), athleteledsportsteam(D, _), athleteplaysforteam(C, A).  [covers 69,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,986504 (regressionFit = 0,986499, penalties=4.96E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(E, A), athleteledsportsteam(E, _), athleteplaysforteam(C, D).  [covers 100,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,999117 (regressionFit = 0,999112, penalties=4.96E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(D, A), athleteledsportsteam(D, E), athleteplaysforteam(C, E).  [covers 70,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,986504 (regressionFit = 0,986499, penalties=5.17E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(D, A), athleteledsportsteam(D, _), athleteplaysforteam(C, _).  [covers 100,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,986504 (regressionFit = 0,986499, penalties=5.17E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(D, A), athleteledsportsteam(D, _), athleteplaysforteam(_, A).  [covers 100,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,986504 (regressionFit = 0,986499, penalties=5.070000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(E, A), athleteledsportsteam(E, _), athleteplaysforteam(_, D).  [covers 100,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,986507 (regressionFit = 0,986502, penalties=5.070000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(D, A), athleteledsportsteam(D, E), athleteplaysforteam(_, E).  [covers 99,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,986504 (regressionFit = 0,986499, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(D, A), athleteledsportsteam(D, _), athleteplaysinleague(C, _).  [covers 100,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,980972 (regressionFit = 0,980967, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(D, A), athleteledsportsteam(D, _), athleteplaysinleague(D, _).  [covers 89,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,999117 (regressionFit = 0,999112, penalties=5.060000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(D, A), athleteledsportsteam(D, _), athleteplayssport(D, B).  [covers 69,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,982493 (regressionFit = 0,982488, penalties=5.17E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(D, A), athleteledsportsteam(D, _), athleteplayssport(D, _).  [covers 89,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,986504 (regressionFit = 0,986499, penalties=5.17E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(D, A), athleteledsportsteam(D, _), athleteplayssport(_, B).  [covers 100,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,986504 (regressionFit = 0,986499, penalties=5.1700000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(E, A), athleteledsportsteam(E, _), teamalsoknownas(D, _).  [covers 100,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,986504 (regressionFit = 0,986499, penalties=5.1700000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(E, A), athleteledsportsteam(E, _), teamalsoknownas(_, D).  [covers 100,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,979545 (regressionFit = 0,979540, penalties=5.060000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(E, A), athleteledsportsteam(E, _), teamplaysagainstteam(A, D).  [covers 91,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,999114 (regressionFit = 0,999109, penalties=5.060000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(D, A), athleteledsportsteam(D, E), teamplaysagainstteam(A, E).  [covers 26,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,979865 (regressionFit = 0,979860, penalties=5.060000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(E, A), athleteledsportsteam(E, _), teamplaysagainstteam(D, A).  [covers 91,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,979920 (regressionFit = 0,979915, penalties=4.960000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(E, A), athleteledsportsteam(E, F), teamplaysagainstteam(D, F).  [covers 91,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,999106 (regressionFit = 0,999101, penalties=5.060000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(D, A), athleteledsportsteam(D, E), teamplaysagainstteam(E, A).  [covers 29,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,979600 (regressionFit = 0,979595, penalties=4.960000000000001E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(E, A), athleteledsportsteam(E, F), teamplaysagainstteam(F, D).  [covers 91,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,986468 (regressionFit = 0,986463, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(D, A), athleteledsportsteam(D, _), teamplaysagainstteam(A, _).  [covers 98,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,986504 (regressionFit = 0,986499, penalties=5.1700000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(E, A), athleteledsportsteam(E, _), teamplaysagainstteam(D, _).  [covers 100,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,986464 (regressionFit = 0,986459, penalties=5.1700000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(D, A), athleteledsportsteam(D, E), teamplaysagainstteam(E, _).  [covers 97,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,986728 (regressionFit = 0,986723, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(D, A), athleteledsportsteam(D, _), teamplaysagainstteam(_, A).  [covers 99,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,986504 (regressionFit = 0,986499, penalties=5.1700000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(E, A), athleteledsportsteam(E, _), teamplaysagainstteam(_, D).  [covers 100,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,986727 (regressionFit = 0,986722, penalties=5.1700000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(D, A), athleteledsportsteam(D, E), teamplaysagainstteam(_, E).  [covers 98,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,986504 (regressionFit = 0,986499, penalties=5.27E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(D, A), athleteledsportsteam(D, _), teamplaysinleague(A, _).  [covers 99,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,986504 (regressionFit = 0,986499, penalties=5.1700000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(E, A), athleteledsportsteam(E, _), teamplaysinleague(D, _).  [covers 100,0/173,0 pos, 0,0/0,0 neg]
%     Score = -0,986504 (regressionFit = 0,986499, penalties=5.1700000000000005E-6) for clause:  teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, _), athleteplaysforteam(D, A), athleteledsportsteam(D, E), teamplaysinleague(E, _).  [covers 100,0/173,0 pos, 0,0/0,0 neg]

***** Warning: #28 TOO MANY NODES CONSIDERED (i.e., 'expanded') for 'LearnOneClause': nodesConsidered = 10 and maxNodesToConsider = 10. *****


% The best node found: teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(_, A), teamplaysagainstteam(D, A), athleteplaysinleague(C, _).  [covers 135,0/173,0 pos, 0,0/0,0 neg]

% The best node found: teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(_, A), teamplaysagainstteam(D, A), athleteplaysinleague(C, _).  [covers 135,0/173,0 pos, 0,0/0,0 neg]

% Expanding node at Level 3 with score = -0,006.
% Will extend: teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(_, A), teamplaysagainstteam(D, A), athleteplaysinleague(C, _).  [covers 135,0/173,0 pos, 0,0/0,0 neg]
% Path: 4;true,true,true
Comparing variance: 0.006832262066760543 to score=9.43454584424385E-4 #egs=135.0
Comparing variance: 0.0011618679526831553 to score=9.43454584424385E-4 #egs=38.0
%   Creating a TRUE-branch and FALSE-branch leaves because level = 3 >= 3

% Time for loop #7: 8,885 seconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #7, the best clause found is:
%      teamplayssport(A, B) :- athleteplayssport(C, B), athleteledsportsteam(C, D), athleteplaysforteam(_, A), teamplaysagainstteam(D, A), athleteplaysinleague(C, _).  [covers 135,0/173,0 pos, 0,0/0,0 neg]
% This clause covers 135 positive examples, of which 135 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 7 positive seeds: 71 114 225 315 341 556 612
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = teamplayssport(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  teamplayssport(_, _).  [covers 795,0/795,0 pos, 0,0/0,0 neg]
% Most-general root: teamplayssport(_, _).  [covers 795,0/795,0 pos, 0,0/0,0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #8, bodyLen=0] 'teamplayssport(_, _).  [covers 795,0/795,0 pos, 0,0/0,0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 4 variant children.  Sending 7 items to OPEN for evaluation and possible insertion.
% Have created 7 valid-on-seeds descendants and have picked up 3 bad extensions.
%     Score = -2,900452 (regressionFit = 2,900451, penalties=1.23E-6) for clause:  teamplayssport(A, _) :- athleteledsportsteam(_, A).  [covers 226,0/795,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -2,900452): teamplayssport(A, _) :- athleteledsportsteam(_, A).  [covers 226,0/795,0 pos, 0,0/0,0 neg]
%     Score = -2,900299 (regressionFit = 2,900298, penalties=1.23E-6) for clause:  teamplayssport(A, _) :- athleteplaysforteam(_, A).  [covers 364,0/795,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -2,900299): teamplayssport(A, _) :- athleteplaysforteam(_, A).  [covers 364,0/795,0 pos, 0,0/0,0 neg]
%     Score = -2,900641 (regressionFit = 2,900640, penalties=1.23E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(A, _).  [covers 174,0/795,0 pos, 0,0/0,0 neg]
%     Score = -2,890581 (regressionFit = 2,890580, penalties=1.23E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(_, A).  [covers 131,0/795,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -2,890581): teamplayssport(A, _) :- teamalsoknownas(_, A).  [covers 131,0/795,0 pos, 0,0/0,0 neg]
%     Score = -2,899653 (regressionFit = 2,899652, penalties=1.23E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, _).  [covers 455,0/795,0 pos, 0,0/0,0 neg]
%     Score = -2,900145 (regressionFit = 2,900143, penalties=1.23E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(_, A).  [covers 482,0/795,0 pos, 0,0/0,0 neg]
%     Score = -2,891668 (regressionFit = 2,891667, penalties=1.23E-6) for clause:  teamplayssport(A, _) :- teamplaysinleague(A, _).  [covers 615,0/795,0 pos, 0,0/0,0 neg]

% Consider expanding [#2 of outerLoop #8, bodyLen=1] 'teamplayssport(A, _) :- teamalsoknownas(_, A).  [covers 131,0/795,0 pos, 0,0/0,0 neg]' score=-2.890581353645713
%  At # nodes expanded = 2, |OPEN| = 6.  Pruned 14 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 12 bad extensions.
%     Score = -2,898820 (regressionFit = 2,898818, penalties=2.0300000000000005E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(A, B).  [covers 83,0/795,0 pos, 0,0/0,0 neg]
%     Score = -2,890582 (regressionFit = 2,890580, penalties=2.1400000000000003E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(B, _).  [covers 131,0/795,0 pos, 0,0/0,0 neg]
%     Score = -2,887224 (regressionFit = 2,887222, penalties=2.1400000000000003E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(_, B).  [covers 112,0/795,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -2,887224): teamplayssport(A, _) :- teamalsoknownas(B, A), teamalsoknownas(_, B).  [covers 112,0/795,0 pos, 0,0/0,0 neg]
%     Score = -2,863304 (regressionFit = 2,863302, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(_, A), teamplaysagainstteam(_, A).  [covers 65,0/795,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -2,863304): teamplayssport(A, _) :- teamalsoknownas(_, A), teamplaysagainstteam(_, A).  [covers 65,0/795,0 pos, 0,0/0,0 neg]
%     Score = -2,888911 (regressionFit = 2,888909, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(B, A), teamplaysinleague(B, _).  [covers 122,0/795,0 pos, 0,0/0,0 neg]

% Consider expanding [#3 of outerLoop #8, bodyLen=1] 'teamplayssport(A, _) :- teamplaysinleague(A, _).  [covers 615,0/795,0 pos, 0,0/0,0 neg]' score=-2.8916678704459033
%  At # nodes expanded = 3, |OPEN| = 5.  Pruned 4 variant children.  Sending 6 items to OPEN for evaluation and possible insertion.
% Have created 6 valid-on-seeds descendants and have picked up 3 bad extensions.
%     Score = -2,900440 (regressionFit = 2,900438, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysinleague(A, _), athleteledsportsteam(_, A).  [covers 225,0/795,0 pos, 0,0/0,0 neg]
%     Score = -2,900498 (regressionFit = 2,900496, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysinleague(A, _), athleteplaysforteam(_, A).  [covers 342,0/795,0 pos, 0,0/0,0 neg]
%     Score = -2,899353 (regressionFit = 2,899350, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysinleague(A, B), athleteplaysinleague(_, B).  [covers 468,0/795,0 pos, 0,0/0,0 neg]
%     Score = -2,899956 (regressionFit = 2,899953, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysinleague(A, _), teamplaysagainstteam(A, _).  [covers 411,0/795,0 pos, 0,0/0,0 neg]
%     Score = -2,899797 (regressionFit = 2,899795, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysinleague(A, _), teamplaysagainstteam(_, A).  [covers 421,0/795,0 pos, 0,0/0,0 neg]
%     Score = -2,891669 (regressionFit = 2,891667, penalties=2.1400000000000003E-6) for clause:  teamplayssport(A, _) :- teamplaysinleague(A, B), teamplaysinleague(_, B).  [covers 615,0/795,0 pos, 0,0/0,0 neg]

% Consider expanding [#4 of outerLoop #8, bodyLen=1] 'teamplayssport(A, _) :- teamplaysagainstteam(A, _).  [covers 455,0/795,0 pos, 0,0/0,0 neg]' score=-2.899653041729474
%  At # nodes expanded = 4, |OPEN| = 4.  Pruned 14 variant children.  Sending 13 items to OPEN for evaluation and possible insertion.
% Have created 13 valid-on-seeds descendants and have picked up 7 bad extensions.
%     Score = -2,900437 (regressionFit = 2,900435, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, _), athleteledsportsteam(_, A).  [covers 224,0/795,0 pos, 0,0/0,0 neg]
%     Score = -2,900366 (regressionFit = 2,900363, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, B), athleteledsportsteam(_, B).  [covers 374,0/795,0 pos, 0,0/0,0 neg]
%     Score = -2,900410 (regressionFit = 2,900407, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, _), athleteplaysforteam(_, A).  [covers 348,0/795,0 pos, 0,0/0,0 neg]
%     Score = -2,899266 (regressionFit = 2,899264, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, B), athleteplaysforteam(_, B).  [covers 429,0/795,0 pos, 0,0/0,0 neg]
%     Score = -2,897318 (regressionFit = 2,897316, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, B), teamalsoknownas(B, _).  [covers 334,0/795,0 pos, 0,0/0,0 neg]
%     Score = -2,894683 (regressionFit = 2,894681, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, B), teamalsoknownas(_, B).  [covers 345,0/795,0 pos, 0,0/0,0 neg]
%     Score = -2,899049 (regressionFit = 2,899047, penalties=2.0300000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, B), teamplaysagainstteam(B, A).  [covers 417,0/795,0 pos, 0,0/0,0 neg]
%     Score = -2,899654 (regressionFit = 2,899652, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, _), teamplaysagainstteam(A, _).  [covers 455,0/795,0 pos, 0,0/0,0 neg]
%     Score = -2,899607 (regressionFit = 2,899605, penalties=2.1400000000000003E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, B), teamplaysagainstteam(B, _).  [covers 451,0/795,0 pos, 0,0/0,0 neg]
%     Score = -2,899499 (regressionFit = 2,899496, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, _), teamplaysagainstteam(_, A).  [covers 442,0/795,0 pos, 0,0/0,0 neg]
%     Score = -2,899654 (regressionFit = 2,899652, penalties=2.1400000000000003E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, B), teamplaysagainstteam(_, B).  [covers 455,0/795,0 pos, 0,0/0,0 neg]
%     Score = -2,899956 (regressionFit = 2,899953, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, _), teamplaysinleague(A, _).  [covers 411,0/795,0 pos, 0,0/0,0 neg]
%     Score = -2,899357 (regressionFit = 2,899355, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(A, B), teamplaysinleague(B, _).  [covers 442,0/795,0 pos, 0,0/0,0 neg]

% Consider expanding [#5 of outerLoop #8, bodyLen=1] 'teamplayssport(A, _) :- teamplaysagainstteam(_, A).  [covers 482,0/795,0 pos, 0,0/0,0 neg]' score=-2.9001445130832324
%  At # nodes expanded = 5, |OPEN| = 3.  Pruned 14 variant children.  Sending 15 items to OPEN for evaluation and possible insertion.
% Have created 15 valid-on-seeds descendants and have picked up 7 bad extensions.
%     Score = -2,900437 (regressionFit = 2,900435, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(_, A), athleteledsportsteam(_, A).  [covers 224,0/795,0 pos, 0,0/0,0 neg]
%     Score = -2,900103 (regressionFit = 2,900101, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(B, A), athleteledsportsteam(_, B).  [covers 404,0/795,0 pos, 0,0/0,0 neg]
%     Score = -2,900371 (regressionFit = 2,900369, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(_, A), athleteplaysforteam(_, A).  [covers 354,0/795,0 pos, 0,0/0,0 neg]
%     Score = -2,899837 (regressionFit = 2,899835, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(B, A), athleteplaysforteam(_, B).  [covers 459,0/795,0 pos, 0,0/0,0 neg]
%     Score = -2,896817 (regressionFit = 2,896814, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(_, A), teamalsoknownas(A, _).  [covers 90,0/795,0 pos, 0,0/0,0 neg]
%     Score = -2,898183 (regressionFit = 2,898180, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(B, A), teamalsoknownas(B, _).  [covers 352,0/795,0 pos, 0,0/0,0 neg]
%     Score = -2,863304 (regressionFit = 2,863302, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(_, A), teamalsoknownas(_, A).  [covers 65,0/795,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -2,863304): teamplayssport(A, _) :- teamplaysagainstteam(_, A), teamalsoknownas(_, A).  [covers 65,0/795,0 pos, 0,0/0,0 neg]
%     Score = -2,894124 (regressionFit = 2,894122, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(B, A), teamalsoknownas(_, B).  [covers 348,0/795,0 pos, 0,0/0,0 neg]
%     Score = -2,899049 (regressionFit = 2,899047, penalties=2.0300000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(B, A), teamplaysagainstteam(A, B).  [covers 417,0/795,0 pos, 0,0/0,0 neg]
%     Score = -2,899499 (regressionFit = 2,899496, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(_, A), teamplaysagainstteam(A, _).  [covers 442,0/795,0 pos, 0,0/0,0 neg]
%     Score = -2,900145 (regressionFit = 2,900143, penalties=2.1400000000000003E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(B, A), teamplaysagainstteam(B, _).  [covers 482,0/795,0 pos, 0,0/0,0 neg]
%     Score = -2,900146 (regressionFit = 2,900143, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(_, A), teamplaysagainstteam(_, A).  [covers 482,0/795,0 pos, 0,0/0,0 neg]
%     Score = -2,900145 (regressionFit = 2,900143, penalties=2.1400000000000003E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(B, A), teamplaysagainstteam(_, B).  [covers 482,0/795,0 pos, 0,0/0,0 neg]
%     Score = -2,899797 (regressionFit = 2,899795, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(_, A), teamplaysinleague(A, _).  [covers 421,0/795,0 pos, 0,0/0,0 neg]
%     Score = -2,899944 (regressionFit = 2,899941, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamplaysagainstteam(B, A), teamplaysinleague(B, _).  [covers 471,0/795,0 pos, 0,0/0,0 neg]

% Consider expanding [#6 of outerLoop #8, bodyLen=1] 'teamplayssport(A, _) :- athleteplaysforteam(_, A).  [covers 364,0/795,0 pos, 0,0/0,0 neg]' score=-2.9002987511993745
%  At # nodes expanded = 6, |OPEN| = 2.  Pruned 8 variant children.  Sending 9 items to OPEN for evaluation and possible insertion.
% Have created 9 valid-on-seeds descendants and have picked up 3 bad extensions.
%     Score = -2,899862 (regressionFit = 2,899860, penalties=2.1300000000000004E-6) for clause:  teamplayssport(A, _) :- athleteplaysforteam(B, A), athleteledsportsteam(B, A).  [covers 180,0/795,0 pos, 0,0/0,0 neg]
%     Score = -2,900354 (regressionFit = 2,900351, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- athleteplaysforteam(B, A), athleteledsportsteam(B, _).  [covers 220,0/795,0 pos, 0,0/0,0 neg]
%     Score = -2,900284 (regressionFit = 2,900282, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- athleteplaysforteam(_, A), athleteledsportsteam(_, A).  [covers 206,0/795,0 pos, 0,0/0,0 neg]
%     Score = -2,900300 (regressionFit = 2,900298, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- athleteplaysforteam(_, A), athleteplaysforteam(_, A).  [covers 364,0/795,0 pos, 0,0/0,0 neg]
%     Score = -2,900627 (regressionFit = 2,900625, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- athleteplaysforteam(B, A), athleteplaysinleague(B, _).  [covers 259,0/795,0 pos, 0,0/0,0 neg]
%     Score = -2,897100 (regressionFit = 2,897098, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- athleteplaysforteam(B, A), athleteplayssport(B, _).  [covers 247,0/795,0 pos, 0,0/0,0 neg]
%     Score = -2,900410 (regressionFit = 2,900407, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- athleteplaysforteam(_, A), teamplaysagainstteam(A, _).  [covers 348,0/795,0 pos, 0,0/0,0 neg]
%     Score = -2,900371 (regressionFit = 2,900369, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- athleteplaysforteam(_, A), teamplaysagainstteam(_, A).  [covers 354,0/795,0 pos, 0,0/0,0 neg]
%     Score = -2,900498 (regressionFit = 2,900496, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- athleteplaysforteam(_, A), teamplaysinleague(A, _).  [covers 342,0/795,0 pos, 0,0/0,0 neg]

% Consider expanding [#7 of outerLoop #8, bodyLen=1] 'teamplayssport(A, _) :- athleteledsportsteam(_, A).  [covers 226,0/795,0 pos, 0,0/0,0 neg]' score=-2.9004522260897483
%  At # nodes expanded = 7, |OPEN| = 1.  Pruned 8 variant children.  Sending 9 items to OPEN for evaluation and possible insertion.
% Have created 9 valid-on-seeds descendants and have picked up 3 bad extensions.
%     Score = -2,900453 (regressionFit = 2,900451, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- athleteledsportsteam(_, A), athleteledsportsteam(_, A).  [covers 226,0/795,0 pos, 0,0/0,0 neg]
%     Score = -2,899862 (regressionFit = 2,899860, penalties=2.1300000000000004E-6) for clause:  teamplayssport(A, _) :- athleteledsportsteam(B, A), athleteplaysforteam(B, A).  [covers 180,0/795,0 pos, 0,0/0,0 neg]
%     Score = -2,900400 (regressionFit = 2,900398, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- athleteledsportsteam(B, A), athleteplaysforteam(B, _).  [covers 219,0/795,0 pos, 0,0/0,0 neg]
%     Score = -2,900284 (regressionFit = 2,900282, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- athleteledsportsteam(_, A), athleteplaysforteam(_, A).  [covers 206,0/795,0 pos, 0,0/0,0 neg]
%     Score = -2,900119 (regressionFit = 2,900116, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- athleteledsportsteam(B, A), athleteplaysinleague(B, _).  [covers 197,0/795,0 pos, 0,0/0,0 neg]
%     Score = -2,898150 (regressionFit = 2,898148, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- athleteledsportsteam(B, A), athleteplayssport(B, _).  [covers 188,0/795,0 pos, 0,0/0,0 neg]
%     Score = -2,900437 (regressionFit = 2,900435, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- athleteledsportsteam(_, A), teamplaysagainstteam(A, _).  [covers 224,0/795,0 pos, 0,0/0,0 neg]
%     Score = -2,900437 (regressionFit = 2,900435, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- athleteledsportsteam(_, A), teamplaysagainstteam(_, A).  [covers 224,0/795,0 pos, 0,0/0,0 neg]
%     Score = -2,900440 (regressionFit = 2,900438, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- athleteledsportsteam(_, A), teamplaysinleague(A, _).  [covers 225,0/795,0 pos, 0,0/0,0 neg]

% Consider expanding [#8 of outerLoop #8, bodyLen=1] 'teamplayssport(A, _) :- teamalsoknownas(A, _).  [covers 174,0/795,0 pos, 0,0/0,0 neg]' score=-2.9006413331462437
%  At # nodes expanded = 8, |OPEN| = 0.  Pruned 14 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 12 bad extensions.
%     Score = -2,898820 (regressionFit = 2,898818, penalties=2.0300000000000005E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(A, B), teamalsoknownas(B, A).  [covers 83,0/795,0 pos, 0,0/0,0 neg]
%     Score = -2,900483 (regressionFit = 2,900481, penalties=2.1400000000000003E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(A, B), teamalsoknownas(B, _).  [covers 152,0/795,0 pos, 0,0/0,0 neg]
%     Score = -2,900642 (regressionFit = 2,900640, penalties=2.1400000000000003E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(A, B), teamalsoknownas(_, B).  [covers 174,0/795,0 pos, 0,0/0,0 neg]
%     Score = -2,896817 (regressionFit = 2,896814, penalties=2.3400000000000005E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(A, _), teamplaysagainstteam(_, A).  [covers 90,0/795,0 pos, 0,0/0,0 neg]
%     Score = -2,900521 (regressionFit = 2,900519, penalties=2.24E-6) for clause:  teamplayssport(A, _) :- teamalsoknownas(A, B), teamplaysinleague(B, _).  [covers 158,0/795,0 pos, 0,0/0,0 neg]

% The best node found: teamplayssport(A, _) :- teamplaysagainstteam(_, A), teamalsoknownas(_, A).  [covers 65,0/795,0 pos, 0,0/0,0 neg]

% The best node found: teamplayssport(A, _) :- teamplaysagainstteam(_, A), teamalsoknownas(_, A).  [covers 65,0/795,0 pos, 0,0/0,0 neg]

% Expanding node at Level 1 with score = -0,004.
% Will extend: teamplayssport(A, _) :- teamplaysagainstteam(_, A), teamalsoknownas(_, A).  [covers 65,0/795,0 pos, 0,0/0,0 neg]
% Path: 4;false
Comparing variance: 0.028648000144847294 to score=9.43454584424385E-4 #egs=65.0
Comparing variance: 0.0013714816625330919 to score=9.43454584424385E-4 #egs=730.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 65,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,028648)
%         ILP node to extend: teamplayssport(A, _) :- teamplaysagainstteam(_, A), teamalsoknownas(_, A).  [covers 65,0/795,0 pos, 0,0/0,0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -0,028648) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 730,0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0,001371)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 2 and with score = -0,001371) into the LAST position (#2) in the search queue.

% Time for loop #8: 352 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #8, the best clause found is:
%      teamplayssport(A, _) :- teamplaysagainstteam(_, A), teamalsoknownas(_, A).  [covers 65,0/795,0 pos, 0,0/0,0 neg]
% This clause covers 65 positive examples, of which 65 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% ******************************************

% Have stopped ILP's outer loop because have reached the maximum number of learned clauses (8).

% ******************************************
Created a leaf under (teamplayssport(D, E) :- teamplaysagainstteam(Anon147235, D), teamalsoknownas(Anon147829, D))
Created a leaf under (teamplayssport(D, E) :- teamplaysagainstteam(Anon147235, D), teamalsoknownas(Anon147829, D))

%%%%%  WILL-Produced Tree #5 @ 13:27:23 10/22/21.  [Using 33.562.744 memory cells.]  %%%%%


% FOR teamplayssport(A, B):
%   if ( athleteplayssport(C, B) )
%   then if ( athleteledsportsteam(C, D) )
%   | then if ( athleteplaysforteam(E, A) )
%   | | then if ( teamplaysagainstteam(D, A), athleteplaysinleague(C, F) )
%   | | | then return 0.315738842134174;  // std dev = 0,960, 135,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=134 */
%   | | | else return 0.34889914417782764;  // std dev = 0,210, 38,000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | else if ( teamplaysagainstteam(D, A), athleteledsportsteam(G, A) )
%   | | | then return 0.2337997478974091;  // std dev = 0,953, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | | else return 0.31189963971877455;  // std dev = 1,729, 195,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=192 */
%   | else if ( teamalsoknownas(H, A), teamalsoknownas(A, H) )
%   | | then return 0.41403517708411064;  // std dev = 0,236, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( teamplaysinleague(A, I), athleteplaysinleague(J, I) )
%   | | | then return -0.043664945321843;  // std dev = 1,212, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.2919499129777339;  // std dev = 1,182, 12,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   else if ( teamplaysagainstteam(K, A), teamalsoknownas(L, A) )
%   | then return -0.0675856534642864;  // std dev = 0,169, 65,000 (wgt'ed) examples reached here.  /* #neg=63 #pos=2 */
%   | else return -0.09261345048828469;  // std dev = 0,037, 730,000 (wgt'ed) examples reached here.  /* #neg=729 #pos=1 */


% Clauses:

teamplayssport(A, B, 0.315738842134174) :- 
     athleteplayssport(C, B), 
     athleteledsportsteam(C, D), 
     athleteplaysforteam(E, A), 
     teamplaysagainstteam(D, A), 
     athleteplaysinleague(C, F), 
     !. // Clause #1.

teamplayssport(A, B, 0.34889914417782764) :- 
     athleteplayssport(C, B), 
     athleteledsportsteam(C, D), 
     athleteplaysforteam(E, A), 
     !. // Clause #2.

teamplayssport(A, B, 0.2337997478974091) :- 
     athleteplayssport(C, B), 
     athleteledsportsteam(C, D), 
     teamplaysagainstteam(D, A), 
     athleteledsportsteam(E, A), 
     !. // Clause #3.

teamplayssport(A, B, 0.31189963971877455) :- 
     athleteplayssport(C, B), 
     athleteledsportsteam(C, D), 
     !. // Clause #4.

teamplayssport(A, B, 0.41403517708411064) :- 
     athleteplayssport(C, B), 
     teamalsoknownas(D, A), 
     teamalsoknownas(A, D), 
     !. // Clause #5.

teamplayssport(A, B, -0.043664945321843) :- 
     athleteplayssport(C, B), 
     teamplaysinleague(A, D), 
     athleteplaysinleague(E, D), 
     !. // Clause #6.

teamplayssport(A, B, 0.2919499129777339) :- 
     athleteplayssport(C, B), 
     !. // Clause #7.

teamplayssport(A, B, -0.0675856534642864) :- 
     teamplaysagainstteam(C, A), 
     teamalsoknownas(D, A), 
     !. // Clause #8.

teamplayssport(A, B, -0.09261345048828469) :- !. // Clause #9.


% The flattened versions of these clauses:

flattened_teamplayssport(a, b, 0.315738842134174) :-  /* #neg=1 #pos=134 */ 
   athleteplayssport(uniqueVar41, b),
   athleteledsportsteam(uniqueVar41, uniqueVar42),
   athleteplaysforteam(underscore, a),
   teamplaysagainstteam(uniqueVar42, a),
   athleteplaysinleague(uniqueVar41, underscore),
   !. // Flattened version of clause #1.

flattened_teamplayssport(a, b, 0.34889914417782764) :-  /* #pos=38 */ 
   athleteplayssport(uniqueVar43, b),
   athleteledsportsteam(uniqueVar43, underscore),
   athleteplaysforteam(underscore, a),
   !. // Flattened version of clause #2.

flattened_teamplayssport(a, b, 0.2337997478974091) :-  /* #neg=1 #pos=10 */ 
   athleteplayssport(uniqueVar44, b),
   athleteledsportsteam(uniqueVar44, uniqueVar45),
   teamplaysagainstteam(uniqueVar45, a),
   athleteledsportsteam(underscore, a),
   !. // Flattened version of clause #3.

flattened_teamplayssport(underscore, a, 0.31189963971877455) :-  /* #neg=3 #pos=192 */ 
   athleteplayssport(uniqueVar46, a),
   athleteledsportsteam(uniqueVar46, underscore),
   !. // Flattened version of clause #4.

flattened_teamplayssport(a, b, 0.41403517708411064) :-  /* #pos=6 */ 
   athleteplayssport(underscore, b),
   teamalsoknownas(uniqueVar47, a),
   teamalsoknownas(a, uniqueVar47),
   !. // Flattened version of clause #5.

flattened_teamplayssport(a, b, -0.043664945321843) :-  /* #neg=6 #pos=4 */ 
   athleteplayssport(underscore, b),
   teamplaysinleague(a, uniqueVar48),
   athleteplaysinleague(underscore, uniqueVar48),
   !. // Flattened version of clause #6.

flattened_teamplayssport(underscore, a, 0.2919499129777339) :-  /* #neg=2 #pos=10 */ 
   athleteplayssport(underscore, a),
   !. // Flattened version of clause #7.

flattened_teamplayssport(a, underscore, -0.0675856534642864) :-  /* #neg=63 #pos=2 */ 
   teamplaysagainstteam(underscore, a),
   teamalsoknownas(underscore, a),
   !. // Flattened version of clause #8.

flattened_teamplayssport(underscore, underscore, -0.09261345048828469) :-  /* #neg=729 #pos=1 */ 
   !. // Flattened version of clause #9.


% The unique flattened literals:
%   athleteplayssport(uniqueVar41, b)
%   teamplaysagainstteam(underscore, a)
%   athleteledsportsteam(uniqueVar46, underscore)
%   teamplaysagainstteam(uniqueVar42, a)
%   athleteplaysinleague(uniqueVar41, underscore)
%   athleteledsportsteam(underscore, a)
%   athleteplayssport(underscore, b)
%   athleteledsportsteam(uniqueVar44, uniqueVar45)
%   teamplaysagainstteam(uniqueVar45, a)
%   athleteplayssport(uniqueVar43, b)
%   athleteplayssport(underscore, a)
%   athleteledsportsteam(uniqueVar43, underscore)
%   athleteplayssport(uniqueVar44, b)
%   athleteplayssport(uniqueVar46, a)
%   athleteplaysinleague(underscore, uniqueVar48)
%   athleteplaysforteam(underscore, a)
%   teamalsoknownas(uniqueVar47, a)
%   teamplaysinleague(a, uniqueVar48)
%   teamalsoknownas(underscore, a)
%   athleteledsportsteam(uniqueVar41, uniqueVar42)
%   teamalsoknownas(a, uniqueVar47)

% Saving model in: train/models/bRDNs/teamplayssport.model.ckpt
% Time taken to learn 5 trees is 6 minutes and 26,272 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.0036486642544820876
Set score:9.121660636205219E-4
% Only 1202 out of 1202 converged.
% Kept 397 of the 397 positive examples.
% Kept 793 of the 159.991 negative examples.
% Dataset size: 1.190
Computing probabilities
