Starting experiment #1 for 7_yeast_twitter

Start learning from source dataset

Source train facts examples: 15015
Source train pos examples: 369
Source train neg examples: 51477

WILL Produced-Tree #1
% FOR proteinclass(A, B):
%   if ( interaction(A, C), interaction(C, C) )
%   then if ( interaction(C, A), phenotype(C, D) )
%   | then return 0.14762261931003814;  // std dev = 0.454, 76.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=22 */
%   | else if ( interaction(E, A), enzyme(A, F) )
%   | | then if ( complex(A, G), complex(C, H) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.2672398441904214;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=9 */
%   | | else if ( recursion_proteinclass(C, B) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.17957750652808233;  // std dev = 4.943, 112.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=36 */
%   else if ( location(A, I), phenotype(A, J) )
%   | then if ( location(K, I), recursion_proteinclass(K, B) )
%   | | then if ( phenotype(K, J) )
%   | | | then return 0.7256188146175819;  // std dev = 4.369, 166.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=144 */
%   | | | else return -0.14185106490048766;  // std dev = 5.37e-08, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   | | else return -0.14185106490048843;  // std dev = 0.000, 207.000 (wgt'ed) examples reached here.  /* #neg=207 */
%   | else return 0.16983724678782028;  // std dev = 0.463, 462.000 (wgt'ed) examples reached here.  /* #neg=318 #pos=144 */
WILL Produced-Tree #2
% FOR proteinclass(A, B):
%   if ( interaction(C, A), complex(A, D) )
%   then if ( interaction(E, C), recursion_proteinclass(E, B) )
%   | then return 0.6764126918299167;  // std dev = 0.344, 58.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=50 */
%   | else return 0.04717757165512254;  // std dev = 0.388, 355.000 (wgt'ed) examples reached here.  /* #neg=277 #pos=78 */
%   else if ( interaction(F, A), phenotype(A, G) )
%   | then if ( recursion_proteinclass(F, B) )
%   | | then return 0.7955924011115664;  // std dev = 0.167, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( interaction(H, F), recursion_proteinclass(H, B) )
%   | | | then return 0.48945397555865855;  // std dev = 1.974, 20.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=14 */
%   | | | else return 0.09237432661828106;  // std dev = 6.264, 253.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=66 */
%   | else if ( interaction(I, A), phenotype(I, J) )
%   | | then if ( interaction(A, K), recursion_proteinclass(K, B) )
%   | | | then return 0.7947656463853182;  // std dev = 0.131, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.19906732549718179;  // std dev = 6.235, 168.000 (wgt'ed) examples reached here.  /* #neg=107 #pos=61 */
%   | | else if ( interaction(A, L), phenotype(L, M) )
%   | | | then return 0.20246186128237711;  // std dev = 4.407, 91.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=34 */
%   | | | else return 0.16303391886976032;  // std dev = 5.554, 142.000 (wgt'ed) examples reached here.  /* #neg=95 #pos=47 */
WILL Produced-Tree #3
% FOR proteinclass(A, B):
%   if ( interaction(C, A), recursion_proteinclass(C, B) )
%   then if ( complex(C, D) )
%   | then return 0.705731912793496;  // std dev = 0.064, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | else return 0.6051401680631435;  // std dev = 0.252, 25.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=23 */
%   else if ( interaction(A, E), interaction(E, A) )
%   | then if ( interaction(A, A) )
%   | | then return -0.18036463990454527;  // std dev = 0.143, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
%   | | else if ( enzyme(E, F), enzyme(A, F) )
%   | | | then return -0.09172230612492421;  // std dev = 0.890, 13.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=1 */
%   | | | else return 0.11488452775662038;  // std dev = 4.667, 125.000 (wgt'ed) examples reached here.  /* #neg=84 #pos=41 */
%   | else if ( interaction(G, A), enzyme(G, H) )
%   | | then if ( complex(G, I), complex(A, I) )
%   | | | then return -0.010978768902436644;  // std dev = 1.856, 28.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=5 */
%   | | | else return 0.11564706790059337;  // std dev = 5.255, 150.000 (wgt'ed) examples reached here.  /* #neg=104 #pos=46 */
%   | | else if ( interaction(A, J), recursion_proteinclass(J, B) )
%   | | | then return 0.7491724492324934;  // std dev = 0.208, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.12126381574408383;  // std dev = 11.265, 659.000 (wgt'ed) examples reached here.  /* #neg=456 #pos=203 */
WILL Produced-Tree #4
% FOR proteinclass(A, B):
%   if ( complex(A, C), interaction(A, D) )
%   then if ( interaction(D, E), recursion_proteinclass(E, B) )
%   | then return 0.49382579925560205;  // std dev = 0.307, 54.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=47 */
%   | else if ( interaction(D, A) )
%   | | then return -0.1762031328443624;  // std dev = 0.385, 73.000 (wgt'ed) examples reached here.  /* #neg=73 */
%   | | else return 0.05953293801365075;  // std dev = 0.407, 169.000 (wgt'ed) examples reached here.  /* #neg=122 #pos=47 */
%   else if ( interaction(F, A), enzyme(F, G) )
%   | then if ( interaction(H, F), recursion_proteinclass(H, B) )
%   | | then return 0.5281315374528288;  // std dev = 0.305, 20.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=18 */
%   | | else if ( interaction(A, F) )
%   | | | then return -0.18245968215046887;  // std dev = 0.244, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | | else return 0.08637703418689317;  // std dev = 5.482, 172.000 (wgt'ed) examples reached here.  /* #neg=120 #pos=52 */
%   | else if ( interaction(A, A), location(A, I) )
%   | | then return -0.014082873416641797;  // std dev = 0.282, 18.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=4 */
%   | | else if ( interaction(A, J), enzyme(J, K) )
%   | | | then return 0.22676110561284965;  // std dev = 2.843, 36.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=17 */
%   | | | else return 0.13981750016732505;  // std dev = 10.138, 522.000 (wgt'ed) examples reached here.  /* #neg=338 #pos=184 */
WILL Produced-Tree #5
% FOR proteinclass(A, B):
%   if ( phenotype(A, C), interaction(A, D) )
%   then if ( interaction(D, E), interaction(E, F) )
%   | then return 0.05158756018253909;  // std dev = 0.368, 316.000 (wgt'ed) examples reached here.  /* #neg=220 #pos=96 */
%   | else if ( recursion_proteinclass(D, B) )
%   | | then return 0.5656829817012948;  // std dev = 0.169, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( enzyme(A, G), interaction(D, H) )
%   | | | then return 0.36526156760360684;  // std dev = 1.069, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.07679783602053529;  // std dev = 2.469, 41.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   else if ( interaction(I, A), recursion_proteinclass(I, B) )
%   | then return 0.43488833701429086;  // std dev = 0.224, 35.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=33 */
%   | else if ( interaction(J, A), interaction(K, J) )
%   | | then if ( recursion_proteinclass(K, B), location(J, L) )
%   | | | then return 0.2938913754205042;  // std dev = 2.617, 31.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=19 */
%   | | | else return 0.06189423099453612;  // std dev = 9.636, 521.000 (wgt'ed) examples reached here.  /* #neg=374 #pos=147 */
%   | | else if ( interaction(A, M), recursion_proteinclass(M, B) )
%   | | | then return 0.3924145838600168;  // std dev = 0.895, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.11691822089676726;  // std dev = 5.453, 140.000 (wgt'ed) examples reached here.  /* #neg=91 #pos=49 */
WILL Produced-Tree #6
% FOR proteinclass(A, B):
%   if ( interaction(A, C), recursion_proteinclass(C, B) )
%   then if ( enzyme(A, D), phenotype(C, E) )
%   | then return 0.18424498614644083;  // std dev = 0.414, 11.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | else return 0.4145570139970657;  // std dev = 0.170, 50.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=49 */
%   else if ( interaction(F, A), recursion_proteinclass(F, B) )
%   | then if ( interaction(G, F), interaction(G, A) )
%   | | then return 0.44526254201447496;  // std dev = 0.105, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( phenotype(A, H), location(F, I) )
%   | | | then return 0.39046381078107;  // std dev = 0.297, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.11351341531832149;  // std dev = 1.070, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | else if ( interaction(A, J), complex(J, K) )
%   | | then if ( interaction(J, L), recursion_proteinclass(L, B) )
%   | | | then return 0.4651201452827908;  // std dev = 1.576, 31.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=27 */
%   | | | else return -0.04315854595533853;  // std dev = 6.612, 355.000 (wgt'ed) examples reached here.  /* #neg=292 #pos=63 */
%   | | else if ( phenotype(A, M), location(A, N) )
%   | | | then return 0.10871933730845185;  // std dev = 6.778, 273.000 (wgt'ed) examples reached here.  /* #neg=177 #pos=96 */
%   | | | else return 0.05211246573180085;  // std dev = 8.448, 351.000 (wgt'ed) examples reached here.  /* #neg=248 #pos=103 */
WILL Produced-Tree #7
% FOR proteinclass(A, B):
%   if ( interaction(A, C), recursion_proteinclass(C, B) )
%   then if ( interaction(C, D), complex(D, E) )
%   | then if ( interaction(A, D) )
%   | | then if ( interaction(D, C) )
%   | | | then return 0.24628255252974435;  // std dev = 0.868, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | | else return 0.38995749226790194;  // std dev = 0.273, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return -0.008432684769179166;  // std dev = 0.800, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | else return 0.3888303953671121;  // std dev = 0.089, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   else if ( interaction(A, A) )
%   | then return -0.14927311472102314;  // std dev = 0.160, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
%   | else if ( interaction(A, F), enzyme(F, G) )
%   | | then if ( phenotype(F, H), complex(F, I) )
%   | | | then return 0.08784563704882287;  // std dev = 3.491, 66.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=24 */
%   | | | else return -0.03384692474551092;  // std dev = 3.839, 128.000 (wgt'ed) examples reached here.  /* #neg=101 #pos=27 */
%   | | else if ( location(A, J) )
%   | | | then return 0.06001232671978958;  // std dev = 11.564, 774.000 (wgt'ed) examples reached here.  /* #neg=525 #pos=249 */
%   | | | else return -0.02525232653867987;  // std dev = 2.966, 53.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=12 */
WILL Produced-Tree #8
% FOR proteinclass(A, B):
%   if ( interaction(A, C), complex(C, D) )
%   then if ( recursion_proteinclass(C, B) )
%   | then return 0.27033296373476196;  // std dev = 0.075, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else if ( interaction(C, E), recursion_proteinclass(E, B) )
%   | | then return 0.30676414465995683;  // std dev = 0.296, 39.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=34 */
%   | | else if ( interaction(C, A) )
%   | | | then return -0.16120513448411447;  // std dev = 0.677, 111.000 (wgt'ed) examples reached here.  /* #neg=111 */
%   | | | else return 0.02330925617764844;  // std dev = 6.466, 250.000 (wgt'ed) examples reached here.  /* #neg=180 #pos=70 */
%   else if ( interaction(F, A), recursion_proteinclass(F, B) )
%   | then return 0.263457915502654;  // std dev = 0.235, 27.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=26 */
%   | else if ( interaction(G, A), enzyme(G, H) )
%   | | then if ( interaction(A, I), interaction(G, I) )
%   | | | then return -0.10037736575041491;  // std dev = 1.006, 17.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
%   | | | else return 0.03760414288514358;  // std dev = 4.748, 134.000 (wgt'ed) examples reached here.  /* #neg=94 #pos=40 */
%   | | else if ( location(A, J), enzyme(A, K) )
%   | | | then return 0.14025297629658742;  // std dev = 5.358, 142.000 (wgt'ed) examples reached here.  /* #neg=84 #pos=58 */
%   | | | else return 0.05662894852207781;  // std dev = 7.767, 318.000 (wgt'ed) examples reached here.  /* #neg=214 #pos=104 */
WILL Produced-Tree #9
% FOR proteinclass(A, B):
%   if ( interaction(A, C), recursion_proteinclass(C, B) )
%   then if ( interaction(C, D), interaction(D, D) )
%   | then return 0.14679427074116425;  // std dev = 0.231, 32.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=30 */
%   | else return 0.27608986442253936;  // std dev = 0.076, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   else if ( interaction(A, E), enzyme(A, F) )
%   | then if ( interaction(E, G), recursion_proteinclass(G, B) )
%   | | then return 0.5024221030933222;  // std dev = 0.127, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( interaction(E, A) )
%   | | | then return -0.18237342049910066;  // std dev = 0.503, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
%   | | | else return 0.10924192652575337;  // std dev = 4.600, 108.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=41 */
%   | else if ( interaction(A, H), location(A, I) )
%   | | then if ( interaction(H, J), recursion_proteinclass(J, B) )
%   | | | then return 0.28451993903343625;  // std dev = 1.819, 35.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=29 */
%   | | | else return -0.05631347849111052;  // std dev = 5.996, 307.000 (wgt'ed) examples reached here.  /* #neg=254 #pos=53 */
%   | | else if ( enzyme(A, K) )
%   | | | then return -0.009379745366781172;  // std dev = 6.035, 225.000 (wgt'ed) examples reached here.  /* #neg=162 #pos=63 */
%   | | | else return 0.05018042722061639;  // std dev = 7.761, 341.000 (wgt'ed) examples reached here.  /* #neg=228 #pos=113 */
WILL Produced-Tree #10
% FOR proteinclass(A, B):
%   if ( interaction(A, C), recursion_proteinclass(C, B) )
%   then return 0.16424899511932434;  // std dev = 0.183, 60.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=57 */
%   else if ( interaction(D, A), interaction(A, D) )
%   | then if ( phenotype(A, E), phenotype(D, E) )
%   | | then if ( complex(D, F) )
%   | | | then return -0.054650025516556976;  // std dev = 1.676, 60.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=13 */
%   | | | else return -0.13348003037695141;  // std dev = 0.100, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( interaction(D, D) )
%   | | | then return -0.07061410354996223;  // std dev = 1.199, 35.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=5 */
%   | | | else return -0.0033009229592878176;  // std dev = 2.345, 66.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=21 */
%   | else if ( interaction(G, A), recursion_proteinclass(G, B) )
%   | | then if ( phenotype(G, H), location(G, I) )
%   | | | then return 0.014695128547468036;  // std dev = 1.696, 15.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=11 */
%   | | | else return 0.30947268348218643;  // std dev = 0.303, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( complex(A, J), interaction(K, A) )
%   | | | then return -0.0024783795668844462;  // std dev = 6.378, 257.000 (wgt'ed) examples reached here.  /* #neg=190 #pos=67 */
%   | | | else return 0.036285143799477386;  // std dev = 10.475, 583.000 (wgt'ed) examples reached here.  /* #neg=399 #pos=184 */


Starting fold 1

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos	 examples: 126
Target test neg examples: 16128

Amount of data: 0.2
******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(A, C), interaction(C, C).;true;true
0;true;interaction(C, A), phenotype(C, D).;false;true
0;true,false;interaction(E, A), enzyme(A, F).;true;true
0;true,false,true;complex(A, G), complex(C, H).;false;false
0;true,false,false;recursion_proteinclass(C, B).;false;false
0;false;location(A, I), phenotype(A, J).;true;false
0;false,true;location(K, I), recursion_proteinclass(K, B).;true;false
0;false,true,true;phenotype(K, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), complex(A, D).;true;true
1;true;interaction(E, C), recursion_proteinclass(E, B).;false;false
1;false;interaction(F, A), phenotype(A, G).;true;true
1;false,true;recursion_proteinclass(F, B).;false;true
1;false,true,false;interaction(H, F), recursion_proteinclass(H, B).;false;false
1;false,false;interaction(I, A), phenotype(I, J).;true;true
1;false,false,true;interaction(A, K), recursion_proteinclass(K, B).;false;false
1;false,false,false;interaction(A, L), phenotype(L, M).;false;false
2;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
2;true;complex(C, D).;false;false
2;false;interaction(A, E), interaction(E, A).;true;true
2;false,true;interaction(A, A).;false;true
2;false,true,false;enzyme(E, F), enzyme(A, F).;false;false
2;false,false;interaction(G, A), enzyme(G, H).;true;true
2;false,false,true;complex(G, I), complex(A, I).;false;false
2;false,false,false;interaction(A, J), recursion_proteinclass(J, B).;false;false
3;;proteinclass(A, B) :- complex(A, C), interaction(A, D).;true;true
3;true;interaction(D, E), recursion_proteinclass(E, B).;false;true
3;true,false;interaction(D, A).;false;false
3;false;interaction(F, A), enzyme(F, G).;true;true
3;false,true;interaction(H, F), recursion_proteinclass(H, B).;false;true
3;false,true,false;interaction(A, F).;false;false
3;false,false;interaction(A, A), location(A, I).;false;true
3;false,false,false;interaction(A, J), enzyme(J, K).;false;false
4;;proteinclass(A, B) :- phenotype(A, C), interaction(A, D).;true;true
4;true;interaction(D, E), interaction(E, F).;false;true
4;true,false;recursion_proteinclass(D, B).;false;true
4;true,false,false;enzyme(A, G), interaction(D, H).;false;false
4;false;interaction(I, A), recursion_proteinclass(I, B).;false;true
4;false,false;interaction(J, A), interaction(K, J).;true;true
4;false,false,true;recursion_proteinclass(K, B), location(J, L).;false;false
4;false,false,false;interaction(A, M), recursion_proteinclass(M, B).;false;false
5;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
5;true;enzyme(A, D), phenotype(C, E).;false;false
5;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
5;false,true;interaction(G, F), interaction(G, A).;false;true
5;false,true,false;phenotype(A, H), location(F, I).;false;false
5;false,false;interaction(A, J), complex(J, K).;true;true
5;false,false,true;interaction(J, L), recursion_proteinclass(L, B).;false;false
5;false,false,false;phenotype(A, M), location(A, N).;false;false
6;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
6;true;interaction(C, D), complex(D, E).;true;false
6;true,true;interaction(A, D).;true;false
6;true,true,true;interaction(D, C).;false;false
6;false;interaction(A, A).;false;true
6;false,false;interaction(A, F), enzyme(F, G).;true;true
6;false,false,true;phenotype(F, H), complex(F, I).;false;false
6;false,false,false;location(A, J).;false;false
7;;proteinclass(A, B) :- interaction(A, C), complex(C, D).;true;true
7;true;recursion_proteinclass(C, B).;false;true
7;true,false;interaction(C, E), recursion_proteinclass(E, B).;false;true
7;true,false,false;interaction(C, A).;false;false
7;false;interaction(F, A), recursion_proteinclass(F, B).;false;true
7;false,false;interaction(G, A), enzyme(G, H).;true;true
7;false,false,true;interaction(A, I), interaction(G, I).;false;false
7;false,false,false;location(A, J), enzyme(A, K).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;interaction(C, D), interaction(D, D).;false;false
8;false;interaction(A, E), enzyme(A, F).;true;true
8;false,true;interaction(E, G), recursion_proteinclass(G, B).;false;true
8;false,true,false;interaction(E, A).;false;false
8;false,false;interaction(A, H), location(A, I).;true;true
8;false,false,true;interaction(H, J), recursion_proteinclass(J, B).;false;false
8;false,false,false;enzyme(A, K).;false;false
9;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;false;true
9;false;interaction(D, A), interaction(A, D).;true;true
9;false,true;phenotype(A, E), phenotype(D, E).;true;true
9;false,true,true;complex(D, F).;false;false
9;false,true,false;interaction(D, D).;false;false
9;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
9;false,false,true;phenotype(G, H), location(G, I).;false;false
9;false,false,false;complex(A, J), interaction(K, A).;false;false


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(C, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), recursion_accounttype(A, E) )
%   | then if ( tweets(F, D) )
%   | | then if ( recursion_accounttype(F, E) )
%   | | | then return 0.1607805140468801;  // std dev = 4.005, 76.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=23 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.2391013160518933;  // std dev = 2.225, 21.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=8 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C) )
%   | then return 0.16884161102410963;  // std dev = 3.554, 57.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=19 */
%   | else return -0.16257129523831834;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else if ( follows(E, A), recursion_accounttype(A, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, I), recursion_accounttype(I, J) )
%   | | | then return 0.21368975672656632;  // std dev = 2.233, 21.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=8 */
%   | | | else return 0.40416594720275645;  // std dev = 1.315, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then return 0.163772269974956;  // std dev = 0.476, 54.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=19 */
%   else if ( follows(A, D), follows(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, F) )
%   | | | then return 0.20244457225761175;  // std dev = 2.193, 20.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=8 */
%   | | | else return 0.2144918459649568;  // std dev = 1.494, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D) )
%   | then return 0.15070917781204302;  // std dev = 4.044, 70.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=26 */
%   | else if ( follows(C, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.23083569185833713;  // std dev = 0.024, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else if ( follows(E, A) )
%   | then if ( follows(F, E) )
%   | | then return -0.11439803984489141;  // std dev = 0.936, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, A), tweets(A, G) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.39398370694724133;  // std dev = 1.168, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(A, C), follows(A, D) )
%   then if ( follows(D, E), follows(E, F) )
%   | then return 0.14623077891989217;  // std dev = 3.971, 66.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=26 */
%   | else if ( follows(D, G) )
%   | | then return -0.2549515012887086;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return -0.19429123267856233;  // std dev = 0.022, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( follows(H, A) )
%   | then return -0.05523712633066739;  // std dev = 0.916, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | else if ( follows(I, A), follows(J, I) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, K) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.2154351365376226;  // std dev = 1.319, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( recursion_accounttype(C, D) )
%   | then return 0.05577954857885834;  // std dev = 4.155, 80.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=26 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(E, A) )
%   | then if ( follows(F, E), follows(F, A) )
%   | | then return -0.18599590019012707;  // std dev = 1.29e-08, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( recursion_accounttype(A, G), tweets(E, H) )
%   | | | then return 0.8018536115952247;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, I) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( recursion_accounttype(A, J), tweets(A, K) )
%   | | | then return 0.10136188098684418;  // std dev = 1.225, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return -0.1675541344278399;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D) )
%   | then if ( follows(A, D) )
%   | | then if ( follows(D, C) )
%   | | | then return 0.10037013840087249;  // std dev = 3.323, 47.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=18 */
%   | | | else return 7.55903912588729E-4;  // std dev = 1.193, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | else return 0.031217303103456443;  // std dev = 1.998, 19.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=6 */
%   | else return -0.15763210489730883;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.08970605895026619;  // std dev = 1.318, 19.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=3 */
%   | | | else return 0.03235398437673912;  // std dev = 1.060, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D) )
%   | then return 0.02017084241550163;  // std dev = 4.190, 81.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=26 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(E, A) )
%   | then return 0.04847602112219381;  // std dev = 0.680, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G) )
%   | | | then return 0.19856440666345757;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return -0.18508446967159342;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), follows(D, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.07442323259775074;  // std dev = 3.998, 69.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=26 */
%   else if ( follows(A, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F), tweets(A, G) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.02367885060917103;  // std dev = 0.432, 14.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=5 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then return -0.013554511489823728;  // std dev = 4.228, 85.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=26 */
%   else if ( follows(D, A), follows(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A) )
%   | | then if ( recursion_accounttype(E, F), tweets(E, G) )
%   | | | then return -0.09033263107495922;  // std dev = 0.772, 9.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.16198004834165053;  // std dev = 1.257, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */


Results
   AUC ROC   = 0.5
   AUC PR    = 0.007752
   CLL	      = -0.355842
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.015 seconds
Total inference time: 2.781 seconds
AUC ROC: 0.5


Results scoring model
   AUC ROC   = 0.631169
   AUC PR    = 0.010678
   CLL	      = -0.369903
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total scoring time: 1.333 seconds
Parameter learned model CLL: -0.369903


Structure after Parameter Learning
[['accounttype(A, B)', {'': 'follows(A, C), follows(C, C)', 'false': 'tweets(A, D), recursion_accounttype(A, E)', 'false,true': 'tweets(F, D)', 'false,true,true': 'recursion_accounttype(F, E)'}, {'true': [0.0, 0, 0], 'false,true,true,true': [4.005, 53, 23], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 0, 0], 'false,false': [2.225, 13, 8]}], ['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C)', 'false': 'follows(E, A), recursion_accounttype(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, H)', 'false,false,false': 'follows(A, I), recursion_accounttype(I, J)'}, {'true,true': [3.554, 38, 19], 'true,false': [0.0, 1, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [2.233, 13, 8], 'false,false,false,false': [1.315, 3, 4]}], ['accounttype(A, B)', {'': 'follows(C, A)', 'false': 'follows(A, D), follows(D, A)', 'false,false': 'follows(E, A)', 'false,false,false': 'follows(A, F)'}, {'true': [0.476, 35, 19], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [2.193, 12, 8], 'false,false,false,false': [1.494, 5, 4]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D)', 'true,false': 'follows(C, A)', 'false': 'follows(E, A)', 'false,true': 'follows(F, E)', 'false,false': 'follows(A, A), tweets(A, G)', 'false,false,false': 'follows(A, H)'}, {'true,true': [4.044, 44, 26], 'true,false,true': [0.0, 0, 0], 'true,false,false': [0.024, 4, 0], 'false,true,true': [0.936, 9, 1], 'false,true,false': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.168, 2, 4]}], ['accounttype(A, B)', {'': 'recursion_accounttype(A, C), follows(A, D)', 'true': 'follows(D, E), follows(E, F)', 'true,false': 'follows(D, G)', 'false': 'follows(H, A)', 'false,false': 'follows(I, A), follows(J, I)', 'false,false,false': 'follows(A, K)'}, {'true,true': [3.971, 40, 26], 'true,false,true': [0.0, 2, 0], 'true,false,false': [0.022, 5, 0], 'false,true': [0.916, 6, 1], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.319, 3, 4]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'recursion_accounttype(C, D)', 'false': 'follows(E, A)', 'false,true': 'follows(F, E), follows(F, A)', 'false,true,false': 'recursion_accounttype(A, G), tweets(E, H)', 'false,false': 'follows(A, I)', 'false,false,false': 'recursion_accounttype(A, J), tweets(A, K)'}, {'true,true': [4.155, 54, 26], 'true,false': [0.0, 0, 0], 'false,true,true': [1.29e-08, 9, 0], 'false,true,false,true': [0.0, 0, 1], 'false,true,false,false': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [1.225, 3, 3], 'false,false,false,false': [0.866, 3, 1]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D)', 'true,true': 'follows(A, D)', 'true,true,true': 'follows(D, C)', 'false': 'follows(A, A)', 'false,false': 'follows(A, E)', 'false,false,false': 'tweets(A, F)'}, {'true,true,true,true': [3.323, 29, 18], 'true,true,true,false': [1.193, 5, 2], 'true,true,false': [1.998, 13, 6], 'true,false': [0.0, 1, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [1.318, 16, 3], 'false,false,false,false': [1.06, 4, 2]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D)', 'false': 'follows(E, A)', 'false,false': 'follows(F, A)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [4.19, 55, 26], 'true,false': [0.0, 0, 0], 'false,true': [0.68, 3, 1], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [1.095, 2, 3], 'false,false,false,false': [0.894, 4, 1]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), follows(D, D)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F), tweets(A, G)'}, {'true,true': [0.0, 0, 0], 'true,false': [3.998, 43, 26], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.432, 9, 5]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'false': 'follows(D, A), follows(A, D)', 'false,false': 'follows(E, A)', 'false,false,true': 'recursion_accounttype(E, F), tweets(E, G)', 'false,false,false': 'follows(H, A)'}, {'true': [4.228, 59, 26], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.772, 8, 1], 'false,false,true,false': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.257, 3, 4]}]]
[{'': [nan, 0.2174513763418014], 'false': [0.21104570637119213, 0.23582766439909303], 'false,true': [0.21104570637119213, nan], 'false,true,true': [0.21104570637119213, nan]}, {'': [0.21963978265834644, 0.24660277857895693], 'false': [nan, 0.24660277857895693], 'false,false': [nan, 0.24660277857895693], 'false,false,false': [0.23734631994566596, 0.24716127012508765], 'true': [0.22159941365388713, 0.0]}, {'': [0.22669568813785115, 0.2428795208100529], 'false': [nan, 0.2428795208100531], 'false,false': [nan, 0.2428795208100529], 'false,false,false': [0.24053421059638408, 0.24799122693743877]}, {'': [0.22845968488647833, 0.20062154454017875], 'true': [0.2336376222547977, 0.00013829269730579463], 'false': [0.08759947875599637, 0.22745915388584495], 'false,false': [nan, 0.22745915388584495], 'false,false,false': [nan, 0.22745915388584495], 'false,true': [0.08759947875599637, nan], 'true,false': [nan, 0.00013829269730579463]}, {'': [0.2272194141170075, 0.20259780269112482], 'true': [0.238951705365766, 0.0008211720086979361], 'false': [0.11991692998885749, 0.24864693845027183], 'false,false': [nan, 0.24864693845027183], 'false,false,false': [nan, 0.24864693845027183], 'true,false': [0.0, 9.830704421850966e-05]}, {'': [0.21580740051087915, 0.16673150858417157], 'true': [0.21580740051087915, nan], 'false': [0.08782619921411024, 0.24235579760316256], 'false,false': [nan, 0.24235579760316256], 'false,false,false': [0.25000000000000006, 0.1875], 'false,true': [1.850371707708594e-17, 0.0], 'false,true,false': [0.0, nan]}, {'': [0.22451870132716856, 0.11711950067640232], 'true': [0.2268766256703598, 0.0], 'true,true': [0.23194440908676933, 0.21013375455409508], 'true,true,true': [0.2348957658149213, 0.20349147531554304], 'false': [nan, 0.11711950067640232], 'false,false': [nan, 0.11711950067640232], 'false,false,false': [0.09139060654304709, 0.187271354924181]}, {'': [0.2167502368849282, 0.20251752129460848], 'true': [0.2167502368849282, nan], 'false': [0.1155755739148253, 0.2367966150782868], 'false,false': [nan, 0.2367966150782868], 'false,false,false': [0.24, 0.16]}, {'': [0.23160800222338107, 0.1862636813212912], 'true': [nan, 0.23160800222338104], 'false': [nan, 0.1862636813212912], 'false,false': [nan, 0.1862636813212912]}, {'': [0.21028160703642296, 0.1516338503559021], 'false': [nan, 0.1516338503559021], 'false,false': [0.06618358044703991, 0.22568878348652402], 'false,false,false': [nan, 0.22568878348652402], 'false,false,true': [0.06618358044703991, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
1;;accounttype(A, B) :- follows(C, A).;true;true
1;true;follows(D, C).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(C, D).;true;true
4;;accounttype(A, B) :- recursion_accounttype(A, C), follows(A, D).;true;true
4;true;follows(D, E), follows(E, F).;true;true
4;true,false;follows(D, G).;true;true
5;;accounttype(A, B) :- follows(A, C).;true;true
5;false;follows(E, A).;true;true
5;false,true;follows(F, E), follows(F, A).;true;true
6;;accounttype(A, B) :- follows(A, C).;true;true
6;true;follows(C, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(C, E) )
%   | then if ( follows(C, D), recursion_accounttype(D, B) )
%   | | then return 0.6914822684328455;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return 0.6081489350995122;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else if ( follows(F, A), tweets(F, G) )
%   | then if ( follows(A, H), follows(F, H) )
%   | | then return -0.1418510649004877;  // std dev = 3.49e-08, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | else return 0.0581489350995122;  // std dev = 0.400, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( tweets(A, I) )
%   | | then if ( tweets(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( follows(A, K) )
%   | | | then return 0.058148935099512175;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | | else return 0.10814893509951219;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.7378074682646318;  // std dev = 0.131, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else if ( tweets(A, F) )
%   | | | then return -0.08419887542175543;  // std dev = 1.267, 39.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=2 */
%   | | | else return 0.007283934775299602;  // std dev = 0.912, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | else return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.7670719622367216;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.7457631362714745;  // std dev = 0.118, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.1372613030074186;  // std dev = 0.037, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else return 0.5694710224608749;  // std dev = 0.818, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.5798172469292855;  // std dev = 0.188, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   else if ( follows(D, A), tweets(A, E) )
%   | then if ( follows(D, F), follows(F, A) )
%   | | then return -0.12363528456840668;  // std dev = 0.055, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | else if ( follows(A, G), follows(D, G) )
%   | | | then return -0.11649486178367566;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return 0.11129048955271692;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.5673662706355996;  // std dev = 0.057, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.14150761314884786;  // std dev = 0.129, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( follows(A, J) )
%   | | | then return -0.05072533311992168;  // std dev = 1.163, 21.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=2 */
%   | | | else return 0.17354307326646823;  // std dev = 1.150, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.4370909419950298;  // std dev = 0.203, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else if ( follows(F, A), tweets(F, G) )
%   | | | then return -0.08730321464689175;  // std dev = 0.951, 38.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=1 */
%   | | | else return 0.12626390019281256;  // std dev = 1.277, 16.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=6 */
%   | else return -0.11878600405947724;  // std dev = 0.046, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else if ( tweets(A, H), follows(I, A) )
%   | then return -0.12924763966623706;  // std dev = 0.026, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( tweets(A, J) )
%   | | then return 0.19869903818886814;  // std dev = 0.692, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return 0.24728597958421572;  // std dev = 1.055, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(A, C), follows(A, D) )
%   then if ( follows(D, E), follows(E, F) )
%   | then if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.3348822699535749;  // std dev = 0.193, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else if ( follows(H, A), tweets(H, I) )
%   | | | then return -0.07638162446286628;  // std dev = 0.952, 36.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=1 */
%   | | | else return 0.06392569083648465;  // std dev = 1.324, 19.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=6 */
%   | else if ( follows(D, J) )
%   | | then return -0.10964659170856567;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.10762152486269094;  // std dev = 0.023, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else if ( follows(K, A), tweets(A, L) )
%   | then return -0.11842327767078246;  // std dev = 0.030, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( tweets(A, M) )
%   | | then return 0.4028304635242068;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.011580888245846863;  // std dev = 0.471, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, A), tweets(D, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then return 0.29759446506501297;  // std dev = 0.148, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.09453002020516657;  // std dev = 0.012, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | else if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.3366490638482227;  // std dev = 0.092, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.11604476606180746;  // std dev = 3.73e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0.16246867702686402;  // std dev = 0.371, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   else if ( follows(I, A) )
%   | then if ( follows(J, I), follows(J, A) )
%   | | then return -0.09998815978288934;  // std dev = 3.73e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.7900652826223329;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( tweets(A, K) )
%   | | then return 0.1614491160823659;  // std dev = 0.517, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return -0.16224051269747386;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.19973835397197218;  // std dev = 0.049, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.2603570939897346;  // std dev = 0.106, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(G, A), follows(A, G) )
%   | | | then return -0.05712018113072638;  // std dev = 0.900, 34.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=1 */
%   | | | else return 0.05937374247267699;  // std dev = 1.174, 17.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=6 */
%   | else return -0.09358537072053533;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else if ( tweets(A, H), follows(I, A) )
%   | then return -0.1155239114489081;  // std dev = 0.132, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( tweets(A, J) )
%   | | then return 0.277285851584955;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.16828498201904815;  // std dev = 1.003, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.1697391172829659;  // std dev = 0.011, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return 0.21401290963625952;  // std dev = 0.093, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(E, A), tweets(E, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then return 0.4195740537252521;  // std dev = 0.742, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(A, H) )
%   | | | then return -0.08694437088155313;  // std dev = 0.077, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
%   | | | else return -0.19554586335361338;  // std dev = 0.379, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( tweets(A, I), follows(A, J) )
%   | | then if ( tweets(K, I), recursion_accounttype(K, B) )
%   | | | then return 0.2773808718312375;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.11035683111621328;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( follows(A, L), follows(L, M) )
%   | | | then return 0.23176655879589952;  // std dev = 0.846, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.02387159371297081;  // std dev = 0.987, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, C) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then return 0.16135885065177047;  // std dev = 5.27e-09, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.14005673825930498;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.2938113355852296;  // std dev = 0.377, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, E), recursion_accounttype(E, B) )
%   | then return 0.18059790091554145;  // std dev = 0.083, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.29205948485063077;  // std dev = 0.513, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.09503251079304716;  // std dev = 0.437, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
%   | | else if ( follows(H, A) )
%   | | | then return -0.05166571394758723;  // std dev = 0.628, 9.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   | | | else return -0.15976957463524658;  // std dev = 1.224, 18.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, C) )
%   | then return 0.13043598577904075;  // std dev = 0.008, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return 0.24859266182165948;  // std dev = 0.344, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( tweets(A, E), follows(A, F) )
%   | then if ( follows(G, A), follows(G, F) )
%   | | then return -0.056445383858866785;  // std dev = 0.053, 28.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=1 */
%   | | else if ( tweets(H, E), recursion_accounttype(H, B) )
%   | | | then return 0.24087617699435587;  // std dev = 0.517, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.09015815343188797;  // std dev = 0.018, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else if ( follows(I, A), tweets(I, J) )
%   | | then if ( follows(I, K), follows(K, A) )
%   | | | then return -0.06975383387701632;  // std dev = 0.027, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return -0.08679707472179073;  // std dev = 0.701, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | else if ( tweets(A, L) )
%   | | | then return -0.1347935114326;  // std dev = 0.710, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | | else return -0.07102634579165128;  // std dev = 1.185, 15.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=3 */


Results
   AUC ROC   = 0.989693
   AUC PR    = 0.314487
   CLL	      = -0.100571
   Precision = 0.307143 at threshold = 0.5
   Recall    = 0.68254
   F1        = 0.423645


Total learning time: 8.752 seconds
Total inference time: 167.007 seconds
AUC ROC: 0.989693


Results scoring model
   AUC ROC   = 0.992922
   AUC PR    = 0.408038
   CLL	      = -0.126666
   Precision = 0.375 at threshold = 0.5
   Recall    = 0.870968
   F1        = 0.524272


Total scoring time: 35.742 seconds
Refined model CLL: -0.126666


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.989693
   AUC PR    = 0.314487
   CLL	      = -0.100571
   Precision = 0.307143 at threshold = 0.5
   Recall    = 0.68254
   F1        = 0.423645


Total learning time: 46.842 seconds
Total inference time: 167.007 seconds
AUC ROC: 0.989693
Total revision time: 46.842
Best scored revision CLL: -0.126666


Dataset: 7_yeast_twitter, Fold: 1, Type: Transfer (trRDN-B), Time: 00:03:37
{'AUC ROC': 0.989693, 'AUC PR': 0.314487, 'CLL': -0.100571, 'Precision': [0.307143, 0.5], 'Recall': 0.68254, 'F1': 0.423645, 'Learning time': 46.842, 'Inference time': 167.007, 'parameter_0.2': {'AUC ROC': 0.5, 'AUC PR': 0.007752, 'CLL': -0.355842, 'Precision': [nan, 0.5], 'Recall': 0.0, 'F1': nan, 'Learning time': 1.015, 'Inference time': 2.781}}


Amount of data: 0.4
******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(A, C), interaction(C, C).;true;true
0;true;interaction(C, A), phenotype(C, D).;false;true
0;true,false;interaction(E, A), enzyme(A, F).;true;true
0;true,false,true;complex(A, G), complex(C, H).;false;false
0;true,false,false;recursion_proteinclass(C, B).;false;false
0;false;location(A, I), phenotype(A, J).;true;false
0;false,true;location(K, I), recursion_proteinclass(K, B).;true;false
0;false,true,true;phenotype(K, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), complex(A, D).;true;true
1;true;interaction(E, C), recursion_proteinclass(E, B).;false;false
1;false;interaction(F, A), phenotype(A, G).;true;true
1;false,true;recursion_proteinclass(F, B).;false;true
1;false,true,false;interaction(H, F), recursion_proteinclass(H, B).;false;false
1;false,false;interaction(I, A), phenotype(I, J).;true;true
1;false,false,true;interaction(A, K), recursion_proteinclass(K, B).;false;false
1;false,false,false;interaction(A, L), phenotype(L, M).;false;false
2;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
2;true;complex(C, D).;false;false
2;false;interaction(A, E), interaction(E, A).;true;true
2;false,true;interaction(A, A).;false;true
2;false,true,false;enzyme(E, F), enzyme(A, F).;false;false
2;false,false;interaction(G, A), enzyme(G, H).;true;true
2;false,false,true;complex(G, I), complex(A, I).;false;false
2;false,false,false;interaction(A, J), recursion_proteinclass(J, B).;false;false
3;;proteinclass(A, B) :- complex(A, C), interaction(A, D).;true;true
3;true;interaction(D, E), recursion_proteinclass(E, B).;false;true
3;true,false;interaction(D, A).;false;false
3;false;interaction(F, A), enzyme(F, G).;true;true
3;false,true;interaction(H, F), recursion_proteinclass(H, B).;false;true
3;false,true,false;interaction(A, F).;false;false
3;false,false;interaction(A, A), location(A, I).;false;true
3;false,false,false;interaction(A, J), enzyme(J, K).;false;false
4;;proteinclass(A, B) :- phenotype(A, C), interaction(A, D).;true;true
4;true;interaction(D, E), interaction(E, F).;false;true
4;true,false;recursion_proteinclass(D, B).;false;true
4;true,false,false;enzyme(A, G), interaction(D, H).;false;false
4;false;interaction(I, A), recursion_proteinclass(I, B).;false;true
4;false,false;interaction(J, A), interaction(K, J).;true;true
4;false,false,true;recursion_proteinclass(K, B), location(J, L).;false;false
4;false,false,false;interaction(A, M), recursion_proteinclass(M, B).;false;false
5;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
5;true;enzyme(A, D), phenotype(C, E).;false;false
5;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
5;false,true;interaction(G, F), interaction(G, A).;false;true
5;false,true,false;phenotype(A, H), location(F, I).;false;false
5;false,false;interaction(A, J), complex(J, K).;true;true
5;false,false,true;interaction(J, L), recursion_proteinclass(L, B).;false;false
5;false,false,false;phenotype(A, M), location(A, N).;false;false
6;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
6;true;interaction(C, D), complex(D, E).;true;false
6;true,true;interaction(A, D).;true;false
6;true,true,true;interaction(D, C).;false;false
6;false;interaction(A, A).;false;true
6;false,false;interaction(A, F), enzyme(F, G).;true;true
6;false,false,true;phenotype(F, H), complex(F, I).;false;false
6;false,false,false;location(A, J).;false;false
7;;proteinclass(A, B) :- interaction(A, C), complex(C, D).;true;true
7;true;recursion_proteinclass(C, B).;false;true
7;true,false;interaction(C, E), recursion_proteinclass(E, B).;false;true
7;true,false,false;interaction(C, A).;false;false
7;false;interaction(F, A), recursion_proteinclass(F, B).;false;true
7;false,false;interaction(G, A), enzyme(G, H).;true;true
7;false,false,true;interaction(A, I), interaction(G, I).;false;false
7;false,false,false;location(A, J), enzyme(A, K).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;interaction(C, D), interaction(D, D).;false;false
8;false;interaction(A, E), enzyme(A, F).;true;true
8;false,true;interaction(E, G), recursion_proteinclass(G, B).;false;true
8;false,true,false;interaction(E, A).;false;false
8;false,false;interaction(A, H), location(A, I).;true;true
8;false,false,true;interaction(H, J), recursion_proteinclass(J, B).;false;false
8;false,false,false;enzyme(A, K).;false;false
9;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;false;true
9;false;interaction(D, A), interaction(A, D).;true;true
9;false,true;phenotype(A, E), phenotype(D, E).;true;true
9;false,true,true;complex(D, F).;false;false
9;false,true,false;interaction(D, D).;false;false
9;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
9;false,false,true;phenotype(G, H), location(G, I).;false;false
9;false,false,false;complex(A, J), interaction(K, A).;false;false


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(C, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), recursion_accounttype(A, E) )
%   | then if ( tweets(F, D) )
%   | | then if ( recursion_accounttype(F, E) )
%   | | | then return 0.19905802600860323;  // std dev = 5.446, 132.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=45 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.1850720120225893;  // std dev = 3.383, 52.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=17 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C) )
%   | then return 0.12567547920746724;  // std dev = 5.251, 133.000 (wgt'ed) examples reached here.  /* #neg=94 #pos=39 */
%   | else return -0.1678500021810878;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else if ( follows(E, A), recursion_accounttype(A, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, I), recursion_accounttype(I, J) )
%   | | | then return 0.1727722222137566;  // std dev = 3.350, 50.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=17 */
%   | | | else return 0.20848680804221048;  // std dev = 1.935, 16.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=6 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then return 0.13685358014203095;  // std dev = 0.467, 121.000 (wgt'ed) examples reached here.  /* #neg=82 #pos=39 */
%   else if ( follows(A, D), follows(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, F) )
%   | | | then return 0.21225714283498412;  // std dev = 3.180, 42.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=17 */
%   | | | else return 0.2638885903913781;  // std dev = 1.797, 13.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D) )
%   | then return 0.10022766790781873;  // std dev = 5.792, 157.000 (wgt'ed) examples reached here.  /* #neg=108 #pos=49 */
%   | else if ( follows(C, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.10938636757133507;  // std dev = 1.149, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   else if ( follows(E, A) )
%   | then if ( follows(F, E) )
%   | | then return 0.14986297944878305;  // std dev = 1.793, 14.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=5 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, A), tweets(A, G) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.21909251523967924;  // std dev = 1.795, 13.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(A, C), follows(A, D) )
%   then if ( follows(D, E), follows(E, F) )
%   | then return 0.12798774693017323;  // std dev = 5.601, 137.000 (wgt'ed) examples reached here.  /* #neg=88 #pos=49 */
%   | else if ( follows(D, G) )
%   | | then return -0.2468125596179786;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return 0.047439108096633535;  // std dev = 1.180, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   else if ( follows(H, A) )
%   | then return -0.05441252475608854;  // std dev = 2.027, 28.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=5 */
%   | else if ( follows(I, A), follows(J, I) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, K) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.14289098955846535;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( recursion_accounttype(C, D) )
%   | then return 0.04707884676296092;  // std dev = 5.964, 170.000 (wgt'ed) examples reached here.  /* #neg=119 #pos=51 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(E, A) )
%   | then if ( follows(F, E), follows(F, A) )
%   | | then return 0.011515787900439809;  // std dev = 1.749, 17.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=4 */
%   | | else if ( recursion_accounttype(A, G), tweets(E, H) )
%   | | | then return -0.0224680846855849;  // std dev = 0.896, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, I) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( recursion_accounttype(A, J), tweets(A, K) )
%   | | | then return 0.43278128024868234;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.1858027517681368;  // std dev = 1.225, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D) )
%   | then if ( follows(A, D) )
%   | | then if ( follows(D, C) )
%   | | | then return 0.14726823677392786;  // std dev = 4.419, 81.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=33 */
%   | | | else return 0.029822201011927913;  // std dev = 2.073, 21.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=6 */
%   | | else return 0.10215337502935827;  // std dev = 2.475, 27.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=10 */
%   | else return 0.024007178177039696;  // std dev = 1.189, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return 0.052722850763607276;  // std dev = 2.107, 21.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=7 */
%   | | | else return -0.050128780696988784;  // std dev = 1.734, 14.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=4 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D) )
%   | then return 0.07687997731004197;  // std dev = 5.573, 135.000 (wgt'ed) examples reached here.  /* #neg=86 #pos=49 */
%   | else if ( follows(C, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.022704920730335067;  // std dev = 1.184, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   else if ( follows(E, A) )
%   | then return 0.06431902440734334;  // std dev = 1.878, 17.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=5 */
%   | else if ( follows(F, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G) )
%   | | | then return 0.16981072052025384;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return -0.04414083207950051;  // std dev = 1.449, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), follows(D, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.03951454914038963;  // std dev = 5.784, 150.000 (wgt'ed) examples reached here.  /* #neg=99 #pos=51 */
%   else if ( follows(A, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F), tweets(A, G) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.15089936899272127;  // std dev = 0.465, 25.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=11 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then return 0.040932997833155946;  // std dev = 5.739, 146.000 (wgt'ed) examples reached here.  /* #neg=95 #pos=51 */
%   else if ( follows(D, A), follows(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A) )
%   | | then if ( recursion_accounttype(E, F), tweets(E, G) )
%   | | | then return 0.005959116901420782;  // std dev = 1.905, 18.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=5 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09047810380669936;  // std dev = 2.004, 17.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=6 */


Results
   AUC ROC   = 0.5
   AUC PR    = 0.007752
   CLL	      = -0.380054
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.09 seconds
Total inference time: 2.719 seconds
AUC ROC: 0.5


Results scoring model
   AUC ROC   = 0.564555
   AUC PR    = 0.007973
   CLL	      = -0.387047
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total scoring time: 1.94 seconds
Parameter learned model CLL: -0.387047


Structure after Parameter Learning
[['accounttype(A, B)', {'': 'follows(A, C), follows(C, C)', 'false': 'tweets(A, D), recursion_accounttype(A, E)', 'false,true': 'tweets(F, D)', 'false,true,true': 'recursion_accounttype(F, E)'}, {'true': [0.0, 0, 0], 'false,true,true,true': [5.446, 87, 45], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 0, 0], 'false,false': [3.383, 35, 17]}], ['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C)', 'false': 'follows(E, A), recursion_accounttype(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, H)', 'false,false,false': 'follows(A, I), recursion_accounttype(I, J)'}, {'true,true': [5.251, 94, 39], 'true,false': [0.0, 4, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [3.35, 33, 17], 'false,false,false,false': [1.935, 10, 6]}], ['accounttype(A, B)', {'': 'follows(C, A)', 'false': 'follows(A, D), follows(D, A)', 'false,false': 'follows(E, A)', 'false,false,false': 'follows(A, F)'}, {'true': [0.467, 82, 39], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [3.18, 25, 17], 'false,false,false,false': [1.797, 7, 6]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D)', 'true,false': 'follows(C, A)', 'false': 'follows(E, A)', 'false,true': 'follows(F, E)', 'false,false': 'follows(A, A), tweets(A, G)', 'false,false,false': 'follows(A, H)'}, {'true,true': [5.792, 108, 49], 'true,false,true': [0.0, 0, 0], 'true,false,false': [1.149, 4, 2], 'false,true,true': [1.793, 9, 5], 'false,true,false': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.795, 7, 6]}], ['accounttype(A, B)', {'': 'recursion_accounttype(A, C), follows(A, D)', 'true': 'follows(D, E), follows(E, F)', 'true,false': 'follows(D, G)', 'false': 'follows(H, A)', 'false,false': 'follows(I, A), follows(J, I)', 'false,false,false': 'follows(A, K)'}, {'true,true': [5.601, 88, 49], 'true,false,true': [0.0, 2, 0], 'true,false,false': [1.18, 5, 2], 'false,true': [2.027, 23, 5], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.852, 8, 6]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'recursion_accounttype(C, D)', 'false': 'follows(E, A)', 'false,true': 'follows(F, E), follows(F, A)', 'false,true,false': 'recursion_accounttype(A, G), tweets(E, H)', 'false,false': 'follows(A, I)', 'false,false,false': 'recursion_accounttype(A, J), tweets(A, K)'}, {'true,true': [5.964, 119, 51], 'true,false': [0.0, 0, 0], 'false,true,true': [1.749, 13, 4], 'false,true,false,true': [0.896, 4, 1], 'false,true,false,false': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.866, 1, 3], 'false,false,false,false': [1.225, 3, 3]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D)', 'true,true': 'follows(A, D)', 'true,true,true': 'follows(D, C)', 'false': 'follows(A, A)', 'false,false': 'follows(A, E)', 'false,false,false': 'tweets(A, F)'}, {'true,true,true,true': [4.419, 48, 33], 'true,true,true,false': [2.073, 15, 6], 'true,true,false': [2.475, 17, 10], 'true,false': [1.189, 5, 2], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [2.107, 14, 7], 'false,false,false,false': [1.734, 10, 4]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D)', 'true,false': 'follows(C, A)', 'false': 'follows(E, A)', 'false,false': 'follows(F, A)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [5.573, 86, 49], 'true,false,true': [0.0, 0, 0], 'true,false,false': [1.184, 5, 2], 'false,true': [1.878, 12, 5], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [1.095, 2, 3], 'false,false,false,false': [1.449, 7, 3]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), follows(D, D)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F), tweets(A, G)'}, {'true,true': [0.0, 0, 0], 'true,false': [5.784, 99, 51], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.465, 14, 11]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'false': 'follows(D, A), follows(A, D)', 'false,false': 'follows(E, A)', 'false,false,true': 'recursion_accounttype(E, F), tweets(E, G)', 'false,false,false': 'follows(H, A)'}, {'true': [5.739, 95, 51], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.905, 13, 5], 'false,false,true,false': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.004, 11, 6]}]]
[{'': [nan, 0.22341682419659767], 'false': [0.22469008264462906, 0.22004437869822432], 'false,true': [0.22469008264462906, nan], 'false,true,true': [0.22469008264462906, nan]}, {'': [0.20369959723287487, 0.22701996806959923], 'false': [nan, 0.22701996806959923], 'false,false': [nan, 0.22701996806959923], 'false,false,false': [0.22444437842943418, 0.23410237384594954], 'true': [0.20731036198279218, 0.0]}, {'': [0.21828016780873563, 0.2430807745870346], 'false': [nan, 0.2430807745870347], 'false,false': [nan, 0.2430807745870346], 'false,false,false': [0.24083971470396826, 0.2482854152138429]}, {'': [0.21393269493472303, 0.2395832049667381], 'false': [0.2295693266451416, 0.24788226307404213], 'false,false': [nan, 0.24788226307404213], 'false,false,false': [nan, 0.24788226307404213], 'false,true': [0.2295693266451416, nan], 'true': [0.2136994492297882, 0.21995516344052682], 'true,false': [nan, 0.21995516344052682]}, {'': [0.22656393818205364, 0.1880654797863244], 'true': [0.22897977524817723, 0.16980454174872073], 'false': [0.146671996287935, 0.2448999956091876], 'false,false': [nan, 0.2448999956091876], 'false,false,false': [nan, 0.2448999956091876], 'true,false': [0.0, 0.19907922644931353]}, {'': [0.20923450510225733, 0.2125807483758202], 'false': [0.17564071583879337, 0.23963961444729973], 'false,false': [nan, 0.23963961444729973], 'false,false,false': [0.1875, 0.25], 'true': [0.20923450510225733, nan], 'false,true': [0.17986410016594578, 0.16038878362051937], 'false,true,false': [0.16038878362051937, nan]}, {'': [0.23283838728294157, 0.2153618635736385], 'true': [0.23404317203667838, 0.20212955563006738], 'true,true': [0.2358529064601897, 0.22685986190571084], 'true,true,true': [0.24112861274445968, 0.20455003525126797], 'false': [nan, 0.2153618635736385], 'false,false': [nan, 0.2153618635736385], 'false,false,false': [0.21147018223232084, 0.21485231072915162]}, {'': [0.22869769928928288, 0.21849066955990937], 'true': [0.23002957684155378, 0.20022123257811622], 'false': [0.20753668764881217, 0.2301722815244101], 'false,false': [nan, 0.2301722815244101], 'false,false,false': [0.24, 0.21000000000000002], 'true,false': [nan, 0.20022123257811622]}, {'': [0.22301859142597005, 0.2164920540765051], 'true': [nan, 0.2230185914259701], 'false': [nan, 0.2164920540765051], 'false,false': [nan, 0.2164920540765051]}, {'': [0.225603833434946, 0.2207232260759396], 'false': [nan, 0.2207232260759395], 'false,false': [0.20151343259736368, 0.2362800795295585], 'false,false,false': [nan, 0.2362800795295585], 'false,false,true': [0.20151343259736368, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
1;;accounttype(A, B) :- follows(C, A).;true;true
1;true;follows(D, C).;true;true
4;;accounttype(A, B) :- recursion_accounttype(A, C), follows(A, D).;true;true
4;true;follows(D, E), follows(E, F).;true;true
4;true,false;follows(D, G).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.8581489350995116;  // std dev = 2.23e-07, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   else if ( follows(A, D), follows(E, A) )
%   | then if ( follows(D, F), recursion_accounttype(F, B) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.14185106490048766;  // std dev = 6.99e-08, 73.000 (wgt'ed) examples reached here.  /* #neg=73 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, H) )
%   | | | then return 0.16767274462332188;  // std dev = 2.996, 42.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=13 */
%   | | | else return 0.10814893509951237;  // std dev = 2.291, 28.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=7 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.7194734122109547;  // std dev = 0.000, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | else if ( follows(A, F), tweets(A, G) )
%   | | | then return -0.05132902004248386;  // std dev = 1.805, 57.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=5 */
%   | | | else return -0.11299959080079958;  // std dev = 0.976, 32.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=1 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, H), recursion_accounttype(H, B) )
%   | then return 0.7194734122109545;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.8364882000590742;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.16351179994092616;  // std dev = 1.05e-08, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | else if ( follows(A, K) )
%   | | | then return 0.33648820005907387;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.19740861430634385;  // std dev = 1.970, 17.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=6 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.5553664367462845;  // std dev = 5.96e-08, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), follows(E, A) )
%   | | then return -0.12283724140399924;  // std dev = 0.058, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   | | else if ( follows(F, D), recursion_accounttype(F, B) )
%   | | | then return 0.7512193885679016;  // std dev = 0.118, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.12398810047772894;  // std dev = 0.154, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.6070567085733307;  // std dev = 1.120, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return -0.15271658642453673;  // std dev = 0.134, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.41674412403648287;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.24531555260791146;  // std dev = 1.309, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.42464411441898503;  // std dev = 0.199, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   else if ( follows(A, D), follows(E, A) )
%   | then if ( follows(F, E), recursion_accounttype(F, B) )
%   | | then return 0.5031234988718375;  // std dev = 0.156, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.1064999242164593;  // std dev = 0.024, 84.000 (wgt'ed) examples reached here.  /* #neg=84 */
%   | else if ( tweets(A, G), follows(H, A) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.41751358415830997;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.12697482888638453;  // std dev = 0.000191, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.08262709239943243;  // std dev = 2.104, 42.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=13 */
%   | | | else return 0.13728876054241113;  // std dev = 2.072, 19.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=7 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(A, C), follows(A, D) )
%   then if ( follows(D, E), follows(E, F) )
%   | then if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0.2847066635994473;  // std dev = 0.179, 30.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */
%   | | else if ( follows(H, A) )
%   | | | then return -0.05791284402440832;  // std dev = 1.163, 69.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=5 */
%   | | | else return 0.08593346020251043;  // std dev = 2.112, 36.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=15 */
%   | else if ( follows(D, I) )
%   | | then return -0.13401352658082838;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0.09777434370577431;  // std dev = 0.956, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   else if ( follows(J, A), recursion_accounttype(J, B) )
%   | then return 0.32071184716014967;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(K, A), tweets(A, L) )
%   | | then return -0.11356921723863639;  // std dev = 0.000154, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else if ( tweets(A, M) )
%   | | | then return 0.46918238041856686;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return -0.011495231426452908;  // std dev = 1.709, 19.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=4 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.27505392504563564;  // std dev = 0.053, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | else return 0.16787576727929848;  // std dev = 0.546, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(A, E), follows(F, A) )
%   | then if ( follows(E, F), follows(E, A) )
%   | | then return -0.0833130595335919;  // std dev = 0.054, 38.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=1 */
%   | | else if ( follows(E, G), recursion_accounttype(G, B) )
%   | | | then return 0.3984861385500458;  // std dev = 0.176, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.09331559583254595;  // std dev = 0.016, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.3876381521663428;  // std dev = 1.350, 15.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=13 */
%   | | | else return -0.15295508897356175;  // std dev = 0.147, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | else if ( follows(J, A), tweets(A, K) )
%   | | | then return 0.027473691873826585;  // std dev = 0.571, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | | | else return 0.19554823567895058;  // std dev = 1.809, 15.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=7 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(D, C), follows(C, A) )
%   | | then if ( follows(A, D) )
%   | | | then return 0.2112522761679998;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.12208105716533353;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.21125227616799974;  // std dev = 1.49e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return 0.30492570527826024;  // std dev = 0.167, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(E, A), tweets(E, F) )
%   | then return -0.053819418896384606;  // std dev = 0.133, 96.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=9 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.3900320014459034;  // std dev = 0.220, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.12349778157294615;  // std dev = 0.053, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.16783066514062694;  // std dev = 0.725, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.05737005030073473;  // std dev = 1.871, 15.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=6 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(D, C) )
%   | | then return 0.1865177970969093;  // std dev = 0.070, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( follows(C, E), follows(E, A) )
%   | | | then return 0.05319191318929839;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.1781919131892984;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.24554247655422157;  // std dev = 0.148, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(A, F), follows(G, A) )
%   | then return -0.05719194205205653;  // std dev = 0.095, 81.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=5 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.36177100660506856;  // std dev = 0.426, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.15667914196553742;  // std dev = 0.707, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.025554651867623956;  // std dev = 0.902, 16.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=5 */
%   | | | else return 0.39112301832026924;  // std dev = 1.076, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.16877741179230865;  // std dev = 0.176, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   else if ( follows(D, A), tweets(D, E) )
%   | then if ( follows(A, F), follows(D, F) )
%   | | then if ( follows(G, D), tweets(F, E) )
%   | | | then return -0.06385420257043758;  // std dev = 0.573, 64.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=2 */
%   | | | else return 0.034500510278158314;  // std dev = 0.399, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else if ( tweets(H, E), recursion_accounttype(H, B) )
%   | | | then return 0.1860569075107686;  // std dev = 0.646, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | | else return -0.10193632417554613;  // std dev = 0.220, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.2594505108465438;  // std dev = 0.168, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.10433042105012312;  // std dev = 0.058, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | else if ( follows(A, K) )
%   | | | then return 0.21815102498538996;  // std dev = 0.548, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.039889272681684046;  // std dev = 1.683, 13.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.14688658627102041;  // std dev = 0.159, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | else return 0.3500682657310585;  // std dev = 0.074, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return -0.07239690787723732;  // std dev = 0.017, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   else if ( follows(F, A), tweets(F, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.24561251090105846;  // std dev = 0.343, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.10219987823004281;  // std dev = 0.049, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.16080465603468522;  // std dev = 1.093, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | | else return -0.11620925000907273;  // std dev = 0.294, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.23646747045350214;  // std dev = 0.755, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.10811671881164377;  // std dev = 1.225, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */


Results
   AUC ROC   = 0.993464
   AUC PR    = 0.40154
   CLL	      = -0.111528
   Precision = 0.355491 at threshold = 0.5
   Recall    = 0.97619
   F1        = 0.521186


Total learning time: 14.559 seconds
Total inference time: 77.351 seconds
AUC ROC: 0.993464


Results scoring model
   AUC ROC   = 0.992902
   AUC PR    = 0.413173
   CLL	      = -0.133704
   Precision = 0.371069 at threshold = 0.5
   Recall    = 0.951613
   F1        = 0.533937


Total scoring time: 32.54 seconds
Refined model CLL: -0.133704


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.993464
   AUC PR    = 0.40154
   CLL	      = -0.111528
   Precision = 0.355491 at threshold = 0.5
   Recall    = 0.97619
   F1        = 0.521186


Total learning time: 50.129 seconds
Total inference time: 77.351 seconds
AUC ROC: 0.993464
Total revision time: 50.129
Best scored revision CLL: -0.133704


Dataset: 7_yeast_twitter, Fold: 1, Type: Transfer (trRDN-B), Time: 00:05:48
{'AUC ROC': 0.993464, 'AUC PR': 0.40154, 'CLL': -0.111528, 'Precision': [0.355491, 0.5], 'Recall': 0.97619, 'F1': 0.521186, 'Learning time': 50.129, 'Inference time': 77.351, 'parameter_0.4': {'AUC ROC': 0.5, 'AUC PR': 0.007752, 'CLL': -0.380054, 'Precision': [nan, 0.5], 'Recall': 0.0, 'F1': nan, 'Learning time': 1.09, 'Inference time': 2.719}}


Amount of data: 0.6
******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(A, C), interaction(C, C).;true;true
0;true;interaction(C, A), phenotype(C, D).;false;true
0;true,false;interaction(E, A), enzyme(A, F).;true;true
0;true,false,true;complex(A, G), complex(C, H).;false;false
0;true,false,false;recursion_proteinclass(C, B).;false;false
0;false;location(A, I), phenotype(A, J).;true;false
0;false,true;location(K, I), recursion_proteinclass(K, B).;true;false
0;false,true,true;phenotype(K, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), complex(A, D).;true;true
1;true;interaction(E, C), recursion_proteinclass(E, B).;false;false
1;false;interaction(F, A), phenotype(A, G).;true;true
1;false,true;recursion_proteinclass(F, B).;false;true
1;false,true,false;interaction(H, F), recursion_proteinclass(H, B).;false;false
1;false,false;interaction(I, A), phenotype(I, J).;true;true
1;false,false,true;interaction(A, K), recursion_proteinclass(K, B).;false;false
1;false,false,false;interaction(A, L), phenotype(L, M).;false;false
2;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
2;true;complex(C, D).;false;false
2;false;interaction(A, E), interaction(E, A).;true;true
2;false,true;interaction(A, A).;false;true
2;false,true,false;enzyme(E, F), enzyme(A, F).;false;false
2;false,false;interaction(G, A), enzyme(G, H).;true;true
2;false,false,true;complex(G, I), complex(A, I).;false;false
2;false,false,false;interaction(A, J), recursion_proteinclass(J, B).;false;false
3;;proteinclass(A, B) :- complex(A, C), interaction(A, D).;true;true
3;true;interaction(D, E), recursion_proteinclass(E, B).;false;true
3;true,false;interaction(D, A).;false;false
3;false;interaction(F, A), enzyme(F, G).;true;true
3;false,true;interaction(H, F), recursion_proteinclass(H, B).;false;true
3;false,true,false;interaction(A, F).;false;false
3;false,false;interaction(A, A), location(A, I).;false;true
3;false,false,false;interaction(A, J), enzyme(J, K).;false;false
4;;proteinclass(A, B) :- phenotype(A, C), interaction(A, D).;true;true
4;true;interaction(D, E), interaction(E, F).;false;true
4;true,false;recursion_proteinclass(D, B).;false;true
4;true,false,false;enzyme(A, G), interaction(D, H).;false;false
4;false;interaction(I, A), recursion_proteinclass(I, B).;false;true
4;false,false;interaction(J, A), interaction(K, J).;true;true
4;false,false,true;recursion_proteinclass(K, B), location(J, L).;false;false
4;false,false,false;interaction(A, M), recursion_proteinclass(M, B).;false;false
5;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
5;true;enzyme(A, D), phenotype(C, E).;false;false
5;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
5;false,true;interaction(G, F), interaction(G, A).;false;true
5;false,true,false;phenotype(A, H), location(F, I).;false;false
5;false,false;interaction(A, J), complex(J, K).;true;true
5;false,false,true;interaction(J, L), recursion_proteinclass(L, B).;false;false
5;false,false,false;phenotype(A, M), location(A, N).;false;false
6;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
6;true;interaction(C, D), complex(D, E).;true;false
6;true,true;interaction(A, D).;true;false
6;true,true,true;interaction(D, C).;false;false
6;false;interaction(A, A).;false;true
6;false,false;interaction(A, F), enzyme(F, G).;true;true
6;false,false,true;phenotype(F, H), complex(F, I).;false;false
6;false,false,false;location(A, J).;false;false
7;;proteinclass(A, B) :- interaction(A, C), complex(C, D).;true;true
7;true;recursion_proteinclass(C, B).;false;true
7;true,false;interaction(C, E), recursion_proteinclass(E, B).;false;true
7;true,false,false;interaction(C, A).;false;false
7;false;interaction(F, A), recursion_proteinclass(F, B).;false;true
7;false,false;interaction(G, A), enzyme(G, H).;true;true
7;false,false,true;interaction(A, I), interaction(G, I).;false;false
7;false,false,false;location(A, J), enzyme(A, K).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;interaction(C, D), interaction(D, D).;false;false
8;false;interaction(A, E), enzyme(A, F).;true;true
8;false,true;interaction(E, G), recursion_proteinclass(G, B).;false;true
8;false,true,false;interaction(E, A).;false;false
8;false,false;interaction(A, H), location(A, I).;true;true
8;false,false,true;interaction(H, J), recursion_proteinclass(J, B).;false;false
8;false,false,false;enzyme(A, K).;false;false
9;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;false;true
9;false;interaction(D, A), interaction(A, D).;true;true
9;false,true;phenotype(A, E), phenotype(D, E).;true;true
9;false,true,true;complex(D, F).;false;false
9;false,true,false;interaction(D, D).;false;false
9;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
9;false,false,true;phenotype(G, H), location(G, I).;false;false
9;false,false,false;complex(A, J), interaction(K, A).;false;false


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(C, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), recursion_accounttype(A, E) )
%   | then if ( tweets(F, D) )
%   | | then if ( recursion_accounttype(F, E) )
%   | | | then return 0.21793729488787345;  // std dev = 6.598, 189.000 (wgt'ed) examples reached here.  /* #neg=121 #pos=68 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.22046777567922138;  // std dev = 3.993, 69.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=25 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C) )
%   | then return 0.1919270497369633;  // std dev = 6.081, 160.000 (wgt'ed) examples reached here.  /* #neg=102 #pos=58 */
%   | else return 0.22949644898148075;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   else if ( follows(E, A), recursion_accounttype(A, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, I), recursion_accounttype(I, J) )
%   | | | then return 0.18460879018185092;  // std dev = 4.172, 76.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=27 */
%   | | | else return 0.16261088864035173;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then return 0.1472617694409519;  // std dev = 0.476, 173.000 (wgt'ed) examples reached here.  /* #neg=113 #pos=60 */
%   else if ( follows(A, D), follows(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, F) )
%   | | | then return 0.18190252037009738;  // std dev = 4.090, 71.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=27 */
%   | | | else return 0.18002907350333552;  // std dev = 1.937, 16.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=6 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D) )
%   | then return 0.09040192867607681;  // std dev = 7.064, 231.000 (wgt'ed) examples reached here.  /* #neg=158 #pos=73 */
%   | else if ( follows(C, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.2720132051563464;  // std dev = 1.585, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
%   else if ( follows(E, A) )
%   | then if ( follows(F, E) )
%   | | then return 0.16731080609446194;  // std dev = 2.340, 23.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=9 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, A), tweets(A, G) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.047950292503122334;  // std dev = 2.089, 22.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=6 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(A, C), follows(A, D) )
%   then if ( follows(D, E), follows(E, F) )
%   | then return 0.09808378605317389;  // std dev = 6.891, 212.000 (wgt'ed) examples reached here.  /* #neg=140 #pos=72 */
%   | else if ( follows(D, G) )
%   | | then return 0.25745239004668097;  // std dev = 0.704, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | else return 0.1395904039733092;  // std dev = 1.705, 12.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=5 */
%   else if ( follows(H, A) )
%   | then return 0.09171491656769917;  // std dev = 2.426, 26.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=9 */
%   | else if ( follows(I, A), follows(J, I) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, K) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.3122531599113673;  // std dev = 1.651, 11.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=6 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( recursion_accounttype(C, D) )
%   | then return 0.05143127338076025;  // std dev = 7.307, 248.000 (wgt'ed) examples reached here.  /* #neg=170 #pos=78 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(E, A) )
%   | then if ( follows(F, E), follows(F, A) )
%   | | then return -0.0413789498261609;  // std dev = 2.148, 26.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=6 */
%   | | else if ( recursion_accounttype(A, G), tweets(E, H) )
%   | | | then return 0.3275702004049845;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, I) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( recursion_accounttype(A, J), tweets(A, K) )
%   | | | then return 0.03999374612988321;  // std dev = 1.414, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | | | else return 0.0811355915285932;  // std dev = 1.369, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D) )
%   | then if ( follows(A, D) )
%   | | then if ( follows(D, C) )
%   | | | then return 0.05926688232293115;  // std dev = 5.495, 137.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=45 */
%   | | | else return 0.023887733152439056;  // std dev = 2.658, 34.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=10 */
%   | | else return 0.08527425677163251;  // std dev = 3.392, 50.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=18 */
%   | else return 0.1819840117219952;  // std dev = 1.581, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return 0.04907683270169934;  // std dev = 2.590, 30.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=10 */
%   | | | else return 0.04280611284713165;  // std dev = 1.769, 14.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=5 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D) )
%   | then return 0.03268484333428442;  // std dev = 7.069, 231.000 (wgt'ed) examples reached here.  /* #neg=158 #pos=73 */
%   | else if ( follows(C, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.1978003519979642;  // std dev = 1.488, 9.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=5 */
%   else if ( follows(E, A) )
%   | then return -0.09172817322577587;  // std dev = 2.683, 43.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=9 */
%   | else if ( follows(F, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G) )
%   | | | then return 0.2878632609813773;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.10834841339188969;  // std dev = 1.309, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), follows(D, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.02791396129272274;  // std dev = 7.259, 241.000 (wgt'ed) examples reached here.  /* #neg=163 #pos=78 */
%   else if ( follows(A, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F), tweets(A, G) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06937264256553799;  // std dev = 0.421, 64.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=15 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then return 0.03148703822956651;  // std dev = 7.221, 233.000 (wgt'ed) examples reached here.  /* #neg=155 #pos=78 */
%   else if ( follows(D, A), follows(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A) )
%   | | then if ( recursion_accounttype(E, F), tweets(E, G) )
%   | | | then return 0.13258782213069814;  // std dev = 2.312, 23.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=9 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.09063730291787093;  // std dev = 1.830, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */


Results
   AUC ROC   = 0.5
   AUC PR    = 0.007752
   CLL	      = -0.376873
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.362 seconds
Total inference time: 2.715 seconds
AUC ROC: 0.5


Results scoring model
   AUC ROC   = 0.538819
   AUC PR    = 0.007069
   CLL	      = -0.374491
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total scoring time: 2.808 seconds
Parameter learned model CLL: -0.374491


Structure after Parameter Learning
[['accounttype(A, B)', {'': 'follows(A, C), follows(C, C)', 'false': 'tweets(A, D), recursion_accounttype(A, E)', 'false,true': 'tweets(F, D)', 'false,true,true': 'recursion_accounttype(F, E)'}, {'true': [0.0, 0, 0], 'false,true,true,true': [6.598, 121, 68], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 0, 0], 'false,false': [3.993, 44, 25]}], ['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C)', 'false': 'follows(E, A), recursion_accounttype(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, H)', 'false,false,false': 'follows(A, I), recursion_accounttype(I, J)'}, {'true,true': [6.081, 102, 58], 'true,false': [1.095, 3, 2], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [4.172, 49, 27], 'false,false,false,false': [2.0, 12, 6]}], ['accounttype(A, B)', {'': 'follows(C, A)', 'false': 'follows(A, D), follows(D, A)', 'false,false': 'follows(E, A)', 'false,false,false': 'follows(A, F)'}, {'true': [0.476, 113, 60], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [4.09, 44, 27], 'false,false,false,false': [1.937, 10, 6]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D)', 'true,false': 'follows(C, A)', 'false': 'follows(E, A)', 'false,true': 'follows(F, E)', 'false,false': 'follows(A, A), tweets(A, G)', 'false,false,false': 'follows(A, H)'}, {'true,true': [7.064, 158, 73], 'true,false,true': [0.0, 0, 0], 'true,false,false': [1.585, 5, 5], 'false,true,true': [2.34, 14, 9], 'false,true,false': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.089, 16, 6]}], ['accounttype(A, B)', {'': 'recursion_accounttype(A, C), follows(A, D)', 'true': 'follows(D, E), follows(E, F)', 'true,false': 'follows(D, G)', 'false': 'follows(H, A)', 'false,false': 'follows(I, A), follows(J, I)', 'false,false,false': 'follows(A, K)'}, {'true,true': [6.891, 140, 72], 'true,false,true': [0.704, 1, 1], 'true,false,false': [1.705, 7, 5], 'false,true': [2.426, 17, 9], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.651, 5, 6]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'recursion_accounttype(C, D)', 'false': 'follows(E, A)', 'false,true': 'follows(F, E), follows(F, A)', 'false,true,false': 'recursion_accounttype(A, G), tweets(E, H)', 'false,false': 'follows(A, I)', 'false,false,false': 'recursion_accounttype(A, J), tweets(A, K)'}, {'true,true': [7.307, 170, 78], 'true,false': [0.0, 0, 0], 'false,true,true': [2.148, 20, 6], 'false,true,false,true': [1.095, 2, 3], 'false,true,false,false': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [1.414, 6, 3], 'false,false,false,false': [1.369, 5, 3]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D)', 'true,true': 'follows(A, D)', 'true,true,true': 'follows(D, C)', 'false': 'follows(A, A)', 'false,false': 'follows(A, E)', 'false,false,false': 'tweets(A, F)'}, {'true,true,true,true': [5.495, 92, 45], 'true,true,true,false': [2.658, 24, 10], 'true,true,false': [3.392, 32, 18], 'true,false': [1.581, 5, 5], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [2.59, 20, 10], 'false,false,false,false': [1.769, 9, 5]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D)', 'true,false': 'follows(C, A)', 'false': 'follows(E, A)', 'false,false': 'follows(F, A)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [7.069, 158, 73], 'true,false,true': [0.0, 0, 0], 'true,false,false': [1.488, 4, 5], 'false,true': [2.683, 34, 9], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [1.095, 2, 3], 'false,false,false,false': [1.309, 4, 3]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), follows(D, D)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F), tweets(A, G)'}, {'true,true': [0.0, 0, 0], 'true,false': [7.259, 163, 78], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.421, 49, 15]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'false': 'follows(D, A), follows(A, D)', 'false,false': 'follows(E, A)', 'false,false,true': 'recursion_accounttype(E, F), tweets(E, G)', 'false,false,false': 'follows(H, A)'}, {'true': [7.221, 155, 78], 'false,true': [0.0, 0, 0], 'false,false,true,true': [2.312, 14, 9], 'false,false,true,false': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.83, 8, 6]}]]
[{'': [nan, 0.23053001622498664], 'false': [0.23034069594916157, 0.23104389834068595], 'false,true': [0.23034069594916157, nan], 'false,true,true': [0.23034069594916157, nan]}, {'': [0.23140616235173214, 0.22782639977696245], 'true': [0.23109483341735726, 0.23999999999999994], 'false': [nan, 0.22782639977696245], 'false,false': [nan, 0.22782639977696245], 'false,false,false': [0.2290547505655311, 0.22224878527983158]}, {'': [0.22646508864981432, 0.23543055155111217], 'false': [nan, 0.23543055155111217], 'false,false': [nan, 0.23543055155111217], 'false,false,false': [0.23566357296605028, 0.23439365470020293]}, {'': [0.21880248036372932, 0.2222580233893905], 'false': [0.23815366488023101, 0.1983580873907609], 'false,true': [0.23815366488023101, nan], 'true': [0.21603596191311236, 0.25109497575535855], 'true,false': [nan, 0.25109497575535855], 'false,false': [nan, 0.1983580873907609], 'false,false,false': [nan, 0.1983580873907609]}, {'': [0.22547913367053624, 0.24290097190096147], 'false': [0.22632145148338173, 0.24791149584066022], 'false,false': [nan, 0.24791149584066022], 'false,false,false': [nan, 0.24791149584066022], 'true': [0.22400105485437038, 0.24466831146272858], 'true,false': [0.24749654854504555, 0.24221244607836723]}, {'': [0.2152628340956498, 0.21431426992135627], 'true': [0.2152628340956498, nan], 'false': [0.206008271043453, 0.2283628750999391], 'false,false': [nan, 0.2283628750999391], 'false,false,false': [0.2222222222222222, 0.23437499999999997], 'false,true': [0.1775237048037478, 0.23995993930077836], 'false,true,false': [0.23995993930077836, nan]}, {'': [0.22289786991575575, 0.22353655533681316], 'false': [nan, 0.22353655533681316], 'false,false': [nan, 0.22353655533681316], 'false,false,false': [0.2235703675195673, 0.2234372902543733], 'true': [0.22102387475615742, 0.25000897774612174], 'true,true': [0.21813218515257207, 0.23006869601533209], 'true,true,true': [0.22043586155351985, 0.2078469130455758]}, {'': [0.2184256302460324, 0.19846286489162301], 'true': [0.21633464930470844, 0.24585337729212883], 'true,false': [nan, 0.24585337729212883], 'false': [0.16740298421181454, 0.25068974922990467], 'false,false': [nan, 0.25068974922990467], 'false,false,false': [0.23999999999999985, 0.2448979591836735]}, {'': [0.2186385913833123, 0.17762185559883173], 'true': [nan, 0.2186385913833123], 'false': [nan, 0.17762185559883173], 'false,false': [nan, 0.17762185559883173]}, {'': [0.22376064387230418, 0.23537400516774223], 'false': [nan, 0.23537400516774193], 'false,false': [0.23237052852185375, 0.23921432986583877], 'false,false,false': [nan, 0.23921432986583877], 'false,false,true': [0.23237052852185375, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;accounttype(A, B) :- follows(A, C), follows(C, C).;true;true
0;false;tweets(A, D), recursion_accounttype(A, E).;true;true
0;false,true;tweets(F, D).;true;true
0;false,true,true;recursion_accounttype(F, E).;true;true
1;;accounttype(A, B) :- follows(C, A).;true;true
1;true;follows(D, C).;true;true
1;false;follows(E, A), recursion_accounttype(A, F).;true;true
1;false,false;follows(G, A), recursion_accounttype(G, H).;true;true
1;false,false,false;follows(A, I), recursion_accounttype(I, J).;true;true
2;;accounttype(A, B) :- follows(C, A).;true;true
2;false;follows(A, D), follows(D, A).;true;true
2;false,false;follows(E, A).;true;true
2;false,false,false;follows(A, F).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(C, D).;true;true
3;true,false;follows(C, A).;true;true
3;false;follows(E, A).;true;true
3;false,true;follows(F, E).;true;true
3;false,false;follows(A, A), tweets(A, G).;true;true
3;false,false,false;follows(A, H).;true;true
4;;accounttype(A, B) :- recursion_accounttype(A, C), follows(A, D).;true;true
4;true;follows(D, E), follows(E, F).;true;true
4;true,false;follows(D, G).;true;true
4;false;follows(H, A).;true;true
4;false,false;follows(I, A), follows(J, I).;true;true
4;false,false,false;follows(A, K).;true;true
5;;accounttype(A, B) :- follows(A, C).;true;true
5;true;recursion_accounttype(C, D).;true;true
5;false;follows(E, A).;true;true
5;false,true;follows(F, E), follows(F, A).;true;true
5;false,true,false;recursion_accounttype(A, G), tweets(E, H).;true;true
5;false,false;follows(A, I).;true;true
5;false,false,false;recursion_accounttype(A, J), tweets(A, K).;true;true
6;;accounttype(A, B) :- follows(A, C).;true;true
6;true;follows(C, D).;true;true
6;true,true;follows(A, D).;true;true
6;true,true,true;follows(D, C).;true;true
6;false;follows(A, A).;true;true
6;false,false;follows(A, E).;true;true
6;false,false,false;tweets(A, F).;true;true
7;;accounttype(A, B) :- follows(A, C).;true;true
7;true;follows(C, D).;true;true
7;true,false;follows(C, A).;true;true
7;false;follows(E, A).;true;true
7;false,false;follows(F, A).;true;true
7;false,false,false;tweets(A, G).;true;true
8;;accounttype(A, B) :- follows(A, C).;true;true
8;true;follows(C, D), follows(D, D).;true;true
8;false;follows(A, E).;true;true
8;false,false;follows(A, F), tweets(A, G).;true;true
9;;accounttype(A, B) :- follows(A, C).;true;true
9;false;follows(D, A), follows(A, D).;true;true
9;false,false;follows(E, A).;true;true
9;false,false,true;recursion_accounttype(E, F), tweets(E, G).;true;true
9;false,false,false;follows(H, A).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(C, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), recursion_accounttype(A, E) )
%   | then if ( tweets(F, D) )
%   | | then if ( recursion_accounttype(F, E) )
%   | | | then return 0.18350778677415486;  // std dev = 6.773, 209.000 (wgt'ed) examples reached here.  /* #neg=141 #pos=68 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( follows(H, A), follows(A, H) )
%   | | | then return -0.1418510649004878;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | else return 0.18423589162125145;  // std dev = 3.179, 46.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=15 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.8103863401279051;  // std dev = 0.323, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.09219004106038217;  // std dev = 2.542, 104.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=7 */
%   | | | else return -0.029343873341793326;  // std dev = 1.610, 22.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=3 */
%   | else return 0.33431079484289206;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else if ( follows(H, A), recursion_accounttype(A, I) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(J, A), recursion_accounttype(J, K) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, L), recursion_accounttype(L, M) )
%   | | | then return 0.2041296770277605;  // std dev = 4.125, 73.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=27 */
%   | | | else return 0.18720459483547103;  // std dev = 1.970, 17.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=6 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then return 0.6958561594673406;  // std dev = 0.126, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | else return 0.5328189274141798;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0.5133319551039753;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(A, G), follows(G, H) )
%   | | | then return -0.10130123022346152;  // std dev = 2.181, 110.000 (wgt'ed) examples reached here.  /* #neg=105 #pos=5 */
%   | | | else return 0.05259205384740022;  // std dev = 1.535, 14.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=3 */
%   else if ( follows(A, I), follows(I, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(J, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, K) )
%   | | | then return 0.24671989315529214;  // std dev = 3.879, 61.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=27 */
%   | | | else return 0.07945048566188183;  // std dev = 2.089, 22.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=6 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.4711515413126619;  // std dev = 0.268, 49.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=45 */
%   | | else return -0.005758071819493655;  // std dev = 0.354, 158.000 (wgt'ed) examples reached here.  /* #neg=130 #pos=28 */
%   | else if ( follows(C, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return 0.7208298925995469;  // std dev = 0.230, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.012224564824008237;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else if ( follows(G, A) )
%   | then return 0.08099700378092173;  // std dev = 0.363, 27.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=9 */
%   | else if ( follows(A, A), tweets(A, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.16905090562375968;  // std dev = 1.936, 16.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=6 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(A, C), follows(A, D) )
%   then if ( follows(D, E), follows(E, F) )
%   | then return 0.07977254353654827;  // std dev = 0.359, 210.000 (wgt'ed) examples reached here.  /* #neg=138 #pos=72 */
%   | else if ( follows(D, G) )
%   | | then return 0.08589029896839687;  // std dev = 0.782, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else if ( follows(H, A) )
%   | | | then return 0.03458359806286813;  // std dev = 0.936, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.15960411179904144;  // std dev = 1.237, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   else if ( follows(I, A) )
%   | then if ( follows(J, A), recursion_accounttype(J, B) )
%   | | then return 0.366610708502412;  // std dev = 0.327, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else return -0.06953083634468796;  // std dev = 0.314, 18.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | else if ( follows(K, A), follows(L, K) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, M) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.050734866473345734;  // std dev = 2.070, 21.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=6 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( recursion_accounttype(C, D) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.3708867284978083;  // std dev = 0.234, 47.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=45 */
%   | | else if ( follows(F, A), follows(A, F) )
%   | | | then return -0.09215224717330095;  // std dev = 2.257, 109.000 (wgt'ed) examples reached here.  /* #neg=103 #pos=6 */
%   | | | else return 0.047847738139638406;  // std dev = 4.100, 86.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=27 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(G, A) )
%   | then if ( follows(H, G), follows(H, A) )
%   | | then return -0.010454231160886295;  // std dev = 0.261, 22.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=6 */
%   | | else return 0.24110373319087697;  // std dev = 0.448, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else if ( follows(A, I) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( recursion_accounttype(A, J), tweets(A, K) )
%   | | | then return 0.1308483773928379;  // std dev = 1.369, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.13071398672476464;  // std dev = 1.369, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D) )
%   | then if ( follows(A, D) )
%   | | then return 0.025313718246006447;  // std dev = 0.291, 169.000 (wgt'ed) examples reached here.  /* #neg=114 #pos=55 */
%   | | else return 0.1421301748685692;  // std dev = 0.468, 46.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=18 */
%   | else if ( follows(E, A) )
%   | | then return 0.09921159914879184;  // std dev = 0.860, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( tweets(A, F) )
%   | | | then return -0.10760348411340641;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return 0.05348985192867325;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, H) )
%   | | | then return 0.039041094405190234;  // std dev = 2.039, 31.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=10 */
%   | | | else return -0.07153763432506598;  // std dev = 1.864, 24.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=5 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.3038545477032476;  // std dev = 0.078, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   | | else return -0.004407502944768822;  // std dev = 0.353, 161.000 (wgt'ed) examples reached here.  /* #neg=130 #pos=31 */
%   | else if ( follows(C, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, A) )
%   | | | then return 0.21465614978650197;  // std dev = 0.717, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return -0.0855791215118936;  // std dev = 1.461, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
%   else if ( follows(G, A) )
%   | then return 0.06613156516627436;  // std dev = 0.338, 24.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=9 */
%   | else if ( follows(H, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, I) )
%   | | | then return 0.2231542167950984;  // std dev = 1.225, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return -0.02460591744545187;  // std dev = 1.519, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), follows(D, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.17782591579629684;  // std dev = 1.377, 40.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=38 */
%   | | | else return 0.4322874928530348;  // std dev = 0.938, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else if ( follows(G, A), follows(A, G) )
%   | | | then return -0.07187315186022353;  // std dev = 2.220, 86.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=6 */
%   | | | else return 0.016566249931417837;  // std dev = 4.081, 85.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=27 */
%   else if ( follows(A, H) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, I), tweets(A, J) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(K, A), recursion_accounttype(K, B) )
%   | | | then return 0.37348698607227115;  // std dev = 0.131, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.04065363619960024;  // std dev = 2.446, 42.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=8 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, A), follows(E, D) )
%   | then return -0.006585118696489268;  // std dev = 0.241, 157.000 (wgt'ed) examples reached here.  /* #neg=108 #pos=49 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0.4233470235603534;  // std dev = 0.134, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(G, A) )
%   | | | then return 0.008300666627081787;  // std dev = 0.603, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.10541136605579651;  // std dev = 3.609, 56.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=22 */
%   else if ( follows(H, A), follows(A, H) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(I, A) )
%   | | then if ( recursion_accounttype(I, J), tweets(I, K) )
%   | | | then return 0.06609014739315727;  // std dev = 1.479, 21.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=9 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(L, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.12339420420735439;  // std dev = 1.895, 15.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=6 */


Results
   AUC ROC   = 0.915314
   AUC PR    = 0.29616
   CLL	      = -0.205479
   Precision = 0.323944 at threshold = 0.5
   Recall    = 0.730159
   F1        = 0.44878


Total learning time: 5.003 seconds
Total inference time: 26.521 seconds
AUC ROC: 0.915314


Results scoring model
   AUC ROC   = 0.913204
   AUC PR    = 0.323096
   CLL	      = -0.234204
   Precision = 0.308108 at threshold = 0.5
   Recall    = 0.612903
   F1        = 0.410072


Total scoring time: 17.275 seconds
Refined model CLL: -0.234204


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.915314
   AUC PR    = 0.29616
   CLL	      = -0.205479
   Precision = 0.323944 at threshold = 0.5
   Recall    = 0.730159
   F1        = 0.44878


Total learning time: 26.448 seconds
Total inference time: 26.521 seconds
AUC ROC: 0.915314
Total revision time: 26.448
Best scored revision CLL: -0.234204


Dataset: 7_yeast_twitter, Fold: 1, Type: Transfer (trRDN-B), Time: 00:06:44
{'AUC ROC': 0.915314, 'AUC PR': 0.29616, 'CLL': -0.205479, 'Precision': [0.323944, 0.5], 'Recall': 0.730159, 'F1': 0.44878, 'Learning time': 26.448, 'Inference time': 26.521, 'parameter_0.6': {'AUC ROC': 0.5, 'AUC PR': 0.007752, 'CLL': -0.376873, 'Precision': [nan, 0.5], 'Recall': 0.0, 'F1': nan, 'Learning time': 1.362, 'Inference time': 2.715}}


Amount of data: 0.8
******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(A, C), interaction(C, C).;true;true
0;true;interaction(C, A), phenotype(C, D).;false;true
0;true,false;interaction(E, A), enzyme(A, F).;true;true
0;true,false,true;complex(A, G), complex(C, H).;false;false
0;true,false,false;recursion_proteinclass(C, B).;false;false
0;false;location(A, I), phenotype(A, J).;true;false
0;false,true;location(K, I), recursion_proteinclass(K, B).;true;false
0;false,true,true;phenotype(K, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), complex(A, D).;true;true
1;true;interaction(E, C), recursion_proteinclass(E, B).;false;false
1;false;interaction(F, A), phenotype(A, G).;true;true
1;false,true;recursion_proteinclass(F, B).;false;true
1;false,true,false;interaction(H, F), recursion_proteinclass(H, B).;false;false
1;false,false;interaction(I, A), phenotype(I, J).;true;true
1;false,false,true;interaction(A, K), recursion_proteinclass(K, B).;false;false
1;false,false,false;interaction(A, L), phenotype(L, M).;false;false
2;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
2;true;complex(C, D).;false;false
2;false;interaction(A, E), interaction(E, A).;true;true
2;false,true;interaction(A, A).;false;true
2;false,true,false;enzyme(E, F), enzyme(A, F).;false;false
2;false,false;interaction(G, A), enzyme(G, H).;true;true
2;false,false,true;complex(G, I), complex(A, I).;false;false
2;false,false,false;interaction(A, J), recursion_proteinclass(J, B).;false;false
3;;proteinclass(A, B) :- complex(A, C), interaction(A, D).;true;true
3;true;interaction(D, E), recursion_proteinclass(E, B).;false;true
3;true,false;interaction(D, A).;false;false
3;false;interaction(F, A), enzyme(F, G).;true;true
3;false,true;interaction(H, F), recursion_proteinclass(H, B).;false;true
3;false,true,false;interaction(A, F).;false;false
3;false,false;interaction(A, A), location(A, I).;false;true
3;false,false,false;interaction(A, J), enzyme(J, K).;false;false
4;;proteinclass(A, B) :- phenotype(A, C), interaction(A, D).;true;true
4;true;interaction(D, E), interaction(E, F).;false;true
4;true,false;recursion_proteinclass(D, B).;false;true
4;true,false,false;enzyme(A, G), interaction(D, H).;false;false
4;false;interaction(I, A), recursion_proteinclass(I, B).;false;true
4;false,false;interaction(J, A), interaction(K, J).;true;true
4;false,false,true;recursion_proteinclass(K, B), location(J, L).;false;false
4;false,false,false;interaction(A, M), recursion_proteinclass(M, B).;false;false
5;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
5;true;enzyme(A, D), phenotype(C, E).;false;false
5;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
5;false,true;interaction(G, F), interaction(G, A).;false;true
5;false,true,false;phenotype(A, H), location(F, I).;false;false
5;false,false;interaction(A, J), complex(J, K).;true;true
5;false,false,true;interaction(J, L), recursion_proteinclass(L, B).;false;false
5;false,false,false;phenotype(A, M), location(A, N).;false;false
6;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
6;true;interaction(C, D), complex(D, E).;true;false
6;true,true;interaction(A, D).;true;false
6;true,true,true;interaction(D, C).;false;false
6;false;interaction(A, A).;false;true
6;false,false;interaction(A, F), enzyme(F, G).;true;true
6;false,false,true;phenotype(F, H), complex(F, I).;false;false
6;false,false,false;location(A, J).;false;false
7;;proteinclass(A, B) :- interaction(A, C), complex(C, D).;true;true
7;true;recursion_proteinclass(C, B).;false;true
7;true,false;interaction(C, E), recursion_proteinclass(E, B).;false;true
7;true,false,false;interaction(C, A).;false;false
7;false;interaction(F, A), recursion_proteinclass(F, B).;false;true
7;false,false;interaction(G, A), enzyme(G, H).;true;true
7;false,false,true;interaction(A, I), interaction(G, I).;false;false
7;false,false,false;location(A, J), enzyme(A, K).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;interaction(C, D), interaction(D, D).;false;false
8;false;interaction(A, E), enzyme(A, F).;true;true
8;false,true;interaction(E, G), recursion_proteinclass(G, B).;false;true
8;false,true,false;interaction(E, A).;false;false
8;false,false;interaction(A, H), location(A, I).;true;true
8;false,false,true;interaction(H, J), recursion_proteinclass(J, B).;false;false
8;false,false,false;enzyme(A, K).;false;false
9;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;false;true
9;false;interaction(D, A), interaction(A, D).;true;true
9;false,true;phenotype(A, E), phenotype(D, E).;true;true
9;false,true,true;complex(D, F).;false;false
9;false,true,false;interaction(D, D).;false;false
9;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
9;false,false,true;phenotype(G, H), location(G, I).;false;false
9;false,false,false;complex(A, J), interaction(K, A).;false;false


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(C, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), recursion_accounttype(A, E) )
%   | then if ( tweets(F, D) )
%   | | then if ( recursion_accounttype(F, E) )
%   | | | then return 0.18915938806118274;  // std dev = 7.972, 287.000 (wgt'ed) examples reached here.  /* #neg=192 #pos=95 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.15107822802880402;  // std dev = 4.528, 99.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=29 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C) )
%   | then return 0.16499520895077072;  // std dev = 7.454, 251.000 (wgt'ed) examples reached here.  /* #neg=168 #pos=83 */
%   | else return 0.33352806162863224;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else if ( follows(E, A), recursion_accounttype(A, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, I), recursion_accounttype(I, J) )
%   | | | then return 0.18401162081866757;  // std dev = 4.494, 89.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=31 */
%   | | | else return 0.23665838759479021;  // std dev = 2.189, 20.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=8 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then return 0.13265640480971402;  // std dev = 0.468, 263.000 (wgt'ed) examples reached here.  /* #neg=178 #pos=85 */
%   else if ( follows(A, D), follows(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, F) )
%   | | | then return 0.18223687884343054;  // std dev = 4.407, 83.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=31 */
%   | | | else return 0.12169562180747728;  // std dev = 2.330, 25.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=8 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D) )
%   | then return 0.10787410057777898;  // std dev = 8.150, 304.000 (wgt'ed) examples reached here.  /* #neg=206 #pos=98 */
%   | else if ( follows(C, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.2384703411775134;  // std dev = 1.647, 11.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=5 */
%   else if ( follows(E, A) )
%   | then if ( follows(F, E) )
%   | | then return 0.1829388626823985;  // std dev = 2.809, 33.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=13 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, A), tweets(A, G) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.08892945819871992;  // std dev = 2.353, 26.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=8 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(A, C), follows(A, D) )
%   then if ( follows(D, E), follows(E, F) )
%   | then return 0.10496118770015506;  // std dev = 8.013, 287.000 (wgt'ed) examples reached here.  /* #neg=190 #pos=97 */
%   | else if ( follows(D, G) )
%   | | then return 0.7570765525114433;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.018299009995773007;  // std dev = 1.897, 18.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=5 */
%   else if ( follows(H, A) )
%   | then return 0.10836476576366229;  // std dev = 2.906, 37.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=13 */
%   | else if ( follows(I, A), follows(J, I) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, K) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.05135576999120294;  // std dev = 2.390, 28.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=8 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( recursion_accounttype(C, D) )
%   | then return 0.07034425566959229;  // std dev = 8.353, 316.000 (wgt'ed) examples reached here.  /* #neg=213 #pos=103 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(E, A) )
%   | then if ( follows(F, E), follows(F, A) )
%   | | then return -0.026215341565393308;  // std dev = 2.762, 42.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=10 */
%   | | else if ( recursion_accounttype(A, G), tweets(E, H) )
%   | | | then return 0.24023599399820425;  // std dev = 1.225, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, I) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( recursion_accounttype(A, J), tweets(A, K) )
%   | | | then return 0.11617565147510973;  // std dev = 1.595, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | | | else return 0.12319888285980506;  // std dev = 1.595, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D) )
%   | then if ( follows(A, D) )
%   | | then if ( follows(D, C) )
%   | | | then return 0.07115185581733069;  // std dev = 6.573, 194.000 (wgt'ed) examples reached here.  /* #neg=129 #pos=65 */
%   | | | else return 0.03606534699435725;  // std dev = 2.649, 33.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=10 */
%   | | else return 0.06099130528924206;  // std dev = 3.941, 66.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=23 */
%   | else return 0.106815385816758;  // std dev = 1.752, 13.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=5 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return 0.06850006281724665;  // std dev = 3.049, 42.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=14 */
%   | | | else return 0.017130903767611227;  // std dev = 2.230, 24.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=7 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D) )
%   | then return 0.07500067594888371;  // std dev = 7.972, 274.000 (wgt'ed) examples reached here.  /* #neg=176 #pos=98 */
%   | else if ( follows(C, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.055813914954675185;  // std dev = 1.796, 14.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=5 */
%   else if ( follows(E, A) )
%   | then return 0.05172966444024938;  // std dev = 2.947, 39.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=13 */
%   | else if ( follows(F, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G) )
%   | | | then return 0.08020938968061346;  // std dev = 1.595, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | | | else return -0.016989098204054184;  // std dev = 1.732, 16.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=4 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), follows(D, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.01769808499063007;  // std dev = 8.409, 328.000 (wgt'ed) examples reached here.  /* #neg=225 #pos=103 */
%   else if ( follows(A, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F), tweets(A, G) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.02270316048055025;  // std dev = 0.461, 68.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=21 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then return 0.03941990290045837;  // std dev = 8.254, 303.000 (wgt'ed) examples reached here.  /* #neg=200 #pos=103 */
%   else if ( follows(D, A), follows(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A) )
%   | | then if ( recursion_accounttype(E, F), tweets(E, G) )
%   | | | then return 0.0465773945896236;  // std dev = 2.921, 38.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=13 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.062176318423533654;  // std dev = 2.283, 23.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=8 */


Results
   AUC ROC   = 0.5
   AUC PR    = 0.007752
   CLL	      = -0.370427
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.619 seconds
Total inference time: 2.887 seconds
AUC ROC: 0.5


Results scoring model
   AUC ROC   = 0.530518
   AUC PR    = 0.006717
   CLL	      = -0.372784
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total scoring time: 3.569 seconds
Parameter learned model CLL: -0.372784


Structure after Parameter Learning
[['accounttype(A, B)', {'': 'follows(A, C), follows(C, C)', 'false': 'tweets(A, D), recursion_accounttype(A, E)', 'false,true': 'tweets(F, D)', 'false,true,true': 'recursion_accounttype(F, E)'}, {'true': [0.0, 0, 0], 'false,true,true,true': [7.972, 192, 95], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 0, 0], 'false,false': [4.528, 70, 29]}], ['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C)', 'false': 'follows(E, A), recursion_accounttype(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, H)', 'false,false,false': 'follows(A, I), recursion_accounttype(I, J)'}, {'true,true': [7.454, 168, 83], 'true,false': [1.0, 2, 2], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [4.494, 58, 31], 'false,false,false,false': [2.189, 12, 8]}], ['accounttype(A, B)', {'': 'follows(C, A)', 'false': 'follows(A, D), follows(D, A)', 'false,false': 'follows(E, A)', 'false,false,false': 'follows(A, F)'}, {'true': [0.468, 178, 85], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [4.407, 52, 31], 'false,false,false,false': [2.33, 17, 8]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D)', 'true,false': 'follows(C, A)', 'false': 'follows(E, A)', 'false,true': 'follows(F, E)', 'false,false': 'follows(A, A), tweets(A, G)', 'false,false,false': 'follows(A, H)'}, {'true,true': [8.15, 206, 98], 'true,false,true': [0.0, 0, 0], 'true,false,false': [1.647, 6, 5], 'false,true,true': [2.809, 20, 13], 'false,true,false': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.353, 18, 8]}], ['accounttype(A, B)', {'': 'recursion_accounttype(A, C), follows(A, D)', 'true': 'follows(D, E), follows(E, F)', 'true,false': 'follows(D, G)', 'false': 'follows(H, A)', 'false,false': 'follows(I, A), follows(J, I)', 'false,false,false': 'follows(A, K)'}, {'true,true': [8.013, 190, 97], 'true,false,true': [0.0, 0, 1], 'true,false,false': [1.897, 13, 5], 'false,true': [2.906, 24, 13], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.39, 20, 8]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'recursion_accounttype(C, D)', 'false': 'follows(E, A)', 'false,true': 'follows(F, E), follows(F, A)', 'false,true,false': 'recursion_accounttype(A, G), tweets(E, H)', 'false,false': 'follows(A, I)', 'false,false,false': 'recursion_accounttype(A, J), tweets(A, K)'}, {'true,true': [8.353, 213, 103], 'true,false': [0.0, 0, 0], 'false,true,true': [2.762, 32, 10], 'false,true,false,true': [1.225, 3, 3], 'false,true,false,false': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [1.595, 7, 4], 'false,false,false,false': [1.595, 7, 4]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D)', 'true,true': 'follows(A, D)', 'true,true,true': 'follows(D, C)', 'false': 'follows(A, A)', 'false,false': 'follows(A, E)', 'false,false,false': 'tweets(A, F)'}, {'true,true,true,true': [6.573, 129, 65], 'true,true,true,false': [2.649, 23, 10], 'true,true,false': [3.941, 43, 23], 'true,false': [1.752, 8, 5], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [3.049, 28, 14], 'false,false,false,false': [2.23, 17, 7]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D)', 'true,false': 'follows(C, A)', 'false': 'follows(E, A)', 'false,false': 'follows(F, A)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [7.972, 176, 98], 'true,false,true': [0.0, 0, 0], 'true,false,false': [1.796, 9, 5], 'false,true': [2.947, 26, 13], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [1.595, 7, 4], 'false,false,false,false': [1.732, 12, 4]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), follows(D, D)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F), tweets(A, G)'}, {'true,true': [0.0, 0, 0], 'true,false': [8.409, 225, 103], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.461, 47, 21]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'false': 'follows(D, A), follows(A, D)', 'false,false': 'follows(E, A)', 'false,false,true': 'recursion_accounttype(E, F), tweets(E, G)', 'false,false,false': 'follows(H, A)'}, {'true': [8.254, 200, 103], 'false,true': [0.0, 0, 0], 'false,false,true,true': [2.921, 25, 13], 'false,false,true,false': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.283, 15, 8]}]]
[{'': [nan, 0.21804612204354637], 'false': [0.22144253299178235, 0.2071217222732387], 'false,true': [0.22144253299178235, nan], 'false,true,true': [0.22144253299178235, nan]}, {'': [0.22223931373887013, 0.22963870689006335], 'false': [nan, 0.22963870689006335], 'false,false': [nan, 0.22963870689006335], 'false,false,false': [0.22689408543401712, 0.23958915583161494], 'true': [0.22135137005153596, 0.25]}, {'': [0.21885134379775753, 0.23073595463004007], 'false': [nan, 0.23073595463004018], 'false,false': [nan, 0.23073595463004007], 'false,false,false': [0.23395843725727367, 0.21722050456975503]}, {'': [0.22003224042086894, 0.22974861797564428], 'false': [0.23914905608564435, 0.21287413423582002], 'false,true': [0.23914905608564435, nan], 'true': [0.2184781417489944, 0.24652208301544665], 'true,false': [nan, 0.24652208301544665], 'false,false': [nan, 0.21287413423582002], 'false,false,false': [nan, 0.21287413423582002]}, {'': [0.22338769322094343, 0.21857834234097506], 'true': [0.22370064877901344, 0.2165193154737437], 'false': [0.22824561477972852, 0.2039537177608923], 'true,false': [0.0, 0.19982225805310702], 'false,false': [nan, 0.2039537177608923], 'false,false,false': [nan, 0.2039537177608923]}, {'': [0.22081210346479294, 0.2111726104722359], 'true': [0.22081210346479294, nan], 'false': [0.19790931535287634, 0.23141729012245646], 'false,false': [nan, 0.23141729012245646], 'false,false,false': [0.23140495867768598, 0.23140495867768604], 'false,true': [0.18159153727872385, 0.2500119869262689], 'false,true,false': [0.2500119869262689, nan]}, {'': [0.22509166299752764, 0.21683608631592488], 'true': [0.22452225914267315, 0.23624380544706355], 'true,true': [0.22136465454025503, 0.2353626700690457], 'true,true,true': [0.22267308245754866, 0.21262058637888193], 'false': [nan, 0.21683608631592488], 'false,false': [nan, 0.21683608631592488], 'false,false,false': [0.22133847706027543, 0.20727767219419602]}, {'': [0.23187502202488744, 0.21675871496888158], 'true': [0.23193696406496478, 0.23031249131021012], 'true,false': [nan, 0.23031249131021012], 'false': [0.22270533768793813, 0.20766809441914463], 'false,false': [nan, 0.20766809441914463], 'false,false,false': [0.2314049586776859, 0.18750000000000014]}, {'': [0.21557642861206097, 0.2125509524809401], 'true': [nan, 0.21557642861206114], 'false': [nan, 0.2125509524809401], 'false,false': [nan, 0.2125509524809401]}, {'': [0.22482596073135086, 0.2253882027787473], 'false': [nan, 0.22538820277874735], 'false,false': [0.22454841270256862, 0.22662410163928054], 'false,false,false': [nan, 0.22662410163928054], 'false,false,true': [0.22454841270256862, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
4;;accounttype(A, B) :- recursion_accounttype(A, C), follows(A, D).;true;true
4;true;follows(D, E), follows(E, F).;true;true
4;true,false;follows(D, G).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.8581489350995127;  // std dev = 0.000, 68.000 (wgt'ed) examples reached here.  /* #pos=68 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.14185106490048818;  // std dev = 0.000, 162.000 (wgt'ed) examples reached here.  /* #neg=162 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( tweets(A, G), follows(A, H) )
%   | | | then return 0.15602127552504427;  // std dev = 3.135, 47.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=14 */
%   | | | else return 0.2411276585037677;  // std dev = 3.333, 47.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=18 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then return 0.7022320329006095;  // std dev = 0.130, 58.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=57 */
%   | else return 0.6361400788776208;  // std dev = 0.276, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(A, F) )
%   | | | then return 0.38614007887762103;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.7194734122109542;  // std dev = 5.16e-08, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return -0.12544463852839138;  // std dev = 2.11e-08, 161.000 (wgt'ed) examples reached here.  /* #neg=161 */
%   | else if ( tweets(A, G), follows(A, H) )
%   | | then if ( tweets(I, G), recursion_accounttype(I, B) )
%   | | | then return 0.8068644952412175;  // std dev = 0.228, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return -0.16192440367654587;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.17414515470540734;  // std dev = 2.616, 31.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=11 */
%   | | | else return 0.09089736412693138;  // std dev = 2.572, 34.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=9 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, C) )
%   | then if ( follows(A, C), follows(D, A) )
%   | | then return 0.5283697635576756;  // std dev = 0.174, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   | | else if ( tweets(A, E), tweets(C, E) )
%   | | | then return 0.3596197635576755;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.5596197635576756;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.5667557953963577;  // std dev = 0.040, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.5131597359986625;  // std dev = 0.214, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | else return -0.11231637819360635;  // std dev = 7.30e-08, 161.000 (wgt'ed) examples reached here.  /* #neg=161 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.5763609028531216;  // std dev = 0.067, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.11130532460712456;  // std dev = 3.113, 60.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=18 */
%   | | | else return 0.1459687427057997;  // std dev = 3.036, 41.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=14 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then return 0.4147543166875622;  // std dev = 0.126, 58.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=57 */
%   | else return 0.35177355494441415;  // std dev = 0.276, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(A, G), follows(E, G) )
%   | | | then return 0.3351065879833142;  // std dev = 0.968, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.42781241091565153;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return -0.10159632948783649;  // std dev = 0.000, 169.000 (wgt'ed) examples reached here.  /* #neg=169 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.6335794691125377;  // std dev = 0.648, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return -0.16385388434613546;  // std dev = 0.119, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.10641035557737773;  // std dev = 2.718, 35.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=12 */
%   | | | else return 0.011737520260767414;  // std dev = 1.764, 18.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=4 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(A, C), follows(A, D) )
%   then if ( follows(D, E), follows(E, F) )
%   | then if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.3078134029135983;  // std dev = 0.167, 63.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=61 */
%   | | else return -0.015477426515903833;  // std dev = 0.241, 221.000 (wgt'ed) examples reached here.  /* #neg=185 #pos=36 */
%   | else if ( follows(D, H) )
%   | | then return 0.022016715487204432;  // std dev = 0.561, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else if ( follows(I, A) )
%   | | | then return 0.07444389729504478;  // std dev = 0.458, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return -0.03187936630570784;  // std dev = 1.403, 12.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=3 */
%   else if ( tweets(A, J) )
%   | then if ( tweets(K, J), recursion_accounttype(K, B) )
%   | | then return 0.441685723330863;  // std dev = 0.147, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return -0.1202754643067459;  // std dev = 0.189, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | else if ( follows(L, A) )
%   | | then return 0.12541030832547964;  // std dev = 0.535, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.037558118046522496;  // std dev = 0.433, 16.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=4 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then return 0.2748821985047489;  // std dev = 0.169, 57.000 (wgt'ed) examples reached here.  /* #pos=57 */
%   | else return 0.1858662099204187;  // std dev = 0.281, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then return 0.3328155893926096;  // std dev = 0.116, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.09060147660275944;  // std dev = 0.044, 166.000 (wgt'ed) examples reached here.  /* #neg=166 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( tweets(A, H) )
%   | | | then return 0.2005649421500002;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.11117649482943452;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( tweets(A, I), follows(A, J) )
%   | | | then return 0.07676788482960197;  // std dev = 2.039, 44.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=14 */
%   | | | else return 0.05982794954644804;  // std dev = 3.375, 61.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=18 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(D, C) )
%   | then return 0.22400475944477696;  // std dev = 0.124, 47.000 (wgt'ed) examples reached here.  /* #pos=47 */
%   | else if ( follows(A, E), follows(E, C) )
%   | | then if ( follows(E, F), follows(F, C) )
%   | | | then return -0.08779748646186321;  // std dev = 1.098, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.2347372292069508;  // std dev = 0.029, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.22791045969250648;  // std dev = 0.106, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( follows(G, A) )
%   | then return -0.05608894769123458;  // std dev = 0.110, 193.000 (wgt'ed) examples reached here.  /* #neg=176 #pos=17 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.4799606880588069;  // std dev = 1.507, 29.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=28 */
%   | | | else return -0.19880083010147195;  // std dev = 0.719, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.11998455446600441;  // std dev = 1.332, 15.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=6 */
%   | | | else return 0.06413414711164321;  // std dev = 1.878, 17.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=5 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(C, D) )
%   | then return 0.19068650461043452;  // std dev = 0.171, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | else if ( follows(A, E) )
%   | | then return -0.14631129024110912;  // std dev = 0.832, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.19737737306487124;  // std dev = 0.067, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( follows(F, A) )
%   | then if ( follows(G, F), follows(G, A) )
%   | | then return -0.07470686860558318;  // std dev = 0.370, 99.000 (wgt'ed) examples reached here.  /* #neg=98 #pos=1 */
%   | | else return -0.007804065985395975;  // std dev = 0.172, 69.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=16 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.43192460724931875;  // std dev = 1.044, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | | else return -0.17333594369191568;  // std dev = 0.337, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.2874786151203535;  // std dev = 0.824, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.09261558440540014;  // std dev = 1.633, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(C, D) )
%   then if ( recursion_accounttype(D, B) )
%   | then if ( recursion_accounttype(C, B) )
%   | | then return 0.16150237327356748;  // std dev = 0.298, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else if ( tweets(A, E) )
%   | | | then return 0.23367412920005506;  // std dev = 0.999, 31.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=30 */
%   | | | else return 0.5089909996154359;  // std dev = 0.331, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return -0.09322211111399174;  // std dev = 0.492, 190.000 (wgt'ed) examples reached here.  /* #neg=190 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then return 0.2605852223906704;  // std dev = 0.123, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return -0.11513416914862247;  // std dev = 0.069, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | else if ( follows(A, H) )
%   | | then return 0.005558212772567489;  // std dev = 0.763, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else if ( follows(I, A) )
%   | | | then return 0.09694105371153233;  // std dev = 0.339, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.07528418043568687;  // std dev = 1.633, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(C, D) )
%   | then return 0.1405837704133046;  // std dev = 0.127, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | else if ( follows(E, A), follows(E, C) )
%   | | then return 0.1393416774311767;  // std dev = 0.083, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return -0.15477986892038262;  // std dev = 0.824, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.23535717300486994;  // std dev = 0.100, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.0700388776912914;  // std dev = 0.080, 177.000 (wgt'ed) examples reached here.  /* #neg=177 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.24636082450125255;  // std dev = 1.348, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   | | | else return -0.13021071045259663;  // std dev = 0.325, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.00438368306006765;  // std dev = 0.967, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | | | else return -0.050501186354495686;  // std dev = 1.764, 18.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=4 */


Results
   AUC ROC   = 0.993079
   AUC PR    = 0.347995
   CLL	      = -0.107007
   Precision = 0.333333 at threshold = 0.5
   Recall    = 0.960317
   F1        = 0.494888


Total learning time: 17.566 seconds
Total inference time: 68.048 seconds
AUC ROC: 0.993079


Results scoring model
   AUC ROC   = 0.99403
   AUC PR    = 0.366256
   CLL	      = -0.117528
   Precision = 0.344928 at threshold = 0.5
   Recall    = 0.959677
   F1        = 0.507463


Total scoring time: 52.625 seconds
Refined model CLL: -0.117528


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.993079
   AUC PR    = 0.347995
   CLL	      = -0.107007
   Precision = 0.333333 at threshold = 0.5
   Recall    = 0.960317
   F1        = 0.494888


Total learning time: 75.37899999999999 seconds
Total inference time: 68.048 seconds
AUC ROC: 0.993079
Total revision time: 75.37899999999999
Best scored revision CLL: -0.117528


Dataset: 7_yeast_twitter, Fold: 1, Type: Transfer (trRDN-B), Time: 00:09:11
{'AUC ROC': 0.993079, 'AUC PR': 0.347995, 'CLL': -0.107007, 'Precision': [0.333333, 0.5], 'Recall': 0.960317, 'F1': 0.494888, 'Learning time': 75.37899999999999, 'Inference time': 68.048, 'parameter_0.8': {'AUC ROC': 0.5, 'AUC PR': 0.007752, 'CLL': -0.370427, 'Precision': [nan, 0.5], 'Recall': 0.0, 'F1': nan, 'Learning time': 1.619, 'Inference time': 2.887}}


Amount of data: 1.0
******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(A, C), interaction(C, C).;true;true
0;true;interaction(C, A), phenotype(C, D).;false;true
0;true,false;interaction(E, A), enzyme(A, F).;true;true
0;true,false,true;complex(A, G), complex(C, H).;false;false
0;true,false,false;recursion_proteinclass(C, B).;false;false
0;false;location(A, I), phenotype(A, J).;true;false
0;false,true;location(K, I), recursion_proteinclass(K, B).;true;false
0;false,true,true;phenotype(K, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), complex(A, D).;true;true
1;true;interaction(E, C), recursion_proteinclass(E, B).;false;false
1;false;interaction(F, A), phenotype(A, G).;true;true
1;false,true;recursion_proteinclass(F, B).;false;true
1;false,true,false;interaction(H, F), recursion_proteinclass(H, B).;false;false
1;false,false;interaction(I, A), phenotype(I, J).;true;true
1;false,false,true;interaction(A, K), recursion_proteinclass(K, B).;false;false
1;false,false,false;interaction(A, L), phenotype(L, M).;false;false
2;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
2;true;complex(C, D).;false;false
2;false;interaction(A, E), interaction(E, A).;true;true
2;false,true;interaction(A, A).;false;true
2;false,true,false;enzyme(E, F), enzyme(A, F).;false;false
2;false,false;interaction(G, A), enzyme(G, H).;true;true
2;false,false,true;complex(G, I), complex(A, I).;false;false
2;false,false,false;interaction(A, J), recursion_proteinclass(J, B).;false;false
3;;proteinclass(A, B) :- complex(A, C), interaction(A, D).;true;true
3;true;interaction(D, E), recursion_proteinclass(E, B).;false;true
3;true,false;interaction(D, A).;false;false
3;false;interaction(F, A), enzyme(F, G).;true;true
3;false,true;interaction(H, F), recursion_proteinclass(H, B).;false;true
3;false,true,false;interaction(A, F).;false;false
3;false,false;interaction(A, A), location(A, I).;false;true
3;false,false,false;interaction(A, J), enzyme(J, K).;false;false
4;;proteinclass(A, B) :- phenotype(A, C), interaction(A, D).;true;true
4;true;interaction(D, E), interaction(E, F).;false;true
4;true,false;recursion_proteinclass(D, B).;false;true
4;true,false,false;enzyme(A, G), interaction(D, H).;false;false
4;false;interaction(I, A), recursion_proteinclass(I, B).;false;true
4;false,false;interaction(J, A), interaction(K, J).;true;true
4;false,false,true;recursion_proteinclass(K, B), location(J, L).;false;false
4;false,false,false;interaction(A, M), recursion_proteinclass(M, B).;false;false
5;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
5;true;enzyme(A, D), phenotype(C, E).;false;false
5;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
5;false,true;interaction(G, F), interaction(G, A).;false;true
5;false,true,false;phenotype(A, H), location(F, I).;false;false
5;false,false;interaction(A, J), complex(J, K).;true;true
5;false,false,true;interaction(J, L), recursion_proteinclass(L, B).;false;false
5;false,false,false;phenotype(A, M), location(A, N).;false;false
6;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
6;true;interaction(C, D), complex(D, E).;true;false
6;true,true;interaction(A, D).;true;false
6;true,true,true;interaction(D, C).;false;false
6;false;interaction(A, A).;false;true
6;false,false;interaction(A, F), enzyme(F, G).;true;true
6;false,false,true;phenotype(F, H), complex(F, I).;false;false
6;false,false,false;location(A, J).;false;false
7;;proteinclass(A, B) :- interaction(A, C), complex(C, D).;true;true
7;true;recursion_proteinclass(C, B).;false;true
7;true,false;interaction(C, E), recursion_proteinclass(E, B).;false;true
7;true,false,false;interaction(C, A).;false;false
7;false;interaction(F, A), recursion_proteinclass(F, B).;false;true
7;false,false;interaction(G, A), enzyme(G, H).;true;true
7;false,false,true;interaction(A, I), interaction(G, I).;false;false
7;false,false,false;location(A, J), enzyme(A, K).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;interaction(C, D), interaction(D, D).;false;false
8;false;interaction(A, E), enzyme(A, F).;true;true
8;false,true;interaction(E, G), recursion_proteinclass(G, B).;false;true
8;false,true,false;interaction(E, A).;false;false
8;false,false;interaction(A, H), location(A, I).;true;true
8;false,false,true;interaction(H, J), recursion_proteinclass(J, B).;false;false
8;false,false,false;enzyme(A, K).;false;false
9;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;false;true
9;false;interaction(D, A), interaction(A, D).;true;true
9;false,true;phenotype(A, E), phenotype(D, E).;true;true
9;false,true,true;complex(D, F).;false;false
9;false,true,false;interaction(D, D).;false;false
9;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
9;false,false,true;phenotype(G, H), location(G, I).;false;false
9;false,false,false;complex(A, J), interaction(K, A).;false;false


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(C, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), recursion_accounttype(A, E) )
%   | then if ( tweets(F, D) )
%   | | then if ( recursion_accounttype(F, E) )
%   | | | then return 0.19051887729604008;  // std dev = 8.762, 346.000 (wgt'ed) examples reached here.  /* #neg=231 #pos=115 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.2275183044688811;  // std dev = 5.085, 111.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=41 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C) )
%   | then return 0.17648175762927718;  // std dev = 8.340, 308.000 (wgt'ed) examples reached here.  /* #neg=202 #pos=106 */
%   | else return 0.11905362038754772;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   else if ( follows(E, A), recursion_accounttype(A, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, I), recursion_accounttype(I, J) )
%   | | | then return 0.1448706691988081;  // std dev = 5.038, 118.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=37 */
%   | | | else return 0.20960009708573943;  // std dev = 2.612, 29.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=11 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then return 0.1495519881847735;  // std dev = 0.475, 315.000 (wgt'ed) examples reached here.  /* #neg=207 #pos=108 */
%   else if ( follows(A, D), follows(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, F) )
%   | | | then return 0.1206669340614643;  // std dev = 5.050, 119.000 (wgt'ed) examples reached here.  /* #neg=82 #pos=37 */
%   | | | else return 0.06067698485845826;  // std dev = 2.848, 42.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=11 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D) )
%   | then return 0.10148488652256386;  // std dev = 9.127, 385.000 (wgt'ed) examples reached here.  /* #neg=263 #pos=122 */
%   | else if ( follows(C, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.1874606692268051;  // std dev = 1.898, 15.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=6 */
%   else if ( follows(E, A) )
%   | then if ( follows(F, E) )
%   | | then return 0.20676569559233915;  // std dev = 3.127, 40.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=17 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, A), tweets(A, G) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.19634796001645377;  // std dev = 2.551, 27.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=11 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(A, C), follows(A, D) )
%   then if ( follows(D, E), follows(E, F) )
%   | then return 0.09266947391523873;  // std dev = 8.995, 368.000 (wgt'ed) examples reached here.  /* #neg=248 #pos=120 */
%   | else if ( follows(D, G) )
%   | | then return 0.17171520347467312;  // std dev = 1.094, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | else return 0.12964746393186666;  // std dev = 1.937, 16.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=6 */
%   else if ( follows(H, A) )
%   | then return 0.06581907676961372;  // std dev = 3.396, 53.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=17 */
%   | else if ( follows(I, A), follows(J, I) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, K) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.2125424302278706;  // std dev = 2.439, 24.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=11 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( recursion_accounttype(C, D) )
%   | then return 0.06518838563238405;  // std dev = 9.356, 404.000 (wgt'ed) examples reached here.  /* #neg=276 #pos=128 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(E, A) )
%   | then if ( follows(F, E), follows(F, A) )
%   | | then return 0.11097540779370707;  // std dev = 2.950, 37.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=14 */
%   | | else if ( recursion_accounttype(A, G), tweets(E, H) )
%   | | | then return 0.060844415934405975;  // std dev = 1.416, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, I) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( recursion_accounttype(A, J), tweets(A, K) )
%   | | | then return 0.024831221742332467;  // std dev = 1.664, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | | | else return 0.05957363812614371;  // std dev = 2.133, 20.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=7 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D) )
%   | then if ( follows(A, D) )
%   | | then if ( follows(D, C) )
%   | | | then return 0.055027025012970895;  // std dev = 7.335, 248.000 (wgt'ed) examples reached here.  /* #neg=169 #pos=79 */
%   | | | else return 0.04492132248172699;  // std dev = 3.429, 55.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=17 */
%   | | else return 0.08655977464584283;  // std dev = 4.125, 75.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=26 */
%   | else return 0.0907530037498389;  // std dev = 1.940, 16.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=6 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return 0.027494036103558578;  // std dev = 3.510, 57.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=18 */
%   | | | else return -0.028692170429467583;  // std dev = 2.702, 37.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=10 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D) )
%   | then return 0.05878164714935497;  // std dev = 9.017, 366.000 (wgt'ed) examples reached here.  /* #neg=244 #pos=122 */
%   | else if ( follows(C, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.16016512972904057;  // std dev = 1.796, 13.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
%   else if ( follows(E, A) )
%   | then return 0.05484752711665496;  // std dev = 3.331, 49.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=17 */
%   | else if ( follows(F, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G) )
%   | | | then return 0.014097500962349177;  // std dev = 1.664, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | | | else return -0.04683132399739863;  // std dev = 2.291, 28.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=7 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), follows(D, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.048148339222376865;  // std dev = 9.212, 380.000 (wgt'ed) examples reached here.  /* #neg=252 #pos=128 */
%   else if ( follows(A, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F), tweets(A, G) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.030921579237804125;  // std dev = 0.470, 85.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=28 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then return 0.035387600938456096;  // std dev = 9.233, 383.000 (wgt'ed) examples reached here.  /* #neg=255 #pos=128 */
%   else if ( follows(D, A), follows(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A) )
%   | | then if ( recursion_accounttype(E, F), tweets(E, G) )
%   | | | then return 0.04333497623828473;  // std dev = 3.316, 48.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=17 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.1259031596235008;  // std dev = 2.520, 26.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=11 */


Results
   AUC ROC   = 0.5
   AUC PR    = 0.007752
   CLL	      = -0.378533
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.962 seconds
Total inference time: 2.731 seconds
AUC ROC: 0.5


Results scoring model
   AUC ROC   = 0.5
   AUC PR    = 0.006289
   CLL	      = -0.374945
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total scoring time: 3.801 seconds
Parameter learned model CLL: -0.374945


Structure after Parameter Learning
[['accounttype(A, B)', {'': 'follows(A, C), follows(C, C)', 'false': 'tweets(A, D), recursion_accounttype(A, E)', 'false,true': 'tweets(F, D)', 'false,true,true': 'recursion_accounttype(F, E)'}, {'true': [0.0, 0, 0], 'false,true,true,true': [8.762, 231, 115], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 0, 0], 'false,false': [5.085, 70, 41]}], ['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C)', 'false': 'follows(E, A), recursion_accounttype(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, H)', 'false,false,false': 'follows(A, I), recursion_accounttype(I, J)'}, {'true,true': [8.34, 202, 106], 'true,false': [1.195, 5, 2], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [5.038, 81, 37], 'false,false,false,false': [2.612, 18, 11]}], ['accounttype(A, B)', {'': 'follows(C, A)', 'false': 'follows(A, D), follows(D, A)', 'false,false': 'follows(E, A)', 'false,false,false': 'follows(A, F)'}, {'true': [0.475, 207, 108], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [5.05, 82, 37], 'false,false,false,false': [2.848, 31, 11]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D)', 'true,false': 'follows(C, A)', 'false': 'follows(E, A)', 'false,true': 'follows(F, E)', 'false,false': 'follows(A, A), tweets(A, G)', 'false,false,false': 'follows(A, H)'}, {'true,true': [9.127, 263, 122], 'true,false,true': [0.0, 0, 0], 'true,false,false': [1.898, 9, 6], 'false,true,true': [3.127, 23, 17], 'false,true,false': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.551, 16, 11]}], ['accounttype(A, B)', {'': 'recursion_accounttype(A, C), follows(A, D)', 'true': 'follows(D, E), follows(E, F)', 'true,false': 'follows(D, G)', 'false': 'follows(H, A)', 'false,false': 'follows(I, A), follows(J, I)', 'false,false,false': 'follows(A, K)'}, {'true,true': [8.995, 248, 120], 'true,false,true': [1.094, 3, 2], 'true,false,false': [1.937, 10, 6], 'false,true': [3.396, 36, 17], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.439, 13, 11]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'recursion_accounttype(C, D)', 'false': 'follows(E, A)', 'false,true': 'follows(F, E), follows(F, A)', 'false,true,false': 'recursion_accounttype(A, G), tweets(E, H)', 'false,false': 'follows(A, I)', 'false,false,false': 'recursion_accounttype(A, J), tweets(A, K)'}, {'true,true': [9.356, 276, 128], 'true,false': [0.0, 0, 0], 'false,true,true': [2.95, 23, 14], 'false,true,false,true': [1.416, 6, 3], 'false,true,false,false': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [1.664, 9, 4], 'false,false,false,false': [2.133, 13, 7]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D)', 'true,true': 'follows(A, D)', 'true,true,true': 'follows(D, C)', 'false': 'follows(A, A)', 'false,false': 'follows(A, E)', 'false,false,false': 'tweets(A, F)'}, {'true,true,true,true': [7.335, 169, 79], 'true,true,true,false': [3.429, 38, 17], 'true,true,false': [4.125, 49, 26], 'true,false': [1.94, 10, 6], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [3.51, 39, 18], 'false,false,false,false': [2.702, 27, 10]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D)', 'true,false': 'follows(C, A)', 'false': 'follows(E, A)', 'false,false': 'follows(F, A)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [9.017, 244, 122], 'true,false,true': [0.0, 0, 0], 'true,false,false': [1.796, 7, 6], 'false,true': [3.331, 32, 17], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [1.664, 9, 4], 'false,false,false,false': [2.291, 21, 7]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), follows(D, D)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F), tweets(A, G)'}, {'true,true': [0.0, 0, 0], 'true,false': [9.212, 252, 128], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.47, 57, 28]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'false': 'follows(D, A), follows(A, D)', 'false,false': 'follows(E, A)', 'false,false,true': 'recursion_accounttype(E, F), tweets(E, G)', 'false,false,false': 'follows(H, A)'}, {'true': [9.233, 255, 128], 'false,true': [0.0, 0, 0], 'false,false,true,true': [3.316, 31, 17], 'false,false,true,false': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.52, 15, 11]}]]
[{'': [nan, 0.2248322951031632], 'false': [0.22190016372080842, 0.23293563834104494], 'false,true': [0.22190016372080842, nan], 'false,true,true': [0.22190016372080842, nan]}, {'': [0.22539522980523896, 0.2197431082878499], 'true': [0.22580634105280317, 0.2040816326530612], 'false': [nan, 0.2197431082878499], 'false,false': [nan, 0.2197431082878499], 'false,false,false': [0.2151073257788508, 0.23524262730947149]}, {'': [0.22522047000969958, 0.20944918140163077], 'false': [nan, 0.2094491814016321], 'false,false': [nan, 0.20944918140163077], 'false,false,false': [0.21427454513087382, 0.19311733932422478]}, {'': [0.21754876354527372, 0.24313314615736278], 'false': [0.24450848786835433, 0.24103080932090484], 'false,true': [0.24450848786835433, nan], 'false,false': [nan, 0.24103080932090484], 'false,false,false': [nan, 0.24103080932090484], 'true': [0.2163878807547592, 0.24023011377730233], 'true,false': [nan, 0.24023011377730233]}, {'': [0.2208479706854063, 0.2316683035059067], 'false': [0.2175889518806535, 0.24794240826035074], 'false,false': [nan, 0.24794240826035074], 'false,false,false': [nan, 0.24794240826035074], 'true': [0.2198708221938157, 0.23588210964069709], 'true,false': [0.23917213614594252, 0.23443262047441707]}, {'': [0.21667382481644096, 0.22930917606338147], 'false': [0.23321663065059733, 0.2220830529050724], 'false,true': [0.23526547595673383, 0.22277218027894907], 'false,true,false': [0.22277218027894907, nan], 'false,false': [nan, 0.2220830529050724], 'false,false,false': [0.2130177514792898, 0.22750000000000004], 'true': [0.21667382481644096, nan]}, {'': [0.2193686102818864, 0.20944393269463543], 'true': [0.21865790641541988, 0.23524058668188913], 'true,true': [0.21639802517876425, 0.22689536771103722], 'true,true,true': [0.21695322583890622, 0.213810987287599], 'false': [nan, 0.20944393269463543], 'false,false': [nan, 0.20944393269463543], 'false,false,false': [0.21609892851210644, 0.19727735759749637]}, {'': [0.22337033008285917, 0.21446161699463673], 'true': [0.2221406547100398, 0.2480643752860294], 'true,false': [nan, 0.2480643752860294], 'false': [0.22648859860967005, 0.19639485225535788], 'false,false': [nan, 0.19639485225535788], 'false,false,false': [0.21301775147928986, 0.18749999999999986]}, {'': [0.22332961524972733, 0.2209231585323872], 'true': [nan, 0.22332961524972755], 'false': [nan, 0.2209231585323872], 'false,false': [nan, 0.2209231585323872]}, {'': [0.2225908689416357, 0.2360085556933929], 'false': [nan, 0.23600855569339266], 'false,false': [0.2291367742257022, 0.24427275613447008], 'false,false,false': [nan, 0.24427275613447008], 'false,false,true': [0.2291367742257022, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;accounttype(A, B) :- follows(A, C), follows(C, C).;true;true
0;false;tweets(A, D), recursion_accounttype(A, E).;true;true
0;false,true;tweets(F, D).;true;true
0;false,true,true;recursion_accounttype(F, E).;true;true
1;;accounttype(A, B) :- follows(C, A).;true;true
1;true;follows(D, C).;true;true
1;false;follows(E, A), recursion_accounttype(A, F).;true;true
1;false,false;follows(G, A), recursion_accounttype(G, H).;true;true
1;false,false,false;follows(A, I), recursion_accounttype(I, J).;true;true
2;;accounttype(A, B) :- follows(C, A).;true;true
2;false;follows(A, D), follows(D, A).;true;true
2;false,false;follows(E, A).;true;true
2;false,false,false;follows(A, F).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(C, D).;true;true
3;true,false;follows(C, A).;true;true
3;false;follows(E, A).;true;true
3;false,true;follows(F, E).;true;true
3;false,false;follows(A, A), tweets(A, G).;true;true
3;false,false,false;follows(A, H).;true;true
4;;accounttype(A, B) :- recursion_accounttype(A, C), follows(A, D).;true;true
4;true;follows(D, E), follows(E, F).;true;true
4;true,false;follows(D, G).;true;true
4;false;follows(H, A).;true;true
4;false,false;follows(I, A), follows(J, I).;true;true
4;false,false,false;follows(A, K).;true;true
5;;accounttype(A, B) :- follows(A, C).;true;true
5;true;recursion_accounttype(C, D).;true;true
5;false;follows(E, A).;true;true
5;false,true;follows(F, E), follows(F, A).;true;true
5;false,true,false;recursion_accounttype(A, G), tweets(E, H).;true;true
5;false,false;follows(A, I).;true;true
5;false,false,false;recursion_accounttype(A, J), tweets(A, K).;true;true
6;;accounttype(A, B) :- follows(A, C).;true;true
6;true;follows(C, D).;true;true
6;true,true;follows(A, D).;true;true
6;true,true,true;follows(D, C).;true;true
6;false;follows(A, A).;true;true
6;false,false;follows(A, E).;true;true
6;false,false,false;tweets(A, F).;true;true
7;;accounttype(A, B) :- follows(A, C).;true;true
7;true;follows(C, D).;true;true
7;true,false;follows(C, A).;true;true
7;false;follows(E, A).;true;true
7;false,false;follows(F, A).;true;true
7;false,false,false;tweets(A, G).;true;true
8;;accounttype(A, B) :- follows(A, C).;true;true
8;true;follows(C, D), follows(D, D).;true;true
8;false;follows(A, E).;true;true
8;false,false;follows(A, F), tweets(A, G).;true;true
9;;accounttype(A, B) :- follows(A, C).;true;true
9;false;follows(D, A), follows(A, D).;true;true
9;false,false;follows(E, A).;true;true
9;false,false,true;recursion_accounttype(E, F), tweets(E, G).;true;true
9;false,false,false;follows(H, A).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(C, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), recursion_accounttype(A, E) )
%   | then if ( tweets(F, D) )
%   | | then if ( recursion_accounttype(F, E) )
%   | | | then return 0.19051887729604008;  // std dev = 8.762, 346.000 (wgt'ed) examples reached here.  /* #neg=231 #pos=115 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else if ( follows(H, A) )
%   | | | then return -0.095339436993511;  // std dev = 1.381, 43.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=2 */
%   | | | else return 0.1456489350995117;  // std dev = 4.048, 80.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=23 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.81138927733113;  // std dev = 0.409, 83.000 (wgt'ed) examples reached here.  /* #pos=83 */
%   | | else if ( tweets(A, F), follows(A, G) )
%   | | | then return -0.05737104784039919;  // std dev = 4.221, 183.000 (wgt'ed) examples reached here.  /* #neg=163 #pos=20 */
%   | | | else return -0.09960020329641639;  // std dev = 1.704, 63.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=3 */
%   | else return 0.055561556895484206;  // std dev = 0.416, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   else if ( follows(H, A), recursion_accounttype(A, I) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(J, A), recursion_accounttype(J, K) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, L), recursion_accounttype(L, M) )
%   | | | then return 0.14699783984348874;  // std dev = 5.049, 119.000 (wgt'ed) examples reached here.  /* #neg=82 #pos=37 */
%   | | | else return 0.1809261520701599;  // std dev = 2.687, 32.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=11 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then return 0.6791636735347578;  // std dev = 0.121, 70.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=69 */
%   | | else return 0.5325692651621925;  // std dev = 5.96e-08, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0.5911556823802728;  // std dev = 0.433, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | else if ( tweets(A, G), follows(A, H) )
%   | | | then return -0.06862287609861768;  // std dev = 3.569, 155.000 (wgt'ed) examples reached here.  /* #neg=141 #pos=14 */
%   | | | else return -0.0907117931595437;  // std dev = 1.704, 71.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=3 */
%   else if ( follows(A, I), follows(I, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(J, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, K) )
%   | | | then return 0.1540891005591136;  // std dev = 4.945, 109.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=37 */
%   | | | else return 0.13446806416308282;  // std dev = 2.728, 34.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=11 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.530791320117667;  // std dev = 0.183, 80.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=78 */
%   | | else return -0.012428238000012472;  // std dev = 0.346, 280.000 (wgt'ed) examples reached here.  /* #neg=236 #pos=44 */
%   | else if ( follows(C, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, A) )
%   | | | then return 0.40997328270383165;  // std dev = 0.722, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.12428687368070268;  // std dev = 1.633, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   else if ( follows(G, A) )
%   | then return 0.08836802856769303;  // std dev = 0.333, 52.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=17 */
%   | else if ( follows(A, A), tweets(A, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.13302950951890968;  // std dev = 2.688, 32.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=11 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(A, C), follows(A, D) )
%   then if ( follows(D, E), follows(E, F) )
%   | then if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.4071163045242369;  // std dev = 0.168, 79.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=77 */
%   | | else return -0.018565072128006645;  // std dev = 0.339, 289.000 (wgt'ed) examples reached here.  /* #neg=246 #pos=43 */
%   | else if ( follows(D, H) )
%   | | then return 0.20168784086976022;  // std dev = 1.049, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.18071803908566855;  // std dev = 1.392, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | | | else return 0.44030618578029507;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(J, A) )
%   | then return 0.05588895340735411;  // std dev = 0.334, 55.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=17 */
%   | else if ( follows(K, A), follows(L, K) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, M) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.0722251638282844;  // std dev = 2.764, 36.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=11 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( recursion_accounttype(C, D) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.32122443455326066;  // std dev = 0.163, 80.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=78 */
%   | | else if ( follows(F, A), follows(A, F) )
%   | | | then return -0.05786859916041852;  // std dev = 3.633, 178.000 (wgt'ed) examples reached here.  /* #neg=163 #pos=15 */
%   | | | else return 0.08604100115047708;  // std dev = 4.735, 113.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=35 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(G, A) )
%   | then if ( follows(H, G), follows(H, A) )
%   | | then return 0.06156954587146546;  // std dev = 0.305, 41.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=14 */
%   | | else return 0.13979424469536106;  // std dev = 0.414, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | else if ( follows(A, I) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( recursion_accounttype(A, J), tweets(A, K) )
%   | | | then return 0.24816175971457094;  // std dev = 1.414, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | | else return 0.074703293329084;  // std dev = 2.185, 22.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=7 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D) )
%   | then if ( follows(A, D) )
%   | | then return 0.025703862645512603;  // std dev = 0.287, 290.000 (wgt'ed) examples reached here.  /* #neg=194 #pos=96 */
%   | | else return 0.08952683776230061;  // std dev = 0.442, 85.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=26 */
%   | else if ( tweets(A, E) )
%   | | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | | then return 0.6338772180038614;  // std dev = 0.312, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.26952781615730487;  // std dev = 0.037, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return -0.13122936697196103;  // std dev = 0.400, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, H) )
%   | | | then return 0.04207408386560396;  // std dev = 2.661, 56.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=18 */
%   | | | else return 0.1014392196443059;  // std dev = 2.335, 28.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=10 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D) )
%   | then return 0.036240414326547524;  // std dev = 0.329, 372.000 (wgt'ed) examples reached here.  /* #neg=250 #pos=122 */
%   | else if ( follows(C, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, E) )
%   | | | then return 0.037708189722726076;  // std dev = 1.185, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | | | else return -0.01711534706709939;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   else if ( follows(F, A) )
%   | then if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0.38697769758841566;  // std dev = 0.242, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | else return -0.10887075739726218;  // std dev = 0.242, 32.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=2 */
%   | else if ( follows(H, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, I) )
%   | | | then return 0.053310518844510595;  // std dev = 1.595, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | | | else return 0.07263294293076501;  // std dev = 2.133, 20.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=7 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), follows(D, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.2666328069486715;  // std dev = 1.098, 64.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=63 */
%   | | | else return 0.11798719110201965;  // std dev = 1.023, 17.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | | else if ( follows(G, A), follows(A, G) )
%   | | | then return -0.0634126440673317;  // std dev = 3.630, 195.000 (wgt'ed) examples reached here.  /* #neg=180 #pos=15 */
%   | | | else return 0.023315657387227448;  // std dev = 4.753, 127.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=35 */
%   else if ( follows(A, H) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, I), tweets(A, J) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, K) )
%   | | | then return -0.006899226420196782;  // std dev = 2.525, 61.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=18 */
%   | | | else return 0.03552536026004719;  // std dev = 2.391, 31.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=10 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.19936933219979736;  // std dev = 0.169, 80.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=78 */
%   | else if ( follows(A, E), follows(E, F) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.7625296426985859;  // std dev = 0.704, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | | | else return -0.16996313439093386;  // std dev = 0.841, 272.000 (wgt'ed) examples reached here.  /* #neg=272 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.025824837797164754;  // std dev = 1.180, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | | | else return 0.09585973578462413;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   else if ( follows(H, A), follows(A, H) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(I, A) )
%   | | then return 0.01387484123118208;  // std dev = 0.276, 57.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=17 */
%   | | else if ( follows(J, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.06900004134525232;  // std dev = 2.627, 29.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=11 */


Results
   AUC ROC   = 0.983257
   AUC PR    = 0.329233
   CLL	      = -0.174514
   Precision = 0.318493 at threshold = 0.5
   Recall    = 0.738095
   F1        = 0.444976


Total learning time: 20.613 seconds
Total inference time: 83.846 seconds
AUC ROC: 0.983257


Results scoring model
   AUC ROC   = 0.976834
   AUC PR    = 0.354361
   CLL	      = -0.1932
   Precision = 0.310345 at threshold = 0.5
   Recall    = 0.634615
   F1        = 0.416842


Total scoring time: 82.458 seconds
Refined model CLL: -0.1932


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.983257
   AUC PR    = 0.329233
   CLL	      = -0.174514
   Precision = 0.318493 at threshold = 0.5
   Recall    = 0.738095
   F1        = 0.444976


Total learning time: 108.834 seconds
Total inference time: 83.846 seconds
AUC ROC: 0.983257
Total revision time: 108.834
Best scored revision CLL: -0.1932


Dataset: 7_yeast_twitter, Fold: 1, Type: Transfer (trRDN-B), Time: 00:12:27
{'AUC ROC': 0.983257, 'AUC PR': 0.329233, 'CLL': -0.174514, 'Precision': [0.318493, 0.5], 'Recall': 0.738095, 'F1': 0.444976, 'Learning time': 108.834, 'Inference time': 83.846, 'parameter_1.0': {'AUC ROC': 0.5, 'AUC PR': 0.007752, 'CLL': -0.378533, 'Precision': [nan, 0.5], 'Recall': 0.0, 'F1': nan, 'Learning time': 1.962, 'Inference time': 2.731}}


Starting fold 2

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos	 examples: 156
Target test neg examples: 24648

Amount of data: 0.2
******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(A, C), interaction(C, C).;true;true
0;true;interaction(C, A), phenotype(C, D).;false;true
0;true,false;interaction(E, A), enzyme(A, F).;true;true
0;true,false,true;complex(A, G), complex(C, H).;false;false
0;true,false,false;recursion_proteinclass(C, B).;false;false
0;false;location(A, I), phenotype(A, J).;true;false
0;false,true;location(K, I), recursion_proteinclass(K, B).;true;false
0;false,true,true;phenotype(K, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), complex(A, D).;true;true
1;true;interaction(E, C), recursion_proteinclass(E, B).;false;false
1;false;interaction(F, A), phenotype(A, G).;true;true
1;false,true;recursion_proteinclass(F, B).;false;true
1;false,true,false;interaction(H, F), recursion_proteinclass(H, B).;false;false
1;false,false;interaction(I, A), phenotype(I, J).;true;true
1;false,false,true;interaction(A, K), recursion_proteinclass(K, B).;false;false
1;false,false,false;interaction(A, L), phenotype(L, M).;false;false
2;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
2;true;complex(C, D).;false;false
2;false;interaction(A, E), interaction(E, A).;true;true
2;false,true;interaction(A, A).;false;true
2;false,true,false;enzyme(E, F), enzyme(A, F).;false;false
2;false,false;interaction(G, A), enzyme(G, H).;true;true
2;false,false,true;complex(G, I), complex(A, I).;false;false
2;false,false,false;interaction(A, J), recursion_proteinclass(J, B).;false;false
3;;proteinclass(A, B) :- complex(A, C), interaction(A, D).;true;true
3;true;interaction(D, E), recursion_proteinclass(E, B).;false;true
3;true,false;interaction(D, A).;false;false
3;false;interaction(F, A), enzyme(F, G).;true;true
3;false,true;interaction(H, F), recursion_proteinclass(H, B).;false;true
3;false,true,false;interaction(A, F).;false;false
3;false,false;interaction(A, A), location(A, I).;false;true
3;false,false,false;interaction(A, J), enzyme(J, K).;false;false
4;;proteinclass(A, B) :- phenotype(A, C), interaction(A, D).;true;true
4;true;interaction(D, E), interaction(E, F).;false;true
4;true,false;recursion_proteinclass(D, B).;false;true
4;true,false,false;enzyme(A, G), interaction(D, H).;false;false
4;false;interaction(I, A), recursion_proteinclass(I, B).;false;true
4;false,false;interaction(J, A), interaction(K, J).;true;true
4;false,false,true;recursion_proteinclass(K, B), location(J, L).;false;false
4;false,false,false;interaction(A, M), recursion_proteinclass(M, B).;false;false
5;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
5;true;enzyme(A, D), phenotype(C, E).;false;false
5;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
5;false,true;interaction(G, F), interaction(G, A).;false;true
5;false,true,false;phenotype(A, H), location(F, I).;false;false
5;false,false;interaction(A, J), complex(J, K).;true;true
5;false,false,true;interaction(J, L), recursion_proteinclass(L, B).;false;false
5;false,false,false;phenotype(A, M), location(A, N).;false;false
6;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
6;true;interaction(C, D), complex(D, E).;true;false
6;true,true;interaction(A, D).;true;false
6;true,true,true;interaction(D, C).;false;false
6;false;interaction(A, A).;false;true
6;false,false;interaction(A, F), enzyme(F, G).;true;true
6;false,false,true;phenotype(F, H), complex(F, I).;false;false
6;false,false,false;location(A, J).;false;false
7;;proteinclass(A, B) :- interaction(A, C), complex(C, D).;true;true
7;true;recursion_proteinclass(C, B).;false;true
7;true,false;interaction(C, E), recursion_proteinclass(E, B).;false;true
7;true,false,false;interaction(C, A).;false;false
7;false;interaction(F, A), recursion_proteinclass(F, B).;false;true
7;false,false;interaction(G, A), enzyme(G, H).;true;true
7;false,false,true;interaction(A, I), interaction(G, I).;false;false
7;false,false,false;location(A, J), enzyme(A, K).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;interaction(C, D), interaction(D, D).;false;false
8;false;interaction(A, E), enzyme(A, F).;true;true
8;false,true;interaction(E, G), recursion_proteinclass(G, B).;false;true
8;false,true,false;interaction(E, A).;false;false
8;false,false;interaction(A, H), location(A, I).;true;true
8;false,false,true;interaction(H, J), recursion_proteinclass(J, B).;false;false
8;false,false,false;enzyme(A, K).;false;false
9;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;false;true
9;false;interaction(D, A), interaction(A, D).;true;true
9;false,true;phenotype(A, E), phenotype(D, E).;true;true
9;false,true,true;complex(D, F).;false;false
9;false,true,false;interaction(D, D).;false;false
9;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
9;false,false,true;phenotype(G, H), location(G, I).;false;false
9;false,false,false;complex(A, J), interaction(K, A).;false;false


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(C, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), recursion_accounttype(A, E) )
%   | then if ( tweets(F, D) )
%   | | then if ( recursion_accounttype(F, E) )
%   | | | then return 0.16117923812981516;  // std dev = 3.734, 66.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=20 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.12130682983635446;  // std dev = 1.919, 19.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C) )
%   | then return 0.16542634071917922;  // std dev = 3.480, 55.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=18 */
%   | else return 0.3373744144161792;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(A, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, I), recursion_accounttype(I, J) )
%   | | | then return 0.43844581308280367;  // std dev = 1.552, 10.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=6 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then return 0.10203032362738072;  // std dev = 0.452, 66.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=19 */
%   else if ( follows(A, D), follows(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, F) )
%   | | | then return 0.14753774708411735;  // std dev = 1.932, 16.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=6 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D) )
%   | then return 0.17118016205142675;  // std dev = 3.756, 60.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=23 */
%   | else if ( follows(C, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.07970085940243055;  // std dev = 0.810, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else if ( follows(E, A) )
%   | then if ( follows(F, E) )
%   | | then return -0.0023995453548571687;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(A, C), follows(A, D) )
%   then if ( follows(D, E), follows(E, F) )
%   | then return 0.08791859951426352;  // std dev = 3.912, 70.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=23 */
%   | else if ( follows(D, G) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07268293267479996;  // std dev = 0.893, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( follows(H, A) )
%   | then return 0.7979875461664911;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( recursion_accounttype(C, D) )
%   | then return 0.03188764187326177;  // std dev = 4.103, 84.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=24 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(E, A) )
%   | then if ( follows(F, E), follows(F, A) )
%   | | then return -0.10990509177834606;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D) )
%   | then if ( follows(A, D) )
%   | | then if ( follows(D, C) )
%   | | | then return 0.03929878036460905;  // std dev = 3.026, 44.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=13 */
%   | | | else return 0.1886006213150848;  // std dev = 1.815, 13.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
%   | | else return 0.11014391109911212;  // std dev = 1.526, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | else return -0.01621112908726796;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return 0.1650054979887673;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D) )
%   | then return 0.09835198281834953;  // std dev = 3.750, 61.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=23 */
%   | else if ( follows(C, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14939324039748442;  // std dev = 0.940, 9.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   else if ( follows(E, A) )
%   | then return 0.12730575177234127;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), follows(D, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.0880206527563165;  // std dev = 3.800, 63.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=24 */
%   else if ( follows(A, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F), tweets(A, G) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.15290632046363417;  // std dev = 0.433, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then return 0.009677437883620119;  // std dev = 3.994, 74.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=24 */
%   else if ( follows(D, A), follows(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A) )
%   | | then if ( recursion_accounttype(E, F), tweets(E, G) )
%   | | | then return -0.16672877605844766;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.5
   AUC PR    = 0.006289
   CLL	      = -0.379043
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.809 seconds
Total inference time: 3.679 seconds
AUC ROC: 0.5


Results scoring model
   AUC ROC   = 0.61938
   AUC PR    = 0.013678
   CLL	      = -0.373863
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total scoring time: 1.096 seconds
Parameter learned model CLL: -0.373863


Structure after Parameter Learning
[['accounttype(A, B)', {'': 'follows(A, C), follows(C, C)', 'false': 'tweets(A, D), recursion_accounttype(A, E)', 'false,true': 'tweets(F, D)', 'false,true,true': 'recursion_accounttype(F, E)'}, {'true': [0.0, 0, 0], 'false,true,true,true': [3.734, 46, 20], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 0, 0], 'false,false': [1.919, 14, 5]}], ['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C)', 'false': 'follows(E, A), recursion_accounttype(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, H)', 'false,false,false': 'follows(A, I), recursion_accounttype(I, J)'}, {'true,true': [3.48, 37, 18], 'true,false': [0.707, 1, 1], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [1.552, 4, 6], 'false,false,false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(C, A)', 'false': 'follows(A, D), follows(D, A)', 'false,false': 'follows(E, A)', 'false,false,false': 'follows(A, F)'}, {'true': [0.452, 47, 19], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [1.932, 10, 6], 'false,false,false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D)', 'true,false': 'follows(C, A)', 'false': 'follows(E, A)', 'false,true': 'follows(F, E)'}, {'true,true': [3.756, 37, 23], 'true,false,true': [0.0, 0, 0], 'true,false,false': [0.81, 2, 1], 'false,true,true': [0.894, 4, 1], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'recursion_accounttype(A, C), follows(A, D)', 'true': 'follows(D, E), follows(E, F)', 'true,false': 'follows(D, G)', 'false': 'follows(H, A)'}, {'true,true': [3.912, 47, 23], 'true,false,true': [0.0, 0, 0], 'true,false,false': [0.893, 4, 1], 'false,true': [0.0, 0, 1], 'false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'recursion_accounttype(C, D)', 'false': 'follows(E, A)', 'false,true': 'follows(F, E), follows(F, A)'}, {'true,true': [4.103, 60, 24], 'true,false': [0.0, 0, 0], 'false,true,true': [0.866, 3, 1], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D)', 'true,true': 'follows(A, D)', 'true,true,true': 'follows(D, C)', 'false': 'follows(A, A)', 'false,false': 'follows(A, E)', 'false,false,false': 'tweets(A, F)'}, {'true,true,true,true': [3.026, 31, 13], 'true,true,true,false': [1.815, 7, 6], 'true,true,false': [1.526, 6, 4], 'true,false': [0.866, 3, 1], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.707, 1, 1], 'false,false,false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D)', 'true,false': 'follows(C, A)', 'false': 'follows(E, A)'}, {'true,true': [3.75, 38, 23], 'true,false,true': [0.0, 0, 0], 'true,false,false': [0.94, 8, 1], 'false,true': [0.707, 1, 1], 'false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), follows(D, D)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F), tweets(A, G)'}, {'true,true': [0.0, 0, 0], 'true,false': [3.8, 39, 24], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.433, 3, 1]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'false': 'follows(D, A), follows(A, D)', 'false,false': 'follows(E, A)', 'false,false,true': 'recursion_accounttype(E, F), tweets(E, G)'}, {'true': [3.994, 50, 24], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.894, 4, 1], 'false,false,true,false': [0.0, 0, 0], 'false,false,false': [0.0, 0, 0]}]]
[{'': [nan, 0.20761245674740583], 'false': [0.2112029384756653, 0.19390581717451505], 'false,true': [0.2112029384756653, nan], 'false,true,true': [0.2112029384756653, nan]}, {'': [0.22228833952559765, 0.24086171051371102], 'false': [nan, 0.24086171051371102], 'false,false': [nan, 0.24086171051371102], 'false,false,false': [0.24086171051371102, nan], 'true': [0.22024323435833323, 0.25]}, {'': [0.20439817735034585, 0.23318130794818567], 'false': [nan, 0.23318130794818567], 'false,false': [nan, 0.23318130794818567], 'false,false,false': [0.23318130794818567, nan]}, {'': [0.23476731135814527, 0.15999999999999998], 'true': [0.23516370310230877, 0.21886951189092432], 'true,false': [nan, 0.21886951189092432], 'false': [0.15999999999999998, nan], 'false,true': [0.15999999999999998, nan]}, {'': [0.2162395315132427, 0.0], 'true': [0.2185813497829219, 0.15938074707235772], 'true,false': [nan, 0.15938074707235772], 'false': [0.0, nan]}, {'': [0.20045755597085985, 0.1875], 'true': [0.20045755597085985, nan], 'false': [0.1875, nan], 'false,true': [0.1875, nan]}, {'': [0.22257003142355725, 0.25], 'false': [nan, 0.25], 'false,false': [nan, 0.25], 'false,false,false': [0.25, nan], 'true': [0.2241547483470431, 0.18749999999999997], 'true,true': [0.22240789099826433, 0.23296010667980882], 'true,true,true': [0.2081334902621198, 0.2535141289624253]}, {'': [0.2204091561715399, 0.25], 'false': [0.25, nan], 'true': [0.23054692559387707, 0.09821133024741512], 'true,false': [nan, 0.09821133024741512]}, {'': [0.22915308692423816, 0.1875], 'true': [nan, 0.2291530869242382], 'false': [nan, 0.1875], 'false,false': [nan, 0.1875]}, {'': [0.21560636852884113, 0.15999999999999998], 'false': [nan, 0.15999999999999998], 'false,false': [0.15999999999999998, nan], 'false,false,true': [0.15999999999999998, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
4;;accounttype(A, B) :- recursion_accounttype(A, C), follows(A, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.8581489350995123;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then return -0.1418510649004877;  // std dev = 2.58e-08, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | else if ( tweets(A, F), follows(G, D) )
%   | | | then return 0.039967116917694;  // std dev = 1.279, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.024815601766178873;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7194734122109542;  // std dev = 7.30e-08, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | | else if ( follows(D, F), recursion_accounttype(F, B) )
%   | | | then return 0.5198804451912219;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return -0.13611543000191806;  // std dev = 0.040, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.02176788419240575;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), tweets(C, D) )
%   | then if ( follows(A, C) )
%   | | then return 0.4442553256351735;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else return 0.5553664367462845;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.5553664367462845;  // std dev = 1.49e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), follows(F, A) )
%   | | then return -0.11231637819360642;  // std dev = 0.000, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | | else if ( tweets(A, G), tweets(E, G) )
%   | | | then return 0.072961559083174;  // std dev = 1.127, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | | else return -0.1257229926170519;  // std dev = 0.017, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( tweets(A, H) )
%   | | then return 0.47417314455902815;  // std dev = 0.741, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.09847775494360726;  // std dev = 0.792, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, A) )
%   | then return 0.4342787809506369;  // std dev = 0.048, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return 0.5391773598533365;  // std dev = 0.274, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(D, A), follows(A, D) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then return 0.5325546822997252;  // std dev = 0.282, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.10788604247454153;  // std dev = 0.084, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | else if ( follows(A, F), follows(F, G) )
%   | | then return 0.35353780506850435;  // std dev = 0.592, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.0837395894609037;  // std dev = 0.935, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(A, C), follows(A, D) )
%   then if ( follows(A, E), recursion_accounttype(E, B) )
%   | then if ( tweets(A, F) )
%   | | then if ( follows(E, A) )
%   | | | then return 0.33491270528071265;  // std dev = 0.036, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.4196008290935442;  // std dev = 0.285, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.016262850325990025;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.48473906497848035;  // std dev = 0.423, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.1397861607546489;  // std dev = 0.269, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | else return 0.13791457408052302;  // std dev = 0.642, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   else return 0.3972998860566228;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.2677341261098069;  // std dev = 0.122, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(E, A) )
%   | | | then return -0.08601133744630533;  // std dev = 0.041, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | | else return -0.14572302004402152;  // std dev = 0.324, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return 0.0630017517574143;  // std dev = 0.548, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( tweets(A, F), follows(A, G) )
%   | | then if ( tweets(H, F), recursion_accounttype(H, B) )
%   | | | then return 0.3910588739542215;  // std dev = 0.411, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.17814805483600185;  // std dev = 0.028, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.052157625617606354;  // std dev = 0.652, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return -0.17994220898893157;  // std dev = 0.031, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(C, D), follows(C, E) )
%   | then return 0.2464237217417122;  // std dev = 0.065, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else return 0.18668479221315176;  // std dev = 0.032, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(F, A), follows(A, G) )
%   | then if ( follows(A, F), follows(F, G) )
%   | | then if ( follows(F, H), follows(H, A) )
%   | | | then return -0.058797127728011836;  // std dev = 0.373, 28.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=2 */
%   | | | else return -0.0943863792869559;  // std dev = 0.013, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else return 0.0783238684593182;  // std dev = 0.543, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.2909213673293657;  // std dev = 0.211, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.17400294706802452;  // std dev = 3.73e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.11789138144745562;  // std dev = 0.640, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.16614109605674424;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( recursion_accounttype(C, B) )
%   | | then if ( follows(C, A) )
%   | | | then return 0.1851793561453716;  // std dev = 0.056, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return -0.18446343871493817;  // std dev = 1.098, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else if ( tweets(A, E), follows(C, D) )
%   | | | then return 0.2416190098493192;  // std dev = 0.302, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.35961981528330345;  // std dev = 0.235, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(C, A) )
%   | | then return -0.07775669911573448;  // std dev = 0.063, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | else return -0.15501432007871818;  // std dev = 0.039, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return -0.09943113990055308;  // std dev = 0.125, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(C, A), tweets(C, D) )
%   | | then return 0.044611295777246034;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else return 0.20330592403597855;  // std dev = 0.260, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return -0.1433843833570768;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(E, A), follows(A, F) )
%   | then if ( follows(E, F) )
%   | | then if ( follows(A, E) )
%   | | | then return -0.054771091837131296;  // std dev = 0.314, 28.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=2 */
%   | | | else return -0.13937836219208183;  // std dev = 0.013, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0.07478183405457489;  // std dev = 0.450, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.23646960106019982;  // std dev = 0.280, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.14866611407902103;  // std dev = 0.058, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return 0.1281480900328389;  // std dev = 0.312, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, A), tweets(A, D) )
%   | then if ( follows(A, E), follows(E, C) )
%   | | then if ( recursion_accounttype(E, B), follows(E, A) )
%   | | | then return -0.2500531092095968;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.1387256869395836;  // std dev = 0.031, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.14166137277513483;  // std dev = 0.020, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.22059869224079032;  // std dev = 0.202, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(F, A), follows(A, G) )
%   | then if ( follows(F, G) )
%   | | then return -0.05821927928077556;  // std dev = 0.061, 31.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=2 */
%   | | else return 0.011056250668446552;  // std dev = 0.476, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then return 0.06237835044488523;  // std dev = 0.378, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.004792348265471147;  // std dev = 0.539, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return -0.1410938813412506;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */


Results
   AUC ROC   = 0.988571
   AUC PR    = 0.412777
   CLL	      = -0.12604
   Precision = 0.4 at threshold = 0.5
   Recall    = 0.846154
   F1        = 0.54321


Total learning time: 6.192 seconds
Total inference time: 22.947 seconds
AUC ROC: 0.988571


Results scoring model
   AUC ROC   = 0.995107
   AUC PR    = 0.506975
   CLL	      = -0.111361
   Precision = 0.390625 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.561798


Total scoring time: 4.098 seconds
Refined model CLL: -0.111361


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.988571
   AUC PR    = 0.412777
   CLL	      = -0.12604
   Precision = 0.4 at threshold = 0.5
   Recall    = 0.846154
   F1        = 0.54321


Total learning time: 12.195 seconds
Total inference time: 22.947 seconds
AUC ROC: 0.988571
Total revision time: 12.195
Best scored revision CLL: -0.111361


Dataset: 7_yeast_twitter, Fold: 2, Type: Transfer (trRDN-B), Time: 00:13:06
{'AUC ROC': 0.988571, 'AUC PR': 0.412777, 'CLL': -0.12604, 'Precision': [0.4, 0.5], 'Recall': 0.846154, 'F1': 0.54321, 'Learning time': 12.195, 'Inference time': 22.947, 'parameter_0.2': {'AUC ROC': 0.5, 'AUC PR': 0.006289, 'CLL': -0.379043, 'Precision': [nan, 0.5], 'Recall': 0.0, 'F1': nan, 'Learning time': 0.809, 'Inference time': 3.679}}


Amount of data: 0.4
******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(A, C), interaction(C, C).;true;true
0;true;interaction(C, A), phenotype(C, D).;false;true
0;true,false;interaction(E, A), enzyme(A, F).;true;true
0;true,false,true;complex(A, G), complex(C, H).;false;false
0;true,false,false;recursion_proteinclass(C, B).;false;false
0;false;location(A, I), phenotype(A, J).;true;false
0;false,true;location(K, I), recursion_proteinclass(K, B).;true;false
0;false,true,true;phenotype(K, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), complex(A, D).;true;true
1;true;interaction(E, C), recursion_proteinclass(E, B).;false;false
1;false;interaction(F, A), phenotype(A, G).;true;true
1;false,true;recursion_proteinclass(F, B).;false;true
1;false,true,false;interaction(H, F), recursion_proteinclass(H, B).;false;false
1;false,false;interaction(I, A), phenotype(I, J).;true;true
1;false,false,true;interaction(A, K), recursion_proteinclass(K, B).;false;false
1;false,false,false;interaction(A, L), phenotype(L, M).;false;false
2;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
2;true;complex(C, D).;false;false
2;false;interaction(A, E), interaction(E, A).;true;true
2;false,true;interaction(A, A).;false;true
2;false,true,false;enzyme(E, F), enzyme(A, F).;false;false
2;false,false;interaction(G, A), enzyme(G, H).;true;true
2;false,false,true;complex(G, I), complex(A, I).;false;false
2;false,false,false;interaction(A, J), recursion_proteinclass(J, B).;false;false
3;;proteinclass(A, B) :- complex(A, C), interaction(A, D).;true;true
3;true;interaction(D, E), recursion_proteinclass(E, B).;false;true
3;true,false;interaction(D, A).;false;false
3;false;interaction(F, A), enzyme(F, G).;true;true
3;false,true;interaction(H, F), recursion_proteinclass(H, B).;false;true
3;false,true,false;interaction(A, F).;false;false
3;false,false;interaction(A, A), location(A, I).;false;true
3;false,false,false;interaction(A, J), enzyme(J, K).;false;false
4;;proteinclass(A, B) :- phenotype(A, C), interaction(A, D).;true;true
4;true;interaction(D, E), interaction(E, F).;false;true
4;true,false;recursion_proteinclass(D, B).;false;true
4;true,false,false;enzyme(A, G), interaction(D, H).;false;false
4;false;interaction(I, A), recursion_proteinclass(I, B).;false;true
4;false,false;interaction(J, A), interaction(K, J).;true;true
4;false,false,true;recursion_proteinclass(K, B), location(J, L).;false;false
4;false,false,false;interaction(A, M), recursion_proteinclass(M, B).;false;false
5;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
5;true;enzyme(A, D), phenotype(C, E).;false;false
5;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
5;false,true;interaction(G, F), interaction(G, A).;false;true
5;false,true,false;phenotype(A, H), location(F, I).;false;false
5;false,false;interaction(A, J), complex(J, K).;true;true
5;false,false,true;interaction(J, L), recursion_proteinclass(L, B).;false;false
5;false,false,false;phenotype(A, M), location(A, N).;false;false
6;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
6;true;interaction(C, D), complex(D, E).;true;false
6;true,true;interaction(A, D).;true;false
6;true,true,true;interaction(D, C).;false;false
6;false;interaction(A, A).;false;true
6;false,false;interaction(A, F), enzyme(F, G).;true;true
6;false,false,true;phenotype(F, H), complex(F, I).;false;false
6;false,false,false;location(A, J).;false;false
7;;proteinclass(A, B) :- interaction(A, C), complex(C, D).;true;true
7;true;recursion_proteinclass(C, B).;false;true
7;true,false;interaction(C, E), recursion_proteinclass(E, B).;false;true
7;true,false,false;interaction(C, A).;false;false
7;false;interaction(F, A), recursion_proteinclass(F, B).;false;true
7;false,false;interaction(G, A), enzyme(G, H).;true;true
7;false,false,true;interaction(A, I), interaction(G, I).;false;false
7;false,false,false;location(A, J), enzyme(A, K).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;interaction(C, D), interaction(D, D).;false;false
8;false;interaction(A, E), enzyme(A, F).;true;true
8;false,true;interaction(E, G), recursion_proteinclass(G, B).;false;true
8;false,true,false;interaction(E, A).;false;false
8;false,false;interaction(A, H), location(A, I).;true;true
8;false,false,true;interaction(H, J), recursion_proteinclass(J, B).;false;false
8;false,false,false;enzyme(A, K).;false;false
9;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;false;true
9;false;interaction(D, A), interaction(A, D).;true;true
9;false,true;phenotype(A, E), phenotype(D, E).;true;true
9;false,true,true;complex(D, F).;false;false
9;false,true,false;interaction(D, D).;false;false
9;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
9;false,false,true;phenotype(G, H), location(G, I).;false;false
9;false,false,false;complex(A, J), interaction(K, A).;false;false


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(C, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), recursion_accounttype(A, E) )
%   | then if ( tweets(F, D) )
%   | | then if ( recursion_accounttype(F, E) )
%   | | | then return 0.1726650641317693;  // std dev = 5.170, 124.000 (wgt'ed) examples reached here.  /* #neg=85 #pos=39 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.2812258581764354;  // std dev = 2.519, 26.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=11 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C) )
%   | then return 0.19653689233085997;  // std dev = 4.984, 107.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=39 */
%   | else return 0.8358042245473024;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(A, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, I), recursion_accounttype(I, J) )
%   | | | then return 0.15091083967460872;  // std dev = 2.614, 31.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then return 0.09959415945291551;  // std dev = 0.455, 135.000 (wgt'ed) examples reached here.  /* #neg=95 #pos=40 */
%   else if ( follows(A, D), follows(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, F) )
%   | | | then return 0.15299835893497565;  // std dev = 2.563, 29.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D) )
%   | then return 0.12846537595401777;  // std dev = 5.247, 122.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=42 */
%   | else if ( follows(C, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.2281412239742252;  // std dev = 1.495, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   else if ( follows(E, A) )
%   | then if ( follows(F, E) )
%   | | then return 0.23548414604969714;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(A, C), follows(A, D) )
%   then if ( follows(D, E), follows(E, F) )
%   | then return 0.07080410370234096;  // std dev = 5.385, 136.000 (wgt'ed) examples reached here.  /* #neg=94 #pos=42 */
%   | else if ( follows(D, G) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.02312682996345103;  // std dev = 1.707, 14.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=4 */
%   else if ( follows(H, A) )
%   | then return 0.249457254655071;  // std dev = 1.414, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( recursion_accounttype(C, D) )
%   | then return 0.07511112239006697;  // std dev = 5.556, 141.000 (wgt'ed) examples reached here.  /* #neg=95 #pos=46 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(E, A) )
%   | then if ( follows(F, E), follows(F, A) )
%   | | then return 0.19978252581429506;  // std dev = 1.414, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D) )
%   | then if ( follows(A, D) )
%   | | then if ( follows(D, C) )
%   | | | then return 0.01949508601306836;  // std dev = 4.478, 100.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=28 */
%   | | | else return 0.11874906556705295;  // std dev = 1.894, 15.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=6 */
%   | | else return 0.17985168356414893;  // std dev = 2.101, 18.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
%   | else return 0.029746765782381283;  // std dev = 1.672, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return 0.15621679132598645;  // std dev = 1.414, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D) )
%   | then return 0.03927380193910984;  // std dev = 5.356, 132.000 (wgt'ed) examples reached here.  /* #neg=90 #pos=42 */
%   | else if ( follows(C, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.02568586264778525;  // std dev = 1.667, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   else if ( follows(E, A) )
%   | then return -0.01619521073961805;  // std dev = 1.595, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), follows(D, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.06776936627309949;  // std dev = 5.437, 131.000 (wgt'ed) examples reached here.  /* #neg=85 #pos=46 */
%   else if ( follows(A, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F), tweets(A, G) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.0683318232246879;  // std dev = 0.462, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then return 0.0173279437497446;  // std dev = 5.602, 145.000 (wgt'ed) examples reached here.  /* #neg=99 #pos=46 */
%   else if ( follows(D, A), follows(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A) )
%   | | then if ( recursion_accounttype(E, F), tweets(E, G) )
%   | | | then return 0.039867752518401106;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.5
   AUC PR    = 0.006289
   CLL	      = -0.36622
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.018 seconds
Total inference time: 3.603 seconds
AUC ROC: 0.5


Results scoring model
   AUC ROC   = 0.541877
   AUC PR    = 0.009281
   CLL	      = -0.371358
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total scoring time: 1.496 seconds
Parameter learned model CLL: -0.371358


Structure after Parameter Learning
[['accounttype(A, B)', {'': 'follows(A, C), follows(C, C)', 'false': 'tweets(A, D), recursion_accounttype(A, E)', 'false,true': 'tweets(F, D)', 'false,true,true': 'recursion_accounttype(F, E)'}, {'true': [0.0, 0, 0], 'false,true,true,true': [5.17, 85, 39], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 0, 0], 'false,false': [2.519, 15, 11]}], ['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C)', 'false': 'follows(E, A), recursion_accounttype(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, H)', 'false,false,false': 'follows(A, I), recursion_accounttype(I, J)'}, {'true,true': [4.984, 68, 39], 'true,false': [0.0, 0, 1], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [2.614, 21, 10], 'false,false,false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(C, A)', 'false': 'follows(A, D), follows(D, A)', 'false,false': 'follows(E, A)', 'false,false,false': 'follows(A, F)'}, {'true': [0.455, 95, 40], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [2.563, 19, 10], 'false,false,false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D)', 'true,false': 'follows(C, A)', 'false': 'follows(E, A)', 'false,true': 'follows(F, E)'}, {'true,true': [5.247, 80, 42], 'true,false,true': [0.0, 0, 0], 'true,false,false': [1.495, 5, 4], 'false,true,true': [1.491, 5, 4], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'recursion_accounttype(A, C), follows(A, D)', 'true': 'follows(D, E), follows(E, F)', 'true,false': 'follows(D, G)', 'false': 'follows(H, A)'}, {'true,true': [5.385, 94, 42], 'true,false,true': [0.0, 0, 0], 'true,false,false': [1.707, 10, 4], 'false,true': [1.414, 4, 4], 'false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'recursion_accounttype(C, D)', 'false': 'follows(E, A)', 'false,true': 'follows(F, E), follows(F, A)'}, {'true,true': [5.556, 95, 46], 'true,false': [0.0, 0, 0], 'false,true,true': [1.414, 4, 4], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D)', 'true,true': 'follows(A, D)', 'true,true,true': 'follows(D, C)', 'false': 'follows(A, A)', 'false,false': 'follows(A, E)', 'false,false,false': 'tweets(A, F)'}, {'true,true,true,true': [4.478, 72, 28], 'true,true,true,false': [1.894, 9, 6], 'true,true,false': [2.101, 10, 8], 'true,false': [1.672, 9, 4], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [1.414, 4, 4], 'false,false,false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D)', 'true,false': 'follows(C, A)', 'false': 'follows(E, A)'}, {'true,true': [5.356, 90, 42], 'true,false,true': [0.0, 0, 0], 'true,false,false': [1.667, 9, 4], 'false,true': [1.595, 7, 4], 'false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), follows(D, D)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F), tweets(A, G)'}, {'true,true': [0.0, 0, 0], 'true,false': [5.437, 85, 46], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.462, 9, 4]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'false': 'follows(D, A), follows(A, D)', 'false,false': 'follows(E, A)', 'false,false,true': 'recursion_accounttype(E, F), tweets(E, G)'}, {'true': [5.602, 99, 46], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.549, 6, 4], 'false,false,true,false': [0.0, 0, 0], 'false,false,false': [0.0, 0, 0]}]]
[{'': [nan, 0.22222222222222304], 'false': [0.21559573361082338, 0.24408284023668594], 'false,true': [0.21559573361082338, nan], 'false,true,true': [0.21559573361082338, nan]}, {'': [0.2337059138902363, 0.22041430057560268], 'true': [0.23210616721681632, 0.0], 'false': [nan, 0.22041430057560268], 'false,false': [nan, 0.22041430057560268], 'false,false,false': [0.22041430057560268, nan]}, {'': [0.20702263637541723, 0.2265122675570494], 'false': [nan, 0.2265122675570494], 'false,false': [nan, 0.2265122675570494], 'false,false,false': [0.2265122675570494, nan]}, {'': [0.22783831272357263, 0.24691358024691354], 'false': [0.24691358024691354, nan], 'false,true': [0.24691358024691354, nan], 'true': [0.2256505253097981, 0.24824228799914452], 'true,false': [nan, 0.24824228799914452]}, {'': [0.212934804132793, 0.25000000000000017], 'false': [0.25000000000000017, nan], 'true': [0.21322711891076573, 0.20803421052345952], 'true,false': [nan, 0.20803421052345952]}, {'': [0.21890815185296297, 0.24999999999999994], 'false': [0.24999999999999994, nan], 'false,true': [0.24999999999999994, nan], 'true': [0.21890815185296297, nan]}, {'': [0.21451295620433003, 0.24999999999999997], 'false': [nan, 0.24999999999999997], 'false,false': [nan, 0.24999999999999997], 'false,false,false': [0.24999999999999997, nan], 'true': [0.2144250222276441, 0.2149454616161193], 'true,true': [0.20667335280342217, 0.2451606228591588], 'true,true,true': [0.20050919564437636, 0.23920134042259442]}, {'': [0.21703507494110752, 0.2314049586776859], 'false': [0.2314049586776859, nan], 'true': [0.21734037354787653, 0.213767040985044], 'true,false': [nan, 0.213767040985044]}, {'': [0.225671644482035, 0.2130177514792899], 'true': [nan, 0.22567164448203494], 'false': [nan, 0.2130177514792899], 'false,false': [nan, 0.2130177514792899]}, {'': [0.2164620573834453, 0.24000000000000013], 'false': [nan, 0.24000000000000013], 'false,false': [0.24000000000000013, nan], 'false,false,true': [0.24000000000000013, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
1;;accounttype(A, B) :- follows(C, A).;true;true
1;true;follows(D, C).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C), tweets(A, D) )
%   | then if ( tweets(C, D) )
%   | | then return 0.7914822684328456;  // std dev = 0.249, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.8581489350995123;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.14185106490048766;  // std dev = 6.66e-08, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
%   | else if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.7331489350995123;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return -0.030739953789376676;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.6944374221485929;  // std dev = 0.173, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.04199594215907337;  // std dev = 2.269, 81.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=8 */
%   | | | else return -0.1254446385283914;  // std dev = 5.27e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0.7194734122109544;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(A, H), follows(H, I) )
%   | then if ( recursion_accounttype(I, B) )
%   | | then return 0.7565413894216455;  // std dev = 0.043, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.13871984165643614;  // std dev = 0.086, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( tweets(A, J) )
%   | | then if ( tweets(K, J), recursion_accounttype(K, B) )
%   | | | then return 0.7439976143448209;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.004706995640680508;  // std dev = 0.350, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C), tweets(A, D) )
%   | then if ( follows(A, E), follows(E, C) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.5765191466078431;  // std dev = 0.016, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.31971035641557666;  // std dev = 0.857, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.5724338724924832;  // std dev = 0.013, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.5610988530821016;  // std dev = 0.006, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then return 0.6775675354415395;  // std dev = 0.123, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.7278708793606158;  // std dev = 2.11e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.12131216356103924;  // std dev = 0.109, 94.000 (wgt'ed) examples reached here.  /* #neg=94 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.11932851998413106;  // std dev = 1.312, 15.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=5 */
%   | | | else return 0.2591119963509287;  // std dev = 1.133, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), tweets(C, D) )
%   | then if ( follows(A, C) )
%   | | then return 0.3724867232721266;  // std dev = 0.251, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | else return 0.42145356033495096;  // std dev = 0.006, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.4335071292597192;  // std dev = 0.077, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else if ( follows(A, E), recursion_accounttype(E, B) )
%   | then return 0.5203858373952621;  // std dev = 0.136, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(F, A) )
%   | | then if ( follows(F, G), follows(G, A) )
%   | | | then return -0.10782738359226743;  // std dev = 0.018, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
%   | | | else return 0.03194475755596306;  // std dev = 1.472, 28.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=6 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return 0.08244202351462407;  // std dev = 1.358, 15.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=5 */
%   | | | else return 0.17505013752602805;  // std dev = 1.156, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.3380202173678389;  // std dev = 0.113, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then return 0.5285003079295392;  // std dev = 0.134, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.10279182857651883;  // std dev = 0.063, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */
%   | else if ( tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.4699322033932488;  // std dev = 0.204, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.1417891726668463;  // std dev = 0.045, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return 0.17461906187187476;  // std dev = 0.808, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.03244259169369409;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.2670619476057291;  // std dev = 0.100, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then return 0.39895763429906095;  // std dev = 0.125, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.093293131493656;  // std dev = 0.052, 74.000 (wgt'ed) examples reached here.  /* #neg=74 */
%   | else if ( tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.3589204378448337;  // std dev = 0.178, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.13099462543379417;  // std dev = 0.034, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return 0.004081279098352893;  // std dev = 0.920, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return 0.05601373347537086;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), tweets(C, D) )
%   then if ( tweets(E, D), recursion_accounttype(E, B) )
%   | then if ( follows(A, F), tweets(A, D) )
%   | | then if ( follows(E, A), follows(C, E) )
%   | | | then return 0.15225955676892047;  // std dev = 0.917, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return 0.26038169258494837;  // std dev = 0.200, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( follows(E, A) )
%   | | | then return 0.20628875139153852;  // std dev = 0.003, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.20066924197811778;  // std dev = 0.981, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else return -0.08529153486214322;  // std dev = 0.048, 77.000 (wgt'ed) examples reached here.  /* #neg=77 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.27256905181102153;  // std dev = 0.060, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.10418328200930792;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then return 0.0032167142262479;  // std dev = 0.920, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | else return -0.0028946972144048176;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.18568987478045856;  // std dev = 0.092, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return -0.10808847896180473;  // std dev = 0.853, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.2929124550997498;  // std dev = 0.092, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.08126977695832495;  // std dev = 0.134, 76.000 (wgt'ed) examples reached here.  /* #neg=76 */
%   | else if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.23129142191310884;  // std dev = 0.130, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.09951180763592019;  // std dev = 0.029, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else return 0.2798958962673502;  // std dev = 0.961, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), tweets(A, E) )
%   | then if ( recursion_accounttype(D, B), follows(D, C) )
%   | | then if ( follows(D, A), tweets(D, E) )
%   | | | then return 0.04423588730809706;  // std dev = 0.934, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.16109371285014867;  // std dev = 0.028, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.16150192614842507;  // std dev = 0.064, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(C, F), follows(F, A) )
%   | | then if ( tweets(A, G), recursion_accounttype(F, B) )
%   | | | then return -0.09969355213976283;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.14908010018397816;  // std dev = 0.001, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.18455982006841995;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( tweets(A, H) )
%   | then return -0.034386996595698306;  // std dev = 0.102, 88.000 (wgt'ed) examples reached here.  /* #neg=75 #pos=13 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then return -0.06500072637891419;  // std dev = 0.267, 21.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=4 */
%   | | else return -0.1848685299515193;  // std dev = 0.318, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.1482622708360525;  // std dev = 0.099, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return -0.23099050724000625;  // std dev = 1.005, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.2437796702237156;  // std dev = 0.089, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.07059497500644721;  // std dev = 0.044, 84.000 (wgt'ed) examples reached here.  /* #neg=84 */
%   | else if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.07788507898020572;  // std dev = 0.910, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return -0.09326595889761628;  // std dev = 0.031, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else return 0.2433773860919944;  // std dev = 0.958, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */


Results
   AUC ROC   = 0.988008
   AUC PR    = 0.356071
   CLL	      = -0.13898
   Precision = 0.336384 at threshold = 0.5
   Recall    = 0.942308
   F1        = 0.495784


Total learning time: 15.897 seconds
Total inference time: 61.402 seconds
AUC ROC: 0.988008


Results scoring model
   AUC ROC   = 0.993243
   AUC PR    = 0.410859
   CLL	      = -0.116299
   Precision = 0.318182 at threshold = 0.5
   Recall    = 0.98
   F1        = 0.480392


Total scoring time: 19.322 seconds
Refined model CLL: -0.116299


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.988008
   AUC PR    = 0.356071
   CLL	      = -0.13898
   Precision = 0.336384 at threshold = 0.5
   Recall    = 0.942308
   F1        = 0.495784


Total learning time: 37.733000000000004 seconds
Total inference time: 61.402 seconds
AUC ROC: 0.988008
Total revision time: 37.733000000000004
Best scored revision CLL: -0.116299


Dataset: 7_yeast_twitter, Fold: 2, Type: Transfer (trRDN-B), Time: 00:14:50
{'AUC ROC': 0.988008, 'AUC PR': 0.356071, 'CLL': -0.13898, 'Precision': [0.336384, 0.5], 'Recall': 0.942308, 'F1': 0.495784, 'Learning time': 37.733000000000004, 'Inference time': 61.402, 'parameter_0.4': {'AUC ROC': 0.5, 'AUC PR': 0.006289, 'CLL': -0.36622, 'Precision': [nan, 0.5], 'Recall': 0.0, 'F1': nan, 'Learning time': 1.018, 'Inference time': 3.603}}


Amount of data: 0.6
******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(A, C), interaction(C, C).;true;true
0;true;interaction(C, A), phenotype(C, D).;false;true
0;true,false;interaction(E, A), enzyme(A, F).;true;true
0;true,false,true;complex(A, G), complex(C, H).;false;false
0;true,false,false;recursion_proteinclass(C, B).;false;false
0;false;location(A, I), phenotype(A, J).;true;false
0;false,true;location(K, I), recursion_proteinclass(K, B).;true;false
0;false,true,true;phenotype(K, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), complex(A, D).;true;true
1;true;interaction(E, C), recursion_proteinclass(E, B).;false;false
1;false;interaction(F, A), phenotype(A, G).;true;true
1;false,true;recursion_proteinclass(F, B).;false;true
1;false,true,false;interaction(H, F), recursion_proteinclass(H, B).;false;false
1;false,false;interaction(I, A), phenotype(I, J).;true;true
1;false,false,true;interaction(A, K), recursion_proteinclass(K, B).;false;false
1;false,false,false;interaction(A, L), phenotype(L, M).;false;false
2;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
2;true;complex(C, D).;false;false
2;false;interaction(A, E), interaction(E, A).;true;true
2;false,true;interaction(A, A).;false;true
2;false,true,false;enzyme(E, F), enzyme(A, F).;false;false
2;false,false;interaction(G, A), enzyme(G, H).;true;true
2;false,false,true;complex(G, I), complex(A, I).;false;false
2;false,false,false;interaction(A, J), recursion_proteinclass(J, B).;false;false
3;;proteinclass(A, B) :- complex(A, C), interaction(A, D).;true;true
3;true;interaction(D, E), recursion_proteinclass(E, B).;false;true
3;true,false;interaction(D, A).;false;false
3;false;interaction(F, A), enzyme(F, G).;true;true
3;false,true;interaction(H, F), recursion_proteinclass(H, B).;false;true
3;false,true,false;interaction(A, F).;false;false
3;false,false;interaction(A, A), location(A, I).;false;true
3;false,false,false;interaction(A, J), enzyme(J, K).;false;false
4;;proteinclass(A, B) :- phenotype(A, C), interaction(A, D).;true;true
4;true;interaction(D, E), interaction(E, F).;false;true
4;true,false;recursion_proteinclass(D, B).;false;true
4;true,false,false;enzyme(A, G), interaction(D, H).;false;false
4;false;interaction(I, A), recursion_proteinclass(I, B).;false;true
4;false,false;interaction(J, A), interaction(K, J).;true;true
4;false,false,true;recursion_proteinclass(K, B), location(J, L).;false;false
4;false,false,false;interaction(A, M), recursion_proteinclass(M, B).;false;false
5;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
5;true;enzyme(A, D), phenotype(C, E).;false;false
5;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
5;false,true;interaction(G, F), interaction(G, A).;false;true
5;false,true,false;phenotype(A, H), location(F, I).;false;false
5;false,false;interaction(A, J), complex(J, K).;true;true
5;false,false,true;interaction(J, L), recursion_proteinclass(L, B).;false;false
5;false,false,false;phenotype(A, M), location(A, N).;false;false
6;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
6;true;interaction(C, D), complex(D, E).;true;false
6;true,true;interaction(A, D).;true;false
6;true,true,true;interaction(D, C).;false;false
6;false;interaction(A, A).;false;true
6;false,false;interaction(A, F), enzyme(F, G).;true;true
6;false,false,true;phenotype(F, H), complex(F, I).;false;false
6;false,false,false;location(A, J).;false;false
7;;proteinclass(A, B) :- interaction(A, C), complex(C, D).;true;true
7;true;recursion_proteinclass(C, B).;false;true
7;true,false;interaction(C, E), recursion_proteinclass(E, B).;false;true
7;true,false,false;interaction(C, A).;false;false
7;false;interaction(F, A), recursion_proteinclass(F, B).;false;true
7;false,false;interaction(G, A), enzyme(G, H).;true;true
7;false,false,true;interaction(A, I), interaction(G, I).;false;false
7;false,false,false;location(A, J), enzyme(A, K).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;interaction(C, D), interaction(D, D).;false;false
8;false;interaction(A, E), enzyme(A, F).;true;true
8;false,true;interaction(E, G), recursion_proteinclass(G, B).;false;true
8;false,true,false;interaction(E, A).;false;false
8;false,false;interaction(A, H), location(A, I).;true;true
8;false,false,true;interaction(H, J), recursion_proteinclass(J, B).;false;false
8;false,false,false;enzyme(A, K).;false;false
9;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;false;true
9;false;interaction(D, A), interaction(A, D).;true;true
9;false,true;phenotype(A, E), phenotype(D, E).;true;true
9;false,true,true;complex(D, F).;false;false
9;false,true,false;interaction(D, D).;false;false
9;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
9;false,false,true;phenotype(G, H), location(G, I).;false;false
9;false,false,false;complex(A, J), interaction(K, A).;false;false


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(C, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), recursion_accounttype(A, E) )
%   | then if ( tweets(F, D) )
%   | | then if ( recursion_accounttype(F, E) )
%   | | | then return 0.18950988184507572;  // std dev = 6.119, 169.000 (wgt'ed) examples reached here.  /* #neg=113 #pos=56 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.2381489350995123;  // std dev = 3.432, 50.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=19 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C) )
%   | then return 0.1409790870792488;  // std dev = 6.384, 191.000 (wgt'ed) examples reached here.  /* #neg=132 #pos=59 */
%   | else return 0.8334794217649416;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(A, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, I), recursion_accounttype(I, J) )
%   | | | then return 0.2258692118968073;  // std dev = 3.013, 38.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=15 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then return 0.15884836613322956;  // std dev = 0.476, 172.000 (wgt'ed) examples reached here.  /* #neg=112 #pos=60 */
%   else if ( follows(A, D), follows(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, F) )
%   | | | then return 0.1548049452108023;  // std dev = 3.103, 42.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=15 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D) )
%   | then return 0.12738944404942856;  // std dev = 6.325, 176.000 (wgt'ed) examples reached here.  /* #neg=115 #pos=61 */
%   | else if ( follows(C, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.19148081140311596;  // std dev = 2.159, 19.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=8 */
%   else if ( follows(E, A) )
%   | then if ( follows(F, E) )
%   | | then return 0.21619545114550023;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(A, C), follows(A, D) )
%   then if ( follows(D, E), follows(E, F) )
%   | then return 0.15897791013262977;  // std dev = 6.046, 153.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=61 */
%   | else if ( follows(D, G) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.032303304151408856;  // std dev = 2.376, 27.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=8 */
%   else if ( follows(H, A) )
%   | then return 0.10216316982224558;  // std dev = 1.970, 17.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=6 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( recursion_accounttype(C, D) )
%   | then return 0.0626200394925749;  // std dev = 6.784, 207.000 (wgt'ed) examples reached here.  /* #neg=138 #pos=69 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(E, A) )
%   | then if ( follows(F, E), follows(F, A) )
%   | | then return 0.1581142024613819;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D) )
%   | then if ( follows(A, D) )
%   | | then if ( follows(D, C) )
%   | | | then return 0.028950652893284867;  // std dev = 5.393, 136.000 (wgt'ed) examples reached here.  /* #neg=94 #pos=42 */
%   | | | else return 0.07778498526646896;  // std dev = 2.241, 21.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=8 */
%   | | else return 0.06722741789525415;  // std dev = 2.664, 31.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=11 */
%   | else return 0.11692822066157649;  // std dev = 2.195, 20.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=8 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return 0.125811548813523;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D) )
%   | then return 0.024538158489041267;  // std dev = 6.455, 193.000 (wgt'ed) examples reached here.  /* #neg=132 #pos=61 */
%   | else if ( follows(C, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.0936567252924464;  // std dev = 2.192, 20.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=8 */
%   else if ( follows(E, A) )
%   | then return 0.07004272280524768;  // std dev = 1.897, 15.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=6 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), follows(D, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.039931472724742;  // std dev = 6.747, 203.000 (wgt'ed) examples reached here.  /* #neg=134 #pos=69 */
%   else if ( follows(A, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F), tweets(A, G) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.0543771170563506;  // std dev = 0.490, 15.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=6 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then return 0.0045718816996712245;  // std dev = 6.887, 220.000 (wgt'ed) examples reached here.  /* #neg=151 #pos=69 */
%   else if ( follows(D, A), follows(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A) )
%   | | then if ( recursion_accounttype(E, F), tweets(E, G) )
%   | | | then return 0.07054916532724588;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.5
   AUC PR    = 0.006289
   CLL	      = -0.374313
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.133 seconds
Total inference time: 3.676 seconds
AUC ROC: 0.5


Results scoring model
   AUC ROC   = 0.550338
   AUC PR    = 0.009021
   CLL	      = -0.380666
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total scoring time: 1.967 seconds
Parameter learned model CLL: -0.380666


Structure after Parameter Learning
[['accounttype(A, B)', {'': 'follows(A, C), follows(C, C)', 'false': 'tweets(A, D), recursion_accounttype(A, E)', 'false,true': 'tweets(F, D)', 'false,true,true': 'recursion_accounttype(F, E)'}, {'true': [0.0, 0, 0], 'false,true,true,true': [6.119, 113, 56], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 0, 0], 'false,false': [3.432, 31, 19]}], ['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C)', 'false': 'follows(E, A), recursion_accounttype(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, H)', 'false,false,false': 'follows(A, I), recursion_accounttype(I, J)'}, {'true,true': [6.384, 132, 59], 'true,false': [0.0, 0, 1], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [3.013, 23, 15], 'false,false,false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(C, A)', 'false': 'follows(A, D), follows(D, A)', 'false,false': 'follows(E, A)', 'false,false,false': 'follows(A, F)'}, {'true': [0.476, 112, 60], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [3.103, 27, 15], 'false,false,false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D)', 'true,false': 'follows(C, A)', 'false': 'follows(E, A)', 'false,true': 'follows(F, E)'}, {'true,true': [6.325, 115, 61], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.159, 11, 8], 'false,true,true': [1.852, 8, 6], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'recursion_accounttype(A, C), follows(A, D)', 'true': 'follows(D, E), follows(E, F)', 'true,false': 'follows(D, G)', 'false': 'follows(H, A)'}, {'true,true': [6.046, 92, 61], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.376, 19, 8], 'false,true': [1.97, 11, 6], 'false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'recursion_accounttype(C, D)', 'false': 'follows(E, A)', 'false,true': 'follows(F, E), follows(F, A)'}, {'true,true': [6.784, 138, 69], 'true,false': [0.0, 0, 0], 'false,true,true': [1.852, 8, 6], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D)', 'true,true': 'follows(A, D)', 'true,true,true': 'follows(D, C)', 'false': 'follows(A, A)', 'false,false': 'follows(A, E)', 'false,false,false': 'tweets(A, F)'}, {'true,true,true,true': [5.393, 94, 42], 'true,true,true,false': [2.241, 13, 8], 'true,true,false': [2.664, 20, 11], 'true,false': [2.195, 12, 8], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [1.852, 8, 6], 'false,false,false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D)', 'true,false': 'follows(C, A)', 'false': 'follows(E, A)'}, {'true,true': [6.455, 132, 61], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.192, 12, 8], 'false,true': [1.897, 9, 6], 'false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), follows(D, D)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F), tweets(A, G)'}, {'true,true': [0.0, 0, 0], 'true,false': [6.747, 134, 69], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.49, 9, 6]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'false': 'follows(D, A), follows(A, D)', 'false,false': 'follows(E, A)', 'false,false,true': 'recursion_accounttype(E, F), tweets(E, G)'}, {'true': [6.887, 151, 69], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.852, 8, 6], 'false,false,true,false': [0.0, 0, 0], 'false,false,false': [0.0, 0, 0]}]]
[{'': [nan, 0.22518296115593928], 'false': [0.22156086971744715, 0.23559999999999953], 'false,true': [0.22156086971744715, nan], 'false,true,true': [0.22156086971744715, nan]}, {'': [0.21472183886418164, 0.23897777232697429], 'false': [nan, 0.23897777232697429], 'false,false': [nan, 0.23897777232697429], 'false,false,false': [0.23897777232697429, nan], 'true': [0.2133483457570651, 0.0]}, {'': [0.22670590257887546, 0.229200661080171], 'false': [nan, 0.229200661080171], 'false,false': [nan, 0.229200661080171], 'false,false,false': [0.229200661080171, nan]}, {'': [0.2294171070511095, 0.24489795918367346], 'false': [0.24489795918367346, nan], 'false,true': [0.24489795918367346, nan], 'true': [0.22729559027663815, 0.24536158630429095], 'true,false': [nan, 0.24536158630429095]}, {'': [0.23648198121676794, 0.22837370242214536], 'true': [0.23891037959110034, 0.2090815696651276], 'false': [0.22837370242214536, nan], 'true,false': [nan, 0.2090815696651276]}, {'': [0.22232685351618187, 0.24489795918367355], 'false': [0.24489795918367355, nan], 'false,true': [0.24489795918367355, nan], 'true': [0.22232685351618187, nan]}, {'': [0.22209422497926348, 0.24489795918367335], 'false': [nan, 0.24489795918367335], 'false,false': [nan, 0.24489795918367335], 'false,false,false': [0.24489795918367335, nan], 'true': [0.21952696621746168, 0.2409768032690532], 'true,true': [0.21749276875957094, 0.22898762918961119], 'true,true,true': [0.2138462025664017, 0.23904281891188534]}, {'': [0.21855832588187007, 0.23999999999999988], 'false': [0.23999999999999988, nan], 'true': [0.21586798542257643, 0.2401913149692092], 'true,false': [nan, 0.2401913149692092]}, {'': [0.22421798951685842, 0.23999999999999996], 'false': [nan, 0.23999999999999996], 'false,false': [nan, 0.23999999999999996], 'true': [nan, 0.22421798951685842]}, {'': [0.21558691807161892, 0.2448979591836735], 'false': [nan, 0.2448979591836735], 'false,false': [0.2448979591836735, nan], 'false,false,true': [0.2448979591836735, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
1;;accounttype(A, B) :- follows(C, A).;true;true
1;true;follows(D, C).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.8581489350995121;  // std dev = 2.06e-07, 47.000 (wgt'ed) examples reached here.  /* #pos=47 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F), follows(E, D) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.14185106490048785;  // std dev = 0.000, 128.000 (wgt'ed) examples reached here.  /* #neg=128 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.2391013160518933;  // std dev = 2.225, 21.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=8 */
%   | | | else return 0.17064893509951234;  // std dev = 1.854, 16.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=5 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.698196816466274;  // std dev = 0.144, 47.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=46 */
%   | | else if ( tweets(A, F) )
%   | | | then return -0.0595557259427965;  // std dev = 2.462, 114.000 (wgt'ed) examples reached here.  /* #neg=105 #pos=9 */
%   | | | else return 0.012228470684477575;  // std dev = 1.578, 25.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=4 */
%   | else return 0.15619471171805724;  // std dev = 0.690, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else if ( follows(A, G), follows(G, H) )
%   | then if ( recursion_accounttype(H, B) )
%   | | then return 0.8176685505675676;  // std dev = 0.060, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.17214652221070473;  // std dev = 0.013, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else if ( tweets(A, I) )
%   | | then if ( tweets(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.826482270457523;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.173517729542477;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.16941405511326244;  // std dev = 0.471, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C), tweets(C, D) )
%   | then if ( tweets(A, E) )
%   | | then return 0.518947317220124;  // std dev = 0.200, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | | else return 0.4495028727756795;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else return 0.5685067289747102;  // std dev = 0.122, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.7363719184945339;  // std dev = 0.079, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return -0.12021008248834292;  // std dev = 0.032, 134.000 (wgt'ed) examples reached here.  /* #neg=134 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.6638751274701172;  // std dev = 0.081, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.15014016699964172;  // std dev = 0.000286, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.13637673241118295;  // std dev = 0.963, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return 0.11152304040832402;  // std dev = 1.449, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(C, D) )
%   | then return 0.4341985366913916;  // std dev = 0.137, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | else return 0.1694936185029685;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(A, F), tweets(A, G) )
%   | | | then return 0.25901000936346324;  // std dev = 0.851, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.5667536034717086;  // std dev = 0.070, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return -0.10890255563028259;  // std dev = 0.048, 129.000 (wgt'ed) examples reached here.  /* #neg=129 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.5047010397184737;  // std dev = 0.089, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.13197723155160693;  // std dev = 0.000295, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.04636571297120082;  // std dev = 1.006, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | | else return 0.06659748336636363;  // std dev = 1.477, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.3351921908866238;  // std dev = 0.151, 47.000 (wgt'ed) examples reached here.  /* #pos=47 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then return 0.4441958473874673;  // std dev = 0.177, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return -0.0988919124075626;  // std dev = 0.042, 107.000 (wgt'ed) examples reached here.  /* #neg=107 */
%   | else if ( tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.381221582562643;  // std dev = 0.082, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.11756677616663572;  // std dev = 0.000275, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return 0.24343623214854462;  // std dev = 0.818, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.15775882388327345;  // std dev = 1.369, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(C, D) )
%   then if ( recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), recursion_accounttype(C, B) )
%   | | then if ( follows(C, A) )
%   | | | then return 0.2251315285266991;  // std dev = 0.986, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   | | | else return -0.07616216268532428;  // std dev = 1.239, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( follows(F, A), follows(D, F) )
%   | | | then return 0.2899033550270616;  // std dev = 0.166, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | | else return 0.38017784668199395;  // std dev = 0.360, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return -0.095394135089476;  // std dev = 0.250, 137.000 (wgt'ed) examples reached here.  /* #neg=137 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.2583804696554965;  // std dev = 0.049, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(H, A) )
%   | | then return -0.0887162422359544;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.16922118934510713;  // std dev = 0.476, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.18331202376279607;  // std dev = 1.309, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(C, D), follows(E, C) )
%   | then if ( tweets(A, D), follows(A, E) )
%   | | then if ( tweets(E, D) )
%   | | | then return 0.21613136740221708;  // std dev = 0.030, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return 0.019288867060237313;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.21293126913246083;  // std dev = 0.037, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else return 0.26277584109531005;  // std dev = 0.023, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(F, A) )
%   | then return -0.05552367397497894;  // std dev = 0.121, 152.000 (wgt'ed) examples reached here.  /* #neg=139 #pos=13 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( tweets(A, I), tweets(G, I) )
%   | | | then return 0.019899865940535166;  // std dev = 0.591, 14.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=5 */
%   | | | else return 0.17256719666912798;  // std dev = 0.692, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.14033968006711658;  // std dev = 0.456, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.14782167685438072;  // std dev = 1.309, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.19154703709748308;  // std dev = 0.078, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | else return 0.32711111230155016;  // std dev = 0.267, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(A, E), follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(F, A) )
%   | | | then return 0.1680546864797353;  // std dev = 0.000388, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.2697206844602602;  // std dev = 0.017, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return -0.07822340589405138;  // std dev = 0.020, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */
%   | else if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.20542959730453658;  // std dev = 0.126, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return -0.10011243962642298;  // std dev = 0.108, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.051287009113984434;  // std dev = 0.758, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | | else return 0.18845881674902865;  // std dev = 1.225, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), tweets(C, D) )
%   | then if ( follows(A, E), follows(E, C) )
%   | | then if ( follows(A, C), recursion_accounttype(E, B) )
%   | | | then return 0.15942058638326478;  // std dev = 0.027, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.034072020580363446;  // std dev = 1.251, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | else return 0.15242741060906406;  // std dev = 0.052, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.16157587006663962;  // std dev = 0.036, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   else if ( follows(F, A) )
%   | then return -0.04905554176494915;  // std dev = 0.112, 145.000 (wgt'ed) examples reached here.  /* #neg=132 #pos=13 */
%   | else if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.19403090222199224;  // std dev = 0.067, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.10179146310048608;  // std dev = 0.061, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return -3.0146704904653504E-4;  // std dev = 0.772, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return -0.01998947134616063;  // std dev = 1.414, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( follows(C, A) )
%   | | then return 0.14597488277948759;  // std dev = 0.094, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | else return 0.2946515744671374;  // std dev = 0.215, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return -0.07064555930508279;  // std dev = 0.903, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then return 0.13530494080168826;  // std dev = 0.039, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( follows(F, A) )
%   | | then if ( follows(F, G), follows(G, A) )
%   | | | then return -0.0658207191159091;  // std dev = 0.299, 89.000 (wgt'ed) examples reached here.  /* #neg=88 #pos=1 */
%   | | | else return -0.00973293838694728;  // std dev = 0.755, 39.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=8 */
%   | | else if ( tweets(A, H) )
%   | | | then return -0.011631719354599137;  // std dev = 0.628, 25.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=8 */
%   | | | else return -0.02610170384980242;  // std dev = 1.653, 15.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=5 */


Results
   AUC ROC   = 0.993669
   AUC PR    = 0.425163
   CLL	      = -0.128426
   Precision = 0.341067 at threshold = 0.5
   Recall    = 0.942308
   F1        = 0.500852


Total learning time: 11.434 seconds
Total inference time: 21.726 seconds
AUC ROC: 0.993669


Results scoring model
   AUC ROC   = 0.99318
   AUC PR    = 0.442435
   CLL	      = -0.11731
   Precision = 0.344498 at threshold = 0.5
   Recall    = 0.96
   F1        = 0.507042


Total scoring time: 11.796 seconds
Refined model CLL: -0.11731


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.993669
   AUC PR    = 0.425163
   CLL	      = -0.128426
   Precision = 0.341067 at threshold = 0.5
   Recall    = 0.942308
   F1        = 0.500852


Total learning time: 26.33 seconds
Total inference time: 21.726 seconds
AUC ROC: 0.993669
Total revision time: 26.33
Best scored revision CLL: -0.11731


Dataset: 7_yeast_twitter, Fold: 2, Type: Transfer (trRDN-B), Time: 00:15:42
{'AUC ROC': 0.993669, 'AUC PR': 0.425163, 'CLL': -0.128426, 'Precision': [0.341067, 0.5], 'Recall': 0.942308, 'F1': 0.500852, 'Learning time': 26.33, 'Inference time': 21.726, 'parameter_0.6': {'AUC ROC': 0.5, 'AUC PR': 0.006289, 'CLL': -0.374313, 'Precision': [nan, 0.5], 'Recall': 0.0, 'F1': nan, 'Learning time': 1.133, 'Inference time': 3.676}}


Amount of data: 0.8
******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(A, C), interaction(C, C).;true;true
0;true;interaction(C, A), phenotype(C, D).;false;true
0;true,false;interaction(E, A), enzyme(A, F).;true;true
0;true,false,true;complex(A, G), complex(C, H).;false;false
0;true,false,false;recursion_proteinclass(C, B).;false;false
0;false;location(A, I), phenotype(A, J).;true;false
0;false,true;location(K, I), recursion_proteinclass(K, B).;true;false
0;false,true,true;phenotype(K, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), complex(A, D).;true;true
1;true;interaction(E, C), recursion_proteinclass(E, B).;false;false
1;false;interaction(F, A), phenotype(A, G).;true;true
1;false,true;recursion_proteinclass(F, B).;false;true
1;false,true,false;interaction(H, F), recursion_proteinclass(H, B).;false;false
1;false,false;interaction(I, A), phenotype(I, J).;true;true
1;false,false,true;interaction(A, K), recursion_proteinclass(K, B).;false;false
1;false,false,false;interaction(A, L), phenotype(L, M).;false;false
2;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
2;true;complex(C, D).;false;false
2;false;interaction(A, E), interaction(E, A).;true;true
2;false,true;interaction(A, A).;false;true
2;false,true,false;enzyme(E, F), enzyme(A, F).;false;false
2;false,false;interaction(G, A), enzyme(G, H).;true;true
2;false,false,true;complex(G, I), complex(A, I).;false;false
2;false,false,false;interaction(A, J), recursion_proteinclass(J, B).;false;false
3;;proteinclass(A, B) :- complex(A, C), interaction(A, D).;true;true
3;true;interaction(D, E), recursion_proteinclass(E, B).;false;true
3;true,false;interaction(D, A).;false;false
3;false;interaction(F, A), enzyme(F, G).;true;true
3;false,true;interaction(H, F), recursion_proteinclass(H, B).;false;true
3;false,true,false;interaction(A, F).;false;false
3;false,false;interaction(A, A), location(A, I).;false;true
3;false,false,false;interaction(A, J), enzyme(J, K).;false;false
4;;proteinclass(A, B) :- phenotype(A, C), interaction(A, D).;true;true
4;true;interaction(D, E), interaction(E, F).;false;true
4;true,false;recursion_proteinclass(D, B).;false;true
4;true,false,false;enzyme(A, G), interaction(D, H).;false;false
4;false;interaction(I, A), recursion_proteinclass(I, B).;false;true
4;false,false;interaction(J, A), interaction(K, J).;true;true
4;false,false,true;recursion_proteinclass(K, B), location(J, L).;false;false
4;false,false,false;interaction(A, M), recursion_proteinclass(M, B).;false;false
5;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
5;true;enzyme(A, D), phenotype(C, E).;false;false
5;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
5;false,true;interaction(G, F), interaction(G, A).;false;true
5;false,true,false;phenotype(A, H), location(F, I).;false;false
5;false,false;interaction(A, J), complex(J, K).;true;true
5;false,false,true;interaction(J, L), recursion_proteinclass(L, B).;false;false
5;false,false,false;phenotype(A, M), location(A, N).;false;false
6;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
6;true;interaction(C, D), complex(D, E).;true;false
6;true,true;interaction(A, D).;true;false
6;true,true,true;interaction(D, C).;false;false
6;false;interaction(A, A).;false;true
6;false,false;interaction(A, F), enzyme(F, G).;true;true
6;false,false,true;phenotype(F, H), complex(F, I).;false;false
6;false,false,false;location(A, J).;false;false
7;;proteinclass(A, B) :- interaction(A, C), complex(C, D).;true;true
7;true;recursion_proteinclass(C, B).;false;true
7;true,false;interaction(C, E), recursion_proteinclass(E, B).;false;true
7;true,false,false;interaction(C, A).;false;false
7;false;interaction(F, A), recursion_proteinclass(F, B).;false;true
7;false,false;interaction(G, A), enzyme(G, H).;true;true
7;false,false,true;interaction(A, I), interaction(G, I).;false;false
7;false,false,false;location(A, J), enzyme(A, K).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;interaction(C, D), interaction(D, D).;false;false
8;false;interaction(A, E), enzyme(A, F).;true;true
8;false,true;interaction(E, G), recursion_proteinclass(G, B).;false;true
8;false,true,false;interaction(E, A).;false;false
8;false,false;interaction(A, H), location(A, I).;true;true
8;false,false,true;interaction(H, J), recursion_proteinclass(J, B).;false;false
8;false,false,false;enzyme(A, K).;false;false
9;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;false;true
9;false;interaction(D, A), interaction(A, D).;true;true
9;false,true;phenotype(A, E), phenotype(D, E).;true;true
9;false,true,true;complex(D, F).;false;false
9;false,true,false;interaction(D, D).;false;false
9;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
9;false,false,true;phenotype(G, H), location(G, I).;false;false
9;false,false,false;complex(A, J), interaction(K, A).;false;false


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(C, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), recursion_accounttype(A, E) )
%   | then if ( tweets(F, D) )
%   | | then if ( recursion_accounttype(F, E) )
%   | | | then return 0.18423589162125278;  // std dev = 7.109, 230.000 (wgt'ed) examples reached here.  /* #neg=155 #pos=75 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.17460463130204304;  // std dev = 4.134, 79.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=25 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C) )
%   | then return 0.14844665649221436;  // std dev = 7.455, 258.000 (wgt'ed) examples reached here.  /* #neg=177 #pos=81 */
%   | else return 0.16754345316045546;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(A, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, I), recursion_accounttype(I, J) )
%   | | | then return 0.20218028998321433;  // std dev = 3.374, 49.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=18 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then return 0.16943800492228792;  // std dev = 0.479, 230.000 (wgt'ed) examples reached here.  /* #neg=148 #pos=82 */
%   else if ( follows(A, D), follows(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, F) )
%   | | | then return 0.20493513217545387;  // std dev = 3.286, 45.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=18 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D) )
%   | then return 0.10245805156823178;  // std dev = 7.521, 261.000 (wgt'ed) examples reached here.  /* #neg=178 #pos=83 */
%   | else if ( follows(C, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.1882901974368371;  // std dev = 2.419, 24.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=10 */
%   else if ( follows(E, A) )
%   | then if ( follows(F, E) )
%   | | then return 0.32393941958490874;  // std dev = 1.797, 13.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=7 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(A, C), follows(A, D) )
%   then if ( follows(D, E), follows(E, F) )
%   | then return 0.10557871477270246;  // std dev = 7.403, 245.000 (wgt'ed) examples reached here.  /* #neg=162 #pos=83 */
%   | else if ( follows(D, G) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.1373764037040276;  // std dev = 2.451, 25.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=10 */
%   else if ( follows(H, A) )
%   | then return 0.1925707985205297;  // std dev = 1.932, 15.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=7 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( recursion_accounttype(C, D) )
%   | then return 0.06764893967135074;  // std dev = 7.923, 287.000 (wgt'ed) examples reached here.  /* #neg=194 #pos=93 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(E, A) )
%   | then if ( follows(F, E), follows(F, A) )
%   | | then return 0.26930847238669303;  // std dev = 1.708, 12.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=7 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D) )
%   | then if ( follows(A, D) )
%   | | then if ( follows(D, C) )
%   | | | then return 0.03457552995585172;  // std dev = 6.433, 197.000 (wgt'ed) examples reached here.  /* #neg=138 #pos=59 */
%   | | | else return 0.13257123761338485;  // std dev = 2.448, 25.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=10 */
%   | | else return 0.10572002920123828;  // std dev = 2.955, 37.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=14 */
%   | else return 0.0668222062429697;  // std dev = 2.508, 27.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=10 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.10547979126505419;  // std dev = 2.262, 26.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D) )
%   | then return 0.061580439273851414;  // std dev = 7.404, 245.000 (wgt'ed) examples reached here.  /* #neg=162 #pos=83 */
%   | else if ( follows(C, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.08087722011926615;  // std dev = 2.453, 25.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=10 */
%   else if ( follows(E, A) )
%   | then return 0.06142368398255404;  // std dev = 2.029, 17.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), follows(D, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.0418869701003915;  // std dev = 7.856, 276.000 (wgt'ed) examples reached here.  /* #neg=183 #pos=93 */
%   else if ( follows(A, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F), tweets(A, G) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.1230671073684721;  // std dev = 0.428, 29.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=7 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then return 0.028706491850176055;  // std dev = 7.881, 280.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=93 */
%   else if ( follows(D, A), follows(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A) )
%   | | then if ( recursion_accounttype(E, F), tweets(E, G) )
%   | | | then return 0.013556543885496894;  // std dev = 2.133, 20.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.5
   AUC PR    = 0.006289
   CLL	      = -0.365992
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.39 seconds
Total inference time: 3.739 seconds
AUC ROC: 0.5


Results scoring model
   AUC ROC   = 0.519347
   AUC PR    = 0.008341
   CLL	      = -0.378189
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total scoring time: 2.531 seconds
Parameter learned model CLL: -0.378189


Structure after Parameter Learning
[['accounttype(A, B)', {'': 'follows(A, C), follows(C, C)', 'false': 'tweets(A, D), recursion_accounttype(A, E)', 'false,true': 'tweets(F, D)', 'false,true,true': 'recursion_accounttype(F, E)'}, {'true': [0.0, 0, 0], 'false,true,true,true': [7.109, 155, 75], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 0, 0], 'false,false': [4.134, 54, 25]}], ['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C)', 'false': 'follows(E, A), recursion_accounttype(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, H)', 'false,false,false': 'follows(A, I), recursion_accounttype(I, J)'}, {'true,true': [7.455, 177, 81], 'true,false': [0.816, 2, 1], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [3.374, 31, 18], 'false,false,false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(C, A)', 'false': 'follows(A, D), follows(D, A)', 'false,false': 'follows(E, A)', 'false,false,false': 'follows(A, F)'}, {'true': [0.479, 148, 82], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [3.286, 27, 18], 'false,false,false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D)', 'true,false': 'follows(C, A)', 'false': 'follows(E, A)', 'false,true': 'follows(F, E)'}, {'true,true': [7.521, 178, 83], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.419, 14, 10], 'false,true,true': [1.797, 6, 7], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'recursion_accounttype(A, C), follows(A, D)', 'true': 'follows(D, E), follows(E, F)', 'true,false': 'follows(D, G)', 'false': 'follows(H, A)'}, {'true,true': [7.403, 162, 83], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.451, 15, 10], 'false,true': [1.932, 8, 7], 'false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'recursion_accounttype(C, D)', 'false': 'follows(E, A)', 'false,true': 'follows(F, E), follows(F, A)'}, {'true,true': [7.923, 194, 93], 'true,false': [0.0, 0, 0], 'false,true,true': [1.708, 5, 7], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D)', 'true,true': 'follows(A, D)', 'true,true,true': 'follows(D, C)', 'false': 'follows(A, A)', 'false,false': 'follows(A, E)', 'false,false,false': 'tweets(A, F)'}, {'true,true,true,true': [6.433, 138, 59], 'true,true,true,false': [2.448, 15, 10], 'true,true,false': [2.955, 23, 14], 'true,false': [2.508, 17, 10], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [2.262, 19, 7], 'false,false,false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D)', 'true,false': 'follows(C, A)', 'false': 'follows(E, A)'}, {'true,true': [7.404, 162, 83], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.453, 15, 10], 'false,true': [2.029, 10, 7], 'false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), follows(D, D)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F), tweets(A, G)'}, {'true,true': [0.0, 0, 0], 'true,false': [7.856, 183, 93], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.428, 22, 7]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'false': 'follows(D, A), follows(A, D)', 'false,false': 'follows(E, A)', 'false,false,true': 'recursion_accounttype(E, F), tweets(E, G)'}, {'true': [7.881, 187, 93], 'false,true': [0.0, 0, 0], 'false,false,true,true': [2.133, 13, 7], 'false,false,true,false': [0.0, 0, 0], 'false,false,false': [0.0, 0, 0]}]]
[{'': [nan, 0.2188917166766175], 'false': [0.21975425330812864, 0.21631148854350374], 'false,true': [0.21975425330812864, nan], 'false,true,true': [0.21975425330812864, nan]}, {'': [0.21547715402639311, 0.23232507838030617], 'false': [nan, 0.23232507838030617], 'false,false': [nan, 0.23232507838030617], 'false,false,false': [0.23232507838030617, nan], 'true': [0.2153945311888719, 0.2222222222222223]}, {'': [0.2294274610617346, 0.23998711394799233], 'false': [nan, 0.23998711394799233], 'false,false': [nan, 0.23998711394799233], 'false,false,false': [0.23998711394799233, nan]}, {'': [0.21955789885631402, 0.24852071005917167], 'false': [0.24852071005917167, nan], 'false,true': [0.24852071005917167, nan], 'true': [0.2167124846320543, 0.24375501347141612], 'true,false': [nan, 0.24375501347141612]}, {'': [0.2253156103721967, 0.24888888888888883], 'false': [0.24888888888888883, nan], 'true': [0.22369687546167286, 0.24026173919816032], 'true,false': [nan, 0.24026173919816032]}, {'': [0.21874901780242692, 0.2430555555555555], 'false': [0.2430555555555555, nan], 'false,true': [0.2430555555555555, nan], 'true': [0.21874901780242692, nan]}, {'': [0.219333429430181, 0.1967455621301775], 'true': [0.2178948043743369, 0.23298925009036747], 'true,true': [0.21435312971658552, 0.2360479219273243], 'true,true,true': [0.2100648005117291, 0.2396234419242671], 'false': [nan, 0.1967455621301775], 'false,false': [nan, 0.1967455621301775], 'false,false,false': [0.1967455621301775, nan]}, {'': [0.22534863916548648, 0.24221453287197234], 'false': [0.24221453287197234, nan], 'true': [0.22374116558628648, 0.2407639928009279], 'true,false': [nan, 0.2407639928009279]}, {'': [0.2236369637942251, 0.18311533888228296], 'true': [nan, 0.22363696379422504], 'false': [nan, 0.18311533888228296], 'false,false': [nan, 0.18311533888228296]}, {'': [0.22180419934920195, 0.22749999999999998], 'false': [nan, 0.22749999999999998], 'false,false': [0.22749999999999998, nan], 'false,false,true': [0.22749999999999998, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;accounttype(A, B) :- follows(A, C), follows(C, C).;true;true
0;false;tweets(A, D), recursion_accounttype(A, E).;true;true
0;false,true;tweets(F, D).;true;true
0;false,true,true;recursion_accounttype(F, E).;true;true
1;;accounttype(A, B) :- follows(C, A).;true;true
1;true;follows(D, C).;true;true
1;false;follows(E, A), recursion_accounttype(A, F).;true;true
1;false,false;follows(G, A), recursion_accounttype(G, H).;true;true
1;false,false,false;follows(A, I), recursion_accounttype(I, J).;true;true
2;;accounttype(A, B) :- follows(C, A).;true;true
2;false;follows(A, D), follows(D, A).;true;true
2;false,false;follows(E, A).;true;true
2;false,false,false;follows(A, F).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(C, D).;true;true
3;true,false;follows(C, A).;true;true
3;false;follows(E, A).;true;true
3;false,true;follows(F, E).;true;true
4;;accounttype(A, B) :- recursion_accounttype(A, C), follows(A, D).;true;true
4;true;follows(D, E), follows(E, F).;true;true
4;true,false;follows(D, G).;true;true
4;false;follows(H, A).;true;true
5;;accounttype(A, B) :- follows(A, C).;true;true
5;true;recursion_accounttype(C, D).;true;true
5;false;follows(E, A).;true;true
5;false,true;follows(F, E), follows(F, A).;true;true
6;;accounttype(A, B) :- follows(A, C).;true;true
6;true;follows(C, D).;true;true
6;true,true;follows(A, D).;true;true
6;true,true,true;follows(D, C).;true;true
6;false;follows(A, A).;true;true
6;false,false;follows(A, E).;true;true
6;false,false,false;tweets(A, F).;true;true
7;;accounttype(A, B) :- follows(A, C).;true;true
7;true;follows(C, D).;true;true
7;true,false;follows(C, A).;true;true
7;false;follows(E, A).;true;true
8;;accounttype(A, B) :- follows(A, C).;true;true
8;true;follows(C, D), follows(D, D).;true;true
8;false;follows(A, E).;true;true
8;false,false;follows(A, F), tweets(A, G).;true;true
9;;accounttype(A, B) :- follows(A, C).;true;true
9;false;follows(D, A), follows(A, D).;true;true
9;false,false;follows(E, A).;true;true
9;false,false,true;recursion_accounttype(E, F), tweets(E, G).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(C, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), recursion_accounttype(A, E) )
%   | then if ( tweets(F, D) )
%   | | then if ( recursion_accounttype(F, E) )
%   | | | then return 0.17064893509951368;  // std dev = 7.181, 240.000 (wgt'ed) examples reached here.  /* #neg=165 #pos=75 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else if ( follows(H, A) )
%   | | | then return -0.02756535061477346;  // std dev = 1.882, 35.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=4 */
%   | | | else return 0.20814893509951235;  // std dev = 2.133, 20.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=7 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), follows(F, E) )
%   | | | then return 0.7966679182006834;  // std dev = 1.021, 52.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=51 */
%   | | | else return 0.7041610094595229;  // std dev = 0.927, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | else if ( follows(A, G), follows(G, H) )
%   | | | then return -0.04820517226428286;  // std dev = 4.115, 171.000 (wgt'ed) examples reached here.  /* #neg=152 #pos=19 */
%   | | | else return -0.1639192782200711;  // std dev = 1.05e-08, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else return 0.33608072177992887;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else if ( follows(I, A), recursion_accounttype(A, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(K, A), recursion_accounttype(K, L) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, M), recursion_accounttype(M, N) )
%   | | | then return 0.1243047757263185;  // std dev = 3.575, 62.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=18 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then return 0.7010614994698252;  // std dev = 0.095, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | else return 0.47873036198717517;  // std dev = 0.246, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | else if ( follows(A, F), follows(F, G) )
%   | | then if ( follows(G, A), follows(F, A) )
%   | | | then return -0.13370458384988318;  // std dev = 1.397, 104.000 (wgt'ed) examples reached here.  /* #neg=102 #pos=2 */
%   | | | else return 0.08572829348338842;  // std dev = 3.600, 72.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=17 */
%   | | else return -0.1426722377003075;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   else if ( follows(A, H), follows(H, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(I, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, J) )
%   | | | then return 0.17573069738921465;  // std dev = 3.396, 50.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=18 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.561991451795356;  // std dev = 0.126, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | else return -0.03326048744943153;  // std dev = 0.304, 202.000 (wgt'ed) examples reached here.  /* #neg=175 #pos=27 */
%   | else if ( follows(C, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return 0.22391570766727156;  // std dev = 1.588, 11.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=5 */
%   | | | else return 0.20112100504910188;  // std dev = 1.708, 12.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=5 */
%   else if ( follows(G, A) )
%   | then if ( follows(H, G) )
%   | | then if ( follows(I, A), recursion_accounttype(I, B) )
%   | | | then return 0.5328579888089272;  // std dev = 2.98e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.12609428397198752;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(A, C), follows(A, D) )
%   then if ( follows(D, E), follows(E, F) )
%   | then if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.43233737865542826;  // std dev = 0.139, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | else if ( follows(H, A), follows(A, H) )
%   | | | then return -0.03189607674157985;  // std dev = 3.474, 140.000 (wgt'ed) examples reached here.  /* #neg=123 #pos=17 */
%   | | | else return 0.03324122479388782;  // std dev = 2.530, 39.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=10 */
%   | else if ( follows(D, I) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, J) )
%   | | | then return 0.3568469107888128;  // std dev = 1.279, 8.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | | | else return 0.10565535139474529;  // std dev = 1.793, 14.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=5 */
%   else if ( follows(K, A) )
%   | then if ( follows(L, A), recursion_accounttype(L, B) )
%   | | then return 0.4010153318140781;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return -0.11284176174043678;  // std dev = 5.27e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( recursion_accounttype(C, D) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, A) )
%   | | | then return 0.21933062784908502;  // std dev = 1.633, 49.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=46 */
%   | | | else return 0.5330786835922279;  // std dev = 0.916, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | else if ( follows(F, A), follows(A, F) )
%   | | | then return -0.040507132575423536;  // std dev = 3.507, 158.000 (wgt'ed) examples reached here.  /* #neg=141 #pos=17 */
%   | | | else return 0.045859582129824675;  // std dev = 3.537, 64.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=20 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(G, A) )
%   | then if ( follows(H, G), follows(H, A) )
%   | | then if ( follows(I, A), recursion_accounttype(I, B) )
%   | | | then return 0.1845440702483323;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return -0.10202918879598402;  // std dev = 5.27e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D) )
%   | then if ( follows(A, D) )
%   | | then if ( follows(D, C) )
%   | | | then return 0.03905900677246077;  // std dev = 3.692, 167.000 (wgt'ed) examples reached here.  /* #neg=108 #pos=59 */
%   | | | else return 0.12948652595983545;  // std dev = 1.292, 19.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=10 */
%   | | else if ( tweets(A, E) )
%   | | | then return 0.21499881314049862;  // std dev = 2.302, 24.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=10 */
%   | | | else return 0.008932753296838857;  // std dev = 1.440, 15.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=4 */
%   | else if ( follows(F, A) )
%   | | then return -0.08993780052122262;  // std dev = 0.549, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.02352303138661901;  // std dev = 1.664, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | | | else return -0.053793351319206616;  // std dev = 1.966, 22.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=5 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.028479421765168045;  // std dev = 0.172, 21.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=7 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.1875127747278803;  // std dev = 1.387, 49.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=47 */
%   | | | else return 0.49782431265866417;  // std dev = 0.120, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( follows(G, A) )
%   | | | then return -0.04339170114760143;  // std dev = 3.649, 173.000 (wgt'ed) examples reached here.  /* #neg=153 #pos=20 */
%   | | | else return 0.0014983225967322826;  // std dev = 2.275, 29.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=7 */
%   | else if ( follows(C, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, H) )
%   | | | then return 0.17444444109090948;  // std dev = 1.445, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
%   | | | else return 0.0421747463041625;  // std dev = 1.854, 16.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=5 */
%   else if ( follows(I, A) )
%   | then return 0.045072504116663414;  // std dev = 0.176, 18.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=7 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), follows(D, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.15544726280024346;  // std dev = 1.415, 49.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=47 */
%   | | | else return 0.49760264859074177;  // std dev = 0.198, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( follows(G, A) )
%   | | | then return -0.056954505441686946;  // std dev = 3.582, 188.000 (wgt'ed) examples reached here.  /* #neg=169 #pos=19 */
%   | | | else return 0.04280924508643666;  // std dev = 3.306, 54.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=18 */
%   else if ( follows(A, H) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, I), tweets(A, J) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(K, A), recursion_accounttype(K, B) )
%   | | | then return 0.2572430202058858;  // std dev = 7.45e-09, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.09944953366681994;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2062826145670668;  // std dev = 0.082, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else if ( follows(E, A) )
%   | | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | | then return 0.6275967759586589;  // std dev = 1.530, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | | else return -0.13007591737243784;  // std dev = 0.314, 150.000 (wgt'ed) examples reached here.  /* #neg=150 */
%   | | else if ( follows(A, G), follows(G, H) )
%   | | | then return 0.03631254085369937;  // std dev = 2.282, 28.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=9 */
%   | | | else return 0.10762649844451791;  // std dev = 2.254, 21.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=9 */
%   else if ( follows(I, A), follows(A, I) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(J, A) )
%   | | then if ( recursion_accounttype(J, K), tweets(J, L) )
%   | | | then return 0.03350747646640856;  // std dev = 0.613, 17.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.93275
   AUC PR    = 0.307273
   CLL	      = -0.187088
   Precision = 0.311321 at threshold = 0.5
   Recall    = 0.634615
   F1        = 0.417722


Total learning time: 20.673 seconds
Total inference time: 102.52199999999999 seconds
AUC ROC: 0.93275


Results scoring model
   AUC ROC   = 0.966517
   AUC PR    = 0.29181
   CLL	      = -0.182259
   Precision = 0.311688 at threshold = 0.5
   Recall    = 0.72
   F1        = 0.435045


Total scoring time: 89.441 seconds
Refined model CLL: -0.182259


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.93275
   AUC PR    = 0.307273
   CLL	      = -0.187088
   Precision = 0.311321 at threshold = 0.5
   Recall    = 0.634615
   F1        = 0.417722


Total learning time: 114.035 seconds
Total inference time: 102.52199999999999 seconds
AUC ROC: 0.93275
Total revision time: 114.035
Best scored revision CLL: -0.182259


Dataset: 7_yeast_twitter, Fold: 2, Type: Transfer (trRDN-B), Time: 00:19:23
{'AUC ROC': 0.93275, 'AUC PR': 0.307273, 'CLL': -0.187088, 'Precision': [0.311321, 0.5], 'Recall': 0.634615, 'F1': 0.417722, 'Learning time': 114.035, 'Inference time': 102.52199999999999, 'parameter_0.8': {'AUC ROC': 0.5, 'AUC PR': 0.006289, 'CLL': -0.365992, 'Precision': [nan, 0.5], 'Recall': 0.0, 'F1': nan, 'Learning time': 1.39, 'Inference time': 3.739}}


Amount of data: 1.0
******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(A, C), interaction(C, C).;true;true
0;true;interaction(C, A), phenotype(C, D).;false;true
0;true,false;interaction(E, A), enzyme(A, F).;true;true
0;true,false,true;complex(A, G), complex(C, H).;false;false
0;true,false,false;recursion_proteinclass(C, B).;false;false
0;false;location(A, I), phenotype(A, J).;true;false
0;false,true;location(K, I), recursion_proteinclass(K, B).;true;false
0;false,true,true;phenotype(K, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), complex(A, D).;true;true
1;true;interaction(E, C), recursion_proteinclass(E, B).;false;false
1;false;interaction(F, A), phenotype(A, G).;true;true
1;false,true;recursion_proteinclass(F, B).;false;true
1;false,true,false;interaction(H, F), recursion_proteinclass(H, B).;false;false
1;false,false;interaction(I, A), phenotype(I, J).;true;true
1;false,false,true;interaction(A, K), recursion_proteinclass(K, B).;false;false
1;false,false,false;interaction(A, L), phenotype(L, M).;false;false
2;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
2;true;complex(C, D).;false;false
2;false;interaction(A, E), interaction(E, A).;true;true
2;false,true;interaction(A, A).;false;true
2;false,true,false;enzyme(E, F), enzyme(A, F).;false;false
2;false,false;interaction(G, A), enzyme(G, H).;true;true
2;false,false,true;complex(G, I), complex(A, I).;false;false
2;false,false,false;interaction(A, J), recursion_proteinclass(J, B).;false;false
3;;proteinclass(A, B) :- complex(A, C), interaction(A, D).;true;true
3;true;interaction(D, E), recursion_proteinclass(E, B).;false;true
3;true,false;interaction(D, A).;false;false
3;false;interaction(F, A), enzyme(F, G).;true;true
3;false,true;interaction(H, F), recursion_proteinclass(H, B).;false;true
3;false,true,false;interaction(A, F).;false;false
3;false,false;interaction(A, A), location(A, I).;false;true
3;false,false,false;interaction(A, J), enzyme(J, K).;false;false
4;;proteinclass(A, B) :- phenotype(A, C), interaction(A, D).;true;true
4;true;interaction(D, E), interaction(E, F).;false;true
4;true,false;recursion_proteinclass(D, B).;false;true
4;true,false,false;enzyme(A, G), interaction(D, H).;false;false
4;false;interaction(I, A), recursion_proteinclass(I, B).;false;true
4;false,false;interaction(J, A), interaction(K, J).;true;true
4;false,false,true;recursion_proteinclass(K, B), location(J, L).;false;false
4;false,false,false;interaction(A, M), recursion_proteinclass(M, B).;false;false
5;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
5;true;enzyme(A, D), phenotype(C, E).;false;false
5;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
5;false,true;interaction(G, F), interaction(G, A).;false;true
5;false,true,false;phenotype(A, H), location(F, I).;false;false
5;false,false;interaction(A, J), complex(J, K).;true;true
5;false,false,true;interaction(J, L), recursion_proteinclass(L, B).;false;false
5;false,false,false;phenotype(A, M), location(A, N).;false;false
6;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
6;true;interaction(C, D), complex(D, E).;true;false
6;true,true;interaction(A, D).;true;false
6;true,true,true;interaction(D, C).;false;false
6;false;interaction(A, A).;false;true
6;false,false;interaction(A, F), enzyme(F, G).;true;true
6;false,false,true;phenotype(F, H), complex(F, I).;false;false
6;false,false,false;location(A, J).;false;false
7;;proteinclass(A, B) :- interaction(A, C), complex(C, D).;true;true
7;true;recursion_proteinclass(C, B).;false;true
7;true,false;interaction(C, E), recursion_proteinclass(E, B).;false;true
7;true,false,false;interaction(C, A).;false;false
7;false;interaction(F, A), recursion_proteinclass(F, B).;false;true
7;false,false;interaction(G, A), enzyme(G, H).;true;true
7;false,false,true;interaction(A, I), interaction(G, I).;false;false
7;false,false,false;location(A, J), enzyme(A, K).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;interaction(C, D), interaction(D, D).;false;false
8;false;interaction(A, E), enzyme(A, F).;true;true
8;false,true;interaction(E, G), recursion_proteinclass(G, B).;false;true
8;false,true,false;interaction(E, A).;false;false
8;false,false;interaction(A, H), location(A, I).;true;true
8;false,false,true;interaction(H, J), recursion_proteinclass(J, B).;false;false
8;false,false,false;enzyme(A, K).;false;false
9;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;false;true
9;false;interaction(D, A), interaction(A, D).;true;true
9;false,true;phenotype(A, E), phenotype(D, E).;true;true
9;false,true,true;complex(D, F).;false;false
9;false,true,false;interaction(D, D).;false;false
9;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
9;false,false,true;phenotype(G, H), location(G, I).;false;false
9;false,false,false;complex(A, J), interaction(K, A).;false;false


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(C, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), recursion_accounttype(A, E) )
%   | then if ( tweets(F, D) )
%   | | then if ( recursion_accounttype(F, E) )
%   | | | then return 0.21608251443530302;  // std dev = 7.892, 271.000 (wgt'ed) examples reached here.  /* #neg=174 #pos=97 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.22994380689438282;  // std dev = 4.268, 78.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=29 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C) )
%   | then return 0.1659144242179493;  // std dev = 8.307, 309.000 (wgt'ed) examples reached here.  /* #neg=205 #pos=104 */
%   | else return 0.8297586141618567;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(A, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, I), recursion_accounttype(I, J) )
%   | | | then return 0.105116787516371;  // std dev = 3.899, 76.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=21 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then return 0.12855656102970567;  // std dev = 0.469, 323.000 (wgt'ed) examples reached here.  /* #neg=218 #pos=105 */
%   else if ( follows(A, D), follows(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, F) )
%   | | | then return 0.12234838359229418;  // std dev = 3.810, 68.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=21 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D) )
%   | then return 0.12576419640279998;  // std dev = 8.397, 312.000 (wgt'ed) examples reached here.  /* #neg=205 #pos=107 */
%   | else if ( follows(C, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.09830513828580356;  // std dev = 2.765, 36.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=11 */
%   else if ( follows(E, A) )
%   | then if ( follows(F, E) )
%   | | then return 0.20510612045824014;  // std dev = 2.152, 19.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=8 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(A, C), follows(A, D) )
%   then if ( follows(D, E), follows(E, F) )
%   | then return 0.0835640856887006;  // std dev = 8.530, 331.000 (wgt'ed) examples reached here.  /* #neg=224 #pos=107 */
%   | else if ( follows(D, G) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.10033892321597955;  // std dev = 2.726, 34.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=11 */
%   else if ( follows(H, A) )
%   | then return 0.05500678850302808;  // std dev = 2.353, 26.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( recursion_accounttype(C, D) )
%   | then return 0.0965330324539936;  // std dev = 8.762, 338.000 (wgt'ed) examples reached here.  /* #neg=220 #pos=118 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(E, A) )
%   | then if ( follows(F, E), follows(F, A) )
%   | | then return 0.07012001155446156;  // std dev = 2.309, 24.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=8 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D) )
%   | then if ( follows(A, D) )
%   | | then if ( follows(D, C) )
%   | | | then return 0.04642361393722486;  // std dev = 7.429, 254.000 (wgt'ed) examples reached here.  /* #neg=173 #pos=81 */
%   | | | else return 0.06605103389729673;  // std dev = 2.574, 28.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=10 */
%   | | else return 0.029156712638796906;  // std dev = 3.355, 54.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=16 */
%   | else return 0.13223598206799286;  // std dev = 2.588, 28.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=11 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return 0.008678608788211795;  // std dev = 2.390, 28.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=8 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D) )
%   | then return 0.024007854959010096;  // std dev = 8.619, 350.000 (wgt'ed) examples reached here.  /* #neg=243 #pos=107 */
%   | else if ( follows(C, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.019030643986462956;  // std dev = 2.766, 36.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=11 */
%   else if ( follows(E, A) )
%   | then return -0.002915178746911819;  // std dev = 2.407, 29.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), follows(D, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.04928234062159316;  // std dev = 8.851, 351.000 (wgt'ed) examples reached here.  /* #neg=233 #pos=118 */
%   else if ( follows(A, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F), tweets(A, G) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.19239673669357554;  // std dev = 0.499, 17.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=8 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then return 0.020328979264482523;  // std dev = 8.982, 371.000 (wgt'ed) examples reached here.  /* #neg=253 #pos=118 */
%   else if ( follows(D, A), follows(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A) )
%   | | then if ( recursion_accounttype(E, F), tweets(E, G) )
%   | | | then return 0.0294084844184708;  // std dev = 2.284, 23.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=8 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.5
   AUC PR    = 0.006289
   CLL	      = -0.356976
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.56 seconds
Total inference time: 3.664 seconds
AUC ROC: 0.5


Results scoring model
   AUC ROC   = 0.5
   AUC PR    = 0.007752
   CLL	      = -0.367805
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total scoring time: 3.163 seconds
Parameter learned model CLL: -0.367805


Structure after Parameter Learning
[['accounttype(A, B)', {'': 'follows(A, C), follows(C, C)', 'false': 'tweets(A, D), recursion_accounttype(A, E)', 'false,true': 'tweets(F, D)', 'false,true,true': 'recursion_accounttype(F, E)'}, {'true': [0.0, 0, 0], 'false,true,true,true': [7.892, 174, 97], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 0, 0], 'false,false': [4.268, 49, 29]}], ['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C)', 'false': 'follows(E, A), recursion_accounttype(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, H)', 'false,false,false': 'follows(A, I), recursion_accounttype(I, J)'}, {'true,true': [8.307, 205, 104], 'true,false': [0.0, 0, 1], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [3.899, 55, 21], 'false,false,false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(C, A)', 'false': 'follows(A, D), follows(D, A)', 'false,false': 'follows(E, A)', 'false,false,false': 'follows(A, F)'}, {'true': [0.469, 218, 105], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [3.81, 47, 21], 'false,false,false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D)', 'true,false': 'follows(C, A)', 'false': 'follows(E, A)', 'false,true': 'follows(F, E)'}, {'true,true': [8.397, 205, 107], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.765, 25, 11], 'false,true,true': [2.152, 11, 8], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'recursion_accounttype(A, C), follows(A, D)', 'true': 'follows(D, E), follows(E, F)', 'true,false': 'follows(D, G)', 'false': 'follows(H, A)'}, {'true,true': [8.53, 224, 107], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.726, 23, 11], 'false,true': [2.353, 18, 8], 'false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'recursion_accounttype(C, D)', 'false': 'follows(E, A)', 'false,true': 'follows(F, E), follows(F, A)'}, {'true,true': [8.762, 220, 118], 'true,false': [0.0, 0, 0], 'false,true,true': [2.309, 16, 8], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D)', 'true,true': 'follows(A, D)', 'true,true,true': 'follows(D, C)', 'false': 'follows(A, A)', 'false,false': 'follows(A, E)', 'false,false,false': 'tweets(A, F)'}, {'true,true,true,true': [7.429, 173, 81], 'true,true,true,false': [2.574, 18, 10], 'true,true,false': [3.355, 38, 16], 'true,false': [2.588, 17, 11], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [2.39, 20, 8], 'false,false,false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D)', 'true,false': 'follows(C, A)', 'false': 'follows(E, A)'}, {'true,true': [8.619, 243, 107], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.766, 25, 11], 'false,true': [2.407, 21, 8], 'false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), follows(D, D)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F), tweets(A, G)'}, {'true,true': [0.0, 0, 0], 'true,false': [8.851, 233, 118], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.499, 9, 8]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'false': 'follows(D, A), follows(A, D)', 'false,false': 'follows(E, A)', 'false,false,true': 'recursion_accounttype(E, F), tweets(E, G)'}, {'true': [8.982, 253, 118], 'false,true': [0.0, 0, 0], 'false,false,true,true': [2.284, 15, 8], 'false,false,true,false': [0.0, 0, 0], 'false,false,false': [0.0, 0, 0]}]]
[{'': [nan, 0.2306877611842293], 'false': [0.2298171321196625, 0.23356344510190802], 'false,true': [0.2298171321196625, nan], 'false,true,true': [0.2298171321196625, nan]}, {'': [0.22401165826259867, 0.20002968216570982], 'true': [0.22331503731602823, 0.0], 'false': [nan, 0.20002968216570982], 'false,false': [nan, 0.20002968216570982], 'false,false,false': [0.20002968216570982, nan]}, {'': [0.2195064667714127, 0.21343078491539255], 'false': [nan, 0.21343078491539255], 'false,false': [nan, 0.21343078491539255], 'false,false,false': [0.21343078491539255, nan]}, {'': [0.2246607150618385, 0.24376731301939064], 'false': [0.24376731301939064, nan], 'false,true': [0.24376731301939064, nan], 'true': [0.22600724133904238, 0.21231482077355782], 'true,false': [nan, 0.21231482077355782]}, {'': [0.2197353029560335, 0.21301775147929017], 'true': [0.21983064560910676, 0.21855193116554397], 'true,false': [nan, 0.21855193116554397], 'false': [0.21301775147929017, nan]}, {'': [0.22713080373785058, 0.22222222222222196], 'true': [0.22713080373785058, nan], 'false': [0.22222222222222196, nan], 'false,true': [0.22222222222222196, nan]}, {'': [0.21975239999371032, 0.20408163265306115], 'true': [0.21754455523152091, 0.2392675094312879], 'true,true': [0.21922687756729384, 0.2084491929172163], 'true,true,true': [0.21727328742393062, 0.2366017457410528], 'false': [nan, 0.20408163265306115], 'false,false': [nan, 0.20408163265306115], 'false,false,false': [0.20408163265306115, nan]}, {'': [0.2122815069989985, 0.19976218787158168], 'true': [0.21224804221924315, 0.21258439679597052], 'true,false': [nan, 0.21258439679597052], 'false': [0.19976218787158168, nan]}, {'': [0.22317285582856966, 0.24913494809688583], 'false': [nan, 0.24913494809688583], 'false,false': [nan, 0.24913494809688583], 'true': [nan, 0.22317285582856936]}, {'': [0.21745554467202868, 0.22684310018903603], 'false': [nan, 0.22684310018903603], 'false,false': [0.22684310018903603, nan], 'false,false,true': [0.22684310018903603, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
1;;accounttype(A, B) :- follows(C, A).;true;true
1;true;follows(D, C).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), tweets(C, D) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.8126943896449664;  // std dev = 0.208, 44.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=42 */
%   | | else return 0.724815601766179;  // std dev = 0.340, 15.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=13 */
%   | else return 0.8581489350995123;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.8164822684328453;  // std dev = 0.200, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | | else return -0.14185106490048843;  // std dev = 0.000, 209.000 (wgt'ed) examples reached here.  /* #neg=209 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.7152917922423694;  // std dev = 1.309, 14.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=12 */
%   | | | else return -0.1418510649004877;  // std dev = 2.79e-08, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.35814893509951223;  // std dev = 1.225, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return 0.14386322081379807;  // std dev = 2.070, 21.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=6 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.6926514848319579;  // std dev = 0.185, 84.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=81 */
%   | | else return -0.03990810182510539;  // std dev = 0.259, 226.000 (wgt'ed) examples reached here.  /* #neg=203 #pos=23 */
%   | else return 0.7285554015677009;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(A, F), follows(F, G) )
%   | then if ( tweets(A, H) )
%   | | then if ( recursion_accounttype(G, B) )
%   | | | then return 0.7473839334745777;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.12544463852839138;  // std dev = 7.45e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else return 0.008741135785635045;  // std dev = 0.400, 15.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=3 */
%   | else if ( tweets(A, I) )
%   | | then if ( tweets(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.7473839334745775;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0.3397187297348978;  // std dev = 0.500, 12.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=6 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.5751479770039288;  // std dev = 0.085, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else if ( follows(C, E), follows(E, A) )
%   | | then return 0.461979480465503;  // std dev = 0.300, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | else return 0.5619794804655031;  // std dev = 1.49e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(F, A) )
%   | then if ( follows(G, F), recursion_accounttype(G, B) )
%   | | then if ( tweets(A, H), follows(A, F) )
%   | | | then return 0.7356393728922855;  // std dev = 7.30e-08, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.4499250871780001;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else return -0.1182750449286022;  // std dev = 0.060, 212.000 (wgt'ed) examples reached here.  /* #neg=211 #pos=1 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.6348015948272169;  // std dev = 0.178, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.08180531019950546;  // std dev = 1.992, 28.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=8 */
%   | | | else return 0.12457430683688864;  // std dev = 2.137, 27.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=9 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C), tweets(A, D) )
%   | then if ( follows(C, E), follows(E, A) )
%   | | then return 0.3877031647207124;  // std dev = 0.198, 49.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=47 */
%   | | else return 0.2581130692656252;  // std dev = 0.907, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0.44247904679332917;  // std dev = 0.069, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then if ( tweets(A, G), tweets(F, G) )
%   | | then if ( follows(F, H), follows(H, A) )
%   | | | then return 0.23812080232456637;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.545448624598653;  // std dev = 0.273, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.5853871766381286;  // std dev = 0.194, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(I, A) )
%   | | then return -0.06550235282060976;  // std dev = 0.172, 232.000 (wgt'ed) examples reached here.  /* #neg=217 #pos=15 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.050792805673524705;  // std dev = 2.003, 31.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=8 */
%   | | | else return 0.22399535368705317;  // std dev = 1.887, 19.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.3383157680697615;  // std dev = 0.075, 65.000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else if ( follows(E, A) )
%   | | then if ( tweets(A, F), follows(A, E) )
%   | | | then return 0.462610887513358;  // std dev = 0.091, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.5462850894658583;  // std dev = 0.121, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.35461527932380577;  // std dev = 0.196, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.3412123817780605;  // std dev = 0.043, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.6008375187939506;  // std dev = 0.104, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.10437879998002024;  // std dev = 0.164, 192.000 (wgt'ed) examples reached here.  /* #neg=192 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.028008452460966938;  // std dev = 2.014, 34.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=8 */
%   | | | else return 0.041913228111991316;  // std dev = 2.146, 29.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=9 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C), tweets(A, D) )
%   | then if ( follows(A, E), follows(E, C) )
%   | | then return 0.22358549017894347;  // std dev = 0.204, 46.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=44 */
%   | | else return 0.2751347126684159;  // std dev = 0.028, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.26637358355741847;  // std dev = 0.054, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), follows(G, A) )
%   | | then return -0.08695332147406554;  // std dev = 0.088, 152.000 (wgt'ed) examples reached here.  /* #neg=149 #pos=3 */
%   | | else if ( follows(F, H), recursion_accounttype(H, B) )
%   | | | then return 0.4237919689341928;  // std dev = 0.268, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return -0.09364539551174966;  // std dev = 0.000, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.28111532334809297;  // std dev = 0.179, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.10052126298428629;  // std dev = 1.571, 25.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=9 */
%   | | | else return 0.0838345702111921;  // std dev = 2.305, 23.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=8 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(C, E), follows(A, D) )
%   | | then if ( follows(D, C) )
%   | | | then return 0.22334515901119253;  // std dev = 0.039, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return 0.16107856472956528;  // std dev = 0.967, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | else return 0.05227670818766772;  // std dev = 0.923, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0.26554505257019057;  // std dev = 0.068, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G), follows(G, F) )
%   | | then return 0.023272768479802197;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.2191465313118301;  // std dev = 0.032, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( follows(H, A) )
%   | | then return -0.05577437517970645;  // std dev = 0.116, 224.000 (wgt'ed) examples reached here.  /* #neg=209 #pos=15 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.013742255380687254;  // std dev = 1.721, 42.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=9 */
%   | | | else return 0.05758906864949324;  // std dev = 2.315, 24.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(C, D) )
%   then if ( recursion_accounttype(D, B) )
%   | then if ( recursion_accounttype(C, B) )
%   | | then if ( follows(C, A) )
%   | | | then return 0.1911040203473743;  // std dev = 0.081, 64.000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | | | else return 0.03504427048388505;  // std dev = 1.173, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | else if ( follows(E, A) )
%   | | | then return 0.3093041767810793;  // std dev = 0.516, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | | else return 0.5582505135640613;  // std dev = 0.544, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return -0.09251839875622882;  // std dev = 0.495, 219.000 (wgt'ed) examples reached here.  /* #neg=219 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.186018226955859;  // std dev = 0.018, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(G, A) )
%   | | then return -0.08208778223330095;  // std dev = 0.000755, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( tweets(A, H) )
%   | | | then return -0.028389870824802814;  // std dev = 1.119, 18.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=4 */
%   | | | else return -0.04562001045542838;  // std dev = 1.970, 21.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=6 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.16187992991990827;  // std dev = 0.092, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( follows(D, F), recursion_accounttype(F, B) )
%   | | | then return 0.12746460276304125;  // std dev = 0.937, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return -0.07556677754154062;  // std dev = 0.002, 126.000 (wgt'ed) examples reached here.  /* #neg=126 */
%   | | else if ( follows(D, G), recursion_accounttype(G, B) )
%   | | | then return 0.2663921987488296;  // std dev = 0.255, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return -0.07725693672211525;  // std dev = 0.103, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
%   | else if ( tweets(A, H) )
%   | | then if ( follows(A, I), follows(I, J) )
%   | | | then return 0.05635899266579522;  // std dev = 0.948, 18.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
%   | | | else return 0.1179395416582398;  // std dev = 0.950, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.03271201540721317;  // std dev = 1.256, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | | | else return -0.0787217358500554;  // std dev = 2.030, 25.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=6 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(D, C) )
%   | then if ( follows(A, C), tweets(A, E) )
%   | | then return 0.10198841353548907;  // std dev = 0.198, 49.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=47 */
%   | | else return 0.1415005292663853;  // std dev = 0.020, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(F, C), follows(A, F) )
%   | | then return -0.35969857505654984;  // std dev = 0.972, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return 0.1360351788021801;  // std dev = 0.062, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else if ( follows(G, A) )
%   | then return -0.04049794980926053;  // std dev = 0.095, 231.000 (wgt'ed) examples reached here.  /* #neg=208 #pos=23 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.16172099396965492;  // std dev = 1.625, 14.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=12 */
%   | | | else return -0.1462657178765745;  // std dev = 0.083, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.13758815173010605;  // std dev = 1.132, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | | else return 0.11443249193300642;  // std dev = 1.769, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */


Results
   AUC ROC   = 0.99268
   AUC PR    = 0.350334
   CLL	      = -0.138429
   Precision = 0.331683 at threshold = 0.5
   Recall    = 0.858974
   F1        = 0.478571


Total learning time: 15.302 seconds
Total inference time: 23.743 seconds
AUC ROC: 0.99268


Results scoring model
   AUC ROC   = 0.992637
   AUC PR    = 0.405878
   CLL	      = -0.122209
   Precision = 0.334278 at threshold = 0.5
   Recall    = 0.936508
   F1        = 0.492693


Total scoring time: 19.289 seconds
Refined model CLL: -0.122209


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.99268
   AUC PR    = 0.350334
   CLL	      = -0.138429
   Precision = 0.331683 at threshold = 0.5
   Recall    = 0.858974
   F1        = 0.478571


Total learning time: 39.314 seconds
Total inference time: 23.743 seconds
AUC ROC: 0.99268
Total revision time: 39.314
Best scored revision CLL: -0.122209


Dataset: 7_yeast_twitter, Fold: 2, Type: Transfer (trRDN-B), Time: 00:20:30
{'AUC ROC': 0.99268, 'AUC PR': 0.350334, 'CLL': -0.138429, 'Precision': [0.331683, 0.5], 'Recall': 0.858974, 'F1': 0.478571, 'Learning time': 39.314, 'Inference time': 23.743, 'parameter_1.0': {'AUC ROC': 0.5, 'AUC PR': 0.006289, 'CLL': -0.356976, 'Precision': [nan, 0.5], 'Recall': 0.0, 'F1': nan, 'Learning time': 1.56, 'Inference time': 3.664}}


Starting fold 1

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos	 examples: 126
Target test neg examples: 16128

Amount of data: 0.2
******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(A, C), interaction(C, C).;true;true
0;true;interaction(C, A), phenotype(C, D).;false;true
0;true,false;interaction(E, A), enzyme(A, F).;true;true
0;true,false,true;complex(A, G), complex(C, H).;false;false
0;true,false,false;recursion_proteinclass(C, B).;false;false
0;false;location(A, I), phenotype(A, J).;true;false
0;false,true;location(K, I), recursion_proteinclass(K, B).;true;false
0;false,true,true;phenotype(K, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), complex(A, D).;true;true
1;true;interaction(E, C), recursion_proteinclass(E, B).;false;false
1;false;interaction(F, A), phenotype(A, G).;true;true
1;false,true;recursion_proteinclass(F, B).;false;true
1;false,true,false;interaction(H, F), recursion_proteinclass(H, B).;false;false
1;false,false;interaction(I, A), phenotype(I, J).;true;true
1;false,false,true;interaction(A, K), recursion_proteinclass(K, B).;false;false
1;false,false,false;interaction(A, L), phenotype(L, M).;false;false
2;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
2;true;complex(C, D).;false;false
2;false;interaction(A, E), interaction(E, A).;true;true
2;false,true;interaction(A, A).;false;true
2;false,true,false;enzyme(E, F), enzyme(A, F).;false;false
2;false,false;interaction(G, A), enzyme(G, H).;true;true
2;false,false,true;complex(G, I), complex(A, I).;false;false
2;false,false,false;interaction(A, J), recursion_proteinclass(J, B).;false;false
3;;proteinclass(A, B) :- complex(A, C), interaction(A, D).;true;true
3;true;interaction(D, E), recursion_proteinclass(E, B).;false;true
3;true,false;interaction(D, A).;false;false
3;false;interaction(F, A), enzyme(F, G).;true;true
3;false,true;interaction(H, F), recursion_proteinclass(H, B).;false;true
3;false,true,false;interaction(A, F).;false;false
3;false,false;interaction(A, A), location(A, I).;false;true
3;false,false,false;interaction(A, J), enzyme(J, K).;false;false
4;;proteinclass(A, B) :- phenotype(A, C), interaction(A, D).;true;true
4;true;interaction(D, E), interaction(E, F).;false;true
4;true,false;recursion_proteinclass(D, B).;false;true
4;true,false,false;enzyme(A, G), interaction(D, H).;false;false
4;false;interaction(I, A), recursion_proteinclass(I, B).;false;true
4;false,false;interaction(J, A), interaction(K, J).;true;true
4;false,false,true;recursion_proteinclass(K, B), location(J, L).;false;false
4;false,false,false;interaction(A, M), recursion_proteinclass(M, B).;false;false
5;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
5;true;enzyme(A, D), phenotype(C, E).;false;false
5;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
5;false,true;interaction(G, F), interaction(G, A).;false;true
5;false,true,false;phenotype(A, H), location(F, I).;false;false
5;false,false;interaction(A, J), complex(J, K).;true;true
5;false,false,true;interaction(J, L), recursion_proteinclass(L, B).;false;false
5;false,false,false;phenotype(A, M), location(A, N).;false;false
6;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
6;true;interaction(C, D), complex(D, E).;true;false
6;true,true;interaction(A, D).;true;false
6;true,true,true;interaction(D, C).;false;false
6;false;interaction(A, A).;false;true
6;false,false;interaction(A, F), enzyme(F, G).;true;true
6;false,false,true;phenotype(F, H), complex(F, I).;false;false
6;false,false,false;location(A, J).;false;false
7;;proteinclass(A, B) :- interaction(A, C), complex(C, D).;true;true
7;true;recursion_proteinclass(C, B).;false;true
7;true,false;interaction(C, E), recursion_proteinclass(E, B).;false;true
7;true,false,false;interaction(C, A).;false;false
7;false;interaction(F, A), recursion_proteinclass(F, B).;false;true
7;false,false;interaction(G, A), enzyme(G, H).;true;true
7;false,false,true;interaction(A, I), interaction(G, I).;false;false
7;false,false,false;location(A, J), enzyme(A, K).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;interaction(C, D), interaction(D, D).;false;false
8;false;interaction(A, E), enzyme(A, F).;true;true
8;false,true;interaction(E, G), recursion_proteinclass(G, B).;false;true
8;false,true,false;interaction(E, A).;false;false
8;false,false;interaction(A, H), location(A, I).;true;true
8;false,false,true;interaction(H, J), recursion_proteinclass(J, B).;false;false
8;false,false,false;enzyme(A, K).;false;false
9;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;false;true
9;false;interaction(D, A), interaction(A, D).;true;true
9;false,true;phenotype(A, E), phenotype(D, E).;true;true
9;false,true,true;complex(D, F).;false;false
9;false,true,false;interaction(D, D).;false;false
9;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
9;false,false,true;phenotype(G, H), location(G, I).;false;false
9;false,false,false;complex(A, J), interaction(K, A).;false;false


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(C, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), recursion_accounttype(A, E) )
%   | then if ( tweets(F, D) )
%   | | then if ( recursion_accounttype(F, E) )
%   | | | then return 0.15951879811321046;  // std dev = 3.920, 73.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=22 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.24945328292559932;  // std dev = 2.341, 23.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=9 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C) )
%   | then return 0.10599655324977636;  // std dev = 3.820, 74.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=20 */
%   | else return 0.3376004040054227;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(A, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, I), recursion_accounttype(I, J) )
%   | | | then return 0.12100907189221628;  // std dev = 2.527, 31.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=9 */
%   | | | else return 0.1625285884952502;  // std dev = 0.811, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then return 0.20862687096187182;  // std dev = 0.487, 54.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=21 */
%   else if ( follows(A, D), follows(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, F) )
%   | | | then return 0.20702370264993625;  // std dev = 2.330, 23.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=9 */
%   | | | else return 0.053772529096380556;  // std dev = 0.862, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D) )
%   | then return 0.09310358202999429;  // std dev = 4.072, 78.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=24 */
%   | else if ( follows(C, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.44431129531989283;  // std dev = 0.804, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(E, A) )
%   | then if ( follows(F, E) )
%   | | then return 0.11838762722586067;  // std dev = 1.636, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, A), tweets(A, G) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 2.1254711469284037E-4;  // std dev = 0.885, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(A, C), follows(A, D) )
%   then if ( follows(D, E), follows(E, F) )
%   | then return 0.08478948895626157;  // std dev = 3.961, 73.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=23 */
%   | else if ( follows(D, G) )
%   | | then return 0.7743002593562819;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.0972887336108202;  // std dev = 1.074, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   else if ( follows(H, A) )
%   | then return 0.05206822377022018;  // std dev = 1.689, 14.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=4 */
%   | else if ( follows(I, A), follows(J, I) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, K) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.0056024973120745395;  // std dev = 0.891, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( recursion_accounttype(C, D) )
%   | then return 0.13356164189700503;  // std dev = 3.962, 67.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=26 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(E, A) )
%   | then if ( follows(F, E), follows(F, A) )
%   | | then return 0.18906764584179633;  // std dev = 1.309, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | else if ( recursion_accounttype(A, G), tweets(E, H) )
%   | | | then return 0.7437339933999383;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, I) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( recursion_accounttype(A, J), tweets(A, K) )
%   | | | then return -0.193165686679711;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return -0.007569998670238387;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D) )
%   | then if ( follows(A, D) )
%   | | then if ( follows(D, C) )
%   | | | then return 0.14018460380944386;  // std dev = 3.073, 39.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=16 */
%   | | | else return -0.15413409573702583;  // std dev = 0.899, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | else return 0.1471864952540289;  // std dev = 1.977, 16.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=7 */
%   | else return 0.13943263784407028;  // std dev = 0.988, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.01515877353000243;  // std dev = 1.515, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
%   | | | else return 0.24019095768605575;  // std dev = 0.906, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D) )
%   | then return 0.04418126282231827;  // std dev = 3.939, 70.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=24 */
%   | else if ( follows(C, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.10058894132770278;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else if ( follows(E, A) )
%   | then return 0.201525615996276;  // std dev = 1.353, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | else if ( follows(F, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G) )
%   | | | then return -0.16275176268269065;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.0015721200183778025;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), follows(D, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.04567852027737991;  // std dev = 4.037, 72.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=26 */
%   else if ( follows(A, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F), tweets(A, G) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.11705041832269222;  // std dev = 0.457, 20.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then return -0.031382391738327214;  // std dev = 4.255, 88.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=26 */
%   else if ( follows(D, A), follows(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A) )
%   | | then if ( recursion_accounttype(E, F), tweets(E, G) )
%   | | | then return 0.10787640547281457;  // std dev = 1.498, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.13896175696923796;  // std dev = 0.779, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */


Results
   AUC ROC   = 0.5
   AUC PR    = 0.007752
   CLL	      = -0.387665
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.891 seconds
Total inference time: 2.696 seconds
AUC ROC: 0.5


Results scoring model
   AUC ROC   = 0.575226
   AUC PR    = 0.008448
   CLL	      = -0.380176
   Precision = 0.014085 at threshold = 0.5
   Recall    = 0.032258
   F1        = 0.019608


Total scoring time: 1.399 seconds
Parameter learned model CLL: -0.380176


Structure after Parameter Learning
[['accounttype(A, B)', {'': 'follows(A, C), follows(C, C)', 'false': 'tweets(A, D), recursion_accounttype(A, E)', 'false,true': 'tweets(F, D)', 'false,true,true': 'recursion_accounttype(F, E)'}, {'true': [0.0, 0, 0], 'false,true,true,true': [3.92, 51, 22], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 0, 0], 'false,false': [2.341, 14, 9]}], ['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C)', 'false': 'follows(E, A), recursion_accounttype(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, H)', 'false,false,false': 'follows(A, I), recursion_accounttype(I, J)'}, {'true,true': [3.82, 54, 20], 'true,false': [0.707, 1, 1], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [2.527, 22, 9], 'false,false,false,false': [0.811, 2, 1]}], ['accounttype(A, B)', {'': 'follows(C, A)', 'false': 'follows(A, D), follows(D, A)', 'false,false': 'follows(E, A)', 'false,false,false': 'follows(A, F)'}, {'true': [0.487, 33, 21], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [2.33, 14, 9], 'false,false,false,false': [0.862, 3, 1]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D)', 'true,false': 'follows(C, A)', 'false': 'follows(E, A)', 'false,true': 'follows(F, E)', 'false,false': 'follows(A, A), tweets(A, G)', 'false,false,false': 'follows(A, H)'}, {'true,true': [4.072, 54, 24], 'true,false,true': [0.0, 0, 0], 'true,false,false': [0.804, 1, 2], 'false,true,true': [1.636, 8, 4], 'false,true,false': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.885, 4, 1]}], ['accounttype(A, B)', {'': 'recursion_accounttype(A, C), follows(A, D)', 'true': 'follows(D, E), follows(E, F)', 'true,false': 'follows(D, G)', 'false': 'follows(H, A)', 'false,false': 'follows(I, A), follows(J, I)', 'false,false,false': 'follows(A, K)'}, {'true,true': [3.961, 50, 23], 'true,false,true': [0.0, 0, 1], 'true,false,false': [1.074, 3, 2], 'false,true': [1.689, 10, 4], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.891, 4, 1]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'recursion_accounttype(C, D)', 'false': 'follows(E, A)', 'false,true': 'follows(F, E), follows(F, A)', 'false,true,false': 'recursion_accounttype(A, G), tweets(E, H)', 'false,false': 'follows(A, I)', 'false,false,false': 'recursion_accounttype(A, J), tweets(A, K)'}, {'true,true': [3.962, 41, 26], 'true,false': [0.0, 0, 0], 'false,true,true': [1.309, 4, 3], 'false,true,false,true': [0.0, 0, 1], 'false,true,false,false': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 1, 0], 'false,false,false,false': [0.894, 4, 1]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D)', 'true,true': 'follows(A, D)', 'true,true,true': 'follows(D, C)', 'false': 'follows(A, A)', 'false,false': 'follows(A, E)', 'false,false,false': 'tweets(A, F)'}, {'true,true,true,true': [3.073, 23, 16], 'true,true,true,false': [0.899, 7, 1], 'true,true,false': [1.977, 9, 7], 'true,false': [0.988, 2, 2], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [1.515, 8, 3], 'false,false,false,false': [0.906, 2, 2]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D)', 'true,false': 'follows(C, A)', 'false': 'follows(E, A)', 'false,false': 'follows(F, A)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [3.939, 46, 24], 'true,false,true': [0.0, 0, 0], 'true,false,false': [1.0, 2, 2], 'false,true': [1.353, 4, 4], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 3, 0], 'false,false,false,false': [0.866, 3, 1]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), follows(D, D)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F), tweets(A, G)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.037, 46, 26], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.457, 15, 5]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'false': 'follows(D, A), follows(A, D)', 'false,false': 'follows(E, A)', 'false,false,true': 'recursion_accounttype(E, F), tweets(E, G)', 'false,false,false': 'follows(H, A)'}, {'true': [4.255, 62, 26], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.498, 5, 4], 'false,false,true,false': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.779, 2, 1]}]]
[{'': [nan, 0.21864149305555655], 'false': [0.21054606868080405, 0.23818525519848777], 'false,true': [0.21054606868080405, nan], 'false,true,true': [0.21054606868080405, nan]}, {'': [0.1999981473234132, 0.20734626802254633], 'false': [nan, 0.20734626802254633], 'false,false': [nan, 0.20734626802254633], 'false,false,false': [0.20602226880560973, 0.21945582920459436], 'true': [0.19723515790801532, 0.24999999999999997]}, {'': [0.23712812386566948, 0.2315348002770435], 'false': [nan, 0.23153480027704348], 'false,false': [nan, 0.2315348002770435], 'false,false,false': [0.23601132621568774, 0.185788249815118]}, {'': [0.2170953153247628, 0.20645239550558525], 'true': [0.2125912301497065, 0.21542307414539932], 'true,false': [nan, 0.21542307414539932], 'false': [0.22312430644150902, 0.15658191545281713], 'false,true': [0.22312430644150902, nan], 'false,false': [nan, 0.15658191545281713], 'false,false,false': [nan, 0.15658191545281713]}, {'': [0.21912640870411454, 0.19261827699069597], 'true': [0.21492380904464753, 0.25574236987288], 'true,false': [0.0, 0.23050007618208967], 'false': [0.20379341936136905, 0.1588772063011205], 'false,false': [nan, 0.1588772063011205], 'false,false,false': [nan, 0.1588772063011205]}, {'': [0.23434325104716114, 0.22245877809528655], 'true': [0.23434325104716114, nan], 'false': [0.24793545334500217, 0.13811746658440407], 'false,true': [0.24489795918367352, 0.0], 'false,false': [nan, 0.13811746658440407], 'false,false,false': [0.0, 0.15999999999999998], 'false,true,false': [0.0, nan]}, {'': [0.23521575642720366, 0.22052998372134605], 'true': [0.23457327273767034, 0.24419328162877232], 'true,true': [0.23040683125433856, 0.24437993671994462], 'true,true,true': [0.24221214795181573, 0.10097684045613155], 'false': [nan, 0.22052998372134605], 'false,false': [nan, 0.22052998372134605], 'false,false,false': [0.20875352510275852, 0.20509935575224517]}, {'': [0.22332713242380273, 0.19331240396156668], 'true': [0.22163097795720477, 0.25], 'true,false': [nan, 0.25], 'false': [0.2288092150475561, 0.11375567471656031], 'false,false': [nan, 0.11375567471656031], 'false,false,false': [0.0, 0.18750000000000003]}, {'': [0.22632890823903884, 0.20854319055387527], 'true': [nan, 0.22632890823903873], 'false': [nan, 0.20854319055387527], 'false,false': [nan, 0.20854319055387527]}, {'': [0.2057306628813097, 0.23781587250208638], 'false': [nan, 0.23781587250208638], 'false,false': [0.24940204352621814, 0.20233263512144906], 'false,false,true': [0.24940204352621814, nan], 'false,false,false': [nan, 0.20233263512144906]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
4;;accounttype(A, B) :- recursion_accounttype(A, C), follows(A, D).;true;true
4;true;follows(D, E), follows(E, F).;true;true
4;true,false;follows(D, G).;true;true
5;;accounttype(A, B) :- follows(A, C).;true;true
5;false;follows(E, A).;true;true
5;false,true;follows(F, E), follows(F, A).;true;true
5;false,false;recursion_accounttype(A, J), tweets(A, K).;true;true
7;;accounttype(A, B) :- follows(A, C).;true;true
7;false;follows(E, A).;true;true
7;false,false;tweets(A, G).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.8581489350995123;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( follows(D, A), follows(A, D) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.14185106490048774;  // std dev = 1.05e-08, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | else if ( follows(A, F) )
%   | | then if ( follows(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.008517731567154456;  // std dev = 1.317, 15.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=2 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7194734122109543;  // std dev = 2.98e-08, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E), follows(A, D) )
%   | | | then return 0.38614007887762103;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.7474152564242649;  // std dev = 0.125, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.12832702506478547;  // std dev = 0.042, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
%   | else if ( follows(A, F) )
%   | | then if ( follows(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.7194734122109543;  // std dev = 2.98e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.12544463852839138;  // std dev = 7.45e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( tweets(A, H) )
%   | | | then return -0.14081736672249348;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.059182633277506544;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.5663147374754613;  // std dev = 0.106, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then return -0.11202932116532321;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | else if ( follows(D, F), recursion_accounttype(F, B) )
%   | | | then return 0.548456389259557;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.11202932116532321;  // std dev = 5.27e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.5553664367462846;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.11632291945633577;  // std dev = 0.029, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.08798846628836092;  // std dev = 0.968, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | | | else return 0.22475538235515005;  // std dev = 1.239, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C), tweets(A, D) )
%   | then return 0.24818676356346261;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0.4160357208648763;  // std dev = 0.004, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( follows(A, E), recursion_accounttype(E, B) )
%   | then return 0.24649842372620415;  // std dev = 0.934, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( follows(F, A), follows(A, G) )
%   | | then if ( follows(G, A), follows(F, G) )
%   | | | then return -0.10135968686353534;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | | else return -0.004930682197444396;  // std dev = 0.802, 16.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=3 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.006535522373897919;  // std dev = 0.803, 14.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=3 */
%   | | | else return 0.1285579706719043;  // std dev = 1.562, 19.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=7 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(A, C), follows(A, D) )
%   then if ( follows(D, E), follows(E, F) )
%   | then if ( follows(G, A), follows(H, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.3659561887027388;  // std dev = 0.168, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.09618162117696977;  // std dev = 0.021, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.10084753743632376;  // std dev = 0.836, 12.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=5 */
%   | | | else return 0.13731908646158092;  // std dev = 0.834, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | else if ( follows(D, J) )
%   | | then return 0.12416159670603537;  // std dev = 0.320, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | else return 0.2606592075267344;  // std dev = 0.506, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(K, A), recursion_accounttype(K, B) )
%   | then return 0.321033893460394;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( tweets(A, L) )
%   | | then return -0.11385343381247771;  // std dev = 0.002, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.17522396303732352;  // std dev = 1.028, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.2869645578871612;  // std dev = 0.137, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( follows(E, A), follows(A, E) )
%   | | then if ( tweets(A, F) )
%   | | | then return -0.04775460778830275;  // std dev = 0.686, 31.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=3 */
%   | | | else return -0.08784357806184191;  // std dev = 0.009, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.010941420903276159;  // std dev = 0.815, 15.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=4 */
%   | | | else return 0.07628120709681244;  // std dev = 1.045, 13.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=5 */
%   else if ( follows(H, A) )
%   | then if ( follows(I, H), follows(I, A) )
%   | | then return 0.11189301038770756;  // std dev = 0.393, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return 0.6300811956189476;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( recursion_accounttype(A, J), tweets(A, K) )
%   | | then return -0.102203644516905;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0.7722039138065075;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.2216844558984464;  // std dev = 0.048, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.32948667798450865;  // std dev = 0.149, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0.2347015091702177;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return -0.09732158370544336;  // std dev = 0.097, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
%   else return 0.10402237469508606;  // std dev = 0.318, 18.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=9 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( recursion_accounttype(E, B) )
%   | | then if ( follows(F, A) )
%   | | | then return 0.20563614651176154;  // std dev = 0.140, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.3461916175316242;  // std dev = 0.196, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( follows(G, A) )
%   | | | then return -0.07208132143540397;  // std dev = 0.284, 36.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=1 */
%   | | | else return -0.20610578967586257;  // std dev = 0.620, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0.201394671054457;  // std dev = 0.390, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(H, A) )
%   | then return -0.0012103390225108438;  // std dev = 0.212, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | else if ( tweets(A, I) )
%   | | then return -0.08529379970333631;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return -0.08136610241164181;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.164116264310747;  // std dev = 0.079, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( follows(A, D) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.22884379980805428;  // std dev = 0.061, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.33102256354215653;  // std dev = 0.028, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(D, A) )
%   | | | then return -0.07340235321706684;  // std dev = 0.029, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | | else return -0.12972516562865108;  // std dev = 0.157, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.046318590375956;  // std dev = 0.977, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.11202222035788545;  // std dev = 0.056, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return -0.19509681217083666;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( follows(A, E) )
%   | | then return 0.1519693615804524;  // std dev = 0.025, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0.2508108403297552;  // std dev = 0.217, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, F), follows(F, G) )
%   | | then return -0.06952626465459809;  // std dev = 0.036, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | | else return -0.14730385663248097;  // std dev = 0.074, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else if ( tweets(A, H) )
%   | then if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return -0.5015499713402581;  // std dev = 0.787, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return -0.022490234052023123;  // std dev = 0.114, 15.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=3 */
%   | else if ( follows(A, J) )
%   | | then if ( follows(K, J), recursion_accounttype(K, B) )
%   | | | then return 0.26223796956197304;  // std dev = 0.024, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.1499245129964336;  // std dev = 0.089, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return -0.14954622797818157;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */


Results
   AUC ROC   = 0.992894
   AUC PR    = 0.34794
   CLL	      = -0.108117
   Precision = 0.345205 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.513238


Total learning time: 17.28 seconds
Total inference time: 595.42 seconds
AUC ROC: 0.992894


Results scoring model
   AUC ROC   = 0.993989
   AUC PR    = 0.404718
   CLL	      = -0.118427
   Precision = 0.340909 at threshold = 0.5
   Recall    = 0.967742
   F1        = 0.504202


Total scoring time: 95.934 seconds
Refined model CLL: -0.118427


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.992894
   AUC PR    = 0.34794
   CLL	      = -0.108117
   Precision = 0.345205 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.513238


Total learning time: 115.50399999999999 seconds
Total inference time: 595.42 seconds
AUC ROC: 0.992894
Total revision time: 115.50399999999999
Best scored revision CLL: -0.118427


Dataset: 7_yeast_twitter, Fold: 1, Type: Transfer (trRDN-B), Time: 00:32:24
{'AUC ROC': 0.992894, 'AUC PR': 0.34794, 'CLL': -0.108117, 'Precision': [0.345205, 0.5], 'Recall': 1.0, 'F1': 0.513238, 'Learning time': 115.50399999999999, 'Inference time': 595.42, 'parameter_0.2': {'AUC ROC': 0.5, 'AUC PR': 0.007752, 'CLL': -0.387665, 'Precision': [nan, 0.5], 'Recall': 0.0, 'F1': nan, 'Learning time': 0.891, 'Inference time': 2.696}}


Amount of data: 0.4
******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(A, C), interaction(C, C).;true;true
0;true;interaction(C, A), phenotype(C, D).;false;true
0;true,false;interaction(E, A), enzyme(A, F).;true;true
0;true,false,true;complex(A, G), complex(C, H).;false;false
0;true,false,false;recursion_proteinclass(C, B).;false;false
0;false;location(A, I), phenotype(A, J).;true;false
0;false,true;location(K, I), recursion_proteinclass(K, B).;true;false
0;false,true,true;phenotype(K, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), complex(A, D).;true;true
1;true;interaction(E, C), recursion_proteinclass(E, B).;false;false
1;false;interaction(F, A), phenotype(A, G).;true;true
1;false,true;recursion_proteinclass(F, B).;false;true
1;false,true,false;interaction(H, F), recursion_proteinclass(H, B).;false;false
1;false,false;interaction(I, A), phenotype(I, J).;true;true
1;false,false,true;interaction(A, K), recursion_proteinclass(K, B).;false;false
1;false,false,false;interaction(A, L), phenotype(L, M).;false;false
2;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
2;true;complex(C, D).;false;false
2;false;interaction(A, E), interaction(E, A).;true;true
2;false,true;interaction(A, A).;false;true
2;false,true,false;enzyme(E, F), enzyme(A, F).;false;false
2;false,false;interaction(G, A), enzyme(G, H).;true;true
2;false,false,true;complex(G, I), complex(A, I).;false;false
2;false,false,false;interaction(A, J), recursion_proteinclass(J, B).;false;false
3;;proteinclass(A, B) :- complex(A, C), interaction(A, D).;true;true
3;true;interaction(D, E), recursion_proteinclass(E, B).;false;true
3;true,false;interaction(D, A).;false;false
3;false;interaction(F, A), enzyme(F, G).;true;true
3;false,true;interaction(H, F), recursion_proteinclass(H, B).;false;true
3;false,true,false;interaction(A, F).;false;false
3;false,false;interaction(A, A), location(A, I).;false;true
3;false,false,false;interaction(A, J), enzyme(J, K).;false;false
4;;proteinclass(A, B) :- phenotype(A, C), interaction(A, D).;true;true
4;true;interaction(D, E), interaction(E, F).;false;true
4;true,false;recursion_proteinclass(D, B).;false;true
4;true,false,false;enzyme(A, G), interaction(D, H).;false;false
4;false;interaction(I, A), recursion_proteinclass(I, B).;false;true
4;false,false;interaction(J, A), interaction(K, J).;true;true
4;false,false,true;recursion_proteinclass(K, B), location(J, L).;false;false
4;false,false,false;interaction(A, M), recursion_proteinclass(M, B).;false;false
5;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
5;true;enzyme(A, D), phenotype(C, E).;false;false
5;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
5;false,true;interaction(G, F), interaction(G, A).;false;true
5;false,true,false;phenotype(A, H), location(F, I).;false;false
5;false,false;interaction(A, J), complex(J, K).;true;true
5;false,false,true;interaction(J, L), recursion_proteinclass(L, B).;false;false
5;false,false,false;phenotype(A, M), location(A, N).;false;false
6;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
6;true;interaction(C, D), complex(D, E).;true;false
6;true,true;interaction(A, D).;true;false
6;true,true,true;interaction(D, C).;false;false
6;false;interaction(A, A).;false;true
6;false,false;interaction(A, F), enzyme(F, G).;true;true
6;false,false,true;phenotype(F, H), complex(F, I).;false;false
6;false,false,false;location(A, J).;false;false
7;;proteinclass(A, B) :- interaction(A, C), complex(C, D).;true;true
7;true;recursion_proteinclass(C, B).;false;true
7;true,false;interaction(C, E), recursion_proteinclass(E, B).;false;true
7;true,false,false;interaction(C, A).;false;false
7;false;interaction(F, A), recursion_proteinclass(F, B).;false;true
7;false,false;interaction(G, A), enzyme(G, H).;true;true
7;false,false,true;interaction(A, I), interaction(G, I).;false;false
7;false,false,false;location(A, J), enzyme(A, K).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;interaction(C, D), interaction(D, D).;false;false
8;false;interaction(A, E), enzyme(A, F).;true;true
8;false,true;interaction(E, G), recursion_proteinclass(G, B).;false;true
8;false,true,false;interaction(E, A).;false;false
8;false,false;interaction(A, H), location(A, I).;true;true
8;false,false,true;interaction(H, J), recursion_proteinclass(J, B).;false;false
8;false,false,false;enzyme(A, K).;false;false
9;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;false;true
9;false;interaction(D, A), interaction(A, D).;true;true
9;false,true;phenotype(A, E), phenotype(D, E).;true;true
9;false,true,true;complex(D, F).;false;false
9;false,true,false;interaction(D, D).;false;false
9;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
9;false,false,true;phenotype(G, H), location(G, I).;false;false
9;false,false,false;complex(A, J), interaction(K, A).;false;false


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(C, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), recursion_accounttype(A, E) )
%   | then if ( tweets(F, D) )
%   | | then if ( recursion_accounttype(F, E) )
%   | | | then return 0.1522665821583356;  // std dev = 5.636, 153.000 (wgt'ed) examples reached here.  /* #neg=108 #pos=45 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.21985106275908683;  // std dev = 3.294, 47.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=17 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C) )
%   | then return 0.12701537662339238;  // std dev = 5.326, 138.000 (wgt'ed) examples reached here.  /* #neg=98 #pos=40 */
%   | else return 0.50525114668519;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(E, A), recursion_accounttype(A, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, I), recursion_accounttype(I, J) )
%   | | | then return 0.2591390168018205;  // std dev = 3.130, 40.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=17 */
%   | | | else return 0.08312513922608104;  // std dev = 1.499, 12.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=3 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then return 0.16601956297263148;  // std dev = 0.477, 120.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=42 */
%   else if ( follows(A, D), follows(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, F) )
%   | | | then return 0.201194632027071;  // std dev = 3.178, 42.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=17 */
%   | | | else return 0.1200952016662588;  // std dev = 1.450, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D) )
%   | then return 0.08844679276219702;  // std dev = 5.822, 160.000 (wgt'ed) examples reached here.  /* #neg=111 #pos=49 */
%   | else if ( follows(C, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.015730172120945077;  // std dev = 1.206, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   else if ( follows(E, A) )
%   | then if ( follows(F, E) )
%   | | then return 0.05894108195343864;  // std dev = 2.422, 30.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=8 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, A), tweets(A, G) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.07606785188608413;  // std dev = 1.475, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(A, C), follows(A, D) )
%   then if ( follows(D, E), follows(E, F) )
%   | then return 0.08890085936592927;  // std dev = 5.693, 149.000 (wgt'ed) examples reached here.  /* #neg=101 #pos=48 */
%   | else if ( follows(D, G) )
%   | | then return 0.26508214829261617;  // std dev = 0.728, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | else return -0.00884722786924179;  // std dev = 1.219, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   else if ( follows(H, A) )
%   | then return 0.22827326479933488;  // std dev = 2.102, 18.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
%   | else if ( follows(I, A), follows(J, I) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, K) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.06073417853188676;  // std dev = 1.481, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( recursion_accounttype(C, D) )
%   | then return 0.052310239937106866;  // std dev = 5.954, 169.000 (wgt'ed) examples reached here.  /* #neg=118 #pos=51 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(E, A) )
%   | then if ( follows(F, E), follows(F, A) )
%   | | then return 0.11116245448144857;  // std dev = 2.101, 19.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=7 */
%   | | else if ( recursion_accounttype(A, G), tweets(E, H) )
%   | | | then return -0.06896115165955555;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, I) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( recursion_accounttype(A, J), tweets(A, K) )
%   | | | then return 0.03712987906717313;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.04259577404896837;  // std dev = 1.279, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D) )
%   | then if ( follows(A, D) )
%   | | then if ( follows(D, C) )
%   | | | then return 0.08903505869219004;  // std dev = 4.363, 85.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=29 */
%   | | | else return 0.10311808320496438;  // std dev = 2.242, 22.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=8 */
%   | | else return 0.09597984583799198;  // std dev = 2.740, 32.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=12 */
%   | else return 0.08530383125376166;  // std dev = 1.139, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return 0.06850243308440906;  // std dev = 2.148, 21.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=7 */
%   | | | else return 0.12253423466849635;  // std dev = 1.588, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D) )
%   | then return 0.05170092403785557;  // std dev = 5.725, 148.000 (wgt'ed) examples reached here.  /* #neg=99 #pos=49 */
%   | else if ( follows(C, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.02639885461738469;  // std dev = 1.172, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   else if ( follows(E, A) )
%   | then return 0.15190740120025187;  // std dev = 2.106, 18.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
%   | else if ( follows(F, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G) )
%   | | | then return 0.2688943723542423;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | | else return 0.04708117859242491;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), follows(D, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.019997490313129893;  // std dev = 5.918, 167.000 (wgt'ed) examples reached here.  /* #neg=116 #pos=51 */
%   else if ( follows(A, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F), tweets(A, G) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.053381434290056456;  // std dev = 0.475, 31.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=11 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then return 0.04790304613365864;  // std dev = 5.800, 149.000 (wgt'ed) examples reached here.  /* #neg=98 #pos=51 */
%   else if ( follows(D, A), follows(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A) )
%   | | then if ( recursion_accounttype(E, F), tweets(E, G) )
%   | | | then return -0.0035900829485653665;  // std dev = 2.308, 24.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=8 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.032109101844098854;  // std dev = 1.507, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */


Results
   AUC ROC   = 0.5
   AUC PR    = 0.007752
   CLL	      = -0.357188
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.148 seconds
Total inference time: 2.771 seconds
AUC ROC: 0.5


Results scoring model
   AUC ROC   = 0.553166
   AUC PR    = 0.007725
   CLL	      = -0.364398
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total scoring time: 1.968 seconds
Parameter learned model CLL: -0.364398


Structure after Parameter Learning
[['accounttype(A, B)', {'': 'follows(A, C), follows(C, C)', 'false': 'tweets(A, D), recursion_accounttype(A, E)', 'false,true': 'tweets(F, D)', 'false,true,true': 'recursion_accounttype(F, E)'}, {'true': [0.0, 0, 0], 'false,true,true,true': [5.636, 108, 45], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 0, 0], 'false,false': [3.294, 30, 17]}], ['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C)', 'false': 'follows(E, A), recursion_accounttype(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, H)', 'false,false,false': 'follows(A, I), recursion_accounttype(I, J)'}, {'true,true': [5.326, 98, 40], 'true,false': [0.816, 1, 2], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [3.13, 23, 17], 'false,false,false,false': [1.499, 9, 3]}], ['accounttype(A, B)', {'': 'follows(C, A)', 'false': 'follows(A, D), follows(D, A)', 'false,false': 'follows(E, A)', 'false,false,false': 'follows(A, F)'}, {'true': [0.477, 78, 42], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [3.178, 25, 17], 'false,false,false,false': [1.45, 7, 3]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D)', 'true,false': 'follows(C, A)', 'false': 'follows(E, A)', 'false,true': 'follows(F, E)', 'false,false': 'follows(A, A), tweets(A, G)', 'false,false,false': 'follows(A, H)'}, {'true,true': [5.822, 111, 49], 'true,false,true': [0.0, 0, 0], 'true,false,false': [1.206, 6, 2], 'false,true,true': [2.422, 22, 8], 'false,true,false': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.475, 8, 3]}], ['accounttype(A, B)', {'': 'recursion_accounttype(A, C), follows(A, D)', 'true': 'follows(D, E), follows(E, F)', 'true,false': 'follows(D, G)', 'false': 'follows(H, A)', 'false,false': 'follows(I, A), follows(J, I)', 'false,false,false': 'follows(A, K)'}, {'true,true': [5.693, 101, 48], 'true,false,true': [0.728, 1, 1], 'true,false,false': [1.219, 7, 2], 'false,true': [2.102, 10, 8], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.481, 8, 3]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'recursion_accounttype(C, D)', 'false': 'follows(E, A)', 'false,true': 'follows(F, E), follows(F, A)', 'false,true,false': 'recursion_accounttype(A, G), tweets(E, H)', 'false,false': 'follows(A, I)', 'false,false,false': 'recursion_accounttype(A, J), tweets(A, K)'}, {'true,true': [5.954, 118, 51], 'true,false': [0.0, 0, 0], 'false,true,true': [2.101, 12, 7], 'false,true,false,true': [0.894, 4, 1], 'false,true,false,false': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.866, 3, 1], 'false,false,false,false': [1.279, 9, 2]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D)', 'true,true': 'follows(A, D)', 'true,true,true': 'follows(D, C)', 'false': 'follows(A, A)', 'false,false': 'follows(A, E)', 'false,false,false': 'tweets(A, F)'}, {'true,true,true,true': [4.363, 56, 29], 'true,true,true,false': [2.242, 14, 8], 'true,true,false': [2.74, 20, 12], 'true,false': [1.139, 4, 2], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [2.148, 14, 7], 'false,false,false,false': [1.588, 7, 4]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D)', 'true,false': 'follows(C, A)', 'false': 'follows(E, A)', 'false,false': 'follows(F, A)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [5.725, 99, 49], 'true,false,true': [0.0, 0, 0], 'true,false,false': [1.172, 5, 2], 'false,true': [2.106, 10, 8], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.707, 1, 1], 'false,false,false,false': [1.195, 5, 2]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), follows(D, D)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F), tweets(A, G)'}, {'true,true': [0.0, 0, 0], 'true,false': [5.918, 116, 51], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.475, 20, 11]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'false': 'follows(D, A), follows(A, D)', 'false,false': 'follows(E, A)', 'false,false,true': 'recursion_accounttype(E, F), tweets(E, G)', 'false,false,false': 'follows(H, A)'}, {'true': [5.8, 98, 51], 'false,true': [0.0, 0, 0], 'false,false,true,true': [2.308, 16, 8], 'false,false,true,false': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.507, 10, 3]}]]
[{'': [nan, 0.2139000000000004], 'false': [0.2076124567474059, 0.23087369850611084], 'false,true': [0.2076124567474059, nan], 'false,true,true': [0.2076124567474059, nan]}, {'': [0.2089239051797857, 0.23706824417990047], 'false': [nan, 0.23706824417990047], 'false,false': [nan, 0.23706824417990047], 'false,false,false': [0.24489988162754384, 0.1871313359447455], 'true': [0.205590932655415, 0.22222222222222218]}, {'': [0.22743309330912548, 0.23567424628493822], 'false': [nan, 0.23567424628493827], 'false,false': [nan, 0.23567424628493822], 'false,false,false': [0.24047038358052356, 0.21021818234725642]}, {'': [0.21066837760048568, 0.19612407363224063], 'true': [0.211854425089206, 0.1819115164760857], 'false': [0.19547825258856177, 0.19767077478917494], 'false,false': [nan, 0.19767077478917494], 'false,false,false': [nan, 0.19767077478917494], 'false,true': [0.19547825258856177, nan], 'true,false': [nan, 0.1819115164760857]}, {'': [0.21606089447000768, 0.23457455235903646], 'false': [0.24549217093705236, 0.1992870059880776], 'true': [0.2174919205572724, 0.19453651109628536], 'false,false': [nan, 0.1992870059880776], 'false,false,false': [nan, 0.1992870059880776], 'true,false': [0.26524382339006825, 0.16518062900837763]}, {'': [0.20976475440905154, 0.2007991962152798], 'true': [0.20976475440905154, nan], 'false': [0.22262087911631454, 0.1603338953560246], 'false,true': [0.2323407841875425, 0.15999999999999998], 'false,false': [nan, 0.1603338953560246], 'false,false,false': [0.18749999999999994, 0.14876033057851235], 'false,true,false': [0.15999999999999998, nan]}, {'': [0.22673520534188926, 0.22369377759920814], 'true': [0.22718088379564397, 0.21635554710180036], 'true,true': [0.2249615147010236, 0.23458927773371233], 'true,true,true': [0.2239886719743151, 0.22856267211218875], 'false': [nan, 0.22369377759920814], 'false,false': [nan, 0.22369377759920814], 'false,false,false': [0.21981130923590425, 0.22918988305546018]}, {'': [0.22036534018452145, 0.2392448706630829], 'false': [0.24644447928939664, 0.2227896068903494], 'false,false': [nan, 0.2227896068903494], 'false,false,false': [0.24999999999999997, 0.2040816326530612], 'true': [0.22148108718795237, 0.19616397798592525], 'true,false': [nan, 0.19616397798592525]}, {'': [0.20969650732744505, 0.2257720108893084], 'false': [nan, 0.2257720108893084], 'false,false': [nan, 0.2257720108893084], 'true': [nan, 0.2096965073274451]}, {'': [0.22578051865433524, 0.20549884777271657], 'false': [nan, 0.20549884777271663], 'false,false': [0.22188940736177118, 0.17471178486216618], 'false,false,true': [0.22188940736177118, nan], 'false,false,false': [nan, 0.17471178486216618]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;accounttype(A, B) :- follows(A, C), follows(C, C).;true;true
0;false;tweets(A, D), recursion_accounttype(A, E).;true;true
0;false,true;tweets(F, D).;true;true
0;false,true,true;recursion_accounttype(F, E).;true;true
1;;accounttype(A, B) :- follows(C, A).;true;true
1;true;follows(D, C).;true;true
1;false;follows(E, A), recursion_accounttype(A, F).;true;true
1;false,false;follows(G, A), recursion_accounttype(G, H).;true;true
1;false,false,false;follows(A, I), recursion_accounttype(I, J).;true;true
2;;accounttype(A, B) :- follows(C, A).;true;true
2;false;follows(A, D), follows(D, A).;true;true
2;false,false;follows(E, A).;true;true
2;false,false,false;follows(A, F).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(C, D).;true;true
3;true,false;follows(C, A).;true;true
3;false;follows(E, A).;true;true
3;false,true;follows(F, E).;true;true
3;false,false;follows(A, A), tweets(A, G).;true;true
3;false,false,false;follows(A, H).;true;true
4;;accounttype(A, B) :- recursion_accounttype(A, C), follows(A, D).;true;true
4;true;follows(D, E), follows(E, F).;true;true
4;true,false;follows(D, G).;true;true
4;false;follows(H, A).;true;true
4;false,false;follows(I, A), follows(J, I).;true;true
4;false,false,false;follows(A, K).;true;true
5;;accounttype(A, B) :- follows(A, C).;true;true
5;true;recursion_accounttype(C, D).;true;true
5;false;follows(E, A).;true;true
5;false,true;follows(F, E), follows(F, A).;true;true
5;false,true,false;recursion_accounttype(A, G), tweets(E, H).;true;true
5;false,false;follows(A, I).;true;true
5;false,false,false;recursion_accounttype(A, J), tweets(A, K).;true;true
6;;accounttype(A, B) :- follows(A, C).;true;true
6;true;follows(C, D).;true;true
6;true,true;follows(A, D).;true;true
6;true,true,true;follows(D, C).;true;true
6;false;follows(A, A).;true;true
6;false,false;follows(A, E).;true;true
6;false,false,false;tweets(A, F).;true;true
7;;accounttype(A, B) :- follows(A, C).;true;true
7;true;follows(C, D).;true;true
7;true,false;follows(C, A).;true;true
7;false;follows(E, A).;true;true
7;false,false;follows(F, A).;true;true
7;false,false,false;tweets(A, G).;true;true
8;;accounttype(A, B) :- follows(A, C).;true;true
8;true;follows(C, D), follows(D, D).;true;true
8;false;follows(A, E).;true;true
8;false,false;follows(A, F), tweets(A, G).;true;true
9;;accounttype(A, B) :- follows(A, C).;true;true
9;false;follows(D, A), follows(A, D).;true;true
9;false,false;follows(E, A).;true;true
9;false,false,true;recursion_accounttype(E, F), tweets(E, G).;true;true
9;false,false,false;follows(H, A).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(C, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), recursion_accounttype(A, E) )
%   | then if ( tweets(F, D) )
%   | | then if ( recursion_accounttype(F, E) )
%   | | | then return 0.16220298915356618;  // std dev = 5.596, 148.000 (wgt'ed) examples reached here.  /* #neg=103 #pos=45 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, H), follows(I, A) )
%   | | | then return -0.09423201728144018;  // std dev = 0.976, 21.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=1 */
%   | | | else return 0.17064893509951234;  // std dev = 2.622, 32.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=10 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.8110657220066757;  // std dev = 0.254, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.6436354246782469;  // std dev = 0.866, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.06153571862869933;  // std dev = 2.851, 92.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=9 */
%   | else return 0.3372349533768815;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else if ( follows(G, A), recursion_accounttype(A, H) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(I, A), recursion_accounttype(I, J) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, K), recursion_accounttype(K, L) )
%   | | | then return 0.2415021874543783;  // std dev = 3.181, 42.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=17 */
%   | | | else return 0.1696705510236963;  // std dev = 1.414, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( recursion_accounttype(E, B) )
%   | | then if ( recursion_accounttype(D, B) )
%   | | | then return 0.6594381070266059;  // std dev = 0.352, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | | else return 0.8190229404547318;  // std dev = 0.181, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( follows(A, F), follows(F, E) )
%   | | | then return -0.14994604684317392;  // std dev = 0.158, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
%   | | | else return -0.1126460401665326;  // std dev = 0.863, 21.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=1 */
%   | else return 0.28592956119728946;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else if ( follows(A, G), follows(G, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(H, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, I) )
%   | | | then return 0.14784697462324678;  // std dev = 3.333, 49.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=17 */
%   | | | else return 0.11187039878227072;  // std dev = 1.449, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.5596503594911041;  // std dev = 0.122, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | else return 0.01797408726803698;  // std dev = 0.357, 122.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=25 */
%   | else if ( follows(C, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.15691310269099148;  // std dev = 0.074, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return 0.4422310121494272;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(G, A) )
%   | then return 0.06478462349321366;  // std dev = 0.336, 25.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=8 */
%   | else if ( follows(A, A), tweets(A, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.06700016275850698;  // std dev = 1.477, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(A, C), follows(A, D) )
%   then if ( follows(D, E), follows(E, F) )
%   | then if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.42041697523535837;  // std dev = 0.121, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else return 0.020544020068300226;  // std dev = 0.355, 121.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=25 */
%   | else if ( follows(D, H) )
%   | | then return 0.6334758040507092;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.17214717838113416;  // std dev = 0.086, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return 0.35616411788253916;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(J, A) )
%   | then return 0.21081010007190362;  // std dev = 0.342, 15.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=8 */
%   | else if ( follows(K, A), follows(L, K) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, M) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.002409869563806562;  // std dev = 1.535, 14.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=3 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( recursion_accounttype(C, D) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.3344244475717804;  // std dev = 0.115, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | else if ( follows(F, A), follows(A, F) )
%   | | | then return -0.04452734797354378;  // std dev = 2.332, 81.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=9 */
%   | | | else return 0.07114089082121552;  // std dev = 3.305, 55.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=18 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(G, A) )
%   | then if ( follows(H, G), follows(H, A) )
%   | | then return 0.05379397081796711;  // std dev = 0.304, 19.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=7 */
%   | | else return 0.23325335489330176;  // std dev = 0.412, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | else if ( follows(A, I) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( recursion_accounttype(A, J), tweets(A, K) )
%   | | | then return -0.015570995787246255;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.032997362876156955;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D) )
%   | then if ( follows(A, D) )
%   | | then if ( follows(D, C) )
%   | | | then return 0.0677844296494198;  // std dev = 2.544, 74.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=29 */
%   | | | else return 0.14736092720633734;  // std dev = 1.468, 17.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=8 */
%   | | else if ( tweets(A, E) )
%   | | | then return 0.1504273705201216;  // std dev = 2.156, 23.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=9 */
%   | | | else return -0.05332321331105945;  // std dev = 1.596, 15.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=3 */
%   | else return 9.003240025557246E-4;  // std dev = 0.297, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G) )
%   | | | then return 0.054301753766914956;  // std dev = 1.544, 19.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=7 */
%   | | | else return 0.19584382416430807;  // std dev = 1.237, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.2783468575460624;  // std dev = 0.143, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else if ( follows(F, A) )
%   | | | then return -0.02704209675991797;  // std dev = 2.312, 70.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=12 */
%   | | | else return 0.058279024765647364;  // std dev = 3.042, 44.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=15 */
%   | else if ( follows(C, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09049822592808658;  // std dev = 0.438, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   else if ( follows(G, A) )
%   | then return 0.004243106168561911;  // std dev = 0.298, 25.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=8 */
%   | else if ( follows(H, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, I) )
%   | | | then return 0.2778075119022906;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | | else return 0.07494816374055774;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), follows(D, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.171265081149498;  // std dev = 0.216, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.43353409871587967;  // std dev = 0.257, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, G), follows(G, A) )
%   | | | then return -0.017864850780230486;  // std dev = 2.250, 66.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=11 */
%   | | | else return 0.030955076269675145;  // std dev = 3.340, 52.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=18 */
%   else if ( follows(A, H) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, I), tweets(A, J) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(K, A), recursion_accounttype(K, B) )
%   | | | then return 0.2966381846176121;  // std dev = 0.927, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return -0.09614065149152314;  // std dev = 1.709, 25.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=4 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.17552125634606588;  // std dev = 0.183, 25.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=24 */
%   | else if ( tweets(A, E) )
%   | | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | | then return 0.5566169390341106;  // std dev = 1.525, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | | else return -0.1869345608864534;  // std dev = 0.583, 73.000 (wgt'ed) examples reached here.  /* #neg=73 */
%   | | else if ( follows(G, A), follows(A, G) )
%   | | | then return -0.03982536385474293;  // std dev = 0.814, 12.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=1 */
%   | | | else return 0.1299656886344912;  // std dev = 1.986, 18.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
%   else if ( follows(H, A), follows(A, H) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(I, A) )
%   | | then return 0.00564720400630408;  // std dev = 0.276, 23.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=8 */
%   | | else if ( follows(J, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.040292751430236425;  // std dev = 1.535, 14.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=3 */


Results
   AUC ROC   = 0.979803
   AUC PR    = 0.312914
   CLL	      = -0.188823
   Precision = 0.320819 at threshold = 0.5
   Recall    = 0.746032
   F1        = 0.448687


Total learning time: 11.617 seconds
Total inference time: 109.669 seconds
AUC ROC: 0.979803


Results scoring model
   AUC ROC   = 0.972705
   AUC PR    = 0.289024
   CLL	      = -0.21042
   Precision = 0.288 at threshold = 0.5
   Recall    = 0.580645
   F1        = 0.385027


Total scoring time: 44.072 seconds
Refined model CLL: -0.21042


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.979803
   AUC PR    = 0.312914
   CLL	      = -0.188823
   Precision = 0.320819 at threshold = 0.5
   Recall    = 0.746032
   F1        = 0.448687


Total learning time: 58.80500000000001 seconds
Total inference time: 109.669 seconds
AUC ROC: 0.979803
Total revision time: 58.80500000000001
Best scored revision CLL: -0.21042


Dataset: 7_yeast_twitter, Fold: 1, Type: Transfer (trRDN-B), Time: 00:35:16
{'AUC ROC': 0.979803, 'AUC PR': 0.312914, 'CLL': -0.188823, 'Precision': [0.320819, 0.5], 'Recall': 0.746032, 'F1': 0.448687, 'Learning time': 58.80500000000001, 'Inference time': 109.669, 'parameter_0.4': {'AUC ROC': 0.5, 'AUC PR': 0.007752, 'CLL': -0.357188, 'Precision': [nan, 0.5], 'Recall': 0.0, 'F1': nan, 'Learning time': 1.148, 'Inference time': 2.771}}


Amount of data: 0.6
******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(A, C), interaction(C, C).;true;true
0;true;interaction(C, A), phenotype(C, D).;false;true
0;true,false;interaction(E, A), enzyme(A, F).;true;true
0;true,false,true;complex(A, G), complex(C, H).;false;false
0;true,false,false;recursion_proteinclass(C, B).;false;false
0;false;location(A, I), phenotype(A, J).;true;false
0;false,true;location(K, I), recursion_proteinclass(K, B).;true;false
0;false,true,true;phenotype(K, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), complex(A, D).;true;true
1;true;interaction(E, C), recursion_proteinclass(E, B).;false;false
1;false;interaction(F, A), phenotype(A, G).;true;true
1;false,true;recursion_proteinclass(F, B).;false;true
1;false,true,false;interaction(H, F), recursion_proteinclass(H, B).;false;false
1;false,false;interaction(I, A), phenotype(I, J).;true;true
1;false,false,true;interaction(A, K), recursion_proteinclass(K, B).;false;false
1;false,false,false;interaction(A, L), phenotype(L, M).;false;false
2;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
2;true;complex(C, D).;false;false
2;false;interaction(A, E), interaction(E, A).;true;true
2;false,true;interaction(A, A).;false;true
2;false,true,false;enzyme(E, F), enzyme(A, F).;false;false
2;false,false;interaction(G, A), enzyme(G, H).;true;true
2;false,false,true;complex(G, I), complex(A, I).;false;false
2;false,false,false;interaction(A, J), recursion_proteinclass(J, B).;false;false
3;;proteinclass(A, B) :- complex(A, C), interaction(A, D).;true;true
3;true;interaction(D, E), recursion_proteinclass(E, B).;false;true
3;true,false;interaction(D, A).;false;false
3;false;interaction(F, A), enzyme(F, G).;true;true
3;false,true;interaction(H, F), recursion_proteinclass(H, B).;false;true
3;false,true,false;interaction(A, F).;false;false
3;false,false;interaction(A, A), location(A, I).;false;true
3;false,false,false;interaction(A, J), enzyme(J, K).;false;false
4;;proteinclass(A, B) :- phenotype(A, C), interaction(A, D).;true;true
4;true;interaction(D, E), interaction(E, F).;false;true
4;true,false;recursion_proteinclass(D, B).;false;true
4;true,false,false;enzyme(A, G), interaction(D, H).;false;false
4;false;interaction(I, A), recursion_proteinclass(I, B).;false;true
4;false,false;interaction(J, A), interaction(K, J).;true;true
4;false,false,true;recursion_proteinclass(K, B), location(J, L).;false;false
4;false,false,false;interaction(A, M), recursion_proteinclass(M, B).;false;false
5;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
5;true;enzyme(A, D), phenotype(C, E).;false;false
5;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
5;false,true;interaction(G, F), interaction(G, A).;false;true
5;false,true,false;phenotype(A, H), location(F, I).;false;false
5;false,false;interaction(A, J), complex(J, K).;true;true
5;false,false,true;interaction(J, L), recursion_proteinclass(L, B).;false;false
5;false,false,false;phenotype(A, M), location(A, N).;false;false
6;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
6;true;interaction(C, D), complex(D, E).;true;false
6;true,true;interaction(A, D).;true;false
6;true,true,true;interaction(D, C).;false;false
6;false;interaction(A, A).;false;true
6;false,false;interaction(A, F), enzyme(F, G).;true;true
6;false,false,true;phenotype(F, H), complex(F, I).;false;false
6;false,false,false;location(A, J).;false;false
7;;proteinclass(A, B) :- interaction(A, C), complex(C, D).;true;true
7;true;recursion_proteinclass(C, B).;false;true
7;true,false;interaction(C, E), recursion_proteinclass(E, B).;false;true
7;true,false,false;interaction(C, A).;false;false
7;false;interaction(F, A), recursion_proteinclass(F, B).;false;true
7;false,false;interaction(G, A), enzyme(G, H).;true;true
7;false,false,true;interaction(A, I), interaction(G, I).;false;false
7;false,false,false;location(A, J), enzyme(A, K).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;interaction(C, D), interaction(D, D).;false;false
8;false;interaction(A, E), enzyme(A, F).;true;true
8;false,true;interaction(E, G), recursion_proteinclass(G, B).;false;true
8;false,true,false;interaction(E, A).;false;false
8;false,false;interaction(A, H), location(A, I).;true;true
8;false,false,true;interaction(H, J), recursion_proteinclass(J, B).;false;false
8;false,false,false;enzyme(A, K).;false;false
9;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;false;true
9;false;interaction(D, A), interaction(A, D).;true;true
9;false,true;phenotype(A, E), phenotype(D, E).;true;true
9;false,true,true;complex(D, F).;false;false
9;false,true,false;interaction(D, D).;false;false
9;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
9;false,false,true;phenotype(G, H), location(G, I).;false;false
9;false,false,false;complex(A, J), interaction(K, A).;false;false


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(C, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), recursion_accounttype(A, E) )
%   | then if ( tweets(F, D) )
%   | | then if ( recursion_accounttype(F, E) )
%   | | | then return 0.17834597943448904;  // std dev = 6.647, 203.000 (wgt'ed) examples reached here.  /* #neg=138 #pos=65 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.23652731347788944;  // std dev = 4.172, 74.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=28 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C) )
%   | then return 0.18108920763328684;  // std dev = 6.096, 164.000 (wgt'ed) examples reached here.  /* #neg=107 #pos=57 */
%   | else return 0.23502311315966015;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   else if ( follows(E, A), recursion_accounttype(A, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, I), recursion_accounttype(I, J) )
%   | | | then return 0.23795323130317558;  // std dev = 3.928, 64.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=26 */
%   | | | else return 0.36236363411615924;  // std dev = 1.936, 15.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=8 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then return 0.11696307039450421;  // std dev = 0.463, 190.000 (wgt'ed) examples reached here.  /* #neg=131 #pos=59 */
%   else if ( follows(A, D), follows(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, F) )
%   | | | then return 0.17775257122320412;  // std dev = 4.009, 68.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=26 */
%   | | | else return 0.13513526679086363;  // std dev = 2.260, 22.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=8 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D) )
%   | then return 0.12642896515468485;  // std dev = 6.909, 211.000 (wgt'ed) examples reached here.  /* #neg=138 #pos=73 */
%   | else if ( follows(C, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.08337206353173927;  // std dev = 1.662, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   else if ( follows(E, A) )
%   | then if ( follows(F, E) )
%   | | then return -0.0012442913503754067;  // std dev = 2.510, 38.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=8 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, A), tweets(A, G) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.2169900515319698;  // std dev = 2.064, 17.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=8 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(A, C), follows(A, D) )
%   then if ( follows(D, E), follows(E, F) )
%   | then return 0.10009715949874068;  // std dev = 6.831, 208.000 (wgt'ed) examples reached here.  /* #neg=137 #pos=71 */
%   | else if ( follows(D, G) )
%   | | then return 0.09414863489713678;  // std dev = 1.149, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | else return 0.09113860313408612;  // std dev = 1.638, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   else if ( follows(H, A) )
%   | then return 0.03875988472898856;  // std dev = 2.446, 32.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=8 */
%   | else if ( follows(I, A), follows(J, I) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, K) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.1252167931635938;  // std dev = 2.155, 19.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=8 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( recursion_accounttype(C, D) )
%   | then return 0.08114728577825367;  // std dev = 7.114, 226.000 (wgt'ed) examples reached here.  /* #neg=149 #pos=77 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(E, A) )
%   | then if ( follows(F, E), follows(F, A) )
%   | | then return 0.22035697167425602;  // std dev = 1.981, 16.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=7 */
%   | | else if ( recursion_accounttype(A, G), tweets(E, H) )
%   | | | then return 0.11347321425931496;  // std dev = 0.808, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, I) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( recursion_accounttype(A, J), tweets(A, K) )
%   | | | then return 0.01943319315408519;  // std dev = 1.414, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | | | else return 0.030578840308456163;  // std dev = 1.793, 14.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=5 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D) )
%   | then if ( follows(A, D) )
%   | | then if ( follows(D, C) )
%   | | | then return 0.01997139979241755;  // std dev = 5.452, 144.000 (wgt'ed) examples reached here.  /* #neg=102 #pos=42 */
%   | | | else return 0.006784294824980813;  // std dev = 2.543, 32.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=9 */
%   | | else return 0.2636068331786098;  // std dev = 3.146, 40.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=22 */
%   | else return 0.09731247936280735;  // std dev = 1.579, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return 0.07641953229877362;  // std dev = 2.403, 26.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=9 */
%   | | | else return 0.09246525730423158;  // std dev = 2.059, 17.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D) )
%   | then return 0.06412224494714426;  // std dev = 6.802, 207.000 (wgt'ed) examples reached here.  /* #neg=134 #pos=73 */
%   | else if ( follows(C, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.03642785425197809;  // std dev = 1.643, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   else if ( follows(E, A) )
%   | then return 0.005867959234820338;  // std dev = 2.400, 29.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=8 */
%   | else if ( follows(F, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G) )
%   | | | then return -0.03490219979905887;  // std dev = 1.449, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | | | else return 0.10036711851100528;  // std dev = 1.651, 11.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=5 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), follows(D, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.03937396592924899;  // std dev = 7.077, 223.000 (wgt'ed) examples reached here.  /* #neg=146 #pos=77 */
%   else if ( follows(A, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F), tweets(A, G) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.007430134115497766;  // std dev = 0.451, 54.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=16 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then return -0.004498664156957985;  // std dev = 7.259, 250.000 (wgt'ed) examples reached here.  /* #neg=173 #pos=77 */
%   else if ( follows(D, A), follows(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A) )
%   | | then if ( recursion_accounttype(E, F), tweets(E, G) )
%   | | | then return 0.02671468605144948;  // std dev = 2.365, 27.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=8 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.039339155692541025;  // std dev = 2.207, 20.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=8 */


Results
   AUC ROC   = 0.5
   AUC PR    = 0.007752
   CLL	      = -0.367296
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.402 seconds
Total inference time: 2.895 seconds
AUC ROC: 0.5


Results scoring model
   AUC ROC   = 0.554501
   AUC PR    = 0.007493
   CLL	      = -0.378205
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total scoring time: 2.639 seconds
Parameter learned model CLL: -0.378205


Structure after Parameter Learning
[['accounttype(A, B)', {'': 'follows(A, C), follows(C, C)', 'false': 'tweets(A, D), recursion_accounttype(A, E)', 'false,true': 'tweets(F, D)', 'false,true,true': 'recursion_accounttype(F, E)'}, {'true': [0.0, 0, 0], 'false,true,true,true': [6.647, 138, 65], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 0, 0], 'false,false': [4.172, 46, 28]}], ['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C)', 'false': 'follows(E, A), recursion_accounttype(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, H)', 'false,false,false': 'follows(A, I), recursion_accounttype(I, J)'}, {'true,true': [6.096, 107, 57], 'true,false': [1.095, 3, 2], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [3.928, 38, 26], 'false,false,false,false': [1.936, 7, 8]}], ['accounttype(A, B)', {'': 'follows(C, A)', 'false': 'follows(A, D), follows(D, A)', 'false,false': 'follows(E, A)', 'false,false,false': 'follows(A, F)'}, {'true': [0.463, 131, 59], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [4.009, 42, 26], 'false,false,false,false': [2.26, 14, 8]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D)', 'true,false': 'follows(C, A)', 'false': 'follows(E, A)', 'false,true': 'follows(F, E)', 'false,false': 'follows(A, A), tweets(A, G)', 'false,false,false': 'follows(A, H)'}, {'true,true': [6.909, 138, 73], 'true,false,true': [0.0, 0, 0], 'true,false,false': [1.662, 9, 4], 'false,true,true': [2.51, 30, 8], 'false,true,false': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.064, 9, 8]}], ['accounttype(A, B)', {'': 'recursion_accounttype(A, C), follows(A, D)', 'true': 'follows(D, E), follows(E, F)', 'true,false': 'follows(D, G)', 'false': 'follows(H, A)', 'false,false': 'follows(I, A), follows(J, I)', 'false,false,false': 'follows(A, K)'}, {'true,true': [6.831, 137, 71], 'true,false,true': [1.149, 4, 2], 'true,false,false': [1.638, 8, 4], 'false,true': [2.446, 24, 8], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.155, 11, 8]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'recursion_accounttype(C, D)', 'false': 'follows(E, A)', 'false,true': 'follows(F, E), follows(F, A)', 'false,true,false': 'recursion_accounttype(A, G), tweets(E, H)', 'false,false': 'follows(A, I)', 'false,false,false': 'recursion_accounttype(A, J), tweets(A, K)'}, {'true,true': [7.114, 149, 77], 'true,false': [0.0, 0, 0], 'false,true,true': [1.981, 9, 7], 'false,true,false,true': [0.808, 2, 1], 'false,true,false,false': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [1.414, 6, 3], 'false,false,false,false': [1.793, 9, 5]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D)', 'true,true': 'follows(A, D)', 'true,true,true': 'follows(D, C)', 'false': 'follows(A, A)', 'false,false': 'follows(A, E)', 'false,false,false': 'tweets(A, F)'}, {'true,true,true,true': [5.452, 102, 42], 'true,true,true,false': [2.543, 23, 9], 'true,true,false': [3.146, 18, 22], 'true,false': [1.579, 7, 4], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [2.403, 17, 9], 'false,false,false,false': [2.059, 10, 7]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D)', 'true,false': 'follows(C, A)', 'false': 'follows(E, A)', 'false,false': 'follows(F, A)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [6.802, 134, 73], 'true,false,true': [0.0, 0, 0], 'true,false,false': [1.643, 8, 4], 'false,true': [2.4, 21, 8], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [1.449, 7, 3], 'false,false,false,false': [1.651, 6, 5]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), follows(D, D)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F), tweets(A, G)'}, {'true,true': [0.0, 0, 0], 'true,false': [7.077, 146, 77], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.451, 38, 16]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'false': 'follows(D, A), follows(A, D)', 'false,false': 'follows(E, A)', 'false,false,true': 'recursion_accounttype(E, F), tweets(E, G)', 'false,false,false': 'follows(H, A)'}, {'true': [7.259, 173, 77], 'false,true': [0.0, 0, 0], 'false,false,true,true': [2.365, 19, 8], 'false,false,true,false': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.207, 12, 8]}]]
[{'': [nan, 0.2230186761198505], 'false': [0.2176708971341214, 0.23520818115412848], 'false,true': [0.2176708971341214, nan], 'false,true,true': [0.2176708971341214, nan]}, {'': [0.227095049880845, 0.245153936037121], 'false': [nan, 0.245153936037121], 'false,false': [nan, 0.245153936037121], 'false,false,false': [0.24111531922177443, 0.24984627040288138], 'true': [0.22661554515049948, 0.24000000000000005]}, {'': [0.21408513620126415, 0.23563858821049793], 'false': [nan, 0.23563858821049777], 'false,false': [nan, 0.23563858821049793], 'false,false,false': [0.2363126515244285, 0.23218285361538368]}, {'': [0.22556015131936508, 0.20220509812102128], 'true': [0.22626086755969183, 0.21244068317268833], 'true,false': [nan, 0.21244068317268833], 'false': [0.16583688569029098, 0.25059335526031656], 'false,false': [nan, 0.25059335526031656], 'false,false,false': [nan, 0.25059335526031656], 'false,true': [0.16583688569029098, nan]}, {'': [0.22419807118557988, 0.210067151575217], 'true': [0.224348840715691, 0.2223976005297629], 'true,false': [0.21992402851423823, 0.22363136644045367], 'false': [0.186897064928019, 0.24440038668611197], 'false,false': [nan, 0.24440038668611197], 'false,false,false': [nan, 0.24440038668611197]}, {'': [0.22394774355941055, 0.24167697782742237], 'false': [0.24255401462684945, 0.22673766320478855], 'false,true': [0.2453942487692758, 0.21778577280130337], 'false,false': [nan, 0.22673766320478855], 'false,false,false': [0.2222222222222222, 0.22959183673469402], 'true': [0.22394774355941055, nan], 'false,true,false': [0.21778577280130337, nan]}, {'': [0.2227476832307462, 0.23300863496596652], 'false': [nan, 0.23300863496596652], 'false,false': [nan, 0.23300863496596652], 'false,false,false': [0.22212526379359124, 0.24949811418910695], 'true': [0.22249562108958626, 0.2265857987703426], 'true,true': [0.20562767207975516, 0.24739199756116276], 'true,true,true': [0.20638277872135777, 0.2020874105891929]}, {'': [0.2236586442766844, 0.21389486504998842], 'true': [0.2235357980715452, 0.22505278830105704], 'true,false': [nan, 0.22505278830105704], 'false': [0.1986414005277264, 0.2344342040931857], 'false,false': [nan, 0.2344342040931857], 'false,false,false': [0.20999999999999996, 0.24793388429752053]}, {'': [0.22457636711302179, 0.20321868006680452], 'true': [nan, 0.2245763671130217], 'false': [nan, 0.20321868006680452], 'false,false': [nan, 0.20321868006680452]}, {'': [0.2107802591150245, 0.22271224655585548], 'false': [nan, 0.2227122465558555], 'false,false': [0.20721719323446622, 0.24353901140546702], 'false,false,false': [nan, 0.24353901140546702], 'false,false,true': [0.20721719323446622, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;accounttype(A, B) :- follows(A, C), follows(C, C).;true;true
0;false;tweets(A, D), recursion_accounttype(A, E).;true;true
0;false,true;tweets(F, D).;true;true
0;false,true,true;recursion_accounttype(F, E).;true;true
1;;accounttype(A, B) :- follows(C, A).;true;true
1;true;follows(D, C).;true;true
1;false;follows(E, A), recursion_accounttype(A, F).;true;true
1;false,false;follows(G, A), recursion_accounttype(G, H).;true;true
1;false,false,false;follows(A, I), recursion_accounttype(I, J).;true;true
2;;accounttype(A, B) :- follows(C, A).;true;true
2;false;follows(A, D), follows(D, A).;true;true
2;false,false;follows(E, A).;true;true
2;false,false,false;follows(A, F).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(C, D).;true;true
3;true,false;follows(C, A).;true;true
3;false;follows(E, A).;true;true
3;false,true;follows(F, E).;true;true
3;false,false;follows(A, A), tweets(A, G).;true;true
3;false,false,false;follows(A, H).;true;true
4;;accounttype(A, B) :- recursion_accounttype(A, C), follows(A, D).;true;true
4;true;follows(D, E), follows(E, F).;true;true
4;true,false;follows(D, G).;true;true
4;false;follows(H, A).;true;true
4;false,false;follows(I, A), follows(J, I).;true;true
4;false,false,false;follows(A, K).;true;true
5;;accounttype(A, B) :- follows(A, C).;true;true
5;true;recursion_accounttype(C, D).;true;true
5;false;follows(E, A).;true;true
5;false,true;follows(F, E), follows(F, A).;true;true
5;false,true,false;recursion_accounttype(A, G), tweets(E, H).;true;true
5;false,false;follows(A, I).;true;true
5;false,false,false;recursion_accounttype(A, J), tweets(A, K).;true;true
6;;accounttype(A, B) :- follows(A, C).;true;true
6;true;follows(C, D).;true;true
6;true,true;follows(A, D).;true;true
6;true,true,true;follows(D, C).;true;true
6;false;follows(A, A).;true;true
6;false,false;follows(A, E).;true;true
6;false,false,false;tweets(A, F).;true;true
7;;accounttype(A, B) :- follows(A, C).;true;true
7;true;follows(C, D).;true;true
7;true,false;follows(C, A).;true;true
7;false;follows(E, A).;true;true
7;false,false;follows(F, A).;true;true
7;false,false,false;tweets(A, G).;true;true
8;;accounttype(A, B) :- follows(A, C).;true;true
8;true;follows(C, D), follows(D, D).;true;true
8;false;follows(A, E).;true;true
8;false,false;follows(A, F), tweets(A, G).;true;true
9;;accounttype(A, B) :- follows(A, C).;true;true
9;false;follows(D, A), follows(A, D).;true;true
9;false,false;follows(E, A).;true;true
9;false,false,true;recursion_accounttype(E, F), tweets(E, G).;true;true
9;false,false,false;follows(H, A).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(C, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), recursion_accounttype(A, E) )
%   | then if ( tweets(F, D) )
%   | | then if ( recursion_accounttype(F, E) )
%   | | | then return 0.1815320196766281;  // std dev = 6.632, 201.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=65 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( follows(H, A) )
%   | | | then return -0.05489454316135737;  // std dev = 1.351, 23.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=2 */
%   | | | else return 0.19857446701440598;  // std dev = 3.249, 47.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=16 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F), follows(A, E) )
%   | | | then return 0.7177484331956587;  // std dev = 1.328, 25.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=23 */
%   | | | else return 0.821041346014637;  // std dev = 0.153, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( tweets(A, G), follows(A, H) )
%   | | | then return -0.002372784550669278;  // std dev = 3.543, 92.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=15 */
%   | | | else return -0.10357087480827419;  // std dev = 1.404, 45.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=2 */
%   | else return 0.234583737188461;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   else if ( follows(I, A), recursion_accounttype(A, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(K, A), recursion_accounttype(K, L) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, M), recursion_accounttype(M, N) )
%   | | | then return 0.17098614567720566;  // std dev = 4.151, 77.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=26 */
%   | | | else return 0.30378008516024524;  // std dev = 2.058, 17.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=8 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.647088656952891;  // std dev = 0.160, 43.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=42 */
%   | else if ( follows(A, E), tweets(A, F) )
%   | | then if ( follows(G, A), follows(G, E) )
%   | | | then return -0.04057918644555343;  // std dev = 2.808, 72.000 (wgt'ed) examples reached here.  /* #neg=63 #pos=9 */
%   | | | else return 0.20991104892434725;  // std dev = 1.936, 16.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=6 */
%   | | else if ( tweets(A, H) )
%   | | | then return -0.15160873260412705;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | | else return -0.05696655385656821;  // std dev = 1.366, 30.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=2 */
%   else if ( follows(A, I), follows(I, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(J, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, K) )
%   | | | then return 0.16958467680133926;  // std dev = 4.076, 72.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=26 */
%   | | | else return 0.1505038646995226;  // std dev = 2.255, 22.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=8 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.5308370479728279;  // std dev = 0.257, 39.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=37 */
%   | | else return 0.016034770129818663;  // std dev = 0.376, 180.000 (wgt'ed) examples reached here.  /* #neg=144 #pos=36 */
%   | else if ( follows(C, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, A) )
%   | | | then return 0.38177965026059457;  // std dev = 0.732, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.0653044073758404;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   else if ( follows(G, A) )
%   | then return 0.02116001360805219;  // std dev = 0.311, 34.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=8 */
%   | else if ( follows(A, A), tweets(A, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.18102118040833562;  // std dev = 2.153, 19.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=8 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(A, C), follows(A, D) )
%   then if ( follows(D, E), follows(E, F) )
%   | then if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.4305447699474257;  // std dev = 0.190, 37.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=36 */
%   | | else return -0.0053047963165509995;  // std dev = 0.373, 184.000 (wgt'ed) examples reached here.  /* #neg=149 #pos=35 */
%   | else if ( follows(D, H) )
%   | | then return 0.45785312176117277;  // std dev = 0.759, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(I, A) )
%   | | | then return 0.30529955057804087;  // std dev = 0.727, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.2677322615231795;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else if ( follows(J, A) )
%   | then return 0.05068229588007034;  // std dev = 0.312, 30.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=8 */
%   | else if ( follows(K, A), follows(L, K) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, M) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.1699199169367085;  // std dev = 2.109, 18.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( recursion_accounttype(C, D) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.3653226480241413;  // std dev = 0.147, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | else if ( follows(F, A), follows(A, F) )
%   | | | then return -0.05388434202703687;  // std dev = 3.161, 110.000 (wgt'ed) examples reached here.  /* #neg=98 #pos=12 */
%   | | | else return 0.07362288883078129;  // std dev = 4.178, 88.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=28 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(G, A) )
%   | then if ( follows(H, G), follows(H, A) )
%   | | then return 0.09330943698643031;  // std dev = 0.310, 19.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=7 */
%   | | else return 0.07147049034095079;  // std dev = 0.402, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( follows(A, I) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( recursion_accounttype(A, J), tweets(A, K) )
%   | | | then return 0.06780012283245032;  // std dev = 1.369, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.14370659664112662;  // std dev = 1.651, 11.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=5 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D) )
%   | then if ( follows(A, D) )
%   | | then return 0.0053561154586610005;  // std dev = 0.300, 178.000 (wgt'ed) examples reached here.  /* #neg=127 #pos=51 */
%   | | else return 0.16863160683105785;  // std dev = 0.480, 53.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=22 */
%   | else if ( tweets(A, E) )
%   | | then if ( tweets(F, E), follows(F, A) )
%   | | | then return -0.11130011491426162;  // std dev = 0.567, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return -0.06896754626442861;  // std dev = 0.839, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return 0.10144643037705778;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, H) )
%   | | | then return 0.07976726353879768;  // std dev = 1.803, 26.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=9 */
%   | | | else return 0.08641971525666706;  // std dev = 1.945, 18.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=7 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.2897681153096118;  // std dev = 0.135, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | else return -0.00433717405444241;  // std dev = 0.371, 182.000 (wgt'ed) examples reached here.  /* #neg=146 #pos=36 */
%   | else if ( follows(C, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, A) )
%   | | | then return 0.015347056193234797;  // std dev = 0.954, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.3595652559302827;  // std dev = 0.784, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(G, A) )
%   | then return -0.0265772268649296;  // std dev = 0.273, 40.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=8 */
%   | else if ( follows(H, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, I) )
%   | | | then return -0.039465833473419844;  // std dev = 1.449, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | | | else return 0.054523485344253435;  // std dev = 1.708, 12.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=5 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), follows(D, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.1782914528659486;  // std dev = 0.239, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | | else return 0.4876591520246429;  // std dev = 0.233, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(G, A) )
%   | | | then return -0.03843593858835191;  // std dev = 3.412, 117.000 (wgt'ed) examples reached here.  /* #neg=101 #pos=16 */
%   | | | else return 0.06340069658571836;  // std dev = 3.930, 75.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=26 */
%   else if ( follows(A, H) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, I), tweets(A, J) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(K, A), recursion_accounttype(K, B) )
%   | | | then return 0.33769789089442154;  // std dev = 0.926, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return -0.03638567861178316;  // std dev = 2.457, 42.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=9 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, A), tweets(D, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then return 0.3490699881531422;  // std dev = 0.302, 51.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=50 */
%   | | else return -0.15735240097020792;  // std dev = 0.434, 117.000 (wgt'ed) examples reached here.  /* #neg=117 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.6543760172333987;  // std dev = 0.735, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | | else return -0.26676414275283883;  // std dev = 0.138, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | else return -0.1626940481866006;  // std dev = 0.430, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   else if ( follows(I, A), follows(A, I) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(J, A) )
%   | | then return -0.018071814871373333;  // std dev = 0.288, 32.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=8 */
%   | | else if ( follows(K, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.09265879501372144;  // std dev = 2.117, 18.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */


Results
   AUC ROC   = 0.971686
   AUC PR    = 0.317396
   CLL	      = -0.193825
   Precision = 0.332117 at threshold = 0.5
   Recall    = 0.722222
   F1        = 0.455


Total learning time: 15.286 seconds
Total inference time: 160.62 seconds
AUC ROC: 0.971686


Results scoring model
   AUC ROC   = 0.955882
   AUC PR    = 0.31213
   CLL	      = -0.212465
   Precision = 0.291429 at threshold = 0.5
   Recall    = 0.548387
   F1        = 0.380597


Total scoring time: 104.38900000000001 seconds
Refined model CLL: -0.212465


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.971686
   AUC PR    = 0.317396
   CLL	      = -0.193825
   Precision = 0.332117 at threshold = 0.5
   Recall    = 0.722222
   F1        = 0.455


Total learning time: 123.71600000000001 seconds
Total inference time: 160.62 seconds
AUC ROC: 0.971686
Total revision time: 123.71600000000001
Best scored revision CLL: -0.212465


Dataset: 7_yeast_twitter, Fold: 1, Type: Transfer (trRDN-B), Time: 00:40:04
{'AUC ROC': 0.971686, 'AUC PR': 0.317396, 'CLL': -0.193825, 'Precision': [0.332117, 0.5], 'Recall': 0.722222, 'F1': 0.455, 'Learning time': 123.71600000000001, 'Inference time': 160.62, 'parameter_0.6': {'AUC ROC': 0.5, 'AUC PR': 0.007752, 'CLL': -0.367296, 'Precision': [nan, 0.5], 'Recall': 0.0, 'F1': nan, 'Learning time': 1.402, 'Inference time': 2.895}}


Amount of data: 0.8
******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(A, C), interaction(C, C).;true;true
0;true;interaction(C, A), phenotype(C, D).;false;true
0;true,false;interaction(E, A), enzyme(A, F).;true;true
0;true,false,true;complex(A, G), complex(C, H).;false;false
0;true,false,false;recursion_proteinclass(C, B).;false;false
0;false;location(A, I), phenotype(A, J).;true;false
0;false,true;location(K, I), recursion_proteinclass(K, B).;true;false
0;false,true,true;phenotype(K, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), complex(A, D).;true;true
1;true;interaction(E, C), recursion_proteinclass(E, B).;false;false
1;false;interaction(F, A), phenotype(A, G).;true;true
1;false,true;recursion_proteinclass(F, B).;false;true
1;false,true,false;interaction(H, F), recursion_proteinclass(H, B).;false;false
1;false,false;interaction(I, A), phenotype(I, J).;true;true
1;false,false,true;interaction(A, K), recursion_proteinclass(K, B).;false;false
1;false,false,false;interaction(A, L), phenotype(L, M).;false;false
2;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
2;true;complex(C, D).;false;false
2;false;interaction(A, E), interaction(E, A).;true;true
2;false,true;interaction(A, A).;false;true
2;false,true,false;enzyme(E, F), enzyme(A, F).;false;false
2;false,false;interaction(G, A), enzyme(G, H).;true;true
2;false,false,true;complex(G, I), complex(A, I).;false;false
2;false,false,false;interaction(A, J), recursion_proteinclass(J, B).;false;false
3;;proteinclass(A, B) :- complex(A, C), interaction(A, D).;true;true
3;true;interaction(D, E), recursion_proteinclass(E, B).;false;true
3;true,false;interaction(D, A).;false;false
3;false;interaction(F, A), enzyme(F, G).;true;true
3;false,true;interaction(H, F), recursion_proteinclass(H, B).;false;true
3;false,true,false;interaction(A, F).;false;false
3;false,false;interaction(A, A), location(A, I).;false;true
3;false,false,false;interaction(A, J), enzyme(J, K).;false;false
4;;proteinclass(A, B) :- phenotype(A, C), interaction(A, D).;true;true
4;true;interaction(D, E), interaction(E, F).;false;true
4;true,false;recursion_proteinclass(D, B).;false;true
4;true,false,false;enzyme(A, G), interaction(D, H).;false;false
4;false;interaction(I, A), recursion_proteinclass(I, B).;false;true
4;false,false;interaction(J, A), interaction(K, J).;true;true
4;false,false,true;recursion_proteinclass(K, B), location(J, L).;false;false
4;false,false,false;interaction(A, M), recursion_proteinclass(M, B).;false;false
5;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
5;true;enzyme(A, D), phenotype(C, E).;false;false
5;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
5;false,true;interaction(G, F), interaction(G, A).;false;true
5;false,true,false;phenotype(A, H), location(F, I).;false;false
5;false,false;interaction(A, J), complex(J, K).;true;true
5;false,false,true;interaction(J, L), recursion_proteinclass(L, B).;false;false
5;false,false,false;phenotype(A, M), location(A, N).;false;false
6;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
6;true;interaction(C, D), complex(D, E).;true;false
6;true,true;interaction(A, D).;true;false
6;true,true,true;interaction(D, C).;false;false
6;false;interaction(A, A).;false;true
6;false,false;interaction(A, F), enzyme(F, G).;true;true
6;false,false,true;phenotype(F, H), complex(F, I).;false;false
6;false,false,false;location(A, J).;false;false
7;;proteinclass(A, B) :- interaction(A, C), complex(C, D).;true;true
7;true;recursion_proteinclass(C, B).;false;true
7;true,false;interaction(C, E), recursion_proteinclass(E, B).;false;true
7;true,false,false;interaction(C, A).;false;false
7;false;interaction(F, A), recursion_proteinclass(F, B).;false;true
7;false,false;interaction(G, A), enzyme(G, H).;true;true
7;false,false,true;interaction(A, I), interaction(G, I).;false;false
7;false,false,false;location(A, J), enzyme(A, K).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;interaction(C, D), interaction(D, D).;false;false
8;false;interaction(A, E), enzyme(A, F).;true;true
8;false,true;interaction(E, G), recursion_proteinclass(G, B).;false;true
8;false,true,false;interaction(E, A).;false;false
8;false,false;interaction(A, H), location(A, I).;true;true
8;false,false,true;interaction(H, J), recursion_proteinclass(J, B).;false;false
8;false,false,false;enzyme(A, K).;false;false
9;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;false;true
9;false;interaction(D, A), interaction(A, D).;true;true
9;false,true;phenotype(A, E), phenotype(D, E).;true;true
9;false,true,true;complex(D, F).;false;false
9;false,true,false;interaction(D, D).;false;false
9;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
9;false,false,true;phenotype(G, H), location(G, I).;false;false
9;false,false,false;complex(A, J), interaction(K, A).;false;false


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(C, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), recursion_accounttype(A, E) )
%   | then if ( tweets(F, D) )
%   | | then if ( recursion_accounttype(F, E) )
%   | | | then return 0.20045662740720332;  // std dev = 7.651, 260.000 (wgt'ed) examples reached here.  /* #neg=171 #pos=89 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.20468358856485747;  // std dev = 4.782, 101.000 (wgt'ed) examples reached here.  /* #neg=66 #pos=35 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C) )
%   | then return 0.18683043690850015;  // std dev = 7.273, 231.000 (wgt'ed) examples reached here.  /* #neg=149 #pos=82 */
%   | else return 0.4986212221466384;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(E, A), recursion_accounttype(A, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, I), recursion_accounttype(I, J) )
%   | | | then return 0.13072131831629072;  // std dev = 4.736, 107.000 (wgt'ed) examples reached here.  /* #neg=75 #pos=32 */
%   | | | else return 0.19518742951388887;  // std dev = 2.256, 22.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=8 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then return 0.12023236582386944;  // std dev = 0.465, 265.000 (wgt'ed) examples reached here.  /* #neg=181 #pos=84 */
%   else if ( follows(A, D), follows(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, F) )
%   | | | then return 0.13904757305587198;  // std dev = 4.643, 98.000 (wgt'ed) examples reached here.  /* #neg=66 #pos=32 */
%   | | | else return 0.07829740557090105;  // std dev = 2.407, 29.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=8 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D) )
%   | then return 0.11259975315010165;  // std dev = 8.286, 311.000 (wgt'ed) examples reached here.  /* #neg=209 #pos=102 */
%   | else if ( follows(C, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.41398163293272183;  // std dev = 1.366, 8.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   else if ( follows(E, A) )
%   | then if ( follows(F, E) )
%   | | then return 0.009370045781116885;  // std dev = 2.641, 40.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=9 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, A), tweets(A, G) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.03216566015618215;  // std dev = 2.462, 33.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=8 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(A, C), follows(A, D) )
%   then if ( follows(D, E), follows(E, F) )
%   | then return 0.11862985701916302;  // std dev = 8.044, 283.000 (wgt'ed) examples reached here.  /* #neg=183 #pos=100 */
%   | else if ( follows(D, G) )
%   | | then return 0.4338062397138436;  // std dev = 0.819, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.06785345225388724;  // std dev = 1.793, 14.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=5 */
%   else if ( follows(H, A) )
%   | then return 0.019669503440688442;  // std dev = 2.621, 38.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=9 */
%   | else if ( follows(I, A), follows(J, I) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, K) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.03429165546179004;  // std dev = 2.450, 32.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=8 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( recursion_accounttype(C, D) )
%   | then return 0.11872999490881464;  // std dev = 8.164, 282.000 (wgt'ed) examples reached here.  /* #neg=175 #pos=107 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(E, A) )
%   | then if ( follows(F, E), follows(F, A) )
%   | | then return 0.014869238090349882;  // std dev = 2.473, 34.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=8 */
%   | | else if ( recursion_accounttype(A, G), tweets(E, H) )
%   | | | then return -0.07783658362036619;  // std dev = 0.925, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, I) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( recursion_accounttype(A, J), tweets(A, K) )
%   | | | then return 0.15395745271060063;  // std dev = 1.369, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.05600656261798341;  // std dev = 1.900, 18.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=5 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D) )
%   | then if ( follows(A, D) )
%   | | then if ( follows(D, C) )
%   | | | then return 0.11020725741818786;  // std dev = 6.298, 167.000 (wgt'ed) examples reached here.  /* #neg=102 #pos=65 */
%   | | | else return -0.002282994212658286;  // std dev = 3.167, 50.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=14 */
%   | | else return 0.11081062318207341;  // std dev = 3.740, 58.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=23 */
%   | else return 0.004785496908727404;  // std dev = 1.824, 15.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=5 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.0584250137560791;  // std dev = 2.879, 58.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=10 */
%   | | | else return 0.10923930704726674;  // std dev = 2.151, 21.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=7 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D) )
%   | then return 0.055534821987572126;  // std dev = 8.110, 286.000 (wgt'ed) examples reached here.  /* #neg=184 #pos=102 */
%   | else if ( follows(C, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.2951370712684035;  // std dev = 1.369, 8.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   else if ( follows(E, A) )
%   | then return -0.0090962923331989;  // std dev = 2.671, 43.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=9 */
%   | else if ( follows(F, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G) )
%   | | | then return 0.19064267617559014;  // std dev = 1.309, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | | else return 0.04252354476997689;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=5 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), follows(D, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.02204324404015793;  // std dev = 8.416, 317.000 (wgt'ed) examples reached here.  /* #neg=210 #pos=107 */
%   else if ( follows(A, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F), tweets(A, G) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.05111912811805003;  // std dev = 0.452, 59.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=17 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then return 0.01719931394088969;  // std dev = 8.425, 316.000 (wgt'ed) examples reached here.  /* #neg=209 #pos=107 */
%   else if ( follows(D, A), follows(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A) )
%   | | then if ( recursion_accounttype(E, F), tweets(E, G) )
%   | | | then return 0.04063290385230348;  // std dev = 2.569, 34.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=9 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.04620763088315055;  // std dev = 2.328, 25.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=8 */


Results
   AUC ROC   = 0.5
   AUC PR    = 0.007752
   CLL	      = -0.396721
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.643 seconds
Total inference time: 2.658 seconds
AUC ROC: 0.5


Results scoring model
   AUC ROC   = 0.521364
   AUC PR    = 0.006633
   CLL	      = -0.379292
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total scoring time: 3.228 seconds
Parameter learned model CLL: -0.379292


Structure after Parameter Learning
[['accounttype(A, B)', {'': 'follows(A, C), follows(C, C)', 'false': 'tweets(A, D), recursion_accounttype(A, E)', 'false,true': 'tweets(F, D)', 'false,true,true': 'recursion_accounttype(F, E)'}, {'true': [0.0, 0, 0], 'false,true,true,true': [7.651, 171, 89], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 0, 0], 'false,false': [4.782, 66, 35]}], ['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C)', 'false': 'follows(E, A), recursion_accounttype(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, H)', 'false,false,false': 'follows(A, I), recursion_accounttype(I, J)'}, {'true,true': [7.273, 149, 82], 'true,false': [0.816, 1, 2], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [4.736, 75, 32], 'false,false,false,false': [2.256, 14, 8]}], ['accounttype(A, B)', {'': 'follows(C, A)', 'false': 'follows(A, D), follows(D, A)', 'false,false': 'follows(E, A)', 'false,false,false': 'follows(A, F)'}, {'true': [0.465, 181, 84], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [4.643, 66, 32], 'false,false,false,false': [2.407, 21, 8]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D)', 'true,false': 'follows(C, A)', 'false': 'follows(E, A)', 'false,true': 'follows(F, E)', 'false,false': 'follows(A, A), tweets(A, G)', 'false,false,false': 'follows(A, H)'}, {'true,true': [8.286, 209, 102], 'true,false,true': [0.0, 0, 0], 'true,false,false': [1.366, 3, 5], 'false,true,true': [2.641, 31, 9], 'false,true,false': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.462, 25, 8]}], ['accounttype(A, B)', {'': 'recursion_accounttype(A, C), follows(A, D)', 'true': 'follows(D, E), follows(E, F)', 'true,false': 'follows(D, G)', 'false': 'follows(H, A)', 'false,false': 'follows(I, A), follows(J, I)', 'false,false,false': 'follows(A, K)'}, {'true,true': [8.044, 183, 100], 'true,false,true': [0.819, 1, 2], 'true,false,false': [1.793, 9, 5], 'false,true': [2.621, 29, 9], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.45, 24, 8]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'recursion_accounttype(C, D)', 'false': 'follows(E, A)', 'false,true': 'follows(F, E), follows(F, A)', 'false,true,false': 'recursion_accounttype(A, G), tweets(E, H)', 'false,false': 'follows(A, I)', 'false,false,false': 'recursion_accounttype(A, J), tweets(A, K)'}, {'true,true': [8.164, 175, 107], 'true,false': [0.0, 0, 0], 'false,true,true': [2.473, 26, 8], 'false,true,false,true': [0.925, 6, 1], 'false,true,false,false': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [1.369, 5, 3], 'false,false,false,false': [1.9, 13, 5]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D)', 'true,true': 'follows(A, D)', 'true,true,true': 'follows(D, C)', 'false': 'follows(A, A)', 'false,false': 'follows(A, E)', 'false,false,false': 'tweets(A, F)'}, {'true,true,true,true': [6.298, 102, 65], 'true,true,true,false': [3.167, 36, 14], 'true,true,false': [3.74, 35, 23], 'true,false': [1.824, 10, 5], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [2.879, 48, 10], 'false,false,false,false': [2.151, 14, 7]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D)', 'true,false': 'follows(C, A)', 'false': 'follows(E, A)', 'false,false': 'follows(F, A)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [8.11, 184, 102], 'true,false,true': [0.0, 0, 0], 'true,false,false': [1.369, 3, 5], 'false,true': [2.671, 34, 9], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [1.309, 4, 3], 'false,false,false,false': [1.879, 12, 5]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), follows(D, D)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F), tweets(A, G)'}, {'true,true': [0.0, 0, 0], 'true,false': [8.416, 210, 107], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.452, 42, 17]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'false': 'follows(D, A), follows(A, D)', 'false,false': 'follows(E, A)', 'false,false,true': 'recursion_accounttype(E, F), tweets(E, G)', 'false,false,false': 'follows(H, A)'}, {'true': [8.425, 209, 107], 'false,true': [0.0, 0, 0], 'false,false,true,true': [2.569, 25, 9], 'false,false,true,false': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.328, 17, 8]}]]
[{'': [nan, 0.22550471527996443], 'false': [0.2251331360946756, 0.22644838741300016], 'false,true': [0.2251331360946756, nan], 'false,true,true': [0.2251331360946756, nan]}, {'': [0.23010351791466008, 0.21395151570468748], 'true': [0.2289595455611027, 0.22222222222222224], 'false': [nan, 0.21395151570468748], 'false,false': [nan, 0.21395151570468748], 'false,false,false': [0.20964915916532625, 0.23142948856812007]}, {'': [0.21625231576566484, 0.21600114739452797], 'false': [nan, 0.2160011473945278], 'false,false': [nan, 0.21600114739452797], 'false,false,false': [0.2199604925363213, 0.19977344006547418]}, {'': [0.2233026192686043, 0.17870982529853346], 'true': [0.2207703780882221, 0.23319035205104996], 'true,false': [nan, 0.23319035205104996], 'false': [0.17439209057269972, 0.18365870888241934], 'false,false': [nan, 0.18365870888241934], 'false,false,false': [nan, 0.18365870888241934], 'false,true': [0.17439209057269972, nan]}, {'': [0.22976821165387534, 0.1839008924172958], 'true': [0.22865851586920433, 0.24806164314847604], 'true,false': [0.22370748501418583, 0.2296471955583958], 'false': [0.180744024359271, 0.18753360640006225], 'false,false': [nan, 0.18753360640006225], 'false,false,false': [nan, 0.18753360640006225]}, {'': [0.23635582533447522, 0.18929915468059916], 'true': [0.23635582533447522, nan], 'false': [0.17129463957083368, 0.213048046091952], 'false,false': [nan, 0.213048046091952], 'false,false,false': [0.23437499999999997, 0.2006172839506174], 'false,true': [0.1799081815935458, 0.12233039743885918], 'false,true,false': [0.12233039743885918, nan]}, {'': [0.23321092792587078, 0.16897701851825253], 'true': [0.23345277559584593, 0.22191023708450894], 'true,true': [0.23125168818933786, 0.24113278633675883], 'true,true,true': [0.23752591084270822, 0.2005574090851509], 'false': [nan, 0.16897701851825253], 'false,false': [nan, 0.16897701851825253], 'false,false,false': [0.1429091883388939, 0.22033518890813536]}, {'': [0.23162696621709095, 0.18839976959060145], 'true': [0.22999557677226803, 0.23410205714134885], 'true,false': [nan, 0.23410205714134885], 'false': [0.16585617499673097, 0.2230199886620007], 'false,false': [nan, 0.2230199886620007], 'false,false,false': [0.24489795918367344, 0.2076124567474049]}, {'': [0.223428919072037, 0.20444932638043017], 'true': [nan, 0.22342891907203735], 'false': [nan, 0.20444932638043017], 'false,false': [nan, 0.20444932638043017]}, {'': [0.22459783146352483, 0.20374729014268908], 'false': [nan, 0.20374729014268952], 'false,false': [0.19417970560768696, 0.21674129599554848], 'false,false,false': [nan, 0.21674129599554848], 'false,false,true': [0.19417970560768696, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;accounttype(A, B) :- follows(A, C), follows(C, C).;true;true
0;false;tweets(A, D), recursion_accounttype(A, E).;true;true
0;false,true;tweets(F, D).;true;true
0;false,true,true;recursion_accounttype(F, E).;true;true
1;;accounttype(A, B) :- follows(C, A).;true;true
1;true;follows(D, C).;true;true
1;false;follows(E, A), recursion_accounttype(A, F).;true;true
1;false,false;follows(G, A), recursion_accounttype(G, H).;true;true
1;false,false,false;follows(A, I), recursion_accounttype(I, J).;true;true
2;;accounttype(A, B) :- follows(C, A).;true;true
2;false;follows(A, D), follows(D, A).;true;true
2;false,false;follows(E, A).;true;true
2;false,false,false;follows(A, F).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(C, D).;true;true
3;true,false;follows(C, A).;true;true
3;false;follows(E, A).;true;true
3;false,true;follows(F, E).;true;true
3;false,false;follows(A, A), tweets(A, G).;true;true
3;false,false,false;follows(A, H).;true;true
4;;accounttype(A, B) :- recursion_accounttype(A, C), follows(A, D).;true;true
4;true;follows(D, E), follows(E, F).;true;true
4;true,false;follows(D, G).;true;true
4;false;follows(H, A).;true;true
4;false,false;follows(I, A), follows(J, I).;true;true
4;false,false,false;follows(A, K).;true;true
5;;accounttype(A, B) :- follows(A, C).;true;true
5;true;recursion_accounttype(C, D).;true;true
5;false;follows(E, A).;true;true
5;false,true;follows(F, E), follows(F, A).;true;true
5;false,true,false;recursion_accounttype(A, G), tweets(E, H).;true;true
5;false,false;follows(A, I).;true;true
5;false,false,false;recursion_accounttype(A, J), tweets(A, K).;true;true
6;;accounttype(A, B) :- follows(A, C).;true;true
6;true;follows(C, D).;true;true
6;true,true;follows(A, D).;true;true
6;true,true,true;follows(D, C).;true;true
6;false;follows(A, A).;true;true
6;false,false;follows(A, E).;true;true
6;false,false,false;tweets(A, F).;true;true
7;;accounttype(A, B) :- follows(A, C).;true;true
7;true;follows(C, D).;true;true
7;true,false;follows(C, A).;true;true
7;false;follows(E, A).;true;true
7;false,false;follows(F, A).;true;true
7;false,false,false;tweets(A, G).;true;true
8;;accounttype(A, B) :- follows(A, C).;true;true
8;true;follows(C, D), follows(D, D).;true;true
8;false;follows(A, E).;true;true
8;false,false;follows(A, F), tweets(A, G).;true;true
9;;accounttype(A, B) :- follows(A, C).;true;true
9;false;follows(D, A), follows(A, D).;true;true
9;false,false;follows(E, A).;true;true
9;false,false,true;recursion_accounttype(E, F), tweets(E, G).;true;true
9;false,false,false;follows(H, A).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(C, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), recursion_accounttype(A, E) )
%   | then if ( tweets(F, D) )
%   | | then if ( recursion_accounttype(F, E) )
%   | | | then return 0.21557865397501288;  // std dev = 7.562, 249.000 (wgt'ed) examples reached here.  /* #neg=160 #pos=89 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else if ( follows(H, A) )
%   | | | then return -0.07288554765910848;  // std dev = 1.365, 29.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=2 */
%   | | | else return 0.17481560176617897;  // std dev = 3.603, 60.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=19 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.8049105980788935;  // std dev = 0.363, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   | | else if ( follows(A, F), tweets(A, G) )
%   | | | then return -0.030635338988695186;  // std dev = 3.936, 129.000 (wgt'ed) examples reached here.  /* #neg=111 #pos=18 */
%   | | | else return -0.11038443665359361;  // std dev = 1.415, 52.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=2 */
%   | else return 0.3298297772903747;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else if ( follows(H, A), recursion_accounttype(A, I) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(J, A), recursion_accounttype(J, K) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, L), recursion_accounttype(L, M) )
%   | | | then return 0.1841616615646204;  // std dev = 4.554, 91.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=32 */
%   | | | else return 0.14189062646669723;  // std dev = 2.351, 26.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=8 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then return 0.6506715444279222;  // std dev = 0.194, 52.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=50 */
%   | | else return 0.5341817167939994;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0.834112257498659;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, G) )
%   | | | then return -0.08071185651391868;  // std dev = 3.457, 167.000 (wgt'ed) examples reached here.  /* #neg=154 #pos=13 */
%   | | | else return -0.10616820383787179;  // std dev = 1.008, 26.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=1 */
%   else if ( follows(A, H), follows(H, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(I, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, J) )
%   | | | then return 0.17684355940362262;  // std dev = 4.485, 86.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=32 */
%   | | | else return 0.0719295710875265;  // std dev = 2.433, 31.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=8 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.5174250172301533;  // std dev = 0.216, 65.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=63 */
%   | | else return -0.00510688918564138;  // std dev = 0.358, 224.000 (wgt'ed) examples reached here.  /* #neg=185 #pos=39 */
%   | else if ( follows(C, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, A) )
%   | | | then return 0.126178614612515;  // std dev = 0.999, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return -0.009509857678327247;  // std dev = 1.538, 14.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=3 */
%   else if ( follows(G, A) )
%   | then return 0.08179253883694501;  // std dev = 0.327, 29.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=9 */
%   | else if ( follows(A, A), tweets(A, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.20137951915289806;  // std dev = 2.192, 20.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=8 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(A, C), follows(A, D) )
%   then if ( follows(D, E), follows(E, F) )
%   | then if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.3691127428215198;  // std dev = 0.253, 66.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=62 */
%   | | else return -0.02417589397439673;  // std dev = 0.345, 243.000 (wgt'ed) examples reached here.  /* #neg=205 #pos=38 */
%   | else if ( follows(D, H) )
%   | | then return 0.14636603355876213;  // std dev = 0.968, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.023772710761813993;  // std dev = 1.379, 12.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=3 */
%   | | | else return 0.18137359579493667;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   else if ( follows(J, A) )
%   | then return 0.05852024761678861;  // std dev = 0.322, 30.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=9 */
%   | else if ( follows(K, A), follows(L, K) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, M) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.07546441119590395;  // std dev = 2.353, 26.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=8 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( recursion_accounttype(C, D) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.30414941894758;  // std dev = 0.224, 66.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=63 */
%   | | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.5292194891209689;  // std dev = 0.177, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.00516572861882618;  // std dev = 5.492, 223.000 (wgt'ed) examples reached here.  /* #neg=185 #pos=38 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(G, A) )
%   | then if ( follows(H, G), follows(H, A) )
%   | | then return 0.0340725853236222;  // std dev = 0.291, 27.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=8 */
%   | | else return 0.10783899289187232;  // std dev = 0.443, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( follows(A, I) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( recursion_accounttype(A, J), tweets(A, K) )
%   | | | then return 0.049088569798445655;  // std dev = 1.449, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | | | else return 0.05078978100867967;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=5 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D) )
%   | then if ( follows(A, D) )
%   | | then return 0.04020764060101595;  // std dev = 0.307, 209.000 (wgt'ed) examples reached here.  /* #neg=130 #pos=79 */
%   | | else return 0.17889746906057186;  // std dev = 0.488, 56.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=23 */
%   | else if ( follows(E, A) )
%   | | then return 0.21023860972808162;  // std dev = 0.836, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( tweets(A, F) )
%   | | | then return -0.028937745846729;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.1497878548633603;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, H) )
%   | | | then return -0.024017349702887363;  // std dev = 2.155, 45.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=10 */
%   | | | else return 0.022512539908696796;  // std dev = 2.158, 27.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=7 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D) )
%   | then if ( follows(A, E), follows(E, A) )
%   | | then return 0.019080516611329555;  // std dev = 0.273, 201.000 (wgt'ed) examples reached here.  /* #neg=134 #pos=67 */
%   | | else return 0.1145574860164762;  // std dev = 0.439, 88.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=35 */
%   | else if ( follows(C, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, A) )
%   | | | then return 0.2134176937894703;  // std dev = 0.903, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.07864186642345176;  // std dev = 1.404, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   else if ( follows(G, A) )
%   | then return 0.024959098968560127;  // std dev = 0.304, 34.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=9 */
%   | else if ( follows(H, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, I) )
%   | | | then return 0.0776802820155232;  // std dev = 1.414, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | | | else return 0.10006608535453596;  // std dev = 1.793, 14.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=5 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), follows(D, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.22674414470820672;  // std dev = 0.276, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | | | else return 0.43180026433511504;  // std dev = 0.159, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( follows(G, A), tweets(G, H) )
%   | | | then return -0.07750691259675976;  // std dev = 3.619, 189.000 (wgt'ed) examples reached here.  /* #neg=171 #pos=18 */
%   | | | else return 0.020845470105178714;  // std dev = 4.213, 91.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=26 */
%   else if ( follows(A, I) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, J), tweets(A, K) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(L, A), recursion_accounttype(L, B) )
%   | | | then return 0.471080919779447;  // std dev = 0.129, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.060619533083304734;  // std dev = 2.622, 64.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=9 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.20309437628959967;  // std dev = 0.142, 64.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=63 */
%   | else if ( follows(E, A), follows(A, E) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return -0.1189748271402505;  // std dev = 1.130, 77.000 (wgt'ed) examples reached here.  /* #neg=75 #pos=2 */
%   | | | else return 0.009609738187606734;  // std dev = 3.032, 71.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=11 */
%   | | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return 0.35923778278541685;  // std dev = 0.174, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.003059928109977257;  // std dev = 4.346, 101.000 (wgt'ed) examples reached here.  /* #neg=75 #pos=26 */
%   else if ( follows(H, A), follows(A, H) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(I, A) )
%   | | then return -0.027080893524265508;  // std dev = 0.247, 41.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=9 */
%   | | else if ( follows(J, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.023504374062249794;  // std dev = 2.389, 28.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=8 */


Results
   AUC ROC   = 0.925479
   AUC PR    = 0.285861
   CLL	      = -0.195238
   Precision = 0.319728 at threshold = 0.5
   Recall    = 0.746032
   F1        = 0.447619


Total learning time: 13.07 seconds
Total inference time: 79.818 seconds
AUC ROC: 0.925479


Results scoring model
   AUC ROC   = 0.900952
   AUC PR    = 0.300983
   CLL	      = -0.214737
   Precision = 0.313008 at threshold = 0.5
   Recall    = 0.620968
   F1        = 0.416216


Total scoring time: 58.769 seconds
Refined model CLL: -0.214737


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.925479
   AUC PR    = 0.285861
   CLL	      = -0.195238
   Precision = 0.319728 at threshold = 0.5
   Recall    = 0.746032
   F1        = 0.447619


Total learning time: 76.71000000000001 seconds
Total inference time: 79.818 seconds
AUC ROC: 0.925479
Total revision time: 76.71000000000001
Best scored revision CLL: -0.214737


Dataset: 7_yeast_twitter, Fold: 1, Type: Transfer (trRDN-B), Time: 00:42:44
{'AUC ROC': 0.925479, 'AUC PR': 0.285861, 'CLL': -0.195238, 'Precision': [0.319728, 0.5], 'Recall': 0.746032, 'F1': 0.447619, 'Learning time': 76.71000000000001, 'Inference time': 79.818, 'parameter_0.8': {'AUC ROC': 0.5, 'AUC PR': 0.007752, 'CLL': -0.396721, 'Precision': [nan, 0.5], 'Recall': 0.0, 'F1': nan, 'Learning time': 1.643, 'Inference time': 2.658}}


Amount of data: 1.0
******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(A, C), interaction(C, C).;true;true
0;true;interaction(C, A), phenotype(C, D).;false;true
0;true,false;interaction(E, A), enzyme(A, F).;true;true
0;true,false,true;complex(A, G), complex(C, H).;false;false
0;true,false,false;recursion_proteinclass(C, B).;false;false
0;false;location(A, I), phenotype(A, J).;true;false
0;false,true;location(K, I), recursion_proteinclass(K, B).;true;false
0;false,true,true;phenotype(K, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), complex(A, D).;true;true
1;true;interaction(E, C), recursion_proteinclass(E, B).;false;false
1;false;interaction(F, A), phenotype(A, G).;true;true
1;false,true;recursion_proteinclass(F, B).;false;true
1;false,true,false;interaction(H, F), recursion_proteinclass(H, B).;false;false
1;false,false;interaction(I, A), phenotype(I, J).;true;true
1;false,false,true;interaction(A, K), recursion_proteinclass(K, B).;false;false
1;false,false,false;interaction(A, L), phenotype(L, M).;false;false
2;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
2;true;complex(C, D).;false;false
2;false;interaction(A, E), interaction(E, A).;true;true
2;false,true;interaction(A, A).;false;true
2;false,true,false;enzyme(E, F), enzyme(A, F).;false;false
2;false,false;interaction(G, A), enzyme(G, H).;true;true
2;false,false,true;complex(G, I), complex(A, I).;false;false
2;false,false,false;interaction(A, J), recursion_proteinclass(J, B).;false;false
3;;proteinclass(A, B) :- complex(A, C), interaction(A, D).;true;true
3;true;interaction(D, E), recursion_proteinclass(E, B).;false;true
3;true,false;interaction(D, A).;false;false
3;false;interaction(F, A), enzyme(F, G).;true;true
3;false,true;interaction(H, F), recursion_proteinclass(H, B).;false;true
3;false,true,false;interaction(A, F).;false;false
3;false,false;interaction(A, A), location(A, I).;false;true
3;false,false,false;interaction(A, J), enzyme(J, K).;false;false
4;;proteinclass(A, B) :- phenotype(A, C), interaction(A, D).;true;true
4;true;interaction(D, E), interaction(E, F).;false;true
4;true,false;recursion_proteinclass(D, B).;false;true
4;true,false,false;enzyme(A, G), interaction(D, H).;false;false
4;false;interaction(I, A), recursion_proteinclass(I, B).;false;true
4;false,false;interaction(J, A), interaction(K, J).;true;true
4;false,false,true;recursion_proteinclass(K, B), location(J, L).;false;false
4;false,false,false;interaction(A, M), recursion_proteinclass(M, B).;false;false
5;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
5;true;enzyme(A, D), phenotype(C, E).;false;false
5;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
5;false,true;interaction(G, F), interaction(G, A).;false;true
5;false,true,false;phenotype(A, H), location(F, I).;false;false
5;false,false;interaction(A, J), complex(J, K).;true;true
5;false,false,true;interaction(J, L), recursion_proteinclass(L, B).;false;false
5;false,false,false;phenotype(A, M), location(A, N).;false;false
6;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
6;true;interaction(C, D), complex(D, E).;true;false
6;true,true;interaction(A, D).;true;false
6;true,true,true;interaction(D, C).;false;false
6;false;interaction(A, A).;false;true
6;false,false;interaction(A, F), enzyme(F, G).;true;true
6;false,false,true;phenotype(F, H), complex(F, I).;false;false
6;false,false,false;location(A, J).;false;false
7;;proteinclass(A, B) :- interaction(A, C), complex(C, D).;true;true
7;true;recursion_proteinclass(C, B).;false;true
7;true,false;interaction(C, E), recursion_proteinclass(E, B).;false;true
7;true,false,false;interaction(C, A).;false;false
7;false;interaction(F, A), recursion_proteinclass(F, B).;false;true
7;false,false;interaction(G, A), enzyme(G, H).;true;true
7;false,false,true;interaction(A, I), interaction(G, I).;false;false
7;false,false,false;location(A, J), enzyme(A, K).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;interaction(C, D), interaction(D, D).;false;false
8;false;interaction(A, E), enzyme(A, F).;true;true
8;false,true;interaction(E, G), recursion_proteinclass(G, B).;false;true
8;false,true,false;interaction(E, A).;false;false
8;false,false;interaction(A, H), location(A, I).;true;true
8;false,false,true;interaction(H, J), recursion_proteinclass(J, B).;false;false
8;false,false,false;enzyme(A, K).;false;false
9;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;false;true
9;false;interaction(D, A), interaction(A, D).;true;true
9;false,true;phenotype(A, E), phenotype(D, E).;true;true
9;false,true,true;complex(D, F).;false;false
9;false,true,false;interaction(D, D).;false;false
9;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
9;false,false,true;phenotype(G, H), location(G, I).;false;false
9;false,false,false;complex(A, J), interaction(K, A).;false;false


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(C, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), recursion_accounttype(A, E) )
%   | then if ( tweets(F, D) )
%   | | then if ( recursion_accounttype(F, E) )
%   | | | then return 0.2034942804448537;  // std dev = 8.677, 333.000 (wgt'ed) examples reached here.  /* #neg=218 #pos=115 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.19421450887000344;  // std dev = 5.217, 122.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=41 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C) )
%   | then return 0.17476444628866314;  // std dev = 8.345, 309.000 (wgt'ed) examples reached here.  /* #neg=203 #pos=106 */
%   | else return 0.11724373020866831;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   else if ( follows(E, A), recursion_accounttype(A, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, I), recursion_accounttype(I, J) )
%   | | | then return 0.17466203305104186;  // std dev = 4.932, 108.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=37 */
%   | | | else return 0.11447795060903672;  // std dev = 2.810, 39.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=11 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then return 0.12462980570196608;  // std dev = 0.466, 339.000 (wgt'ed) examples reached here.  /* #neg=231 #pos=108 */
%   else if ( follows(A, D), follows(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, F) )
%   | | | then return 0.16548365250293898;  // std dev = 4.869, 103.000 (wgt'ed) examples reached here.  /* #neg=66 #pos=37 */
%   | | | else return 0.13935228259064075;  // std dev = 2.728, 34.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=11 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D) )
%   | then return 0.12162073871532714;  // std dev = 8.992, 361.000 (wgt'ed) examples reached here.  /* #neg=239 #pos=122 */
%   | else if ( follows(C, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.24310149860946126;  // std dev = 1.796, 13.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
%   else if ( follows(E, A) )
%   | then if ( follows(F, E) )
%   | | then return 0.19048182893183968;  // std dev = 3.181, 42.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=17 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, A), tweets(A, G) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.09954036129221432;  // std dev = 2.764, 36.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=11 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(A, C), follows(A, D) )
%   then if ( follows(D, E), follows(E, F) )
%   | then return 0.1087518868990704;  // std dev = 8.858, 347.000 (wgt'ed) examples reached here.  /* #neg=227 #pos=120 */
%   | else if ( follows(D, G) )
%   | | then return 0.09252032441093583;  // std dev = 1.157, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | else return 0.16525761395295624;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   else if ( follows(H, A) )
%   | then return 0.05014016901428935;  // std dev = 3.454, 57.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=17 */
%   | else if ( follows(I, A), follows(J, I) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, K) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.18458890055875196;  // std dev = 2.553, 27.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=11 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( recursion_accounttype(C, D) )
%   | then return 0.08098837817466108;  // std dev = 9.185, 377.000 (wgt'ed) examples reached here.  /* #neg=249 #pos=128 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(E, A) )
%   | then if ( follows(F, E), follows(F, A) )
%   | | then return 0.04640546361976024;  // std dev = 3.121, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else if ( recursion_accounttype(A, G), tweets(E, H) )
%   | | | then return 0.17160333742997227;  // std dev = 1.310, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, I) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( recursion_accounttype(A, J), tweets(A, K) )
%   | | | then return 0.10604899254824679;  // std dev = 1.595, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | | | else return 0.04853108668243932;  // std dev = 2.207, 23.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=7 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D) )
%   | then if ( follows(A, D) )
%   | | then if ( follows(D, C) )
%   | | | then return 0.04864170704906598;  // std dev = 7.322, 246.000 (wgt'ed) examples reached here.  /* #neg=167 #pos=79 */
%   | | | else return 0.10505260096774287;  // std dev = 3.255, 45.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=17 */
%   | | else return 0.030384253210524098;  // std dev = 4.246, 85.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=26 */
%   | else return -0.02869227474632025;  // std dev = 2.073, 21.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=6 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return 0.056235465931543806;  // std dev = 3.481, 55.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=18 */
%   | | | else return 0.08570847937677566;  // std dev = 2.541, 28.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=10 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D) )
%   | then return 0.018191613601002656;  // std dev = 9.228, 404.000 (wgt'ed) examples reached here.  /* #neg=282 #pos=122 */
%   | else if ( follows(C, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.19188238800732602;  // std dev = 1.735, 12.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=6 */
%   else if ( follows(E, A) )
%   | then return 0.0636712312488219;  // std dev = 3.332, 49.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=17 */
%   | else if ( follows(F, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G) )
%   | | | then return 0.04351402235285173;  // std dev = 1.633, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | | | else return -0.00219767240818872;  // std dev = 2.245, 25.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=7 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), follows(D, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.03443017242813773;  // std dev = 9.299, 394.000 (wgt'ed) examples reached here.  /* #neg=266 #pos=128 */
%   else if ( follows(A, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F), tweets(A, G) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.002717499316899837;  // std dev = 0.455, 95.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=28 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then return 0.036230051613471974;  // std dev = 9.241, 383.000 (wgt'ed) examples reached here.  /* #neg=255 #pos=128 */
%   else if ( follows(D, A), follows(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A) )
%   | | then if ( recursion_accounttype(E, F), tweets(E, G) )
%   | | | then return 0.01730370717674809;  // std dev = 3.416, 54.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=17 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.05663102517191194;  // std dev = 2.681, 32.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=11 */


Results
   AUC ROC   = 0.5
   AUC PR    = 0.007752
   CLL	      = -0.372347
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.848 seconds
Total inference time: 2.903 seconds
AUC ROC: 0.5


Results scoring model
   AUC ROC   = 0.5
   AUC PR    = 0.006289
   CLL	      = -0.368397
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total scoring time: 3.774 seconds
Parameter learned model CLL: -0.368397


Structure after Parameter Learning
[['accounttype(A, B)', {'': 'follows(A, C), follows(C, C)', 'false': 'tweets(A, D), recursion_accounttype(A, E)', 'false,true': 'tweets(F, D)', 'false,true,true': 'recursion_accounttype(F, E)'}, {'true': [0.0, 0, 0], 'false,true,true,true': [8.677, 218, 115], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 0, 0], 'false,false': [5.217, 81, 41]}], ['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C)', 'false': 'follows(E, A), recursion_accounttype(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, H)', 'false,false,false': 'follows(A, I), recursion_accounttype(I, J)'}, {'true,true': [8.345, 203, 106], 'true,false': [1.195, 5, 2], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [4.932, 71, 37], 'false,false,false,false': [2.81, 28, 11]}], ['accounttype(A, B)', {'': 'follows(C, A)', 'false': 'follows(A, D), follows(D, A)', 'false,false': 'follows(E, A)', 'false,false,false': 'follows(A, F)'}, {'true': [0.466, 231, 108], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [4.869, 66, 37], 'false,false,false,false': [2.728, 23, 11]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D)', 'true,false': 'follows(C, A)', 'false': 'follows(E, A)', 'false,true': 'follows(F, E)', 'false,false': 'follows(A, A), tweets(A, G)', 'false,false,false': 'follows(A, H)'}, {'true,true': [8.992, 239, 122], 'true,false,true': [0.0, 0, 0], 'true,false,false': [1.796, 7, 6], 'false,true,true': [3.181, 25, 17], 'false,true,false': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.764, 25, 11]}], ['accounttype(A, B)', {'': 'recursion_accounttype(A, C), follows(A, D)', 'true': 'follows(D, E), follows(E, F)', 'true,false': 'follows(D, G)', 'false': 'follows(H, A)', 'false,false': 'follows(I, A), follows(J, I)', 'false,false,false': 'follows(A, K)'}, {'true,true': [8.858, 227, 120], 'true,false,true': [1.157, 4, 2], 'true,false,false': [1.852, 8, 6], 'false,true': [3.454, 40, 17], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.553, 16, 11]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'recursion_accounttype(C, D)', 'false': 'follows(E, A)', 'false,true': 'follows(F, E), follows(F, A)', 'false,true,false': 'recursion_accounttype(A, G), tweets(E, H)', 'false,false': 'follows(A, I)', 'false,false,false': 'recursion_accounttype(A, J), tweets(A, K)'}, {'true,true': [9.185, 249, 128], 'true,false': [0.0, 0, 0], 'false,true,true': [3.121, 32, 14], 'false,true,false,true': [1.31, 4, 3], 'false,true,false,false': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [1.595, 7, 4], 'false,false,false,false': [2.207, 16, 7]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D)', 'true,true': 'follows(A, D)', 'true,true,true': 'follows(D, C)', 'false': 'follows(A, A)', 'false,false': 'follows(A, E)', 'false,false,false': 'tweets(A, F)'}, {'true,true,true,true': [7.322, 167, 79], 'true,true,true,false': [3.255, 28, 17], 'true,true,false': [4.246, 59, 26], 'true,false': [2.073, 15, 6], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [3.481, 37, 18], 'false,false,false,false': [2.541, 18, 10]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D)', 'true,false': 'follows(C, A)', 'false': 'follows(E, A)', 'false,false': 'follows(F, A)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [9.228, 282, 122], 'true,false,true': [0.0, 0, 0], 'true,false,false': [1.735, 6, 6], 'false,true': [3.332, 32, 17], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [1.633, 8, 4], 'false,false,false,false': [2.245, 18, 7]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), follows(D, D)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F), tweets(A, G)'}, {'true,true': [0.0, 0, 0], 'true,false': [9.299, 266, 128], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.455, 67, 28]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'false': 'follows(D, A), follows(A, D)', 'false,false': 'follows(E, A)', 'false,false,true': 'recursion_accounttype(E, F), tweets(E, G)', 'false,false,false': 'follows(H, A)'}, {'true': [9.241, 255, 128], 'false,true': [0.0, 0, 0], 'false,false,true,true': [3.416, 37, 17], 'false,false,true,false': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.681, 21, 11]}]]
[{'': [nan, 0.22530612244898207], 'false': [0.2260819377936521, 0.22312550389680313], 'false,true': [0.2260819377936521, nan], 'false,true,true': [0.2260819377936521, nan]}, {'': [0.224982846164183, 0.21989979505038243], 'true': [0.22538304393964298, 0.20408163265306126], 'false': [nan, 0.21989979505038243], 'false,false': [nan, 0.21989979505038243], 'false,false,false': [0.22523731622254126, 0.2024578150245817]}, {'': [0.21707132992062422, 0.22748705951718087], 'false': [nan, 0.22748705951718176], 'false,false': [nan, 0.22748705951718087], 'false,false,false': [0.23017779371223523, 0.21882233524697703]}, {'': [0.22531272774236186, 0.22965486713726482], 'false': [0.24085231336345686, 0.2121379141999007], 'false,true': [0.24085231336345686, nan], 'true': [0.22397416865636807, 0.24823887271286796], 'true,false': [nan, 0.24823887271286796], 'false,false': [nan, 0.2121379141999007], 'false,false,false': [nan, 0.2121379141999007]}, {'': [0.2269015330585549, 0.22351749703469975], 'true': [0.2261048595302461, 0.23958636097385724], 'true,false': [0.22305931306191437, 0.2450821675205712], 'false': [0.20924247984966998, 0.2413874741801624], 'false,false': [nan, 0.2413874741801624], 'false,false,false': [nan, 0.2413874741801624]}, {'': [0.2237812746921856, 0.21830041410260695], 'true': [0.2237812746921856, nan], 'false': [0.21796478092315918, 0.21881286698879013], 'false,false': [nan, 0.21881286698879013], 'false,false,false': [0.23140495867768587, 0.21172022684310013], 'false,true': [0.21177390130839588, 0.2450434144850691], 'false,true,false': [0.2450434144850691, nan]}, {'': [0.21870432895104636, 0.22397281801033328], 'false': [nan, 0.22397281801033328], 'false,false': [nan, 0.22397281801033328], 'false,false,false': [0.22030320015577937, 0.2306053788463324], 'true': [0.21915458123695908, 0.20458758062679494], 'true,true': [0.2210364750123947, 0.21214846571382356], 'true,true,true': [0.21790923740720228, 0.23544194270990285]}, {'': [0.21277094399387664, 0.21954907205321267], 'false': [0.2265854060277436, 0.2087461901957959], 'true': [0.21077308278225237, 0.2507340311009335], 'true,false': [nan, 0.2507340311009335], 'false,false': [nan, 0.2087461901957959], 'false,false,false': [0.22222222222222207, 0.2016]}, {'': [0.2194894119558747, 0.20731654377956796], 'true': [nan, 0.21948941195587496], 'false': [nan, 0.20731654377956796], 'false,false': [nan, 0.20731654377956796]}, {'': [0.22297166403516538, 0.2196633662134552], 'false': [nan, 0.21966336621345534], 'false,false': [0.21611782456440162, 0.22467532299277518], 'false,false,false': [nan, 0.22467532299277518], 'false,false,true': [0.21611782456440162, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;accounttype(A, B) :- follows(A, C), follows(C, C).;true;true
0;false;tweets(A, D), recursion_accounttype(A, E).;true;true
0;false,true;tweets(F, D).;true;true
0;false,true,true;recursion_accounttype(F, E).;true;true
1;;accounttype(A, B) :- follows(C, A).;true;true
1;true;follows(D, C).;true;true
1;false;follows(E, A), recursion_accounttype(A, F).;true;true
1;false,false;follows(G, A), recursion_accounttype(G, H).;true;true
1;false,false,false;follows(A, I), recursion_accounttype(I, J).;true;true
2;;accounttype(A, B) :- follows(C, A).;true;true
2;false;follows(A, D), follows(D, A).;true;true
2;false,false;follows(E, A).;true;true
2;false,false,false;follows(A, F).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(C, D).;true;true
3;true,false;follows(C, A).;true;true
3;false;follows(E, A).;true;true
3;false,true;follows(F, E).;true;true
3;false,false;follows(A, A), tweets(A, G).;true;true
3;false,false,false;follows(A, H).;true;true
4;;accounttype(A, B) :- recursion_accounttype(A, C), follows(A, D).;true;true
4;true;follows(D, E), follows(E, F).;true;true
4;true,false;follows(D, G).;true;true
4;false;follows(H, A).;true;true
4;false,false;follows(I, A), follows(J, I).;true;true
4;false,false,false;follows(A, K).;true;true
5;;accounttype(A, B) :- follows(A, C).;true;true
5;true;recursion_accounttype(C, D).;true;true
5;false;follows(E, A).;true;true
5;false,true;follows(F, E), follows(F, A).;true;true
5;false,true,false;recursion_accounttype(A, G), tweets(E, H).;true;true
5;false,false;follows(A, I).;true;true
5;false,false,false;recursion_accounttype(A, J), tweets(A, K).;true;true
6;;accounttype(A, B) :- follows(A, C).;true;true
6;true;follows(C, D).;true;true
6;true,true;follows(A, D).;true;true
6;true,true,true;follows(D, C).;true;true
6;false;follows(A, A).;true;true
6;false,false;follows(A, E).;true;true
6;false,false,false;tweets(A, F).;true;true
7;;accounttype(A, B) :- follows(A, C).;true;true
7;true;follows(C, D).;true;true
7;true,false;follows(C, A).;true;true
7;false;follows(E, A).;true;true
7;false,false;follows(F, A).;true;true
7;false,false,false;tweets(A, G).;true;true
8;;accounttype(A, B) :- follows(A, C).;true;true
8;true;follows(C, D), follows(D, D).;true;true
8;false;follows(A, E).;true;true
8;false,false;follows(A, F), tweets(A, G).;true;true
9;;accounttype(A, B) :- follows(A, C).;true;true
9;false;follows(D, A), follows(A, D).;true;true
9;false,false;follows(E, A).;true;true
9;false,false,true;recursion_accounttype(E, F), tweets(E, G).;true;true
9;false,false,false;follows(H, A).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(C, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), recursion_accounttype(A, E) )
%   | then if ( tweets(F, D) )
%   | | then if ( recursion_accounttype(F, E) )
%   | | | then return 0.1706489350995084;  // std dev = 8.892, 368.000 (wgt'ed) examples reached here.  /* #neg=253 #pos=115 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else if ( follows(H, A) )
%   | | | then return -0.09307057709560969;  // std dev = 1.379, 41.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=2 */
%   | | | else return 0.19148226843284494;  // std dev = 3.916, 69.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=23 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.8136022042726573;  // std dev = 0.419, 83.000 (wgt'ed) examples reached here.  /* #pos=83 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.6979413671749601;  // std dev = 0.895, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return -0.08191550625619132;  // std dev = 3.960, 221.000 (wgt'ed) examples reached here.  /* #neg=204 #pos=17 */
%   | else return 0.23608072177992953;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   else if ( follows(G, A), recursion_accounttype(A, H) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(I, A), recursion_accounttype(I, J) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, K), recursion_accounttype(K, L) )
%   | | | then return 0.16523129467480535;  // std dev = 4.977, 112.000 (wgt'ed) examples reached here.  /* #neg=75 #pos=37 */
%   | | | else return 0.21360644074989998;  // std dev = 2.613, 29.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=11 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.6413011129858104;  // std dev = 0.171, 87.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=85 */
%   | else if ( tweets(A, E), follows(A, F) )
%   | | then if ( follows(G, A), follows(G, F) )
%   | | | then return -0.07023570383370782;  // std dev = 3.252, 145.000 (wgt'ed) examples reached here.  /* #neg=132 #pos=13 */
%   | | | else return 0.13866715883929656;  // std dev = 2.227, 24.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=7 */
%   | | else if ( tweets(A, H) )
%   | | | then return -0.10952124695780503;  // std dev = 0.978, 23.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=1 */
%   | | | else return -0.07791221192751044;  // std dev = 1.389, 43.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=2 */
%   else if ( follows(A, I), follows(I, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(J, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, K) )
%   | | | then return 0.13503973828924148;  // std dev = 5.001, 114.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=37 */
%   | | | else return 0.09991931122182303;  // std dev = 2.780, 37.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=11 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D) )
%   | then if ( tweets(A, E) )
%   | | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | | then return 0.6188954839674169;  // std dev = 2.145, 96.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=93 */
%   | | | else return -0.16134141553356487;  // std dev = 0.350, 167.000 (wgt'ed) examples reached here.  /* #neg=167 */
%   | | else return 0.060549825119802725;  // std dev = 0.365, 98.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=29 */
%   | else if ( follows(C, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G) )
%   | | | then return 0.14547705757969817;  // std dev = 1.504, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | | | else return 0.1872196172133763;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   else if ( follows(H, A) )
%   | then return 0.1118699219995921;  // std dev = 0.342, 48.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=17 */
%   | else if ( follows(A, A), tweets(A, I) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.030600504034866787;  // std dev = 0.430, 45.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=11 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(A, C), follows(A, D) )
%   then if ( follows(D, E), follows(E, F) )
%   | then if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.40166974603774797;  // std dev = 0.190, 80.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=77 */
%   | | else return -0.015429620038885894;  // std dev = 0.314, 272.000 (wgt'ed) examples reached here.  /* #neg=229 #pos=43 */
%   | else if ( follows(D, H) )
%   | | then return 0.2535766388491002;  // std dev = 0.760, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.1206020382586843;  // std dev = 1.501, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | | | else return 0.15417917979822424;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   else if ( follows(J, A) )
%   | then return 0.0883090418412347;  // std dev = 0.336, 49.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=17 */
%   | else if ( follows(K, A), follows(L, K) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, M) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.07861647591853115;  // std dev = 2.779, 37.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=11 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( recursion_accounttype(C, D) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.3445211923082944;  // std dev = 0.107, 78.000 (wgt'ed) examples reached here.  /* #pos=78 */
%   | | else return -0.01318223409084308;  // std dev = 0.313, 317.000 (wgt'ed) examples reached here.  /* #neg=267 #pos=50 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(F, A) )
%   | then if ( follows(G, F), follows(G, A) )
%   | | then return 0.04688118000351034;  // std dev = 0.303, 43.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=14 */
%   | | else if ( recursion_accounttype(A, H), tweets(F, I) )
%   | | | then return 0.2080610979709515;  // std dev = 1.154, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, J) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( recursion_accounttype(A, K), tweets(A, L) )
%   | | | then return 0.10303161588459575;  // std dev = 1.633, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | | | else return 0.13440562748252824;  // std dev = 2.103, 19.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=7 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D) )
%   | then if ( follows(A, D) )
%   | | then return 0.039334504226705515;  // std dev = 0.271, 274.000 (wgt'ed) examples reached here.  /* #neg=178 #pos=96 */
%   | | else return 0.10581591540718199;  // std dev = 0.408, 77.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=26 */
%   | else if ( tweets(A, E) )
%   | | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | | then return 0.6902679992006129;  // std dev = 0.245, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.22532152224180615;  // std dev = 0.035, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0.012828481592576688;  // std dev = 0.452, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, H) )
%   | | | then return 0.07204294242047239;  // std dev = 2.619, 52.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=18 */
%   | | | else return 0.12412823610893478;  // std dev = 2.258, 26.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=10 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D) )
%   | then return 0.04396847503942963;  // std dev = 0.308, 351.000 (wgt'ed) examples reached here.  /* #neg=229 #pos=122 */
%   | else if ( follows(C, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(E, A) )
%   | | | then return 0.15437642630212;  // std dev = 0.702, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.022369318910849523;  // std dev = 1.584, 16.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=4 */
%   else if ( follows(F, A) )
%   | then if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0.4388728980141667;  // std dev = 0.064, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return -0.12770873827664223;  // std dev = 0.227, 36.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=2 */
%   | else if ( follows(H, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, I) )
%   | | | then return 0.07054647530825944;  // std dev = 1.633, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | | | else return 0.049848570094537144;  // std dev = 2.160, 21.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=7 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), follows(D, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), follows(A, F) )
%   | | | then return 0.1725479966119073;  // std dev = 1.921, 71.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=67 */
%   | | | else return 0.37153913610683037;  // std dev = 1.002, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | else if ( follows(G, A), follows(H, G) )
%   | | | then return -0.05351525836260997;  // std dev = 3.351, 189.000 (wgt'ed) examples reached here.  /* #neg=169 #pos=20 */
%   | | | else return 0.05143134928613035;  // std dev = 4.188, 100.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=30 */
%   else if ( follows(A, I) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, J), tweets(A, K) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(L, A), recursion_accounttype(L, B) )
%   | | | then return 0.3367103673200515;  // std dev = 0.212, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.03450569461071857;  // std dev = 3.107, 67.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=13 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.20922352913147688;  // std dev = 0.140, 79.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=78 */
%   | else if ( follows(E, A), tweets(E, F) )
%   | | then return -0.05278204525248623;  // std dev = 0.243, 198.000 (wgt'ed) examples reached here.  /* #neg=178 #pos=20 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.04746496873932519;  // std dev = 2.701, 48.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=15 */
%   | | | else return 0.023020259229258558;  // std dev = 3.206, 54.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=15 */
%   else if ( follows(H, A), follows(A, H) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(I, A) )
%   | | then if ( recursion_accounttype(I, J), tweets(I, K) )
%   | | | then return -7.719104402401424E-4;  // std dev = 1.840, 53.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=17 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(L, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.050790406462977666;  // std dev = 2.717, 33.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=11 */


Results
   AUC ROC   = 0.967303
   AUC PR    = 0.314316
   CLL	      = -0.177226
   Precision = 0.326165 at threshold = 0.5
   Recall    = 0.722222
   F1        = 0.449383


Total learning time: 30.656 seconds
Total inference time: 146.433 seconds
AUC ROC: 0.967303


Results scoring model
   AUC ROC   = 0.959762
   AUC PR    = 0.328352
   CLL	      = -0.197954
   Precision = 0.320261 at threshold = 0.5
   Recall    = 0.628205
   F1        = 0.424242


Total scoring time: 152.572 seconds
Refined model CLL: -0.197954


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.967303
   AUC PR    = 0.314316
   CLL	      = -0.177226
   Precision = 0.326165 at threshold = 0.5
   Recall    = 0.722222
   F1        = 0.449383


Total learning time: 188.85 seconds
Total inference time: 146.433 seconds
AUC ROC: 0.967303
Total revision time: 188.85
Best scored revision CLL: -0.197954


Dataset: 7_yeast_twitter, Fold: 1, Type: Transfer (trRDN-B), Time: 00:48:22
{'AUC ROC': 0.967303, 'AUC PR': 0.314316, 'CLL': -0.177226, 'Precision': [0.326165, 0.5], 'Recall': 0.722222, 'F1': 0.449383, 'Learning time': 188.85, 'Inference time': 146.433, 'parameter_1.0': {'AUC ROC': 0.5, 'AUC PR': 0.007752, 'CLL': -0.372347, 'Precision': [nan, 0.5], 'Recall': 0.0, 'F1': nan, 'Learning time': 1.848, 'Inference time': 2.903}}


Starting fold 2

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos	 examples: 156
Target test neg examples: 24648

Amount of data: 0.2
******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(A, C), interaction(C, C).;true;true
0;true;interaction(C, A), phenotype(C, D).;false;true
0;true,false;interaction(E, A), enzyme(A, F).;true;true
0;true,false,true;complex(A, G), complex(C, H).;false;false
0;true,false,false;recursion_proteinclass(C, B).;false;false
0;false;location(A, I), phenotype(A, J).;true;false
0;false,true;location(K, I), recursion_proteinclass(K, B).;true;false
0;false,true,true;phenotype(K, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), complex(A, D).;true;true
1;true;interaction(E, C), recursion_proteinclass(E, B).;false;false
1;false;interaction(F, A), phenotype(A, G).;true;true
1;false,true;recursion_proteinclass(F, B).;false;true
1;false,true,false;interaction(H, F), recursion_proteinclass(H, B).;false;false
1;false,false;interaction(I, A), phenotype(I, J).;true;true
1;false,false,true;interaction(A, K), recursion_proteinclass(K, B).;false;false
1;false,false,false;interaction(A, L), phenotype(L, M).;false;false
2;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
2;true;complex(C, D).;false;false
2;false;interaction(A, E), interaction(E, A).;true;true
2;false,true;interaction(A, A).;false;true
2;false,true,false;enzyme(E, F), enzyme(A, F).;false;false
2;false,false;interaction(G, A), enzyme(G, H).;true;true
2;false,false,true;complex(G, I), complex(A, I).;false;false
2;false,false,false;interaction(A, J), recursion_proteinclass(J, B).;false;false
3;;proteinclass(A, B) :- complex(A, C), interaction(A, D).;true;true
3;true;interaction(D, E), recursion_proteinclass(E, B).;false;true
3;true,false;interaction(D, A).;false;false
3;false;interaction(F, A), enzyme(F, G).;true;true
3;false,true;interaction(H, F), recursion_proteinclass(H, B).;false;true
3;false,true,false;interaction(A, F).;false;false
3;false,false;interaction(A, A), location(A, I).;false;true
3;false,false,false;interaction(A, J), enzyme(J, K).;false;false
4;;proteinclass(A, B) :- phenotype(A, C), interaction(A, D).;true;true
4;true;interaction(D, E), interaction(E, F).;false;true
4;true,false;recursion_proteinclass(D, B).;false;true
4;true,false,false;enzyme(A, G), interaction(D, H).;false;false
4;false;interaction(I, A), recursion_proteinclass(I, B).;false;true
4;false,false;interaction(J, A), interaction(K, J).;true;true
4;false,false,true;recursion_proteinclass(K, B), location(J, L).;false;false
4;false,false,false;interaction(A, M), recursion_proteinclass(M, B).;false;false
5;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
5;true;enzyme(A, D), phenotype(C, E).;false;false
5;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
5;false,true;interaction(G, F), interaction(G, A).;false;true
5;false,true,false;phenotype(A, H), location(F, I).;false;false
5;false,false;interaction(A, J), complex(J, K).;true;true
5;false,false,true;interaction(J, L), recursion_proteinclass(L, B).;false;false
5;false,false,false;phenotype(A, M), location(A, N).;false;false
6;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
6;true;interaction(C, D), complex(D, E).;true;false
6;true,true;interaction(A, D).;true;false
6;true,true,true;interaction(D, C).;false;false
6;false;interaction(A, A).;false;true
6;false,false;interaction(A, F), enzyme(F, G).;true;true
6;false,false,true;phenotype(F, H), complex(F, I).;false;false
6;false,false,false;location(A, J).;false;false
7;;proteinclass(A, B) :- interaction(A, C), complex(C, D).;true;true
7;true;recursion_proteinclass(C, B).;false;true
7;true,false;interaction(C, E), recursion_proteinclass(E, B).;false;true
7;true,false,false;interaction(C, A).;false;false
7;false;interaction(F, A), recursion_proteinclass(F, B).;false;true
7;false,false;interaction(G, A), enzyme(G, H).;true;true
7;false,false,true;interaction(A, I), interaction(G, I).;false;false
7;false,false,false;location(A, J), enzyme(A, K).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;interaction(C, D), interaction(D, D).;false;false
8;false;interaction(A, E), enzyme(A, F).;true;true
8;false,true;interaction(E, G), recursion_proteinclass(G, B).;false;true
8;false,true,false;interaction(E, A).;false;false
8;false,false;interaction(A, H), location(A, I).;true;true
8;false,false,true;interaction(H, J), recursion_proteinclass(J, B).;false;false
8;false,false,false;enzyme(A, K).;false;false
9;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;false;true
9;false;interaction(D, A), interaction(A, D).;true;true
9;false,true;phenotype(A, E), phenotype(D, E).;true;true
9;false,true,true;complex(D, F).;false;false
9;false,true,false;interaction(D, D).;false;false
9;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
9;false,false,true;phenotype(G, H), location(G, I).;false;false
9;false,false,false;complex(A, J), interaction(K, A).;false;false


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(C, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), recursion_accounttype(A, E) )
%   | then if ( tweets(F, D) )
%   | | then if ( recursion_accounttype(F, E) )
%   | | | then return 0.17296374991432717;  // std dev = 3.413, 54.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=17 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.25814893509951237;  // std dev = 2.191, 20.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=8 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C) )
%   | then return 0.20517843715180806;  // std dev = 3.712, 59.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=22 */
%   | else return -0.16423676986364522;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else if ( follows(E, A), recursion_accounttype(A, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, I), recursion_accounttype(I, J) )
%   | | | then return 0.04575266740340879;  // std dev = 1.536, 14.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then return 0.1368890016141346;  // std dev = 0.470, 66.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=22 */
%   else if ( follows(A, D), follows(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, F) )
%   | | | then return 0.15721094647778194;  // std dev = 1.417, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D) )
%   | then return 0.07933809343223773;  // std dev = 3.925, 74.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=22 */
%   | else if ( follows(C, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.29230692363067157;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else if ( follows(E, A) )
%   | then if ( follows(F, E) )
%   | | then return 0.11662772426882258;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(A, C), follows(A, D) )
%   then if ( follows(D, E), follows(E, F) )
%   | then return 0.14197789922968387;  // std dev = 3.702, 59.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=22 */
%   | else if ( follows(D, G) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.00988227384208451;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else if ( follows(H, A) )
%   | then return 0.7628450285272405;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( recursion_accounttype(C, D) )
%   | then return 0.04380767054403269;  // std dev = 4.002, 76.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=23 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(E, A) )
%   | then if ( follows(F, E), follows(F, A) )
%   | | then return -0.06665923858993676;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D) )
%   | then if ( follows(A, D) )
%   | | then if ( follows(D, C) )
%   | | | then return 0.009444783903031573;  // std dev = 3.294, 54.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=15 */
%   | | | else return 0.3005997902732668;  // std dev = 1.301, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | | else return 0.34727744497714913;  // std dev = 1.071, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | else return -0.016460559001207728;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return 0.6158937592846202;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D) )
%   | then return 0.10999109277333388;  // std dev = 3.637, 55.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=22 */
%   | else if ( follows(C, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09565635056321618;  // std dev = 0.912, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   else if ( follows(E, A) )
%   | then return 0.13079379322548393;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), follows(D, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.010059192172990226;  // std dev = 3.995, 79.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=23 */
%   else if ( follows(A, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F), tweets(A, G) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.09846143975026393;  // std dev = 0.471, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then return -0.04704841007251825;  // std dev = 4.127, 89.000 (wgt'ed) examples reached here.  /* #neg=66 #pos=23 */
%   else if ( follows(D, A), follows(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A) )
%   | | then if ( recursion_accounttype(E, F), tweets(E, G) )
%   | | | then return -0.09218216217571518;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.5
   AUC PR    = 0.006289
   CLL	      = -0.395989
   Precision = 0.006289 at threshold = 0.5
   Recall    = 0.089744
   F1        = 0.011755


Total learning time: 0.8 seconds
Total inference time: 3.902 seconds
AUC ROC: 0.5


Results scoring model
   AUC ROC   = 0.579287
   AUC PR    = 0.010059
   CLL	      = -0.378561
   Precision = 0.009804 at threshold = 0.5
   Recall    = 0.08
   F1        = 0.017467


Total scoring time: 1.098 seconds
Parameter learned model CLL: -0.378561


Structure after Parameter Learning
[['accounttype(A, B)', {'': 'follows(A, C), follows(C, C)', 'false': 'tweets(A, D), recursion_accounttype(A, E)', 'false,true': 'tweets(F, D)', 'false,true,true': 'recursion_accounttype(F, E)'}, {'true': [0.0, 0, 0], 'false,true,true,true': [3.413, 37, 17], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 0, 0], 'false,false': [2.191, 12, 8]}], ['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C)', 'false': 'follows(E, A), recursion_accounttype(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, H)', 'false,false,false': 'follows(A, I), recursion_accounttype(I, J)'}, {'true,true': [3.712, 37, 22], 'true,false': [0.0, 2, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [1.536, 11, 3], 'false,false,false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(C, A)', 'false': 'follows(A, D), follows(D, A)', 'false,false': 'follows(E, A)', 'false,false,false': 'follows(A, F)'}, {'true': [0.47, 44, 22], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [1.417, 6, 3], 'false,false,false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D)', 'true,false': 'follows(C, A)', 'false': 'follows(E, A)', 'false,true': 'follows(F, E)'}, {'true,true': [3.925, 52, 22], 'true,false,true': [0.0, 0, 0], 'true,false,false': [0.707, 1, 1], 'false,true,true': [1.155, 4, 2], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'recursion_accounttype(A, C), follows(A, D)', 'true': 'follows(D, E), follows(E, F)', 'true,false': 'follows(D, G)', 'false': 'follows(H, A)'}, {'true,true': [3.702, 37, 22], 'true,false,true': [0.0, 0, 0], 'true,false,false': [0.866, 3, 1], 'false,true': [0.0, 0, 2], 'false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'recursion_accounttype(C, D)', 'false': 'follows(E, A)', 'false,true': 'follows(F, E), follows(F, A)'}, {'true,true': [4.002, 53, 23], 'true,false': [0.0, 0, 0], 'false,true,true': [1.155, 4, 2], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D)', 'true,true': 'follows(A, D)', 'true,true,true': 'follows(D, C)', 'false': 'follows(A, A)', 'false,false': 'follows(A, E)', 'false,false,false': 'tweets(A, F)'}, {'true,true,true,true': [3.294, 39, 15], 'true,true,true,false': [1.301, 3, 4], 'true,true,false': [1.071, 2, 3], 'true,false': [0.866, 3, 1], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 2], 'false,false,false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D)', 'true,false': 'follows(C, A)', 'false': 'follows(E, A)'}, {'true,true': [3.637, 33, 22], 'true,false,true': [0.0, 0, 0], 'true,false,false': [0.912, 5, 1], 'false,true': [0.816, 1, 2], 'false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), follows(D, D)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F), tweets(A, G)'}, {'true,true': [0.0, 0, 0], 'true,false': [3.995, 56, 23], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.471, 1, 2]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'false': 'follows(D, A), follows(A, D)', 'false,false': 'follows(E, A)', 'false,false,true': 'recursion_accounttype(E, F), tweets(E, G)'}, {'true': [4.127, 66, 23], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.0, 2, 2], 'false,false,true,false': [0.0, 0, 0], 'false,false,false': [0.0, 0, 0]}]]
[{'': [nan, 0.2237034331628935], 'false': [0.21570644718792817, 0.24000000000000005], 'false,true': [0.21570644718792817, nan], 'false,true,true': [0.21570644718792817, nan]}, {'': [0.23026958037550688, 0.16852332210393509], 'true': [0.23360098148004924, 0.0], 'false': [nan, 0.16852332210393509], 'false,false': [nan, 0.16852332210393509], 'false,false,false': [0.16852332210393509, nan]}, {'': [0.22072549831167917, 0.22317825570504712], 'false': [nan, 0.22317825570504712], 'false,false': [nan, 0.22317825570504712], 'false,false,false': [0.22317825570504712, nan]}, {'': [0.21041090385602138, 0.22222222222222224], 'false': [0.22222222222222224, nan], 'false,true': [0.22222222222222224, nan], 'true': [0.20814735663624453, 0.25], 'true,false': [nan, 0.25]}, {'': [0.23075550995750665, 0.0], 'true': [0.23222386390915054, 0.18749999999999997], 'true,false': [nan, 0.18749999999999997], 'false': [0.0, nan]}, {'': [0.21074450889919516, 0.2222222222222222], 'false': [0.2222222222222222, nan], 'false,true': [0.2222222222222222, nan], 'true': [0.21074450889919516, nan]}, {'': [0.22029913159204811, 0.0], 'true': [0.2218991710552632, 0.18749999999999997], 'true,true': [0.21427800951275347, 0.22922557125803297], 'true,true,true': [0.20096586466907015, 0.24192830752556363], 'false': [nan, 0.0], 'false,false': [nan, 0.0], 'false,false,false': [0.0, nan]}, {'': [0.23420800081867993, 0.2222222222222222], 'true': [0.24047389558384652, 0.1386395189855725], 'false': [0.2222222222222222, nan], 'true,false': [nan, 0.1386395189855725]}, {'': [0.20198885198102182, 0.22222222222222224], 'false': [nan, 0.22222222222222224], 'false,false': [nan, 0.22222222222222224], 'true': [nan, 0.2019888519810219]}, {'': [0.19133692641472652, 0.24999999999999997], 'false': [nan, 0.24999999999999997], 'false,false': [0.24999999999999997, nan], 'false,false,true': [0.24999999999999997, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
1;;accounttype(A, B) :- follows(C, A).;true;true
1;true;follows(D, C).;true;true
4;;accounttype(A, B) :- recursion_accounttype(A, C), follows(A, D).;true;true
6;;accounttype(A, B) :- follows(A, C).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.8581489350995123;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else if ( follows(D, A), tweets(A, E) )
%   | then if ( follows(D, F), follows(F, A) )
%   | | then return -0.1418510649004877;  // std dev = 1.83e-08, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | else if ( follows(A, G), follows(G, D) )
%   | | | then return 0.10814893509951218;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( tweets(A, H) )
%   | | then return 0.19148226843284552;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.039967116917694;  // std dev = 1.279, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | | | else return 0.19148226843284552;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.7194734122109542;  // std dev = 7.30e-08, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else if ( tweets(A, F) )
%   | | | then return -0.07174040122963173;  // std dev = 1.335, 35.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=2 */
%   | | | else return 0.019880445191221934;  // std dev = 1.291, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   | else return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else if ( follows(A, G), follows(G, H) )
%   | then if ( tweets(A, I), tweets(G, I) )
%   | | then return 0.3332054912315484;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return -0.15178829329869642;  // std dev = 0.017, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.16653882456488175;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, A) )
%   | then return 0.5553664367462846;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return 0.8341806272248521;  // std dev = 0.061, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, D) )
%   | then if ( follows(D, A), tweets(D, E) )
%   | | then if ( follows(D, F), follows(F, A) )
%   | | | then return -0.1259149645631072;  // std dev = 0.077, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | | else return -0.06176656782350446;  // std dev = 0.954, 13.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=1 */
%   | | else if ( follows(G, D), recursion_accounttype(G, B) )
%   | | | then return 0.651302195851567;  // std dev = 0.263, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.17336480943200527;  // std dev = 0.144, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0.3309831996208943;  // std dev = 0.550, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, A) )
%   | then return 0.4175135841583098;  // std dev = 4.21e-08, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return 0.6874586771000067;  // std dev = 0.091, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.4257800098698808;  // std dev = 0.086, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(E, A) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return -0.11161300694451766;  // std dev = 0.081, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | | else return -0.062297153534799074;  // std dev = 0.958, 15.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=1 */
%   | | else if ( follows(A, G), follows(G, H) )
%   | | | then return -0.04725443437311526;  // std dev = 0.760, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | | | else return 0.11876018499921948;  // std dev = 0.697, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(A, C), follows(A, D) )
%   then if ( follows(A, E), recursion_accounttype(E, B) )
%   | then if ( follows(E, A) )
%   | | then return 0.3207118471601497;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0.5269365781851179;  // std dev = 0.102, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0.29844690230818216;  // std dev = 7.45e-09, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, G), follows(G, H) )
%   | | | then return -0.08180308422060724;  // std dev = 1.247, 52.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=2 */
%   | | | else return 0.0035422787447357716;  // std dev = 0.740, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else return 0.028127561295856442;  // std dev = 0.591, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, A) )
%   | then return 0.2551722425694894;  // std dev = 2.11e-08, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return 0.39800123838931234;  // std dev = 0.095, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2891348255631593;  // std dev = 0.135, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(E, A) )
%   | | then if ( tweets(A, F), follows(A, E) )
%   | | | then return -0.06756870059038057;  // std dev = 0.963, 33.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=1 */
%   | | | else return -0.1196951809002426;  // std dev = 0.057, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.04162426324684554;  // std dev = 0.737, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0.09806921631251471;  // std dev = 0.690, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.20627656042438125;  // std dev = 0.029, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.1204817367221795;  // std dev = 0.844, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( tweets(A, F) )
%   | | | then return -0.057214520443237035;  // std dev = 1.241, 41.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=2 */
%   | | | else return -0.08799001197088403;  // std dev = 0.763, 21.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=1 */
%   else return -0.00863603713686755;  // std dev = 0.195, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, A) )
%   | then if ( follows(D, A), follows(D, C) )
%   | | then return 0.1776043884753431;  // std dev = 7.45e-09, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return -0.15572894485799024;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.28336020017168156;  // std dev = 0.078, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then return 0.2171422966166053;  // std dev = 0.153, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(F, A) )
%   | | then if ( follows(F, G), follows(G, A) )
%   | | | then return -0.08670494753943465;  // std dev = 0.070, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | | else return -0.0020301493987160274;  // std dev = 0.941, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return 0.13831223135821255;  // std dev = 0.669, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return -0.01390564444680643;  // std dev = 0.752, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, A) )
%   | then return 0.16057100697800003;  // std dev = 0.063, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return 0.04431028970747326;  // std dev = 0.832, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.1833356688310637;  // std dev = 0.135, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(E, A) )
%   | | then if ( tweets(A, F), follows(A, E) )
%   | | | then return -0.057541712711735374;  // std dev = 0.964, 42.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=1 */
%   | | | else return -0.09640805861761018;  // std dev = 0.038, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else return 0.09505243482874169;  // std dev = 0.974, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, A) )
%   | then return 0.14012989695287578;  // std dev = 0.057, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return 0.22213615352346736;  // std dev = 0.066, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F) )
%   | | | then return 0.3096181495260194;  // std dev = 0.677, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.11211965124753827;  // std dev = 0.274, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.08108032043081115;  // std dev = 0.105, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
%   | else return 0.14738472762324256;  // std dev = 0.893, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */


Results
   AUC ROC   = 0.950944
   AUC PR    = 0.327314
   CLL	      = -0.156091
   Precision = 0.308411 at threshold = 0.5
   Recall    = 0.634615
   F1        = 0.415094


Total learning time: 4.104 seconds
Total inference time: 19.034 seconds
AUC ROC: 0.950944


Results scoring model
   AUC ROC   = 0.987988
   AUC PR    = 0.457241
   CLL	      = -0.128351
   Precision = 0.338462 at threshold = 0.5
   Recall    = 0.88
   F1        = 0.488889


Total scoring time: 3.588 seconds
Refined model CLL: -0.128351


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.950944
   AUC PR    = 0.327314
   CLL	      = -0.156091
   Precision = 0.308411 at threshold = 0.5
   Recall    = 0.634615
   F1        = 0.415094


Total learning time: 9.59 seconds
Total inference time: 19.034 seconds
AUC ROC: 0.950944
Total revision time: 9.59
Best scored revision CLL: -0.128351


Dataset: 7_yeast_twitter, Fold: 2, Type: Transfer (trRDN-B), Time: 00:48:56
{'AUC ROC': 0.950944, 'AUC PR': 0.327314, 'CLL': -0.156091, 'Precision': [0.308411, 0.5], 'Recall': 0.634615, 'F1': 0.415094, 'Learning time': 9.59, 'Inference time': 19.034, 'parameter_0.2': {'AUC ROC': 0.5, 'AUC PR': 0.006289, 'CLL': -0.395989, 'Precision': [0.006289, 0.5], 'Recall': 0.089744, 'F1': 0.011755, 'Learning time': 0.8, 'Inference time': 3.902}}


Amount of data: 0.4
******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(A, C), interaction(C, C).;true;true
0;true;interaction(C, A), phenotype(C, D).;false;true
0;true,false;interaction(E, A), enzyme(A, F).;true;true
0;true,false,true;complex(A, G), complex(C, H).;false;false
0;true,false,false;recursion_proteinclass(C, B).;false;false
0;false;location(A, I), phenotype(A, J).;true;false
0;false,true;location(K, I), recursion_proteinclass(K, B).;true;false
0;false,true,true;phenotype(K, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), complex(A, D).;true;true
1;true;interaction(E, C), recursion_proteinclass(E, B).;false;false
1;false;interaction(F, A), phenotype(A, G).;true;true
1;false,true;recursion_proteinclass(F, B).;false;true
1;false,true,false;interaction(H, F), recursion_proteinclass(H, B).;false;false
1;false,false;interaction(I, A), phenotype(I, J).;true;true
1;false,false,true;interaction(A, K), recursion_proteinclass(K, B).;false;false
1;false,false,false;interaction(A, L), phenotype(L, M).;false;false
2;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
2;true;complex(C, D).;false;false
2;false;interaction(A, E), interaction(E, A).;true;true
2;false,true;interaction(A, A).;false;true
2;false,true,false;enzyme(E, F), enzyme(A, F).;false;false
2;false,false;interaction(G, A), enzyme(G, H).;true;true
2;false,false,true;complex(G, I), complex(A, I).;false;false
2;false,false,false;interaction(A, J), recursion_proteinclass(J, B).;false;false
3;;proteinclass(A, B) :- complex(A, C), interaction(A, D).;true;true
3;true;interaction(D, E), recursion_proteinclass(E, B).;false;true
3;true,false;interaction(D, A).;false;false
3;false;interaction(F, A), enzyme(F, G).;true;true
3;false,true;interaction(H, F), recursion_proteinclass(H, B).;false;true
3;false,true,false;interaction(A, F).;false;false
3;false,false;interaction(A, A), location(A, I).;false;true
3;false,false,false;interaction(A, J), enzyme(J, K).;false;false
4;;proteinclass(A, B) :- phenotype(A, C), interaction(A, D).;true;true
4;true;interaction(D, E), interaction(E, F).;false;true
4;true,false;recursion_proteinclass(D, B).;false;true
4;true,false,false;enzyme(A, G), interaction(D, H).;false;false
4;false;interaction(I, A), recursion_proteinclass(I, B).;false;true
4;false,false;interaction(J, A), interaction(K, J).;true;true
4;false,false,true;recursion_proteinclass(K, B), location(J, L).;false;false
4;false,false,false;interaction(A, M), recursion_proteinclass(M, B).;false;false
5;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
5;true;enzyme(A, D), phenotype(C, E).;false;false
5;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
5;false,true;interaction(G, F), interaction(G, A).;false;true
5;false,true,false;phenotype(A, H), location(F, I).;false;false
5;false,false;interaction(A, J), complex(J, K).;true;true
5;false,false,true;interaction(J, L), recursion_proteinclass(L, B).;false;false
5;false,false,false;phenotype(A, M), location(A, N).;false;false
6;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
6;true;interaction(C, D), complex(D, E).;true;false
6;true,true;interaction(A, D).;true;false
6;true,true,true;interaction(D, C).;false;false
6;false;interaction(A, A).;false;true
6;false,false;interaction(A, F), enzyme(F, G).;true;true
6;false,false,true;phenotype(F, H), complex(F, I).;false;false
6;false,false,false;location(A, J).;false;false
7;;proteinclass(A, B) :- interaction(A, C), complex(C, D).;true;true
7;true;recursion_proteinclass(C, B).;false;true
7;true,false;interaction(C, E), recursion_proteinclass(E, B).;false;true
7;true,false,false;interaction(C, A).;false;false
7;false;interaction(F, A), recursion_proteinclass(F, B).;false;true
7;false,false;interaction(G, A), enzyme(G, H).;true;true
7;false,false,true;interaction(A, I), interaction(G, I).;false;false
7;false,false,false;location(A, J), enzyme(A, K).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;interaction(C, D), interaction(D, D).;false;false
8;false;interaction(A, E), enzyme(A, F).;true;true
8;false,true;interaction(E, G), recursion_proteinclass(G, B).;false;true
8;false,true,false;interaction(E, A).;false;false
8;false,false;interaction(A, H), location(A, I).;true;true
8;false,false,true;interaction(H, J), recursion_proteinclass(J, B).;false;false
8;false,false,false;enzyme(A, K).;false;false
9;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;false;true
9;false;interaction(D, A), interaction(A, D).;true;true
9;false,true;phenotype(A, E), phenotype(D, E).;true;true
9;false,true,true;complex(D, F).;false;false
9;false,true,false;interaction(D, D).;false;false
9;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
9;false,false,true;phenotype(G, H), location(G, I).;false;false
9;false,false,false;complex(A, J), interaction(K, A).;false;false


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(C, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), recursion_accounttype(A, E) )
%   | then if ( tweets(F, D) )
%   | | then if ( recursion_accounttype(F, E) )
%   | | | then return 0.23814893509951113;  // std dev = 4.854, 100.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=38 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.21109011157010057;  // std dev = 2.787, 34.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=12 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C) )
%   | then return 0.1344755267254606;  // std dev = 5.459, 140.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=43 */
%   | else return -0.17338119169575839;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else if ( follows(E, A), recursion_accounttype(A, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, I), recursion_accounttype(I, J) )
%   | | | then return 0.1783485490941169;  // std dev = 2.133, 20.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then return 0.1786913954277685;  // std dev = 0.483, 116.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=43 */
%   else if ( follows(A, D), follows(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, F) )
%   | | | then return 0.1693323629822569;  // std dev = 2.104, 19.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D) )
%   | then return 0.11886013929141717;  // std dev = 5.199, 120.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=41 */
%   | else if ( follows(C, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.10833537041865701;  // std dev = 1.826, 15.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=5 */
%   else if ( follows(E, A) )
%   | then if ( follows(F, E) )
%   | | then return 0.14070836050975621;  // std dev = 1.595, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(A, C), follows(A, D) )
%   then if ( follows(D, E), follows(E, F) )
%   | then return 0.0870984332815557;  // std dev = 5.239, 124.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=41 */
%   | else if ( follows(D, G) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.08854979972952673;  // std dev = 1.827, 15.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=5 */
%   else if ( follows(H, A) )
%   | then return 0.19619598655320022;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( recursion_accounttype(C, D) )
%   | then return 0.09408696589962803;  // std dev = 5.450, 130.000 (wgt'ed) examples reached here.  /* #neg=84 #pos=46 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(E, A) )
%   | then if ( follows(F, E), follows(F, A) )
%   | | then return 0.11336422588829684;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D) )
%   | then if ( follows(A, D) )
%   | | then if ( follows(D, C) )
%   | | | then return 0.11387126950692635;  // std dev = 4.341, 79.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=31 */
%   | | | else return 0.16769124141813094;  // std dev = 1.492, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | | else return -0.031811272299619685;  // std dev = 2.125, 24.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
%   | else return 0.07763465234292966;  // std dev = 1.793, 14.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=5 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return 0.4896354541668856;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D) )
%   | then return 0.018643728153150334;  // std dev = 5.294, 129.000 (wgt'ed) examples reached here.  /* #neg=88 #pos=41 */
%   | else if ( follows(C, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.0610390886229148;  // std dev = 1.794, 14.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=5 */
%   else if ( follows(E, A) )
%   | then return 0.021031917746242374;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), follows(D, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.019787829538214577;  // std dev = 5.586, 142.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=46 */
%   else if ( follows(A, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F), tweets(A, G) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09522190133146297;  // std dev = 0.471, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then return 0.07542501604427956;  // std dev = 5.332, 120.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=46 */
%   else if ( follows(D, A), follows(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A) )
%   | | then if ( recursion_accounttype(E, F), tweets(E, G) )
%   | | | then return -0.119696459734291;  // std dev = 1.690, 14.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.5
   AUC PR    = 0.006289
   CLL	      = -0.386203
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.115 seconds
Total inference time: 3.833 seconds
AUC ROC: 0.5


Results scoring model
   AUC ROC   = 0.51295
   AUC PR    = 0.008131
   CLL	      = -0.401421
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total scoring time: 1.516 seconds
Parameter learned model CLL: -0.401421


Structure after Parameter Learning
[['accounttype(A, B)', {'': 'follows(A, C), follows(C, C)', 'false': 'tweets(A, D), recursion_accounttype(A, E)', 'false,true': 'tweets(F, D)', 'false,true,true': 'recursion_accounttype(F, E)'}, {'true': [0.0, 0, 0], 'false,true,true,true': [4.854, 62, 38], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 0, 0], 'false,false': [2.787, 22, 12]}], ['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C)', 'false': 'follows(E, A), recursion_accounttype(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, H)', 'false,false,false': 'follows(A, I), recursion_accounttype(I, J)'}, {'true,true': [5.459, 97, 43], 'true,false': [0.0, 1, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [2.133, 13, 7], 'false,false,false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(C, A)', 'false': 'follows(A, D), follows(D, A)', 'false,false': 'follows(E, A)', 'false,false,false': 'follows(A, F)'}, {'true': [0.483, 73, 43], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [2.104, 12, 7], 'false,false,false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D)', 'true,false': 'follows(C, A)', 'false': 'follows(E, A)', 'false,true': 'follows(F, E)'}, {'true,true': [5.199, 79, 41], 'true,false,true': [0.0, 0, 0], 'true,false,false': [1.826, 10, 5], 'false,true,true': [1.595, 7, 4], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'recursion_accounttype(A, C), follows(A, D)', 'true': 'follows(D, E), follows(E, F)', 'true,false': 'follows(D, G)', 'false': 'follows(H, A)'}, {'true,true': [5.239, 83, 41], 'true,false,true': [0.0, 0, 0], 'true,false,false': [1.827, 10, 5], 'false,true': [1.491, 5, 4], 'false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'recursion_accounttype(C, D)', 'false': 'follows(E, A)', 'false,true': 'follows(F, E), follows(F, A)'}, {'true,true': [5.45, 84, 46], 'true,false': [0.0, 0, 0], 'false,true,true': [1.549, 6, 4], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D)', 'true,true': 'follows(A, D)', 'true,true,true': 'follows(D, C)', 'false': 'follows(A, A)', 'false,false': 'follows(A, E)', 'false,false,false': 'tweets(A, F)'}, {'true,true,true,true': [4.341, 48, 31], 'true,true,true,false': [1.492, 5, 4], 'true,true,false': [2.125, 18, 6], 'true,false': [1.793, 9, 5], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.894, 1, 4], 'false,false,false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D)', 'true,false': 'follows(C, A)', 'false': 'follows(E, A)'}, {'true,true': [5.294, 88, 41], 'true,false,true': [0.0, 0, 0], 'true,false,false': [1.794, 9, 5], 'false,true': [1.491, 5, 4], 'false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), follows(D, D)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F), tweets(A, G)'}, {'true,true': [0.0, 0, 0], 'true,false': [5.586, 96, 46], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.471, 8, 4]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'false': 'follows(D, A), follows(A, D)', 'false,false': 'follows(E, A)', 'false,false,true': 'recursion_accounttype(E, F), tweets(E, G)'}, {'true': [5.332, 74, 46], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.69, 10, 4], 'false,false,true,false': [0.0, 0, 0], 'false,false,false': [0.0, 0, 0]}]]
[{'': [nan, 0.23390510135887796], 'false': [0.23560000000000147, 0.22837370242214483], 'false,true': [0.23560000000000147, nan], 'false,true,true': [0.23560000000000147, nan]}, {'': [0.21202178092065443, 0.22744599886647138], 'false': [nan, 0.22744599886647138], 'false,false': [nan, 0.22744599886647138], 'false,false,false': [0.22744599886647138, nan], 'true': [0.21286405370885203, 0.0]}, {'': [0.2328430902802967, 0.23304844688971893], 'false': [nan, 0.23304844688971893], 'false,false': [nan, 0.23304844688971893], 'false,false,false': [0.23304844688971893, nan]}, {'': [0.2249323695739473, 0.23140495867768587], 'false': [0.23140495867768587, nan], 'false,true': [0.23140495867768587, nan], 'true': [0.2252511256860458, 0.22228385777953713], 'true,false': [nan, 0.22228385777953713]}, {'': [0.22143999573400064, 0.2469135802469136], 'false': [0.2469135802469136, nan], 'true': [0.22131009739259797, 0.22251194287468268], 'true,false': [nan, 0.22251194287468268]}, {'': [0.22845498890771437, 0.24], 'false': [0.24, nan], 'false,true': [0.24, nan], 'true': [0.22845498890771437, nan]}, {'': [0.23219480965181627, 0.16000000000000006], 'true': [0.23252072796844067, 0.229509858103941], 'true,true': [0.2397300526395287, 0.18812710012138564], 'true,true,true': [0.23858416074368266, 0.24718808977742412], 'false': [nan, 0.16000000000000006], 'false,false': [nan, 0.16000000000000006], 'false,false,false': [0.16000000000000006, nan]}, {'': [0.21867568562153622, 0.2469135802469136], 'false': [0.2469135802469136, nan], 'true': [0.21726977227737657, 0.23000877223458738], 'true,false': [nan, 0.23000877223458738]}, {'': [0.21972571212792996, 0.2222222222222223], 'false': [nan, 0.2222222222222223], 'false,false': [nan, 0.2222222222222223], 'true': [nan, 0.2197257121279299]}, {'': [0.2368925387365462, 0.20408163265306123], 'false': [nan, 0.20408163265306123], 'false,false': [0.20408163265306123, nan], 'false,false,true': [0.20408163265306123, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
1;;accounttype(A, B) :- follows(C, A).;true;true
1;true;follows(D, C).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, C) )
%   | then if ( tweets(C, D) )
%   | | then return 0.7993254056877476;  // std dev = 0.235, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | else return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.8581489350995123;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.14185106490048763;  // std dev = 8.16e-08, 87.000 (wgt'ed) examples reached here.  /* #neg=87 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.030739953789376676;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   | | | else return 0.28672036367094084;  // std dev = 1.309, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.724830111198599;  // std dev = 0.035, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | else if ( tweets(A, F) )
%   | | | then return -0.0698579246639608;  // std dev = 1.826, 76.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=5 */
%   | | | else return 0.02365854689619904;  // std dev = 1.328, 17.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=3 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, G), follows(G, H) )
%   | then if ( recursion_accounttype(H, B) )
%   | | then return 0.7194734122109545;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.12544463852839138;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( tweets(A, I) )
%   | | then return 0.195183186116871;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.31954674027598445;  // std dev = 1.225, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C), tweets(A, D) )
%   | then if ( follows(A, E), follows(E, C) )
%   | | then return 0.509752960083206;  // std dev = 0.228, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | else return 0.5649061862729268;  // std dev = 0.013, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.5540432933953917;  // std dev = 2.98e-08, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then if ( tweets(A, G) )
%   | | then return 0.4388574602100973;  // std dev = 0.828, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.3813403423496435;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.1194729850596586;  // std dev = 0.026, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
%   | | | else return 0.05881145425327189;  // std dev = 1.508, 19.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=4 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.042033976620986305;  // std dev = 0.893, 19.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=2 */
%   | | | else return 0.18826444907659418;  // std dev = 1.543, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), tweets(C, D) )
%   | then if ( follows(A, C) )
%   | | then if ( follows(A, E), follows(E, C) )
%   | | | then return 0.370359480992901;  // std dev = 0.964, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | | else return 0.4282335931723289;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.4165329671912311;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.4199138954380161;  // std dev = 0.018, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else if ( follows(F, A) )
%   | then if ( follows(G, F), recursion_accounttype(G, B) )
%   | | then if ( follows(A, G) )
%   | | | then return 0.3005268634652886;  // std dev = 0.820, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.6896874386005528;  // std dev = 0.096, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.11722527792114959;  // std dev = 0.337, 109.000 (wgt'ed) examples reached here.  /* #neg=109 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then return 0.15447752220638256;  // std dev = 0.953, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.32568923489273766;  // std dev = 0.493, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, A) )
%   | then return 0.33952036858180534;  // std dev = 0.074, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return 0.4934941416037848;  // std dev = 0.136, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(A, D), follows(D, E) )
%   | then if ( recursion_accounttype(E, B) )
%   | | then if ( follows(D, A), tweets(D, F) )
%   | | | then return 0.47978197337085754;  // std dev = 0.277, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.4027164993786478;  // std dev = 0.228, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.105713422711182;  // std dev = 0.101, 77.000 (wgt'ed) examples reached here.  /* #neg=77 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0.15325789471176995;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else if ( follows(A, H) )
%   | | | then return 0.019671884601142622;  // std dev = 1.639, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | | | else return -0.09548694059543515;  // std dev = 1.86e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C), tweets(A, D) )
%   | then if ( follows(E, A), follows(E, C) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.2767862370623288;  // std dev = 0.028, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.019361184254199415;  // std dev = 1.207, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | else return -0.07119161195839563;  // std dev = 0.794, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.25765637223474586;  // std dev = 0.088, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then return 0.37464059102193753;  // std dev = 0.128, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return -0.10163123193534096;  // std dev = 0.604, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
%   | | | else return -0.04049763204378908;  // std dev = 1.024, 34.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=4 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.07272827325526883;  // std dev = 1.028, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | | | else return 0.004829771392389137;  // std dev = 1.382, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.22836047099950288;  // std dev = 0.145, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( tweets(A, F) )
%   | | | then return -0.07909368384366303;  // std dev = 0.002, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
%   | | | else return -0.19427536318451835;  // std dev = 0.593, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( follows(D, G), recursion_accounttype(G, B) )
%   | | | then return 0.3800550448645556;  // std dev = 0.216, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.10171826821609424;  // std dev = 0.020, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.44515197394499606;  // std dev = 0.369, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.20613753881262564;  // std dev = 0.221, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else return 0.11938835304425219;  // std dev = 0.473, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.1907379312438663;  // std dev = 0.127, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   else if ( follows(A, D), follows(D, E) )
%   | then if ( follows(D, A), follows(E, A) )
%   | | then return -0.07326469526119425;  // std dev = 0.003, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
%   | | else if ( tweets(A, F), recursion_accounttype(E, B) )
%   | | | then return 0.2928126574650288;  // std dev = 0.207, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.08974832466978638;  // std dev = 0.906, 48.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=3 */
%   | else if ( tweets(A, G) )
%   | | then if ( follows(A, H) )
%   | | | then return -0.05179866991887434;  // std dev = 0.776, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return -0.0741502098673969;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.05942705307112004;  // std dev = 0.495, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(C, D), follows(A, E) )
%   | then if ( recursion_accounttype(E, B), follows(C, E) )
%   | | then return 0.16419089082816118;  // std dev = 0.064, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else if ( recursion_accounttype(E, B), tweets(A, D) )
%   | | | then return -0.138524101227985;  // std dev = 0.809, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.14311090357086215;  // std dev = 0.046, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.17485757089994905;  // std dev = 0.020, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H), follows(H, G) )
%   | | | then return 0.2372890211451145;  // std dev = 0.178, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.1902459111528262;  // std dev = 1.100, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return -0.07882620656102929;  // std dev = 0.209, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then return -0.024892769135319154;  // std dev = 0.138, 19.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=3 */
%   | | else return 0.045483544291416746;  // std dev = 0.495, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), tweets(C, D) )
%   then if ( tweets(E, D), recursion_accounttype(E, B) )
%   | then if ( follows(E, A) )
%   | | then return 0.1437729009864915;  // std dev = 0.133, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.19232433262845583;  // std dev = 0.137, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.2918124369555828;  // std dev = 0.108, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return -0.07023432584575237;  // std dev = 0.086, 91.000 (wgt'ed) examples reached here.  /* #neg=91 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.3021917809639795;  // std dev = 0.463, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return -0.08298263577427824;  // std dev = 0.013, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return -0.2032724884410266;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return -0.12056432863804468;  // std dev = 0.426, 12.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=3 */


Results
   AUC ROC   = 0.992823
   AUC PR    = 0.382678
   CLL	      = -0.116395
   Precision = 0.354592 at threshold = 0.5
   Recall    = 0.891026
   F1        = 0.507299


Total learning time: 10.947 seconds
Total inference time: 45.589 seconds
AUC ROC: 0.992823


Results scoring model
   AUC ROC   = 0.993162
   AUC PR    = 0.430083
   CLL	      = -0.118614
   Precision = 0.302632 at threshold = 0.5
   Recall    = 0.92
   F1        = 0.455446


Total scoring time: 16.147 seconds
Refined model CLL: -0.118614


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.992823
   AUC PR    = 0.382678
   CLL	      = -0.116395
   Precision = 0.354592 at threshold = 0.5
   Recall    = 0.891026
   F1        = 0.507299


Total learning time: 29.724999999999998 seconds
Total inference time: 45.589 seconds
AUC ROC: 0.992823
Total revision time: 29.724999999999998
Best scored revision CLL: -0.118614


Dataset: 7_yeast_twitter, Fold: 2, Type: Transfer (trRDN-B), Time: 00:50:15
{'AUC ROC': 0.992823, 'AUC PR': 0.382678, 'CLL': -0.116395, 'Precision': [0.354592, 0.5], 'Recall': 0.891026, 'F1': 0.507299, 'Learning time': 29.724999999999998, 'Inference time': 45.589, 'parameter_0.4': {'AUC ROC': 0.5, 'AUC PR': 0.006289, 'CLL': -0.386203, 'Precision': [nan, 0.5], 'Recall': 0.0, 'F1': nan, 'Learning time': 1.115, 'Inference time': 3.833}}


Amount of data: 0.6
******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(A, C), interaction(C, C).;true;true
0;true;interaction(C, A), phenotype(C, D).;false;true
0;true,false;interaction(E, A), enzyme(A, F).;true;true
0;true,false,true;complex(A, G), complex(C, H).;false;false
0;true,false,false;recursion_proteinclass(C, B).;false;false
0;false;location(A, I), phenotype(A, J).;true;false
0;false,true;location(K, I), recursion_proteinclass(K, B).;true;false
0;false,true,true;phenotype(K, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), complex(A, D).;true;true
1;true;interaction(E, C), recursion_proteinclass(E, B).;false;false
1;false;interaction(F, A), phenotype(A, G).;true;true
1;false,true;recursion_proteinclass(F, B).;false;true
1;false,true,false;interaction(H, F), recursion_proteinclass(H, B).;false;false
1;false,false;interaction(I, A), phenotype(I, J).;true;true
1;false,false,true;interaction(A, K), recursion_proteinclass(K, B).;false;false
1;false,false,false;interaction(A, L), phenotype(L, M).;false;false
2;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
2;true;complex(C, D).;false;false
2;false;interaction(A, E), interaction(E, A).;true;true
2;false,true;interaction(A, A).;false;true
2;false,true,false;enzyme(E, F), enzyme(A, F).;false;false
2;false,false;interaction(G, A), enzyme(G, H).;true;true
2;false,false,true;complex(G, I), complex(A, I).;false;false
2;false,false,false;interaction(A, J), recursion_proteinclass(J, B).;false;false
3;;proteinclass(A, B) :- complex(A, C), interaction(A, D).;true;true
3;true;interaction(D, E), recursion_proteinclass(E, B).;false;true
3;true,false;interaction(D, A).;false;false
3;false;interaction(F, A), enzyme(F, G).;true;true
3;false,true;interaction(H, F), recursion_proteinclass(H, B).;false;true
3;false,true,false;interaction(A, F).;false;false
3;false,false;interaction(A, A), location(A, I).;false;true
3;false,false,false;interaction(A, J), enzyme(J, K).;false;false
4;;proteinclass(A, B) :- phenotype(A, C), interaction(A, D).;true;true
4;true;interaction(D, E), interaction(E, F).;false;true
4;true,false;recursion_proteinclass(D, B).;false;true
4;true,false,false;enzyme(A, G), interaction(D, H).;false;false
4;false;interaction(I, A), recursion_proteinclass(I, B).;false;true
4;false,false;interaction(J, A), interaction(K, J).;true;true
4;false,false,true;recursion_proteinclass(K, B), location(J, L).;false;false
4;false,false,false;interaction(A, M), recursion_proteinclass(M, B).;false;false
5;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
5;true;enzyme(A, D), phenotype(C, E).;false;false
5;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
5;false,true;interaction(G, F), interaction(G, A).;false;true
5;false,true,false;phenotype(A, H), location(F, I).;false;false
5;false,false;interaction(A, J), complex(J, K).;true;true
5;false,false,true;interaction(J, L), recursion_proteinclass(L, B).;false;false
5;false,false,false;phenotype(A, M), location(A, N).;false;false
6;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
6;true;interaction(C, D), complex(D, E).;true;false
6;true,true;interaction(A, D).;true;false
6;true,true,true;interaction(D, C).;false;false
6;false;interaction(A, A).;false;true
6;false,false;interaction(A, F), enzyme(F, G).;true;true
6;false,false,true;phenotype(F, H), complex(F, I).;false;false
6;false,false,false;location(A, J).;false;false
7;;proteinclass(A, B) :- interaction(A, C), complex(C, D).;true;true
7;true;recursion_proteinclass(C, B).;false;true
7;true,false;interaction(C, E), recursion_proteinclass(E, B).;false;true
7;true,false,false;interaction(C, A).;false;false
7;false;interaction(F, A), recursion_proteinclass(F, B).;false;true
7;false,false;interaction(G, A), enzyme(G, H).;true;true
7;false,false,true;interaction(A, I), interaction(G, I).;false;false
7;false,false,false;location(A, J), enzyme(A, K).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;interaction(C, D), interaction(D, D).;false;false
8;false;interaction(A, E), enzyme(A, F).;true;true
8;false,true;interaction(E, G), recursion_proteinclass(G, B).;false;true
8;false,true,false;interaction(E, A).;false;false
8;false,false;interaction(A, H), location(A, I).;true;true
8;false,false,true;interaction(H, J), recursion_proteinclass(J, B).;false;false
8;false,false,false;enzyme(A, K).;false;false
9;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;false;true
9;false;interaction(D, A), interaction(A, D).;true;true
9;false,true;phenotype(A, E), phenotype(D, E).;true;true
9;false,true,true;complex(D, F).;false;false
9;false,true,false;interaction(D, D).;false;false
9;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
9;false,false,true;phenotype(G, H), location(G, I).;false;false
9;false,false,false;complex(A, J), interaction(K, A).;false;false


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(C, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), recursion_accounttype(A, E) )
%   | then if ( tweets(F, D) )
%   | | then if ( recursion_accounttype(F, E) )
%   | | | then return 0.1772978712697264;  // std dev = 6.391, 188.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=60 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.13592671287729013;  // std dev = 3.291, 54.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=15 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C) )
%   | then return 0.19211508080288514;  // std dev = 6.370, 177.000 (wgt'ed) examples reached here.  /* #neg=114 #pos=63 */
%   | else return -0.16483255066479505;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else if ( follows(E, A), recursion_accounttype(A, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, I), recursion_accounttype(I, J) )
%   | | | then return 0.09860110841494324;  // std dev = 2.975, 46.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=12 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then return 0.16245515324918733;  // std dev = 0.478, 178.000 (wgt'ed) examples reached here.  /* #neg=115 #pos=63 */
%   else if ( follows(A, D), follows(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, F) )
%   | | | then return 0.06377964272579684;  // std dev = 3.017, 50.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=12 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D) )
%   | then return 0.12863506868903207;  // std dev = 6.374, 181.000 (wgt'ed) examples reached here.  /* #neg=119 #pos=62 */
%   | else if ( follows(C, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.22481979669396096;  // std dev = 2.018, 17.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
%   else if ( follows(E, A) )
%   | then if ( follows(F, E) )
%   | | then return 0.15542279137663448;  // std dev = 1.936, 16.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=6 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(A, C), follows(A, D) )
%   then if ( follows(D, E), follows(E, F) )
%   | then return 0.1136292518485298;  // std dev = 6.338, 177.000 (wgt'ed) examples reached here.  /* #neg=115 #pos=62 */
%   | else if ( follows(D, G) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.21319672770442083;  // std dev = 1.974, 16.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=7 */
%   else if ( follows(H, A) )
%   | then return 0.08596716031833987;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( recursion_accounttype(C, D) )
%   | then return 0.08518319600503213;  // std dev = 6.726, 200.000 (wgt'ed) examples reached here.  /* #neg=131 #pos=69 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(E, A) )
%   | then if ( follows(F, E), follows(F, A) )
%   | | then return 0.0520732398348275;  // std dev = 2.026, 19.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=6 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D) )
%   | then if ( follows(A, D) )
%   | | then if ( follows(D, C) )
%   | | | then return 0.009278984679628052;  // std dev = 5.598, 153.000 (wgt'ed) examples reached here.  /* #neg=109 #pos=44 */
%   | | | else return 0.08672689190135628;  // std dev = 1.936, 17.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=6 */
%   | | else return 0.16647438225051817;  // std dev = 2.612, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | else return 0.18421391525809586;  // std dev = 1.929, 15.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=7 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return 0.1875875521913766;  // std dev = 1.797, 13.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D) )
%   | then return 0.036781698101317026;  // std dev = 6.484, 193.000 (wgt'ed) examples reached here.  /* #neg=131 #pos=62 */
%   | else if ( follows(C, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.030408199275664127;  // std dev = 2.124, 20.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=7 */
%   else if ( follows(E, A) )
%   | then return 0.0401454302132808;  // std dev = 1.970, 17.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=6 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), follows(D, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.04463413499627503;  // std dev = 6.742, 203.000 (wgt'ed) examples reached here.  /* #neg=134 #pos=69 */
%   else if ( follows(A, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F), tweets(A, G) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.005699884526372589;  // std dev = 0.465, 19.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=6 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then return 0.024616087149403054;  // std dev = 6.801, 209.000 (wgt'ed) examples reached here.  /* #neg=140 #pos=69 */
%   else if ( follows(D, A), follows(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A) )
%   | | then if ( recursion_accounttype(E, F), tweets(E, G) )
%   | | | then return 0.10832414153368099;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.5
   AUC PR    = 0.006289
   CLL	      = -0.3586
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.328 seconds
Total inference time: 3.835 seconds
AUC ROC: 0.5


Results scoring model
   AUC ROC   = 0.541045
   AUC PR    = 0.0089
   CLL	      = -0.37806
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total scoring time: 2.062 seconds
Parameter learned model CLL: -0.37806


Structure after Parameter Learning
[['accounttype(A, B)', {'': 'follows(A, C), follows(C, C)', 'false': 'tweets(A, D), recursion_accounttype(A, E)', 'false,true': 'tweets(F, D)', 'false,true,true': 'recursion_accounttype(F, E)'}, {'true': [0.0, 0, 0], 'false,true,true,true': [6.391, 128, 60], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 0, 0], 'false,false': [3.291, 39, 15]}], ['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C)', 'false': 'follows(E, A), recursion_accounttype(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, H)', 'false,false,false': 'follows(A, I), recursion_accounttype(I, J)'}, {'true,true': [6.37, 114, 63], 'true,false': [0.0, 1, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [2.975, 34, 12], 'false,false,false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(C, A)', 'false': 'follows(A, D), follows(D, A)', 'false,false': 'follows(E, A)', 'false,false,false': 'follows(A, F)'}, {'true': [0.478, 115, 63], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [3.017, 38, 12], 'false,false,false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D)', 'true,false': 'follows(C, A)', 'false': 'follows(E, A)', 'false,true': 'follows(F, E)'}, {'true,true': [6.374, 119, 62], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.018, 10, 7], 'false,true,true': [1.936, 10, 6], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'recursion_accounttype(A, C), follows(A, D)', 'true': 'follows(D, E), follows(E, F)', 'true,false': 'follows(D, G)', 'false': 'follows(H, A)'}, {'true,true': [6.338, 115, 62], 'true,false,true': [0.0, 0, 0], 'true,false,false': [1.974, 9, 7], 'false,true': [2.0, 12, 6], 'false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'recursion_accounttype(C, D)', 'false': 'follows(E, A)', 'false,true': 'follows(F, E), follows(F, A)'}, {'true,true': [6.726, 131, 69], 'true,false': [0.0, 0, 0], 'false,true,true': [2.026, 13, 6], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D)', 'true,true': 'follows(A, D)', 'true,true,true': 'follows(D, C)', 'false': 'follows(A, A)', 'false,false': 'follows(A, E)', 'false,false,false': 'tweets(A, F)'}, {'true,true,true,true': [5.598, 109, 44], 'true,true,true,false': [1.936, 11, 6], 'true,true,false': [2.612, 16, 12], 'true,false': [1.929, 8, 7], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [1.797, 7, 6], 'false,false,false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D)', 'true,false': 'follows(C, A)', 'false': 'follows(E, A)'}, {'true,true': [6.484, 131, 62], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.124, 13, 7], 'false,true': [1.97, 11, 6], 'false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), follows(D, D)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F), tweets(A, G)'}, {'true,true': [0.0, 0, 0], 'true,false': [6.742, 134, 69], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.465, 13, 6]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'false': 'follows(D, A), follows(A, D)', 'false,false': 'follows(E, A)', 'false,false,true': 'recursion_accounttype(E, F), tweets(E, G)'}, {'true': [6.801, 140, 69], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.852, 8, 6], 'false,false,true,false': [0.0, 0, 0], 'false,false,false': [0.0, 0, 0]}]]
[{'': [nan, 0.21386858821118795], 'false': [0.2172928927116345, 0.20061728395061676], 'false,true': [0.2172928927116345, nan], 'false,true,true': [0.2172928927116345, nan]}, {'': [0.22864839853174093, 0.19246347159821287], 'true': [0.22922440182265733, 0.0], 'false': [nan, 0.19246347159821287], 'false,false': [nan, 0.19246347159821287], 'false,false,false': [0.19246347159821287, nan]}, {'': [0.22838719841420996, 0.18210188314712306], 'false': [nan, 0.18210188314712306], 'false,false': [nan, 0.18210188314712306], 'false,false,false': [0.18210188314712306, nan]}, {'': [0.22646801530892194, 0.23437500000000006], 'false': [0.23437500000000006, nan], 'false,true': [0.23437500000000006, nan], 'true': [0.22443887846458038, 0.23961517362055698], 'true,false': [nan, 0.23961517362055698]}, {'': [0.2291092916309539, 0.22222222222222227], 'true': [0.22697248891142482, 0.2436558491356826], 'true,false': [nan, 0.2436558491356826], 'false': [0.22222222222222227, nan]}, {'': [0.22616772539575689, 0.2160664819944598], 'true': [0.22616772539575689, nan], 'false': [0.2160664819944598, nan], 'false,true': [0.2160664819944598, nan]}, {'': [0.2185882682814509, 0.24852071005917142], 'false': [nan, 0.24852071005917142], 'false,false': [nan, 0.24852071005917142], 'false,false,false': [0.24852071005917142, nan], 'true': [0.21485991667804946, 0.24797251142351628], 'true,true': [0.20696217177848167, 0.24363358010070527], 'true,true,true': [0.20485026821633925, 0.22057094333804178]}, {'': [0.21855521824611085, 0.22837370242214527], 'false': [0.22837370242214527, nan], 'true': [0.21781363739859333, 0.2256746661615335], 'true,false': [nan, 0.2256746661615335]}, {'': [0.22393483749807264, 0.21606648199445985], 'true': [nan, 0.2239348374980726], 'false': [nan, 0.21606648199445985], 'false,false': [nan, 0.21606648199445985]}, {'': [0.22133746485454014, 0.24489795918367355], 'false': [nan, 0.24489795918367355], 'false,false': [0.24489795918367355, nan], 'false,false,true': [0.24489795918367355, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
1;;accounttype(A, B) :- follows(C, A).;true;true
1;true;follows(D, C).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.8581489350995122;  // std dev = 1.46e-07, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(F, D) )
%   | | | then return 0.7470378239884012;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.14185106490048802;  // std dev = 0.000, 145.000 (wgt'ed) examples reached here.  /* #neg=145 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.0581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.24276431971489695;  // std dev = 1.754, 13.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=5 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.15814893509951225;  // std dev = 1.449, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | | | else return 0.19148226843284558;  // std dev = 1.414, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.6810118737494162;  // std dev = 0.192, 52.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=50 */
%   | | else if ( follows(A, F), follows(F, A) )
%   | | | then return -0.03793922731705869;  // std dev = 2.938, 126.000 (wgt'ed) examples reached here.  /* #neg=113 #pos=13 */
%   | | | else return -0.12544463852839136;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), follows(I, J) )
%   | | | then return 0.8309494730497411;  // std dev = 0.022, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.587786654782979;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return -0.16615880518857834;  // std dev = 0.038, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else if ( follows(A, K), follows(K, L) )
%   | | then return 9.448996270433607E-4;  // std dev = 0.904, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else return 0.10593276395882106;  // std dev = 0.445, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(D, C) )
%   | then return 0.5648425723746445;  // std dev = 1.63e-07, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | else if ( follows(A, C), tweets(C, E) )
%   | | then return -0.10182409429202184;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.5648425723746449;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(F, A), tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.739002614847857;  // std dev = 0.032, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return -0.11979604712579327;  // std dev = 0.038, 120.000 (wgt'ed) examples reached here.  /* #neg=120 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.7296008827908498;  // std dev = 0.025, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.1552673436767201;  // std dev = 1.800, 20.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=7 */
%   | | | else return 0.01782006134757573;  // std dev = 2.108, 34.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=6 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), follows(A, D) )
%   | then return 0.3975520892276891;  // std dev = 0.162, 37.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=36 */
%   | else return 0.4363723927459767;  // std dev = 0.159, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), follows(F, A) )
%   | | then return -0.11053330144025172;  // std dev = 0.060, 81.000 (wgt'ed) examples reached here.  /* #neg=81 */
%   | | else if ( follows(E, G), recursion_accounttype(G, B) )
%   | | | then return 0.5270847966383626;  // std dev = 1.026, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | | else return -0.11215073365038065;  // std dev = 0.050, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.5493337039038608;  // std dev = 0.902, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return -0.16581502802577508;  // std dev = 0.025, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.010091030502296797;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | | else return 0.19029121311993874;  // std dev = 1.369, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.3327724133969211;  // std dev = 0.153, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | else return 0.2243074863351672;  // std dev = 0.277, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( tweets(A, G), follows(A, F) )
%   | | | then return 0.1754071024290279;  // std dev = 0.688, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.47644220271945953;  // std dev = 0.249, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return -0.09962024243249097;  // std dev = 0.072, 137.000 (wgt'ed) examples reached here.  /* #neg=137 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.5237703792120337;  // std dev = 0.162, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.1392378588002797;  // std dev = 0.031, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.1580392400779915;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.03490344555078418;  // std dev = 1.500, 12.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=3 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, C) )
%   | then if ( follows(A, E), follows(E, C) )
%   | | then if ( follows(C, E), follows(E, A) )
%   | | | then return 0.18532283742884006;  // std dev = 1.359, 26.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=24 */
%   | | | else return -0.022133965564702634;  // std dev = 0.697, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.2787011957546624;  // std dev = 0.131, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.26668456139329694;  // std dev = 0.053, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then if ( tweets(A, G), tweets(F, G) )
%   | | then return 0.1544666944944863;  // std dev = 0.679, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.35935883569717725;  // std dev = 0.068, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(H, A) )
%   | | then return -0.06503886178478821;  // std dev = 0.123, 123.000 (wgt'ed) examples reached here.  /* #neg=115 #pos=8 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return -0.0041105136992866985;  // std dev = 1.359, 19.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | | | else return 0.08018053977073793;  // std dev = 1.668, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(D, C) )
%   | then return 0.20254072222226727;  // std dev = 0.149, 44.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=43 */
%   | else if ( tweets(A, E) )
%   | | then return 0.2322634110963115;  // std dev = 0.115, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.058879215144377994;  // std dev = 0.698, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), follows(G, A) )
%   | | then return -0.09334019413391022;  // std dev = 0.054, 98.000 (wgt'ed) examples reached here.  /* #neg=98 */
%   | | else return -0.004819108712483396;  // std dev = 0.229, 56.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=13 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( follows(A, I) )
%   | | | then return -0.049904914054809305;  // std dev = 0.350, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.026889295189712104;  // std dev = 1.225, 17.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=5 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.15202809705177406;  // std dev = 0.697, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return 0.1398380538628488;  // std dev = 1.369, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.1938527221149826;  // std dev = 0.141, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then return -0.07860837624626817;  // std dev = 0.040, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
%   | | else if ( follows(D, F), recursion_accounttype(F, B) )
%   | | | then return 0.3581515656107569;  // std dev = 0.297, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return -0.0859036029307571;  // std dev = 0.036, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | else if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.24190220532769047;  // std dev = 1.088, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return -0.1419213120225553;  // std dev = 0.041, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.13034870765479117;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.038763488149158046;  // std dev = 1.449, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1766775059844225;  // std dev = 0.204, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   else if ( follows(D, A), follows(A, D) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, A) )
%   | | | then return -0.17852895874809857;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.2991350516997942;  // std dev = 0.243, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return -0.07606140296623291;  // std dev = 0.059, 146.000 (wgt'ed) examples reached here.  /* #neg=146 */
%   | else if ( tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.23264039130993452;  // std dev = 0.349, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.09353826744923362;  // std dev = 0.141, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return 0.09778866702623316;  // std dev = 0.828, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.15978494178097996;  // std dev = 1.309, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), tweets(C, D) )
%   | then return 0.14220246464083836;  // std dev = 0.112, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else if ( tweets(A, E), tweets(C, F) )
%   | | then return -0.1737993131311941;  // std dev = 1.122, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else return 0.1443174013655204;  // std dev = 0.060, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), follows(H, A) )
%   | | then return -0.06896614045492773;  // std dev = 0.041, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
%   | | else return 0.01070514481930002;  // std dev = 0.145, 46.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=13 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.3382158466086354;  // std dev = 0.464, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.12211928679818682;  // std dev = 0.125, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.03276329151516638;  // std dev = 0.570, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return -0.028596262773312262;  // std dev = 1.477, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */


Results
   AUC ROC   = 0.991291
   AUC PR    = 0.377042
   CLL	      = -0.123064
   Precision = 0.357333 at threshold = 0.5
   Recall    = 0.858974
   F1        = 0.504708


Total learning time: 10.407 seconds
Total inference time: 30.062 seconds
AUC ROC: 0.991291


Results scoring model
   AUC ROC   = 0.992662
   AUC PR    = 0.413623
   CLL	      = -0.117202
   Precision = 0.325688 at threshold = 0.5
   Recall    = 0.946667
   F1        = 0.484642


Total scoring time: 14.456 seconds
Refined model CLL: -0.117202


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.991291
   AUC PR    = 0.377042
   CLL	      = -0.123064
   Precision = 0.357333 at threshold = 0.5
   Recall    = 0.858974
   F1        = 0.504708


Total learning time: 28.253 seconds
Total inference time: 30.062 seconds
AUC ROC: 0.991291
Total revision time: 28.253
Best scored revision CLL: -0.117202


Dataset: 7_yeast_twitter, Fold: 2, Type: Transfer (trRDN-B), Time: 00:51:18
{'AUC ROC': 0.991291, 'AUC PR': 0.377042, 'CLL': -0.123064, 'Precision': [0.357333, 0.5], 'Recall': 0.858974, 'F1': 0.504708, 'Learning time': 28.253, 'Inference time': 30.062, 'parameter_0.6': {'AUC ROC': 0.5, 'AUC PR': 0.006289, 'CLL': -0.3586, 'Precision': [nan, 0.5], 'Recall': 0.0, 'F1': nan, 'Learning time': 1.328, 'Inference time': 3.835}}


Amount of data: 0.8
******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(A, C), interaction(C, C).;true;true
0;true;interaction(C, A), phenotype(C, D).;false;true
0;true,false;interaction(E, A), enzyme(A, F).;true;true
0;true,false,true;complex(A, G), complex(C, H).;false;false
0;true,false,false;recursion_proteinclass(C, B).;false;false
0;false;location(A, I), phenotype(A, J).;true;false
0;false,true;location(K, I), recursion_proteinclass(K, B).;true;false
0;false,true,true;phenotype(K, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), complex(A, D).;true;true
1;true;interaction(E, C), recursion_proteinclass(E, B).;false;false
1;false;interaction(F, A), phenotype(A, G).;true;true
1;false,true;recursion_proteinclass(F, B).;false;true
1;false,true,false;interaction(H, F), recursion_proteinclass(H, B).;false;false
1;false,false;interaction(I, A), phenotype(I, J).;true;true
1;false,false,true;interaction(A, K), recursion_proteinclass(K, B).;false;false
1;false,false,false;interaction(A, L), phenotype(L, M).;false;false
2;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
2;true;complex(C, D).;false;false
2;false;interaction(A, E), interaction(E, A).;true;true
2;false,true;interaction(A, A).;false;true
2;false,true,false;enzyme(E, F), enzyme(A, F).;false;false
2;false,false;interaction(G, A), enzyme(G, H).;true;true
2;false,false,true;complex(G, I), complex(A, I).;false;false
2;false,false,false;interaction(A, J), recursion_proteinclass(J, B).;false;false
3;;proteinclass(A, B) :- complex(A, C), interaction(A, D).;true;true
3;true;interaction(D, E), recursion_proteinclass(E, B).;false;true
3;true,false;interaction(D, A).;false;false
3;false;interaction(F, A), enzyme(F, G).;true;true
3;false,true;interaction(H, F), recursion_proteinclass(H, B).;false;true
3;false,true,false;interaction(A, F).;false;false
3;false,false;interaction(A, A), location(A, I).;false;true
3;false,false,false;interaction(A, J), enzyme(J, K).;false;false
4;;proteinclass(A, B) :- phenotype(A, C), interaction(A, D).;true;true
4;true;interaction(D, E), interaction(E, F).;false;true
4;true,false;recursion_proteinclass(D, B).;false;true
4;true,false,false;enzyme(A, G), interaction(D, H).;false;false
4;false;interaction(I, A), recursion_proteinclass(I, B).;false;true
4;false,false;interaction(J, A), interaction(K, J).;true;true
4;false,false,true;recursion_proteinclass(K, B), location(J, L).;false;false
4;false,false,false;interaction(A, M), recursion_proteinclass(M, B).;false;false
5;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
5;true;enzyme(A, D), phenotype(C, E).;false;false
5;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
5;false,true;interaction(G, F), interaction(G, A).;false;true
5;false,true,false;phenotype(A, H), location(F, I).;false;false
5;false,false;interaction(A, J), complex(J, K).;true;true
5;false,false,true;interaction(J, L), recursion_proteinclass(L, B).;false;false
5;false,false,false;phenotype(A, M), location(A, N).;false;false
6;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
6;true;interaction(C, D), complex(D, E).;true;false
6;true,true;interaction(A, D).;true;false
6;true,true,true;interaction(D, C).;false;false
6;false;interaction(A, A).;false;true
6;false,false;interaction(A, F), enzyme(F, G).;true;true
6;false,false,true;phenotype(F, H), complex(F, I).;false;false
6;false,false,false;location(A, J).;false;false
7;;proteinclass(A, B) :- interaction(A, C), complex(C, D).;true;true
7;true;recursion_proteinclass(C, B).;false;true
7;true,false;interaction(C, E), recursion_proteinclass(E, B).;false;true
7;true,false,false;interaction(C, A).;false;false
7;false;interaction(F, A), recursion_proteinclass(F, B).;false;true
7;false,false;interaction(G, A), enzyme(G, H).;true;true
7;false,false,true;interaction(A, I), interaction(G, I).;false;false
7;false,false,false;location(A, J), enzyme(A, K).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;interaction(C, D), interaction(D, D).;false;false
8;false;interaction(A, E), enzyme(A, F).;true;true
8;false,true;interaction(E, G), recursion_proteinclass(G, B).;false;true
8;false,true,false;interaction(E, A).;false;false
8;false,false;interaction(A, H), location(A, I).;true;true
8;false,false,true;interaction(H, J), recursion_proteinclass(J, B).;false;false
8;false,false,false;enzyme(A, K).;false;false
9;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;false;true
9;false;interaction(D, A), interaction(A, D).;true;true
9;false,true;phenotype(A, E), phenotype(D, E).;true;true
9;false,true,true;complex(D, F).;false;false
9;false,true,false;interaction(D, D).;false;false
9;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
9;false,false,true;phenotype(G, H), location(G, I).;false;false
9;false,false,false;complex(A, J), interaction(K, A).;false;false


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(C, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), recursion_accounttype(A, E) )
%   | then if ( tweets(F, D) )
%   | | then if ( recursion_accounttype(F, E) )
%   | | | then return 0.20926004621062386;  // std dev = 7.160, 225.000 (wgt'ed) examples reached here.  /* #neg=146 #pos=79 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.12064893509951202;  // std dev = 3.935, 80.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=21 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C) )
%   | then return 0.17589509931908154;  // std dev = 7.383, 242.000 (wgt'ed) examples reached here.  /* #neg=159 #pos=83 */
%   | else return 0.330720183911688;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(A, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, I), recursion_accounttype(I, J) )
%   | | | then return 0.1374006813818316;  // std dev = 3.345, 53.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=16 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then return 0.15642055294475893;  // std dev = 0.477, 240.000 (wgt'ed) examples reached here.  /* #neg=156 #pos=84 */
%   else if ( follows(A, D), follows(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, F) )
%   | | | then return 0.11864212848623622;  // std dev = 3.340, 53.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=16 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D) )
%   | then return 0.11877371953835668;  // std dev = 7.422, 247.000 (wgt'ed) examples reached here.  /* #neg=164 #pos=83 */
%   | else if ( follows(C, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.10804386721922939;  // std dev = 2.493, 29.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=9 */
%   else if ( follows(E, A) )
%   | then if ( follows(F, E) )
%   | | then return 0.07505103710518429;  // std dev = 2.373, 27.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=8 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(A, C), follows(A, D) )
%   then if ( follows(D, E), follows(E, F) )
%   | then return 0.0996143655172933;  // std dev = 7.411, 246.000 (wgt'ed) examples reached here.  /* #neg=163 #pos=83 */
%   | else if ( follows(D, G) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.20851656338749955;  // std dev = 2.269, 21.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=9 */
%   else if ( follows(H, A) )
%   | then return 0.11337987047791125;  // std dev = 2.284, 23.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( recursion_accounttype(C, D) )
%   | then return 0.09985492423463234;  // std dev = 7.692, 258.000 (wgt'ed) examples reached here.  /* #neg=166 #pos=92 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(E, A) )
%   | then if ( follows(F, E), follows(F, A) )
%   | | then return 0.12554804048834486;  // std dev = 2.225, 21.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=8 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D) )
%   | then if ( follows(A, D) )
%   | | then if ( follows(D, C) )
%   | | | then return 0.03741003194508159;  // std dev = 6.406, 191.000 (wgt'ed) examples reached here.  /* #neg=131 #pos=60 */
%   | | | else return -0.03696169305126159;  // std dev = 2.460, 33.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=8 */
%   | | else return 0.12712499374681333;  // std dev = 3.007, 38.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=15 */
%   | else return 0.022498180265684547;  // std dev = 2.512, 30.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=9 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return 0.1009491038546915;  // std dev = 2.225, 21.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=8 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D) )
%   | then return 0.06511605017534697;  // std dev = 7.337, 237.000 (wgt'ed) examples reached here.  /* #neg=154 #pos=83 */
%   | else if ( follows(C, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.12748524134549574;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=9 */
%   else if ( follows(E, A) )
%   | then return 0.006893362933678781;  // std dev = 2.353, 26.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), follows(D, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.02900580210732148;  // std dev = 7.848, 281.000 (wgt'ed) examples reached here.  /* #neg=189 #pos=92 */
%   else if ( follows(A, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F), tweets(A, G) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.23108259599017433;  // std dev = 0.499, 15.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=8 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then return 0.011544456143505355;  // std dev = 7.921, 290.000 (wgt'ed) examples reached here.  /* #neg=198 #pos=92 */
%   else if ( follows(D, A), follows(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A) )
%   | | then if ( recursion_accounttype(E, F), tweets(E, G) )
%   | | | then return 0.0469182438503891;  // std dev = 2.191, 20.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=8 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.5
   AUC PR    = 0.006289
   CLL	      = -0.367205
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.461 seconds
Total inference time: 3.821 seconds
AUC ROC: 0.5


Results scoring model
   AUC ROC   = 0.524114
   AUC PR    = 0.008431
   CLL	      = -0.37945
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total scoring time: 2.511 seconds
Parameter learned model CLL: -0.37945


Structure after Parameter Learning
[['accounttype(A, B)', {'': 'follows(A, C), follows(C, C)', 'false': 'tweets(A, D), recursion_accounttype(A, E)', 'false,true': 'tweets(F, D)', 'false,true,true': 'recursion_accounttype(F, E)'}, {'true': [0.0, 0, 0], 'false,true,true,true': [7.16, 146, 79], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 0, 0], 'false,false': [3.935, 59, 21]}], ['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C)', 'false': 'follows(E, A), recursion_accounttype(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, H)', 'false,false,false': 'follows(A, I), recursion_accounttype(I, J)'}, {'true,true': [7.383, 159, 83], 'true,false': [0.707, 1, 1], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [3.345, 37, 16], 'false,false,false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(C, A)', 'false': 'follows(A, D), follows(D, A)', 'false,false': 'follows(E, A)', 'false,false,false': 'follows(A, F)'}, {'true': [0.477, 156, 84], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [3.34, 37, 16], 'false,false,false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D)', 'true,false': 'follows(C, A)', 'false': 'follows(E, A)', 'false,true': 'follows(F, E)'}, {'true,true': [7.422, 164, 83], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.493, 20, 9], 'false,true,true': [2.373, 19, 8], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'recursion_accounttype(A, C), follows(A, D)', 'true': 'follows(D, E), follows(E, F)', 'true,false': 'follows(D, G)', 'false': 'follows(H, A)'}, {'true,true': [7.411, 163, 83], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.269, 12, 9], 'false,true': [2.284, 15, 8], 'false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'recursion_accounttype(C, D)', 'false': 'follows(E, A)', 'false,true': 'follows(F, E), follows(F, A)'}, {'true,true': [7.692, 166, 92], 'true,false': [0.0, 0, 0], 'false,true,true': [2.225, 13, 8], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D)', 'true,true': 'follows(A, D)', 'true,true,true': 'follows(D, C)', 'false': 'follows(A, A)', 'false,false': 'follows(A, E)', 'false,false,false': 'tweets(A, F)'}, {'true,true,true,true': [6.406, 131, 60], 'true,true,true,false': [2.46, 25, 8], 'true,true,false': [3.007, 23, 15], 'true,false': [2.512, 21, 9], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [2.225, 13, 8], 'false,false,false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D)', 'true,false': 'follows(C, A)', 'false': 'follows(E, A)'}, {'true,true': [7.337, 154, 83], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.306, 13, 9], 'false,true': [2.353, 18, 8], 'false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), follows(D, D)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F), tweets(A, G)'}, {'true,true': [0.0, 0, 0], 'true,false': [7.848, 189, 92], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.499, 7, 8]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'false': 'follows(D, A), follows(A, D)', 'false,false': 'follows(E, A)', 'false,false,true': 'recursion_accounttype(E, F), tweets(E, G)'}, {'true': [7.921, 198, 92], 'false,true': [0.0, 0, 0], 'false,false,true,true': [2.191, 12, 8], 'false,false,true,false': [0.0, 0, 0], 'false,false,false': [0.0, 0, 0]}]]
[{'': [nan, 0.22037086804622527], 'false': [0.22783209876543248, 0.1935937500000003], 'false,true': [0.22783209876543248, nan], 'false,true,true': [0.22783209876543248, nan]}, {'': [0.2256536039345918, 0.21108766442217247], 'true': [0.22525591202664633, 0.25], 'false': [nan, 0.21108766442217247], 'false,false': [nan, 0.21108766442217247], 'false,false,false': [0.21108766442217247, nan]}, {'': [0.2275841196144334, 0.21052151516784887], 'false': [nan, 0.21052151516784887], 'false,false': [nan, 0.21052151516784887], 'false,false,false': [0.21052151516784887, nan]}, {'': [0.22213224437914206, 0.20850480109739397], 'true': [0.22303073079429275, 0.21437658593894995], 'true,false': [nan, 0.21437658593894995], 'false': [0.20850480109739397, nan], 'false,true': [0.20850480109739397, nan]}, {'': [0.2258317875776097, 0.22684310018903608], 'false': [0.22684310018903608, nan], 'true': [0.2232476615800302, 0.2451760736385807], 'true,false': [nan, 0.2451760736385807]}, {'': [0.2293289684089291, 0.2358276643990928], 'false': [0.2358276643990928, nan], 'false,true': [0.2358276643990928, nan], 'true': [0.2293289684089291, nan]}, {'': [0.2155341577492446, 0.2358276643990931], 'false': [nan, 0.2358276643990931], 'false,false': [nan, 0.2358276643990931], 'false,false,false': [0.2358276643990931, nan], 'true': [0.21610017964948786, 0.21028193342645343], 'true,true': [0.21092741168795964, 0.23792745850041958], 'true,true,true': [0.21487987664744657, 0.18333472754234448]}, {'': [0.22870376076157622, 0.21301775147928997], 'true': [0.22716243328081467, 0.24174856291846547], 'true,false': [nan, 0.24174856291846547], 'false': [0.21301775147928997, nan]}, {'': [0.21917443993280913, 0.24888888888888874], 'false': [nan, 0.24888888888888874], 'false,false': [nan, 0.24888888888888874], 'true': [nan, 0.2191744399328092]}, {'': [0.2163454042598688, 0.24], 'false': [nan, 0.24], 'false,false': [0.24, nan], 'false,false,true': [0.24, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;accounttype(A, B) :- follows(A, C), follows(C, C).;true;true
0;false;tweets(A, D), recursion_accounttype(A, E).;true;true
0;false,true;tweets(F, D).;true;true
0;false,true,true;recursion_accounttype(F, E).;true;true
1;;accounttype(A, B) :- follows(C, A).;true;true
1;true;follows(D, C).;true;true
1;false;follows(E, A), recursion_accounttype(A, F).;true;true
1;false,false;follows(G, A), recursion_accounttype(G, H).;true;true
1;false,false,false;follows(A, I), recursion_accounttype(I, J).;true;true
2;;accounttype(A, B) :- follows(C, A).;true;true
2;false;follows(A, D), follows(D, A).;true;true
2;false,false;follows(E, A).;true;true
2;false,false,false;follows(A, F).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(C, D).;true;true
3;true,false;follows(C, A).;true;true
3;false;follows(E, A).;true;true
3;false,true;follows(F, E).;true;true
4;;accounttype(A, B) :- recursion_accounttype(A, C), follows(A, D).;true;true
4;true;follows(D, E), follows(E, F).;true;true
4;true,false;follows(D, G).;true;true
4;false;follows(H, A).;true;true
5;;accounttype(A, B) :- follows(A, C).;true;true
5;true;recursion_accounttype(C, D).;true;true
5;false;follows(E, A).;true;true
5;false,true;follows(F, E), follows(F, A).;true;true
6;;accounttype(A, B) :- follows(A, C).;true;true
6;true;follows(C, D).;true;true
6;true,true;follows(A, D).;true;true
6;true,true,true;follows(D, C).;true;true
6;false;follows(A, A).;true;true
6;false,false;follows(A, E).;true;true
6;false,false,false;tweets(A, F).;true;true
7;;accounttype(A, B) :- follows(A, C).;true;true
7;true;follows(C, D).;true;true
7;true,false;follows(C, A).;true;true
7;false;follows(E, A).;true;true
8;;accounttype(A, B) :- follows(A, C).;true;true
8;true;follows(C, D), follows(D, D).;true;true
8;false;follows(A, E).;true;true
8;false,false;follows(A, F), tweets(A, G).;true;true
9;;accounttype(A, B) :- follows(A, C).;true;true
9;false;follows(D, A), follows(A, D).;true;true
9;false,false;follows(E, A).;true;true
9;false,false,true;recursion_accounttype(E, F), tweets(E, G).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(C, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), recursion_accounttype(A, E) )
%   | then if ( tweets(F, D) )
%   | | then if ( recursion_accounttype(F, E) )
%   | | | then return 0.19720472909092912;  // std dev = 7.226, 233.000 (wgt'ed) examples reached here.  /* #neg=154 #pos=79 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( follows(H, A) )
%   | | | then return 0.00966408661466381;  // std dev = 2.060, 33.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=5 */
%   | | | else return 0.29564893509951234;  // std dev = 1.984, 16.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=7 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.8148648406481706;  // std dev = 0.991, 57.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=56 */
%   | | | else return 0.7194734122109543;  // std dev = 2.98e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.8405952853795197;  // std dev = 0.028, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.09521575211434234;  // std dev = 3.353, 177.000 (wgt'ed) examples reached here.  /* #neg=165 #pos=12 */
%   | else return 0.832408700297294;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(H, A), recursion_accounttype(A, I) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(J, A), recursion_accounttype(J, K) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, L), recursion_accounttype(L, M) )
%   | | | then return 0.10313439566462576;  // std dev = 3.399, 58.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=16 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, D), follows(E, A) )
%   | | then return 0.6559460431669938;  // std dev = 0.136, 57.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=56 */
%   | | else return 0.5601282990244723;  // std dev = 0.282, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else if ( tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.7154734985427089;  // std dev = 1.107, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | | else return -0.15581025086943065;  // std dev = 0.161, 149.000 (wgt'ed) examples reached here.  /* #neg=149 */
%   | | else return 0.025101869236346313;  // std dev = 0.352, 30.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=5 */
%   else if ( follows(A, H), follows(H, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(I, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, J) )
%   | | | then return 0.10264957977400935;  // std dev = 3.365, 55.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=16 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.4842410753885416;  // std dev = 0.237, 62.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=59 */
%   | | else return -0.04367688771533026;  // std dev = 0.275, 205.000 (wgt'ed) examples reached here.  /* #neg=181 #pos=24 */
%   | else if ( follows(C, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return 0.14878758583740528;  // std dev = 1.500, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | | | else return 0.17020911238972983;  // std dev = 1.754, 13.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=5 */
%   else if ( follows(G, A) )
%   | then if ( follows(H, G) )
%   | | then if ( follows(I, A), recursion_accounttype(I, B) )
%   | | | then return 0.5329482810665737;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.13542485964707704;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(A, C), follows(A, D) )
%   then if ( follows(D, E), follows(E, F) )
%   | then if ( follows(G, A), follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.4427968151663238;  // std dev = 1.948, 73.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=71 */
%   | | | else return -0.13022367814414024;  // std dev = 0.004, 156.000 (wgt'ed) examples reached here.  /* #neg=156 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.5628490847017039;  // std dev = 0.303, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.14208187794698374;  // std dev = 2.113, 22.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=8 */
%   | else if ( follows(D, J) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, K) )
%   | | | then return 0.2448361178696027;  // std dev = 1.342, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | | else return 0.14015112690932613;  // std dev = 1.754, 13.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=5 */
%   else if ( follows(L, A) )
%   | then return 0.06926969265190729;  // std dev = 0.251, 22.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( recursion_accounttype(C, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.3002818318123696;  // std dev = 0.248, 51.000 (wgt'ed) examples reached here.  /* #pos=51 */
%   | | | else return 0.41108394680845006;  // std dev = 0.194, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( follows(G, A) )
%   | | | then return -0.05242063079797673;  // std dev = 2.987, 168.000 (wgt'ed) examples reached here.  /* #neg=150 #pos=18 */
%   | | | else return 0.12306787768738156;  // std dev = 3.080, 43.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=16 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(H, A) )
%   | then if ( follows(I, H), follows(I, A) )
%   | | then if ( follows(J, A), recursion_accounttype(J, B) )
%   | | | then return 0.3845609582777744;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.1278641934890436;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D) )
%   | then if ( follows(A, D) )
%   | | then if ( follows(D, C) )
%   | | | then return 0.02514173841638833;  // std dev = 3.137, 181.000 (wgt'ed) examples reached here.  /* #neg=121 #pos=60 */
%   | | | else return 0.015377473665103869;  // std dev = 0.978, 24.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=8 */
%   | | else if ( follows(E, A), recursion_accounttype(E, B) )
%   | | | then return 0.2481459337992632;  // std dev = 0.094, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.11534433775722702;  // std dev = 2.472, 35.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=11 */
%   | else if ( tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.6200775880011241;  // std dev = 0.301, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.2609514076240956;  // std dev = 0.135, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.20373321357753946;  // std dev = 0.500, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.050808771151042265;  // std dev = 0.202, 20.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F), tweets(E, G) )
%   | | | then return 0.24206044083295505;  // std dev = 1.075, 48.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=47 */
%   | | | else return 0.022022328782546015;  // std dev = 1.621, 16.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=12 */
%   | | else if ( tweets(A, H) )
%   | | | then return -0.06881341300105295;  // std dev = 2.980, 177.000 (wgt'ed) examples reached here.  /* #neg=161 #pos=16 */
%   | | | else return 0.010356773880173642;  // std dev = 1.967, 38.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=8 */
%   | else if ( follows(C, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, I) )
%   | | | then return -0.04329950383239917;  // std dev = 1.246, 17.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=4 */
%   | | | else return 0.21513165750913385;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=5 */
%   else if ( follows(J, A) )
%   | then return 0.02219475509902782;  // std dev = 0.194, 23.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), follows(D, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.2005078534736616;  // std dev = 0.157, 51.000 (wgt'ed) examples reached here.  /* #pos=51 */
%   | | | else return 0.29658304426646426;  // std dev = 0.203, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.2461257521477467;  // std dev = 1.114, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return -0.05842762530716922;  // std dev = 4.132, 242.000 (wgt'ed) examples reached here.  /* #neg=216 #pos=26 */
%   else if ( follows(A, H) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, I), tweets(A, J) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(K, A), recursion_accounttype(K, B) )
%   | | | then return 0.2833716515816658;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.12187028204476123;  // std dev = 5.27e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(D, E) )
%   | | | then return 0.14390085270125522;  // std dev = 0.987, 38.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=37 */
%   | | | else return 0.04947178866166481;  // std dev = 1.291, 16.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=14 */
%   | | else return 0.24007549427506655;  // std dev = 0.068, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(F, A) )
%   | | then if ( follows(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.4134345140819223;  // std dev = 2.048, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | | else return -0.10669470421643391;  // std dev = 0.766, 168.000 (wgt'ed) examples reached here.  /* #neg=167 #pos=1 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.09426459897568888;  // std dev = 2.081, 24.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=9 */
%   | | | else return 4.2561041912098964E-4;  // std dev = 2.194, 19.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=7 */
%   else if ( follows(I, A), follows(A, I) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.0500704624280898;  // std dev = 0.169, 17.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=8 */


Results
   AUC ROC   = 0.952709
   AUC PR    = 0.291003
   CLL	      = -0.173838
   Precision = 0.313291 at threshold = 0.5
   Recall    = 0.634615
   F1        = 0.419492


Total learning time: 101.12899999999999 seconds
Total inference time: 443.772 seconds
AUC ROC: 0.952709


Results scoring model
   AUC ROC   = 0.983465
   AUC PR    = 0.295756
   CLL	      = -0.164617
   Precision = 0.304527 at threshold = 0.5
   Recall    = 0.74
   F1        = 0.431487


Total scoring time: 456.25 seconds
Refined model CLL: -0.164617


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.952709
   AUC PR    = 0.291003
   CLL	      = -0.173838
   Precision = 0.313291 at threshold = 0.5
   Recall    = 0.634615
   F1        = 0.419492


Total learning time: 561.351 seconds
Total inference time: 443.772 seconds
AUC ROC: 0.952709
Total revision time: 561.351
Best scored revision CLL: -0.164617


Dataset: 7_yeast_twitter, Fold: 2, Type: Transfer (trRDN-B), Time: 01:08:08
{'AUC ROC': 0.952709, 'AUC PR': 0.291003, 'CLL': -0.173838, 'Precision': [0.313291, 0.5], 'Recall': 0.634615, 'F1': 0.419492, 'Learning time': 561.351, 'Inference time': 443.772, 'parameter_0.8': {'AUC ROC': 0.5, 'AUC PR': 0.006289, 'CLL': -0.367205, 'Precision': [nan, 0.5], 'Recall': 0.0, 'F1': nan, 'Learning time': 1.461, 'Inference time': 3.821}}


Amount of data: 1.0
******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(A, C), interaction(C, C).;true;true
0;true;interaction(C, A), phenotype(C, D).;false;true
0;true,false;interaction(E, A), enzyme(A, F).;true;true
0;true,false,true;complex(A, G), complex(C, H).;false;false
0;true,false,false;recursion_proteinclass(C, B).;false;false
0;false;location(A, I), phenotype(A, J).;true;false
0;false,true;location(K, I), recursion_proteinclass(K, B).;true;false
0;false,true,true;phenotype(K, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), complex(A, D).;true;true
1;true;interaction(E, C), recursion_proteinclass(E, B).;false;false
1;false;interaction(F, A), phenotype(A, G).;true;true
1;false,true;recursion_proteinclass(F, B).;false;true
1;false,true,false;interaction(H, F), recursion_proteinclass(H, B).;false;false
1;false,false;interaction(I, A), phenotype(I, J).;true;true
1;false,false,true;interaction(A, K), recursion_proteinclass(K, B).;false;false
1;false,false,false;interaction(A, L), phenotype(L, M).;false;false
2;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
2;true;complex(C, D).;false;false
2;false;interaction(A, E), interaction(E, A).;true;true
2;false,true;interaction(A, A).;false;true
2;false,true,false;enzyme(E, F), enzyme(A, F).;false;false
2;false,false;interaction(G, A), enzyme(G, H).;true;true
2;false,false,true;complex(G, I), complex(A, I).;false;false
2;false,false,false;interaction(A, J), recursion_proteinclass(J, B).;false;false
3;;proteinclass(A, B) :- complex(A, C), interaction(A, D).;true;true
3;true;interaction(D, E), recursion_proteinclass(E, B).;false;true
3;true,false;interaction(D, A).;false;false
3;false;interaction(F, A), enzyme(F, G).;true;true
3;false,true;interaction(H, F), recursion_proteinclass(H, B).;false;true
3;false,true,false;interaction(A, F).;false;false
3;false,false;interaction(A, A), location(A, I).;false;true
3;false,false,false;interaction(A, J), enzyme(J, K).;false;false
4;;proteinclass(A, B) :- phenotype(A, C), interaction(A, D).;true;true
4;true;interaction(D, E), interaction(E, F).;false;true
4;true,false;recursion_proteinclass(D, B).;false;true
4;true,false,false;enzyme(A, G), interaction(D, H).;false;false
4;false;interaction(I, A), recursion_proteinclass(I, B).;false;true
4;false,false;interaction(J, A), interaction(K, J).;true;true
4;false,false,true;recursion_proteinclass(K, B), location(J, L).;false;false
4;false,false,false;interaction(A, M), recursion_proteinclass(M, B).;false;false
5;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
5;true;enzyme(A, D), phenotype(C, E).;false;false
5;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
5;false,true;interaction(G, F), interaction(G, A).;false;true
5;false,true,false;phenotype(A, H), location(F, I).;false;false
5;false,false;interaction(A, J), complex(J, K).;true;true
5;false,false,true;interaction(J, L), recursion_proteinclass(L, B).;false;false
5;false,false,false;phenotype(A, M), location(A, N).;false;false
6;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
6;true;interaction(C, D), complex(D, E).;true;false
6;true,true;interaction(A, D).;true;false
6;true,true,true;interaction(D, C).;false;false
6;false;interaction(A, A).;false;true
6;false,false;interaction(A, F), enzyme(F, G).;true;true
6;false,false,true;phenotype(F, H), complex(F, I).;false;false
6;false,false,false;location(A, J).;false;false
7;;proteinclass(A, B) :- interaction(A, C), complex(C, D).;true;true
7;true;recursion_proteinclass(C, B).;false;true
7;true,false;interaction(C, E), recursion_proteinclass(E, B).;false;true
7;true,false,false;interaction(C, A).;false;false
7;false;interaction(F, A), recursion_proteinclass(F, B).;false;true
7;false,false;interaction(G, A), enzyme(G, H).;true;true
7;false,false,true;interaction(A, I), interaction(G, I).;false;false
7;false,false,false;location(A, J), enzyme(A, K).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;interaction(C, D), interaction(D, D).;false;false
8;false;interaction(A, E), enzyme(A, F).;true;true
8;false,true;interaction(E, G), recursion_proteinclass(G, B).;false;true
8;false,true,false;interaction(E, A).;false;false
8;false,false;interaction(A, H), location(A, I).;true;true
8;false,false,true;interaction(H, J), recursion_proteinclass(J, B).;false;false
8;false,false,false;enzyme(A, K).;false;false
9;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;false;true
9;false;interaction(D, A), interaction(A, D).;true;true
9;false,true;phenotype(A, E), phenotype(D, E).;true;true
9;false,true,true;complex(D, F).;false;false
9;false,true,false;interaction(D, D).;false;false
9;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
9;false,false,true;phenotype(G, H), location(G, I).;false;false
9;false,false,false;complex(A, J), interaction(K, A).;false;false


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(C, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), recursion_accounttype(A, E) )
%   | then if ( tweets(F, D) )
%   | | then if ( recursion_accounttype(F, E) )
%   | | | then return 0.19495449065506548;  // std dev = 8.021, 288.000 (wgt'ed) examples reached here.  /* #neg=191 #pos=97 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.23972788246793209;  // std dev = 4.235, 76.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=29 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C) )
%   | then return 0.15645638637655634;  // std dev = 8.379, 320.000 (wgt'ed) examples reached here.  /* #neg=216 #pos=104 */
%   | else return 0.16605571715214623;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(A, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, I), recursion_accounttype(I, J) )
%   | | | then return 0.1527803899180435;  // std dev = 3.772, 65.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=21 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then return 0.13337272043115236;  // std dev = 0.469, 323.000 (wgt'ed) examples reached here.  /* #neg=218 #pos=105 */
%   else if ( follows(A, D), follows(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, F) )
%   | | | then return 0.10258392323320717;  // std dev = 3.849, 71.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=21 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D) )
%   | then return 0.10091480115939527;  // std dev = 8.572, 341.000 (wgt'ed) examples reached here.  /* #neg=234 #pos=107 */
%   | else if ( follows(C, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.1685101130923787;  // std dev = 2.614, 29.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=11 */
%   else if ( follows(E, A) )
%   | then if ( follows(F, E) )
%   | | then return 0.08468103591075966;  // std dev = 2.373, 27.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=8 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(A, C), follows(A, D) )
%   then if ( follows(D, E), follows(E, F) )
%   | then return 0.10107681743013854;  // std dev = 8.461, 323.000 (wgt'ed) examples reached here.  /* #neg=216 #pos=107 */
%   | else if ( follows(D, G) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.06594913529655334;  // std dev = 2.763, 36.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=11 */
%   else if ( follows(H, A) )
%   | then return 0.1548646431665621;  // std dev = 2.225, 21.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( recursion_accounttype(C, D) )
%   | then return 0.07701202921531111;  // std dev = 8.921, 362.000 (wgt'ed) examples reached here.  /* #neg=244 #pos=118 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(E, A) )
%   | then if ( follows(F, E), follows(F, A) )
%   | | then return 0.14567383401099965;  // std dev = 2.191, 20.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=8 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D) )
%   | then if ( follows(A, D) )
%   | | then if ( follows(D, C) )
%   | | | then return 0.05184839574124282;  // std dev = 7.448, 257.000 (wgt'ed) examples reached here.  /* #neg=176 #pos=81 */
%   | | | else return 0.049496715922243084;  // std dev = 2.621, 32.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=10 */
%   | | else return 0.071809226406244;  // std dev = 3.265, 48.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=16 */
%   | else return 0.0769002258486064;  // std dev = 2.687, 32.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=11 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return 0.013370950725460747;  // std dev = 2.373, 27.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=8 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D) )
%   | then return 0.07450109276782187;  // std dev = 8.352, 307.000 (wgt'ed) examples reached here.  /* #neg=200 #pos=107 */
%   | else if ( follows(C, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.05115019838729865;  // std dev = 2.708, 33.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=11 */
%   else if ( follows(E, A) )
%   | then return -0.009783812101838334;  // std dev = 2.407, 29.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), follows(D, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.03757517309219929;  // std dev = 8.914, 361.000 (wgt'ed) examples reached here.  /* #neg=243 #pos=118 */
%   else if ( follows(A, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F), tweets(A, G) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.03634633444231232;  // std dev = 0.466, 25.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=8 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then return 0.04212502149374261;  // std dev = 8.831, 348.000 (wgt'ed) examples reached here.  /* #neg=230 #pos=118 */
%   else if ( follows(D, A), follows(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A) )
%   | | then if ( recursion_accounttype(E, F), tweets(E, G) )
%   | | | then return 0.005199555604314909;  // std dev = 2.373, 27.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=8 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.5
   AUC PR    = 0.006289
   CLL	      = -0.35451
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.575 seconds
Total inference time: 3.78 seconds
AUC ROC: 0.5


Results scoring model
   AUC ROC   = 0.5
   AUC PR    = 0.007752
   CLL	      = -0.370281
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total scoring time: 2.971 seconds
Parameter learned model CLL: -0.370281


Structure after Parameter Learning
[['accounttype(A, B)', {'': 'follows(A, C), follows(C, C)', 'false': 'tweets(A, D), recursion_accounttype(A, E)', 'false,true': 'tweets(F, D)', 'false,true,true': 'recursion_accounttype(F, E)'}, {'true': [0.0, 0, 0], 'false,true,true,true': [8.021, 191, 97], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 0, 0], 'false,false': [4.235, 47, 29]}], ['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C)', 'false': 'follows(E, A), recursion_accounttype(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, H)', 'false,false,false': 'follows(A, I), recursion_accounttype(I, J)'}, {'true,true': [8.379, 216, 104], 'true,false': [0.816, 2, 1], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [3.772, 44, 21], 'false,false,false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(C, A)', 'false': 'follows(A, D), follows(D, A)', 'false,false': 'follows(E, A)', 'false,false,false': 'follows(A, F)'}, {'true': [0.469, 218, 105], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [3.849, 50, 21], 'false,false,false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D)', 'true,false': 'follows(C, A)', 'false': 'follows(E, A)', 'false,true': 'follows(F, E)'}, {'true,true': [8.572, 234, 107], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.614, 18, 11], 'false,true,true': [2.373, 19, 8], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'recursion_accounttype(A, C), follows(A, D)', 'true': 'follows(D, E), follows(E, F)', 'true,false': 'follows(D, G)', 'false': 'follows(H, A)'}, {'true,true': [8.461, 216, 107], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.763, 25, 11], 'false,true': [2.225, 13, 8], 'false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'recursion_accounttype(C, D)', 'false': 'follows(E, A)', 'false,true': 'follows(F, E), follows(F, A)'}, {'true,true': [8.921, 244, 118], 'true,false': [0.0, 0, 0], 'false,true,true': [2.191, 12, 8], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D)', 'true,true': 'follows(A, D)', 'true,true,true': 'follows(D, C)', 'false': 'follows(A, A)', 'false,false': 'follows(A, E)', 'false,false,false': 'tweets(A, F)'}, {'true,true,true,true': [7.448, 176, 81], 'true,true,true,false': [2.621, 22, 10], 'true,true,false': [3.265, 32, 16], 'true,false': [2.687, 21, 11], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [2.373, 19, 8], 'false,false,false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D)', 'true,false': 'follows(C, A)', 'false': 'follows(E, A)'}, {'true,true': [8.352, 200, 107], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.708, 22, 11], 'false,true': [2.407, 21, 8], 'false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), follows(D, D)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F), tweets(A, G)'}, {'true,true': [0.0, 0, 0], 'true,false': [8.914, 243, 118], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.466, 17, 8]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'false': 'follows(D, A), follows(A, D)', 'false,false': 'follows(E, A)', 'false,false,true': 'recursion_accounttype(E, F), tweets(E, G)'}, {'true': [8.831, 230, 118], 'false,true': [0.0, 0, 0], 'false,false,true,true': [2.373, 19, 8], 'false,false,true,false': [0.0, 0, 0], 'false,false,false': [0.0, 0, 0]}]]
[{'': [nan, 0.226331360946748], 'false': [0.22336757330247078, 0.23597645429363018], 'false,true': [0.22336757330247078, nan], 'false,true,true': [0.22336757330247078, nan]}, {'': [0.21944000012223588, 0.218905985979134], 'true': [0.21941306093415366, 0.2222222222222223], 'false': [nan, 0.218905985979134], 'false,false': [nan, 0.218905985979134], 'false,false,false': [0.218905985979134, nan]}, {'': [0.2195011148864807, 0.20862802925344445], 'false': [nan, 0.20862802925344445], 'false,false': [nan, 0.20862802925344445], 'false,false,false': [0.20862802925344445, nan]}, {'': [0.21737636094979879, 0.2085048010973934], 'true': [0.21546133717781388, 0.23568339360271526], 'true,false': [nan, 0.23568339360271526], 'false': [0.2085048010973934, nan], 'false,true': [0.2085048010973934, nan]}, {'': [0.2207881628981573, 0.2358276643990929], 'false': [0.2358276643990929, nan], 'true': [0.22163753919358506, 0.21205715509821393], 'true,false': [nan, 0.21205715509821393]}, {'': [0.2198431638748386, 0.23999999999999985], 'false': [0.23999999999999985, nan], 'false,true': [0.23999999999999985, nan], 'true': [0.2198431638748386, nan]}, {'': [0.21748902702030062, 0.20850480109739356], 'true': [0.2166765093584513, 0.22558629447508888], 'true,true': [0.21571291273312856, 0.22212750678083407], 'true,true,true': [0.21584556523066858, 0.2146426293266932], 'false': [nan, 0.20850480109739356], 'false,false': [nan, 0.20850480109739356], 'false,false,false': [0.20850480109739356, nan]}, {'': [0.22678807531497777, 0.19976218787158154], 'true': [0.22722400405546256, 0.22224027547231584], 'true,false': [nan, 0.22224027547231584], 'false': [0.19976218787158154, nan]}, {'': [0.22008691032563463, 0.21760000000000015], 'true': [nan, 0.22008691032563407], 'false': [nan, 0.21760000000000015], 'false,false': [nan, 0.21760000000000015]}, {'': [0.2240844314455565, 0.20850480109739356], 'false': [nan, 0.20850480109739356], 'false,false': [0.20850480109739356, nan], 'false,false,true': [0.20850480109739356, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;accounttype(A, B) :- follows(A, C), follows(C, C).;true;true
0;false;tweets(A, D), recursion_accounttype(A, E).;true;true
0;false,true;tweets(F, D).;true;true
0;false,true,true;recursion_accounttype(F, E).;true;true
1;;accounttype(A, B) :- follows(C, A).;true;true
1;true;follows(D, C).;true;true
1;false;follows(E, A), recursion_accounttype(A, F).;true;true
1;false,false;follows(G, A), recursion_accounttype(G, H).;true;true
1;false,false,false;follows(A, I), recursion_accounttype(I, J).;true;true
2;;accounttype(A, B) :- follows(C, A).;true;true
2;false;follows(A, D), follows(D, A).;true;true
2;false,false;follows(E, A).;true;true
2;false,false,false;follows(A, F).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(C, D).;true;true
3;true,false;follows(C, A).;true;true
3;false;follows(E, A).;true;true
3;false,true;follows(F, E).;true;true
4;;accounttype(A, B) :- recursion_accounttype(A, C), follows(A, D).;true;true
4;true;follows(D, E), follows(E, F).;true;true
4;true,false;follows(D, G).;true;true
4;false;follows(H, A).;true;true
5;;accounttype(A, B) :- follows(A, C).;true;true
5;true;recursion_accounttype(C, D).;true;true
5;false;follows(E, A).;true;true
5;false,true;follows(F, E), follows(F, A).;true;true
6;;accounttype(A, B) :- follows(A, C).;true;true
6;true;follows(C, D).;true;true
6;true,true;follows(A, D).;true;true
6;true,true,true;follows(D, C).;true;true
6;false;follows(A, A).;true;true
6;false,false;follows(A, E).;true;true
6;false,false,false;tweets(A, F).;true;true
7;;accounttype(A, B) :- follows(A, C).;true;true
7;true;follows(C, D).;true;true
7;true,false;follows(C, A).;true;true
7;false;follows(E, A).;true;true
8;;accounttype(A, B) :- follows(A, C).;true;true
8;true;follows(C, D), follows(D, D).;true;true
8;false;follows(A, E).;true;true
8;false,false;follows(A, F), tweets(A, G).;true;true
9;;accounttype(A, B) :- follows(A, C).;true;true
9;false;follows(D, A), follows(A, D).;true;true
9;false,false;follows(E, A).;true;true
9;false,false,true;recursion_accounttype(E, F), tweets(E, G).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(C, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), recursion_accounttype(A, E) )
%   | then if ( tweets(F, D) )
%   | | then if ( recursion_accounttype(F, E) )
%   | | | then return 0.18474826169883665;  // std dev = 8.082, 297.000 (wgt'ed) examples reached here.  /* #neg=200 #pos=97 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, G), tweets(G, H) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.6081489350995122;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.6081489350995122;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.041482268432845706;  // std dev = 2.997, 60.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=11 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E), tweets(A, F) )
%   | | | then return 0.8341392450680181;  // std dev = 0.000, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | | | else return 0.7187459598170937;  // std dev = 1.326, 31.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=29 */
%   | | else if ( follows(A, G), follows(G, H) )
%   | | | then return -0.06024012210319413;  // std dev = 4.513, 224.000 (wgt'ed) examples reached here.  /* #neg=201 #pos=23 */
%   | | | else return -0.16586075493198188;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else return 0.03413924506801817;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( follows(I, A), recursion_accounttype(A, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(K, A), recursion_accounttype(K, L) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, M), recursion_accounttype(M, N) )
%   | | | then return 0.13896756351187767;  // std dev = 3.832, 70.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=21 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then return 0.6783286156174834;  // std dev = 0.123, 68.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=67 */
%   | | else return 0.5676605359736613;  // std dev = 0.094, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(A, F), follows(F, G) )
%   | | then if ( recursion_accounttype(G, B) )
%   | | | then return 0.759308297891731;  // std dev = 1.355, 25.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=23 */
%   | | | else return -0.1548918026697928;  // std dev = 0.097, 193.000 (wgt'ed) examples reached here.  /* #neg=193 */
%   | | else return -0.14416581806733786;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   else if ( follows(A, H), follows(H, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(I, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, J) )
%   | | | then return 0.14082449425412008;  // std dev = 3.762, 66.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=21 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.5012331471462373;  // std dev = 0.207, 79.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=76 */
%   | | else return -0.033299612640567446;  // std dev = 0.283, 238.000 (wgt'ed) examples reached here.  /* #neg=207 #pos=31 */
%   | else if ( follows(C, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return 0.19537314911248685;  // std dev = 1.623, 12.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=5 */
%   | | | else return 0.0708600802023111;  // std dev = 2.073, 23.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=6 */
%   else if ( follows(G, A) )
%   | then if ( follows(H, G) )
%   | | then if ( follows(I, A), recursion_accounttype(I, B) )
%   | | | then return 0.5543289508911715;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.12727412132404314;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(A, C), follows(A, D) )
%   then if ( follows(D, E), follows(E, F) )
%   | then if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.3674798461976292;  // std dev = 0.240, 80.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=76 */
%   | | else if ( follows(H, A), follows(A, H) )
%   | | | then return -0.04878352583780748;  // std dev = 3.451, 197.000 (wgt'ed) examples reached here.  /* #neg=177 #pos=20 */
%   | | | else return 0.04408640234857504;  // std dev = 2.663, 45.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=11 */
%   | else if ( follows(D, I) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, J) )
%   | | | then return 0.053173144739008464;  // std dev = 1.761, 17.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=5 */
%   | | | else return 0.33936439982310573;  // std dev = 1.625, 11.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=6 */
%   else if ( follows(K, A) )
%   | then if ( follows(L, A), recursion_accounttype(L, B) )
%   | | then return 0.4167445555576293;  // std dev = 2.11e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.11379472612316983;  // std dev = 1.49e-08, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( recursion_accounttype(C, D) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), follows(A, F) )
%   | | | then return 0.30746706800459445;  // std dev = 0.970, 72.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=71 */
%   | | | else return 0.5811855039221894;  // std dev = 0.123, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return 0.5318560625508767;  // std dev = 0.117, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.03037983756967618;  // std dev = 4.784, 256.000 (wgt'ed) examples reached here.  /* #neg=224 #pos=32 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(H, A) )
%   | then if ( follows(I, H), follows(I, A) )
%   | | then if ( follows(J, A), recursion_accounttype(J, B) )
%   | | | then return 0.32019052984562674;  // std dev = 1.83e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.10281349350764059;  // std dev = 1.18e-08, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D) )
%   | then if ( follows(A, D) )
%   | | then if ( follows(D, C) )
%   | | | then return 0.007284525440265343;  // std dev = 4.083, 262.000 (wgt'ed) examples reached here.  /* #neg=181 #pos=81 */
%   | | | else return 0.03537357589576963;  // std dev = 1.377, 30.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=10 */
%   | | else if ( tweets(A, E) )
%   | | | then return 0.1571928149329212;  // std dev = 2.289, 29.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=11 */
%   | | | else return 0.03976929977491702;  // std dev = 1.536, 20.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | else if ( tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.6753955836623058;  // std dev = 0.349, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.24651370776377263;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return 0.03655649949338633;  // std dev = 0.441, 20.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=6 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.0024356208009194465;  // std dev = 0.156, 29.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.24100960565073065;  // std dev = 0.169, 78.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=76 */
%   | | else if ( follows(F, A) )
%   | | | then return -0.05240045115057688;  // std dev = 3.478, 232.000 (wgt'ed) examples reached here.  /* #neg=209 #pos=23 */
%   | | | else return 0.03399555425882723;  // std dev = 2.453, 32.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=8 */
%   | else if ( follows(C, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G) )
%   | | | then return 0.06475414846861274;  // std dev = 1.349, 14.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=5 */
%   | | | else return 0.06406639953493816;  // std dev = 1.963, 17.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=6 */
%   else if ( follows(H, A) )
%   | then if ( follows(I, A), recursion_accounttype(I, B) )
%   | | then return 0.2543542778514248;  // std dev = 1.49e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.0939165292790404;  // std dev = 3.73e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), follows(D, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E) )
%   | | | then return 0.16730516325341813;  // std dev = 1.389, 66.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=64 */
%   | | | else return 0.38381733894697023;  // std dev = 0.236, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.22481032503595108;  // std dev = 1.335, 14.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=12 */
%   | | | else return -0.03694007417864797;  // std dev = 4.682, 274.000 (wgt'ed) examples reached here.  /* #neg=242 #pos=32 */
%   else if ( follows(A, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, H), tweets(A, I) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(J, A), recursion_accounttype(J, B) )
%   | | | then return 0.20917974928640032;  // std dev = 1.49e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.08622363307103778;  // std dev = 1.05e-08, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, D) )
%   | | then if ( tweets(A, E) )
%   | | | then return 0.18284518157839388;  // std dev = 0.030, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | | | else return 0.048856045443001664;  // std dev = 0.960, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | else return 0.2996632929119053;  // std dev = 0.064, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( follows(F, A) )
%   | | then if ( follows(F, G), follows(G, A) )
%   | | | then return -0.09260544101662792;  // std dev = 1.484, 114.000 (wgt'ed) examples reached here.  /* #neg=111 #pos=3 */
%   | | | else return 0.04991897474961405;  // std dev = 2.844, 82.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=20 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return 0.11587079618093514;  // std dev = 2.488, 28.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=11 */
%   | | | else return 0.04598952793992137;  // std dev = 2.347, 31.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=10 */
%   else if ( follows(J, A), follows(A, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.0228681319042122;  // std dev = 0.126, 20.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=8 */


Results
   AUC ROC   = 0.941748
   AUC PR    = 0.326028
   CLL	      = -0.168181
   Precision = 0.30721 at threshold = 0.5
   Recall    = 0.628205
   F1        = 0.412632


Total learning time: 27.856 seconds
Total inference time: 98.90899999999999 seconds
AUC ROC: 0.941748


Results scoring model
   AUC ROC   = 0.979723
   AUC PR    = 0.320056
   CLL	      = -0.163774
   Precision = 0.316498 at threshold = 0.5
   Recall    = 0.746032
   F1        = 0.444444


Total scoring time: 106.791 seconds
Refined model CLL: -0.163774


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.941748
   AUC PR    = 0.326028
   CLL	      = -0.168181
   Precision = 0.30721 at threshold = 0.5
   Recall    = 0.628205
   F1        = 0.412632


Total learning time: 139.19299999999998 seconds
Total inference time: 98.90899999999999 seconds
AUC ROC: 0.941748
Total revision time: 139.19299999999998
Best scored revision CLL: -0.163774


Dataset: 7_yeast_twitter, Fold: 2, Type: Transfer (trRDN-B), Time: 01:12:10
{'AUC ROC': 0.941748, 'AUC PR': 0.326028, 'CLL': -0.168181, 'Precision': [0.30721, 0.5], 'Recall': 0.628205, 'F1': 0.412632, 'Learning time': 139.19299999999998, 'Inference time': 98.90899999999999, 'parameter_1.0': {'AUC ROC': 0.5, 'AUC PR': 0.006289, 'CLL': -0.35451, 'Precision': [nan, 0.5], 'Recall': 0.0, 'F1': nan, 'Learning time': 1.575, 'Inference time': 3.78}}


