Starting experiment #1 for 7_yeast_twitter

Start learning from source dataset

Source train facts examples: 15015
Source train pos examples: 369
Source train neg examples: 51477

WILL Produced-Tree #1
% FOR proteinclass(A, B):
%   if ( interaction(A, C), recursion_proteinclass(C, B) )
%   then return 0.8242506300147667;  // std dev = 0.181, 59.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=57 */
%   else if ( interaction(A, D), interaction(D, D) )
%   | then if ( interaction(E, A), interaction(D, E) )
%   | | then if ( interaction(A, A) )
%   | | | then return -0.1418510649004877;  // std dev = 3.65e-08, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | | | else return 0.12933537577747847;  // std dev = 3.415, 59.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=16 */
%   | | else if ( enzyme(D, F), phenotype(A, G) )
%   | | | then return 0.39148226843284567;  // std dev = 1.932, 15.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=8 */
%   | | | else return 0.12188519883577592;  // std dev = 4.204, 91.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=24 */
%   | else if ( interaction(H, A), recursion_proteinclass(H, B) )
%   | | then if ( interaction(A, I), interaction(J, H) )
%   | | | then return 0.6914822684328455;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( interaction(K, A), complex(A, L) )
%   | | | then return 0.11205518509951345;  // std dev = 6.964, 256.000 (wgt'ed) examples reached here.  /* #neg=191 #pos=65 */
%   | | | else return 0.1914822684328418;  // std dev = 10.863, 531.000 (wgt'ed) examples reached here.  /* #neg=354 #pos=177 */
WILL Produced-Tree #2
% FOR proteinclass(A, B):
%   if ( interaction(C, A), recursion_proteinclass(C, B) )
%   then if ( interaction(C, C) )
%   | then return 0.725760979353799;  // std dev = 0.009, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | else if ( interaction(A, D), interaction(D, D) )
%   | | then if ( complex(C, E) )
%   | | | then return -0.17896295710018417;  // std dev = 0.113, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.41868667172279594;  // std dev = 0.850, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.6307185771135887;  // std dev = 0.295, 31.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=28 */
%   else if ( interaction(A, F), recursion_proteinclass(F, B) )
%   | then return 0.6462639847252268;  // std dev = 0.271, 25.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=23 */
%   | else if ( interaction(A, G), interaction(G, H) )
%   | | then if ( recursion_proteinclass(H, B) )
%   | | | then return 0.7721298165439481;  // std dev = 1.654, 45.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=42 */
%   | | | else return 0.01369917470711411;  // std dev = 7.610, 412.000 (wgt'ed) examples reached here.  /* #neg=341 #pos=71 */
%   | | else if ( interaction(I, A), location(I, J) )
%   | | | then return 0.149954448260061;  // std dev = 10.706, 533.000 (wgt'ed) examples reached here.  /* #neg=366 #pos=167 */
%   | | | else return 0.26280055795210683;  // std dev = 2.269, 21.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=9 */
WILL Produced-Tree #3
% FOR proteinclass(A, B):
%   if ( interaction(C, A), enzyme(C, D) )
%   then if ( location(A, E), location(C, E) )
%   | then return 0.0768305283120281;  // std dev = 0.403, 218.000 (wgt'ed) examples reached here.  /* #neg=156 #pos=62 */
%   | else if ( interaction(A, F), phenotype(A, G) )
%   | | then if ( interaction(F, A), interaction(H, C) )
%   | | | then return 0.1264511154782843;  // std dev = 1.610, 14.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=5 */
%   | | | else return 0.3971655358669338;  // std dev = 1.249, 8.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | | else if ( interaction(A, I), recursion_proteinclass(I, B) )
%   | | | then return 0.3617228800296485;  // std dev = 0.694, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.08508919794768484;  // std dev = 3.744, 74.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=20 */
%   else if ( interaction(A, J), recursion_proteinclass(J, B) )
%   | then return 0.4995253592022003;  // std dev = 0.262, 40.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=37 */
%   | else if ( interaction(A, K), enzyme(K, L) )
%   | | then return 0.04486666469773011;  // std dev = 0.404, 132.000 (wgt'ed) examples reached here.  /* #neg=103 #pos=29 */
%   | | else if ( interaction(M, A), interaction(A, M) )
%   | | | then return 0.06509447691955955;  // std dev = 3.059, 68.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=17 */
%   | | | else return 0.13471189603606337;  // std dev = 11.234, 593.000 (wgt'ed) examples reached here.  /* #neg=402 #pos=191 */
WILL Produced-Tree #4
% FOR proteinclass(A, B):
%   if ( interaction(C, A), recursion_proteinclass(C, B) )
%   then if ( interaction(D, C), interaction(C, D) )
%   | then if ( recursion_proteinclass(D, B) )
%   | | then return 0.49102165814973;  // std dev = 0.057, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | else return 0.25249357930203203;  // std dev = 1.132, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else return 0.5565815802915081;  // std dev = 0.223, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   else if ( interaction(A, E), recursion_proteinclass(E, B) )
%   | then if ( interaction(E, F), interaction(F, F) )
%   | | then return 0.25759213761349137;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.47001159509161544;  // std dev = 0.141, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( interaction(A, G), interaction(H, A) )
%   | | then if ( complex(A, I), complex(G, I) )
%   | | | then return -0.023896289673228335;  // std dev = 3.370, 99.000 (wgt'ed) examples reached here.  /* #neg=84 #pos=15 */
%   | | | else return 0.07570090092860059;  // std dev = 7.183, 290.000 (wgt'ed) examples reached here.  /* #neg=210 #pos=80 */
%   | | else if ( enzyme(A, J), complex(A, K) )
%   | | | then return 0.07486853376280037;  // std dev = 4.676, 111.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=30 */
%   | | | else return 0.13446932284276095;  // std dev = 10.405, 486.000 (wgt'ed) examples reached here.  /* #neg=322 #pos=164 */
WILL Produced-Tree #5
% FOR proteinclass(A, B):
%   if ( interaction(C, A), recursion_proteinclass(C, B) )
%   then return 0.3459027785920179;  // std dev = 0.217, 61.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=57 */
%   else if ( interaction(A, D), complex(D, E) )
%   | then if ( interaction(F, A), interaction(F, D) )
%   | | then if ( interaction(D, G), recursion_proteinclass(G, B) )
%   | | | then return 0.5643306767701731;  // std dev = 1.316, 23.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=21 */
%   | | | else return -0.08592505595352883;  // std dev = 3.516, 167.000 (wgt'ed) examples reached here.  /* #neg=150 #pos=17 */
%   | | else if ( recursion_proteinclass(D, B) )
%   | | | then return 0.36007198846148886;  // std dev = 0.072, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.07187376015962481;  // std dev = 6.320, 212.000 (wgt'ed) examples reached here.  /* #neg=152 #pos=60 */
%   | else if ( enzyme(A, H), location(A, I) )
%   | | then if ( enzyme(J, H), recursion_proteinclass(J, B) )
%   | | | then return 0.7354285436498502;  // std dev = 1.648, 72.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=69 */
%   | | | else return -0.2153788095555273;  // std dev = 0.297, 181.000 (wgt'ed) examples reached here.  /* #neg=181 */
%   | | else if ( complex(A, K), interaction(L, A) )
%   | | | then return 0.06010660537528674;  // std dev = 4.174, 87.000 (wgt'ed) examples reached here.  /* #neg=63 #pos=24 */
%   | | | else return 0.11486265165710656;  // std dev = 8.331, 319.000 (wgt'ed) examples reached here.  /* #neg=208 #pos=111 */
WILL Produced-Tree #6
% FOR proteinclass(A, B):
%   if ( interaction(A, C), recursion_proteinclass(C, B) )
%   then return 0.2549316403908212;  // std dev = 0.218, 60.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=57 */
%   else if ( interaction(D, A), interaction(A, D) )
%   | then if ( interaction(D, D) )
%   | | then if ( interaction(A, A) )
%   | | | then return -0.1262409880622818;  // std dev = 0.081, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   | | | else return 0.018195069608489337;  // std dev = 2.319, 49.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=13 */
%   | | else if ( phenotype(D, E), complex(D, F) )
%   | | | then return 0.11600736681467932;  // std dev = 1.912, 26.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=11 */
%   | | | else return -0.010293108249169484;  // std dev = 2.887, 67.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=15 */
%   | else if ( enzyme(A, G), interaction(A, H) )
%   | | then if ( enzyme(H, I) )
%   | | | then return 0.05705167373800853;  // std dev = 3.354, 63.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=17 */
%   | | | else return 0.19804572959068595;  // std dev = 3.577, 60.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=26 */
%   | | else if ( interaction(A, J), interaction(J, J) )
%   | | | then return 0.12427842340259435;  // std dev = 3.237, 47.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=16 */
%   | | | else return 0.05438707976411942;  // std dev = 11.281, 699.000 (wgt'ed) examples reached here.  /* #neg=485 #pos=214 */
WILL Produced-Tree #7
% FOR proteinclass(A, B):
%   if ( interaction(C, A), recursion_proteinclass(C, B) )
%   then return 0.2529122339800786;  // std dev = 0.189, 59.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=57 */
%   else if ( interaction(A, D), phenotype(A, E) )
%   | then if ( location(D, F), location(A, F) )
%   | | then if ( interaction(D, G), recursion_proteinclass(G, B) )
%   | | | then return 0.38757248001130246;  // std dev = 2.013, 34.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=30 */
%   | | | else return -0.0453888464255408;  // std dev = 5.785, 269.000 (wgt'ed) examples reached here.  /* #neg=221 #pos=48 */
%   | | else if ( complex(D, H), interaction(D, D) )
%   | | | then return 0.4026428600597396;  // std dev = 1.126, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.15387040147864317;  // std dev = 2.225, 22.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=9 */
%   | else if ( interaction(A, I), interaction(I, A) )
%   | | then if ( interaction(I, I) )
%   | | | then return -0.08027643693769268;  // std dev = 1.233, 38.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=3 */
%   | | | else return 0.04557011636815906;  // std dev = 2.083, 33.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=10 */
%   | | else if ( location(A, J) )
%   | | | then return 0.07003142942610295;  // std dev = 10.585, 591.000 (wgt'ed) examples reached here.  /* #neg=396 #pos=195 */
%   | | | else return 0.17144539493172078;  // std dev = 2.773, 31.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=13 */
WILL Produced-Tree #8
% FOR proteinclass(A, B):
%   if ( interaction(C, A), recursion_proteinclass(C, B) )
%   then return 0.22214920823221573;  // std dev = 0.135, 58.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=57 */
%   else if ( interaction(D, A), interaction(A, D) )
%   | then if ( complex(D, E) )
%   | | then if ( complex(A, F), enzyme(D, G) )
%   | | | then return -0.14066754575673535;  // std dev = 0.766, 15.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=1 */
%   | | | else return -0.05277566394808662;  // std dev = 2.966, 119.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=23 */
%   | | else if ( interaction(D, D), complex(A, H) )
%   | | | then return 0.2303936439586611;  // std dev = 0.798, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.011017745828798747;  // std dev = 2.470, 64.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=16 */
%   | else if ( enzyme(A, I), interaction(J, A) )
%   | | then if ( enzyme(J, K), phenotype(J, L) )
%   | | | then return -0.03489708573255502;  // std dev = 2.269, 43.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=9 */
%   | | | else return 0.09337783310376468;  // std dev = 5.847, 208.000 (wgt'ed) examples reached here.  /* #neg=132 #pos=76 */
%   | | else if ( interaction(A, M), recursion_proteinclass(M, B) )
%   | | | then return 0.13736159438137913;  // std dev = 1.330, 19.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=17 */
%   | | | else return 0.01978681376834468;  // std dev = 10.965, 604.000 (wgt'ed) examples reached here.  /* #neg=436 #pos=168 */
WILL Produced-Tree #9
% FOR proteinclass(A, B):
%   if ( interaction(C, A), interaction(A, D) )
%   then if ( interaction(E, C), recursion_proteinclass(E, B) )
%   | then return 0.2751327273746527;  // std dev = 0.317, 91.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=79 */
%   | else if ( interaction(A, C) )
%   | | then return -0.16342448848633012;  // std dev = 0.060, 157.000 (wgt'ed) examples reached here.  /* #neg=157 */
%   | | else return 0.016035013134271688;  // std dev = 0.402, 247.000 (wgt'ed) examples reached here.  /* #neg=174 #pos=73 */
%   else if ( location(A, F) )
%   | then if ( location(G, F), recursion_proteinclass(G, B) )
%   | | then if ( interaction(H, A), interaction(H, G) )
%   | | | then return 0.6128417371648135;  // std dev = 2.411, 167.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=164 */
%   | | | else return 0.07066546491524353;  // std dev = 5.015, 120.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=44 */
%   | | else return -0.25309170030610234;  // std dev = 0.541, 291.000 (wgt'ed) examples reached here.  /* #neg=291 */
%   | else if ( interaction(A, I), interaction(I, J) )
%   | | then return 0.03693031358192997;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | else if ( interaction(A, K) )
%   | | | then return -0.1282625069250845;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return -0.062420485851631784;  // std dev = 1.987, 23.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=6 */
WILL Produced-Tree #10
% FOR proteinclass(A, B):
%   if ( interaction(C, A), interaction(C, C) )
%   then if ( recursion_proteinclass(C, B), interaction(A, C) )
%   | then return 0.12524740070133059;  // std dev = 0.106, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.03661058672199179;  // std dev = 0.300, 255.000 (wgt'ed) examples reached here.  /* #neg=201 #pos=54 */
%   else if ( enzyme(A, D), interaction(A, E) )
%   | then if ( interaction(E, F), recursion_proteinclass(F, B) )
%   | | then return 0.38223700214261286;  // std dev = 0.173, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( interaction(E, A) )
%   | | | then return -0.15786785540371012;  // std dev = 0.049, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else return 0.08722093347099019;  // std dev = 4.652, 115.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=43 */
%   | else if ( interaction(G, A), phenotype(A, H) )
%   | | then if ( interaction(I, G), recursion_proteinclass(I, B) )
%   | | | then return 0.2510815652339726;  // std dev = 1.500, 20.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=16 */
%   | | | else return -0.007816163040256152;  // std dev = 6.203, 304.000 (wgt'ed) examples reached here.  /* #neg=213 #pos=91 */
%   | | else if ( interaction(A, J), enzyme(J, K) )
%   | | | then return -0.02835428689820907;  // std dev = 3.005, 56.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=16 */
%   | | | else return 0.05693001170145472;  // std dev = 6.811, 302.000 (wgt'ed) examples reached here.  /* #neg=190 #pos=112 */


Starting fold 1

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos	 examples: 126
Target test neg examples: 16128

Amount of data: 0.2
******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;false;true
0;false;interaction(A, D), interaction(D, D).;true;true
0;false,true;interaction(E, A), interaction(D, E).;true;true
0;false,true,true;interaction(A, A).;false;false
0;false,true,false;enzyme(D, F), phenotype(A, G).;false;false
0;false,false;interaction(H, A), recursion_proteinclass(H, B).;true;true
0;false,false,true;interaction(A, I), interaction(J, H).;false;false
0;false,false,false;interaction(K, A), complex(A, L).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
1;true;interaction(C, C).;false;true
1;true,false;interaction(A, D), interaction(D, D).;true;false
1;true,false,true;complex(C, E).;false;false
1;false;interaction(A, F), recursion_proteinclass(F, B).;false;true
1;false,false;interaction(A, G), interaction(G, H).;true;true
1;false,false,true;recursion_proteinclass(H, B).;false;false
1;false,false,false;interaction(I, A), location(I, J).;false;false
2;;proteinclass(A, B) :- interaction(C, A), enzyme(C, D).;true;true
2;true;location(A, E), location(C, E).;false;true
2;true,false;interaction(A, F), phenotype(A, G).;true;true
2;true,false,true;interaction(F, A), interaction(H, C).;false;false
2;true,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;false;interaction(A, J), recursion_proteinclass(J, B).;false;true
2;false,false;interaction(A, K), enzyme(K, L).;false;true
2;false,false,false;interaction(M, A), interaction(A, M).;false;false
3;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
3;true;interaction(D, C), interaction(C, D).;true;false
3;true,true;recursion_proteinclass(D, B).;false;false
3;false;interaction(A, E), recursion_proteinclass(E, B).;true;true
3;false,true;interaction(E, F), interaction(F, F).;false;false
3;false,false;interaction(A, G), interaction(H, A).;true;true
3;false,false,true;complex(A, I), complex(G, I).;false;false
3;false,false,false;enzyme(A, J), complex(A, K).;false;false
4;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
4;false;interaction(A, D), complex(D, E).;true;true
4;false,true;interaction(F, A), interaction(F, D).;true;true
4;false,true,true;interaction(D, G), recursion_proteinclass(G, B).;false;false
4;false,true,false;recursion_proteinclass(D, B).;false;false
4;false,false;enzyme(A, H), location(A, I).;true;true
4;false,false,true;enzyme(J, H), recursion_proteinclass(J, B).;false;false
4;false,false,false;complex(A, K), interaction(L, A).;false;false
5;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;false;true
5;false;interaction(D, A), interaction(A, D).;true;true
5;false,true;interaction(D, D).;true;true
5;false,true,true;interaction(A, A).;false;false
5;false,true,false;phenotype(D, E), complex(D, F).;false;false
5;false,false;enzyme(A, G), interaction(A, H).;true;true
5;false,false,true;enzyme(H, I).;false;false
5;false,false,false;interaction(A, J), interaction(J, J).;false;false
6;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
6;false;interaction(A, D), phenotype(A, E).;true;true
6;false,true;location(D, F), location(A, F).;true;true
6;false,true,true;interaction(D, G), recursion_proteinclass(G, B).;false;false
6;false,true,false;complex(D, H), interaction(D, D).;false;false
6;false,false;interaction(A, I), interaction(I, A).;true;true
6;false,false,true;interaction(I, I).;false;false
6;false,false,false;location(A, J).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
7;false;interaction(D, A), interaction(A, D).;true;true
7;false,true;complex(D, E).;true;true
7;false,true,true;complex(A, F), enzyme(D, G).;false;false
7;false,true,false;interaction(D, D), complex(A, H).;false;false
7;false,false;enzyme(A, I), interaction(J, A).;true;true
7;false,false,true;enzyme(J, K), phenotype(J, L).;false;false
7;false,false,false;interaction(A, M), recursion_proteinclass(M, B).;false;false
8;;proteinclass(A, B) :- interaction(C, A), interaction(A, D).;true;true
8;true;interaction(E, C), recursion_proteinclass(E, B).;false;true
8;true,false;interaction(A, C).;false;false
8;false;location(A, F).;true;true
8;false,true;location(G, F), recursion_proteinclass(G, B).;true;false
8;false,true,true;interaction(H, A), interaction(H, G).;false;false
8;false,false;interaction(A, I), interaction(I, J).;false;true
8;false,false,false;interaction(A, K).;false;false
9;;proteinclass(A, B) :- interaction(C, A), interaction(C, C).;true;true
9;true;recursion_proteinclass(C, B), interaction(A, C).;false;false
9;false;enzyme(A, D), interaction(A, E).;true;true
9;false,true;interaction(E, F), recursion_proteinclass(F, B).;false;true
9;false,true,false;interaction(E, A).;false;false
9;false,false;interaction(G, A), phenotype(A, H).;true;true
9;false,false,true;interaction(I, G), recursion_proteinclass(I, B).;false;false
9;false,false,false;interaction(A, J), enzyme(J, K).;false;false


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.8581489350995123;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( follows(D, A), follows(D, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), follows(E, G) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, H), tweets(A, I) )
%   | | | then return -0.016851064900487718;  // std dev = 2.092, 40.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=5 */
%   | | | else return 0.16849376268571922;  // std dev = 2.491, 29.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=9 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(D, A), follows(D, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.7194734122109542;  // std dev = 5.16e-08, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then return 0.7194734122109544;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(F, A), follows(G, F) )
%   | | then if ( recursion_accounttype(G, B) )
%   | | | then return 0.8482818621711194;  // std dev = 0.017, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return -0.14510369980092286;  // std dev = 0.059, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | | else if ( follows(A, H) )
%   | | | then return 0.13654743112476025;  // std dev = 2.383, 28.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=8 */
%   | | | else return 0.28082031816523967;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, A) )
%   | then if ( follows(A, D), follows(C, E) )
%   | | then return 0.07123632054490128;  // std dev = 2.315, 53.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=15 */
%   | | else return -0.12325565285144188;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.37114400385468466;  // std dev = 1.960, 16.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=9 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5553664367462845;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(H, A) )
%   | | then return -0.14472224314757773;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( follows(A, I), follows(I, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.19424174496165905;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, C) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then return 0.46093951618870893;  // std dev = 1.036, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | else return 0.46287685265415357;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(F, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.41751358415830997;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(G, A), follows(A, H) )
%   | | then if ( tweets(A, I), tweets(G, I) )
%   | | | then return -0.10214313751132052;  // std dev = 0.827, 29.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=1 */
%   | | | else return 0.01115626583924979;  // std dev = 0.738, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.04596521407710666;  // std dev = 2.079, 24.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
%   | | | else return 0.03653676091147576;  // std dev = 2.062, 23.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=6 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.34699618377330144;  // std dev = 1.032, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   else if ( follows(D, A), tweets(D, E) )
%   | then if ( follows(A, F), follows(D, F) )
%   | | then if ( follows(G, D), recursion_accounttype(G, B) )
%   | | | then return 0.699663855007445;  // std dev = 0.044, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return -0.12317148742492205;  // std dev = 0.073, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0.32071184716014967;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.13025221821487626;  // std dev = 0.037, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then return 0.7601797663350299;  // std dev = 0.048, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( tweets(A, I), follows(A, J) )
%   | | | then return -0.22042448149273255;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return -0.24907982261795805;  // std dev = 0.009, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.32420251215852935;  // std dev = 0.134, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(D, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(D, E) )
%   | | | then return -0.07376093132421098;  // std dev = 1.000, 41.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return -0.11532621084727074;  // std dev = 0.008, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( follows(G, A), follows(G, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.13717898809392273;  // std dev = 2.110, 30.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.2102520971519039;  // std dev = 0.974, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0.3413357566962406;  // std dev = 0.394, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( tweets(D, F), follows(D, D) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10423856731482005;  // std dev = 0.064, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | else if ( follows(G, A), follows(A, G) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.07411228666327366;  // std dev = 0.380, 32.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=12 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.2372168825718555;  // std dev = 0.079, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( tweets(D, E) )
%   | | then if ( tweets(A, F) )
%   | | | then return -0.0733573288913607;  // std dev = 0.590, 33.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=1 */
%   | | | else return 0.018867386057876433;  // std dev = 0.479, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then return -3.105670167647159E-4;  // std dev = 0.330, 31.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=8 */
%   | | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0.1497258993262205;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.10721791182343993;  // std dev = 1.088, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(D, A) )
%   then if ( follows(C, E), recursion_accounttype(E, B) )
%   | then return 0.11732501696465236;  // std dev = 1.393, 17.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | else if ( follows(C, A) )
%   | | then return -0.08678423153531964;  // std dev = 0.035, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | | else return -0.07782826744438728;  // std dev = 0.015, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else if ( recursion_accounttype(F, B) )
%   | then if ( follows(A, G), follows(F, G) )
%   | | then return 0.5091134644942983;  // std dev = 0.359, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.3473485069537679;  // std dev = 0.494, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then return -0.10723423392260764;  // std dev = 0.000833, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( follows(J, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.2420680328612769;  // std dev = 0.072, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(C, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0.19651349772442261;  // std dev = 0.411, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else if ( follows(A, D) )
%   | | | then return -0.08418142967745151;  // std dev = 0.062, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | | else return -0.08871259255678539;  // std dev = 0.042, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( follows(A, F) )
%   | | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | | then return 0.2467086554089733;  // std dev = 1.238, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return -0.15531856431714253;  // std dev = 0.577, 17.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=1 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.14888202811554416;  // std dev = 0.837, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */


Results
   AUC ROC   = 0.992589
   AUC PR    = 0.347449
   CLL	      = -0.125243
   Precision = 0.340845 at threshold = 0.5
   Recall    = 0.960317
   F1        = 0.503119


Total learning time: 2.78 seconds
Total inference time: 42.407 seconds
AUC ROC: 0.992589


Results scoring model
   AUC ROC   = 0.992523
   AUC PR    = 0.300788
   CLL	      = -0.140697
   Precision = 0.340659 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.508197


Total scoring time: 9.329 seconds
Parameter learned model CLL: -0.140697


Structure after Parameter Learning
[['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(D, A), follows(D, D)', 'false,false': 'follows(A, E), recursion_accounttype(E, B)', 'false,false,true': 'follows(F, A), follows(E, G)', 'false,false,false': 'follows(A, H), tweets(A, I)'}, {'true': [0.0, 0, 15], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 1], 'false,false,true,false': [0.0, 0, 1], 'false,false,false,true': [2.092, 35, 5], 'false,false,false,false': [2.491, 20, 9]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, C)', 'true,false': 'follows(D, A), follows(D, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,false': 'follows(F, A), follows(G, F)', 'false,false,true': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(A, H)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [5.16e-08, 0, 14], 'false,true': [2.11e-08, 0, 3], 'false,false,true,true': [0.017, 0, 2], 'false,false,true,false': [0.059, 36, 0], 'false,false,false,true': [2.383, 20, 8], 'false,false,false,false': [1.491, 5, 4]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, A)', 'true,true': 'follows(A, D), follows(C, E)', 'true,false': 'follows(F, A), recursion_accounttype(F, B)', 'false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false': 'follows(H, A)', 'false,false,false': 'follows(A, I), follows(I, A)'}, {'true,true,true': [2.315, 38, 15], 'true,true,false': [0.0, 2, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [1.96, 7, 9], 'false,true': [1.05e-08, 0, 3], 'false,false,true': [0.0, 6, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.549, 6, 4]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D), follows(D, C)', 'true,true': 'recursion_accounttype(D, B)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(F, F)', 'false,false': 'follows(G, A), follows(A, H)', 'false,false,true': 'tweets(A, I), tweets(G, I)', 'false,false,false': 'tweets(A, J)'}, {'true,true,true': [1.036, 1, 13], 'true,true,false': [0.0, 0, 1], 'true,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.0, 0, 3], 'false,false,true,true': [0.827, 28, 1], 'false,false,true,false': [0.738, 4, 1], 'false,false,false,true': [2.079, 18, 6], 'false,false,false,false': [2.062, 17, 6]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A), tweets(D, E)', 'false,true': 'follows(A, F), follows(D, F)', 'false,true,true': 'follows(G, D), recursion_accounttype(G, B)', 'false,true,false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(H, B)', 'false,false,false': 'tweets(A, I), follows(A, J)'}, {'true': [1.032, 1, 14], 'false,true,true,true': [0.044, 0, 2], 'false,true,true,false': [0.073, 32, 0], 'false,true,false,true': [0.0, 0, 3], 'false,true,false,false': [0.037, 15, 0], 'false,false,true': [0.048, 0, 12], 'false,false,false,true': [0.0, 8, 0], 'false,false,false,false': [0.009, 8, 0]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(D, D)', 'false,true,false': 'tweets(D, E)', 'false,false': 'follows(F, A)', 'false,false,false': 'follows(G, A), follows(G, G)'}, {'true': [0.134, 0, 15], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [1.0, 38, 3], 'false,true,false,false': [0.0, 0, 0], 'false,false,true': [0.008, 11, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.11, 17, 13]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(D, F), follows(D, D)', 'false,false': 'follows(G, A), follows(A, G)'}, {'true': [0.974, 1, 14], 'false,true,true': [0.394, 0, 5], 'false,true,false,true': [0.0, 0, 0], 'false,true,false,false': [0.064, 35, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.38, 20, 12]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'tweets(D, E)', 'false,true,true': 'tweets(A, F)', 'false,false': 'follows(A, G)', 'false,false,false': 'follows(H, A), recursion_accounttype(H, B)'}, {'true': [0.079, 0, 14], 'false,true,true,true': [0.59, 32, 1], 'false,true,true,false': [0.479, 3, 1], 'false,true,false': [0.0, 0, 0], 'false,false,true': [0.33, 23, 8], 'false,false,false,true': [0.0, 0, 3], 'false,false,false,false': [1.088, 7, 4]}], ['accounttype(A, B)', {'': 'follows(A, C), follows(D, A)', 'true': 'follows(C, E), recursion_accounttype(E, B)', 'true,false': 'follows(C, A)', 'false': 'recursion_accounttype(F, B)', 'false,true': 'follows(A, G), follows(F, G)', 'false,false': 'follows(H, A), follows(I, H)', 'false,false,false': 'follows(J, A)'}, {'true,true': [1.393, 2, 15], 'true,false,true': [0.035, 33, 0], 'true,false,false': [0.015, 6, 0], 'false,true,true': [0.359, 0, 9], 'false,true,false': [0.494, 0, 7], 'false,false,true': [0.000833, 7, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.072, 24, 0]}], ['accounttype(A, B)', {'': 'follows(A, C), follows(C, C)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'follows(A, D)', 'false,false': 'follows(A, F)', 'false,false,true': 'follows(F, G), recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.0, 0, 0], 'false,true,true': [0.411, 0, 18], 'false,true,false,true': [0.062, 26, 0], 'false,true,false,false': [0.042, 10, 0], 'false,false,true,true': [1.238, 1, 8], 'false,false,true,false': [0.577, 16, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.837, 3, 4]}]]
[{'': [-2.3684757858670006e-16, 0.1745685379884941], 'false': [nan, 0.1745685379884941], 'false,false': [0.0, 0.16173072883847922], 'false,false,false': [0.10937500000000004, 0.21403091557669424], 'false,false,true': [0.0, 0.0]}, {'': [2.5376526277146434e-16, 0.16111488089090087], 'false': [1.4802973661668753e-16, 0.14967920854983766], 'false,false': [0.049304370219969834, 0.21733078310449905], 'false,false,false': [0.20275900003109876, 0.24691358024691368], 'false,false,true': [0.000141752560979147, 9.800177055353027e-05], 'true': [nan, 2.5376526277146434e-16], 'true,false': [nan, 1.9032394707859825e-16]}, {'': [0.14708237836648488, 0.18068798138357586], 'false': [3.700743415417188e-17, 0.17692888716443408], 'false,false': [-4.625929269271485e-18, 0.24], 'false,false,false': [nan, 0.24], 'true': [0.09878859598337261, 0.24009192248530897], 'true,false': [nan, 0.24009192248530897], 'true,true': [0.10114093561298391, 0.0]}, {'': [0.07151719315123595, 0.12746977624051944], 'false': [-3.700743415417188e-17, 0.12560570088154815], 'false,false': [0.03772151405238728, 0.1824291179990149], 'false,false,false': [0.18003216939675323, 0.18488488819410243], 'true': [0.07151719315123595, nan], 'true,true': [0.07662531387243798, 0.0], 'false,false,true': [0.023579576404730542, 0.1087957556679651], 'false,true': [nan, -3.700743415417188e-17]}, {'': [0.07101386964777316, 0.12270241214847158], 'false': [0.03454076759481042, 0.24262456206397467], 'false,false': [0.00019290584515811263, 0.00020993755725011443], 'false,true': [0.03769974258961183, 0.02832063351209844], 'false,true,true': [0.000979169886216602, 0.0001678371626451635], 'false,true,false': [0.0, 8.999550458968683e-05], 'false,false,false': [0.0, 9.310826998738808e-06]}, {'': [0.0011912945298839055, 0.07789580430715312], 'false': [0.024407982074980326, 0.12113127663424132], 'false,false': [6.690536295066037e-05, 0.14841550633414596], 'false,false,false': [nan, 0.14841550633414596], 'false,true': [nan, 0.024407982074980326], 'false,true,false': [0.024407982074980326, nan]}, {'': [0.06328825496981454, 0.08209044082524346], 'false': [0.025706557438600435, 0.14421250656557566], 'false,false': [nan, 0.14421250656557566], 'false,true': [0.03112572665301221, 0.00011533063073096825], 'false,true,false': [nan, 0.00011533063073096666]}, {'': [0.00045013026743086416, 0.06718234900652552], 'false': [0.016445969517241508, 0.10444397272938866], 'false,false': [0.10905788033711666, 0.08485563429020289], 'false,false,false': [0.0, 0.10761088093395489], 'false,true': [0.016445969517241508, nan], 'false,true,true': [0.010563935554457633, 0.0573868541543586]}, {'': [0.043355102634408275, 0.1071870330360644], 'false': [0.02974287503881637, 0.0033448039950202224], 'true': [0.1140825547449802, 4.839469163149285e-05], 'false,true': [0.014286196855183952, 0.03489630240215047], 'false,false': [9.923800416145045e-08, 0.0002151469678498182], 'false,false,false': [nan, 0.0002151469678498182], 'true,false': [3.807582234096237e-05, 3.727907113106749e-05]}, {'': [nan, 0.05516723621190932], 'false': [0.02090326623121452, 0.11116959713536505], 'false,false': [0.10836630782886353, 0.10012210920478257], 'false,false,true': [0.17035277144713737, 0.019602522867359456], 'false,false,false': [nan, 0.10012210920478257], 'false,true': [0.009391433166970628, 0.00015990829881861056], 'false,true,false': [0.00014807284442274664, 0.00017585222016409523]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
0;false;follows(A, E), recursion_accounttype(E, B).;true;true
0;false,true;follows(F, A), follows(E, G).;true;true
1;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
1;false;follows(E, A), recursion_accounttype(E, B).;true;true
1;false,false;follows(F, A), follows(G, F).;true;true
1;false,false,true;recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C).;true;true
2;true;follows(D, A).;true;true
2;true,true;follows(A, D), follows(C, E).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,false;follows(H, A).;true;true
3;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
3;true;recursion_accounttype(D, B).;true;true
3;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(D, A), tweets(D, E).;true;true
4;false,true;follows(A, F), follows(D, F).;true;true
4;false,true,true;follows(G, D), recursion_accounttype(G, B).;true;true
4;false,true,false;recursion_accounttype(D, B).;true;true
4;false,false;recursion_accounttype(H, B).;true;true
4;false,false,false;tweets(A, I), follows(A, J).;true;true
5;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
5;false;follows(A, D), follows(D, A).;true;true
5;false,false;follows(F, A).;true;true
6;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
6;false;follows(D, A).;true;true
6;false,true;follows(E, D), recursion_accounttype(E, B).;true;true
7;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
7;false;follows(A, D), follows(D, A).;true;true
7;false,false;follows(A, G).;true;true
7;false,false,false;follows(H, A), recursion_accounttype(H, B).;true;true
8;;accounttype(A, B) :- follows(A, C), follows(D, A).;true;true
8;true;follows(C, E), recursion_accounttype(E, B).;true;true
8;true,false;follows(C, A).;true;true
8;false;recursion_accounttype(F, B).;true;true
8;false,false;follows(H, A), follows(I, H).;true;true
9;;accounttype(A, B) :- follows(D, A).;true;true
9;true;follows(E, D), recursion_accounttype(E, B).;true;true
9;true,false;follows(A, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.8581489350995123;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(D, F) )
%   | | then return 0.3581489350995122;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | else return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(G, A) )
%   | | then if ( tweets(A, H) )
%   | | | then return -0.1148240378734607;  // std dev = 0.986, 37.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=1 */
%   | | | else return 0.024815601766178873;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.35814893509951234;  // std dev = 1.732, 12.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=6 */
%   | | | else return 0.25814893509951237;  // std dev = 1.897, 15.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=6 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.7258496781805742;  // std dev = 0.086, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.7194734122109544;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.8633306757993723;  // std dev = 0.012, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return -0.12998288935330085;  // std dev = 0.027, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | | else if ( follows(A, G), follows(G, H) )
%   | | | then return 0.15149121514628291;  // std dev = 2.151, 21.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=7 */
%   | | | else return 0.23665219147615482;  // std dev = 1.701, 12.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=5 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, A) )
%   | then if ( follows(A, D), follows(C, E) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.09097771810155768;  // std dev = 1.867, 34.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=10 */
%   | | | else return 0.3174963168948583;  // std dev = 0.990, 8.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | | else return -0.11457816500978442;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.7842080912538709;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.21726788359296223;  // std dev = 0.014, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else return 0.16520358032340826;  // std dev = 0.465, 13.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=5 */
%   else if ( follows(I, A), recursion_accounttype(I, B) )
%   | then return 0.5553664367462845;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(J, A) )
%   | | then return -0.11457816500978443;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.5798045239223258;  // std dev = 0.887, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.5223122291292811;  // std dev = 0.163, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then return 0.41751358415830997;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(F, A) )
%   | | then if ( follows(A, G), follows(G, F) )
%   | | | then return -0.1043464555562898;  // std dev = 0.848, 29.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=1 */
%   | | | else return -0.06592524835731144;  // std dev = 0.738, 15.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=1 */
%   | | else if ( tweets(A, H), follows(A, I) )
%   | | | then return 0.04783749078189482;  // std dev = 1.363, 14.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=4 */
%   | | | else return 0.16201015588787554;  // std dev = 2.114, 18.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.3143331006265078;  // std dev = 0.306, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else return 0.3559844273052441;  // std dev = 0.032, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(E, A), tweets(E, F) )
%   | then if ( follows(A, G), follows(E, G) )
%   | | then if ( follows(H, E), recursion_accounttype(H, B) )
%   | | | then return 0.7014712408939485;  // std dev = 0.060, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return -0.11712854397880074;  // std dev = 0.061, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | else if ( recursion_accounttype(E, B) )
%   | | | then return 0.32071184716014967;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.09968317628970942;  // std dev = 0.019, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then return 0.6590952320753639;  // std dev = 0.057, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( tweets(A, J), follows(A, K) )
%   | | | then return -0.1884994091629766;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return -0.31326182735363295;  // std dev = 0.240, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), tweets(A, E) )
%   | then return 0.3292406114289221;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.2653213264659996;  // std dev = 0.023, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( follows(A, F), follows(F, A) )
%   | then if ( tweets(A, G) )
%   | | then return -0.06722643347099692;  // std dev = 0.145, 35.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=2 */
%   | | else return -0.11787903579660697;  // std dev = 0.789, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | else if ( follows(H, A) )
%   | | then return -0.09189822666694913;  // std dev = 0.015, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.08504113234125947;  // std dev = 1.616, 23.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=9 */
%   | | | else return 0.3079186836960715;  // std dev = 0.697, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.28353700012198085;  // std dev = 0.064, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.23613388255795753;  // std dev = 0.056, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(E, A) )
%   | then if ( follows(F, E), recursion_accounttype(F, B) )
%   | | then return 0.3498850755240765;  // std dev = 0.393, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.0966688288339804;  // std dev = 0.085, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.5014442376466609;  // std dev = 0.206, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.1958159620752759;  // std dev = 0.082, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.08027528578992042;  // std dev = 0.834, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.019455018201616853;  // std dev = 0.762, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.20180459086879043;  // std dev = 0.041, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else return -0.1823242025935229;  // std dev = 1.012, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else if ( follows(A, E), follows(E, A) )
%   | then if ( tweets(A, F) )
%   | | then return -0.059623747471282545;  // std dev = 0.130, 21.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=1 */
%   | | else return -0.02526081901930192;  // std dev = 0.501, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( tweets(A, H) )
%   | | | then return 0.04009588502088373;  // std dev = 0.690, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | | | else return 0.06778296123423858;  // std dev = 0.985, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else if ( follows(I, A), recursion_accounttype(I, B) )
%   | | | then return 0.15624714395453765;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.08267660323280933;  // std dev = 1.216, 24.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=4 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(D, A) )
%   then if ( follows(C, E), recursion_accounttype(E, B) )
%   | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then if ( tweets(A, G), tweets(F, G) )
%   | | | then return 0.05354978494606254;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.1610634271206626;  // std dev = 0.020, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.4707561441338978;  // std dev = 0.079, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return -0.08896044053794225;  // std dev = 0.013, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   else if ( recursion_accounttype(H, B) )
%   | then if ( tweets(A, I) )
%   | | then if ( follows(J, A) )
%   | | | then return 0.13673608653918845;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.34135034671515657;  // std dev = 0.129, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.4053245499175115;  // std dev = 0.054, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(K, A), follows(L, K) )
%   | | then return -0.07257312847781971;  // std dev = 0.008, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.20395104648800866;  // std dev = 0.072, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), tweets(A, G) )
%   | | | then return 0.16899352196873746;  // std dev = 0.014, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.1300583823017564;  // std dev = 0.020, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.3580063018540718;  // std dev = 0.074, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return -0.07967362046648692;  // std dev = 0.012, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
%   else if ( tweets(A, H) )
%   | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | then return 0.26999477665877064;  // std dev = 0.114, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.1480585417665982;  // std dev = 0.055, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( follows(A, J) )
%   | | then if ( follows(K, J), recursion_accounttype(K, B) )
%   | | | then return 0.3100850352584349;  // std dev = 0.122, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.16675248159982659;  // std dev = 0.011, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0.009676418534628611;  // std dev = 0.624, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */


Results
   AUC ROC   = 0.993137
   AUC PR    = 0.356595
   CLL	      = -0.11409
   Precision = 0.344633 at threshold = 0.5
   Recall    = 0.968254
   F1        = 0.508333


Total learning time: 5.07 seconds
Total inference time: 63.51 seconds
AUC ROC: 0.993137


Results scoring model
   AUC ROC   = 0.99339
   AUC PR    = 0.30721
   CLL	      = -0.129349
   Precision = 0.340659 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.508197


Total scoring time: 14.324 seconds
Refined model CLL: -0.129349


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.993137
   AUC PR    = 0.356595
   CLL	      = -0.11409
   Precision = 0.344633 at threshold = 0.5
   Recall    = 0.968254
   F1        = 0.508333


Total learning time: 31.503 seconds
Total inference time: 63.51 seconds
AUC ROC: 0.993137
Total revision time: 31.503
Best scored revision CLL: -0.129349


Dataset: 7_yeast_twitter, Fold: 1, Type: Transfer (trRDN-B), Time: 00:02:18
{'AUC ROC': 0.993137, 'AUC PR': 0.356595, 'CLL': -0.11409, 'Precision': [0.344633, 0.5], 'Recall': 0.968254, 'F1': 0.508333, 'Learning time': 31.503, 'Inference time': 63.51, 'parameter_0.2': {'AUC ROC': 0.992589, 'AUC PR': 0.347449, 'CLL': -0.125243, 'Precision': [0.340845, 0.5], 'Recall': 0.960317, 'F1': 0.503119, 'Learning time': 2.78, 'Inference time': 42.407}}


Amount of data: 0.4
******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;false;true
0;false;interaction(A, D), interaction(D, D).;true;true
0;false,true;interaction(E, A), interaction(D, E).;true;true
0;false,true,true;interaction(A, A).;false;false
0;false,true,false;enzyme(D, F), phenotype(A, G).;false;false
0;false,false;interaction(H, A), recursion_proteinclass(H, B).;true;true
0;false,false,true;interaction(A, I), interaction(J, H).;false;false
0;false,false,false;interaction(K, A), complex(A, L).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
1;true;interaction(C, C).;false;true
1;true,false;interaction(A, D), interaction(D, D).;true;false
1;true,false,true;complex(C, E).;false;false
1;false;interaction(A, F), recursion_proteinclass(F, B).;false;true
1;false,false;interaction(A, G), interaction(G, H).;true;true
1;false,false,true;recursion_proteinclass(H, B).;false;false
1;false,false,false;interaction(I, A), location(I, J).;false;false
2;;proteinclass(A, B) :- interaction(C, A), enzyme(C, D).;true;true
2;true;location(A, E), location(C, E).;false;true
2;true,false;interaction(A, F), phenotype(A, G).;true;true
2;true,false,true;interaction(F, A), interaction(H, C).;false;false
2;true,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;false;interaction(A, J), recursion_proteinclass(J, B).;false;true
2;false,false;interaction(A, K), enzyme(K, L).;false;true
2;false,false,false;interaction(M, A), interaction(A, M).;false;false
3;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
3;true;interaction(D, C), interaction(C, D).;true;false
3;true,true;recursion_proteinclass(D, B).;false;false
3;false;interaction(A, E), recursion_proteinclass(E, B).;true;true
3;false,true;interaction(E, F), interaction(F, F).;false;false
3;false,false;interaction(A, G), interaction(H, A).;true;true
3;false,false,true;complex(A, I), complex(G, I).;false;false
3;false,false,false;enzyme(A, J), complex(A, K).;false;false
4;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
4;false;interaction(A, D), complex(D, E).;true;true
4;false,true;interaction(F, A), interaction(F, D).;true;true
4;false,true,true;interaction(D, G), recursion_proteinclass(G, B).;false;false
4;false,true,false;recursion_proteinclass(D, B).;false;false
4;false,false;enzyme(A, H), location(A, I).;true;true
4;false,false,true;enzyme(J, H), recursion_proteinclass(J, B).;false;false
4;false,false,false;complex(A, K), interaction(L, A).;false;false
5;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;false;true
5;false;interaction(D, A), interaction(A, D).;true;true
5;false,true;interaction(D, D).;true;true
5;false,true,true;interaction(A, A).;false;false
5;false,true,false;phenotype(D, E), complex(D, F).;false;false
5;false,false;enzyme(A, G), interaction(A, H).;true;true
5;false,false,true;enzyme(H, I).;false;false
5;false,false,false;interaction(A, J), interaction(J, J).;false;false
6;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
6;false;interaction(A, D), phenotype(A, E).;true;true
6;false,true;location(D, F), location(A, F).;true;true
6;false,true,true;interaction(D, G), recursion_proteinclass(G, B).;false;false
6;false,true,false;complex(D, H), interaction(D, D).;false;false
6;false,false;interaction(A, I), interaction(I, A).;true;true
6;false,false,true;interaction(I, I).;false;false
6;false,false,false;location(A, J).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
7;false;interaction(D, A), interaction(A, D).;true;true
7;false,true;complex(D, E).;true;true
7;false,true,true;complex(A, F), enzyme(D, G).;false;false
7;false,true,false;interaction(D, D), complex(A, H).;false;false
7;false,false;enzyme(A, I), interaction(J, A).;true;true
7;false,false,true;enzyme(J, K), phenotype(J, L).;false;false
7;false,false,false;interaction(A, M), recursion_proteinclass(M, B).;false;false
8;;proteinclass(A, B) :- interaction(C, A), interaction(A, D).;true;true
8;true;interaction(E, C), recursion_proteinclass(E, B).;false;true
8;true,false;interaction(A, C).;false;false
8;false;location(A, F).;true;true
8;false,true;location(G, F), recursion_proteinclass(G, B).;true;false
8;false,true,true;interaction(H, A), interaction(H, G).;false;false
8;false,false;interaction(A, I), interaction(I, J).;false;true
8;false,false,false;interaction(A, K).;false;false
9;;proteinclass(A, B) :- interaction(C, A), interaction(C, C).;true;true
9;true;recursion_proteinclass(C, B), interaction(A, C).;false;false
9;false;enzyme(A, D), interaction(A, E).;true;true
9;false,true;interaction(E, F), recursion_proteinclass(F, B).;false;true
9;false,true,false;interaction(E, A).;false;false
9;false,false;interaction(G, A), phenotype(A, H).;true;true
9;false,false,true;interaction(I, G), recursion_proteinclass(I, B).;false;false
9;false,false,false;interaction(A, J), enzyme(J, K).;false;false


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.8581489350995116;  // std dev = 2.06e-07, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   else if ( follows(D, A), follows(D, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), follows(E, G) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(A, H), tweets(A, I) )
%   | | | then return -0.011416282291792016;  // std dev = 3.230, 92.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=12 */
%   | | | else return 0.12600607795665522;  // std dev = 3.314, 56.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=15 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(D, A), follows(D, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.7240775253490538;  // std dev = 0.085, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then return 0.7194734122109545;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(F, A), follows(G, F) )
%   | | then if ( recursion_accounttype(G, B) )
%   | | | then return 0.8545542807701819;  // std dev = 0.021, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.14646911392915601;  // std dev = 0.079, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
%   | | else if ( follows(A, H) )
%   | | | then return 0.20920779945518986;  // std dev = 3.097, 42.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=15 */
%   | | | else return 0.25877425514760294;  // std dev = 1.708, 12.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=5 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, A) )
%   | then if ( follows(A, D), follows(C, E) )
%   | | then return 0.11961734111505916;  // std dev = 3.240, 89.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=31 */
%   | | else return -0.14009758217706303;  // std dev = 0.060, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.2068047469996084;  // std dev = 3.154, 43.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=17 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5553664367462846;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(H, A) )
%   | | then return -0.0872848403338156;  // std dev = 0.807, 16.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=1 */
%   | | else if ( follows(A, I), follows(I, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.13792125030920116;  // std dev = 1.826, 15.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=5 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, C) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then return 0.48839305166260527;  // std dev = 0.985, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   | | else return 0.21142463792037405;  // std dev = 0.842, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(F, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.41751358415830986;  // std dev = 2.98e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(G, A), follows(A, H) )
%   | | then if ( tweets(A, I), tweets(G, I) )
%   | | | then return -0.05990411879712011;  // std dev = 1.777, 56.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=5 */
%   | | | else return -0.08392314567621564;  // std dev = 0.784, 13.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=1 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.07707238783679173;  // std dev = 2.753, 42.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=11 */
%   | | | else return 0.05491078306808731;  // std dev = 2.685, 37.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=10 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.34985053320716836;  // std dev = 1.269, 29.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=27 */
%   else if ( follows(D, A), tweets(D, E) )
%   | then if ( follows(A, F), follows(D, F) )
%   | | then if ( follows(G, D), recursion_accounttype(G, B) )
%   | | | then return 0.7063838165931173;  // std dev = 0.022, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.13082726601529412;  // std dev = 0.076, 71.000 (wgt'ed) examples reached here.  /* #neg=71 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0.3207118471601497;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.10080267511510548;  // std dev = 0.815, 25.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=1 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then return 0.7762777071860338;  // std dev = 0.042, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else if ( tweets(A, I), follows(A, J) )
%   | | | then return -0.21109604765052442;  // std dev = 1.49e-08, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | | else return -0.23061713089256766;  // std dev = 0.005, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.3075256416070011;  // std dev = 0.183, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(D, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(D, E) )
%   | | | then return -0.05602648432964276;  // std dev = 1.645, 79.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=8 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return -0.0825970579825147;  // std dev = 0.158, 27.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=1 */
%   | | else if ( follows(G, A), follows(G, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.05601161965457698;  // std dev = 3.091, 70.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=22 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.20945400093123714;  // std dev = 1.368, 29.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=27 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0.33906733859966526;  // std dev = 0.974, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | else if ( tweets(D, F), follows(D, D) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10889836885666244;  // std dev = 0.095, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */
%   | else if ( follows(G, A), follows(A, G) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.03729568318835799;  // std dev = 0.361, 69.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=20 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1702931132862554;  // std dev = 1.356, 29.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=27 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( tweets(D, E) )
%   | | then if ( tweets(A, F) )
%   | | | then return -0.04284714347876303;  // std dev = 1.225, 50.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=5 */
%   | | | else return -0.06840686430143253;  // std dev = 0.538, 13.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then return 0.025732377558848336;  // std dev = 0.348, 56.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=15 */
%   | | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0.15215382637492447;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.01956862197007426;  // std dev = 1.612, 28.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=6 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(D, A) )
%   then if ( follows(C, E), recursion_accounttype(E, B) )
%   | then return 0.2553152301524001;  // std dev = 0.631, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | else if ( follows(C, A) )
%   | | then return -0.09814274804169051;  // std dev = 0.028, 76.000 (wgt'ed) examples reached here.  /* #neg=76 */
%   | | else return -0.08577462345538532;  // std dev = 0.026, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( recursion_accounttype(F, B) )
%   | then if ( follows(A, G), follows(F, G) )
%   | | then return 0.4920507199084391;  // std dev = 1.193, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | else return 0.3302077026950459;  // std dev = 0.853, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then return -0.10819839402741863;  // std dev = 0.004, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( follows(J, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.20443451174961386;  // std dev = 0.050, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(C, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0.19926179517256837;  // std dev = 0.748, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | else if ( follows(A, D) )
%   | | | then return -0.0893422279821514;  // std dev = 0.017, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | | | else return -0.08951501673016306;  // std dev = 0.040, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( follows(A, F) )
%   | | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | | then return 0.36675863284425986;  // std dev = 1.208, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | | else return -0.1497293385176544;  // std dev = 0.615, 29.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=1 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.03352401470653735;  // std dev = 1.251, 16.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=5 */


Results
   AUC ROC   = 0.993357
   AUC PR    = 0.3985
   CLL	      = -0.124611
   Precision = 0.33913 at threshold = 0.5
   Recall    = 0.928571
   F1        = 0.496815


Total learning time: 3.997 seconds
Total inference time: 43.678 seconds
AUC ROC: 0.993357


Results scoring model
   AUC ROC   = 0.994427
   AUC PR    = 0.421968
   CLL	      = -0.131187
   Precision = 0.342697 at threshold = 0.5
   Recall    = 0.983871
   F1        = 0.508333


Total scoring time: 16.71 seconds
Parameter learned model CLL: -0.131187


Structure after Parameter Learning
[['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(D, A), follows(D, D)', 'false,false': 'follows(A, E), recursion_accounttype(E, B)', 'false,false,true': 'follows(F, A), follows(E, G)', 'false,false,false': 'follows(A, H), tweets(A, I)'}, {'true': [2.06e-07, 0, 31], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 2], 'false,false,true,false': [0.816, 1, 2], 'false,false,false,true': [3.23, 80, 12], 'false,false,false,false': [3.314, 41, 15]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, C)', 'true,false': 'follows(D, A), follows(D, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,false': 'follows(F, A), follows(G, F)', 'false,false,true': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(A, H)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [0.085, 0, 27], 'false,true': [0.0, 0, 8], 'false,false,true,true': [0.021, 0, 7], 'false,false,true,false': [0.079, 90, 0], 'false,false,false,true': [3.097, 27, 15], 'false,false,false,false': [1.708, 7, 5]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, A)', 'true,true': 'follows(A, D), follows(C, E)', 'true,false': 'follows(F, A), recursion_accounttype(F, B)', 'false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false': 'follows(H, A)', 'false,false,false': 'follows(A, I), follows(I, A)'}, {'true,true,true': [3.24, 58, 31], 'true,true,false': [0.06, 9, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.154, 26, 17], 'false,true': [0.0, 0, 8], 'false,false,true': [0.807, 15, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.826, 10, 5]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D), follows(D, C)', 'true,true': 'recursion_accounttype(D, B)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(F, F)', 'false,false': 'follows(G, A), follows(A, H)', 'false,false,true': 'tweets(A, I), tweets(G, I)', 'false,false,false': 'tweets(A, J)'}, {'true,true,true': [0.985, 1, 25], 'true,true,false': [0.842, 1, 2], 'true,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 0], 'false,true,false': [2.98e-08, 0, 8], 'false,false,true,true': [1.777, 51, 5], 'false,false,true,false': [0.784, 12, 1], 'false,false,false,true': [2.753, 31, 11], 'false,false,false,false': [2.685, 27, 10]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A), tweets(D, E)', 'false,true': 'follows(A, F), follows(D, F)', 'false,true,true': 'follows(G, D), recursion_accounttype(G, B)', 'false,true,false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(H, B)', 'false,false,false': 'tweets(A, I), follows(A, J)'}, {'true': [1.269, 2, 27], 'false,true,true,true': [0.022, 0, 6], 'false,true,true,false': [0.076, 71, 0], 'false,true,false,true': [0.0, 0, 8], 'false,true,false,false': [0.815, 24, 1], 'false,false,true': [0.042, 0, 20], 'false,false,false,true': [1.49e-08, 20, 0], 'false,false,false,false': [0.005, 17, 0]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(D, D)', 'false,true,false': 'tweets(D, E)', 'false,false': 'follows(F, A)', 'false,false,false': 'follows(G, A), follows(G, G)'}, {'true': [0.183, 0, 31], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [1.645, 71, 8], 'false,true,false,false': [0.0, 0, 0], 'false,false,true': [0.158, 26, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [3.091, 48, 22]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(D, F), follows(D, D)', 'false,false': 'follows(G, A), follows(A, G)'}, {'true': [1.368, 2, 27], 'false,true,true': [0.974, 1, 15], 'false,true,false,true': [0.0, 0, 0], 'false,true,false,false': [0.095, 86, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.361, 49, 20]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'tweets(D, E)', 'false,true,true': 'tweets(A, F)', 'false,false': 'follows(A, G)', 'false,false,false': 'follows(H, A), recursion_accounttype(H, B)'}, {'true': [1.356, 2, 27], 'false,true,true,true': [1.225, 45, 5], 'false,true,true,false': [0.538, 12, 1], 'false,true,false': [0.0, 0, 0], 'false,false,true': [0.348, 41, 15], 'false,false,false,true': [0.0, 0, 8], 'false,false,false,false': [1.612, 22, 6]}], ['accounttype(A, B)', {'': 'follows(A, C), follows(D, A)', 'true': 'follows(C, E), recursion_accounttype(E, B)', 'true,false': 'follows(C, A)', 'false': 'recursion_accounttype(F, B)', 'false,true': 'follows(A, G), follows(F, G)', 'false,false': 'follows(H, A), follows(I, H)', 'false,false,false': 'follows(J, A)'}, {'true,true': [0.631, 0, 31], 'true,false,true': [0.028, 76, 0], 'true,false,false': [0.026, 5, 0], 'false,true,true': [1.193, 1, 17], 'false,true,false': [0.853, 0, 14], 'false,false,true': [0.004, 15, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.05, 47, 0]}], ['accounttype(A, B)', {'': 'follows(A, C), follows(C, C)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'follows(A, D)', 'false,false': 'follows(A, F)', 'false,false,true': 'follows(F, G), recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.0, 0, 0], 'false,true,true': [0.748, 0, 40], 'false,true,false,true': [0.017, 39, 0], 'false,true,false,false': [0.04, 11, 0], 'false,false,true,true': [1.208, 1, 16], 'false,false,true,false': [0.615, 28, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.251, 11, 5]}]]
[{'': [1.375244004696968e-15, 0.16156179247298075], 'false': [nan, 0.16156179247298075], 'false,false': [0.15999999999999986, 0.1491508400292189], 'false,false,true': [0.0, 0.22222222222222224], 'false,false,false': [0.11342155009451742, 0.19610969387755114]}, {'': [0.00026497322235510926, 0.1613433802319074], 'false': [0.0, 0.14604743577282048], 'false,false': [0.06716237351218202, 0.23205207407283301], 'false,false,false': [0.2283622592139801, 0.24305555555555544], 'false,false,true': [6.196805957716021e-05, 6.856345021454639e-05], 'true': [nan, 0.00026497322235510926], 'true,false': [nan, 0.00026497322235517507]}, {'': [0.15152696527920798, 0.15867727232076173], 'false': [-1.1102230246251565e-16, 0.14120266221852376], 'true': [0.1127672707850966, 0.23129349712144123], 'true,false': [nan, 0.23129349712144123], 'false,false': [0.040705961846003, 0.22222222222222213], 'false,false,false': [nan, 0.22222222222222213], 'true,true': [0.11793539519456667, 0.00040297821674634447]}, {'': [0.06502353467256519, 0.13136874151416855], 'false': [1.1102230246251565e-16, 0.12976696032178037], 'false,false': [0.054760209820153186, 0.18726349773131612], 'false,false,false': [0.18040689744057548, 0.19478555496449798], 'true': [0.06502353467256519, nan], 'true,true': [0.03729821284183257, 0.23653382763719935], 'false,false,true': [0.05637613314550844, 0.04733108956598621], 'false,true': [nan, 1.1102230246251565e-16]}, {'': [0.0555482831508133, 0.11839458060786359], 'false': [0.052079912579682044, 0.22619186707849667], 'false,false': [8.69373634207804e-05, 9.524739022380622e-05], 'false,true': [0.05044266722212869, 0.052760411738949756], 'false,true,false': [-4.163336342344337e-17, 0.026571139255671502], 'false,true,true': [7.917840249316299e-05, 8.14070757653788e-05], 'false,false,false': [1.1102230246251566e-17, 1.3179050809553061e-06]}, {'': [0.0010768320195208767, 0.07694864899542851], 'false': [0.03426856881532925, 0.10928672284585782], 'false,false': [0.024863959785149718, 0.13650201675310122], 'false,false,false': [nan, 0.13650201675310122], 'false,true': [nan, 0.03426856881532925], 'false,true,false': [0.03426856881532925, nan]}, {'': [0.06456628692051514, 0.07531362896390024], 'false': [0.03593951112839864, 0.1300803170587758], 'false,false': [nan, 0.1300803170587758], 'false,true': [0.05934995838570227, 0.00010591828729711576], 'false,true,false': [nan, 0.00010591828729711576]}, {'': [0.06338699440287007, 0.07457549307654696], 'false': [0.02853293447076691, 0.1033065480972438], 'false,false': [0.12115388650824788, 0.07521357758635681], 'false,false,false': [-3.469446951953614e-18, 0.09279676308755302], 'false,true': [0.02853293447076691, nan], 'false,true,true': [0.030021373781293152, 0.02228967636123824]}, {'': [0.02847729208814286, 0.10768796044924385], 'false': [0.07361795550615544, 0.001738550066047875], 'false,true': [0.07902001297634095, 0.05193879929532495], 'true': [0.012852415551346036, 2.6861500267311225e-05], 'false,false': [8.86973874701195e-07, 5.246443666616333e-05], 'false,false,false': [nan, 5.246443666616333e-05], 'true,false': [1.0106532215284494e-05, 0.00013800913268948584]}, {'': [nan, 0.05707784278163782], 'false': [0.026809319375413556, 0.10101597733340074], 'false,false': [0.10211009734623284, 0.0978272724449624], 'false,false,true': [0.08583939687987432, 0.013062941615985769], 'false,false,false': [nan, 0.0978272724449624], 'false,true': [0.013987663246274967, 3.809968389583141e-05], 'false,true,false': [7.062150241930707e-06, 0.000148118561026652]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
0;false;follows(A, E), recursion_accounttype(E, B).;true;true
0;false,true;follows(F, A), follows(E, G).;true;true
1;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
1;false;follows(E, A), recursion_accounttype(E, B).;true;true
1;false,false;follows(F, A), follows(G, F).;true;true
1;false,false,true;recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C).;true;true
2;true;follows(D, A).;true;true
2;true,true;follows(A, D), follows(C, E).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
3;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
3;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(D, A), tweets(D, E).;true;true
4;false,true;follows(A, F), follows(D, F).;true;true
4;false,true,true;follows(G, D), recursion_accounttype(G, B).;true;true
4;false,true,false;recursion_accounttype(D, B).;true;true
4;false,false;recursion_accounttype(H, B).;true;true
4;false,false,false;tweets(A, I), follows(A, J).;true;true
5;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
6;false;follows(D, A).;true;true
6;false,true;follows(E, D), recursion_accounttype(E, B).;true;true
7;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
7;false;follows(A, D), follows(D, A).;true;true
7;false,false;follows(A, G).;true;true
7;false,false,false;follows(H, A), recursion_accounttype(H, B).;true;true
8;;accounttype(A, B) :- follows(A, C), follows(D, A).;true;true
8;true;follows(C, E), recursion_accounttype(E, B).;true;true
8;true,false;follows(C, A).;true;true
8;false;recursion_accounttype(F, B).;true;true
8;false,false;follows(H, A), follows(I, H).;true;true
9;;accounttype(A, B) :- follows(D, A).;true;true
9;true;follows(E, D), recursion_accounttype(E, B).;true;true
9;true,false;follows(A, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.8581489350995116;  // std dev = 2.06e-07, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   else if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(D, F) )
%   | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.8581489350995122;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(H, G), follows(H, A) )
%   | | | then return -0.12057446915580684;  // std dev = 0.989, 47.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=1 */
%   | | | else return -0.0023161811795574592;  // std dev = 2.272, 43.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=6 */
%   | | else if ( follows(A, I), tweets(A, J) )
%   | | | then return 0.11740819435877163;  // std dev = 2.277, 27.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=7 */
%   | | | else return 0.21926004621062345;  // std dev = 2.882, 36.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=13 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.7194734122109543;  // std dev = 5.96e-08, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else return 0.556766728629559;  // std dev = 0.869, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then return 0.7194734122109545;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(F, A), follows(G, F) )
%   | | then if ( recursion_accounttype(G, B) )
%   | | | then return 0.8603980530985514;  // std dev = 0.013, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.13372463692750952;  // std dev = 0.061, 79.000 (wgt'ed) examples reached here.  /* #neg=79 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return 0.19686096139634512;  // std dev = 2.988, 39.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=14 */
%   | | | else return 0.4293092879518875;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=6 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, A) )
%   | then if ( follows(A, D), follows(C, E) )
%   | | then return 0.13219119119050374;  // std dev = 0.344, 88.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=31 */
%   | | else return -0.1308621817374383;  // std dev = 0.041, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( follows(A, F), follows(F, G) )
%   | | then if ( recursion_accounttype(G, B) )
%   | | | then return 0.72324471142211;  // std dev = 0.993, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | | else return -0.19224900596880815;  // std dev = 0.047, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | else return -0.06752938759958851;  // std dev = 0.906, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.5553664367462846;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(I, A) )
%   | | then return -0.05856285389520381;  // std dev = 0.216, 14.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=1 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.7597721368785774;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.009772136878577475;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.5235456107852555;  // std dev = 0.227, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.41751358415830986;  // std dev = 2.98e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(E, A) )
%   | | then if ( follows(F, E), follows(F, A) )
%   | | | then return -0.10927083554899004;  // std dev = 0.835, 60.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=1 */
%   | | | else return -0.015553377703176895;  // std dev = 1.894, 41.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=6 */
%   | | else if ( tweets(A, G), follows(A, H) )
%   | | | then return 0.05824702219090385;  // std dev = 1.918, 27.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=7 */
%   | | | else return 0.15503562804975493;  // std dev = 2.459, 31.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=13 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, D) )
%   | | then return 0.393324483663517;  // std dev = 2.11e-08, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else return 0.193324483663517;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.4063240639746593;  // std dev = 0.219, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(F, A), tweets(F, G) )
%   | then if ( follows(A, H), follows(F, H) )
%   | | then if ( follows(I, F), recursion_accounttype(I, B) )
%   | | | then return 0.7025167468044748;  // std dev = 0.039, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.12157340887383315;  // std dev = 0.087, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0.3207118471601497;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.06427453130697491;  // std dev = 0.826, 17.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=1 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then return 0.6463615976651782;  // std dev = 0.052, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return -0.21988422626267448;  // std dev = 0.070, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( follows(E, F), follows(F, A) )
%   | | then return 0.3095133594120627;  // std dev = 0.058, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.3184037729143742;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else return 0.2774636810493592;  // std dev = 0.109, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), follows(H, A) )
%   | | then return -0.08968112740164344;  // std dev = 0.091, 56.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=1 */
%   | | else return -0.01838377452257931;  // std dev = 0.242, 50.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=8 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.4559073433334401;  // std dev = 0.369, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return -0.14905030938686528;  // std dev = 0.055, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.03937284016596489;  // std dev = 0.896, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return 0.12336376019832805;  // std dev = 1.070, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then return 0.27020018911819915;  // std dev = 0.057, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.1819686359067689;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(E, A) )
%   | then if ( follows(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return 0.2060866036099132;  // std dev = 1.05e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.5758139213272149;  // std dev = 0.199, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return -0.10437420572550307;  // std dev = 0.124, 76.000 (wgt'ed) examples reached here.  /* #neg=76 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.3784458172678922;  // std dev = 0.087, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.13215351520159102;  // std dev = 0.059, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.03054021198029179;  // std dev = 0.895, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return -0.07557163856485206;  // std dev = 1.243, 14.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=3 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.20938035737863023;  // std dev = 0.163, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else return -0.02453340806564928;  // std dev = 1.022, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   else if ( follows(A, E), follows(E, A) )
%   | then if ( tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.3202670017031965;  // std dev = 0.478, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return -0.09650789302182716;  // std dev = 0.109, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
%   | | else return -0.05516970623790325;  // std dev = 0.142, 11.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=1 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, A) )
%   | | | then return -0.09450350888608065;  // std dev = 0.056, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return 0.03368685181835289;  // std dev = 1.407, 41.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=15 */
%   | | else if ( follows(J, A), recursion_accounttype(J, B) )
%   | | | then return 0.17439919127113568;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.0556084506868683;  // std dev = 1.612, 34.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=6 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(D, A) )
%   then if ( follows(C, E), recursion_accounttype(E, B) )
%   | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0.17702526216612866;  // std dev = 0.147, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else return 0.3489383534359684;  // std dev = 0.091, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return -0.08805947842749492;  // std dev = 0.012, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
%   else if ( recursion_accounttype(G, B) )
%   | then if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0.15069458405648106;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.228583724661021;  // std dev = 0.767, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | | else return 0.5118442461507683;  // std dev = 0.271, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(K, A), follows(L, K) )
%   | | then return -0.07492072845447685;  // std dev = 0.021, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( follows(A, M), follows(M, N) )
%   | | | then return -0.12018288824945556;  // std dev = 0.058, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | | else return -0.25616195713646545;  // std dev = 0.262, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.14756085340610062;  // std dev = 0.142, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | else return 0.30154008586965425;  // std dev = 0.081, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(A, C) )
%   | | then return -0.0813457552107994;  // std dev = 0.094, 72.000 (wgt'ed) examples reached here.  /* #neg=72 */
%   | | else return -0.07276473799840508;  // std dev = 0.036, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   else if ( follows(A, F), follows(F, G) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.23131764392067589;  // std dev = 0.143, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else return -0.10616888830966711;  // std dev = 0.040, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else if ( follows(A, H) )
%   | | then return -0.05461335424768832;  // std dev = 0.572, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.02522157764095199;  // std dev = 0.752, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return -0.057665154852769254;  // std dev = 0.817, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */


Results
   AUC ROC   = 0.992882
   AUC PR    = 0.358962
   CLL	      = -0.113586
   Precision = 0.336111 at threshold = 0.5
   Recall    = 0.960317
   F1        = 0.497942


Total learning time: 9.596 seconds
Total inference time: 63.163 seconds
AUC ROC: 0.992882


Results scoring model
   AUC ROC   = 0.994732
   AUC PR    = 0.381125
   CLL	      = -0.117776
   Precision = 0.340659 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.508197


Total scoring time: 23.071 seconds
Refined model CLL: -0.117776


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.992882
   AUC PR    = 0.358962
   CLL	      = -0.113586
   Precision = 0.336111 at threshold = 0.5
   Recall    = 0.960317
   F1        = 0.497942


Total learning time: 53.374 seconds
Total inference time: 63.163 seconds
AUC ROC: 0.992882
Total revision time: 53.374
Best scored revision CLL: -0.117776


Dataset: 7_yeast_twitter, Fold: 1, Type: Transfer (trRDN-B), Time: 00:04:59
{'AUC ROC': 0.992882, 'AUC PR': 0.358962, 'CLL': -0.113586, 'Precision': [0.336111, 0.5], 'Recall': 0.960317, 'F1': 0.497942, 'Learning time': 53.374, 'Inference time': 63.163, 'parameter_0.4': {'AUC ROC': 0.993357, 'AUC PR': 0.3985, 'CLL': -0.124611, 'Precision': [0.33913, 0.5], 'Recall': 0.928571, 'F1': 0.496815, 'Learning time': 3.997, 'Inference time': 43.678}}


Amount of data: 0.6
******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;false;true
0;false;interaction(A, D), interaction(D, D).;true;true
0;false,true;interaction(E, A), interaction(D, E).;true;true
0;false,true,true;interaction(A, A).;false;false
0;false,true,false;enzyme(D, F), phenotype(A, G).;false;false
0;false,false;interaction(H, A), recursion_proteinclass(H, B).;true;true
0;false,false,true;interaction(A, I), interaction(J, H).;false;false
0;false,false,false;interaction(K, A), complex(A, L).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
1;true;interaction(C, C).;false;true
1;true,false;interaction(A, D), interaction(D, D).;true;false
1;true,false,true;complex(C, E).;false;false
1;false;interaction(A, F), recursion_proteinclass(F, B).;false;true
1;false,false;interaction(A, G), interaction(G, H).;true;true
1;false,false,true;recursion_proteinclass(H, B).;false;false
1;false,false,false;interaction(I, A), location(I, J).;false;false
2;;proteinclass(A, B) :- interaction(C, A), enzyme(C, D).;true;true
2;true;location(A, E), location(C, E).;false;true
2;true,false;interaction(A, F), phenotype(A, G).;true;true
2;true,false,true;interaction(F, A), interaction(H, C).;false;false
2;true,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;false;interaction(A, J), recursion_proteinclass(J, B).;false;true
2;false,false;interaction(A, K), enzyme(K, L).;false;true
2;false,false,false;interaction(M, A), interaction(A, M).;false;false
3;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
3;true;interaction(D, C), interaction(C, D).;true;false
3;true,true;recursion_proteinclass(D, B).;false;false
3;false;interaction(A, E), recursion_proteinclass(E, B).;true;true
3;false,true;interaction(E, F), interaction(F, F).;false;false
3;false,false;interaction(A, G), interaction(H, A).;true;true
3;false,false,true;complex(A, I), complex(G, I).;false;false
3;false,false,false;enzyme(A, J), complex(A, K).;false;false
4;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
4;false;interaction(A, D), complex(D, E).;true;true
4;false,true;interaction(F, A), interaction(F, D).;true;true
4;false,true,true;interaction(D, G), recursion_proteinclass(G, B).;false;false
4;false,true,false;recursion_proteinclass(D, B).;false;false
4;false,false;enzyme(A, H), location(A, I).;true;true
4;false,false,true;enzyme(J, H), recursion_proteinclass(J, B).;false;false
4;false,false,false;complex(A, K), interaction(L, A).;false;false
5;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;false;true
5;false;interaction(D, A), interaction(A, D).;true;true
5;false,true;interaction(D, D).;true;true
5;false,true,true;interaction(A, A).;false;false
5;false,true,false;phenotype(D, E), complex(D, F).;false;false
5;false,false;enzyme(A, G), interaction(A, H).;true;true
5;false,false,true;enzyme(H, I).;false;false
5;false,false,false;interaction(A, J), interaction(J, J).;false;false
6;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
6;false;interaction(A, D), phenotype(A, E).;true;true
6;false,true;location(D, F), location(A, F).;true;true
6;false,true,true;interaction(D, G), recursion_proteinclass(G, B).;false;false
6;false,true,false;complex(D, H), interaction(D, D).;false;false
6;false,false;interaction(A, I), interaction(I, A).;true;true
6;false,false,true;interaction(I, I).;false;false
6;false,false,false;location(A, J).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
7;false;interaction(D, A), interaction(A, D).;true;true
7;false,true;complex(D, E).;true;true
7;false,true,true;complex(A, F), enzyme(D, G).;false;false
7;false,true,false;interaction(D, D), complex(A, H).;false;false
7;false,false;enzyme(A, I), interaction(J, A).;true;true
7;false,false,true;enzyme(J, K), phenotype(J, L).;false;false
7;false,false,false;interaction(A, M), recursion_proteinclass(M, B).;false;false
8;;proteinclass(A, B) :- interaction(C, A), interaction(A, D).;true;true
8;true;interaction(E, C), recursion_proteinclass(E, B).;false;true
8;true,false;interaction(A, C).;false;false
8;false;location(A, F).;true;true
8;false,true;location(G, F), recursion_proteinclass(G, B).;true;false
8;false,true,true;interaction(H, A), interaction(H, G).;false;false
8;false,false;interaction(A, I), interaction(I, J).;false;true
8;false,false,false;interaction(A, K).;false;false
9;;proteinclass(A, B) :- interaction(C, A), interaction(C, C).;true;true
9;true;recursion_proteinclass(C, B), interaction(A, C).;false;false
9;false;enzyme(A, D), interaction(A, E).;true;true
9;false,true;interaction(E, F), recursion_proteinclass(F, B).;false;true
9;false,true,false;interaction(E, A).;false;false
9;false,false;interaction(G, A), phenotype(A, H).;true;true
9;false,false,true;interaction(I, G), recursion_proteinclass(I, B).;false;false
9;false,false,false;interaction(A, J), enzyme(J, K).;false;false


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.8385410919622573;  // std dev = 0.990, 51.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=50 */
%   else if ( follows(D, A), follows(D, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), follows(E, G) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0.6914822684328455;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else if ( follows(A, H), tweets(A, I) )
%   | | | then return -0.022969946019368772;  // std dev = 3.870, 143.000 (wgt'ed) examples reached here.  /* #neg=126 #pos=17 */
%   | | | else return 0.0716320811669281;  // std dev = 3.866, 89.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=19 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(D, A), follows(D, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.6843234325636243;  // std dev = 1.370, 47.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=45 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then return 0.7234138077162874;  // std dev = 2.98e-08, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( follows(F, A), follows(G, F) )
%   | | then if ( recursion_accounttype(G, B) )
%   | | | then return 0.858578400444129;  // std dev = 0.015, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.14232141873946097;  // std dev = 0.055, 112.000 (wgt'ed) examples reached here.  /* #neg=112 */
%   | | else if ( follows(A, H) )
%   | | | then return 0.1838613011385799;  // std dev = 3.567, 58.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=19 */
%   | | | else return 0.23809242900165803;  // std dev = 2.068, 18.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=7 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, A) )
%   | then if ( follows(A, D), follows(C, E) )
%   | | then return 0.10764555924453004;  // std dev = 4.170, 147.000 (wgt'ed) examples reached here.  /* #neg=99 #pos=48 */
%   | | else return 0.05583591189668061;  // std dev = 1.030, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.2003651695550916;  // std dev = 3.676, 62.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=24 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5592318388819554;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( follows(H, A) )
%   | | then return -0.09155378658803251;  // std dev = 0.817, 20.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=1 */
%   | | else if ( follows(A, I), follows(I, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.205008507384426;  // std dev = 2.068, 18.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=7 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, C) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then return 0.5200259326130953;  // std dev = 0.990, 43.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=42 */
%   | | else return 0.5489980808344838;  // std dev = 0.010, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else return 0.5557248276534064;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(F, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.44122657908727075;  // std dev = 0.161, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( follows(G, A), follows(A, H) )
%   | | then if ( tweets(A, I), tweets(G, I) )
%   | | | then return -0.07435927693835184;  // std dev = 2.282, 109.000 (wgt'ed) examples reached here.  /* #neg=101 #pos=8 */
%   | | | else return -0.10761891914835271;  // std dev = 0.808, 23.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=1 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.07809992249037988;  // std dev = 3.108, 56.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=14 */
%   | | | else return 0.11960261156843977;  // std dev = 2.935, 41.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.4142860736794758;  // std dev = 0.028, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   else if ( follows(D, A), tweets(D, E) )
%   | then if ( follows(A, F), follows(D, F) )
%   | | then if ( follows(G, D), recursion_accounttype(G, B) )
%   | | | then return 0.6805123025003914;  // std dev = 0.262, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.128592455322242;  // std dev = 0.069, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0.31812253830085163;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.03932431748491183;  // std dev = 1.381, 28.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=3 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then return 0.7664173112382472;  // std dev = 0.343, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else if ( tweets(A, I), follows(A, J) )
%   | | | then return -0.20413572799445664;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | | else return -0.22735721190647548;  // std dev = 0.105, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.30305818024285164;  // std dev = 0.187, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(D, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(D, E) )
%   | | | then return -0.05325046951327922;  // std dev = 2.126, 118.000 (wgt'ed) examples reached here.  /* #neg=107 #pos=11 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return -0.11250729217852923;  // std dev = 0.201, 25.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=1 */
%   | | else if ( follows(G, A), follows(G, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.050112080383568305;  // std dev = 3.674, 95.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=31 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.2240651182723772;  // std dev = 1.361, 47.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=45 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0.3936188906634317;  // std dev = 1.007, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else if ( tweets(D, F), follows(D, D) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10956968099304307;  // std dev = 0.071, 129.000 (wgt'ed) examples reached here.  /* #neg=129 */
%   | else if ( follows(G, A), follows(A, G) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.0760951509992914;  // std dev = 0.377, 78.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=26 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.20351485504007213;  // std dev = 0.959, 46.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=45 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( tweets(D, E) )
%   | | then if ( tweets(A, F) )
%   | | | then return -0.032105747804240366;  // std dev = 1.671, 74.000 (wgt'ed) examples reached here.  /* #neg=66 #pos=8 */
%   | | | else return -0.05679649069839951;  // std dev = 0.542, 12.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then return 0.02334302709718536;  // std dev = 0.338, 76.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=21 */
%   | | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0.14464762244330398;  // std dev = 5.27e-09, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.016319939012913523;  // std dev = 1.843, 36.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=8 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(D, A) )
%   then if ( follows(C, E), recursion_accounttype(E, B) )
%   | then return 0.2442588138534973;  // std dev = 0.952, 51.000 (wgt'ed) examples reached here.  /* #pos=51 */
%   | else if ( follows(C, A) )
%   | | then return -0.09580403312550435;  // std dev = 0.023, 97.000 (wgt'ed) examples reached here.  /* #neg=97 */
%   | | else return -0.1029330406032297;  // std dev = 0.032, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else if ( recursion_accounttype(F, B) )
%   | then if ( follows(A, G), follows(F, G) )
%   | | then return 0.4653843419128624;  // std dev = 1.454, 25.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=24 */
%   | | else return 0.2689641683860494;  // std dev = 1.460, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then return -0.10676950606576954;  // std dev = 0.007, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | else if ( follows(J, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.20938175143705687;  // std dev = 0.075, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(C, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0.14717302690819023;  // std dev = 2.026, 65.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=62 */
%   | | else if ( follows(A, D) )
%   | | | then return -0.08826573118041044;  // std dev = 0.026, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */
%   | | | else return -0.09385615246674094;  // std dev = 0.045, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | else if ( follows(A, F) )
%   | | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | | then return 0.4002939487415849;  // std dev = 0.622, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return -0.14195553800812877;  // std dev = 1.306, 41.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=3 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.01498628436581323;  // std dev = 1.534, 24.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=7 */


Results
   AUC ROC   = 0.992601
   AUC PR    = 0.349953
   CLL	      = -0.125093
   Precision = 0.33913 at threshold = 0.5
   Recall    = 0.928571
   F1        = 0.496815


Total learning time: 5.712 seconds
Total inference time: 40.826 seconds
AUC ROC: 0.992601


Results scoring model
   AUC ROC   = 0.993837
   AUC PR    = 0.359382
   CLL	      = -0.133247
   Precision = 0.333333 at threshold = 0.5
   Recall    = 0.903226
   F1        = 0.486957


Total scoring time: 25.181 seconds
Parameter learned model CLL: -0.133247


Structure after Parameter Learning
[['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(D, A), follows(D, D)', 'false,false': 'follows(A, E), recursion_accounttype(E, B)', 'false,false,true': 'follows(F, A), follows(E, G)', 'false,false,false': 'follows(A, H), tweets(A, I)'}, {'true': [0.99, 1, 50], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 2], 'false,false,true,false': [0.913, 1, 5], 'false,false,false,true': [3.87, 126, 17], 'false,false,false,false': [3.866, 70, 19]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, C)', 'true,false': 'follows(D, A), follows(D, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,false': 'follows(F, A), follows(G, F)', 'false,false,true': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(A, H)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [1.37, 2, 45], 'false,true': [2.98e-08, 0, 12], 'false,false,true,true': [0.015, 0, 10], 'false,false,true,false': [0.055, 112, 0], 'false,false,false,true': [3.567, 39, 19], 'false,false,false,false': [2.068, 11, 7]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, A)', 'true,true': 'follows(A, D), follows(C, E)', 'true,false': 'follows(F, A), recursion_accounttype(F, B)', 'false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false': 'follows(H, A)', 'false,false,false': 'follows(A, I), follows(I, A)'}, {'true,true,true': [4.17, 99, 48], 'true,true,false': [1.03, 8, 3], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.676, 38, 24], 'false,true': [0.0, 0, 10], 'false,false,true': [0.817, 19, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.068, 11, 7]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D), follows(D, C)', 'true,true': 'recursion_accounttype(D, B)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(F, F)', 'false,false': 'follows(G, A), follows(A, H)', 'false,false,true': 'tweets(A, I), tweets(G, I)', 'false,false,false': 'tweets(A, J)'}, {'true,true,true': [0.99, 1, 42], 'true,true,false': [0.01, 0, 2], 'true,false': [0.0, 0, 1], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.161, 0, 12], 'false,false,true,true': [2.282, 101, 8], 'false,false,true,false': [0.808, 22, 1], 'false,false,false,true': [3.108, 42, 14], 'false,false,false,false': [2.935, 28, 13]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A), tweets(D, E)', 'false,true': 'follows(A, F), follows(D, F)', 'false,true,true': 'follows(G, D), recursion_accounttype(G, B)', 'false,true,false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(H, B)', 'false,false,false': 'tweets(A, I), follows(A, J)'}, {'true': [0.028, 0, 45], 'false,true,true,true': [0.262, 0, 8], 'false,true,true,false': [0.069, 86, 0], 'false,true,false,true': [0.0, 0, 10], 'false,true,false,false': [1.381, 25, 3], 'false,false,true': [0.343, 0, 27], 'false,false,false,true': [0.0, 23, 0], 'false,false,false,false': [0.105, 33, 0]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(D, D)', 'false,true,false': 'tweets(D, E)', 'false,false': 'follows(F, A)', 'false,false,false': 'follows(G, A), follows(G, G)'}, {'true': [0.187, 0, 50], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [2.126, 107, 11], 'false,true,false,false': [0.0, 0, 0], 'false,false,true': [0.201, 24, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [3.674, 64, 31]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(D, F), follows(D, D)', 'false,false': 'follows(G, A), follows(A, G)'}, {'true': [1.361, 2, 45], 'false,true,true': [1.007, 0, 22], 'false,true,false,true': [0.0, 0, 0], 'false,true,false,false': [0.071, 129, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.377, 52, 26]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'tweets(D, E)', 'false,true,true': 'tweets(A, F)', 'false,false': 'follows(A, G)', 'false,false,false': 'follows(H, A), recursion_accounttype(H, B)'}, {'true': [0.959, 1, 45], 'false,true,true,true': [1.671, 66, 8], 'false,true,true,false': [0.542, 11, 1], 'false,true,false': [0.0, 0, 0], 'false,false,true': [0.338, 55, 21], 'false,false,false,true': [5.27e-09, 0, 10], 'false,false,false,false': [1.843, 28, 8]}], ['accounttype(A, B)', {'': 'follows(A, C), follows(D, A)', 'true': 'follows(C, E), recursion_accounttype(E, B)', 'true,false': 'follows(C, A)', 'false': 'recursion_accounttype(F, B)', 'false,true': 'follows(A, G), follows(F, G)', 'false,false': 'follows(H, A), follows(I, H)', 'false,false,false': 'follows(J, A)'}, {'true,true': [0.952, 0, 51], 'true,false,true': [0.023, 97, 0], 'true,false,false': [0.032, 6, 0], 'false,true,true': [1.454, 1, 24], 'false,true,false': [1.46, 1, 18], 'false,false,true': [0.007, 25, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.075, 56, 0]}], ['accounttype(A, B)', {'': 'follows(A, C), follows(C, C)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'follows(A, D)', 'false,false': 'follows(A, F)', 'false,false,true': 'follows(F, G), recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.0, 0, 0], 'false,true,true': [2.026, 3, 62], 'false,true,false,true': [0.026, 92, 0], 'false,true,false,false': [0.045, 29, 0], 'false,false,true,true': [0.622, 0, 21], 'false,false,true,false': [1.306, 38, 3], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.534, 17, 7]}]]
[{'': [0.019223375624760057, 0.14706597222222234], 'false': [nan, 0.14706597222222234], 'false,false': [0.10937499999999978, 0.13109393579072623], 'false,false,false': [0.10474839845469161, 0.16790809241257398], 'false,false,true': [0.0, 0.1388888888888887]}, {'': [0.039918877598169006, 0.1649557618035113], 'false': [7.401486830834377e-17, 0.14813606016426334], 'false,false': [0.07541110713012934, 0.22418633402038746], 'false,false,false': [0.21931005768857842, 0.23765432098765465], 'false,false,true': [2.1972001558179244e-05, 2.7489086372254174e-05], 'true': [nan, 0.039918877598169006], 'true,false': [nan, 0.039918877598168784]}, {'': [0.14727133808896223, 0.16333317356569332], 'false': [-1.3322676295501878e-16, 0.15206245855953193], 'false,false': [0.03336963775022918, 0.23765432098765416], 'false,false,false': [nan, 0.23765432098765416], 'true': [0.11692090675826995, 0.217952108727272], 'true,false': [nan, 0.217952108727272], 'true,true': [0.118265750417564, 0.09645154300881759]}, {'': [0.021354982141169317, 0.11712414917733266], 'false': [0.002171532430534658, 0.11320256808413881], 'false,false': [0.04454987765529825, 0.18881288885461026], 'false,false,false': [0.17247886029962833, 0.21012836399713866], 'false,false,true': [0.0477735333208441, 0.028359096811320067], 'true': [0.021803795262596914, 0.0], 'true,true': [0.022778514647891074, 4.5249122765878e-05], 'false,true': [nan, 0.002171532430534658]}, {'': [1.7538520557320364e-05, 0.1241922426605246], 'false': [0.061125089948261865, 0.21425412310981706], 'false,false': [0.004361149689561999, 0.0003258517337724436], 'false,true': [0.05175452817884546, 0.07497319640060962], 'false,true,false': [-6.661338147750939e-17, 0.06812611304827479], 'false,true,true': [0.008585511861983197, 5.53136795878072e-05], 'false,false,false': [-4.827056628805028e-18, 0.0003314880492248861]}, {'': [0.0007004150704379697, 0.08337511930989916], 'false': [0.038316379576771115, 0.12528918623310417], 'false,false': [0.04059480890666876, 0.1420677926971078], 'false,false,false': [nan, 0.1420677926971078], 'false,true': [nan, 0.038316379576771115], 'false,true,false': [0.038316379576771115, nan]}, {'': [0.03941933320860009, 0.07657780790872484], 'false': [0.03826727950574104, 0.14241952987203943], 'false,false': [nan, 0.14241952987203943], 'false,true': [0.04611319155294971, 3.9334534373214325e-05], 'false,true,false': [nan, 3.933453437321088e-05]}, {'': [0.0199866567398938, 0.07466729717874997], 'false': [0.035977022231840815, 0.10009775955909776], 'false,false': [0.11411858006747766, 0.07666148503390355], 'false,false,false': [2.7755575615628915e-18, 0.09437634321937201], 'false,true': [0.035977022231840815, nan], 'false,true,true': [0.037752886571658796, 0.02450129105801861]}, {'': [0.03157647653873024, 0.10989992558631492], 'false': [0.10598564636283285, 0.0023168991225125104], 'false,true': [0.08456865365706896, 0.11224494278196696], 'true': [0.017778362305432425, 1.768776778612572e-05], 'false,false': [1.6957736769551702e-06, 0.00010069645963763283], 'false,false,false': [nan, 0.00010069645963763283], 'true,false': [5.36262566462394e-06, 0.00016908203287108875]}, {'': [nan, 0.05559017479746713], 'false': [0.034838983238563624, 0.09931484533171102], 'false,false': [0.09961444774290493, 0.0980260300796048], 'false,false,true': [0.018426259058905905, 0.0416063093100192], 'false,false,false': [nan, 0.0980260300796048], 'false,true': [0.06316989447066318, 2.7601947325367977e-05], 'false,true,false': [7.209959103830946e-06, 6.853130480005687e-05]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
0;false;follows(A, E), recursion_accounttype(E, B).;true;true
0;false,true;follows(F, A), follows(E, G).;true;true
1;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
1;false;follows(E, A), recursion_accounttype(E, B).;true;true
1;false,false;follows(F, A), follows(G, F).;true;true
1;false,false,true;recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
3;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
3;true;follows(C, D), follows(D, C).;true;true
3;true,true;recursion_accounttype(D, B).;true;true
3;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(D, A), tweets(D, E).;true;true
4;false,true;follows(A, F), follows(D, F).;true;true
4;false,true,true;follows(G, D), recursion_accounttype(G, B).;true;true
4;false,true,false;recursion_accounttype(D, B).;true;true
4;false,false;recursion_accounttype(H, B).;true;true
4;false,false,false;tweets(A, I), follows(A, J).;true;true
5;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
6;false;follows(D, A).;true;true
6;false,true;follows(E, D), recursion_accounttype(E, B).;true;true
7;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
7;false;follows(A, D), follows(D, A).;true;true
7;false,false;follows(A, G).;true;true
7;false,false,false;follows(H, A), recursion_accounttype(H, B).;true;true
8;;accounttype(A, B) :- follows(A, C), follows(D, A).;true;true
8;true;follows(C, E), recursion_accounttype(E, B).;true;true
8;true,false;follows(C, A).;true;true
8;false;recursion_accounttype(F, B).;true;true
8;false,false;follows(H, A), follows(I, H).;true;true
9;;accounttype(A, B) :- follows(D, A).;true;true
9;true;follows(E, D), recursion_accounttype(E, B).;true;true
9;true,false;follows(A, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.8581489350995122;  // std dev = 1.46e-07, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   else if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(D, F) )
%   | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.6914822684328455;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return -0.1291928370523864;  // std dev = 0.994, 79.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=1 */
%   | | | else return -0.016851064900487676;  // std dev = 2.806, 72.000 (wgt'ed) examples reached here.  /* #neg=63 #pos=9 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.12933537577747847;  // std dev = 3.415, 59.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=16 */
%   | | | else return 0.24276431971489695;  // std dev = 2.481, 26.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=10 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(A, E) )
%   | then if ( tweets(D, E), follows(F, D) )
%   | | then if ( follows(F, A) )
%   | | | then return 0.7194734122109543;  // std dev = 5.96e-08, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return 0.6221746405141412;  // std dev = 0.960, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else return 0.06359983064803722;  // std dev = 0.804, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else return 0.7319269719460499;  // std dev = 0.057, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.7194734122109544;  // std dev = 4.21e-08, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.8614850707825257;  // std dev = 0.012, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.13277297020989368;  // std dev = 0.073, 129.000 (wgt'ed) examples reached here.  /* #neg=129 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.1445997016400944;  // std dev = 3.337, 53.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=16 */
%   | | | else return 0.28050178772924245;  // std dev = 2.335, 22.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=10 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.5269156538728877;  // std dev = 0.207, 47.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=45 */
%   | else if ( follows(E, A), tweets(E, F) )
%   | | then if ( follows(G, E), follows(G, A) )
%   | | | then return -0.10094855448551406;  // std dev = 0.864, 60.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=1 */
%   | | | else return -0.005141726780299394;  // std dev = 2.310, 61.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=9 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return 0.13331665443404012;  // std dev = 3.360, 54.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=17 */
%   | | | else return 0.2818932998161316;  // std dev = 1.225, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   else if ( follows(J, A), recursion_accounttype(J, B) )
%   | then return 0.5553664367462846;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( follows(K, A) )
%   | | then return -0.06856513830015716;  // std dev = 0.198, 17.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=1 */
%   | | else if ( tweets(A, L) )
%   | | | then return 0.2818932998161316;  // std dev = 1.414, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | | else return 0.054620572543404314;  // std dev = 1.477, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, C) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | | then return 0.40554681241162605;  // std dev = 1.008, 38.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=37 */
%   | | | else return 0.32627169100842196;  // std dev = 0.900, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0.13947323972986994;  // std dev = 0.745, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.46248938725088395;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.4378351773642835;  // std dev = 0.159, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.6370591556714627;  // std dev = 0.959, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | | else return -0.11383781930341585;  // std dev = 0.156, 142.000 (wgt'ed) examples reached here.  /* #neg=142 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.06769729274438116;  // std dev = 3.425, 60.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=16 */
%   | | | else return 0.181413857975199;  // std dev = 2.363, 23.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=10 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( recursion_accounttype(E, B), follows(A, D) )
%   | | | then return 0.3023783290426881;  // std dev = 0.943, 27.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=26 */
%   | | | else return 0.07958009975787839;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.362662766860433;  // std dev = 0.141, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return 0.1056783599479212;  // std dev = 0.443, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( follows(F, A), tweets(F, G) )
%   | then if ( follows(A, H), follows(F, H) )
%   | | then return -0.04822424049773019;  // std dev = 0.183, 100.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=8 */
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0.3163008938202054;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.04359292508508625;  // std dev = 1.139, 36.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=3 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then return 0.7452163888855778;  // std dev = 0.077, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else return -0.22418391642994007;  // std dev = 0.032, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then return 0.2791177554467921;  // std dev = 0.250, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | else return 0.1612509825296452;  // std dev = 0.287, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), follows(F, A) )
%   | | then if ( follows(F, E), follows(A, E) )
%   | | | then return -0.07670083493657873;  // std dev = 0.724, 59.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=1 */
%   | | | else return -0.09087603089202458;  // std dev = 0.008, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | else if ( follows(G, E), recursion_accounttype(G, B) )
%   | | | then return 0.47126468069152744;  // std dev = 0.966, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return -0.10858013723237232;  // std dev = 0.042, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.36107050702834;  // std dev = 0.053, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.014163810346770745;  // std dev = 2.426, 48.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=13 */
%   | | | else return 0.08269664443426024;  // std dev = 2.379, 38.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=13 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then return 0.1973923129821956;  // std dev = 0.161, 39.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=38 */
%   | | else return -0.07104430140763492;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.2827320663184064;  // std dev = 0.047, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(E, A) )
%   | then if ( follows(F, E), recursion_accounttype(F, B) )
%   | | then return 0.3531971084253527;  // std dev = 0.139, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else return -0.0872948955301849;  // std dev = 0.081, 133.000 (wgt'ed) examples reached here.  /* #neg=133 */
%   | else if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.5804150375554623;  // std dev = 0.223, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return -0.19358486306347106;  // std dev = 0.192, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.03499618770208134;  // std dev = 2.155, 35.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=10 */
%   | | | else return -0.09566111957142923;  // std dev = 1.238, 17.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=3 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.16626904764881464;  // std dev = 0.154, 39.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=38 */
%   | else return 0.2426134742577219;  // std dev = 0.070, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( follows(A, E), follows(E, A) )
%   | then if ( tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.4117425568663967;  // std dev = 0.175, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.08177259084667796;  // std dev = 0.053, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
%   | | else return -0.0575460693331547;  // std dev = 0.108, 18.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=1 */
%   | else if ( follows(A, H) )
%   | | then if ( tweets(A, I) )
%   | | | then return -0.018045211178455953;  // std dev = 1.684, 52.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=10 */
%   | | | else return 0.09963145797927343;  // std dev = 2.012, 28.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=11 */
%   | | else if ( follows(J, A), recursion_accounttype(J, B) )
%   | | | then return 0.16776188873780953;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.017699402428548346;  // std dev = 1.556, 41.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=8 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(D, A) )
%   then if ( follows(C, E), recursion_accounttype(E, B) )
%   | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | | then return 0.16909435823676094;  // std dev = 0.149, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | | else return -0.3766319740973227;  // std dev = 0.717, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.30927544887866537;  // std dev = 0.077, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return -0.07651715728322823;  // std dev = 0.008, 112.000 (wgt'ed) examples reached here.  /* #neg=112 */
%   else if ( recursion_accounttype(H, B) )
%   | then if ( follows(I, A), recursion_accounttype(I, B) )
%   | | then return 0.14562506820916896;  // std dev = 7.45e-09, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.3830396742094036;  // std dev = 0.510, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return 0.5520939382935823;  // std dev = 0.368, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( follows(K, A), follows(L, K) )
%   | | then return -0.0780764912925772;  // std dev = 0.009, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else return -0.18658785078214646;  // std dev = 0.271, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.10832654087636286;  // std dev = 0.184, 52.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=50 */
%   | | else return 0.2584896086422088;  // std dev = 0.056, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else return -0.07117814722199814;  // std dev = 0.006, 139.000 (wgt'ed) examples reached here.  /* #neg=139 */
%   else if ( follows(A, F) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.36110889888101333;  // std dev = 0.129, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else if ( follows(F, H) )
%   | | | then return -0.16129731798068211;  // std dev = 0.711, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
%   | | | else return -0.011996432757019825;  // std dev = 0.728, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | else if ( tweets(A, I) )
%   | | then if ( tweets(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.29075732241688335;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.19445489599493782;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.44375234620513737;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */


Results
   AUC ROC   = 0.993163
   AUC PR    = 0.351201
   CLL	      = -0.115555
   Precision = 0.341463 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.509091


Total learning time: 12.689 seconds
Total inference time: 47.286 seconds
AUC ROC: 0.993163


Results scoring model
   AUC ROC   = 0.994807
   AUC PR    = 0.369458
   CLL	      = -0.12156
   Precision = 0.340659 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.508197


Total scoring time: 33.053 seconds
Refined model CLL: -0.12156


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.993163
   AUC PR    = 0.351201
   CLL	      = -0.115555
   Precision = 0.341463 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.509091


Total learning time: 76.63499999999999 seconds
Total inference time: 47.286 seconds
AUC ROC: 0.993163
Total revision time: 76.63499999999999
Best scored revision CLL: -0.12156


Dataset: 7_yeast_twitter, Fold: 1, Type: Transfer (trRDN-B), Time: 00:07:44
{'AUC ROC': 0.993163, 'AUC PR': 0.351201, 'CLL': -0.115555, 'Precision': [0.341463, 0.5], 'Recall': 1.0, 'F1': 0.509091, 'Learning time': 76.63499999999999, 'Inference time': 47.286, 'parameter_0.6': {'AUC ROC': 0.992601, 'AUC PR': 0.349953, 'CLL': -0.125093, 'Precision': [0.33913, 0.5], 'Recall': 0.928571, 'F1': 0.496815, 'Learning time': 5.712, 'Inference time': 40.826}}


Amount of data: 0.8
******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;false;true
0;false;interaction(A, D), interaction(D, D).;true;true
0;false,true;interaction(E, A), interaction(D, E).;true;true
0;false,true,true;interaction(A, A).;false;false
0;false,true,false;enzyme(D, F), phenotype(A, G).;false;false
0;false,false;interaction(H, A), recursion_proteinclass(H, B).;true;true
0;false,false,true;interaction(A, I), interaction(J, H).;false;false
0;false,false,false;interaction(K, A), complex(A, L).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
1;true;interaction(C, C).;false;true
1;true,false;interaction(A, D), interaction(D, D).;true;false
1;true,false,true;complex(C, E).;false;false
1;false;interaction(A, F), recursion_proteinclass(F, B).;false;true
1;false,false;interaction(A, G), interaction(G, H).;true;true
1;false,false,true;recursion_proteinclass(H, B).;false;false
1;false,false,false;interaction(I, A), location(I, J).;false;false
2;;proteinclass(A, B) :- interaction(C, A), enzyme(C, D).;true;true
2;true;location(A, E), location(C, E).;false;true
2;true,false;interaction(A, F), phenotype(A, G).;true;true
2;true,false,true;interaction(F, A), interaction(H, C).;false;false
2;true,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;false;interaction(A, J), recursion_proteinclass(J, B).;false;true
2;false,false;interaction(A, K), enzyme(K, L).;false;true
2;false,false,false;interaction(M, A), interaction(A, M).;false;false
3;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
3;true;interaction(D, C), interaction(C, D).;true;false
3;true,true;recursion_proteinclass(D, B).;false;false
3;false;interaction(A, E), recursion_proteinclass(E, B).;true;true
3;false,true;interaction(E, F), interaction(F, F).;false;false
3;false,false;interaction(A, G), interaction(H, A).;true;true
3;false,false,true;complex(A, I), complex(G, I).;false;false
3;false,false,false;enzyme(A, J), complex(A, K).;false;false
4;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
4;false;interaction(A, D), complex(D, E).;true;true
4;false,true;interaction(F, A), interaction(F, D).;true;true
4;false,true,true;interaction(D, G), recursion_proteinclass(G, B).;false;false
4;false,true,false;recursion_proteinclass(D, B).;false;false
4;false,false;enzyme(A, H), location(A, I).;true;true
4;false,false,true;enzyme(J, H), recursion_proteinclass(J, B).;false;false
4;false,false,false;complex(A, K), interaction(L, A).;false;false
5;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;false;true
5;false;interaction(D, A), interaction(A, D).;true;true
5;false,true;interaction(D, D).;true;true
5;false,true,true;interaction(A, A).;false;false
5;false,true,false;phenotype(D, E), complex(D, F).;false;false
5;false,false;enzyme(A, G), interaction(A, H).;true;true
5;false,false,true;enzyme(H, I).;false;false
5;false,false,false;interaction(A, J), interaction(J, J).;false;false
6;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
6;false;interaction(A, D), phenotype(A, E).;true;true
6;false,true;location(D, F), location(A, F).;true;true
6;false,true,true;interaction(D, G), recursion_proteinclass(G, B).;false;false
6;false,true,false;complex(D, H), interaction(D, D).;false;false
6;false,false;interaction(A, I), interaction(I, A).;true;true
6;false,false,true;interaction(I, I).;false;false
6;false,false,false;location(A, J).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
7;false;interaction(D, A), interaction(A, D).;true;true
7;false,true;complex(D, E).;true;true
7;false,true,true;complex(A, F), enzyme(D, G).;false;false
7;false,true,false;interaction(D, D), complex(A, H).;false;false
7;false,false;enzyme(A, I), interaction(J, A).;true;true
7;false,false,true;enzyme(J, K), phenotype(J, L).;false;false
7;false,false,false;interaction(A, M), recursion_proteinclass(M, B).;false;false
8;;proteinclass(A, B) :- interaction(C, A), interaction(A, D).;true;true
8;true;interaction(E, C), recursion_proteinclass(E, B).;false;true
8;true,false;interaction(A, C).;false;false
8;false;location(A, F).;true;true
8;false,true;location(G, F), recursion_proteinclass(G, B).;true;false
8;false,true,true;interaction(H, A), interaction(H, G).;false;false
8;false,false;interaction(A, I), interaction(I, J).;false;true
8;false,false,false;interaction(A, K).;false;false
9;;proteinclass(A, B) :- interaction(C, A), interaction(C, C).;true;true
9;true;recursion_proteinclass(C, B), interaction(A, C).;false;false
9;false;enzyme(A, D), interaction(A, E).;true;true
9;false,true;interaction(E, F), recursion_proteinclass(F, B).;false;true
9;false,true,false;interaction(E, A).;false;false
9;false,false;interaction(G, A), phenotype(A, H).;true;true
9;false,false,true;interaction(I, G), recursion_proteinclass(I, B).;false;false
9;false,false,false;interaction(A, J), enzyme(J, K).;false;false


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.8581489350995126;  // std dev = 0.000, 66.000 (wgt'ed) examples reached here.  /* #pos=66 */
%   else if ( follows(D, A), follows(D, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), follows(E, G) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( follows(A, H), tweets(A, I) )
%   | | | then return 0.002657605619743138;  // std dev = 4.625, 173.000 (wgt'ed) examples reached here.  /* #neg=148 #pos=25 */
%   | | | else return 0.07436515131572859;  // std dev = 4.337, 111.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=24 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(D, A), follows(D, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.7028067455442879;  // std dev = 0.992, 60.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=59 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then return 0.7194734122109542;  // std dev = 4.21e-08, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( follows(F, A), follows(G, F) )
%   | | then if ( recursion_accounttype(G, B) )
%   | | | then return 0.8559025682888167;  // std dev = 0.014, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.13976323943882354;  // std dev = 1.002, 184.000 (wgt'ed) examples reached here.  /* #neg=183 #pos=1 */
%   | | else if ( follows(A, H) )
%   | | | then return 0.13949711915863036;  // std dev = 4.307, 91.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=26 */
%   | | | else return 0.21248958116333078;  // std dev = 2.256, 22.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=8 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, A) )
%   | then if ( follows(A, D), follows(C, E) )
%   | | then return 0.07983719015635958;  // std dev = 4.789, 215.000 (wgt'ed) examples reached here.  /* #neg=153 #pos=62 */
%   | | else return 0.07124322995762956;  // std dev = 1.575, 22.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=6 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.1563509003930902;  // std dev = 4.434, 97.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=33 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5553664367462845;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( follows(H, A) )
%   | | then return -0.06113900595867376;  // std dev = 1.133, 23.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=2 */
%   | | else if ( follows(A, I), follows(I, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.1528602009690608;  // std dev = 2.309, 24.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=8 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, C) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then return 0.5026991577305406;  // std dev = 1.399, 57.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=55 */
%   | | else return 0.5301897529549923;  // std dev = 0.013, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else return 0.5312568486318978;  // std dev = 0.015, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(F, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.4400507589480419;  // std dev = 0.188, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( follows(G, A), follows(A, H) )
%   | | then if ( tweets(A, I), tweets(G, I) )
%   | | | then return -0.06941926695263137;  // std dev = 2.669, 140.000 (wgt'ed) examples reached here.  /* #neg=129 #pos=11 */
%   | | | else return -0.07404515033712011;  // std dev = 1.257, 27.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=2 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.050997328640218414;  // std dev = 3.642, 82.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=18 */
%   | | | else return 0.1286382794055399;  // std dev = 3.459, 56.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=18 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.39576308775846086;  // std dev = 0.990, 60.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=59 */
%   else if ( follows(D, A), tweets(D, E) )
%   | then if ( follows(A, F), follows(D, F) )
%   | | then if ( follows(G, D), recursion_accounttype(G, B) )
%   | | | then return 0.6836367046939709;  // std dev = 0.271, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.12930218992753983;  // std dev = 0.049, 125.000 (wgt'ed) examples reached here.  /* #neg=125 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0.3238539039649511;  // std dev = 0.108, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.012502889082168766;  // std dev = 2.133, 51.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=7 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then return 0.7554921970449862;  // std dev = 1.061, 36.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=35 */
%   | | else if ( tweets(A, I), follows(A, J) )
%   | | | then return -0.18992508191085133;  // std dev = 3.94e-08, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | | | else return -0.21372349406258392;  // std dev = 0.086, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.26349079098068134;  // std dev = 1.730, 69.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=66 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(D, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(D, E) )
%   | | | then return -0.05444306917661236;  // std dev = 2.547, 146.000 (wgt'ed) examples reached here.  /* #neg=132 #pos=14 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return -0.0787844520101144;  // std dev = 0.242, 44.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=3 */
%   | | else if ( follows(G, A), follows(G, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.0935541372361857;  // std dev = 4.069, 114.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=41 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.23985559834254472;  // std dev = 1.391, 61.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=59 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0.41088253650951573;  // std dev = 1.204, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | else if ( tweets(D, F), follows(D, D) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10702383226604098;  // std dev = 0.998, 181.000 (wgt'ed) examples reached here.  /* #neg=180 #pos=1 */
%   | else if ( follows(G, A), follows(A, G) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.041577288883691284;  // std dev = 0.366, 120.000 (wgt'ed) examples reached here.  /* #neg=86 #pos=34 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.21097973973084932;  // std dev = 0.999, 60.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=59 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( tweets(D, E) )
%   | | then if ( tweets(A, F) )
%   | | | then return -0.04265712988164816;  // std dev = 2.025, 123.000 (wgt'ed) examples reached here.  /* #neg=112 #pos=11 */
%   | | | else return -0.08279525194105439;  // std dev = 0.550, 25.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then return 0.04767781417596636;  // std dev = 0.357, 102.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=30 */
%   | | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0.1453848638955652;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.0015117601196347012;  // std dev = 2.150, 48.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=10 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(D, A) )
%   then if ( follows(C, E), recursion_accounttype(E, B) )
%   | then return 0.25339835025611746;  // std dev = 1.133, 66.000 (wgt'ed) examples reached here.  /* #pos=66 */
%   | else if ( follows(C, A) )
%   | | then return -0.0957341138808935;  // std dev = 0.036, 133.000 (wgt'ed) examples reached here.  /* #neg=133 */
%   | | else return -0.04451802686628361;  // std dev = 1.002, 23.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=2 */
%   else if ( recursion_accounttype(F, B) )
%   | then if ( follows(A, G), follows(F, G) )
%   | | then return 0.5217007744296621;  // std dev = 0.955, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | else return 0.3029807026275405;  // std dev = 1.332, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then return -0.11313888226050194;  // std dev = 0.016, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | else if ( follows(J, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.20059420718329427;  // std dev = 0.088, 78.000 (wgt'ed) examples reached here.  /* #neg=78 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(C, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0.17166497025187816;  // std dev = 1.992, 84.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=81 */
%   | | else if ( follows(A, D) )
%   | | | then return -0.08800564000322586;  // std dev = 0.035, 133.000 (wgt'ed) examples reached here.  /* #neg=133 */
%   | | | else return -0.0858725787628339;  // std dev = 1.237, 31.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=2 */
%   | else if ( follows(A, F) )
%   | | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | | then return 0.3670172547167445;  // std dev = 1.226, 31.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=30 */
%   | | | else return -0.13606249606492765;  // std dev = 1.106, 61.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=3 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.022529843252367954;  // std dev = 1.661, 28.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=8 */


Results
   AUC ROC   = 0.992597
   AUC PR    = 0.349871
   CLL	      = -0.125879
   Precision = 0.33913 at threshold = 0.5
   Recall    = 0.928571
   F1        = 0.496815


Total learning time: 7.021 seconds
Total inference time: 41.635 seconds
AUC ROC: 0.992597


Results scoring model
   AUC ROC   = 0.991018
   AUC PR    = 0.352586
   CLL	      = -0.133727
   Precision = 0.346278 at threshold = 0.5
   Recall    = 0.862903
   F1        = 0.494226


Total scoring time: 36.052 seconds
Parameter learned model CLL: -0.133727


Structure after Parameter Learning
[['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(D, A), follows(D, D)', 'false,false': 'follows(A, E), recursion_accounttype(E, B)', 'false,false,true': 'follows(F, A), follows(E, G)', 'false,false,false': 'follows(A, H), tweets(A, I)'}, {'true': [0.0, 0, 66], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 2], 'false,false,true,false': [0.0, 0, 7], 'false,false,false,true': [4.625, 148, 25], 'false,false,false,false': [4.337, 87, 24]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, C)', 'true,false': 'follows(D, A), follows(D, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,false': 'follows(F, A), follows(G, F)', 'false,false,true': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(A, H)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [0.992, 1, 59], 'false,true': [4.21e-08, 0, 16], 'false,false,true,true': [0.014, 0, 14], 'false,false,true,false': [1.002, 183, 1], 'false,false,false,true': [4.307, 65, 26], 'false,false,false,false': [2.256, 14, 8]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, A)', 'true,true': 'follows(A, D), follows(C, E)', 'true,false': 'follows(F, A), recursion_accounttype(F, B)', 'false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false': 'follows(H, A)', 'false,false,false': 'follows(A, I), follows(I, A)'}, {'true,true,true': [4.789, 153, 62], 'true,true,false': [1.575, 16, 6], 'true,false,true': [0.0, 0, 0], 'true,false,false': [4.434, 64, 33], 'false,true': [0.0, 0, 13], 'false,false,true': [1.133, 21, 2], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.309, 16, 8]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D), follows(D, C)', 'true,true': 'recursion_accounttype(D, B)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(F, F)', 'false,false': 'follows(G, A), follows(A, H)', 'false,false,true': 'tweets(A, I), tweets(G, I)', 'false,false,false': 'tweets(A, J)'}, {'true,true,true': [1.399, 2, 55], 'true,true,false': [0.013, 0, 2], 'true,false': [0.015, 0, 2], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.188, 0, 16], 'false,false,true,true': [2.669, 129, 11], 'false,false,true,false': [1.257, 25, 2], 'false,false,false,true': [3.642, 64, 18], 'false,false,false,false': [3.459, 38, 18]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A), tweets(D, E)', 'false,true': 'follows(A, F), follows(D, F)', 'false,true,true': 'follows(G, D), recursion_accounttype(G, B)', 'false,true,false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(H, B)', 'false,false,false': 'tweets(A, I), follows(A, J)'}, {'true': [0.99, 1, 59], 'false,true,true,true': [0.271, 0, 9], 'false,true,true,false': [0.049, 125, 0], 'false,true,false,true': [0.108, 0, 14], 'false,true,false,false': [2.133, 44, 7], 'false,false,true': [1.061, 1, 35], 'false,false,false,true': [3.94e-08, 40, 0], 'false,false,false,false': [0.086, 42, 0]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(D, D)', 'false,true,false': 'tweets(D, E)', 'false,false': 'follows(F, A)', 'false,false,false': 'follows(G, A), follows(G, G)'}, {'true': [1.73, 3, 66], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [2.547, 132, 14], 'false,true,false,false': [0.0, 0, 0], 'false,false,true': [0.242, 41, 3], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [4.069, 73, 41]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(D, F), follows(D, D)', 'false,false': 'follows(G, A), follows(A, G)'}, {'true': [1.391, 2, 59], 'false,true,true': [1.204, 0, 30], 'false,true,false,true': [0.0, 0, 0], 'false,true,false,false': [0.998, 180, 1], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.366, 86, 34]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'tweets(D, E)', 'false,true,true': 'tweets(A, F)', 'false,false': 'follows(A, G)', 'false,false,false': 'follows(H, A), recursion_accounttype(H, B)'}, {'true': [0.999, 1, 59], 'false,true,true,true': [2.025, 112, 11], 'false,true,true,false': [0.55, 24, 1], 'false,true,false': [0.0, 0, 0], 'false,false,true': [0.357, 72, 30], 'false,false,false,true': [0.0, 0, 13], 'false,false,false,false': [2.15, 38, 10]}], ['accounttype(A, B)', {'': 'follows(A, C), follows(D, A)', 'true': 'follows(C, E), recursion_accounttype(E, B)', 'true,false': 'follows(C, A)', 'false': 'recursion_accounttype(F, B)', 'false,true': 'follows(A, G), follows(F, G)', 'false,false': 'follows(H, A), follows(I, H)', 'false,false,false': 'follows(J, A)'}, {'true,true': [1.133, 0, 66], 'true,false,true': [0.036, 133, 0], 'true,false,false': [1.002, 21, 2], 'false,true,true': [0.955, 0, 33], 'false,true,false': [1.332, 1, 23], 'false,false,true': [0.016, 30, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.088, 78, 0]}], ['accounttype(A, B)', {'': 'follows(A, C), follows(C, C)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'follows(A, D)', 'false,false': 'follows(A, F)', 'false,false,true': 'follows(F, G), recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.0, 0, 0], 'false,true,true': [1.992, 3, 81], 'false,true,false,true': [0.035, 133, 0], 'false,true,false,false': [1.237, 29, 2], 'false,false,true,true': [1.226, 1, 30], 'false,false,true,false': [1.106, 58, 3], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.661, 20, 8]}]]
[{'': [-9.689219124001365e-16, 0.15876713764866215], 'false': [nan, 0.15876713764866215], 'false,false': [-2.9605947323337506e-16, 0.1427668121404492], 'false,false,false': [0.12362591466470749, 0.16946676406135835], 'false,false,true': [0.0, -2.5376526277146434e-16]}, {'': [0.016388888888888904, 0.14935837283079328], 'false': [1.1102230246251565e-16, 0.1325306448768378], 'false,false': [0.07021050065999536, 0.21004844083515706], 'false,false,false': [0.2038480364614758, 0.23140495867768596], 'false,false,true': [1.3552730772176907e-05, 0.0054560899088270595], 'true': [nan, 0.016388888888888904], 'true,false': [nan, 0.01638888888888849]}, {'': [0.13619591348932683, 0.1629312236161125], 'false': [-2.049642507000289e-16, 0.15225297870698637], 'false,false': [0.05585657600814105, 0.22222222222222196], 'false,false,false': [nan, 0.22222222222222196], 'true': [0.10724923015389104, 0.20268010628523034], 'true,false': [nan, 0.20268010628523034], 'true,true': [0.10668608422660769, 0.11268570140940519]}, {'': [0.03215184829832558, 0.12114579462225644], 'false': [0.0022010050725128627, 0.1176855835447848], 'false,false': [0.05212204850251146, 0.18426464563461534], 'false,false,false': [0.16172468302731696, 0.2136876661467329], 'false,false,true': [0.05088356229212863, 0.05852588974131657], 'true': [0.033212913583580216, 0.00011225967336414566], 'true,true': [0.034349475435489094, 9.078604027551451e-05], 'false,true': [nan, 0.0022010050725128627]}, {'': [0.016348699917328464, 0.11794740897750845], 'false': [0.061420818944255606, 0.20412169091358598], 'false,false': [0.03129171436717707, 0.00023231710396925547], 'false,true': [0.041972003481220384, 0.0893076457930187], 'false,true,false': [0.0008386577879513357, 0.08922551970950317], 'false,true,true': [0.008170084381365584, 1.897436166377986e-05], 'false,false,false': [3.8857805861880476e-17, 0.00017729616141232935]}, {'': [0.04338325224917174, 0.08991179055460331], 'false': [0.04443670493974252, 0.12713003896158614], 'false,false': [0.058769349702628065, 0.14524381619797028], 'false,false,false': [nan, 0.14524381619797028], 'false,true': [nan, 0.04443670493974252], 'false,true,false': [0.04443670493974252, nan]}, {'': [0.03173226307506457, 0.07802333787294735], 'false': [0.04430638435737226, 0.13372658814314195], 'false,false': [nan, 0.13372658814314195], 'false,true': [0.04833542043995009, 0.005502047067801454], 'false,true,false': [nan, 0.005502047067801464]}, {'': [0.01664585892239335, 0.07369632644531983], 'false': [0.029971980051374726, 0.10942903213839654], 'false,false': [0.1274015703589755, 0.07922616196640232], 'false,false,false': [-1.2810265668751807e-17, 0.0962718850420589], 'false,true': [0.029971980051374726, nan], 'false,true,true': [0.03333052879772576, 0.012108991384044003]}, {'': [0.034921497397841894, 0.10436189242899589], 'false': [0.05875269434303217, 0.0016080933615493355], 'false,true': [0.027609233278635945, 0.07387899710129398], 'true': [0.01945055006330399, 0.006778893096112001], 'true,false': [9.482505852600081e-06, 0.0436873953404993], 'false,false': [8.769691044835382e-06, 9.865288982949321e-05], 'false,false,false': [nan, 9.865288982949321e-05]}, {'': [nan, 0.05434953496320761], 'false': [0.03723109407499696, 0.08909287414167592], 'false,false': [0.0861802631344441, 0.0985713981421951], 'false,false,false': [nan, 0.0985713981421951], 'false,false,true': [0.04849316207639264, 0.020052655794803635], 'false,true': [0.04723253384476136, 0.009340479865802932], 'false,true,false': [9.257272111568642e-06, 0.04937074496586104]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
0;false;follows(A, E), recursion_accounttype(E, B).;true;true
0;false,true;follows(F, A), follows(E, G).;true;true
1;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
1;false;follows(E, A), recursion_accounttype(E, B).;true;true
1;false,false;follows(F, A), follows(G, F).;true;true
1;false,false,true;recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
3;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
3;true;follows(C, D), follows(D, C).;true;true
3;true,true;recursion_accounttype(D, B).;true;true
3;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(D, A), tweets(D, E).;true;true
4;false,true;follows(A, F), follows(D, F).;true;true
4;false,true,true;follows(G, D), recursion_accounttype(G, B).;true;true
4;false,true,false;recursion_accounttype(D, B).;true;true
4;false,false;recursion_accounttype(H, B).;true;true
4;false,false,false;tweets(A, I), follows(A, J).;true;true
7;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
7;false;follows(A, D), follows(D, A).;true;true
7;false,false;follows(A, G).;true;true
7;false,false,false;follows(H, A), recursion_accounttype(H, B).;true;true
8;;accounttype(A, B) :- follows(A, C), follows(D, A).;true;true
8;true;follows(C, E), recursion_accounttype(E, B).;true;true
8;true,false;follows(C, A).;true;true
8;false;recursion_accounttype(F, B).;true;true
8;false,false;follows(H, A), follows(I, H).;true;true
9;;accounttype(A, B) :- follows(D, A).;true;true
9;true;follows(E, D), recursion_accounttype(E, B).;true;true
9;true,false;follows(A, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then return 0.8581489350995123;  // std dev = 8.43e-08, 53.000 (wgt'ed) examples reached here.  /* #pos=53 */
%   | else return 0.7867203636709409;  // std dev = 0.258, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   else if ( follows(A, E), recursion_accounttype(E, B) )
%   | then if ( follows(F, A), follows(E, G) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.13292249347191623;  // std dev = 0.996, 112.000 (wgt'ed) examples reached here.  /* #neg=111 #pos=1 */
%   | | | else return 0.0353641249729301;  // std dev = 3.394, 79.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=14 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.1414822684328457;  // std dev = 3.490, 60.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=17 */
%   | | | else return 0.23592671287729014;  // std dev = 3.252, 45.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=17 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( follows(E, F), follows(F, A) )
%   | | then if ( recursion_accounttype(F, B), recursion_accounttype(E, B) )
%   | | | then return 0.6718543645919065;  // std dev = 0.976, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | | else return 0.7194734122109542;  // std dev = 5.16e-08, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0.7194734122109543;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return 0.7194734122109543;  // std dev = 1.49e-08, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.7310012243166281;  // std dev = 0.006, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.7897604169211935;  // std dev = 0.949, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | | else return -0.12671969066326366;  // std dev = 0.991, 166.000 (wgt'ed) examples reached here.  /* #neg=165 #pos=1 */
%   | | else if ( follows(A, J), tweets(A, K) )
%   | | | then return 0.1008639494818913;  // std dev = 3.098, 50.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=13 */
%   | | | else return 0.15772338159449556;  // std dev = 3.756, 64.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=21 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then return 0.5092749894628031;  // std dev = 0.218, 60.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=57 */
%   | | else return 0.2259416561294704;  // std dev = 0.821, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.04688516320804598;  // std dev = 0.236, 142.000 (wgt'ed) examples reached here.  /* #neg=130 #pos=12 */
%   | | else if ( follows(G, A), tweets(G, H) )
%   | | | then return 0.03453384381447032;  // std dev = 1.246, 14.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=3 */
%   | | | else return 0.11576745210140475;  // std dev = 4.300, 89.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=27 */
%   else if ( follows(I, A), recursion_accounttype(I, B) )
%   | then return 0.5701047182609641;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( follows(J, A) )
%   | | then return -0.06193912339232437;  // std dev = 0.211, 30.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=2 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.26213736523252584;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | | | else return 0.1365229228421538;  // std dev = 1.633, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, C) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | | then return 0.4333951043018951;  // std dev = 0.040, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | | | else return 0.3037636195005232;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else return -0.11257948003898824;  // std dev = 1.065, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | else return 0.4639363097918356;  // std dev = 0.050, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.44891577567011987;  // std dev = 0.043, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return -0.09973072690406552;  // std dev = 0.871, 102.000 (wgt'ed) examples reached here.  /* #neg=101 #pos=1 */
%   | | | else return 0.057086114683356746;  // std dev = 2.903, 66.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=14 */
%   | | else if ( follows(A, I), tweets(A, J) )
%   | | | then return 0.06874659049093944;  // std dev = 3.102, 50.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=13 */
%   | | | else return 0.12089338967517352;  // std dev = 3.725, 62.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=21 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( recursion_accounttype(D, B), follows(A, D) )
%   | | then return 0.33155654599165235;  // std dev = 0.005, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else return 0.12470365396261619;  // std dev = 0.437, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | else return 0.36809929556965104;  // std dev = 0.037, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(F, A), tweets(F, G) )
%   | then if ( follows(A, H), follows(F, H) )
%   | | then if ( follows(I, F), recursion_accounttype(I, B) )
%   | | | then return 0.6983084185495695;  // std dev = 0.288, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.110740012400735;  // std dev = 0.205, 137.000 (wgt'ed) examples reached here.  /* #neg=137 */
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0.33147068498756305;  // std dev = 0.105, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.012947800440988016;  // std dev = 2.147, 59.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=7 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then return 0.7644770555889451;  // std dev = 0.063, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | else return -0.218205673290646;  // std dev = 0.021, 73.000 (wgt'ed) examples reached here.  /* #neg=73 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), tweets(C, D) )
%   | then return 0.27081120851530244;  // std dev = 0.037, 51.000 (wgt'ed) examples reached here.  /* #pos=51 */
%   | else if ( tweets(C, E), tweets(A, F) )
%   | | then return -0.05751187538187678;  // std dev = 0.786, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.2614022877474906;  // std dev = 0.015, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then if ( follows(G, I), follows(A, I) )
%   | | | then return 0.3808062881016307;  // std dev = 1.216, 12.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | | | else return 0.7464947142057314;  // std dev = 0.122, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return -0.10242529983658885;  // std dev = 0.018, 174.000 (wgt'ed) examples reached here.  /* #neg=174 */
%   | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | then return 0.28563816352328336;  // std dev = 0.035, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( follows(A, K), tweets(A, L) )
%   | | | then return 0.05673711428349296;  // std dev = 2.505, 47.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=13 */
%   | | | else return 0.07893856960770868;  // std dev = 2.963, 59.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=21 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, A) )
%   | then return 0.22325618300516992;  // std dev = 0.036, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | else return 0.16240664412177655;  // std dev = 0.212, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   else if ( follows(E, A) )
%   | then if ( follows(F, E), follows(F, A) )
%   | | then return -0.08537567184992813;  // std dev = 0.085, 123.000 (wgt'ed) examples reached here.  /* #neg=122 #pos=1 */
%   | | else if ( follows(E, G), recursion_accounttype(G, B) )
%   | | | then return 0.4935820291026969;  // std dev = 0.458, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return -0.11541515489820711;  // std dev = 0.068, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.4498991168242067;  // std dev = 1.768, 32.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=30 */
%   | | | else return -0.19224224762709702;  // std dev = 0.117, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
%   | | else if ( tweets(A, J), follows(A, K) )
%   | | | then return 0.14744062678424874;  // std dev = 0.889, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return -0.044614562667516226;  // std dev = 2.115, 40.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=9 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.18978720356127396;  // std dev = 0.031, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | else if ( follows(E, A) )
%   | | then return -0.1639146721820348;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.1613292948152125;  // std dev = 0.024, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( follows(A, F), follows(F, A) )
%   | then if ( tweets(A, G) )
%   | | then return -0.041975689745792785;  // std dev = 0.140, 125.000 (wgt'ed) examples reached here.  /* #neg=114 #pos=11 */
%   | | else return -0.07158668351147658;  // std dev = 0.084, 27.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=1 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(A, I), follows(I, J) )
%   | | | then return 0.009235956194241718;  // std dev = 2.731, 96.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=25 */
%   | | | else return 0.10546056054240045;  // std dev = 1.277, 13.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=5 */
%   | | else if ( follows(K, A), recursion_accounttype(K, B) )
%   | | | then return 0.17489997761381984;  // std dev = 0.012, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.005237201444289812;  // std dev = 2.020, 43.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=10 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(D, A) )
%   then if ( follows(C, E), recursion_accounttype(E, B) )
%   | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return 0.162464476214708;  // std dev = 0.202, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | | | else return -0.3138032486679777;  // std dev = 0.931, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | else return 0.37690197919828033;  // std dev = 0.099, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( follows(C, A) )
%   | | then return -0.08186166144225754;  // std dev = 0.012, 131.000 (wgt'ed) examples reached here.  /* #neg=131 */
%   | | else return -0.06803517234155311;  // std dev = 0.158, 24.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=2 */
%   else if ( recursion_accounttype(H, B) )
%   | then if ( follows(I, A), recursion_accounttype(I, B) )
%   | | then return 0.15107727140710156;  // std dev = 0.003, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.14075404270942707;  // std dev = 0.057, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.49124881924092895;  // std dev = 0.971, 37.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=36 */
%   | else return -0.15312023963661292;  // std dev = 0.049, 78.000 (wgt'ed) examples reached here.  /* #neg=78 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.14086923724816444;  // std dev = 0.026, 65.000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | | else return 0.3135933364278416;  // std dev = 0.058, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( follows(A, C) )
%   | | then return -0.07634087062347383;  // std dev = 0.012, 134.000 (wgt'ed) examples reached here.  /* #neg=134 */
%   | | else return -0.0552061305042262;  // std dev = 0.132, 32.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=2 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then return 0.1246325277216264;  // std dev = 0.020, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.38279395584906134;  // std dev = 0.176, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | | else return -0.15301189523200545;  // std dev = 0.164, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.0025884793753715328;  // std dev = 1.252, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.0506048548411469;  // std dev = 1.035, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */


Results
   AUC ROC   = 0.993186
   AUC PR    = 0.350441
   CLL	      = -0.112576
   Precision = 0.339623 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.507042


Total learning time: 16.27 seconds
Total inference time: 59.819 seconds
AUC ROC: 0.993186


Results scoring model
   AUC ROC   = 0.995501
   AUC PR    = 0.435823
   CLL	      = -0.118925
   Precision = 0.344538 at threshold = 0.5
   Recall    = 0.991935
   F1        = 0.511435


Total scoring time: 56.485 seconds
Refined model CLL: -0.118925


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.993186
   AUC PR    = 0.350441
   CLL	      = -0.112576
   Precision = 0.339623 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.507042


Total learning time: 115.828 seconds
Total inference time: 59.819 seconds
AUC ROC: 0.993186
Total revision time: 115.828
Best scored revision CLL: -0.118925


Dataset: 7_yeast_twitter, Fold: 1, Type: Transfer (trRDN-B), Time: 00:11:22
{'AUC ROC': 0.993186, 'AUC PR': 0.350441, 'CLL': -0.112576, 'Precision': [0.339623, 0.5], 'Recall': 1.0, 'F1': 0.507042, 'Learning time': 115.828, 'Inference time': 59.819, 'parameter_0.8': {'AUC ROC': 0.992597, 'AUC PR': 0.349871, 'CLL': -0.125879, 'Precision': [0.33913, 0.5], 'Recall': 0.928571, 'F1': 0.496815, 'Learning time': 7.021, 'Inference time': 41.635}}


Amount of data: 1.0
******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;false;true
0;false;interaction(A, D), interaction(D, D).;true;true
0;false,true;interaction(E, A), interaction(D, E).;true;true
0;false,true,true;interaction(A, A).;false;false
0;false,true,false;enzyme(D, F), phenotype(A, G).;false;false
0;false,false;interaction(H, A), recursion_proteinclass(H, B).;true;true
0;false,false,true;interaction(A, I), interaction(J, H).;false;false
0;false,false,false;interaction(K, A), complex(A, L).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
1;true;interaction(C, C).;false;true
1;true,false;interaction(A, D), interaction(D, D).;true;false
1;true,false,true;complex(C, E).;false;false
1;false;interaction(A, F), recursion_proteinclass(F, B).;false;true
1;false,false;interaction(A, G), interaction(G, H).;true;true
1;false,false,true;recursion_proteinclass(H, B).;false;false
1;false,false,false;interaction(I, A), location(I, J).;false;false
2;;proteinclass(A, B) :- interaction(C, A), enzyme(C, D).;true;true
2;true;location(A, E), location(C, E).;false;true
2;true,false;interaction(A, F), phenotype(A, G).;true;true
2;true,false,true;interaction(F, A), interaction(H, C).;false;false
2;true,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;false;interaction(A, J), recursion_proteinclass(J, B).;false;true
2;false,false;interaction(A, K), enzyme(K, L).;false;true
2;false,false,false;interaction(M, A), interaction(A, M).;false;false
3;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
3;true;interaction(D, C), interaction(C, D).;true;false
3;true,true;recursion_proteinclass(D, B).;false;false
3;false;interaction(A, E), recursion_proteinclass(E, B).;true;true
3;false,true;interaction(E, F), interaction(F, F).;false;false
3;false,false;interaction(A, G), interaction(H, A).;true;true
3;false,false,true;complex(A, I), complex(G, I).;false;false
3;false,false,false;enzyme(A, J), complex(A, K).;false;false
4;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
4;false;interaction(A, D), complex(D, E).;true;true
4;false,true;interaction(F, A), interaction(F, D).;true;true
4;false,true,true;interaction(D, G), recursion_proteinclass(G, B).;false;false
4;false,true,false;recursion_proteinclass(D, B).;false;false
4;false,false;enzyme(A, H), location(A, I).;true;true
4;false,false,true;enzyme(J, H), recursion_proteinclass(J, B).;false;false
4;false,false,false;complex(A, K), interaction(L, A).;false;false
5;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;false;true
5;false;interaction(D, A), interaction(A, D).;true;true
5;false,true;interaction(D, D).;true;true
5;false,true,true;interaction(A, A).;false;false
5;false,true,false;phenotype(D, E), complex(D, F).;false;false
5;false,false;enzyme(A, G), interaction(A, H).;true;true
5;false,false,true;enzyme(H, I).;false;false
5;false,false,false;interaction(A, J), interaction(J, J).;false;false
6;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
6;false;interaction(A, D), phenotype(A, E).;true;true
6;false,true;location(D, F), location(A, F).;true;true
6;false,true,true;interaction(D, G), recursion_proteinclass(G, B).;false;false
6;false,true,false;complex(D, H), interaction(D, D).;false;false
6;false,false;interaction(A, I), interaction(I, A).;true;true
6;false,false,true;interaction(I, I).;false;false
6;false,false,false;location(A, J).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
7;false;interaction(D, A), interaction(A, D).;true;true
7;false,true;complex(D, E).;true;true
7;false,true,true;complex(A, F), enzyme(D, G).;false;false
7;false,true,false;interaction(D, D), complex(A, H).;false;false
7;false,false;enzyme(A, I), interaction(J, A).;true;true
7;false,false,true;enzyme(J, K), phenotype(J, L).;false;false
7;false,false,false;interaction(A, M), recursion_proteinclass(M, B).;false;false
8;;proteinclass(A, B) :- interaction(C, A), interaction(A, D).;true;true
8;true;interaction(E, C), recursion_proteinclass(E, B).;false;true
8;true,false;interaction(A, C).;false;false
8;false;location(A, F).;true;true
8;false,true;location(G, F), recursion_proteinclass(G, B).;true;false
8;false,true,true;interaction(H, A), interaction(H, G).;false;false
8;false,false;interaction(A, I), interaction(I, J).;false;true
8;false,false,false;interaction(A, K).;false;false
9;;proteinclass(A, B) :- interaction(C, A), interaction(C, C).;true;true
9;true;recursion_proteinclass(C, B), interaction(A, C).;false;false
9;false;enzyme(A, D), interaction(A, E).;true;true
9;false,true;interaction(E, F), recursion_proteinclass(F, B).;false;true
9;false,true,false;interaction(E, A).;false;false
9;false,false;interaction(G, A), phenotype(A, H).;true;true
9;false,false,true;interaction(I, G), recursion_proteinclass(I, B).;false;false
9;false,false,false;interaction(A, J), enzyme(J, K).;false;false


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.8581489350995121;  // std dev = 0.000, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   else if ( follows(D, A), follows(D, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), follows(E, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.524815601766179;  // std dev = 1.633, 12.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=8 */
%   | | else if ( follows(A, H), tweets(A, I) )
%   | | | then return -0.003755826805250141;  // std dev = 5.000, 210.000 (wgt'ed) examples reached here.  /* #neg=181 #pos=29 */
%   | | | else return 0.03763611458669187;  // std dev = 4.793, 156.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=28 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(D, A), follows(D, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.7014659090394424;  // std dev = 1.373, 80.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=78 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then return 0.6740188667564088;  // std dev = 0.977, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | else if ( follows(F, A), follows(G, F) )
%   | | then if ( recursion_accounttype(G, B) )
%   | | | then return 0.7985819754939808;  // std dev = 0.974, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | | else return -0.1380264986259721;  // std dev = 1.000, 200.000 (wgt'ed) examples reached here.  /* #neg=199 #pos=1 */
%   | | else if ( follows(A, H) )
%   | | | then return 0.14071922222066952;  // std dev = 4.554, 102.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=29 */
%   | | | else return 0.16779118730789902;  // std dev = 2.746, 35.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=11 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, A) )
%   | then if ( follows(A, D), follows(C, E) )
%   | | then return 0.11651102985436501;  // std dev = 5.332, 239.000 (wgt'ed) examples reached here.  /* #neg=157 #pos=82 */
%   | | else return 0.1945629262540788;  // std dev = 1.661, 20.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=9 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.17535354687957638;  // std dev = 4.710, 105.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=37 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.566560635563244;  // std dev = 4.21e-08, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(H, A) )
%   | | then return -0.09034603352648644;  // std dev = 1.179, 43.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=2 */
%   | | else if ( follows(A, I), follows(I, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.17500847738004133;  // std dev = 2.687, 32.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=11 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, C) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then return 0.5091008721062981;  // std dev = 1.363, 74.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=72 */
%   | | else return 0.5646118741523689;  // std dev = 0.048, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else return 0.36355827533680724;  // std dev = 0.860, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(F, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.45320615516988516;  // std dev = 0.199, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(G, A), follows(A, H) )
%   | | then if ( tweets(A, I), tweets(G, I) )
%   | | | then return -0.07006007034580583;  // std dev = 2.930, 159.000 (wgt'ed) examples reached here.  /* #neg=146 #pos=13 */
%   | | | else return -0.09210434221843235;  // std dev = 1.269, 35.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=2 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.040690291446269865;  // std dev = 3.882, 95.000 (wgt'ed) examples reached here.  /* #neg=75 #pos=20 */
%   | | | else return 0.11451418754830775;  // std dev = 3.879, 73.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=22 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.3630727354634561;  // std dev = 1.990, 82.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=78 */
%   else if ( follows(D, A), tweets(D, E) )
%   | then if ( follows(A, F), follows(D, F) )
%   | | then if ( follows(G, D), recursion_accounttype(G, B) )
%   | | | then return 0.6378560602798715;  // std dev = 0.458, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.12909906609478072;  // std dev = 0.543, 175.000 (wgt'ed) examples reached here.  /* #neg=174 #pos=1 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0.2666200390541986;  // std dev = 0.979, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | | else return -0.011206660082605712;  // std dev = 2.426, 66.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=9 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then return 0.7884653085875625;  // std dev = 0.392, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | | else if ( tweets(A, I), follows(A, J) )
%   | | | then return -0.1904648137157794;  // std dev = 0.000, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | | | else return -0.2091296131741247;  // std dev = 0.028, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.2985306980396842;  // std dev = 1.016, 86.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=85 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(D, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(D, E) )
%   | | | then return -0.04656789656552118;  // std dev = 2.864, 179.000 (wgt'ed) examples reached here.  /* #neg=160 #pos=19 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return -0.0829587251766498;  // std dev = 0.187, 72.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=4 */
%   | | else if ( follows(G, A), follows(G, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.08653252487435045;  // std dev = 4.448, 142.000 (wgt'ed) examples reached here.  /* #neg=94 #pos=48 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.24143686750512452;  // std dev = 1.661, 81.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=78 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0.36035697221929014;  // std dev = 1.979, 38.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=36 */
%   | | else if ( tweets(D, F), follows(D, D) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10852651010299774;  // std dev = 1.098, 236.000 (wgt'ed) examples reached here.  /* #neg=234 #pos=2 */
%   | else if ( follows(G, A), follows(A, G) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.0457675285984636;  // std dev = 0.363, 141.000 (wgt'ed) examples reached here.  /* #neg=101 #pos=40 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.18337652151645958;  // std dev = 1.948, 82.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=78 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( tweets(D, E) )
%   | | then if ( tweets(A, F) )
%   | | | then return -0.040403587581657345;  // std dev = 2.354, 146.000 (wgt'ed) examples reached here.  /* #neg=132 #pos=14 */
%   | | | else return -0.09535870046839102;  // std dev = 0.720, 25.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then return 0.02799952346826104;  // std dev = 0.337, 130.000 (wgt'ed) examples reached here.  /* #neg=95 #pos=35 */
%   | | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0.15743444738599627;  // std dev = 1.05e-08, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.0047973484271308245;  // std dev = 2.471, 65.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=13 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(D, A) )
%   then if ( follows(C, E), recursion_accounttype(E, B) )
%   | then return 0.2190313999425334;  // std dev = 2.239, 91.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=88 */
%   | else if ( follows(C, A) )
%   | | then return -0.09859488701537035;  // std dev = 0.048, 152.000 (wgt'ed) examples reached here.  /* #neg=152 */
%   | | else return -0.04072911235436367;  // std dev = 1.061, 22.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=3 */
%   else if ( recursion_accounttype(F, B) )
%   | then if ( follows(A, G), follows(F, G) )
%   | | then return 0.5047435535557598;  // std dev = 1.476, 38.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=37 */
%   | | else return 0.35734115391062365;  // std dev = 1.252, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then return -0.10523524504739595;  // std dev = 0.012, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | else if ( follows(J, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.19456324555455834;  // std dev = 0.073, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(C, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0.18776893433553968;  // std dev = 2.086, 106.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=104 */
%   | | else if ( follows(A, D) )
%   | | | then return -0.08964820024842896;  // std dev = 0.031, 149.000 (wgt'ed) examples reached here.  /* #neg=149 */
%   | | | else return -0.06376815193870333;  // std dev = 1.141, 56.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=4 */
%   | else if ( follows(A, F) )
%   | | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | | then return 0.4128213554591543;  // std dev = 0.733, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | | else return -0.13037228820262683;  // std dev = 1.263, 78.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=4 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.08197771129810025;  // std dev = 1.794, 30.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=11 */


Results
   AUC ROC   = 0.992582
   AUC PR    = 0.350855
   CLL	      = -0.126133
   Precision = 0.331361 at threshold = 0.5
   Recall    = 0.888889
   F1        = 0.482759


Total learning time: 7.635 seconds
Total inference time: 42.459 seconds
AUC ROC: 0.992582


Results scoring model
   AUC ROC   = 0.991865
   AUC PR    = 0.355308
   CLL	      = -0.133564
   Precision = 0.339024 at threshold = 0.5
   Recall    = 0.891026
   F1        = 0.491166


Total scoring time: 44.281 seconds
Parameter learned model CLL: -0.133564


Structure after Parameter Learning
[['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(D, A), follows(D, D)', 'false,false': 'follows(A, E), recursion_accounttype(E, B)', 'false,false,true': 'follows(F, A), follows(E, G)', 'false,false,false': 'follows(A, H), tweets(A, I)'}, {'true': [0.0, 0, 85], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 6], 'false,false,true,false': [1.633, 4, 8], 'false,false,false,true': [5.0, 181, 29], 'false,false,false,false': [4.793, 128, 28]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, C)', 'true,false': 'follows(D, A), follows(D, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,false': 'follows(F, A), follows(G, F)', 'false,false,true': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(A, H)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [1.373, 2, 78], 'false,true': [0.977, 1, 21], 'false,false,true,true': [0.974, 1, 16], 'false,false,true,false': [1.0, 199, 1], 'false,false,false,true': [4.554, 73, 29], 'false,false,false,false': [2.746, 24, 11]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, A)', 'true,true': 'follows(A, D), follows(C, E)', 'true,false': 'follows(F, A), recursion_accounttype(F, B)', 'false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false': 'follows(H, A)', 'false,false,false': 'follows(A, I), follows(I, A)'}, {'true,true,true': [5.332, 157, 82], 'true,true,false': [1.661, 11, 9], 'true,false,true': [0.0, 0, 0], 'true,false,false': [4.71, 68, 37], 'false,true': [4.21e-08, 0, 15], 'false,false,true': [1.179, 41, 2], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.687, 21, 11]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D), follows(D, C)', 'true,true': 'recursion_accounttype(D, B)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(F, F)', 'false,false': 'follows(G, A), follows(A, H)', 'false,false,true': 'tweets(A, I), tweets(G, I)', 'false,false,false': 'tweets(A, J)'}, {'true,true,true': [1.363, 2, 72], 'true,true,false': [0.048, 0, 2], 'true,false': [0.86, 1, 4], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.199, 0, 21], 'false,false,true,true': [2.93, 146, 13], 'false,false,true,false': [1.269, 33, 2], 'false,false,false,true': [3.882, 75, 20], 'false,false,false,false': [3.879, 51, 22]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A), tweets(D, E)', 'false,true': 'follows(A, F), follows(D, F)', 'false,true,true': 'follows(G, D), recursion_accounttype(G, B)', 'false,true,false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(H, B)', 'false,false,false': 'tweets(A, I), follows(A, J)'}, {'true': [1.99, 4, 78], 'false,true,true,true': [0.458, 0, 11], 'false,true,true,false': [0.543, 174, 1], 'false,true,false,true': [0.979, 1, 16], 'false,true,false,false': [2.426, 57, 9], 'false,false,true': [0.392, 0, 41], 'false,false,false,true': [0.0, 39, 0], 'false,false,false,false': [0.028, 54, 0]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(D, D)', 'false,true,false': 'tweets(D, E)', 'false,false': 'follows(F, A)', 'false,false,false': 'follows(G, A), follows(G, G)'}, {'true': [1.016, 1, 85], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [2.864, 160, 19], 'false,true,false,false': [0.0, 0, 0], 'false,false,true': [0.187, 68, 4], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [4.448, 94, 48]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(D, F), follows(D, D)', 'false,false': 'follows(G, A), follows(A, G)'}, {'true': [1.661, 3, 78], 'false,true,true': [1.979, 2, 36], 'false,true,false,true': [0.0, 0, 0], 'false,true,false,false': [1.098, 234, 2], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.363, 101, 40]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'tweets(D, E)', 'false,true,true': 'tweets(A, F)', 'false,false': 'follows(A, G)', 'false,false,false': 'follows(H, A), recursion_accounttype(H, B)'}, {'true': [1.948, 4, 78], 'false,true,true,true': [2.354, 132, 14], 'false,true,true,false': [0.72, 24, 1], 'false,true,false': [0.0, 0, 0], 'false,false,true': [0.337, 95, 35], 'false,false,false,true': [1.05e-08, 0, 15], 'false,false,false,false': [2.471, 52, 13]}], ['accounttype(A, B)', {'': 'follows(A, C), follows(D, A)', 'true': 'follows(C, E), recursion_accounttype(E, B)', 'true,false': 'follows(C, A)', 'false': 'recursion_accounttype(F, B)', 'false,true': 'follows(A, G), follows(F, G)', 'false,false': 'follows(H, A), follows(I, H)', 'false,false,false': 'follows(J, A)'}, {'true,true': [2.239, 3, 88], 'true,false,true': [0.048, 152, 0], 'true,false,false': [1.061, 19, 3], 'false,true,true': [1.476, 1, 37], 'false,true,false': [1.252, 0, 28], 'false,false,true': [0.012, 30, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.073, 103, 0]}], ['accounttype(A, B)', {'': 'follows(A, C), follows(C, C)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'follows(A, D)', 'false,false': 'follows(A, F)', 'false,false,true': 'follows(F, G), recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.0, 0, 0], 'false,true,true': [2.086, 2, 104], 'false,true,false,true': [0.031, 149, 0], 'false,true,false,false': [1.141, 52, 4], 'false,false,true,true': [0.733, 0, 33], 'false,false,true,false': [1.263, 74, 4], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.794, 19, 11]}]]
[{'': [-3.343730521224001e-16, 0.15070936414930655], 'false': [nan, 0.15070936414930655], 'false,false': [0.1728395061728392, 0.1314834721848973], 'false,false,true': [-1.4802973661668753e-16, 0.2222222222222221], 'false,false,false': [0.11902494331065863, 0.14727153188691597]}, {'': [0.023556463973388463, 0.15335657405874026], 'false': [0.04338842975206638, 0.1349720286587299], 'false,false': [0.07231868546241724, 0.2065861877388713], 'false,false,false': [0.20333679026627952, 0.2155102040816326], 'false,false,true': [0.0558268291562481, 0.00499698000196118], 'true': [nan, 0.023556463973388463], 'true,false': [nan, 0.02355646397338802]}, {'': [0.14751402452030118, 0.1510684909470999], 'false': [1.1842378929335003e-16, 0.13201594733206995], 'true': [0.12084549625764603, 0.21131158579137557], 'true,false': [nan, 0.21131158579137557], 'false,false': [0.03233957925459735, 0.22558593750000003], 'false,false,false': [nan, 0.22558593750000003], 'true,true': [0.11894592491393968, 0.13792370760239536]}, {'': [0.03341783831559596, 0.12196752281845123], 'false': [0.0018833987546584194, 0.11737636685950174], 'false,false': [0.052622019895222444, 0.1806023054025355], 'false,false,false': [0.15863323407602203, 0.2061103658084136], 'false,false,true': [0.053993493481069396, 0.04599333277487351], 'true': [0.024551156975730473, 0.14791534218395058], 'true,true': [0.025102947257010386, 0.0011345365714827693], 'false,true': [nan, 0.0018833987546584194]}, {'': [0.04827556756573138, 0.11258003671063575], 'false': [0.05740671879401284, 0.20923846650190323], 'false,false': [0.0037409788138996567, 9.347656774972332e-05], 'false,true': [0.03544327578958797, 0.09504111669159397], 'false,true,false': [0.056363709517962206, 0.08919395540076602], 'false,true,true': [0.019074193063151137, 0.0016849754502330251], 'false,false,false': [-5.693451408334136e-17, 1.4894789826997908e-05]}, {'': [0.01200333377963729, 0.08258348660875933], 'false': [0.04583428379612793, 0.11068628914522137], 'false,false': [0.035092588029332114, 0.13935023533365373], 'false,false,false': [nan, 0.13935023533365373], 'false,true': [nan, 0.04583428379612793], 'false,true,false': [0.04583428379612793, nan]}, {'': [0.034060206295551586, 0.07623755822079589], 'false': [0.0449582367843788, 0.13176036390022006], 'false,false': [nan, 0.13176036390022006], 'false,true': [0.10310025220151849, 0.005106002319521892], 'false,true,false': [nan, 0.005106002319521897]}, {'': [0.04627627526330427, 0.07319529599669576], 'false': [0.03581472109052567, 0.10086794459309027], 'false,false': [0.11376858376755013, 0.07988623878523338], 'false,false,false': [7.401486830834377e-18, 0.09395313391276523], 'false,true': [0.03581472109052567, nan], 'false,true,true': [0.037954364754998283, 0.020740667545389026]}, {'': [0.045123422401169073, 0.10583559087652024], 'false': [0.06209846887990019, 0.0014351971999797342], 'false,true': [0.05736868013103512, 0.056007713926467084], 'true': [0.055079981153439345, 0.0068498615630171785], 'true,false': [1.536729447636147e-05, 0.051144922877877065], 'false,false': [4.555177830397235e-06, 5.200371095417097e-05], 'false,false,false': [nan, 5.200371095417097e-05]}, {'': [nan, 0.051201285183310234], 'false': [0.03469163416895615, 0.08689508553264493], 'false,false': [0.08085042800719176, 0.107223949118207], 'false,false,false': [nan, 0.107223949118207], 'false,false,true': [0.01626887216664001, 0.020453051246214132], 'false,true': [0.04106272357798337, 0.006486377239906312], 'false,true,false': [6.448461896641057e-06, 0.023240802855447905]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
0;false;follows(A, E), recursion_accounttype(E, B).;true;true
0;false,true;follows(F, A), follows(E, G).;true;true
2;;accounttype(A, B) :- follows(A, C).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
3;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
3;true;follows(C, D), follows(D, C).;true;true
3;true,true;recursion_accounttype(D, B).;true;true
3;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(D, A), tweets(D, E).;true;true
4;false,true;follows(A, F), follows(D, F).;true;true
4;false,true,true;follows(G, D), recursion_accounttype(G, B).;true;true
4;false,false;recursion_accounttype(H, B).;true;true
4;false,false,false;tweets(A, I), follows(A, J).;true;true
7;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
7;false;follows(A, D), follows(D, A).;true;true
7;false,false;follows(A, G).;true;true
7;false,false,false;follows(H, A), recursion_accounttype(H, B).;true;true
8;;accounttype(A, B) :- follows(A, C), follows(D, A).;true;true
8;true;follows(C, E), recursion_accounttype(E, B).;true;true
8;true,false;follows(C, A).;true;true
8;false;recursion_accounttype(F, B).;true;true
8;false,false;follows(H, A), follows(I, H).;true;true
9;;accounttype(A, B) :- follows(D, A).;true;true
9;true;follows(E, D), recursion_accounttype(E, B).;true;true
9;true,false;follows(A, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then return 0.8414822684328459;  // std dev = 0.128, 60.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=59 */
%   | | else return 0.5248156017661789;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else return 0.8581489350995123;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   else if ( follows(A, E), recursion_accounttype(E, B) )
%   | then if ( follows(F, A), follows(E, G) )
%   | | then return 0.6081489350995123;  // std dev = 0.433, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.1418510649004885;  // std dev = 0.000, 221.000 (wgt'ed) examples reached here.  /* #neg=221 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.09853355048412701;  // std dev = 4.358, 104.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=25 */
%   | | | else return 0.25288577720477545;  // std dev = 3.013, 38.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=15 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, A) )
%   | then return 0.7258137377215377;  // std dev = 0.116, 63.000 (wgt'ed) examples reached here.  /* #pos=63 */
%   | else if ( tweets(A, E), follows(A, C) )
%   | | then return 0.6117138210489413;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else return 0.720909777903425;  // std dev = 0.006, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(F, H), follows(H, A) )
%   | | | then return 0.23137304971739622;  // std dev = 1.024, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.6848367190349923;  // std dev = 0.992, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | else return -0.12544463852839177;  // std dev = 0.000, 225.000 (wgt'ed) examples reached here.  /* #neg=225 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.7194734122109543;  // std dev = 2.98e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.05999128406456495;  // std dev = 3.848, 86.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=19 */
%   | | | else return 0.08713322337557042;  // std dev = 3.967, 84.000 (wgt'ed) examples reached here.  /* #neg=63 #pos=21 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( recursion_accounttype(E, B) )
%   | | then return 0.5508501175388372;  // std dev = 0.136, 89.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=87 */
%   | | else return -0.10488142411879899;  // std dev = 0.072, 190.000 (wgt'ed) examples reached here.  /* #neg=188 #pos=2 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0.455330965098755;  // std dev = 0.300, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | else if ( follows(A, G), follows(G, H) )
%   | | | then return 0.09616764355370698;  // std dev = 4.338, 99.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=26 */
%   | | | else return 0.17741137595152873;  // std dev = 1.595, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   else if ( follows(I, A), recursion_accounttype(I, B) )
%   | then return 0.49152739801096523;  // std dev = 0.242, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | else if ( follows(J, A) )
%   | | then return -0.08086435080012008;  // std dev = 0.142, 43.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=2 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.12333835637031217;  // std dev = 1.664, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | | | else return 0.16152976867975805;  // std dev = 2.133, 20.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=7 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, C) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then return 0.4342057344078142;  // std dev = 0.244, 72.000 (wgt'ed) examples reached here.  /* #pos=72 */
%   | | else return 0.1808841360269997;  // std dev = 0.711, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.28322267547286273;  // std dev = 0.957, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then return 0.4370688245456951;  // std dev = 0.121, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(F, A) )
%   | | then if ( follows(F, G), follows(G, A) )
%   | | | then return -0.0980613720768703;  // std dev = 0.640, 137.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=1 */
%   | | | else return -0.011997851501079617;  // std dev = 2.065, 98.000 (wgt'ed) examples reached here.  /* #neg=82 #pos=16 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return 0.10985867079496708;  // std dev = 4.220, 87.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=25 */
%   | | | else return 0.16339733130509354;  // std dev = 3.062, 40.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=15 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( tweets(A, E) )
%   | | then return 0.3017811626822509;  // std dev = 0.187, 56.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=54 */
%   | | else if ( follows(D, F), follows(F, A) )
%   | | | then return 0.32030905881472016;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.20684628656345416;  // std dev = 0.742, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | else return 0.3739775630362708;  // std dev = 0.069, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( follows(G, A), tweets(G, H) )
%   | then if ( follows(A, I), follows(G, I) )
%   | | then return -0.059682070117610383;  // std dev = 0.141, 158.000 (wgt'ed) examples reached here.  /* #neg=146 #pos=12 */
%   | | else if ( follows(J, A), recursion_accounttype(J, B) )
%   | | | then return 0.3283590185524778;  // std dev = 0.013, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return -0.01847443474151356;  // std dev = 1.636, 65.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=9 */
%   | else if ( recursion_accounttype(K, B) )
%   | | then return 0.776999162413902;  // std dev = 0.076, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | | else return -0.20175260084727714;  // std dev = 0.027, 97.000 (wgt'ed) examples reached here.  /* #neg=97 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C), tweets(A, D) )
%   | then return 0.24260296352238417;  // std dev = 0.134, 47.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=46 */
%   | else return 0.2784710742527396;  // std dev = 0.288, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   else if ( follows(E, A) )
%   | then if ( follows(F, E), follows(F, A) )
%   | | then return -0.08460305509579204;  // std dev = 0.086, 127.000 (wgt'ed) examples reached here.  /* #neg=125 #pos=2 */
%   | | else if ( follows(E, G), recursion_accounttype(G, B) )
%   | | | then return 0.40164468217633953;  // std dev = 0.908, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | else return -0.09790561419656556;  // std dev = 0.042, 75.000 (wgt'ed) examples reached here.  /* #neg=75 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.5662367389873241;  // std dev = 0.941, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | | else return -0.16854755749296804;  // std dev = 0.100, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.12323142062403702;  // std dev = 1.242, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.024307458027149526;  // std dev = 1.774, 24.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=7 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then return 0.2268661979479934;  // std dev = 0.307, 70.000 (wgt'ed) examples reached here.  /* #pos=70 */
%   | else if ( tweets(A, E) )
%   | | then return 0.17430908662363642;  // std dev = 0.025, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.31391882072397487;  // std dev = 1.001, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else if ( follows(A, F), follows(F, A) )
%   | then if ( follows(A, G), follows(F, G) )
%   | | then return -0.06100095745357948;  // std dev = 0.101, 183.000 (wgt'ed) examples reached here.  /* #neg=174 #pos=9 */
%   | | else return 0.052487162192612374;  // std dev = 0.203, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.3684463964366998;  // std dev = 1.269, 39.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=38 */
%   | | | else return -0.1325060796982791;  // std dev = 0.435, 111.000 (wgt'ed) examples reached here.  /* #neg=111 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.043705197997090696;  // std dev = 1.941, 44.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=13 */
%   | | | else return 0.01253945135517893;  // std dev = 2.030, 42.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=12 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then return 0.1898055591111814;  // std dev = 0.278, 70.000 (wgt'ed) examples reached here.  /* #pos=70 */
%   | else return 0.06205309516995473;  // std dev = 0.315, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else if ( follows(A, E), follows(E, A) )
%   | then if ( tweets(A, F) )
%   | | then return -0.04057847200658198;  // std dev = 0.137, 147.000 (wgt'ed) examples reached here.  /* #neg=133 #pos=14 */
%   | | else return -0.06452695617402722;  // std dev = 0.084, 27.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(A, H), follows(H, I) )
%   | | | then return 0.03577266332649695;  // std dev = 2.599, 98.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=29 */
%   | | | else return -0.0028067607703066103;  // std dev = 1.089, 21.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=6 */
%   | | else if ( follows(J, A), recursion_accounttype(J, B) )
%   | | | then return 0.16319525785493053;  // std dev = 0.070, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.01878567500589312;  // std dev = 2.259, 71.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=13 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(D, A) )
%   then if ( follows(C, E), recursion_accounttype(E, B) )
%   | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then if ( follows(F, A) )
%   | | | then return 0.13814357174575492;  // std dev = 0.995, 60.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=59 */
%   | | | else return 0.19423230110284334;  // std dev = 0.172, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0.33852778487710217;  // std dev = 0.096, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else return -0.07184704425517559;  // std dev = 0.050, 172.000 (wgt'ed) examples reached here.  /* #neg=169 #pos=3 */
%   else if ( recursion_accounttype(G, B) )
%   | then if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return 0.04919063358423753;  // std dev = 1.010, 16.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=14 */
%   | | | else return 0.36084727213445983;  // std dev = 0.225, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, J), tweets(A, K) )
%   | | | then return 0.33701455979253947;  // std dev = 0.569, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.4938719340500471;  // std dev = 0.454, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | else return -0.1405383678150825;  // std dev = 0.042, 121.000 (wgt'ed) examples reached here.  /* #neg=121 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.1164984221444145;  // std dev = 0.152, 85.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=83 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.028146538266116277;  // std dev = 0.811, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.26408967238345193;  // std dev = 0.794, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | else return -0.06666308594576376;  // std dev = 0.046, 246.000 (wgt'ed) examples reached here.  /* #neg=242 #pos=4 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.2859125908342244;  // std dev = 0.103, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | else return -0.12646030018528173;  // std dev = 0.148, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.3414410977735315;  // std dev = 0.294, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return -0.1395319954109337;  // std dev = 0.038, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | else return 0.13651460279819455;  // std dev = 0.325, 14.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=7 */


Results
   AUC ROC   = 0.993364
   AUC PR    = 0.351096
   CLL	      = -0.106559
   Precision = 0.345205 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.513238


Total learning time: 18.28 seconds
Total inference time: 49.566 seconds
AUC ROC: 0.993364


Results scoring model
   AUC ROC   = 0.994712
   AUC PR    = 0.366004
   CLL	      = -0.112485
   Precision = 0.347439 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.515702


Total scoring time: 54.419 seconds
Refined model CLL: -0.112485


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.993364
   AUC PR    = 0.351096
   CLL	      = -0.106559
   Precision = 0.345205 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.513238


Total learning time: 124.615 seconds
Total inference time: 49.566 seconds
AUC ROC: 0.993364
Total revision time: 124.615
Best scored revision CLL: -0.112485


Dataset: 7_yeast_twitter, Fold: 1, Type: Transfer (trRDN-B), Time: 00:15:00
{'AUC ROC': 0.993364, 'AUC PR': 0.351096, 'CLL': -0.106559, 'Precision': [0.345205, 0.5], 'Recall': 1.0, 'F1': 0.513238, 'Learning time': 124.615, 'Inference time': 49.566, 'parameter_1.0': {'AUC ROC': 0.992582, 'AUC PR': 0.350855, 'CLL': -0.126133, 'Precision': [0.331361, 0.5], 'Recall': 0.888889, 'F1': 0.482759, 'Learning time': 7.635, 'Inference time': 42.459}}


Starting fold 2

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos	 examples: 156
Target test neg examples: 24648

Amount of data: 0.2
******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;false;true
0;false;interaction(A, D), interaction(D, D).;true;true
0;false,true;interaction(E, A), interaction(D, E).;true;true
0;false,true,true;interaction(A, A).;false;false
0;false,true,false;enzyme(D, F), phenotype(A, G).;false;false
0;false,false;interaction(H, A), recursion_proteinclass(H, B).;true;true
0;false,false,true;interaction(A, I), interaction(J, H).;false;false
0;false,false,false;interaction(K, A), complex(A, L).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
1;true;interaction(C, C).;false;true
1;true,false;interaction(A, D), interaction(D, D).;true;false
1;true,false,true;complex(C, E).;false;false
1;false;interaction(A, F), recursion_proteinclass(F, B).;false;true
1;false,false;interaction(A, G), interaction(G, H).;true;true
1;false,false,true;recursion_proteinclass(H, B).;false;false
1;false,false,false;interaction(I, A), location(I, J).;false;false
2;;proteinclass(A, B) :- interaction(C, A), enzyme(C, D).;true;true
2;true;location(A, E), location(C, E).;false;true
2;true,false;interaction(A, F), phenotype(A, G).;true;true
2;true,false,true;interaction(F, A), interaction(H, C).;false;false
2;true,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;false;interaction(A, J), recursion_proteinclass(J, B).;false;true
2;false,false;interaction(A, K), enzyme(K, L).;false;true
2;false,false,false;interaction(M, A), interaction(A, M).;false;false
3;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
3;true;interaction(D, C), interaction(C, D).;true;false
3;true,true;recursion_proteinclass(D, B).;false;false
3;false;interaction(A, E), recursion_proteinclass(E, B).;true;true
3;false,true;interaction(E, F), interaction(F, F).;false;false
3;false,false;interaction(A, G), interaction(H, A).;true;true
3;false,false,true;complex(A, I), complex(G, I).;false;false
3;false,false,false;enzyme(A, J), complex(A, K).;false;false
4;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
4;false;interaction(A, D), complex(D, E).;true;true
4;false,true;interaction(F, A), interaction(F, D).;true;true
4;false,true,true;interaction(D, G), recursion_proteinclass(G, B).;false;false
4;false,true,false;recursion_proteinclass(D, B).;false;false
4;false,false;enzyme(A, H), location(A, I).;true;true
4;false,false,true;enzyme(J, H), recursion_proteinclass(J, B).;false;false
4;false,false,false;complex(A, K), interaction(L, A).;false;false
5;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;false;true
5;false;interaction(D, A), interaction(A, D).;true;true
5;false,true;interaction(D, D).;true;true
5;false,true,true;interaction(A, A).;false;false
5;false,true,false;phenotype(D, E), complex(D, F).;false;false
5;false,false;enzyme(A, G), interaction(A, H).;true;true
5;false,false,true;enzyme(H, I).;false;false
5;false,false,false;interaction(A, J), interaction(J, J).;false;false
6;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
6;false;interaction(A, D), phenotype(A, E).;true;true
6;false,true;location(D, F), location(A, F).;true;true
6;false,true,true;interaction(D, G), recursion_proteinclass(G, B).;false;false
6;false,true,false;complex(D, H), interaction(D, D).;false;false
6;false,false;interaction(A, I), interaction(I, A).;true;true
6;false,false,true;interaction(I, I).;false;false
6;false,false,false;location(A, J).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
7;false;interaction(D, A), interaction(A, D).;true;true
7;false,true;complex(D, E).;true;true
7;false,true,true;complex(A, F), enzyme(D, G).;false;false
7;false,true,false;interaction(D, D), complex(A, H).;false;false
7;false,false;enzyme(A, I), interaction(J, A).;true;true
7;false,false,true;enzyme(J, K), phenotype(J, L).;false;false
7;false,false,false;interaction(A, M), recursion_proteinclass(M, B).;false;false
8;;proteinclass(A, B) :- interaction(C, A), interaction(A, D).;true;true
8;true;interaction(E, C), recursion_proteinclass(E, B).;false;true
8;true,false;interaction(A, C).;false;false
8;false;location(A, F).;true;true
8;false,true;location(G, F), recursion_proteinclass(G, B).;true;false
8;false,true,true;interaction(H, A), interaction(H, G).;false;false
8;false,false;interaction(A, I), interaction(I, J).;false;true
8;false,false,false;interaction(A, K).;false;false
9;;proteinclass(A, B) :- interaction(C, A), interaction(C, C).;true;true
9;true;recursion_proteinclass(C, B), interaction(A, C).;false;false
9;false;enzyme(A, D), interaction(A, E).;true;true
9;false,true;interaction(E, F), recursion_proteinclass(F, B).;false;true
9;false,true,false;interaction(E, A).;false;false
9;false,false;interaction(G, A), phenotype(A, H).;true;true
9;false,false,true;interaction(I, G), recursion_proteinclass(I, B).;false;false
9;false,false,false;interaction(A, J), enzyme(J, K).;false;false


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.8581489350995123;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   else if ( follows(D, A), follows(D, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), follows(E, G) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, H), tweets(A, I) )
%   | | | then return -0.08302753548872306;  // std dev = 1.372, 34.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=2 */
%   | | | else return 0.04564893509951222;  // std dev = 1.561, 16.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=3 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(D, A), follows(D, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.7194734122109543;  // std dev = 4.21e-08, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then return 0.7194734122109544;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(F, A), follows(G, F) )
%   | | then if ( recursion_accounttype(G, B) )
%   | | | then return 0.8525007584246689;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return -0.13521232788116946;  // std dev = 0.039, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | | else if ( follows(A, H) )
%   | | | then return 0.14925627994707225;  // std dev = 1.683, 14.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, A) )
%   | then if ( follows(A, D), follows(C, E) )
%   | | then return 0.05175578745018609;  // std dev = 2.315, 59.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=15 */
%   | | else return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.14627430262454433;  // std dev = 1.916, 20.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=7 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5553664367462845;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( follows(H, A) )
%   | | then return -0.13129425912896925;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, C) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then return 0.5425522851539364;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.5190166601380254;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(F, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.4487732594072165;  // std dev = 0.108, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(G, A), follows(A, H) )
%   | | then if ( tweets(A, I), tweets(G, I) )
%   | | | then return -0.13001827802827867;  // std dev = 0.107, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | | else return -0.0728571158228738;  // std dev = 0.805, 13.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=1 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.010106820223362822;  // std dev = 1.273, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   | | | else return 0.14468553767282008;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.3449157939517884;  // std dev = 0.989, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   else if ( follows(D, A), tweets(D, E) )
%   | then if ( follows(A, F), follows(D, F) )
%   | | then if ( follows(G, D), recursion_accounttype(G, B) )
%   | | | then return 0.48683014464366653;  // std dev = 0.292, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.11923847887818602;  // std dev = 0.143, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0.3139402496590765;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return -0.12187750842008511;  // std dev = 0.055, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then return 0.8085194193147315;  // std dev = 0.041, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, I), follows(A, J) )
%   | | | then return -0.16182682261091716;  // std dev = 0.051, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return -0.21179574086128108;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.2531351810531198;  // std dev = 0.964, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(D, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(D, E) )
%   | | | then return -0.08540622380181011;  // std dev = 0.935, 40.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=2 */
%   | | | else return -0.11609885530390827;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( follows(F, A) )
%   | | then return -0.11262007791304605;  // std dev = 0.016, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( follows(G, A), follows(G, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.09792169193415859;  // std dev = 1.458, 18.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=7 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.2826098186625555;  // std dev = 0.072, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0.2968455235757371;  // std dev = 0.375, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( tweets(D, F), follows(D, D) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09815201944103187;  // std dev = 0.072, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | else if ( follows(G, A), follows(A, G) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.0969957714375974;  // std dev = 0.378, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.16981770460991807;  // std dev = 0.979, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( tweets(D, E) )
%   | | then if ( tweets(A, F) )
%   | | | then return -0.0839905054465778;  // std dev = 0.432, 26.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=1 */
%   | | | else return 0.0105714850900648;  // std dev = 0.597, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else if ( follows(D, D), tweets(A, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.08200446053398859;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( follows(A, H) )
%   | | then return -0.016306343406793374;  // std dev = 0.303, 22.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=5 */
%   | | else if ( follows(I, A), recursion_accounttype(I, B) )
%   | | | then return 0.16169325869246676;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return -0.08759177234304799;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(D, A) )
%   then if ( follows(C, E), recursion_accounttype(E, B) )
%   | then return 0.21906852169828864;  // std dev = 0.355, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( follows(C, A) )
%   | | then return -0.0812903733917216;  // std dev = 0.057, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then if ( follows(A, G), follows(F, G) )
%   | | then return 0.4389056343285938;  // std dev = 0.533, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.14095552795822652;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then return -0.08083971074242904;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( follows(J, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1833844922043748;  // std dev = 0.047, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(C, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0.12787999002099154;  // std dev = 0.999, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | else if ( follows(A, D) )
%   | | | then return -0.0772781542241264;  // std dev = 0.050, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | | else return -0.10226055679822252;  // std dev = 0.079, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( follows(A, F) )
%   | | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | | then return 0.3247868575122342;  // std dev = 0.363, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.06490086556479364;  // std dev = 0.910, 17.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=3 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.992804
   AUC PR    = 0.416313
   CLL	      = -0.12052
   Precision = 0.340483 at threshold = 0.5
   Recall    = 0.814103
   F1        = 0.480151


Total learning time: 2.877 seconds
Total inference time: 44.304 seconds
AUC ROC: 0.992804


Results scoring model
   AUC ROC   = 0.995033
   AUC PR    = 0.476878
   CLL	      = -0.111497
   Precision = 0.393443 at threshold = 0.5
   Recall    = 0.96
   F1        = 0.55814


Total scoring time: 9.747 seconds
Parameter learned model CLL: -0.111497


Structure after Parameter Learning
[['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(D, A), follows(D, D)', 'false,false': 'follows(A, E), recursion_accounttype(E, B)', 'false,false,true': 'follows(F, A), follows(E, G)', 'false,false,false': 'follows(A, H), tweets(A, I)'}, {'true': [0.0, 0, 16], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 1], 'false,false,true,false': [2.11e-08, 0, 3], 'false,false,false,true': [1.372, 32, 2], 'false,false,false,false': [1.561, 13, 3]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, C)', 'true,false': 'follows(D, A), follows(D, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,false': 'follows(F, A), follows(G, F)', 'false,false,true': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(A, H)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [4.21e-08, 0, 16], 'false,true': [0.0, 0, 4], 'false,false,true,true': [0.0, 0, 1], 'false,false,true,false': [0.039, 39, 0], 'false,false,false,true': [1.683, 10, 4], 'false,false,false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, A)', 'true,true': 'follows(A, D), follows(C, E)', 'true,false': 'follows(F, A), recursion_accounttype(F, B)', 'false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false': 'follows(H, A)'}, {'true,true,true': [2.315, 44, 15], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.0, 0, 0], 'true,false,false': [1.916, 13, 7], 'false,true': [0.0, 0, 2], 'false,false,true': [0.0, 2, 0], 'false,false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D), follows(D, C)', 'true,true': 'recursion_accounttype(D, B)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(F, F)', 'false,false': 'follows(G, A), follows(A, H)', 'false,false,true': 'tweets(A, I), tweets(G, I)', 'false,false,false': 'tweets(A, J)'}, {'true,true,true': [0.0, 0, 13], 'true,true,false': [0.0, 0, 0], 'true,false': [0.0, 0, 3], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.108, 0, 4], 'false,false,true,true': [0.107, 27, 0], 'false,false,true,false': [0.805, 12, 1], 'false,false,false,true': [1.273, 10, 2], 'false,false,false,false': [1.155, 4, 2]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A), tweets(D, E)', 'false,true': 'follows(A, F), follows(D, F)', 'false,true,true': 'follows(G, D), recursion_accounttype(G, B)', 'false,true,false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(H, B)', 'false,false,false': 'tweets(A, I), follows(A, J)'}, {'true': [0.989, 1, 16], 'false,true,true,true': [0.292, 0, 3], 'false,true,true,false': [0.143, 33, 0], 'false,true,false,true': [0.0, 0, 2], 'false,true,false,false': [0.055, 10, 0], 'false,false,true': [0.041, 0, 4], 'false,false,false,true': [0.051, 6, 0], 'false,false,false,false': [0.0, 1, 0]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(D, D)', 'false,true,false': 'tweets(D, E)', 'false,false': 'follows(F, A)', 'false,false,false': 'follows(G, A), follows(G, G)'}, {'true': [0.964, 1, 16], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.935, 38, 2], 'false,true,false,false': [0.0, 1, 0], 'false,false,true': [0.016, 7, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.458, 11, 7]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(D, F), follows(D, D)', 'false,false': 'follows(G, A), follows(A, G)'}, {'true': [0.072, 0, 16], 'false,true,true': [0.375, 0, 5], 'false,true,false,true': [0.0, 0, 0], 'false,true,false,false': [0.072, 35, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.378, 8, 4]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'tweets(D, E)', 'false,true,true': 'tweets(A, F)', 'false,true,false': 'follows(D, D), tweets(A, G)', 'false,false': 'follows(A, H)', 'false,false,false': 'follows(I, A), recursion_accounttype(I, B)'}, {'true': [0.979, 1, 16], 'false,true,true,true': [0.432, 25, 1], 'false,true,true,false': [0.597, 5, 1], 'false,true,false,true': [0.0, 0, 0], 'false,true,false,false': [0.0, 1, 0], 'false,false,true': [0.303, 17, 5], 'false,false,false,true': [0.0, 0, 2], 'false,false,false,false': [0.0, 3, 0]}], ['accounttype(A, B)', {'': 'follows(A, C), follows(D, A)', 'true': 'follows(C, E), recursion_accounttype(E, B)', 'true,false': 'follows(C, A)', 'false': 'recursion_accounttype(F, B)', 'false,true': 'follows(A, G), follows(F, G)', 'false,false': 'follows(H, A), follows(I, H)', 'false,false,false': 'follows(J, A)'}, {'true,true': [0.355, 0, 16], 'true,false,true': [0.057, 43, 0], 'true,false,false': [0.0, 0, 0], 'false,true,true': [0.533, 0, 7], 'false,true,false': [0.0, 0, 2], 'false,false,true': [0.0, 3, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.047, 10, 0]}], ['accounttype(A, B)', {'': 'follows(A, C), follows(C, C)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'follows(A, D)', 'false,false': 'follows(A, F)', 'false,false,true': 'follows(F, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true,true': [0.999, 1, 18], 'false,true,false,true': [0.05, 30, 0], 'false,true,false,false': [0.079, 5, 0], 'false,false,true,true': [0.363, 0, 4], 'false,false,true,false': [0.91, 14, 3], 'false,false,false': [0.0, 0, 0]}]]
[{'': [-2.220446049250313e-16, 0.13888888888888892], 'false': [nan, 0.13888888888888892], 'false,false': [0.0, 0.09000000000000011], 'false,false,false': [0.05536332179930797, 0.15234374999999986], 'false,false,true': [0.0, 1.4802973661668753e-16]}, {'': [1.1102230246251565e-16, 0.11465370780080376], 'false': [0.0, 0.08303448427016777], 'false,false': [0.02381767836766405, 0.20223761292693787], 'false,false,false': [0.20223761292693787, nan], 'false,false,true': [0.0, 3.895954790395093e-05], 'true': [nan, 1.1102230246251565e-16], 'true,false': [nan, 1.1102230246251565e-16]}, {'': [0.11737016687174, 0.11787572781497191], 'false': [0.0, 0.0], 'true': [0.09345866028772414, 0.18354154934271702], 'true,false': [nan, 0.18354154934271702], 'true,true': [0.09081564394260595, 0.0], 'false,false': [0.0, nan]}, {'': [8.438710996344634e-05, 0.0812483248001429], 'false': [0.00293150189000127, 0.06996277720596436], 'false,false': [0.017202397157045603, 0.16811055781074027], 'false,false,false': [0.1350175818748857, 0.22222222222222218], 'false,false,true': [0.00042064439521955963, 0.04985131277564572], 'false,true': [nan, 0.00293150189000127], 'true': [-2.049642507000289e-16, -3.700743415417188e-17], 'true,true': [-2.049642507000289e-16, nan]}, {'': [0.05757663674515278, 0.07522547256213823], 'false': [0.029977367426787787, 0.22168442578621853], 'false,false': [0.0004127057329770256, 0.000679496591736927], 'false,true': [0.030998693017901938, 0.026628450413127402], 'false,true,true': [0.02845789854214183, 0.0006197429657407539], 'false,true,false': [0.0, 0.00029795411956177185], 'false,false,false': [0.00043604705353429696, 0.0]}, {'': [0.054613148938957544, 0.052567496600537944], 'false': [0.021342993765694124, 0.09404984710576138], 'false,false': [0.0002656818672407968, 0.11810967260263146], 'false,false,false': [nan, 0.11810967260263146], 'false,true': [nan, 0.021342993765694124], 'false,true,false': [0.021853592082311506, 0.0]}, {'': [0.0003218674879218314, 0.05272168055223801], 'false': [0.020710353468952135, 0.14308010716244893], 'false,false': [nan, 0.14308010716244893], 'false,true': [0.02812948190565139, 0.00014759560433458114], 'false,true,false': [nan, 0.00014759560433458114]}, {'': [0.05635369795947541, 0.04548632220035987], 'false': [0.01779573078882781, 0.07762428811694796], 'false,false': [0.09172688837169313, 0.014914326407610612], 'false,true': [0.018344335743432364, 0.0], 'false,true,true': [0.00717386122699982, 0.059484374645560244], 'false,false,false': [0.0, -1.1564823173178713e-18], 'false,true,false': [nan, 0.0]}, {'': [0.020026519966572984, 0.08892745510143375], 'false': [0.046929346992074135, 0.002039896452017315], 'false,true': [0.04061011720559397, 0.0], 'true': [0.00789296554858264, 7.611983220757916e-05], 'false,false': [0.0, 0.00022522718645061058], 'false,false,false': [nan, 0.00022522718645061058], 'true,false': [7.611983220757916e-05, nan]}, {'': [nan, 0.040040268497510065], 'false': [0.028643658611878717, 0.06914427933678462], 'false,false': [0.06914427933678462, nan], 'false,false,true': [0.032984162753392596, 0.04872749034477281], 'false,true': [0.05257232503370226, 0.0003246867329233992], 'false,true,false': [8.419626665484384e-05, 0.0012326691547853818]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
0;false;follows(A, E), recursion_accounttype(E, B).;true;true
0;false,true;follows(F, A), follows(E, G).;true;true
1;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
1;false;follows(E, A), recursion_accounttype(E, B).;true;true
1;false,false;follows(F, A), follows(G, F).;true;true
1;false,false,true;recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C).;true;true
2;true;follows(D, A).;true;true
2;true,true;follows(A, D), follows(C, E).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
3;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
3;true;follows(C, D), follows(D, C).;true;true
3;false;follows(E, A), recursion_accounttype(E, B).;true;true
3;false,false;follows(G, A), follows(A, H).;true;true
3;false,false,true;tweets(A, I), tweets(G, I).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(D, A), tweets(D, E).;true;true
4;false,true;follows(A, F), follows(D, F).;true;true
4;false,true,true;follows(G, D), recursion_accounttype(G, B).;true;true
4;false,true,false;recursion_accounttype(D, B).;true;true
4;false,false;recursion_accounttype(H, B).;true;true
4;false,false,false;tweets(A, I), follows(A, J).;true;true
5;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
5;false;follows(A, D), follows(D, A).;true;true
5;false,true;tweets(D, E).;true;true
5;false,false;follows(F, A).;true;true
6;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
6;false;follows(D, A).;true;true
6;false,true;follows(E, D), recursion_accounttype(E, B).;true;true
7;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
7;false;follows(A, D), follows(D, A).;true;true
7;false,true;tweets(D, E).;true;true
7;false,false;follows(A, H).;true;true
7;false,false,false;follows(I, A), recursion_accounttype(I, B).;true;true
8;;accounttype(A, B) :- follows(A, C), follows(D, A).;true;true
8;true;follows(C, E), recursion_accounttype(E, B).;true;true
8;false;recursion_accounttype(F, B).;true;true
8;false,true;follows(A, G), follows(F, G).;true;true
8;false,false;follows(H, A), follows(I, H).;true;true
9;;accounttype(A, B) :- follows(D, A).;true;true
9;true;follows(E, D), recursion_accounttype(E, B).;true;true
9;true,false;follows(A, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.8581489350995123;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   else if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(D, F) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(G, A) )
%   | | then if ( tweets(A, H) )
%   | | | then return -0.1418510649004877;  // std dev = 3.49e-08, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | | else return 0.024815601766178873;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.19148226843284552;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return 0.3581489350995122;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(D, F), follows(F, A) )
%   | | | then return 0.7194734122109543;  // std dev = 2.11e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.7194734122109544;  // std dev = 2.58e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.7194734122109544;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.4694734122109545;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.7194734122109544;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.8551012175257391;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return -0.12783374392525237;  // std dev = 0.048, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.028312620142365696;  // std dev = 1.254, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | | else return 0.21363400687481776;  // std dev = 1.109, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, A) )
%   | then if ( follows(A, D), follows(C, E) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.10385963436966385;  // std dev = 1.821, 34.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=11 */
%   | | | else return 0.06910666996502929;  // std dev = 1.306, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | | else return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then return 0.5389366599200232;  // std dev = 0.819, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.051370757563526166;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0.08057969786848808;  // std dev = 1.070, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   else if ( follows(J, A), recursion_accounttype(J, B) )
%   | then return 0.5553664367462845;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else return -0.11207840154958987;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, C) )
%   | then if ( tweets(A, E) )
%   | | then return 0.529594870607134;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0.5382429081297754;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.5211494073986406;  // std dev = 0.093, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.44553390577051594;  // std dev = 0.097, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(G, A), follows(A, H) )
%   | | then if ( tweets(A, I), tweets(G, I) )
%   | | | then return -0.1278080554493191;  // std dev = 0.096, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | | else return -0.07509079675456734;  // std dev = 0.811, 13.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=1 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.038741434163139465;  // std dev = 1.684, 14.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=4 */
%   | | | else return -0.10140015445462625;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.39173842074772475;  // std dev = 0.015, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else return 0.4206230059458838;  // std dev = 0.054, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(E, A), tweets(E, F) )
%   | then if ( follows(A, G), follows(E, G) )
%   | | then if ( follows(H, E), recursion_accounttype(H, B) )
%   | | | then return 0.48329399822040703;  // std dev = 0.295, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.11584061243177354;  // std dev = 0.082, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
%   | | else if ( recursion_accounttype(E, B) )
%   | | | then return 0.3146383675312244;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return -0.11132177229696444;  // std dev = 0.037, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then return 0.7419269805367449;  // std dev = 0.065, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, J), follows(A, K) )
%   | | | then return -0.1850236003359504;  // std dev = 0.136, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return -0.2480767793761002;  // std dev = 5.27e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( tweets(A, E) )
%   | | then return 0.30926371076848563;  // std dev = 0.000480, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0.30882998265218087;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.24090277145172975;  // std dev = 0.025, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, F), follows(F, A) )
%   | then if ( tweets(F, G) )
%   | | then if ( tweets(A, H) )
%   | | | then return -0.08773915303575408;  // std dev = 0.403, 36.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=1 */
%   | | | else return -0.10411454779250717;  // std dev = 0.924, 12.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=1 */
%   | | else return -0.09744517082947925;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( follows(I, A) )
%   | | then return -0.1260840478814271;  // std dev = 0.052, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.30395781654182125;  // std dev = 0.076, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.05032725530353862;  // std dev = 1.299, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then return 0.24748350491097337;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.24704686847318913;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.07790148837205702;  // std dev = 0.844, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(F, A) )
%   | then if ( follows(G, F), recursion_accounttype(G, B) )
%   | | then return 0.29569996410617766;  // std dev = 0.380, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, H), follows(H, A) )
%   | | | then return -0.09535980905323156;  // std dev = 0.034, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | | else return -0.11275907488532178;  // std dev = 0.066, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then return 0.06304585328348514;  // std dev = 0.856, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | else return 0.11723535611540789;  // std dev = 0.886, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then return 0.2043114185324983;  // std dev = 3.73e-09, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.2040012031907259;  // std dev = 3.73e-09, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.25053467833702103;  // std dev = 0.095, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, F), follows(F, A) )
%   | then if ( tweets(F, G) )
%   | | then if ( tweets(A, H) )
%   | | | then return -0.07051438870460221;  // std dev = 0.272, 21.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=1 */
%   | | | else return 0.01242152034667217;  // std dev = 0.603, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, I) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return -0.03389386912814362;  // std dev = 0.933, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
%   | | | else return 0.1758572660471076;  // std dev = 0.796, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return 0.16386272179505346;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(D, A) )
%   then if ( follows(C, E), recursion_accounttype(E, B) )
%   | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then if ( tweets(A, G), follows(F, A) )
%   | | | then return 0.17309146913703238;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.19476524967510223;  // std dev = 0.076, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.3041208581082276;  // std dev = 0.316, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return -0.08918130559329561;  // std dev = 0.017, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
%   else if ( recursion_accounttype(H, B) )
%   | then if ( follows(A, I), follows(H, I) )
%   | | then if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.18909766842349052;  // std dev = 0.056, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.5273236026942327;  // std dev = 0.046, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.14262867745039653;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( follows(K, A), follows(L, K) )
%   | | then return -0.07802667485356014;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.25048245715531414;  // std dev = 0.011, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.06561126657910911;  // std dev = 0.963, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | | else return 0.13139045878991007;  // std dev = 0.036, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.23098717666779198;  // std dev = 0.292, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, C) )
%   | | then if ( tweets(A, G) )
%   | | | then return -0.07229819998589516;  // std dev = 0.000505, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | | | else return -0.09106123855478288;  // std dev = 0.000706, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else return -0.08412310840317531;  // std dev = 0.040, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else if ( tweets(A, H) )
%   | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | then return 0.2803512314901858;  // std dev = 0.277, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.20139533045429447;  // std dev = 0.006, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.18331955013953746;  // std dev = 0.487, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */


Results
   AUC ROC   = 0.992169
   AUC PR    = 0.362246
   CLL	      = -0.140868
   Precision = 0.34127 at threshold = 0.5
   Recall    = 0.826923
   F1        = 0.483146


Total learning time: 6.131 seconds
Total inference time: 65.363 seconds
AUC ROC: 0.992169


Results scoring model
   AUC ROC   = 0.99507
   AUC PR    = 0.492781
   CLL	      = -0.1224
   Precision = 0.396825 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.568182


Total scoring time: 13.419 seconds
Refined model CLL: -0.1224


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.992804
   AUC PR    = 0.416313
   CLL	      = -0.12052
   Precision = 0.340483 at threshold = 0.5
   Recall    = 0.814103
   F1        = 0.480151


Total learning time: 32.174 seconds
Total inference time: 44.304 seconds
AUC ROC: 0.992804
Total revision time: 32.174
Best scored revision CLL: -0.111497


Dataset: 7_yeast_twitter, Fold: 2, Type: Transfer (trRDN-B), Time: 00:17:22
{'AUC ROC': 0.992804, 'AUC PR': 0.416313, 'CLL': -0.12052, 'Precision': [0.340483, 0.5], 'Recall': 0.814103, 'F1': 0.480151, 'Learning time': 32.174, 'Inference time': 44.304, 'parameter_0.2': {'AUC ROC': 0.992804, 'AUC PR': 0.416313, 'CLL': -0.12052, 'Precision': [0.340483, 0.5], 'Recall': 0.814103, 'F1': 0.480151, 'Learning time': 2.877, 'Inference time': 44.304}}


Amount of data: 0.4
******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;false;true
0;false;interaction(A, D), interaction(D, D).;true;true
0;false,true;interaction(E, A), interaction(D, E).;true;true
0;false,true,true;interaction(A, A).;false;false
0;false,true,false;enzyme(D, F), phenotype(A, G).;false;false
0;false,false;interaction(H, A), recursion_proteinclass(H, B).;true;true
0;false,false,true;interaction(A, I), interaction(J, H).;false;false
0;false,false,false;interaction(K, A), complex(A, L).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
1;true;interaction(C, C).;false;true
1;true,false;interaction(A, D), interaction(D, D).;true;false
1;true,false,true;complex(C, E).;false;false
1;false;interaction(A, F), recursion_proteinclass(F, B).;false;true
1;false,false;interaction(A, G), interaction(G, H).;true;true
1;false,false,true;recursion_proteinclass(H, B).;false;false
1;false,false,false;interaction(I, A), location(I, J).;false;false
2;;proteinclass(A, B) :- interaction(C, A), enzyme(C, D).;true;true
2;true;location(A, E), location(C, E).;false;true
2;true,false;interaction(A, F), phenotype(A, G).;true;true
2;true,false,true;interaction(F, A), interaction(H, C).;false;false
2;true,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;false;interaction(A, J), recursion_proteinclass(J, B).;false;true
2;false,false;interaction(A, K), enzyme(K, L).;false;true
2;false,false,false;interaction(M, A), interaction(A, M).;false;false
3;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
3;true;interaction(D, C), interaction(C, D).;true;false
3;true,true;recursion_proteinclass(D, B).;false;false
3;false;interaction(A, E), recursion_proteinclass(E, B).;true;true
3;false,true;interaction(E, F), interaction(F, F).;false;false
3;false,false;interaction(A, G), interaction(H, A).;true;true
3;false,false,true;complex(A, I), complex(G, I).;false;false
3;false,false,false;enzyme(A, J), complex(A, K).;false;false
4;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
4;false;interaction(A, D), complex(D, E).;true;true
4;false,true;interaction(F, A), interaction(F, D).;true;true
4;false,true,true;interaction(D, G), recursion_proteinclass(G, B).;false;false
4;false,true,false;recursion_proteinclass(D, B).;false;false
4;false,false;enzyme(A, H), location(A, I).;true;true
4;false,false,true;enzyme(J, H), recursion_proteinclass(J, B).;false;false
4;false,false,false;complex(A, K), interaction(L, A).;false;false
5;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;false;true
5;false;interaction(D, A), interaction(A, D).;true;true
5;false,true;interaction(D, D).;true;true
5;false,true,true;interaction(A, A).;false;false
5;false,true,false;phenotype(D, E), complex(D, F).;false;false
5;false,false;enzyme(A, G), interaction(A, H).;true;true
5;false,false,true;enzyme(H, I).;false;false
5;false,false,false;interaction(A, J), interaction(J, J).;false;false
6;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
6;false;interaction(A, D), phenotype(A, E).;true;true
6;false,true;location(D, F), location(A, F).;true;true
6;false,true,true;interaction(D, G), recursion_proteinclass(G, B).;false;false
6;false,true,false;complex(D, H), interaction(D, D).;false;false
6;false,false;interaction(A, I), interaction(I, A).;true;true
6;false,false,true;interaction(I, I).;false;false
6;false,false,false;location(A, J).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
7;false;interaction(D, A), interaction(A, D).;true;true
7;false,true;complex(D, E).;true;true
7;false,true,true;complex(A, F), enzyme(D, G).;false;false
7;false,true,false;interaction(D, D), complex(A, H).;false;false
7;false,false;enzyme(A, I), interaction(J, A).;true;true
7;false,false,true;enzyme(J, K), phenotype(J, L).;false;false
7;false,false,false;interaction(A, M), recursion_proteinclass(M, B).;false;false
8;;proteinclass(A, B) :- interaction(C, A), interaction(A, D).;true;true
8;true;interaction(E, C), recursion_proteinclass(E, B).;false;true
8;true,false;interaction(A, C).;false;false
8;false;location(A, F).;true;true
8;false,true;location(G, F), recursion_proteinclass(G, B).;true;false
8;false,true,true;interaction(H, A), interaction(H, G).;false;false
8;false,false;interaction(A, I), interaction(I, J).;false;true
8;false,false,false;interaction(A, K).;false;false
9;;proteinclass(A, B) :- interaction(C, A), interaction(C, C).;true;true
9;true;recursion_proteinclass(C, B), interaction(A, C).;false;false
9;false;enzyme(A, D), interaction(A, E).;true;true
9;false,true;interaction(E, F), recursion_proteinclass(F, B).;false;true
9;false,true,false;interaction(E, A).;false;false
9;false,false;interaction(G, A), phenotype(A, H).;true;true
9;false,false,true;interaction(I, G), recursion_proteinclass(I, B).;false;false
9;false,false,false;interaction(A, J), enzyme(J, K).;false;false


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.8278459047964812;  // std dev = 0.985, 33.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   else if ( follows(D, A), follows(D, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), follows(E, G) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, H), tweets(A, I) )
%   | | | then return -0.025909035914980446;  // std dev = 2.659, 69.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=8 */
%   | | | else return 0.00520775862892406;  // std dev = 2.065, 34.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=5 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(D, A), follows(D, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.6910002662156334;  // std dev = 0.988, 30.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then return 0.72554864638347;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(F, A), follows(G, F) )
%   | | then if ( recursion_accounttype(G, B) )
%   | | | then return 0.8597697189433455;  // std dev = 0.004, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.1397090305049282;  // std dev = 0.015, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
%   | | else if ( follows(A, H) )
%   | | | then return 0.17992011254515541;  // std dev = 2.332, 25.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=8 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, A) )
%   | then if ( follows(A, D), follows(C, E) )
%   | | then return 0.05919184925685789;  // std dev = 3.623, 124.000 (wgt'ed) examples reached here.  /* #neg=91 #pos=33 */
%   | | else return 0.029373539516978003;  // std dev = 0.860, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.20704422756013263;  // std dev = 2.483, 26.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=11 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5613408105653874;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(H, A) )
%   | | then return -0.12625319392411663;  // std dev = 5.27e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, C) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then return 0.554664175339368;  // std dev = 0.010, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.5238660793613178;  // std dev = 0.045, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(F, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.48526036144688733;  // std dev = 0.179, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(G, A), follows(A, H) )
%   | | then if ( tweets(A, I), tweets(G, I) )
%   | | | then return -0.09198595507440233;  // std dev = 1.426, 67.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=3 */
%   | | | else return -0.07676645559724396;  // std dev = 1.146, 30.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=2 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.036309165957277616;  // std dev = 1.947, 24.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=5 */
%   | | | else return 0.3034231205798489;  // std dev = 1.225, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.38071908936618554;  // std dev = 0.981, 30.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */
%   else if ( follows(D, A), tweets(D, E) )
%   | then if ( follows(A, F), follows(D, F) )
%   | | then if ( follows(G, D), recursion_accounttype(G, B) )
%   | | | then return 0.4139812670707961;  // std dev = 1.125, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return -0.12101341371029475;  // std dev = 0.037, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0.3100264337237838;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.005584406656585106;  // std dev = 1.119, 15.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=2 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then return 0.7832828034459527;  // std dev = 0.071, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( tweets(A, I), follows(A, J) )
%   | | | then return -0.17192511993845075;  // std dev = 0.088, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return -0.2489154812955414;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.28937763791672566;  // std dev = 0.987, 33.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(D, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(D, E) )
%   | | | then return -0.050834065114030866;  // std dev = 1.878, 72.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=7 */
%   | | | else return -0.11174004535636888;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( follows(F, A) )
%   | | then return -0.11750100365169214;  // std dev = 0.007, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( follows(G, A), follows(G, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.05707399961330635;  // std dev = 2.031, 32.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=11 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.27504935977139006;  // std dev = 0.090, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0.4074033531404513;  // std dev = 0.804, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( tweets(D, F), follows(D, D) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10404164443524568;  // std dev = 0.046, 102.000 (wgt'ed) examples reached here.  /* #neg=102 */
%   | else if ( follows(G, A), follows(A, G) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.14178143285305625;  // std dev = 0.400, 19.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.19055327031739105;  // std dev = 0.983, 30.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( tweets(D, E) )
%   | | then if ( tweets(A, F) )
%   | | | then return -0.04974916593912735;  // std dev = 1.264, 62.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=5 */
%   | | | else return 0.007293529869024107;  // std dev = 0.865, 15.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=3 */
%   | | else if ( follows(D, D), tweets(A, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.08541884343653969;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( follows(A, H) )
%   | | then return 0.001605062614842001;  // std dev = 0.318, 36.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=9 */
%   | | else if ( follows(I, A), recursion_accounttype(I, B) )
%   | | | then return 0.14102493826288764;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.09521392309151387;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(D, A) )
%   then if ( follows(C, E), recursion_accounttype(E, B) )
%   | then return 0.22264936358378806;  // std dev = 1.312, 36.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=35 */
%   | else if ( follows(C, A) )
%   | | then return -0.09106189736180133;  // std dev = 0.032, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
%   | | else return -0.09268927088281274;  // std dev = 0.025, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else if ( recursion_accounttype(F, B) )
%   | then if ( follows(A, G), follows(F, G) )
%   | | then return 0.4734401019406592;  // std dev = 0.563, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.12479037645191104;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then return -0.08732155541753434;  // std dev = 3.73e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( follows(J, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.21537312191670552;  // std dev = 0.075, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(C, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0.18009621678916365;  // std dev = 1.294, 39.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=38 */
%   | | else if ( follows(A, D) )
%   | | | then return -0.08510644955096192;  // std dev = 0.039, 71.000 (wgt'ed) examples reached here.  /* #neg=71 */
%   | | | else return -0.12117216201514058;  // std dev = 0.731, 12.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=1 */
%   | else if ( follows(A, F) )
%   | | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | | then return 0.37547215725506733;  // std dev = 0.408, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.042936833979500384;  // std dev = 0.974, 16.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=4 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.991691
   AUC PR    = 0.39267
   CLL	      = -0.130253
   Precision = 0.346056 at threshold = 0.5
   Recall    = 0.871795
   F1        = 0.495446


Total learning time: 4.509 seconds
Total inference time: 42.285 seconds
AUC ROC: 0.991691


Results scoring model
   AUC ROC   = 0.993271
   AUC PR    = 0.363087
   CLL	      = -0.125037
   Precision = 0.350365 at threshold = 0.5
   Recall    = 0.96
   F1        = 0.513369


Total scoring time: 16.939 seconds
Parameter learned model CLL: -0.125037


Structure after Parameter Learning
[['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(D, A), follows(D, D)', 'false,false': 'follows(A, E), recursion_accounttype(E, B)', 'false,false,true': 'follows(F, A), follows(E, G)', 'false,false,false': 'follows(A, H), tweets(A, I)'}, {'true': [0.985, 1, 32], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 2], 'false,false,true,false': [2.11e-08, 0, 3], 'false,false,false,true': [2.659, 61, 8], 'false,false,false,false': [2.065, 29, 5]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, C)', 'true,false': 'follows(D, A), follows(D, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,false': 'follows(F, A), follows(G, F)', 'false,false,true': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(A, H)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [0.988, 1, 29], 'false,true': [0.0, 0, 8], 'false,false,true,true': [0.004, 0, 5], 'false,false,true,false': [0.015, 88, 0], 'false,false,false,true': [2.332, 17, 8], 'false,false,false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, A)', 'true,true': 'follows(A, D), follows(C, E)', 'true,false': 'follows(F, A), recursion_accounttype(F, B)', 'false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false': 'follows(H, A)'}, {'true,true,true': [3.623, 91, 33], 'true,true,false': [0.86, 7, 2], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.483, 15, 11], 'false,true': [0.0, 0, 4], 'false,false,true': [5.27e-09, 6, 0], 'false,false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D), follows(D, C)', 'true,true': 'recursion_accounttype(D, B)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(F, F)', 'false,false': 'follows(G, A), follows(A, H)', 'false,false,true': 'tweets(A, I), tweets(G, I)', 'false,false,false': 'tweets(A, J)'}, {'true,true,true': [0.01, 0, 25], 'true,true,false': [0.0, 0, 0], 'true,false': [0.045, 0, 4], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.179, 0, 8], 'false,false,true,true': [1.426, 64, 3], 'false,false,true,false': [1.146, 28, 2], 'false,false,false,true': [1.947, 19, 5], 'false,false,false,false': [1.225, 3, 3]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A), tweets(D, E)', 'false,true': 'follows(A, F), follows(D, F)', 'false,true,true': 'follows(G, D), recursion_accounttype(G, B)', 'false,true,false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(H, B)', 'false,false,false': 'tweets(A, I), follows(A, J)'}, {'true': [0.981, 1, 29], 'false,true,true,true': [1.125, 1, 7], 'false,true,true,false': [0.037, 69, 0], 'false,true,false,true': [0.0, 0, 4], 'false,true,false,false': [1.119, 13, 2], 'false,false,true': [0.071, 0, 8], 'false,false,false,true': [0.088, 6, 0], 'false,false,false,false': [0.0, 16, 0]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(D, D)', 'false,true,false': 'tweets(D, E)', 'false,false': 'follows(F, A)', 'false,false,false': 'follows(G, A), follows(G, G)'}, {'true': [0.987, 1, 32], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [1.878, 65, 7], 'false,true,false,false': [0.0, 1, 0], 'false,false,true': [0.007, 10, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.031, 21, 11]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(D, F), follows(D, D)', 'false,false': 'follows(G, A), follows(A, G)'}, {'true': [0.09, 0, 29], 'false,true,true': [0.804, 0, 13], 'false,true,false,true': [0.0, 0, 0], 'false,true,false,false': [0.046, 102, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.4, 11, 8]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'tweets(D, E)', 'false,true,true': 'tweets(A, F)', 'false,true,false': 'follows(D, D), tweets(A, G)', 'false,false': 'follows(A, H)', 'false,false,false': 'follows(I, A), recursion_accounttype(I, B)'}, {'true': [0.983, 1, 29], 'false,true,true,true': [1.264, 57, 5], 'false,true,true,false': [0.865, 12, 3], 'false,true,false,true': [0.0, 0, 0], 'false,true,false,false': [0.0, 1, 0], 'false,false,true': [0.318, 27, 9], 'false,false,false,true': [0.0, 0, 4], 'false,false,false,false': [0.0, 5, 0]}], ['accounttype(A, B)', {'': 'follows(A, C), follows(D, A)', 'true': 'follows(C, E), recursion_accounttype(E, B)', 'true,false': 'follows(C, A)', 'false': 'recursion_accounttype(F, B)', 'false,true': 'follows(A, G), follows(F, G)', 'false,false': 'follows(H, A), follows(I, H)', 'false,false,false': 'follows(J, A)'}, {'true,true': [1.312, 1, 35], 'true,false,true': [0.032, 63, 0], 'true,false,false': [0.025, 4, 0], 'false,true,true': [0.563, 0, 11], 'false,true,false': [0.0, 0, 4], 'false,false,true': [3.73e-09, 8, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.075, 17, 0]}], ['accounttype(A, B)', {'': 'follows(A, C), follows(C, C)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'follows(A, D)', 'false,false': 'follows(A, F)', 'false,false,true': 'follows(F, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true,true': [1.294, 1, 38], 'false,true,false,true': [0.039, 71, 0], 'false,true,false,false': [0.731, 11, 1], 'false,false,true,true': [0.408, 0, 7], 'false,false,true,false': [0.974, 12, 4], 'false,false,false': [0.0, 0, 0]}]]
[{'': [0.02938475665748541, 0.13888888888888895], 'false': [nan, 0.13888888888888895], 'false,false': [0.0, 0.11028372136864875], 'false,false,false': [0.10249947490023127, 0.12543252595155707], 'false,false,true': [0.0, 1.4802973661668753e-16]}, {'': [0.03255214006666349, 0.12564688449254552], 'false': [0.0, 0.09795514657403843], 'false,false': [0.05082267677068568, 0.21756716256147235], 'false,false,false': [0.21756716256147235, nan], 'false,false,true': [3.392735319884821e-06, 2.7290694425318276e-06], 'true': [nan, 0.03255214006666349], 'true,false': [nan, 0.03255214006666331]}, {'': [0.12909489724109582, 0.11346852360237891], 'true': [0.10430355642425658, 0.2371239546577583], 'true,false': [nan, 0.2371239546577583], 'false': [0.0, 4.625929269271485e-18], 'true,true': [0.10585093420234863, 0.08215516446340111], 'false,false': [4.625929269271485e-18, nan]}, {'': [0.00018538172555511385, 0.08779798824457105], 'false': [0.0040121268619222605, 0.07638429793843914], 'false,false': [0.034546384074310904, 0.1877288368519496], 'false,false,false': [0.15789107311411524, 0.25], 'false,false,true': [0.030348360306925327, 0.0437619764467939], 'false,true': [nan, 0.0040121268619222605], 'true': [4.13468908931236e-06, 0.0005004837070236023], 'true,true': [4.13468908931236e-06, nan]}, {'': [0.03211020843611765, 0.0898470714224171], 'false': [0.05342651791537747, 0.20124850423707408], 'false,false': [0.0006220377241764607, 0.0015296396658465666], 'false,true': [0.043112993281278766, 0.08243096973295726], 'false,true,false': [0.0, 0.08344199270056635], 'false,true,true': [0.1583083327275806, 1.994088694726613e-05], 'false,false,false': [0.0012977582352105693, -2.0816681711721685e-17]}, {'': [0.02954732161380206, 0.06963429473312711], 'false': [0.04837870032384151, 0.10371393450949357], 'false,false': [5.259117268527625e-05, 0.12885181102487134], 'false,false,false': [nan, 0.12885181102487134], 'false,true': [nan, 0.04837870032384151], 'false,true,false': [0.04899981112230656, 0.0]}, {'': [0.0002819758786592291, 0.05437471742850775], 'false': [0.0318672083714599, 0.16026940198555273], 'false,false': [nan, 0.16026940198555273], 'false,true': [0.049729817335652765, 2.1142111066949893e-05], 'false,true,false': [nan, 2.1142111066954247e-05]}, {'': [0.03220799538436614, 0.05036117188482227], 'false': [0.03061190440204797, 0.08344904834601727], 'false,false': [0.10085295319822465, 0.013779950521981268], 'false,true': [0.03098140332871041, 0.0], 'false,true,true': [0.02577210417368399, 0.04989317463709997], 'false,false,false': [0.0, -1.3877787807814458e-18], 'false,true,false': [nan, 0.0]}, {'': [0.03912154025347822, 0.09137762656086065], 'false': [0.04493212143524446, 0.003792381401604179], 'false,true': [0.02885597306218973, 0.0], 'true': [0.04782806424388376, 2.4708680085647152e-05], 'false,false': [1.734723475976807e-18, 0.0003299262944220064], 'false,false,false': [nan, 0.0003299262944220064], 'true,false': [1.6419533068359616e-05, 0.00015277251115507554]}, {'': [nan, 0.043322769254924724], 'false': [0.03413449881830701, 0.08550322833155283], 'false,false': [0.08550322833155283, nan], 'false,false,true': [0.023738226797793218, 0.05924443443207267], 'false,true': [0.04294810636456235, 0.0066170298167546595], 'false,true,false': [2.1669085002321675e-05, 0.04452690335869133]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
0;false;follows(A, E), recursion_accounttype(E, B).;true;true
0;false,true;follows(F, A), follows(E, G).;true;true
1;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
1;false;follows(E, A), recursion_accounttype(E, B).;true;true
1;false,false;follows(F, A), follows(G, F).;true;true
1;false,false,true;recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
3;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
3;true;follows(C, D), follows(D, C).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(D, A), tweets(D, E).;true;true
4;false,true;follows(A, F), follows(D, F).;true;true
4;false,true,true;follows(G, D), recursion_accounttype(G, B).;true;true
4;false,true,false;recursion_accounttype(D, B).;true;true
4;false,false;recursion_accounttype(H, B).;true;true
4;false,false,false;tweets(A, I), follows(A, J).;true;true
5;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
5;false;follows(A, D), follows(D, A).;true;true
5;false,true;tweets(D, E).;true;true
5;false,false;follows(F, A).;true;true
6;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
6;false;follows(D, A).;true;true
6;false,true;follows(E, D), recursion_accounttype(E, B).;true;true
7;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
7;false;follows(A, D), follows(D, A).;true;true
7;false,true;tweets(D, E).;true;true
7;false,false;follows(A, H).;true;true
7;false,false,false;follows(I, A), recursion_accounttype(I, B).;true;true
8;;accounttype(A, B) :- follows(A, C), follows(D, A).;true;true
8;true;follows(C, E), recursion_accounttype(E, B).;true;true
8;true,false;follows(C, A).;true;true
8;false;recursion_accounttype(F, B).;true;true
8;false,true;follows(A, G), follows(F, G).;true;true
8;false,false;follows(H, A), follows(I, H).;true;true
9;;accounttype(A, B) :- follows(D, A).;true;true
9;true;follows(E, D), recursion_accounttype(E, B).;true;true
9;true,false;follows(A, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( tweets(E, D), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return 0.7748156017661789;  // std dev = 0.957, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.8581489350995123;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.14185106490048766;  // std dev = 7.30e-08, 74.000 (wgt'ed) examples reached here.  /* #neg=74 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.21529179224236947;  // std dev = 1.793, 14.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=5 */
%   | | | else return 0.13087620782678497;  // std dev = 1.477, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then return 0.7264574874594267;  // std dev = 0.042, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return 0.4694734122109545;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then return 0.7194734122109543;  // std dev = 2.98e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(F, A), follows(G, F) )
%   | | then if ( recursion_accounttype(G, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.1254446385283914;  // std dev = 0.000, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.2875762863421984;  // std dev = 1.649, 11.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=5 */
%   | | | else return 0.5885617941721328;  // std dev = 0.863, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.5678586399485446;  // std dev = 0.102, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | else if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.5553664367462845;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(F, A) )
%   | | | then return -0.07349760988314755;  // std dev = 1.449, 86.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=5 */
%   | | | else return 0.16948938257299212;  // std dev = 2.197, 20.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=8 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5553664367462845;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return -0.11231637819360638;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, C) )
%   | then return 0.42173239287441333;  // std dev = 0.050, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return 0.46030709793638047;  // std dev = 0.055, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then return 0.41751358415830986;  // std dev = 2.98e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(F, A) )
%   | | then if ( follows(F, G), follows(G, A) )
%   | | | then return -0.10461431139027823;  // std dev = 0.010, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
%   | | | else return 0.018785486310579656;  // std dev = 1.375, 27.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=5 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return 0.46115272382618827;  // std dev = 1.182, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.1097608421717676;  // std dev = 1.366, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(A, E) )
%   | then if ( tweets(D, E), recursion_accounttype(D, B) )
%   | | then if ( follows(D, F), follows(F, A) )
%   | | | then return 0.2505075392390362;  // std dev = 0.957, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return 0.3128145683817218;  // std dev = 0.007, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.3155718126123622;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.3318887332465396;  // std dev = 0.023, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( follows(G, A), tweets(G, H) )
%   | then if ( follows(A, I), follows(G, I) )
%   | | then return -0.052485212605787895;  // std dev = 0.156, 77.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=7 */
%   | | else if ( recursion_accounttype(G, B) )
%   | | | then return 0.32071184716014967;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.03229149890966786;  // std dev = 0.897, 20.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=2 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then return 0.6705549299286738;  // std dev = 0.042, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.3027332802607892;  // std dev = 0.051, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then return 0.2740140071292268;  // std dev = 0.013, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0.16021513071996885;  // std dev = 0.283, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else return 0.2937121195214614;  // std dev = 0.039, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(A, F), follows(F, A) )
%   | then if ( tweets(F, G) )
%   | | then if ( tweets(A, H) )
%   | | | then return -0.06009933508872335;  // std dev = 1.398, 61.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=5 */
%   | | | else return -0.05013273025067911;  // std dev = 1.148, 15.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=2 */
%   | | else return -0.08822511744560446;  // std dev = 0.017, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( follows(I, A) )
%   | | then return -0.09304425950806643;  // std dev = 0.021, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.010370749481616016;  // std dev = 1.514, 19.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=7 */
%   | | | else return 0.306443091269982;  // std dev = 0.652, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(A, E) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then if ( tweets(D, E), follows(A, D) )
%   | | | then return 0.153795804982063;  // std dev = 0.961, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | | else return 0.2177381668473342;  // std dev = 0.022, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.07018523377211268;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.23675256164696112;  // std dev = 0.028, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( follows(F, A) )
%   | then if ( follows(G, F), recursion_accounttype(G, B) )
%   | | then return 0.2952209238541777;  // std dev = 0.331, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | else return -0.08967438228776699;  // std dev = 0.081, 87.000 (wgt'ed) examples reached here.  /* #neg=87 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.5178751603530071;  // std dev = 0.096, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.2692637185079806;  // std dev = 0.074, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else return -0.07767979510249542;  // std dev = 0.355, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return 0.13252192150140119;  // std dev = 0.963, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | | else return -0.01735152101655093;  // std dev = 0.883, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return -0.22135715453538302;  // std dev = 0.997, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else return 0.19681537818503933;  // std dev = 0.025, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( follows(A, G), follows(G, A) )
%   | then if ( tweets(G, H) )
%   | | then return -0.03662269600187357;  // std dev = 0.166, 76.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=8 */
%   | | else return -0.0689686685996421;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(J, A), follows(K, J) )
%   | | | then return -0.02592150950838564;  // std dev = 0.271, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return -0.09431138548371573;  // std dev = 1.685, 35.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=8 */
%   | | else return 0.028823369433212828;  // std dev = 0.117, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(D, A) )
%   then if ( follows(C, E), recursion_accounttype(E, B) )
%   | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0.18026955464141856;  // std dev = 0.021, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | else return 0.4707735644245113;  // std dev = 0.093, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return -0.08041286409388852;  // std dev = 0.006, 70.000 (wgt'ed) examples reached here.  /* #neg=70 */
%   else if ( recursion_accounttype(G, B) )
%   | then if ( follows(A, H), follows(G, H) )
%   | | then if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.19397729419574286;  // std dev = 0.037, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.4322918512927232;  // std dev = 0.147, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.15591126050319737;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(J, A), follows(K, J) )
%   | | then return -0.07795853128882534;  // std dev = 2.63e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( tweets(A, L) )
%   | | | then return -0.1560691377745258;  // std dev = 0.059, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return -0.2884862860116306;  // std dev = 0.088, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.15667984408179642;  // std dev = 0.079, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | | else return 0.01495202277316554;  // std dev = 0.945, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else return 0.36065337752813026;  // std dev = 0.083, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(A, C) )
%   | | then return -0.07317027513468644;  // std dev = 0.042, 79.000 (wgt'ed) examples reached here.  /* #neg=79 */
%   | | else return -0.05758211949498278;  // std dev = 0.068, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.16550434749195056;  // std dev = 0.032, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.314766141560637;  // std dev = 0.088, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.17136547764698193;  // std dev = 0.070, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return -0.03683652412213318;  // std dev = 0.283, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */


Results
   AUC ROC   = 0.993147
   AUC PR    = 0.339617
   CLL	      = -0.140416
   Precision = 0.3379 at threshold = 0.5
   Recall    = 0.948718
   F1        = 0.498316


Total learning time: 7.498 seconds
Total inference time: 35.026 seconds
AUC ROC: 0.993147


Results scoring model
   AUC ROC   = 0.993037
   AUC PR    = 0.357792
   CLL	      = -0.120926
   Precision = 0.340136 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.507614


Total scoring time: 12.273 seconds
Refined model CLL: -0.120926


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.993147
   AUC PR    = 0.339617
   CLL	      = -0.140416
   Precision = 0.3379 at threshold = 0.5
   Recall    = 0.948718
   F1        = 0.498316


Total learning time: 41.219 seconds
Total inference time: 35.026 seconds
AUC ROC: 0.993147
Total revision time: 41.219
Best scored revision CLL: -0.120926


Dataset: 7_yeast_twitter, Fold: 2, Type: Transfer (trRDN-B), Time: 00:19:21
{'AUC ROC': 0.993147, 'AUC PR': 0.339617, 'CLL': -0.140416, 'Precision': [0.3379, 0.5], 'Recall': 0.948718, 'F1': 0.498316, 'Learning time': 41.219, 'Inference time': 35.026, 'parameter_0.4': {'AUC ROC': 0.991691, 'AUC PR': 0.39267, 'CLL': -0.130253, 'Precision': [0.346056, 0.5], 'Recall': 0.871795, 'F1': 0.495446, 'Learning time': 4.509, 'Inference time': 42.285}}


Amount of data: 0.6
******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;false;true
0;false;interaction(A, D), interaction(D, D).;true;true
0;false,true;interaction(E, A), interaction(D, E).;true;true
0;false,true,true;interaction(A, A).;false;false
0;false,true,false;enzyme(D, F), phenotype(A, G).;false;false
0;false,false;interaction(H, A), recursion_proteinclass(H, B).;true;true
0;false,false,true;interaction(A, I), interaction(J, H).;false;false
0;false,false,false;interaction(K, A), complex(A, L).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
1;true;interaction(C, C).;false;true
1;true,false;interaction(A, D), interaction(D, D).;true;false
1;true,false,true;complex(C, E).;false;false
1;false;interaction(A, F), recursion_proteinclass(F, B).;false;true
1;false,false;interaction(A, G), interaction(G, H).;true;true
1;false,false,true;recursion_proteinclass(H, B).;false;false
1;false,false,false;interaction(I, A), location(I, J).;false;false
2;;proteinclass(A, B) :- interaction(C, A), enzyme(C, D).;true;true
2;true;location(A, E), location(C, E).;false;true
2;true,false;interaction(A, F), phenotype(A, G).;true;true
2;true,false,true;interaction(F, A), interaction(H, C).;false;false
2;true,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;false;interaction(A, J), recursion_proteinclass(J, B).;false;true
2;false,false;interaction(A, K), enzyme(K, L).;false;true
2;false,false,false;interaction(M, A), interaction(A, M).;false;false
3;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
3;true;interaction(D, C), interaction(C, D).;true;false
3;true,true;recursion_proteinclass(D, B).;false;false
3;false;interaction(A, E), recursion_proteinclass(E, B).;true;true
3;false,true;interaction(E, F), interaction(F, F).;false;false
3;false,false;interaction(A, G), interaction(H, A).;true;true
3;false,false,true;complex(A, I), complex(G, I).;false;false
3;false,false,false;enzyme(A, J), complex(A, K).;false;false
4;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
4;false;interaction(A, D), complex(D, E).;true;true
4;false,true;interaction(F, A), interaction(F, D).;true;true
4;false,true,true;interaction(D, G), recursion_proteinclass(G, B).;false;false
4;false,true,false;recursion_proteinclass(D, B).;false;false
4;false,false;enzyme(A, H), location(A, I).;true;true
4;false,false,true;enzyme(J, H), recursion_proteinclass(J, B).;false;false
4;false,false,false;complex(A, K), interaction(L, A).;false;false
5;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;false;true
5;false;interaction(D, A), interaction(A, D).;true;true
5;false,true;interaction(D, D).;true;true
5;false,true,true;interaction(A, A).;false;false
5;false,true,false;phenotype(D, E), complex(D, F).;false;false
5;false,false;enzyme(A, G), interaction(A, H).;true;true
5;false,false,true;enzyme(H, I).;false;false
5;false,false,false;interaction(A, J), interaction(J, J).;false;false
6;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
6;false;interaction(A, D), phenotype(A, E).;true;true
6;false,true;location(D, F), location(A, F).;true;true
6;false,true,true;interaction(D, G), recursion_proteinclass(G, B).;false;false
6;false,true,false;complex(D, H), interaction(D, D).;false;false
6;false,false;interaction(A, I), interaction(I, A).;true;true
6;false,false,true;interaction(I, I).;false;false
6;false,false,false;location(A, J).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
7;false;interaction(D, A), interaction(A, D).;true;true
7;false,true;complex(D, E).;true;true
7;false,true,true;complex(A, F), enzyme(D, G).;false;false
7;false,true,false;interaction(D, D), complex(A, H).;false;false
7;false,false;enzyme(A, I), interaction(J, A).;true;true
7;false,false,true;enzyme(J, K), phenotype(J, L).;false;false
7;false,false,false;interaction(A, M), recursion_proteinclass(M, B).;false;false
8;;proteinclass(A, B) :- interaction(C, A), interaction(A, D).;true;true
8;true;interaction(E, C), recursion_proteinclass(E, B).;false;true
8;true,false;interaction(A, C).;false;false
8;false;location(A, F).;true;true
8;false,true;location(G, F), recursion_proteinclass(G, B).;true;false
8;false,true,true;interaction(H, A), interaction(H, G).;false;false
8;false,false;interaction(A, I), interaction(I, J).;false;true
8;false,false,false;interaction(A, K).;false;false
9;;proteinclass(A, B) :- interaction(C, A), interaction(C, C).;true;true
9;true;recursion_proteinclass(C, B), interaction(A, C).;false;false
9;false;enzyme(A, D), interaction(A, E).;true;true
9;false,true;interaction(E, F), recursion_proteinclass(F, B).;false;true
9;false,true,false;interaction(E, A).;false;false
9;false,false;interaction(G, A), phenotype(A, H).;true;true
9;false,false,true;interaction(I, G), recursion_proteinclass(I, B).;false;false
9;false,false,false;interaction(A, J), enzyme(J, K).;false;false


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.858148935099512;  // std dev = 2.38e-07, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   else if ( follows(D, A), follows(D, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), follows(E, G) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.6914822684328455;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else if ( follows(A, H), tweets(A, I) )
%   | | | then return -0.009775593202374451;  // std dev = 3.486, 106.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=14 */
%   | | | else return -0.01457833762776042;  // std dev = 2.472, 55.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=7 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(D, A), follows(D, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.6616953869438453;  // std dev = 1.649, 48.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=45 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then return 0.7194734122109545;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(F, A), follows(G, F) )
%   | | then if ( recursion_accounttype(G, B) )
%   | | | then return 0.85950861471594;  // std dev = 0.000840, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.1405339457982513;  // std dev = 0.003, 128.000 (wgt'ed) examples reached here.  /* #neg=128 */
%   | | else if ( follows(A, H) )
%   | | | then return 0.1416386557765716;  // std dev = 2.810, 39.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=11 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, A) )
%   | then if ( follows(A, D), follows(C, E) )
%   | | then return 0.12620660947184614;  // std dev = 4.285, 147.000 (wgt'ed) examples reached here.  /* #neg=95 #pos=52 */
%   | | else return 0.18086958095845884;  // std dev = 1.024, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.13476698418697344;  // std dev = 3.039, 48.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=15 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5553664367462845;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(H, A) )
%   | | then return -0.12399698483619558;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, C) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then return 0.46923387903512187;  // std dev = 1.672, 43.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=40 */
%   | | else return -0.46158856652080454;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return 0.5672872147527143;  // std dev = 0.048, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(F, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.4736531261009724;  // std dev = 0.151, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(G, A), follows(A, H) )
%   | | then if ( tweets(A, I), tweets(G, I) )
%   | | | then return -0.07629600657586527;  // std dev = 2.125, 91.000 (wgt'ed) examples reached here.  /* #neg=84 #pos=7 */
%   | | | else return -0.055478211434533;  // std dev = 1.372, 30.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=3 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.059911812867660064;  // std dev = 2.288, 32.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=7 */
%   | | | else return 0.013675122684402085;  // std dev = 1.799, 21.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=4 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.3420062073779193;  // std dev = 1.901, 49.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=45 */
%   else if ( follows(D, A), tweets(D, E) )
%   | then if ( follows(A, F), follows(D, F) )
%   | | then if ( follows(G, D), recursion_accounttype(G, B) )
%   | | | then return 0.5555941732597509;  // std dev = 0.488, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.1312511570754531;  // std dev = 0.045, 111.000 (wgt'ed) examples reached here.  /* #neg=111 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0.30860654555394607;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.039753483597163033;  // std dev = 1.677, 25.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=5 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then return 0.8163523935524855;  // std dev = 0.012, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( tweets(A, I), follows(A, J) )
%   | | | then return -0.1822652110232356;  // std dev = 0.052, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | | else return -0.17880018316026566;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.3247938742342051;  // std dev = 0.212, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(D, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(D, E) )
%   | | | then return -0.03450675556377978;  // std dev = 2.662, 99.000 (wgt'ed) examples reached here.  /* #neg=84 #pos=15 */
%   | | | else return -0.11600100613581917;  // std dev = 0.004, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( follows(F, A) )
%   | | then return -0.09601106634031023;  // std dev = 0.114, 15.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=1 */
%   | | else if ( follows(G, A), follows(G, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.1350887125576409;  // std dev = 2.285, 38.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=15 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.2875628704447152;  // std dev = 0.206, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0.44007676991845596;  // std dev = 0.986, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else if ( tweets(D, F), follows(D, D) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11504566774431534;  // std dev = 0.077, 127.000 (wgt'ed) examples reached here.  /* #neg=127 */
%   | else if ( follows(G, A), follows(A, G) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.057114089371488784;  // std dev = 0.367, 38.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.2326229836660874;  // std dev = 0.181, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( tweets(D, E) )
%   | | then if ( tweets(A, F) )
%   | | | then return -0.056585275762464;  // std dev = 1.752, 105.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=9 */
%   | | | else return -0.023807624017129554;  // std dev = 1.041, 27.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=4 */
%   | | else if ( follows(D, D), tweets(A, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09171327041795477;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( follows(A, H) )
%   | | then return 0.05093593901968537;  // std dev = 0.346, 42.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=13 */
%   | | else if ( follows(I, A), recursion_accounttype(I, B) )
%   | | | then return -0.06762480591472601;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.10060677810401052;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(D, A) )
%   then if ( follows(C, E), recursion_accounttype(E, B) )
%   | then return 0.22437569010401526;  // std dev = 1.594, 58.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=56 */
%   | else if ( follows(C, A) )
%   | | then return -0.09933416175305118;  // std dev = 0.065, 120.000 (wgt'ed) examples reached here.  /* #neg=120 */
%   | | else return -0.11511038472946865;  // std dev = 0.031, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else if ( recursion_accounttype(F, B) )
%   | then if ( follows(A, G), follows(F, G) )
%   | | then return 0.5051698429608023;  // std dev = 0.651, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return 0.1403369378807512;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then return -0.09186211800436482;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( follows(J, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1935794992976183;  // std dev = 0.016, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(C, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0.18178586344164122;  // std dev = 1.666, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | | else if ( follows(A, D) )
%   | | | then return -0.09083280423521195;  // std dev = 0.051, 100.000 (wgt'ed) examples reached here.  /* #neg=100 */
%   | | | else return -0.06628459599905337;  // std dev = 0.355, 21.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=2 */
%   | else if ( follows(A, F) )
%   | | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | | then return 0.38199698592887193;  // std dev = 0.478, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.03689352056658854;  // std dev = 1.184, 23.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=5 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.992715
   AUC PR    = 0.415011
   CLL	      = -0.127594
   Precision = 0.345178 at threshold = 0.5
   Recall    = 0.871795
   F1        = 0.494545


Total learning time: 5.806 seconds
Total inference time: 45.921 seconds
AUC ROC: 0.992715


Results scoring model
   AUC ROC   = 0.993167
   AUC PR    = 0.415397
   CLL	      = -0.126425
   Precision = 0.344828 at threshold = 0.5
   Recall    = 0.933333
   F1        = 0.503597


Total scoring time: 25.043 seconds
Parameter learned model CLL: -0.126425


Structure after Parameter Learning
[['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(D, A), follows(D, D)', 'false,false': 'follows(A, E), recursion_accounttype(E, B)', 'false,false,true': 'follows(F, A), follows(E, G)', 'false,false,false': 'follows(A, H), tweets(A, I)'}, {'true': [2.38e-07, 0, 44], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 5], 'false,false,true,false': [0.913, 1, 5], 'false,false,false,true': [3.486, 92, 14], 'false,false,false,false': [2.472, 48, 7]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, C)', 'true,false': 'follows(D, A), follows(D, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,false': 'follows(F, A), follows(G, F)', 'false,false,true': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(A, H)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [1.649, 3, 45], 'false,true': [0.0, 0, 9], 'false,false,true,true': [0.00084, 0, 10], 'false,false,true,false': [0.003, 128, 0], 'false,false,false,true': [2.81, 28, 11], 'false,false,false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, A)', 'true,true': 'follows(A, D), follows(C, E)', 'true,false': 'follows(F, A), recursion_accounttype(F, B)', 'false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false': 'follows(H, A)'}, {'true,true,true': [4.285, 95, 52], 'true,true,false': [1.024, 5, 4], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.039, 33, 15], 'false,true': [0.0, 0, 4], 'false,false,true': [0.0, 7, 0], 'false,false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D), follows(D, C)', 'true,true': 'recursion_accounttype(D, B)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(F, F)', 'false,false': 'follows(G, A), follows(A, H)', 'false,false,true': 'tweets(A, I), tweets(G, I)', 'false,false,false': 'tweets(A, J)'}, {'true,true,true': [1.672, 3, 40], 'true,true,false': [0.0, 1, 0], 'true,false': [0.048, 0, 5], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.151, 0, 9], 'false,false,true,true': [2.125, 84, 7], 'false,false,true,false': [1.372, 27, 3], 'false,false,false,true': [2.288, 25, 7], 'false,false,false,false': [1.799, 17, 4]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A), tweets(D, E)', 'false,true': 'follows(A, F), follows(D, F)', 'false,true,true': 'follows(G, D), recursion_accounttype(G, B)', 'false,true,false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(H, B)', 'false,false,false': 'tweets(A, I), follows(A, J)'}, {'true': [1.901, 4, 45], 'false,true,true,true': [0.488, 0, 10], 'false,true,true,false': [0.045, 111, 0], 'false,true,false,true': [0.0, 0, 4], 'false,true,false,false': [1.677, 20, 5], 'false,false,true': [0.012, 0, 11], 'false,false,false,true': [0.052, 13, 0], 'false,false,false,false': [0.0, 10, 0]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(D, D)', 'false,true,false': 'tweets(D, E)', 'false,false': 'follows(F, A)', 'false,false,false': 'follows(G, A), follows(G, G)'}, {'true': [0.212, 0, 44], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [2.662, 84, 15], 'false,true,false,false': [0.004, 3, 0], 'false,false,true': [0.114, 14, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.285, 23, 15]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(D, F), follows(D, D)', 'false,false': 'follows(G, A), follows(A, G)'}, {'true': [0.206, 0, 45], 'false,true,true': [0.986, 0, 19], 'false,true,false,true': [0.0, 0, 0], 'false,true,false,false': [0.077, 127, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.367, 27, 11]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'tweets(D, E)', 'false,true,true': 'tweets(A, F)', 'false,true,false': 'follows(D, D), tweets(A, G)', 'false,false': 'follows(A, H)', 'false,false,false': 'follows(I, A), recursion_accounttype(I, B)'}, {'true': [0.181, 0, 45], 'false,true,true,true': [1.752, 96, 9], 'false,true,true,false': [1.041, 23, 4], 'false,true,false,true': [0.0, 0, 0], 'false,true,false,false': [0.0, 1, 0], 'false,false,true': [0.346, 29, 13], 'false,false,false,true': [0.894, 1, 4], 'false,false,false,false': [0.0, 12, 0]}], ['accounttype(A, B)', {'': 'follows(A, C), follows(D, A)', 'true': 'follows(C, E), recursion_accounttype(E, B)', 'true,false': 'follows(C, A)', 'false': 'recursion_accounttype(F, B)', 'false,true': 'follows(A, G), follows(F, G)', 'false,false': 'follows(H, A), follows(I, H)', 'false,false,false': 'follows(J, A)'}, {'true,true': [1.594, 2, 56], 'true,false,true': [0.065, 120, 0], 'true,false,false': [0.031, 9, 0], 'false,true,true': [0.651, 0, 15], 'false,true,false': [0.0, 0, 4], 'false,false,true': [0.0, 4, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.016, 23, 0]}], ['accounttype(A, B)', {'': 'follows(A, C), follows(C, C)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'follows(A, D)', 'false,false': 'follows(A, F)', 'false,false,true': 'follows(F, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true,true': [1.666, 2, 58], 'false,true,false,true': [0.051, 100, 0], 'false,true,false,false': [0.355, 19, 2], 'false,false,true,true': [0.478, 0, 10], 'false,false,true,false': [1.184, 18, 5], 'false,false,false': [0.0, 0, 0]}]]
[{'': [1.2918958832001822e-15, 0.14774878312601353], 'false': [nan, 0.14774878312601353], 'false,false': [0.0826446280991734, 0.1134215500945186], 'false,false,false': [0.11463154147383355, 0.11107438016528944], 'false,false,true': [0.0, 0.13888888888888876]}, {'': [0.056616322545744634, 0.1248210591543851], 'false': [0.0, 0.10457548969098433], 'false,false': [0.06721855147054613, 0.20247481504065795], 'false,false,false': [0.20247481504065795, nan], 'false,false,true': [7.053379640353796e-08, 5.885606441449753e-08], 'true': [nan, 0.056616322545744634], 'true,false': [nan, 0.0566163225457447]}, {'': [0.14054092232959794, 0.10680140859800936], 'true': [0.12458052936966318, 0.1923898449122198], 'true,false': [nan, 0.1923898449122198], 'true,true': [0.12490158945374782, 0.11652089449367274], 'false': [0.0, -1.982541115402065e-18], 'false,false': [-1.982541115402065e-18, nan]}, {'': [0.07568831961438235, 0.09634759909569388], 'false': [0.0025461568727820844, 0.0883849325401356], 'false,false': [0.052970945402880026, 0.1603991223458461], 'false,false,false': [0.16362350487594202, 0.15419501133786853], 'true': [0.08278784512299785, 0.0004519199454635636], 'true,true': [0.06502154327518131, 0.0], 'false,false,true': [0.04963356655244979, 0.06276839705549028], 'false,true': [nan, 0.0025461568727820844]}, {'': [0.07378344399784788, 0.08986409567646579], 'false': [0.054425981304618745, 0.2176808772227698], 'false,false': [1.3427150014712971e-05, 0.00011989643749945311], 'false,true': [0.03774711898827386, 0.10554533673620747], 'false,true,false': [0.0, 0.11246266386592652], 'false,true,true': [0.02377120416679652, 1.8069272865615424e-05], 'false,false,false': [0.00020690428456634406, -1.1102230246251566e-17]}, {'': [0.001022837231380666, 0.08705218288696709], 'false': [0.06964843547614494, 0.11307008916717405], 'false,false': [0.013041540116220227, 0.1374398235493486], 'false,false,false': [nan, 0.1374398235493486], 'false,true': [nan, 0.06964843547614494], 'false,true,false': [0.07156351199112765, 4.930337072758806e-06]}, {'': [0.0009433122129388553, 0.062437969537655985], 'false': [0.041586752013182855, 0.13462879957050636], 'false,false': [nan, 0.13462879957050636], 'false,true': [0.05119023755050932, 4.687655406982299e-05], 'false,true,false': [nan, 4.687655406982124e-05]}, {'': [0.0007320274330051507, 0.054129374329334824], 'false': [0.031424494084073266, 0.1027960310358418], 'false,false': [0.11946786138783369, 0.04728466653761137], 'false,false,false': [0.16, -4.625929269271485e-18], 'false,true': [0.031649400844809876, 0.0], 'false,true,true': [0.02924131531685686, 0.040159561855055516], 'false,true,false': [nan, 0.0]}, {'': [0.0362002936677538, 0.10841226152123454], 'false': [0.04442913828142872, 0.001315554522908456], 'false,true': [0.028255214041567722, 0.0], 'true': [0.043809275609394654, 5.6694954524921746e-05], 'false,false': [0.0, 1.1542812788739345e-05], 'true,false': [3.556172405704272e-05, 0.00010694651294781667], 'false,false,false': [nan, 1.1542812788739345e-05]}, {'': [nan, 0.04146047096885473], 'false': [0.032064685497105276, 0.08649608247047075], 'false,false': [0.08649608247047075, nan], 'false,false,true': [0.022838213119232554, 0.061000915021911115], 'false,true': [0.04626792848169793, 0.0011490007685040489], 'false,true,false': [2.5596051498207873e-05, 0.0060005185047491095]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
0;false;follows(A, E), recursion_accounttype(E, B).;true;true
0;false,true;follows(F, A), follows(E, G).;true;true
1;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
1;false;follows(E, A), recursion_accounttype(E, B).;true;true
1;false,false;follows(F, A), follows(G, F).;true;true
1;false,false,true;recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
3;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
3;true;follows(C, D), follows(D, C).;true;true
3;true,true;recursion_accounttype(D, B).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(D, A), tweets(D, E).;true;true
4;false,true;follows(A, F), follows(D, F).;true;true
4;false,true,true;follows(G, D), recursion_accounttype(G, B).;true;true
4;false,true,false;recursion_accounttype(D, B).;true;true
4;false,false;recursion_accounttype(H, B).;true;true
4;false,false,false;tweets(A, I), follows(A, J).;true;true
5;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
5;false;follows(A, D), follows(D, A).;true;true
5;false,true;tweets(D, E).;true;true
6;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
6;false;follows(D, A).;true;true
6;false,true;follows(E, D), recursion_accounttype(E, B).;true;true
7;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
7;false;follows(A, D), follows(D, A).;true;true
7;false,true;tweets(D, E).;true;true
7;false,false;follows(A, H).;true;true
7;false,false,false;follows(I, A), recursion_accounttype(I, B).;true;true
8;;accounttype(A, B) :- follows(A, C), follows(D, A).;true;true
8;true;follows(C, E), recursion_accounttype(E, B).;true;true
8;true,false;follows(C, A).;true;true
8;false;recursion_accounttype(F, B).;true;true
8;false,true;follows(A, G), follows(F, G).;true;true
8;false,false;follows(H, A), follows(I, H).;true;true
9;;accounttype(A, B) :- follows(D, A).;true;true
9;true;follows(E, D), recursion_accounttype(E, B).;true;true
9;true,false;follows(A, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then return 0.8581489350995117;  // std dev = 2.46e-07, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | else return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(A, E), recursion_accounttype(E, B) )
%   | then if ( follows(F, A), follows(E, G) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.5724346493852265;  // std dev = 0.452, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.12903055207997485;  // std dev = 0.994, 78.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=1 */
%   | | | else return 0.06745126068090773;  // std dev = 2.668, 43.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=9 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.1914822684328457;  // std dev = 2.160, 21.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=7 */
%   | | | else return 0.124815601766179;  // std dev = 1.713, 15.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=4 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then return 0.6639178566553993;  // std dev = 0.229, 36.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=34 */
%   | | else if ( tweets(A, E) )
%   | | | then return 0.48295310156610305;  // std dev = 0.819, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.40411299801781925;  // std dev = 0.839, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.7554192504913506;  // std dev = 0.062, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.7366049332824657;  // std dev = 0.057, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(G, A), follows(H, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.8520785353105056;  // std dev = 0.022, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.13446420141478296;  // std dev = 0.120, 120.000 (wgt'ed) examples reached here.  /* #neg=120 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.10516297502475133;  // std dev = 2.261, 26.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=7 */
%   | | | else return 0.14717032909585392;  // std dev = 1.660, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then if ( follows(A, F), follows(F, A) )
%   | | | then return 0.5310155547538414;  // std dev = 0.984, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | | | else return 0.3742406889044326;  // std dev = 0.928, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.5871279715733615;  // std dev = 0.142, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( tweets(A, G), follows(H, A) )
%   | | then if ( tweets(I, G), recursion_accounttype(I, B) )
%   | | | then return 0.6640831122614006;  // std dev = 0.237, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.1190094726418828;  // std dev = 0.096, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.1551075767028775;  // std dev = 2.157, 21.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=7 */
%   | | | else return 0.03764116896477938;  // std dev = 2.346, 41.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=9 */
%   else if ( follows(K, A), recursion_accounttype(K, B) )
%   | then return 0.5999474444917338;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return -0.11269589704821134;  // std dev = 7.45e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, C) )
%   | then return 0.415017479946325;  // std dev = 0.156, 41.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=40 */
%   | else return 0.4958044197390416;  // std dev = 0.088, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(E, A), follows(A, F) )
%   | then if ( recursion_accounttype(E, B) )
%   | | then return 0.44907842702452533;  // std dev = 0.169, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(E, F) )
%   | | | then return -0.0759044111978632;  // std dev = 1.609, 107.000 (wgt'ed) examples reached here.  /* #neg=102 #pos=5 */
%   | | | else return 0.19433028094968255;  // std dev = 1.184, 11.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=5 */
%   | else if ( tweets(A, G), follows(A, H) )
%   | | then if ( tweets(I, G), recursion_accounttype(I, B) )
%   | | | then return 0.7968991768705347;  // std dev = 0.013, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.20481996997535845;  // std dev = 0.010, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( follows(J, A), recursion_accounttype(J, B) )
%   | | | then return 0.45147785889745595;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -9.13233476586628E-5;  // std dev = 1.780, 25.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=4 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(A, E) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then return 0.33687273827149655;  // std dev = 0.023, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | else return 0.17256718060526163;  // std dev = 0.886, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.3524389216126982;  // std dev = 0.146, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( follows(F, A), tweets(F, G) )
%   | then if ( follows(A, H), follows(F, H) )
%   | | then if ( follows(I, F), recursion_accounttype(I, B) )
%   | | | then return 0.41243470734578785;  // std dev = 0.976, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | | else return -0.10470683781816711;  // std dev = 0.131, 107.000 (wgt'ed) examples reached here.  /* #neg=107 */
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0.1438510680285761;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.011499669582598467;  // std dev = 1.353, 30.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=5 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then return 0.7014488342209235;  // std dev = 0.083, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return -0.17569170670072104;  // std dev = 0.015, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.2178536167427314;  // std dev = 0.974, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | | else return 0.06134876693519501;  // std dev = 1.266, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | else return 0.2585032543589225;  // std dev = 0.014, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.28302859387728635;  // std dev = 0.052, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( follows(A, F), follows(F, A) )
%   | then if ( tweets(F, G) )
%   | | then return -0.027038673729702874;  // std dev = 0.191, 122.000 (wgt'ed) examples reached here.  /* #neg=107 #pos=15 */
%   | | else return -0.1181587469854236;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.46997779685679236;  // std dev = 0.562, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return -0.14993980754355618;  // std dev = 0.091, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | | else return -0.10954653429046535;  // std dev = 0.126, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.23915553703092468;  // std dev = 0.259, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.22986856262055466;  // std dev = 0.134, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.5465709119940009;  // std dev = 0.206, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return -0.09515556558479023;  // std dev = 0.190, 110.000 (wgt'ed) examples reached here.  /* #neg=110 */
%   | else if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.35413774085724825;  // std dev = 0.018, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.12973386262261252;  // std dev = 0.010, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.05498912055239223;  // std dev = 0.850, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | | else return -0.009177067575534903;  // std dev = 0.920, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, D), follows(A, E) )
%   | | | then return 0.1481312532872394;  // std dev = 0.958, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | else return 0.18222265818890918;  // std dev = 0.025, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.22938851460114712;  // std dev = 0.055, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0.1835092807215998;  // std dev = 0.039, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return -0.0026030137832076528;  // std dev = 0.854, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else if ( follows(A, G), follows(G, A) )
%   | then return -0.04298107376028305;  // std dev = 0.156, 118.000 (wgt'ed) examples reached here.  /* #neg=105 #pos=13 */
%   | else if ( follows(A, H) )
%   | | then if ( tweets(A, I) )
%   | | | then return -0.015817734872532588;  // std dev = 0.914, 32.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=8 */
%   | | | else return 0.079479848577669;  // std dev = 1.215, 14.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=5 */
%   | | else return 0.02440522564993175;  // std dev = 0.143, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(D, A) )
%   then if ( follows(C, E), recursion_accounttype(E, B) )
%   | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0.1666498762845889;  // std dev = 0.120, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.2433480831935415;  // std dev = 0.112, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.4236178771906699;  // std dev = 0.208, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return -0.08258717569651497;  // std dev = 0.013, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
%   else if ( recursion_accounttype(H, B) )
%   | then if ( follows(A, I), follows(H, I) )
%   | | then if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return -0.044398762634086306;  // std dev = 0.882, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.3772829683156987;  // std dev = 0.424, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.2096009231092013;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(K, A), follows(L, K) )
%   | | then return -0.08563948205339247;  // std dev = 5.27e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else return -0.13290841320018426;  // std dev = 0.084, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F), tweets(E, F) )
%   | | | then return 0.05415941803123862;  // std dev = 1.628, 31.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=28 */
%   | | | else return 0.1449909666998117;  // std dev = 0.091, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.057222469220128726;  // std dev = 0.878, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.3264539131090072;  // std dev = 0.191, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return -0.0795129231471923;  // std dev = 0.071, 145.000 (wgt'ed) examples reached here.  /* #neg=143 #pos=2 */
%   else if ( tweets(A, H) )
%   | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | then return 0.19499488902222079;  // std dev = 0.027, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return -0.1023714022776453;  // std dev = 0.009, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else if ( follows(A, J), follows(J, K) )
%   | | then return 0.04629446357924897;  // std dev = 0.674, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | else return 0.033894785135500385;  // std dev = 0.249, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */


Results
   AUC ROC   = 0.994406
   AUC PR    = 0.404886
   CLL	      = -0.111275
   Precision = 0.346341 at threshold = 0.5
   Recall    = 0.910256
   F1        = 0.501767


Total learning time: 28.48 seconds
Total inference time: 254.744 seconds
AUC ROC: 0.994406


Results scoring model
   AUC ROC   = 0.99367
   AUC PR    = 0.462507
   CLL	      = -0.108128
   Precision = 0.352113 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.520833


Total scoring time: 114.858 seconds
Refined model CLL: -0.108128


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.994406
   AUC PR    = 0.404886
   CLL	      = -0.111275
   Precision = 0.346341 at threshold = 0.5
   Recall    = 0.910256
   F1        = 0.501767


Total learning time: 174.187 seconds
Total inference time: 254.744 seconds
AUC ROC: 0.994406
Total revision time: 174.187
Best scored revision CLL: -0.108128


Dataset: 7_yeast_twitter, Fold: 2, Type: Transfer (trRDN-B), Time: 00:27:17
{'AUC ROC': 0.994406, 'AUC PR': 0.404886, 'CLL': -0.111275, 'Precision': [0.346341, 0.5], 'Recall': 0.910256, 'F1': 0.501767, 'Learning time': 174.187, 'Inference time': 254.744, 'parameter_0.6': {'AUC ROC': 0.992715, 'AUC PR': 0.415011, 'CLL': -0.127594, 'Precision': [0.345178, 0.5], 'Recall': 0.871795, 'F1': 0.494545, 'Learning time': 5.806, 'Inference time': 45.921}}


Amount of data: 0.8
******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;false;true
0;false;interaction(A, D), interaction(D, D).;true;true
0;false,true;interaction(E, A), interaction(D, E).;true;true
0;false,true,true;interaction(A, A).;false;false
0;false,true,false;enzyme(D, F), phenotype(A, G).;false;false
0;false,false;interaction(H, A), recursion_proteinclass(H, B).;true;true
0;false,false,true;interaction(A, I), interaction(J, H).;false;false
0;false,false,false;interaction(K, A), complex(A, L).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
1;true;interaction(C, C).;false;true
1;true,false;interaction(A, D), interaction(D, D).;true;false
1;true,false,true;complex(C, E).;false;false
1;false;interaction(A, F), recursion_proteinclass(F, B).;false;true
1;false,false;interaction(A, G), interaction(G, H).;true;true
1;false,false,true;recursion_proteinclass(H, B).;false;false
1;false,false,false;interaction(I, A), location(I, J).;false;false
2;;proteinclass(A, B) :- interaction(C, A), enzyme(C, D).;true;true
2;true;location(A, E), location(C, E).;false;true
2;true,false;interaction(A, F), phenotype(A, G).;true;true
2;true,false,true;interaction(F, A), interaction(H, C).;false;false
2;true,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;false;interaction(A, J), recursion_proteinclass(J, B).;false;true
2;false,false;interaction(A, K), enzyme(K, L).;false;true
2;false,false,false;interaction(M, A), interaction(A, M).;false;false
3;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
3;true;interaction(D, C), interaction(C, D).;true;false
3;true,true;recursion_proteinclass(D, B).;false;false
3;false;interaction(A, E), recursion_proteinclass(E, B).;true;true
3;false,true;interaction(E, F), interaction(F, F).;false;false
3;false,false;interaction(A, G), interaction(H, A).;true;true
3;false,false,true;complex(A, I), complex(G, I).;false;false
3;false,false,false;enzyme(A, J), complex(A, K).;false;false
4;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
4;false;interaction(A, D), complex(D, E).;true;true
4;false,true;interaction(F, A), interaction(F, D).;true;true
4;false,true,true;interaction(D, G), recursion_proteinclass(G, B).;false;false
4;false,true,false;recursion_proteinclass(D, B).;false;false
4;false,false;enzyme(A, H), location(A, I).;true;true
4;false,false,true;enzyme(J, H), recursion_proteinclass(J, B).;false;false
4;false,false,false;complex(A, K), interaction(L, A).;false;false
5;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;false;true
5;false;interaction(D, A), interaction(A, D).;true;true
5;false,true;interaction(D, D).;true;true
5;false,true,true;interaction(A, A).;false;false
5;false,true,false;phenotype(D, E), complex(D, F).;false;false
5;false,false;enzyme(A, G), interaction(A, H).;true;true
5;false,false,true;enzyme(H, I).;false;false
5;false,false,false;interaction(A, J), interaction(J, J).;false;false
6;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
6;false;interaction(A, D), phenotype(A, E).;true;true
6;false,true;location(D, F), location(A, F).;true;true
6;false,true,true;interaction(D, G), recursion_proteinclass(G, B).;false;false
6;false,true,false;complex(D, H), interaction(D, D).;false;false
6;false,false;interaction(A, I), interaction(I, A).;true;true
6;false,false,true;interaction(I, I).;false;false
6;false,false,false;location(A, J).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
7;false;interaction(D, A), interaction(A, D).;true;true
7;false,true;complex(D, E).;true;true
7;false,true,true;complex(A, F), enzyme(D, G).;false;false
7;false,true,false;interaction(D, D), complex(A, H).;false;false
7;false,false;enzyme(A, I), interaction(J, A).;true;true
7;false,false,true;enzyme(J, K), phenotype(J, L).;false;false
7;false,false,false;interaction(A, M), recursion_proteinclass(M, B).;false;false
8;;proteinclass(A, B) :- interaction(C, A), interaction(A, D).;true;true
8;true;interaction(E, C), recursion_proteinclass(E, B).;false;true
8;true,false;interaction(A, C).;false;false
8;false;location(A, F).;true;true
8;false,true;location(G, F), recursion_proteinclass(G, B).;true;false
8;false,true,true;interaction(H, A), interaction(H, G).;false;false
8;false,false;interaction(A, I), interaction(I, J).;false;true
8;false,false,false;interaction(A, K).;false;false
9;;proteinclass(A, B) :- interaction(C, A), interaction(C, C).;true;true
9;true;recursion_proteinclass(C, B), interaction(A, C).;false;false
9;false;enzyme(A, D), interaction(A, E).;true;true
9;false,true;interaction(E, F), recursion_proteinclass(F, B).;false;true
9;false,true,false;interaction(E, A).;false;false
9;false,false;interaction(G, A), phenotype(A, H).;true;true
9;false,false,true;interaction(I, G), recursion_proteinclass(I, B).;false;false
9;false,false,false;interaction(A, J), enzyme(J, K).;false;false


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.8581489350995126;  // std dev = 0.000, 65.000 (wgt'ed) examples reached here.  /* #pos=65 */
%   else if ( follows(D, A), follows(D, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), follows(E, G) )
%   | | | then return 0.6914822684328455;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, H), tweets(A, I) )
%   | | | then return -0.02420400607695824;  // std dev = 3.985, 153.000 (wgt'ed) examples reached here.  /* #neg=135 #pos=18 */
%   | | | else return -0.025184398233821025;  // std dev = 2.487, 60.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=7 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(D, A), follows(D, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.7221274495315485;  // std dev = 0.069, 61.000 (wgt'ed) examples reached here.  /* #pos=61 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then return 0.6528067455442875;  // std dev = 0.966, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | else if ( follows(F, A), follows(G, F) )
%   | | then if ( recursion_accounttype(G, B) )
%   | | | then return 0.7896663619188747;  // std dev = 0.964, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | | else return -0.13888670955197607;  // std dev = 0.000696, 151.000 (wgt'ed) examples reached here.  /* #neg=151 */
%   | | else if ( follows(A, H) )
%   | | | then return 0.16112549986099173;  // std dev = 2.898, 40.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=12 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, A) )
%   | then if ( follows(A, D), follows(C, E) )
%   | | then return 0.11432240912958294;  // std dev = 5.040, 207.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=71 */
%   | | else return 0.08990724649695891;  // std dev = 1.304, 16.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=5 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.14386887884622554;  // std dev = 3.088, 49.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=16 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5717621504054301;  // std dev = 2.98e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(H, A) )
%   | | then return -0.12302713528084099;  // std dev = 9.13e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, C) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then return 0.4802269728036321;  // std dev = 1.654, 59.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=56 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.5231196629552799;  // std dev = 0.012, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(F, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.4098439058538972;  // std dev = 1.037, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | else if ( follows(G, A), follows(A, H) )
%   | | then if ( tweets(A, I), tweets(G, I) )
%   | | | then return -0.067741372719037;  // std dev = 2.449, 112.000 (wgt'ed) examples reached here.  /* #neg=103 #pos=9 */
%   | | | else return -0.0584127459058978;  // std dev = 1.623, 44.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=4 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.04118830258432453;  // std dev = 2.471, 40.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=8 */
%   | | | else return 0.18420282386581188;  // std dev = 1.595, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.36299016480918805;  // std dev = 1.685, 64.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=61 */
%   else if ( follows(D, A), tweets(D, E) )
%   | then if ( follows(A, F), follows(D, F) )
%   | | then if ( follows(G, D), recursion_accounttype(G, B) )
%   | | | then return 0.6187552759126517;  // std dev = 0.498, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return -0.1285982891382466;  // std dev = 0.035, 133.000 (wgt'ed) examples reached here.  /* #neg=133 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0.333463444615492;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.016247661358320568;  // std dev = 1.854, 45.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=6 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then return 0.7287180410076183;  // std dev = 0.976, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | else if ( tweets(A, I), follows(A, J) )
%   | | | then return -0.18059660026927282;  // std dev = 0.076, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | | else return -0.2081707373205085;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.27327354286858196;  // std dev = 1.669, 68.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=65 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(D, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(D, E) )
%   | | | then return -0.03958011206613402;  // std dev = 2.839, 153.000 (wgt'ed) examples reached here.  /* #neg=135 #pos=18 */
%   | | | else return -0.11284377253210667;  // std dev = 0.005, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( follows(F, A) )
%   | | then return -0.08323240620675795;  // std dev = 0.116, 16.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=1 */
%   | | else if ( follows(G, A), follows(G, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.032496398934226976;  // std dev = 2.702, 57.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=16 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.24827023000931053;  // std dev = 1.359, 63.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=61 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0.43808664114562074;  // std dev = 1.118, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else if ( tweets(D, F), follows(D, D) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11167683784406623;  // std dev = 0.069, 159.000 (wgt'ed) examples reached here.  /* #neg=159 */
%   | else if ( follows(G, A), follows(A, G) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.007883099978271706;  // std dev = 0.341, 56.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=12 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.18497029459259137;  // std dev = 1.706, 64.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=61 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( tweets(D, E) )
%   | | then if ( tweets(A, F) )
%   | | | then return -0.036735193544965294;  // std dev = 2.012, 110.000 (wgt'ed) examples reached here.  /* #neg=98 #pos=12 */
%   | | | else return -0.04763478801020645;  // std dev = 1.104, 40.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=4 */
%   | | else if ( follows(D, D), tweets(A, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09224520502894425;  // std dev = 0.003, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( follows(A, H) )
%   | | then return 0.05258974180954335;  // std dev = 0.344, 52.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=15 */
%   | | else if ( follows(I, A), recursion_accounttype(I, B) )
%   | | | then return 0.14964534629873083;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.09474163398351562;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(D, A) )
%   then if ( follows(C, E), recursion_accounttype(E, B) )
%   | then return 0.24627758714617806;  // std dev = 1.631, 76.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=75 */
%   | else if ( follows(C, A) )
%   | | then return -0.09774872975071307;  // std dev = 0.038, 128.000 (wgt'ed) examples reached here.  /* #neg=128 */
%   | | else return -0.051705936249451794;  // std dev = 0.352, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   else if ( recursion_accounttype(F, B) )
%   | then if ( follows(A, G), follows(F, G) )
%   | | then return 0.5406928817461271;  // std dev = 0.742, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else return 0.0790115083268562;  // std dev = 0.446, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then return -0.08692213213930507;  // std dev = 6.45e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( follows(J, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.17986425382866406;  // std dev = 0.045, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(C, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0.17653683709372175;  // std dev = 2.087, 85.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=82 */
%   | | else if ( follows(A, D) )
%   | | | then return -0.08939147255915571;  // std dev = 0.036, 138.000 (wgt'ed) examples reached here.  /* #neg=138 */
%   | | | else return -0.06512572814728888;  // std dev = 0.393, 27.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=2 */
%   | else if ( follows(A, F) )
%   | | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | | then return 0.3258916917755376;  // std dev = 1.000, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | | else return -0.07766096720592357;  // std dev = 1.636, 35.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=6 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.99275
   AUC PR    = 0.405071
   CLL	      = -0.12333
   Precision = 0.339332 at threshold = 0.5
   Recall    = 0.846154
   F1        = 0.484404


Total learning time: 7.541 seconds
Total inference time: 45.016 seconds
AUC ROC: 0.99275


Results scoring model
   AUC ROC   = 0.993275
   AUC PR    = 0.385341
   CLL	      = -0.123034
   Precision = 0.333333 at threshold = 0.5
   Recall    = 0.9
   F1        = 0.486486


Total scoring time: 34.015 seconds
Parameter learned model CLL: -0.123034


Structure after Parameter Learning
[['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(D, A), follows(D, D)', 'false,false': 'follows(A, E), recursion_accounttype(E, B)', 'false,false,true': 'follows(F, A), follows(E, G)', 'false,false,false': 'follows(A, H), tweets(A, I)'}, {'true': [0.0, 0, 65], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.913, 1, 5], 'false,false,true,false': [0.0, 0, 5], 'false,false,false,true': [3.985, 135, 18], 'false,false,false,false': [2.487, 53, 7]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, C)', 'true,false': 'follows(D, A), follows(D, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,false': 'follows(F, A), follows(G, F)', 'false,false,true': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(A, H)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [0.069, 0, 61], 'false,true': [0.966, 1, 14], 'false,false,true,true': [0.964, 1, 13], 'false,false,true,false': [0.000696, 151, 0], 'false,false,false,true': [2.898, 28, 12], 'false,false,false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, A)', 'true,true': 'follows(A, D), follows(C, E)', 'true,false': 'follows(F, A), recursion_accounttype(F, B)', 'false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false': 'follows(H, A)'}, {'true,true,true': [5.04, 136, 71], 'true,true,false': [1.304, 11, 5], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.088, 33, 16], 'false,true': [2.98e-08, 0, 8], 'false,false,true': [9.13e-09, 15, 0], 'false,false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D), follows(D, C)', 'true,true': 'recursion_accounttype(D, B)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(F, F)', 'false,false': 'follows(G, A), follows(A, H)', 'false,false,true': 'tweets(A, I), tweets(G, I)', 'false,false,false': 'tweets(A, J)'}, {'true,true,true': [1.654, 3, 56], 'true,true,false': [0.0, 0, 0], 'true,false': [0.012, 0, 5], 'false,true,true': [0.0, 0, 0], 'false,true,false': [1.037, 1, 14], 'false,false,true,true': [2.449, 103, 9], 'false,false,true,false': [1.623, 40, 4], 'false,false,false,true': [2.471, 32, 8], 'false,false,false,false': [1.595, 7, 4]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A), tweets(D, E)', 'false,true': 'follows(A, F), follows(D, F)', 'false,true,true': 'follows(G, D), recursion_accounttype(G, B)', 'false,true,false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(H, B)', 'false,false,false': 'tweets(A, I), follows(A, J)'}, {'true': [1.685, 3, 61], 'false,true,true,true': [0.498, 0, 13], 'false,true,true,false': [0.035, 133, 0], 'false,true,false,true': [0.0, 0, 8], 'false,true,false,false': [1.854, 39, 6], 'false,false,true': [0.976, 1, 12], 'false,false,false,true': [0.076, 22, 0], 'false,false,false,false': [0.0, 15, 0]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(D, D)', 'false,true,false': 'tweets(D, E)', 'false,false': 'follows(F, A)', 'false,false,false': 'follows(G, A), follows(G, G)'}, {'true': [1.669, 3, 65], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [2.839, 135, 18], 'false,true,false,false': [0.005, 4, 0], 'false,false,true': [0.116, 15, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.702, 41, 16]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(D, F), follows(D, D)', 'false,false': 'follows(G, A), follows(A, G)'}, {'true': [1.359, 2, 61], 'false,true,true': [1.118, 0, 27], 'false,true,false,true': [0.0, 0, 0], 'false,true,false,false': [0.069, 159, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.341, 44, 12]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'tweets(D, E)', 'false,true,true': 'tweets(A, F)', 'false,true,false': 'follows(D, D), tweets(A, G)', 'false,false': 'follows(A, H)', 'false,false,false': 'follows(I, A), recursion_accounttype(I, B)'}, {'true': [1.706, 3, 61], 'false,true,true,true': [2.012, 98, 12], 'false,true,true,false': [1.104, 36, 4], 'false,true,false,true': [0.0, 0, 0], 'false,true,false,false': [0.003, 2, 0], 'false,false,true': [0.344, 37, 15], 'false,false,false,true': [0.0, 0, 8], 'false,false,false,false': [0.0, 10, 0]}], ['accounttype(A, B)', {'': 'follows(A, C), follows(D, A)', 'true': 'follows(C, E), recursion_accounttype(E, B)', 'true,false': 'follows(C, A)', 'false': 'recursion_accounttype(F, B)', 'false,true': 'follows(A, G), follows(F, G)', 'false,false': 'follows(H, A), follows(I, H)', 'false,false,false': 'follows(J, A)'}, {'true,true': [1.631, 1, 75], 'true,false,true': [0.038, 128, 0], 'true,false,false': [0.352, 7, 1], 'false,true,true': [0.742, 0, 16], 'false,true,false': [0.446, 1, 8], 'false,false,true': [6.45e-09, 15, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.045, 29, 0]}], ['accounttype(A, B)', {'': 'follows(A, C), follows(C, C)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'follows(A, D)', 'false,false': 'follows(A, F)', 'false,false,true': 'follows(F, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true,true': [2.087, 3, 82], 'false,true,false,true': [0.036, 138, 0], 'false,true,false,false': [0.393, 25, 2], 'false,false,true,true': [1.0, 1, 10], 'false,false,true,false': [1.636, 29, 6], 'false,false,false': [0.0, 0, 0]}]]
[{'': [-8.745141363201234e-16, 0.13183593749999994], 'false': [nan, 0.13183593749999994], 'false,false': [0.0826446280991734, 0.10359496572549631], 'false,false,false': [0.10380622837370186, 0.10305555555555569], 'false,false,true': [0.1388888888888887, 0.0]}, {'': [7.889183790999627e-05, 0.13251597344269736], 'false': [0.0622222222222223, 0.1070762493158591], 'false,false': [0.07257800942630753, 0.20999003790694254], 'false,false,false': [0.20999003790694265, nan], 'false,false,true': [0.06633012194966373, 3.207154483120109e-09], 'true': [nan, 7.889183790999627e-05], 'true,false': [nan, 7.889183790982155e-05]}, {'': [0.13489219087511692, 0.10950445780819028], 'true': [0.12159580143260033, 0.19460121968016986], 'true,false': [nan, 0.19460121968016986], 'true,true': [0.1227350063918338, 0.1063040066248041], 'false': [1.1102230246251565e-16, 5.551115123125783e-18], 'false,false': [5.551115123125783e-18, nan]}, {'': [0.04289773356940976, 0.09903532258280964], 'false': [0.07173017000005139, 0.08786352387819073], 'false,false': [0.05535217496062639, 0.17313533469958023], 'false,false,false': [0.15269972366891252, 0.23140495867768598], 'false,true': [nan, 0.07173017000005139], 'false,false,true': [0.053559231572468766, 0.05985355260672583], 'true': [0.04638688290800383, 2.9721542150573654e-05], 'true,true': [0.04638688290800383, nan]}, {'': [0.044359181782622326, 0.08395454657691963], 'false': [0.05784503454373742, 0.18231848695668582], 'false,false': [0.07325004755856565, 0.0003397507667481985], 'false,true': [0.04701463342214507, 0.08054818329470673], 'false,true,false': [-2.7755575615628914e-17, 0.07640780634126518], 'false,true,true': [0.01911271583145442, 9.110678928096843e-06], 'false,false,false': [0.00026315589486301176, -2.2204460492503132e-17]}, {'': [0.04097910579166502, 0.06905494180539595], 'false': [0.051481718638384195, 0.1052385807194656], 'false,false': [0.013498870515457007, 0.12805459199963523], 'false,false,false': [nan, 0.12805459199963523], 'false,true': [nan, 0.051481718638384195], 'false,true,false': [0.052690722259120505, 6.5194218724935055e-06]}, {'': [0.029327082747447795, 0.06125513729649945], 'false': [0.04425291573753418, 0.11651203368714066], 'false,false': [nan, 0.11651203368714066], 'false,true': [0.04630912881594787, 3.021610026488699e-05], 'false,true,false': [nan, 3.0216100264885594e-05]}, {'': [0.0454515338171169, 0.05431727168112649], 'false': [0.03469679588507425, 0.0922085344395204], 'false,false': [0.11863675506588568, 0.014746912625055576], 'false,true': [0.03512294949898406, 4.561095154348091e-06], 'false,true,true': [0.03678672385000863, 0.030460449183361354], 'false,false,false': [0.0, -4.163336342344337e-18], 'false,true,false': [nan, 4.561095154348091e-06]}, {'': [0.04000839448520591, 0.09304799766469425], 'false': [0.07911304246645563, 0.0019870274971462635], 'false,true': [0.03444312477361594, 0.022110427516073766], 'true': [0.03501198808331152, 0.0010370984269749367], 'false,false': [2.7755575615628915e-18, 6.99464822751842e-05], 'true,false': [1.1348439965806409e-05, 0.015453861670038843], 'false,false,false': [nan, 6.99464822751842e-05]}, {'': [nan, 0.045346015315274546], 'false': [0.03349721682758412, 0.10954662932752983], 'false,false': [0.10954662932752983, nan], 'false,false,true': [0.09084544466266092, 0.07648061767571969], 'false,true': [0.051240144866246305, 0.0010255225815712428], 'false,true,false': [9.48530206626401e-06, 0.0057261290613221695]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
0;false;follows(A, E), recursion_accounttype(E, B).;true;true
0;false,true;follows(F, A), follows(E, G).;true;true
1;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
1;false;follows(E, A), recursion_accounttype(E, B).;true;true
1;false,false;follows(F, A), follows(G, F).;true;true
1;false,false,true;recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
3;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
3;true;follows(C, D), follows(D, C).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(D, A), tweets(D, E).;true;true
4;false,true;follows(A, F), follows(D, F).;true;true
4;false,true,true;follows(G, D), recursion_accounttype(G, B).;true;true
4;false,true,false;recursion_accounttype(D, B).;true;true
4;false,false;recursion_accounttype(H, B).;true;true
4;false,false,false;tweets(A, I), follows(A, J).;true;true
5;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
5;false;follows(A, D), follows(D, A).;true;true
5;false,true;tweets(D, E).;true;true
6;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
6;false;follows(D, A).;true;true
6;false,true;follows(E, D), recursion_accounttype(E, B).;true;true
7;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
7;false;follows(A, D), follows(D, A).;true;true
7;false,true;tweets(D, E).;true;true
7;false,false;follows(A, H).;true;true
7;false,false,false;follows(I, A), recursion_accounttype(I, B).;true;true
8;;accounttype(A, B) :- follows(A, C), follows(D, A).;true;true
8;true;follows(C, E), recursion_accounttype(E, B).;true;true
8;true,false;follows(C, A).;true;true
8;false;recursion_accounttype(F, B).;true;true
8;false,false;follows(H, A), follows(I, H).;true;true
9;;accounttype(A, B) :- follows(D, A).;true;true
9;true;follows(E, D), recursion_accounttype(E, B).;true;true
9;true,false;follows(A, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( tweets(E, D), recursion_accounttype(E, B) )
%   | | then return 0.8258908705833826;  // std dev = 0.177, 31.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=30 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return 0.8581489350995123;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then if ( follows(G, A), follows(F, H) )
%   | | then return 0.6914822684328455;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0.6914822684328455;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else if ( follows(I, A) )
%   | | then if ( follows(I, J), follows(J, A) )
%   | | | then return -0.12430720525136485;  // std dev = 1.402, 114.000 (wgt'ed) examples reached here.  /* #neg=112 #pos=2 */
%   | | | else return 0.006797583748160992;  // std dev = 3.060, 74.000 (wgt'ed) examples reached here.  /* #neg=63 #pos=11 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.10814893509951237;  // std dev = 2.449, 32.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=8 */
%   | | | else return 0.04862512557570276;  // std dev = 1.799, 21.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=4 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.7040963985235682;  // std dev = 0.137, 52.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=51 */
%   | else if ( follows(E, A), tweets(A, F) )
%   | | then return 0.32328123895077415;  // std dev = 0.495, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | | else return 0.7518526675222027;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(A, H) )
%   | | then return 0.7194734122109544;  // std dev = 2.11e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.6083623010998431;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( follows(I, A), follows(J, I) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.8596730719760063;  // std dev = 0.020, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return -0.13167936349645093;  // std dev = 0.092, 178.000 (wgt'ed) examples reached here.  /* #neg=178 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.16498151846216683;  // std dev = 2.331, 25.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=8 */
%   | | | else return 0.07434835213727799;  // std dev = 1.764, 18.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=4 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), tweets(A, E) )
%   | | then if ( follows(A, F), follows(F, D) )
%   | | | then return 0.4996473908029896;  // std dev = 1.365, 30.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=28 */
%   | | | else return 0.5641636319704222;  // std dev = 0.010, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.5590224220508042;  // std dev = 0.010, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.4317271442274768;  // std dev = 1.201, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | | else return 0.0590506288111294;  // std dev = 1.216, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | else if ( follows(I, A) )
%   | | | then return -0.05995471132271688;  // std dev = 2.928, 185.000 (wgt'ed) examples reached here.  /* #neg=172 #pos=13 */
%   | | | else return 0.06958389702918223;  // std dev = 3.007, 51.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=12 */
%   else if ( follows(J, A), recursion_accounttype(J, B) )
%   | then return 0.5826080038940759;  // std dev = 3.65e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return -0.11344886804042177;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, C) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return 0.41137748639300925;  // std dev = 0.982, 43.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=42 */
%   | | | else return 0.31336416436143066;  // std dev = 0.923, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else return 0.5520599801552927;  // std dev = 0.123, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.5259617951661062;  // std dev = 0.137, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.43084419979200206;  // std dev = 0.036, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.6637176894495412;  // std dev = 0.944, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | | else return -0.11115626230435767;  // std dev = 0.089, 149.000 (wgt'ed) examples reached here.  /* #neg=149 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.133287871738178;  // std dev = 2.192, 22.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=7 */
%   | | | else return 0.026763455818206886;  // std dev = 1.994, 24.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=5 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.3384549106194092;  // std dev = 0.077, 51.000 (wgt'ed) examples reached here.  /* #pos=51 */
%   | else if ( follows(E, A), tweets(A, F) )
%   | | then return 0.1503129999285683;  // std dev = 1.040, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else return 0.3966526735183822;  // std dev = 0.114, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(G, A), tweets(G, H) )
%   | then if ( follows(A, I), follows(G, I) )
%   | | then if ( follows(J, G), recursion_accounttype(J, B) )
%   | | | then return 0.4866649050805838;  // std dev = 0.471, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return -0.10139196411071026;  // std dev = 0.092, 169.000 (wgt'ed) examples reached here.  /* #neg=169 */
%   | | else if ( recursion_accounttype(G, B) )
%   | | | then return 0.225158351372154;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return -0.020080184972099326;  // std dev = 1.525, 43.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=6 */
%   | else if ( recursion_accounttype(K, B) )
%   | | then return 0.8046796515224383;  // std dev = 0.050, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return -0.1932977569741808;  // std dev = 0.018, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then return 0.2646040989011189;  // std dev = 0.125, 57.000 (wgt'ed) examples reached here.  /* #pos=57 */
%   | else return 0.17688799484933704;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else if ( follows(A, E), follows(E, A) )
%   | then if ( tweets(E, F) )
%   | | then if ( tweets(A, G) )
%   | | | then return -0.0330488584271159;  // std dev = 2.017, 130.000 (wgt'ed) examples reached here.  /* #neg=117 #pos=13 */
%   | | | else return -0.01905699585276819;  // std dev = 1.102, 34.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=5 */
%   | | else return -0.09799264340655493;  // std dev = 0.007, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(A, I), follows(I, H) )
%   | | | then return 0.07122894597129663;  // std dev = 0.419, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return -0.0948528941612211;  // std dev = 0.040, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.3077453802055372;  // std dev = 0.082, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.05142851917073572;  // std dev = 2.418, 45.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=12 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then return 0.21862089308230911;  // std dev = 0.140, 58.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=57 */
%   | else return 0.05385322922870337;  // std dev = 0.865, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(E, A) )
%   | then if ( follows(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return 0.22906382593087388;  // std dev = 0.129, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.5215848525056718;  // std dev = 0.210, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return -0.09006050158354105;  // std dev = 0.084, 161.000 (wgt'ed) examples reached here.  /* #neg=161 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.624852707727641;  // std dev = 0.042, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.18162134393473814;  // std dev = 0.046, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.3151183410823088;  // std dev = 0.889, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.03182479408688605;  // std dev = 1.029, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( follows(A, E) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.136706911157719;  // std dev = 1.376, 41.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=39 */
%   | | | else return 0.3694829348183018;  // std dev = 1.29e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.036082576248981035;  // std dev = 0.722, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.2033638281807793;  // std dev = 0.164, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else if ( follows(A, F), follows(F, A) )
%   | then return -0.043358831965155595;  // std dev = 0.129, 175.000 (wgt'ed) examples reached here.  /* #neg=159 #pos=16 */
%   | else if ( follows(A, G) )
%   | | then if ( tweets(A, H) )
%   | | | then return -0.03744487516747208;  // std dev = 1.764, 47.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=10 */
%   | | | else return -0.0068796058277843086;  // std dev = 1.341, 23.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=5 */
%   | | else if ( follows(I, A), recursion_accounttype(I, B) )
%   | | | then return 0.21230724543509227;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.0768749040088956;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(D, A) )
%   then if ( follows(C, E), recursion_accounttype(E, B) )
%   | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then if ( follows(A, G), follows(F, G) )
%   | | | then return 0.14309244470908083;  // std dev = 0.986, 53.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=52 */
%   | | | else return -0.03393366162899632;  // std dev = 0.887, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | | then return 0.2792631224378436;  // std dev = 0.116, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.40484919411472053;  // std dev = 0.205, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return -0.07851333091260118;  // std dev = 0.025, 159.000 (wgt'ed) examples reached here.  /* #neg=158 #pos=1 */
%   else if ( recursion_accounttype(I, B) )
%   | then if ( follows(A, J), recursion_accounttype(J, B) )
%   | | then return 0.00852537630694472;  // std dev = 0.869, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( follows(A, K) )
%   | | | then return 0.5339968943954064;  // std dev = 0.252, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.17896421036634813;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return -0.13500697551106156;  // std dev = 0.042, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.103028029751218;  // std dev = 0.208, 67.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=64 */
%   | | else return 0.2856895582025828;  // std dev = 0.064, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else return -0.06934123555507495;  // std dev = 0.034, 159.000 (wgt'ed) examples reached here.  /* #neg=157 #pos=2 */
%   else if ( follows(A, F), follows(F, G) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return -0.16374013842582144;  // std dev = 0.818, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.22490399934624547;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else return -0.13525877324523766;  // std dev = 0.030, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.44096259361481005;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.19314154523060137;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.037399526417478395;  // std dev = 0.270, 14.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=3 */


Results
   AUC ROC   = 0.992371
   AUC PR    = 0.445134
   CLL	      = -0.108551
   Precision = 0.335648 at threshold = 0.5
   Recall    = 0.929487
   F1        = 0.493197


Total learning time: 16.289 seconds
Total inference time: 83.18299999999999 seconds
AUC ROC: 0.992371


Results scoring model
   AUC ROC   = 0.993514
   AUC PR    = 0.401163
   CLL	      = -0.109237
   Precision = 0.337931 at threshold = 0.5
   Recall    = 0.98
   F1        = 0.502564


Total scoring time: 64.109 seconds
Refined model CLL: -0.109237


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.992371
   AUC PR    = 0.445134
   CLL	      = -0.108551
   Precision = 0.335648 at threshold = 0.5
   Recall    = 0.929487
   F1        = 0.493197


Total learning time: 121.954 seconds
Total inference time: 83.18299999999999 seconds
AUC ROC: 0.992371
Total revision time: 121.954
Best scored revision CLL: -0.109237


Dataset: 7_yeast_twitter, Fold: 2, Type: Transfer (trRDN-B), Time: 00:31:28
{'AUC ROC': 0.992371, 'AUC PR': 0.445134, 'CLL': -0.108551, 'Precision': [0.335648, 0.5], 'Recall': 0.929487, 'F1': 0.493197, 'Learning time': 121.954, 'Inference time': 83.18299999999999, 'parameter_0.8': {'AUC ROC': 0.99275, 'AUC PR': 0.405071, 'CLL': -0.12333, 'Precision': [0.339332, 0.5], 'Recall': 0.846154, 'F1': 0.484404, 'Learning time': 7.541, 'Inference time': 45.016}}


Amount of data: 1.0
******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;false;true
0;false;interaction(A, D), interaction(D, D).;true;true
0;false,true;interaction(E, A), interaction(D, E).;true;true
0;false,true,true;interaction(A, A).;false;false
0;false,true,false;enzyme(D, F), phenotype(A, G).;false;false
0;false,false;interaction(H, A), recursion_proteinclass(H, B).;true;true
0;false,false,true;interaction(A, I), interaction(J, H).;false;false
0;false,false,false;interaction(K, A), complex(A, L).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
1;true;interaction(C, C).;false;true
1;true,false;interaction(A, D), interaction(D, D).;true;false
1;true,false,true;complex(C, E).;false;false
1;false;interaction(A, F), recursion_proteinclass(F, B).;false;true
1;false,false;interaction(A, G), interaction(G, H).;true;true
1;false,false,true;recursion_proteinclass(H, B).;false;false
1;false,false,false;interaction(I, A), location(I, J).;false;false
2;;proteinclass(A, B) :- interaction(C, A), enzyme(C, D).;true;true
2;true;location(A, E), location(C, E).;false;true
2;true,false;interaction(A, F), phenotype(A, G).;true;true
2;true,false,true;interaction(F, A), interaction(H, C).;false;false
2;true,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;false;interaction(A, J), recursion_proteinclass(J, B).;false;true
2;false,false;interaction(A, K), enzyme(K, L).;false;true
2;false,false,false;interaction(M, A), interaction(A, M).;false;false
3;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
3;true;interaction(D, C), interaction(C, D).;true;false
3;true,true;recursion_proteinclass(D, B).;false;false
3;false;interaction(A, E), recursion_proteinclass(E, B).;true;true
3;false,true;interaction(E, F), interaction(F, F).;false;false
3;false,false;interaction(A, G), interaction(H, A).;true;true
3;false,false,true;complex(A, I), complex(G, I).;false;false
3;false,false,false;enzyme(A, J), complex(A, K).;false;false
4;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
4;false;interaction(A, D), complex(D, E).;true;true
4;false,true;interaction(F, A), interaction(F, D).;true;true
4;false,true,true;interaction(D, G), recursion_proteinclass(G, B).;false;false
4;false,true,false;recursion_proteinclass(D, B).;false;false
4;false,false;enzyme(A, H), location(A, I).;true;true
4;false,false,true;enzyme(J, H), recursion_proteinclass(J, B).;false;false
4;false,false,false;complex(A, K), interaction(L, A).;false;false
5;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;false;true
5;false;interaction(D, A), interaction(A, D).;true;true
5;false,true;interaction(D, D).;true;true
5;false,true,true;interaction(A, A).;false;false
5;false,true,false;phenotype(D, E), complex(D, F).;false;false
5;false,false;enzyme(A, G), interaction(A, H).;true;true
5;false,false,true;enzyme(H, I).;false;false
5;false,false,false;interaction(A, J), interaction(J, J).;false;false
6;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
6;false;interaction(A, D), phenotype(A, E).;true;true
6;false,true;location(D, F), location(A, F).;true;true
6;false,true,true;interaction(D, G), recursion_proteinclass(G, B).;false;false
6;false,true,false;complex(D, H), interaction(D, D).;false;false
6;false,false;interaction(A, I), interaction(I, A).;true;true
6;false,false,true;interaction(I, I).;false;false
6;false,false,false;location(A, J).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
7;false;interaction(D, A), interaction(A, D).;true;true
7;false,true;complex(D, E).;true;true
7;false,true,true;complex(A, F), enzyme(D, G).;false;false
7;false,true,false;interaction(D, D), complex(A, H).;false;false
7;false,false;enzyme(A, I), interaction(J, A).;true;true
7;false,false,true;enzyme(J, K), phenotype(J, L).;false;false
7;false,false,false;interaction(A, M), recursion_proteinclass(M, B).;false;false
8;;proteinclass(A, B) :- interaction(C, A), interaction(A, D).;true;true
8;true;interaction(E, C), recursion_proteinclass(E, B).;false;true
8;true,false;interaction(A, C).;false;false
8;false;location(A, F).;true;true
8;false,true;location(G, F), recursion_proteinclass(G, B).;true;false
8;false,true,true;interaction(H, A), interaction(H, G).;false;false
8;false,false;interaction(A, I), interaction(I, J).;false;true
8;false,false,false;interaction(A, K).;false;false
9;;proteinclass(A, B) :- interaction(C, A), interaction(C, C).;true;true
9;true;recursion_proteinclass(C, B), interaction(A, C).;false;false
9;false;enzyme(A, D), interaction(A, E).;true;true
9;false,true;interaction(E, F), recursion_proteinclass(F, B).;false;true
9;false,true,false;interaction(E, A).;false;false
9;false,false;interaction(G, A), phenotype(A, H).;true;true
9;false,false,true;interaction(I, G), recursion_proteinclass(I, B).;false;false
9;false,false,false;interaction(A, J), enzyme(J, K).;false;false


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.8581489350995123;  // std dev = 0.000, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else if ( follows(D, A), follows(D, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), follows(E, G) )
%   | | | then return 0.7331489350995123;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, H), tweets(A, I) )
%   | | | then return -0.03990931732767225;  // std dev = 4.343, 206.000 (wgt'ed) examples reached here.  /* #neg=185 #pos=21 */
%   | | | else return -0.004351064900487661;  // std dev = 3.080, 80.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=11 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(D, A), follows(D, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.7217028851322145;  // std dev = 0.062, 77.000 (wgt'ed) examples reached here.  /* #pos=77 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then return 0.7194734122109542;  // std dev = 7.30e-08, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(F, A), follows(G, F) )
%   | | then if ( recursion_accounttype(G, B) )
%   | | | then return 0.8620859382410953;  // std dev = 0.007, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.1383207190990501;  // std dev = 0.029, 220.000 (wgt'ed) examples reached here.  /* #neg=220 */
%   | | else if ( follows(A, H) )
%   | | | then return 0.11093317289592264;  // std dev = 3.571, 68.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=17 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, A) )
%   | then if ( follows(A, D), follows(C, E) )
%   | | then return 0.10842933886298545;  // std dev = 5.615, 275.000 (wgt'ed) examples reached here.  /* #neg=184 #pos=91 */
%   | | else return 0.09883848027014831;  // std dev = 1.385, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.17312971023300106;  // std dev = 3.565, 60.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=21 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.4442553256351735;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( follows(H, A) )
%   | | then return -0.12535462652186233;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, C) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then return 0.4901067006280359;  // std dev = 1.685, 74.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=71 */
%   | | else return 0.04340279921773568;  // std dev = 0.729, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | else return 0.5186896683720693;  // std dev = 0.019, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(F, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.4896305880806475;  // std dev = 0.174, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(G, A), follows(A, H) )
%   | | then if ( tweets(A, I), tweets(G, I) )
%   | | | then return -0.0745921214484111;  // std dev = 2.681, 156.000 (wgt'ed) examples reached here.  /* #neg=145 #pos=11 */
%   | | | else return -0.07468854859295122;  // std dev = 1.620, 51.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=4 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.03703310492384136;  // std dev = 2.638, 47.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=9 */
%   | | | else return 0.20153329385568106;  // std dev = 2.225, 21.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=8 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.3838667601150058;  // std dev = 1.426, 79.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=77 */
%   else if ( follows(D, A), tweets(D, E) )
%   | then if ( follows(A, F), follows(D, F) )
%   | | then if ( follows(G, D), recursion_accounttype(G, B) )
%   | | | then return 0.5906929998311045;  // std dev = 0.630, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.1227425980689016;  // std dev = 0.532, 170.000 (wgt'ed) examples reached here.  /* #neg=169 #pos=1 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0.32926565533401403;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.0034997549176203186;  // std dev = 1.804, 40.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=6 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then return 0.8055922858387313;  // std dev = 0.065, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( tweets(A, I), follows(A, J) )
%   | | | then return -0.17676891680196266;  // std dev = 0.053, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | | else return -0.211025522270467;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.31154288584783807;  // std dev = 0.240, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(D, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(D, E) )
%   | | | then return -0.042276426164622766;  // std dev = 2.982, 202.000 (wgt'ed) examples reached here.  /* #neg=180 #pos=22 */
%   | | | else return -0.11236947880867713;  // std dev = 0.010, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( follows(F, A) )
%   | | then return -0.10389592271730337;  // std dev = 0.095, 26.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=1 */
%   | | else if ( follows(G, A), follows(G, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.1108281876364412;  // std dev = 2.797, 57.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=21 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.24340877672520553;  // std dev = 1.364, 79.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=77 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0.42098591176163624;  // std dev = 1.202, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | else if ( tweets(D, F), follows(D, D) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10911091008788158;  // std dev = 0.069, 217.000 (wgt'ed) examples reached here.  /* #neg=217 */
%   | else if ( follows(G, A), follows(A, G) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.0663833265304846;  // std dev = 0.373, 55.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=17 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1398543710148172;  // std dev = 2.539, 84.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=77 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( tweets(D, E) )
%   | | then if ( tweets(A, F) )
%   | | | then return -0.04696106492890594;  // std dev = 2.220, 154.000 (wgt'ed) examples reached here.  /* #neg=139 #pos=15 */
%   | | | else return -0.0462004080065422;  // std dev = 1.081, 39.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=4 */
%   | | else if ( follows(D, D), tweets(A, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.030213582905930403;  // std dev = 0.331, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | else if ( follows(A, H) )
%   | | then return 0.012120850928792195;  // std dev = 0.321, 80.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=21 */
%   | | else if ( follows(I, A), recursion_accounttype(I, B) )
%   | | | then return -0.127595187870746;  // std dev = 1.477, 11.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | | | else return -0.09556533724120457;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(D, A) )
%   then if ( follows(C, E), recursion_accounttype(E, B) )
%   | then return 0.2314155278865626;  // std dev = 1.943, 98.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=96 */
%   | else if ( follows(C, A) )
%   | | then return -0.09567090353884843;  // std dev = 0.051, 189.000 (wgt'ed) examples reached here.  /* #neg=189 */
%   | | else return -0.07018266072600483;  // std dev = 0.334, 12.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=1 */
%   else if ( recursion_accounttype(F, B) )
%   | then if ( follows(A, G), follows(F, G) )
%   | | then return 0.529666961513097;  // std dev = 0.724, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else return 0.050578822827087526;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then return -0.08761856559908619;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | else if ( follows(J, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.19378314439274544;  // std dev = 0.080, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(C, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0.14352243959879757;  // std dev = 2.985, 110.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=103 */
%   | | else if ( follows(A, D) )
%   | | | then return -0.08768574692639867;  // std dev = 0.047, 179.000 (wgt'ed) examples reached here.  /* #neg=179 */
%   | | | else return -0.06974515960686482;  // std dev = 0.399, 33.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=2 */
%   | else if ( follows(A, F) )
%   | | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | | then return 0.38542463773546126;  // std dev = 0.516, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.021813520209929205;  // std dev = 1.696, 42.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=10 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.992351
   AUC PR    = 0.378857
   CLL	      = -0.127591
   Precision = 0.341837 at threshold = 0.5
   Recall    = 0.858974
   F1        = 0.489051


Total learning time: 8.789 seconds
Total inference time: 40.889 seconds
AUC ROC: 0.992351


Results scoring model
   AUC ROC   = 0.992791
   AUC PR    = 0.357035
   CLL	      = -0.12442
   Precision = 0.33913 at threshold = 0.5
   Recall    = 0.928571
   F1        = 0.496815


Total scoring time: 40.63 seconds
Parameter learned model CLL: -0.12442


Structure after Parameter Learning
[['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(D, A), follows(D, D)', 'false,false': 'follows(A, E), recursion_accounttype(E, B)', 'false,false,true': 'follows(F, A), follows(E, G)', 'false,false,false': 'follows(A, H), tweets(A, I)'}, {'true': [0.0, 0, 82], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.935, 1, 7], 'false,false,true,false': [0.0, 0, 5], 'false,false,false,true': [4.343, 185, 21], 'false,false,false,false': [3.08, 69, 11]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, C)', 'true,false': 'follows(D, A), follows(D, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,false': 'follows(F, A), follows(G, F)', 'false,false,true': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(A, H)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [0.062, 0, 77], 'false,true': [7.3e-08, 0, 17], 'false,false,true,true': [0.007, 0, 15], 'false,false,true,false': [0.029, 220, 0], 'false,false,false,true': [3.571, 51, 17], 'false,false,false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, A)', 'true,true': 'follows(A, D), follows(C, E)', 'true,false': 'follows(F, A), recursion_accounttype(F, B)', 'false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false': 'follows(H, A)'}, {'true,true,true': [5.615, 184, 91], 'true,true,false': [1.385, 12, 6], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.565, 39, 21], 'false,true': [0.943, 1, 8], 'false,false,true': [0.0, 16, 0], 'false,false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D), follows(D, C)', 'true,true': 'recursion_accounttype(D, B)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(F, F)', 'false,false': 'follows(G, A), follows(A, H)', 'false,false,true': 'tweets(A, I), tweets(G, I)', 'false,false,false': 'tweets(A, J)'}, {'true,true,true': [1.685, 3, 71], 'true,true,false': [0.729, 1, 1], 'true,false': [0.019, 0, 5], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.174, 0, 17], 'false,false,true,true': [2.681, 145, 11], 'false,false,true,false': [1.62, 47, 4], 'false,false,false,true': [2.638, 38, 9], 'false,false,false,false': [2.225, 13, 8]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A), tweets(D, E)', 'false,true': 'follows(A, F), follows(D, F)', 'false,true,true': 'follows(G, D), recursion_accounttype(G, B)', 'false,true,false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(H, B)', 'false,false,false': 'tweets(A, I), follows(A, J)'}, {'true': [1.426, 2, 77], 'false,true,true,true': [0.63, 0, 17], 'false,true,true,false': [0.532, 169, 1], 'false,true,false,true': [0.0, 0, 8], 'false,true,false,false': [1.804, 34, 6], 'false,false,true': [0.065, 0, 17], 'false,false,false,true': [0.053, 19, 0], 'false,false,false,false': [0.0, 15, 0]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(D, D)', 'false,true,false': 'tweets(D, E)', 'false,false': 'follows(F, A)', 'false,false,false': 'follows(G, A), follows(G, G)'}, {'true': [0.24, 0, 82], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [2.982, 180, 22], 'false,true,false,false': [0.01, 5, 0], 'false,false,true': [0.095, 25, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.797, 36, 21]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(D, F), follows(D, D)', 'false,false': 'follows(G, A), follows(A, G)'}, {'true': [1.364, 2, 77], 'false,true,true': [1.202, 0, 32], 'false,true,false,true': [0.0, 0, 0], 'false,true,false,false': [0.069, 217, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.373, 38, 17]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'tweets(D, E)', 'false,true,true': 'tweets(A, F)', 'false,true,false': 'follows(D, D), tweets(A, G)', 'false,false': 'follows(A, H)', 'false,false,false': 'follows(I, A), recursion_accounttype(I, B)'}, {'true': [2.539, 7, 77], 'false,true,true,true': [2.22, 139, 15], 'false,true,true,false': [1.081, 35, 4], 'false,true,false,true': [0.0, 0, 0], 'false,true,false,false': [0.331, 5, 1], 'false,false,true': [0.321, 59, 21], 'false,false,false,true': [1.477, 3, 8], 'false,false,false,false': [0.0, 16, 0]}], ['accounttype(A, B)', {'': 'follows(A, C), follows(D, A)', 'true': 'follows(C, E), recursion_accounttype(E, B)', 'true,false': 'follows(C, A)', 'false': 'recursion_accounttype(F, B)', 'false,true': 'follows(A, G), follows(F, G)', 'false,false': 'follows(H, A), follows(I, H)', 'false,false,false': 'follows(J, A)'}, {'true,true': [1.943, 2, 96], 'true,false,true': [0.051, 189, 0], 'true,false,false': [0.334, 11, 1], 'false,true,true': [0.724, 0, 21], 'false,true,false': [0.943, 1, 8], 'false,false,true': [0.0, 20, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.08, 38, 0]}], ['accounttype(A, B)', {'': 'follows(A, C), follows(C, C)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'follows(A, D)', 'false,false': 'follows(A, F)', 'false,false,true': 'follows(F, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true,true': [2.985, 7, 103], 'false,true,false,true': [0.047, 179, 0], 'false,true,false,false': [0.399, 31, 2], 'false,false,true,true': [0.516, 0, 11], 'false,false,true,false': [1.696, 32, 10], 'false,false,false': [0.0, 0, 0]}]]
[{'': [-6.932124251318051e-16, 0.12550195187973373], 'false': [nan, 0.12550195187973373], 'false,false': [0.07100591715976314, 0.09936916230622622], 'false,false,false': [0.09154962767461669, 0.11859374999999958], 'false,false,true': [0.10937499999999978, 0.0]}, {'': [4.970549506695802e-05, 0.1179024922636051], 'false': [3.134747363647501e-16, 0.09444864028400453], 'false,false': [0.0598078776614389, 0.18750452166785195], 'false,false,false': [0.18750452166785195, nan], 'false,false,true': [2.9039155761504767e-06, 3.778015163953667e-06], 'true': [nan, 4.970549506695802e-05], 'true,false': [nan, 4.9705495066773464e-05]}, {'': [0.13138200631711083, 0.11031010220175227], 'true': [0.11417638855625782, 0.21186458799823074], 'true,false': [nan, 0.21186458799823074], 'true,true': [0.1146647466492777, 0.1066290284956995], 'false': [0.09876543209876533, -3.469446951953614e-18], 'false,false': [-3.469446951953614e-18, nan]}, {'': [0.04651236361836645, 0.09553182051347062], 'false': [0.0017906451703546804, 0.08533644907371768], 'false,false': [0.0474004516985806, 0.18095348814161888], 'false,false,false': [0.1480783780677072, 0.23582766439909314], 'false,false,true': [0.04606715746621745, 0.051478756460827085], 'true': [0.04946715751838353, 7.275846404133368e-05], 'true,true': [0.03837071244673294, 0.2657424174115125], 'false,true': [nan, 0.0017906451703546804]}, {'': [0.025723439979708808, 0.08947637238754366], 'false': [0.05531210751860155, 0.22143099323161422], 'false,false': [0.00024546804120341355, 0.0003720223363640849], 'false,true': [0.04569878553617401, 0.08316244448904433], 'false,true,false': [-5.551115123125783e-17, 0.08133946367686351], 'false,true,true': [0.023327792636927015, 0.0016640346123769387], 'false,false,false': [0.00014799696693937472, -2.2204460492503132e-17]}, {'': [0.0007000586638618699, 0.06292343571430738], 'false': [0.04306005869794522, 0.1069929044942345], 'false,false': [0.008984024738300223, 0.13725572697292932], 'false,false,false': [nan, 0.13725572697292932], 'false,true': [nan, 0.04306005869794522], 'false,true,false': [0.044006762026415236, 1.8880566643458828e-05]}, {'': [0.023548097050646376, 0.05748073629004193], 'false': [0.03729349579878991, 0.1394313933427274], 'false,false': [nan, 0.1394313933427274], 'false,true': [0.04515271732833698, 2.174311020691382e-05], 'false,true,false': [nan, 2.1743110206915867e-05]}, {'': [0.07673919662283184, 0.055513851881086346], 'false': [0.03120251913613546, 0.1002199150137751], 'false,false': [0.10300949940056618, 0.08105576310481295], 'false,false,false': [0.19834710743801656, 0.0], 'false,true': [0.03159674718780362, 0.018254465577786594], 'false,true,true': [0.03200501916993968, 0.029984134603990135], 'false,true,false': [nan, 0.018254465577786594]}, {'': [0.03638019600712363, 0.10051358233790714], 'false': [0.09528965008534881, 0.0026562611376001943], 'false,true': [0.024942395833568578, 0.09876543209876543], 'true': [0.03850393835413844, 0.0006047544870753914], 'false,false': [0.0, 0.0001677699392724073], 'true,false': [1.3884895763610422e-05, 0.009300085134321697], 'false,false,false': [nan, 0.0001677699392724073]}, {'': [nan, 0.047107198899106674], 'false': [0.03992829155499637, 0.08656644678990147], 'false,false': [0.08656644678990147, nan], 'false,false,true': [0.024209335767996706, 0.06847784298904365], 'false,true': [0.08098249208764445, 0.0008032828645927218], 'false,true,false': [1.2400027829711778e-05, 0.0048214600035130315]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
0;false;follows(A, E), recursion_accounttype(E, B).;true;true
0;false,true;follows(F, A), follows(E, G).;true;true
1;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
1;false;follows(E, A), recursion_accounttype(E, B).;true;true
1;false,false;follows(F, A), follows(G, F).;true;true
1;false,false,true;recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
3;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
3;true;follows(C, D), follows(D, C).;true;true
3;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(D, A), tweets(D, E).;true;true
4;false,true;follows(A, F), follows(D, F).;true;true
4;false,true,true;follows(G, D), recursion_accounttype(G, B).;true;true
4;false,true,false;recursion_accounttype(D, B).;true;true
4;false,false;recursion_accounttype(H, B).;true;true
4;false,false,false;tweets(A, I), follows(A, J).;true;true
5;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
5;false;follows(A, D), follows(D, A).;true;true
5;false,true;tweets(D, E).;true;true
6;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
6;false;follows(D, A).;true;true
6;false,true;follows(E, D), recursion_accounttype(E, B).;true;true
7;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
7;false;follows(A, D), follows(D, A).;true;true
7;false,false;follows(A, H).;true;true
7;false,false,false;follows(I, A), recursion_accounttype(I, B).;true;true
8;;accounttype(A, B) :- follows(A, C), follows(D, A).;true;true
8;true;follows(C, E), recursion_accounttype(E, B).;true;true
8;true,false;follows(C, A).;true;true
8;false;recursion_accounttype(F, B).;true;true
8;false,false;follows(H, A), follows(I, H).;true;true
9;;accounttype(A, B) :- follows(D, A).;true;true
9;true;follows(E, D), recursion_accounttype(E, B).;true;true
9;true,false;follows(A, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( tweets(E, D), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return 0.8331489350995117;  // std dev = 0.987, 40.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=39 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else return 0.8581489350995123;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.12262029566971866;  // std dev = 1.715, 156.000 (wgt'ed) examples reached here.  /* #neg=153 #pos=3 */
%   | | | else return 0.027163019606554626;  // std dev = 3.158, 71.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=12 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.08672036367094095;  // std dev = 2.484, 35.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=8 */
%   | | | else return 0.1308762078267851;  // std dev = 2.558, 33.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=9 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then return 0.7007687996605209;  // std dev = 0.151, 43.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=42 */
%   | | else return 0.7196915857453259;  // std dev = 0.005, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else if ( follows(F, A), tweets(A, G) )
%   | | then return 0.5766162693538115;  // std dev = 0.350, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return 0.7194734122109544;  // std dev = 2.98e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.7194734122109542;  // std dev = 7.30e-08, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(I, A), follows(J, I) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.8583341672557299;  // std dev = 0.027, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.13324539913005745;  // std dev = 0.119, 208.000 (wgt'ed) examples reached here.  /* #neg=208 */
%   | | else if ( follows(K, A) )
%   | | | then return -0.14518987739569125;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.13716340815670858;  // std dev = 3.467, 58.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then return 0.5643066433986208;  // std dev = 0.066, 63.000 (wgt'ed) examples reached here.  /* #pos=63 */
%   | | else if ( follows(D, F), follows(A, F) )
%   | | | then return 0.2697879045998265;  // std dev = 1.432, 10.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=7 */
%   | | | else return 0.5560024762902428;  // std dev = 0.004, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(A, G), follows(G, A) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6341864577222306;  // std dev = 0.968, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | | else return -0.11778932165145968;  // std dev = 0.094, 177.000 (wgt'ed) examples reached here.  /* #neg=177 */
%   | | else if ( follows(I, A), recursion_accounttype(I, B) )
%   | | | then return 0.3553664367462845;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.11764704220627416;  // std dev = 3.459, 59.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=17 */
%   else if ( follows(J, A), recursion_accounttype(J, B) )
%   | then return 0.4442553256351735;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else return -0.11346102589529612;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, C) )
%   | then if ( follows(A, E), follows(E, A) )
%   | | then return 0.41403407900250816;  // std dev = 0.120, 71.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=70 */
%   | | else return 0.1459949621991056;  // std dev = 0.882, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.2632499207351761;  // std dev = 0.929, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G), follows(G, A) )
%   | | then return 0.26277058294216565;  // std dev = 0.743, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0.4521052587470811;  // std dev = 0.036, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.5768785185059312;  // std dev = 0.056, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.1079876363368668;  // std dev = 0.141, 199.000 (wgt'ed) examples reached here.  /* #neg=199 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.0612984291055367;  // std dev = 2.449, 32.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=8 */
%   | | | else return 0.21353628867836602;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=9 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( follows(E, F), follows(F, A) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.3065481508409617;  // std dev = 0.988, 48.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=47 */
%   | | | else return -3.649346204230112E-5;  // std dev = 0.794, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.3706800052088022;  // std dev = 0.152, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( tweets(A, G) )
%   | | then return 0.1530383494893531;  // std dev = 0.893, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0.18633588057038913;  // std dev = 1.327, 14.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=12 */
%   | | | else return 0.343213808181775;  // std dev = 0.029, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(I, A), tweets(I, J) )
%   | then return -0.040706239954869376;  // std dev = 0.166, 257.000 (wgt'ed) examples reached here.  /* #neg=225 #pos=32 */
%   | else if ( recursion_accounttype(K, B) )
%   | | then return 0.7842260744153794;  // std dev = 0.068, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.21346049383307694;  // std dev = 0.016, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(D, A) )
%   | | then return 0.24732329600485886;  // std dev = 0.137, 53.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=52 */
%   | | else return 0.2901229204415646;  // std dev = 0.082, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return 0.35152808453978124;  // std dev = 0.036, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else if ( follows(A, F), follows(F, A) )
%   | then if ( tweets(F, G) )
%   | | then if ( follows(A, H), recursion_accounttype(H, B) )
%   | | | then return 0.27907679895590276;  // std dev = 0.064, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.05363049864435813;  // std dev = 2.004, 205.000 (wgt'ed) examples reached here.  /* #neg=190 #pos=15 */
%   | | else return -0.09854060200789942;  // std dev = 0.013, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( follows(I, A) )
%   | | then return -0.08744907255901156;  // std dev = 0.102, 24.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=1 */
%   | | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.14144782055294633;  // std dev = 0.941, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.09364601126681864;  // std dev = 2.696, 50.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=17 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.22349564033633193;  // std dev = 0.123, 65.000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else if ( tweets(A, E) )
%   | | then return 0.18895118387255935;  // std dev = 0.307, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | else return -0.010347458472282689;  // std dev = 0.825, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else if ( follows(F, A) )
%   | then if ( follows(G, F), recursion_accounttype(G, B) )
%   | | then return 0.34014653992592103;  // std dev = 0.148, 33.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   | | else return -0.0893316157554873;  // std dev = 0.121, 216.000 (wgt'ed) examples reached here.  /* #neg=216 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.4280922280393212;  // std dev = 1.254, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   | | | else return -0.196498044855461;  // std dev = 0.055, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.021816523914228992;  // std dev = 1.210, 12.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=3 */
%   | | | else return 0.036390088801513495;  // std dev = 1.466, 16.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=5 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.14740751075383354;  // std dev = 1.388, 55.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=53 */
%   | | | else return -0.025022175620421694;  // std dev = 0.833, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.20153913675097418;  // std dev = 0.092, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return 0.28619733222401705;  // std dev = 0.149, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(A, F), follows(F, A) )
%   | then return -0.04483228481600087;  // std dev = 0.131, 208.000 (wgt'ed) examples reached here.  /* #neg=188 #pos=20 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0.22512212085608585;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.012597811523264035;  // std dev = 2.615, 79.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=17 */
%   | | else if ( follows(I, A), recursion_accounttype(I, B) )
%   | | | then return 0.09888459186895926;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return -0.07622343380202751;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(D, A) )
%   then if ( follows(C, E), recursion_accounttype(E, B) )
%   | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0.16853580684552188;  // std dev = 0.195, 73.000 (wgt'ed) examples reached here.  /* #pos=73 */
%   | | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return 0.20650011716725336;  // std dev = 0.040, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.38528054223242936;  // std dev = 0.055, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.07852621158473158;  // std dev = 0.020, 204.000 (wgt'ed) examples reached here.  /* #neg=203 #pos=1 */
%   else if ( recursion_accounttype(H, B) )
%   | then if ( follows(A, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.23439250264656913;  // std dev = 0.063, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.5460423051553827;  // std dev = 0.209, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0.19406093846524963;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(J, A), follows(K, J) )
%   | | then return -0.07102666146844497;  // std dev = 8.33e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else return -0.17872843332613508;  // std dev = 0.144, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, A), tweets(A, F) )
%   | | | then return 0.10570971587751303;  // std dev = 1.394, 54.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=52 */
%   | | | else return 0.15009842835919143;  // std dev = 0.061, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else return 0.23147353774419369;  // std dev = 0.065, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | else return -0.0710188574514714;  // std dev = 0.028, 222.000 (wgt'ed) examples reached here.  /* #neg=220 #pos=2 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.3291461748747276;  // std dev = 0.076, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return -0.13551614959385103;  // std dev = 0.055, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.17664815341067872;  // std dev = 1.089, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return -0.15623734327231595;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return -0.0572906302224339;  // std dev = 0.311, 22.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=6 */


Results
   AUC ROC   = 0.994065
   AUC PR    = 0.364394
   CLL	      = -0.112101
   Precision = 0.346604 at threshold = 0.5
   Recall    = 0.948718
   F1        = 0.507719


Total learning time: 17.203 seconds
Total inference time: 58.59 seconds
AUC ROC: 0.994065


Results scoring model
   AUC ROC   = 0.99308
   AUC PR    = 0.371198
   CLL	      = -0.111368
   Precision = 0.341463 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.509091


Total scoring time: 54.736 seconds
Refined model CLL: -0.111368


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.994065
   AUC PR    = 0.364394
   CLL	      = -0.112101
   Precision = 0.346604 at threshold = 0.5
   Recall    = 0.948718
   F1        = 0.507719


Total learning time: 121.358 seconds
Total inference time: 58.59 seconds
AUC ROC: 0.994065
Total revision time: 121.358
Best scored revision CLL: -0.111368


Dataset: 7_yeast_twitter, Fold: 2, Type: Transfer (trRDN-B), Time: 00:35:10
{'AUC ROC': 0.994065, 'AUC PR': 0.364394, 'CLL': -0.112101, 'Precision': [0.346604, 0.5], 'Recall': 0.948718, 'F1': 0.507719, 'Learning time': 121.358, 'Inference time': 58.59, 'parameter_1.0': {'AUC ROC': 0.992351, 'AUC PR': 0.378857, 'CLL': -0.127591, 'Precision': [0.341837, 0.5], 'Recall': 0.858974, 'F1': 0.489051, 'Learning time': 8.789, 'Inference time': 40.889}}


Starting fold 1

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos	 examples: 126
Target test neg examples: 16128

Amount of data: 0.2
******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;false;true
0;false;interaction(A, D), interaction(D, D).;true;true
0;false,true;interaction(E, A), interaction(D, E).;true;true
0;false,true,true;interaction(A, A).;false;false
0;false,true,false;enzyme(D, F), phenotype(A, G).;false;false
0;false,false;interaction(H, A), recursion_proteinclass(H, B).;true;true
0;false,false,true;interaction(A, I), interaction(J, H).;false;false
0;false,false,false;interaction(K, A), complex(A, L).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
1;true;interaction(C, C).;false;true
1;true,false;interaction(A, D), interaction(D, D).;true;false
1;true,false,true;complex(C, E).;false;false
1;false;interaction(A, F), recursion_proteinclass(F, B).;false;true
1;false,false;interaction(A, G), interaction(G, H).;true;true
1;false,false,true;recursion_proteinclass(H, B).;false;false
1;false,false,false;interaction(I, A), location(I, J).;false;false
2;;proteinclass(A, B) :- interaction(C, A), enzyme(C, D).;true;true
2;true;location(A, E), location(C, E).;false;true
2;true,false;interaction(A, F), phenotype(A, G).;true;true
2;true,false,true;interaction(F, A), interaction(H, C).;false;false
2;true,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;false;interaction(A, J), recursion_proteinclass(J, B).;false;true
2;false,false;interaction(A, K), enzyme(K, L).;false;true
2;false,false,false;interaction(M, A), interaction(A, M).;false;false
3;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
3;true;interaction(D, C), interaction(C, D).;true;false
3;true,true;recursion_proteinclass(D, B).;false;false
3;false;interaction(A, E), recursion_proteinclass(E, B).;true;true
3;false,true;interaction(E, F), interaction(F, F).;false;false
3;false,false;interaction(A, G), interaction(H, A).;true;true
3;false,false,true;complex(A, I), complex(G, I).;false;false
3;false,false,false;enzyme(A, J), complex(A, K).;false;false
4;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
4;false;interaction(A, D), complex(D, E).;true;true
4;false,true;interaction(F, A), interaction(F, D).;true;true
4;false,true,true;interaction(D, G), recursion_proteinclass(G, B).;false;false
4;false,true,false;recursion_proteinclass(D, B).;false;false
4;false,false;enzyme(A, H), location(A, I).;true;true
4;false,false,true;enzyme(J, H), recursion_proteinclass(J, B).;false;false
4;false,false,false;complex(A, K), interaction(L, A).;false;false
5;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;false;true
5;false;interaction(D, A), interaction(A, D).;true;true
5;false,true;interaction(D, D).;true;true
5;false,true,true;interaction(A, A).;false;false
5;false,true,false;phenotype(D, E), complex(D, F).;false;false
5;false,false;enzyme(A, G), interaction(A, H).;true;true
5;false,false,true;enzyme(H, I).;false;false
5;false,false,false;interaction(A, J), interaction(J, J).;false;false
6;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
6;false;interaction(A, D), phenotype(A, E).;true;true
6;false,true;location(D, F), location(A, F).;true;true
6;false,true,true;interaction(D, G), recursion_proteinclass(G, B).;false;false
6;false,true,false;complex(D, H), interaction(D, D).;false;false
6;false,false;interaction(A, I), interaction(I, A).;true;true
6;false,false,true;interaction(I, I).;false;false
6;false,false,false;location(A, J).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
7;false;interaction(D, A), interaction(A, D).;true;true
7;false,true;complex(D, E).;true;true
7;false,true,true;complex(A, F), enzyme(D, G).;false;false
7;false,true,false;interaction(D, D), complex(A, H).;false;false
7;false,false;enzyme(A, I), interaction(J, A).;true;true
7;false,false,true;enzyme(J, K), phenotype(J, L).;false;false
7;false,false,false;interaction(A, M), recursion_proteinclass(M, B).;false;false
8;;proteinclass(A, B) :- interaction(C, A), interaction(A, D).;true;true
8;true;interaction(E, C), recursion_proteinclass(E, B).;false;true
8;true,false;interaction(A, C).;false;false
8;false;location(A, F).;true;true
8;false,true;location(G, F), recursion_proteinclass(G, B).;true;false
8;false,true,true;interaction(H, A), interaction(H, G).;false;false
8;false,false;interaction(A, I), interaction(I, J).;false;true
8;false,false,false;interaction(A, K).;false;false
9;;proteinclass(A, B) :- interaction(C, A), interaction(C, C).;true;true
9;true;recursion_proteinclass(C, B), interaction(A, C).;false;false
9;false;enzyme(A, D), interaction(A, E).;true;true
9;false,true;interaction(E, F), recursion_proteinclass(F, B).;false;true
9;false,true,false;interaction(E, A).;false;false
9;false,false;interaction(G, A), phenotype(A, H).;true;true
9;false,false,true;interaction(I, G), recursion_proteinclass(I, B).;false;false
9;false,false,false;interaction(A, J), enzyme(J, K).;false;false


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.8581489350995123;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else if ( follows(A, D), follows(D, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(G, E) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(H, A), tweets(A, I) )
%   | | | then return -0.07042249347191633;  // std dev = 1.669, 42.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=3 */
%   | | | else return 0.08395538671241558;  // std dev = 2.328, 31.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=7 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, D), follows(D, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.7194734122109543;  // std dev = 5.96e-08, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else if ( follows(A, E), recursion_accounttype(E, B) )
%   | then return 0.7194734122109544;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, F), follows(F, G) )
%   | | then if ( recursion_accounttype(G, B) )
%   | | | then return 0.8530153700591807;  // std dev = 0.023, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.14271746046152362;  // std dev = 0.062, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
%   | | else if ( follows(H, A) )
%   | | | then return 0.006665941599248136;  // std dev = 0.929, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | | | else return 0.06984087793994055;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(A, D) )
%   | then if ( follows(D, A), follows(E, C) )
%   | | then return 0.11159021530734826;  // std dev = 2.360, 51.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=17 */
%   | | else return 0.1065686792295731;  // std dev = 0.550, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.12147559567299353;  // std dev = 1.281, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.5553664367462845;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( follows(A, H) )
%   | | then return 0.07063868391757447;  // std dev = 1.845, 25.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=6 */
%   | | else if ( follows(I, A), follows(A, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.005043980765265493;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), follows(C, D) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then return 0.5273072750923539;  // std dev = 0.004, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E), recursion_accounttype(E, B) )
%   | then if ( follows(E, F), follows(F, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.47259107464600136;  // std dev = 0.110, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, G), follows(H, A) )
%   | | then if ( tweets(A, I), tweets(G, I) )
%   | | | then return -0.08274935667864709;  // std dev = 1.158, 35.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=2 */
%   | | | else return -0.14840426451125163;  // std dev = 5.27e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.026785202524846043;  // std dev = 1.577, 20.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=4 */
%   | | | else return 0.10662787171037506;  // std dev = 1.555, 14.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=4 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.3970032803650561;  // std dev = 0.004, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else if ( follows(A, D), tweets(D, E) )
%   | then if ( follows(F, A), follows(F, D) )
%   | | then if ( follows(D, G), recursion_accounttype(G, B) )
%   | | | then return 0.410523026445468;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return -0.12215085403764395;  // std dev = 0.018, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0.3088331999789121;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0.12605136141448053;  // std dev = 1.995, 25.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=8 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then return 0.8351080831060298;  // std dev = 0.018, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( tweets(A, I), follows(J, A) )
%   | | | then return -0.1524522492134692;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return -0.1764700509237968;  // std dev = 0.019, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.3011102012310416;  // std dev = 0.082, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else if ( follows(D, A), follows(A, D) )
%   | then if ( follows(D, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(D, E) )
%   | | | then return -0.03304770203423919;  // std dev = 1.098, 20.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0.0423861211272142;  // std dev = 0.349, 27.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=7 */
%   | | else if ( follows(A, G), follows(G, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.055842596608648654;  // std dev = 1.179, 15.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=5 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.258255941815922;  // std dev = 0.084, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else if ( follows(A, D) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then return 0.3331874192794928;  // std dev = 1.609, 13.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=11 */
%   | | else if ( tweets(D, F), follows(D, D) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10848591426988705;  // std dev = 0.930, 42.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=1 */
%   | else if ( follows(A, G), follows(G, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.08020349996775654;  // std dev = 0.377, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.21202120251155535;  // std dev = 0.073, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else if ( follows(D, A), follows(A, D) )
%   | then if ( tweets(D, E) )
%   | | then if ( tweets(A, F) )
%   | | | then return -0.057860101674434616;  // std dev = 1.302, 35.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=4 */
%   | | | else return -0.10346902106999739;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A) )
%   | | then return -0.05173914306697831;  // std dev = 0.244, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   | | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | | then return 0.14820989287133224;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0.04318570038445483;  // std dev = 1.752, 26.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=7 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, D) )
%   then if ( follows(E, C), recursion_accounttype(E, B) )
%   | then return 0.22970159927481915;  // std dev = 0.634, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( follows(A, C) )
%   | | then return -0.09594838568436283;  // std dev = 0.048, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | else return -0.10737006295483523;  // std dev = 0.035, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else if ( recursion_accounttype(F, B) )
%   | then if ( follows(G, A), follows(G, F) )
%   | | then return 0.32674450341632133;  // std dev = 0.418, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.49112159638145286;  // std dev = 0.623, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then return -0.1636784732465925;  // std dev = 0.018, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( follows(A, J) )
%   | | | then return -0.19067308316408565;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return -0.15412723891475488;  // std dev = 0.043, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(C, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, D) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then return 0.18878080986060414;  // std dev = 1.373, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   | | else if ( follows(D, A) )
%   | | | then return -0.08454161366274658;  // std dev = 0.032, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | | else return -0.09767356926788691;  // std dev = 0.826, 20.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=1 */
%   | else if ( follows(F, A) )
%   | | then if ( follows(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.2719988964176695;  // std dev = 0.396, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.13839623852708213;  // std dev = 0.035, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( follows(A, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.01950219549230836;  // std dev = 0.589, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */


Results
   AUC ROC   = 0.992816
   AUC PR    = 0.35433
   CLL	      = -0.123909
   Precision = 0.334328 at threshold = 0.5
   Recall    = 0.888889
   F1        = 0.4859


Total learning time: 2.917 seconds
Total inference time: 46.137 seconds
AUC ROC: 0.992816


Results scoring model
   AUC ROC   = 0.995052
   AUC PR    = 0.388626
   CLL	      = -0.127127
   Precision = 0.346667 at threshold = 0.5
   Recall    = 0.83871
   F1        = 0.490566


Total scoring time: 10.126 seconds
Parameter learned model CLL: -0.127127


Structure after Parameter Learning
[['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, D)', 'false,false': 'follows(E, A), recursion_accounttype(E, B)', 'false,false,true': 'follows(A, F), follows(G, E)', 'false,false,false': 'follows(H, A), tweets(A, I)'}, {'true': [0.0, 0, 17], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 1], 'false,false,true,false': [2.11e-08, 0, 3], 'false,false,false,true': [1.669, 39, 3], 'false,false,false,false': [2.328, 24, 7]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(C, C)', 'true,false': 'follows(A, D), follows(D, D)', 'false': 'follows(A, E), recursion_accounttype(E, B)', 'false,false': 'follows(A, F), follows(F, G)', 'false,false,true': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [5.96e-08, 0, 17], 'false,true': [0.0, 0, 4], 'false,false,true,true': [0.023, 0, 7], 'false,false,true,false': [0.062, 43, 0], 'false,false,false,true': [0.929, 6, 1], 'false,false,false,false': [1.247, 7, 2]}], ['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(A, D)', 'true,true': 'follows(D, A), follows(E, C)', 'true,false': 'follows(A, F), recursion_accounttype(F, B)', 'false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false': 'follows(A, H)', 'false,false,false': 'follows(I, A), follows(A, I)'}, {'true,true,true': [2.36, 34, 17], 'true,true,false': [0.55, 2, 1], 'true,false,true': [0.0, 0, 0], 'true,false,false': [1.281, 8, 4], 'false,true': [0.0, 0, 2], 'false,false,true': [1.845, 19, 6], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.913, 5, 1]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), follows(C, D)', 'true,true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E), recursion_accounttype(E, B)', 'false,true': 'follows(E, F), follows(F, F)', 'false,false': 'follows(A, G), follows(H, A)', 'false,false,true': 'tweets(A, I), tweets(G, I)', 'false,false,false': 'tweets(A, J)'}, {'true,true,true': [0.004, 0, 17], 'true,true,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.11, 0, 4], 'false,false,true,true': [1.158, 33, 2], 'false,false,true,false': [5.27e-09, 9, 0], 'false,false,false,true': [1.577, 16, 4], 'false,false,false,false': [1.555, 10, 4]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), tweets(D, E)', 'false,true': 'follows(F, A), follows(F, D)', 'false,true,true': 'follows(D, G), recursion_accounttype(G, B)', 'false,true,false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(H, B)', 'false,false,false': 'tweets(A, I), follows(J, A)'}, {'true': [0.004, 0, 17], 'false,true,true,true': [0.0, 0, 2], 'false,true,true,false': [0.018, 29, 0], 'false,true,false,true': [0.0, 0, 2], 'false,true,false,false': [1.995, 17, 8], 'false,false,true': [0.018, 0, 2], 'false,false,false,true': [0.0, 2, 0], 'false,false,false,false': [0.019, 8, 0]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A), follows(A, D)', 'false,true': 'follows(D, D)', 'false,true,false': 'tweets(D, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), follows(G, G)'}, {'true': [0.082, 0, 17], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [1.098, 18, 2], 'false,true,false,false': [0.0, 0, 0], 'false,false,true': [0.349, 20, 7], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.179, 10, 5]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,false': 'tweets(D, F), follows(D, D)', 'false,false': 'follows(A, G), follows(G, A)'}, {'true': [0.084, 0, 17], 'false,true,true': [1.609, 2, 11], 'false,true,false,true': [0.0, 0, 0], 'false,true,false,false': [0.93, 41, 1], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.377, 5, 2]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(D, A), follows(A, D)', 'false,true': 'tweets(D, E)', 'false,true,true': 'tweets(A, F)', 'false,false': 'follows(G, A)', 'false,false,false': 'follows(A, H), recursion_accounttype(H, B)'}, {'true': [0.073, 0, 17], 'false,true,true,true': [1.302, 31, 4], 'false,true,true,false': [0.0, 4, 0], 'false,true,false': [0.0, 0, 0], 'false,false,true': [0.244, 9, 1], 'false,false,false,true': [0.0, 0, 2], 'false,false,false,false': [1.752, 19, 7]}], ['accounttype(A, B)', {'': 'follows(C, A), follows(A, D)', 'true': 'follows(E, C), recursion_accounttype(E, B)', 'true,false': 'follows(A, C)', 'false': 'recursion_accounttype(F, B)', 'false,true': 'follows(G, A), follows(G, F)', 'false,false': 'follows(A, H), follows(H, I)', 'false,false,false': 'follows(A, J)'}, {'true,true': [0.634, 0, 18], 'true,false,true': [0.048, 29, 0], 'true,false,false': [0.035, 4, 0], 'false,true,true': [0.418, 0, 4], 'false,true,false': [0.623, 0, 9], 'false,false,true': [0.018, 12, 0], 'false,false,false,true': [0.0, 1, 0], 'false,false,false,false': [0.043, 12, 0]}], ['accounttype(A, B)', {'': 'follows(C, A), follows(C, C)', 'false': 'follows(A, D)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,false': 'follows(D, A)', 'false,false': 'follows(F, A)', 'false,false,true': 'follows(G, F), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, H)'}, {'true': [0.0, 0, 0], 'false,true,true': [1.373, 1, 25], 'false,true,false,true': [0.032, 35, 0], 'false,true,false,false': [0.826, 19, 1], 'false,false,true,true': [0.396, 0, 4], 'false,false,true,false': [0.035, 8, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.589, 4, 1]}]]
[{'': [-2.0898315757650005e-16, 0.14876033057851248], 'false': [nan, 0.14876033057851248], 'false,false': [0.0, 0.11822105460686805], 'false,false,false': [0.06632653061224475, 0.17481789802289296], 'false,false,true': [0.0, 1.4802973661668753e-16]}, {'': [3.134747363647501e-16, 0.14775551065523682], 'false': [0.0, 0.12776218168847256], 'false,false': [0.11946151673911493, 0.15213223642811247], 'false,false,false': [0.12326362557199921, 0.1728395061728395], 'false,false,true': [7.281131420823681e-05, 8.914562093286562e-05], 'true': [nan, 3.134747363647501e-16], 'true,false': [nan, 2.0898315757650005e-16]}, {'': [0.1138377850541919, 0.14314210375858843], 'false': [0.0, 0.13738131212379198], 'false,false': [0.13618671981339975, 0.13888888888888895], 'false,false,false': [nan, 0.13888888888888895], 'true': [0.10871010222515698, 0.13682782806317004], 'true,false': [nan, 0.13682782806317004], 'true,true': [0.10917931244302202, 0.10070971357601445]}, {'': [1.0333621798775493e-06, 0.09465179171880925], 'false': [0.00303352995842171, 0.08711406005533218], 'false,false': [0.031175410442833517, 0.1458053349924192], 'false,false,false': [0.12432070998826432, 0.1727477435900618], 'false,false,true': [0.03831023768619204, 3.0839528461809902e-18], 'false,true': [nan, 0.00303352995842171], 'true': [1.0333621798775493e-06, nan], 'true,true': [1.0333621798775493e-06, nan]}, {'': [9.518939919171115e-07, 0.10021709568506841], 'false': [0.09171516228740378, 0.14091117786834118], 'false,false': [0.00015474533200143803, 0.00012995733824693322], 'false,true': [0.017135609590599836, 0.14971097000916275], 'false,true,false': [0.0, 0.15921309201663672], 'false,true,true': [0.0, 1.1474933846653086e-05], 'false,false,false': [0.0, 4.707571300933966e-05]}, {'': [0.00039764089375262393, 0.09638602584873536], 'false': [0.06031062079277497, 0.11148788350900521], 'false,false': [0.12187734771245058, 0.09267044147198625], 'false,false,false': [nan, 0.09267044147198625], 'false,true': [nan, 0.06031062079277497], 'false,true,false': [0.06031062079277497, nan]}, {'': [0.0004127128911185039, 0.10368211811595159], 'false': [0.09801996586670414, 0.14186722531719181], 'false,false': [nan, 0.14186722531719181], 'false,true': [0.19926653383754722, 0.02057302724002877], 'false,true,false': [nan, 0.02057302724002874]}, {'': [0.00031767816130415726, 0.07284992490240155], 'false': [0.04367404384251987, 0.09902391984198146], 'false,false': [0.05959802002350244, 0.11034375557320751], 'false,false,false': [0.0, 0.11804387384203796], 'false,true': [0.04367404384251987, nan], 'false,true,true': [0.04845201200768673, 0.0]}, {'': [0.032375010325051204, 0.09810679284741336], 'false': [0.04908404515944062, 0.00014591822446591518], 'false,true': [0.043775741151392766, 0.043129497941649664], 'true': [0.022301021158602274, 0.00012231861638484557], 'false,false': [2.700865086720239e-05, 0.0002338755592154932], 'false,false,false': [0.0, 0.00015062682515809092], 'true,false': [8.014935164162449e-05, 0.0003134037664260722]}, {'': [nan, 0.049933655382024086], 'false': [0.048608604229578044, 0.05620877056242771], 'false,false': [0.05062128491264312, 0.06939245478885861], 'false,false,false': [nan, 0.06939245478885861], 'false,false,true': [0.039268426852009736, 0.00015632501418617537], 'false,true': [0.07252973338127908, 0.012475788261633496], 'false,true,false': [2.884791958025807e-05, 0.034148194059671455]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
0;false;follows(E, A), recursion_accounttype(E, B).;true;true
0;false,true;follows(A, F), follows(G, E).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, E), recursion_accounttype(E, B).;true;true
1;false,false;follows(A, F), follows(F, G).;true;true
1;false,false,true;recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(C, A).;true;true
2;false;follows(A, G), recursion_accounttype(G, B).;true;true
3;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
3;false;follows(A, E), recursion_accounttype(E, B).;true;true
3;false,false;follows(A, G), follows(H, A).;true;true
3;false,false,true;tweets(A, I), tweets(G, I).;true;true
4;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
4;false;follows(A, D), tweets(D, E).;true;true
4;false,true;follows(F, A), follows(F, D).;true;true
4;false,true,true;follows(D, G), recursion_accounttype(G, B).;true;true
4;false,true,false;recursion_accounttype(D, B).;true;true
4;false,false;recursion_accounttype(H, B).;true;true
4;false,false,false;tweets(A, I), follows(J, A).;true;true
5;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;false;follows(D, A), follows(A, D).;true;true
7;false,true;tweets(A, F).;true;true
7;false,false;follows(G, A).;true;true
7;false,false,false;follows(A, H), recursion_accounttype(H, B).;true;true
8;;accounttype(A, B) :- follows(C, A), follows(A, D).;true;true
8;true;follows(E, C), recursion_accounttype(E, B).;true;true
8;true,false;follows(A, C).;true;true
8;false;recursion_accounttype(F, B).;true;true
8;false,false;follows(A, H), follows(H, I).;true;true
8;false,false,false;follows(A, J).;true;true
9;;accounttype(A, B) :- follows(A, D).;true;true
9;true;follows(D, E), recursion_accounttype(E, B).;true;true
9;true,false;follows(D, A).;true;true
9;false;follows(F, A).;true;true
9;false,true;follows(G, F), recursion_accounttype(G, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.8581489350995123;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(F, D) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), follows(A, H) )
%   | | | then return -0.1418510649004877;  // std dev = 2.79e-08, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | | else return 0.10814893509951223;  // std dev = 1.500, 12.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=3 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.14386322081379807;  // std dev = 2.070, 21.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=6 */
%   | | | else return 0.0581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( tweets(A, E) )
%   | | then return 0.7194734122109542;  // std dev = 1.49e-08, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.7194734122109544;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.7194734122109545;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then return 0.7194734122109544;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.841075503478;  // std dev = 0.006, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.1382811455657638;  // std dev = 0.112, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.08875216972578169;  // std dev = 0.966, 15.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=1 */
%   | | | else return 0.13251328962282402;  // std dev = 1.193, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.5553664367462846;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( tweets(A, E) )
%   | | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | | then return 0.6735927656832084;  // std dev = 0.250, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.12062065241550386;  // std dev = 0.070, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | else return -0.11104291522965938;  // std dev = 1.32e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.22203310341295115;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.7145010576448884;  // std dev = 0.117, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.14253192665848527;  // std dev = 1.05e-08, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( tweets(A, J) )
%   | | | then return -0.13816642644575755;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return -0.023823432212155445;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( tweets(A, E) )
%   | | then return 0.4175135841583098;  // std dev = 1.29e-08, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.41751358415830997;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.41751358415830997;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then return 0.4445790191189259;  // std dev = 0.111, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, G), follows(H, A) )
%   | | then if ( tweets(A, I), tweets(G, I) )
%   | | | then return -0.07151447637225372;  // std dev = 0.894, 42.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=2 */
%   | | | else return -0.10054576962600317;  // std dev = 6.45e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.09848682527155783;  // std dev = 1.372, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return -0.03761196431678621;  // std dev = 1.251, 18.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then return 0.3207118471601497;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return 0.32071184716014967;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, E), tweets(E, F) )
%   | then if ( follows(G, A), follows(G, E) )
%   | | then if ( follows(E, H), recursion_accounttype(H, B) )
%   | | | then return 0.28991557075865626;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return -0.09322044260004538;  // std dev = 0.003, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | else if ( recursion_accounttype(E, B) )
%   | | | then return 0.39073244368941673;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0.1480531346441756;  // std dev = 1.456, 19.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=8 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then return 0.8001030949701938;  // std dev = 0.059, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( tweets(A, J), follows(K, A) )
%   | | | then return -0.1257758061815619;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return -0.1583211221948954;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( follows(E, F), follows(F, A) )
%   | | then return 0.2525291034911204;  // std dev = 0.007, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.050943220044099034;  // std dev = 0.890, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.27414169268134525;  // std dev = 0.052, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(A, G), follows(H, A) )
%   | then if ( follows(H, G), follows(G, I) )
%   | | then return -0.08563369363953792;  // std dev = 0.000522, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | else return 0.046570336717046926;  // std dev = 0.264, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | else if ( tweets(A, J), follows(A, K) )
%   | | then if ( tweets(L, J), recursion_accounttype(L, B) )
%   | | | then return 0.4635697359066458;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.1579297059666381;  // std dev = 0.008, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( follows(A, M) )
%   | | | then return 0.13447165191786206;  // std dev = 0.898, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | | else return 0.06741150024367408;  // std dev = 1.054, 14.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=5 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then return 0.2175460910986988;  // std dev = 0.015, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return 0.24353519235287224;  // std dev = 0.003, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), follows(F, A) )
%   | | then if ( follows(F, E) )
%   | | | then return -0.09451398782772616;  // std dev = 0.090, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | | else return 0.011035024871047608;  // std dev = 0.221, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( follows(A, G), follows(E, G) )
%   | | | then return -0.061711472673215084;  // std dev = 0.296, 17.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=1 */
%   | | | else return 0.15154465120367047;  // std dev = 0.873, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | else if ( tweets(A, H) )
%   | | then return -0.019219556431448497;  // std dev = 0.201, 16.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=4 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.007037977990124943;  // std dev = 0.783, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | | | else return 0.17127088579157398;  // std dev = 0.873, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.17634791068707342;  // std dev = 1.05e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.1732306233336417;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.20755881774310647;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.20150310274756886;  // std dev = 0.003, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(G, A), follows(A, G) )
%   | then if ( tweets(A, H) )
%   | | then return -0.01388301343886631;  // std dev = 0.181, 22.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=4 */
%   | | else return -0.07362554386784814;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( follows(I, A) )
%   | | then return -0.025662949782532845;  // std dev = 0.228, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.24918296179664484;  // std dev = 0.003, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return -0.02896952952237259;  // std dev = 1.471, 32.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=7 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, D) )
%   then if ( follows(E, C), recursion_accounttype(E, B) )
%   | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then if ( follows(F, A) )
%   | | | then return 0.15740958410948447;  // std dev = 0.036, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.19430362623268405;  // std dev = 0.061, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.3771574528890112;  // std dev = 0.250, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return -0.07653797891388955;  // std dev = 0.018, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else if ( recursion_accounttype(G, B) )
%   | then if ( follows(H, A) )
%   | | then return 0.1241974508798672;  // std dev = 0.694, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.32434023916375415;  // std dev = 0.135, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.46105519355657343;  // std dev = 0.345, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, J), follows(J, K) )
%   | | then return -0.1507996233717613;  // std dev = 0.020, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else return -0.12425469104987547;  // std dev = 0.022, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.14396757915255648;  // std dev = 0.019, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( follows(F, A) )
%   | | | then return 0.29975603044339416;  // std dev = 0.213, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.306193345393586;  // std dev = 0.039, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(C, A) )
%   | | then return -0.07854852026061494;  // std dev = 0.027, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | else if ( follows(A, G), follows(G, H) )
%   | | | then return -0.12239912460789922;  // std dev = 0.111, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | | else return -0.07416630379680601;  // std dev = 0.579, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   else if ( follows(I, A) )
%   | then if ( follows(J, I), recursion_accounttype(J, B) )
%   | | then return 0.24177016487407751;  // std dev = 0.306, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.09846503240847518;  // std dev = 0.008, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return -0.023209604215296675;  // std dev = 0.630, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */


Results
   AUC ROC   = 0.99338
   AUC PR    = 0.423008
   CLL	      = -0.11162
   Precision = 0.343931 at threshold = 0.5
   Recall    = 0.944444
   F1        = 0.504237


Total learning time: 6.748 seconds
Total inference time: 75.491 seconds
AUC ROC: 0.99338


Results scoring model
   AUC ROC   = 0.995618
   AUC PR    = 0.472757
   CLL	      = -0.112816
   Precision = 0.379747 at threshold = 0.5
   Recall    = 0.967742
   F1        = 0.545455


Total scoring time: 16.766 seconds
Refined model CLL: -0.112816


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.99338
   AUC PR    = 0.423008
   CLL	      = -0.11162
   Precision = 0.343931 at threshold = 0.5
   Recall    = 0.944444
   F1        = 0.504237


Total learning time: 36.557 seconds
Total inference time: 75.491 seconds
AUC ROC: 0.99338
Total revision time: 36.557
Best scored revision CLL: -0.112816


Dataset: 7_yeast_twitter, Fold: 1, Type: Transfer (trRDN-B), Time: 00:37:49
{'AUC ROC': 0.99338, 'AUC PR': 0.423008, 'CLL': -0.11162, 'Precision': [0.343931, 0.5], 'Recall': 0.944444, 'F1': 0.504237, 'Learning time': 36.557, 'Inference time': 75.491, 'parameter_0.2': {'AUC ROC': 0.992816, 'AUC PR': 0.35433, 'CLL': -0.123909, 'Precision': [0.334328, 0.5], 'Recall': 0.888889, 'F1': 0.4859, 'Learning time': 2.917, 'Inference time': 46.137}}


Amount of data: 0.4
******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;false;true
0;false;interaction(A, D), interaction(D, D).;true;true
0;false,true;interaction(E, A), interaction(D, E).;true;true
0;false,true,true;interaction(A, A).;false;false
0;false,true,false;enzyme(D, F), phenotype(A, G).;false;false
0;false,false;interaction(H, A), recursion_proteinclass(H, B).;true;true
0;false,false,true;interaction(A, I), interaction(J, H).;false;false
0;false,false,false;interaction(K, A), complex(A, L).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
1;true;interaction(C, C).;false;true
1;true,false;interaction(A, D), interaction(D, D).;true;false
1;true,false,true;complex(C, E).;false;false
1;false;interaction(A, F), recursion_proteinclass(F, B).;false;true
1;false,false;interaction(A, G), interaction(G, H).;true;true
1;false,false,true;recursion_proteinclass(H, B).;false;false
1;false,false,false;interaction(I, A), location(I, J).;false;false
2;;proteinclass(A, B) :- interaction(C, A), enzyme(C, D).;true;true
2;true;location(A, E), location(C, E).;false;true
2;true,false;interaction(A, F), phenotype(A, G).;true;true
2;true,false,true;interaction(F, A), interaction(H, C).;false;false
2;true,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;false;interaction(A, J), recursion_proteinclass(J, B).;false;true
2;false,false;interaction(A, K), enzyme(K, L).;false;true
2;false,false,false;interaction(M, A), interaction(A, M).;false;false
3;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
3;true;interaction(D, C), interaction(C, D).;true;false
3;true,true;recursion_proteinclass(D, B).;false;false
3;false;interaction(A, E), recursion_proteinclass(E, B).;true;true
3;false,true;interaction(E, F), interaction(F, F).;false;false
3;false,false;interaction(A, G), interaction(H, A).;true;true
3;false,false,true;complex(A, I), complex(G, I).;false;false
3;false,false,false;enzyme(A, J), complex(A, K).;false;false
4;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
4;false;interaction(A, D), complex(D, E).;true;true
4;false,true;interaction(F, A), interaction(F, D).;true;true
4;false,true,true;interaction(D, G), recursion_proteinclass(G, B).;false;false
4;false,true,false;recursion_proteinclass(D, B).;false;false
4;false,false;enzyme(A, H), location(A, I).;true;true
4;false,false,true;enzyme(J, H), recursion_proteinclass(J, B).;false;false
4;false,false,false;complex(A, K), interaction(L, A).;false;false
5;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;false;true
5;false;interaction(D, A), interaction(A, D).;true;true
5;false,true;interaction(D, D).;true;true
5;false,true,true;interaction(A, A).;false;false
5;false,true,false;phenotype(D, E), complex(D, F).;false;false
5;false,false;enzyme(A, G), interaction(A, H).;true;true
5;false,false,true;enzyme(H, I).;false;false
5;false,false,false;interaction(A, J), interaction(J, J).;false;false
6;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
6;false;interaction(A, D), phenotype(A, E).;true;true
6;false,true;location(D, F), location(A, F).;true;true
6;false,true,true;interaction(D, G), recursion_proteinclass(G, B).;false;false
6;false,true,false;complex(D, H), interaction(D, D).;false;false
6;false,false;interaction(A, I), interaction(I, A).;true;true
6;false,false,true;interaction(I, I).;false;false
6;false,false,false;location(A, J).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
7;false;interaction(D, A), interaction(A, D).;true;true
7;false,true;complex(D, E).;true;true
7;false,true,true;complex(A, F), enzyme(D, G).;false;false
7;false,true,false;interaction(D, D), complex(A, H).;false;false
7;false,false;enzyme(A, I), interaction(J, A).;true;true
7;false,false,true;enzyme(J, K), phenotype(J, L).;false;false
7;false,false,false;interaction(A, M), recursion_proteinclass(M, B).;false;false
8;;proteinclass(A, B) :- interaction(C, A), interaction(A, D).;true;true
8;true;interaction(E, C), recursion_proteinclass(E, B).;false;true
8;true,false;interaction(A, C).;false;false
8;false;location(A, F).;true;true
8;false,true;location(G, F), recursion_proteinclass(G, B).;true;false
8;false,true,true;interaction(H, A), interaction(H, G).;false;false
8;false,false;interaction(A, I), interaction(I, J).;false;true
8;false,false,false;interaction(A, K).;false;false
9;;proteinclass(A, B) :- interaction(C, A), interaction(C, C).;true;true
9;true;recursion_proteinclass(C, B), interaction(A, C).;false;false
9;false;enzyme(A, D), interaction(A, E).;true;true
9;false,true;interaction(E, F), recursion_proteinclass(F, B).;false;true
9;false,true,false;interaction(E, A).;false;false
9;false,false;interaction(G, A), phenotype(A, H).;true;true
9;false,false,true;interaction(I, G), recursion_proteinclass(I, B).;false;false
9;false,false,false;interaction(A, J), enzyme(J, K).;false;false


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.8287371703936293;  // std dev = 0.985, 34.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=33 */
%   else if ( follows(D, A), follows(D, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), follows(E, G) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, H), tweets(A, I) )
%   | | | then return 0.0010060779566552051;  // std dev = 3.338, 91.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=13 */
%   | | | else return 0.10814893509951234;  // std dev = 2.872, 44.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=11 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(D, A), follows(D, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.6635140422449406;  // std dev = 1.378, 33.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=31 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then return 0.725371134946398;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(F, A), follows(G, F) )
%   | | then if ( recursion_accounttype(G, B) )
%   | | | then return 0.8535067604513809;  // std dev = 0.019, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.1466076613538799;  // std dev = 0.057, 79.000 (wgt'ed) examples reached here.  /* #neg=79 */
%   | | else if ( follows(A, H) )
%   | | | then return 0.07855742873581506;  // std dev = 3.048, 53.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=12 */
%   | | | else return 0.1444674378357555;  // std dev = 1.449, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, A) )
%   | then if ( follows(A, D), follows(C, E) )
%   | | then return 0.12400207211423708;  // std dev = 3.551, 100.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=35 */
%   | | else return 0.17121867966090037;  // std dev = 0.905, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.22554785729590368;  // std dev = 2.855, 37.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=15 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.561165049976873;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(H, A) )
%   | | then return -0.03281491940161399;  // std dev = 1.105, 16.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | | else if ( follows(A, I), follows(I, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.012035525005429962;  // std dev = 1.561, 16.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=3 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, C) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then return 0.5416688591909171;  // std dev = 0.054, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | else return 0.04580786757761193;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(F, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.46500947016505656;  // std dev = 0.132, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(G, A), follows(A, H) )
%   | | then if ( tweets(A, I), tweets(G, I) )
%   | | | then return -0.05810212250380978;  // std dev = 1.942, 61.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=6 */
%   | | | else return -0.09858781034120642;  // std dev = 0.795, 16.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=1 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.04972130236115278;  // std dev = 2.579, 40.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=9 */
%   | | | else return -0.003403490258398657;  // std dev = 2.500, 44.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=8 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.41157429504689536;  // std dev = 0.135, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   else if ( follows(D, A), tweets(D, E) )
%   | then if ( follows(A, F), follows(D, F) )
%   | | then if ( follows(G, D), recursion_accounttype(G, B) )
%   | | | then return 0.605271947640497;  // std dev = 0.340, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.13480665996039562;  // std dev = 0.042, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0.314258933896327;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.03944670598949845;  // std dev = 1.670, 24.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=5 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then return 0.7833923039533579;  // std dev = 0.393, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else if ( tweets(A, I), follows(A, J) )
%   | | | then return -0.19074643250764145;  // std dev = 1.83e-08, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | | else return -0.19045558013641248;  // std dev = 0.061, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.27768910508199274;  // std dev = 0.995, 34.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=33 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(D, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(D, E) )
%   | | | then return -0.03234087791190786;  // std dev = 1.990, 64.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=9 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return -0.07436986833662017;  // std dev = 0.221, 26.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=2 */
%   | | else if ( follows(G, A), follows(G, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.06580484598839283;  // std dev = 2.758, 60.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=18 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.23661937851137965;  // std dev = 1.001, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0.4539302169151229;  // std dev = 0.897, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else if ( tweets(D, F), follows(D, D) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12027435633501636;  // std dev = 0.081, 77.000 (wgt'ed) examples reached here.  /* #neg=77 */
%   | else if ( follows(G, A), follows(A, G) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.05875568722075097;  // std dev = 0.368, 53.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=15 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.22441290077698792;  // std dev = 0.116, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( tweets(D, E) )
%   | | then if ( tweets(A, F) )
%   | | | then return -0.0335993743621422;  // std dev = 1.499, 58.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=7 */
%   | | | else return -0.06182113206704842;  // std dev = 0.534, 11.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then return 0.08582358387025621;  // std dev = 0.361, 40.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=14 */
%   | | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0.13869623304971523;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.004174571751814487;  // std dev = 1.573, 28.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=5 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(D, A) )
%   then if ( follows(C, E), recursion_accounttype(E, B) )
%   | then return 0.24671654025696882;  // std dev = 0.861, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | else if ( follows(C, A) )
%   | | then return -0.10243478677057696;  // std dev = 0.049, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
%   | | else return -0.122304631071789;  // std dev = 0.032, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else if ( recursion_accounttype(F, B) )
%   | then if ( follows(A, G), follows(F, G) )
%   | | then return 0.5231756002696146;  // std dev = 0.639, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return 0.4059687105115585;  // std dev = 0.761, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then return -0.12122032721463974;  // std dev = 9.13e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( follows(J, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.19406769413657762;  // std dev = 0.067, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(C, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0.21038399404695404;  // std dev = 0.935, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | | else if ( follows(A, D) )
%   | | | then return -0.09270521597350932;  // std dev = 0.038, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
%   | | | else return -0.10891069920037032;  // std dev = 0.029, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | else if ( follows(A, F) )
%   | | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | | then return 0.39540303964169965;  // std dev = 0.535, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return -0.11505681943350278;  // std dev = 0.872, 24.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=2 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.06542087469869076;  // std dev = 1.009, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */


Results
   AUC ROC   = 0.993004
   AUC PR    = 0.368203
   CLL	      = -0.130159
   Precision = 0.340782 at threshold = 0.5
   Recall    = 0.968254
   F1        = 0.504132


Total learning time: 4.297 seconds
Total inference time: 43.647 seconds
AUC ROC: 0.993004


Results scoring model
   AUC ROC   = 0.995027
   AUC PR    = 0.428607
   CLL	      = -0.133747
   Precision = 0.353659 at threshold = 0.5
   Recall    = 0.935484
   F1        = 0.513274


Total scoring time: 17.393 seconds
Parameter learned model CLL: -0.133747


Structure after Parameter Learning
[['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(D, A), follows(D, D)', 'false,false': 'follows(A, E), recursion_accounttype(E, B)', 'false,false,true': 'follows(F, A), follows(E, G)', 'false,false,false': 'follows(A, H), tweets(A, I)'}, {'true': [0.985, 1, 33], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 2], 'false,false,true,false': [2.11e-08, 0, 3], 'false,false,false,true': [3.338, 78, 13], 'false,false,false,false': [2.872, 33, 11]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, C)', 'true,false': 'follows(D, A), follows(D, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,false': 'follows(F, A), follows(G, F)', 'false,false,true': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(A, H)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [1.378, 2, 31], 'false,true': [0.0, 0, 7], 'false,false,true,true': [0.019, 0, 9], 'false,false,true,false': [0.057, 79, 0], 'false,false,false,true': [3.048, 41, 12], 'false,false,false,false': [1.449, 7, 3]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, A)', 'true,true': 'follows(A, D), follows(C, E)', 'true,false': 'follows(F, A), recursion_accounttype(F, B)', 'false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false': 'follows(H, A)', 'false,false,false': 'follows(A, I), follows(I, A)'}, {'true,true,true': [3.551, 65, 35], 'true,true,false': [0.905, 4, 3], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.855, 22, 15], 'false,true': [0.0, 0, 4], 'false,false,true': [1.105, 14, 2], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.561, 13, 3]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D), follows(D, C)', 'true,true': 'recursion_accounttype(D, B)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(F, F)', 'false,false': 'follows(G, A), follows(A, H)', 'false,false,true': 'tweets(A, I), tweets(G, I)', 'false,false,false': 'tweets(A, J)'}, {'true,true,true': [0.054, 0, 30], 'true,true,false': [0.707, 1, 1], 'true,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.132, 0, 7], 'false,false,true,true': [1.942, 55, 6], 'false,false,true,false': [0.795, 15, 1], 'false,false,false,true': [2.579, 31, 9], 'false,false,false,false': [2.5, 36, 8]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A), tweets(D, E)', 'false,true': 'follows(A, F), follows(D, F)', 'false,true,true': 'follows(G, D), recursion_accounttype(G, B)', 'false,true,false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(H, B)', 'false,false,false': 'tweets(A, I), follows(A, J)'}, {'true': [0.135, 0, 31], 'false,true,true,true': [0.34, 0, 6], 'false,true,true,false': [0.042, 60, 0], 'false,true,false,true': [0.0, 0, 4], 'false,true,false,false': [1.67, 19, 5], 'false,false,true': [0.393, 0, 16], 'false,false,false,true': [1.83e-08, 22, 0], 'false,false,false,false': [0.061, 18, 0]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(D, D)', 'false,true,false': 'tweets(D, E)', 'false,false': 'follows(F, A)', 'false,false,false': 'follows(G, A), follows(G, G)'}, {'true': [0.995, 1, 33], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [1.99, 55, 9], 'false,true,false,false': [0.0, 0, 0], 'false,false,true': [0.221, 24, 2], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.758, 42, 18]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(D, F), follows(D, D)', 'false,false': 'follows(G, A), follows(A, G)'}, {'true': [1.001, 1, 31], 'false,true,true': [0.897, 0, 16], 'false,true,false,true': [0.0, 0, 0], 'false,true,false,false': [0.081, 77, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.368, 38, 15]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'tweets(D, E)', 'false,true,true': 'tweets(A, F)', 'false,false': 'follows(A, G)', 'false,false,false': 'follows(H, A), recursion_accounttype(H, B)'}, {'true': [0.116, 0, 31], 'false,true,true,true': [1.499, 51, 7], 'false,true,true,false': [0.534, 10, 1], 'false,true,false': [0.0, 0, 0], 'false,false,true': [0.361, 26, 14], 'false,false,false,true': [0.0, 0, 4], 'false,false,false,false': [1.573, 23, 5]}], ['accounttype(A, B)', {'': 'follows(A, C), follows(D, A)', 'true': 'follows(C, E), recursion_accounttype(E, B)', 'true,false': 'follows(C, A)', 'false': 'recursion_accounttype(F, B)', 'false,true': 'follows(A, G), follows(F, G)', 'false,false': 'follows(H, A), follows(I, H)', 'false,false,false': 'follows(J, A)'}, {'true,true': [0.861, 0, 38], 'true,false,true': [0.049, 68, 0], 'true,false,false': [0.032, 8, 0], 'false,true,true': [0.639, 0, 15], 'false,true,false': [0.761, 0, 9], 'false,false,true': [9.13e-09, 10, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.067, 38, 0]}], ['accounttype(A, B)', {'': 'follows(A, C), follows(C, C)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'follows(A, D)', 'false,false': 'follows(A, F)', 'false,false,true': 'follows(F, G), recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.0, 0, 0], 'false,true,true': [0.935, 0, 44], 'false,true,false,true': [0.038, 61, 0], 'false,true,false,false': [0.029, 23, 0], 'false,false,true,true': [0.535, 0, 13], 'false,false,true,false': [0.872, 22, 2], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.009, 7, 3]}]]
[{'': [0.028546712802769686, 0.1642346938775505], 'false': [nan, 0.1642346938775505], 'false,false': [0.0, 0.14617283950617238], 'false,false,false': [0.12244897959183618, 0.1875], 'false,false,true': [0.0, 1.4802973661668753e-16]}, {'': [0.057502014412098915, 0.14921821952931275], 'false': [-6.344131569286608e-17, 0.13354583857131225], 'false,false': [0.09187533573417399, 0.1813902609911722], 'false,false,false': [0.1753026526939798, 0.21000000000000013], 'false,false,true': [4.085467667517643e-05, 4.135873213114522e-05], 'true': [nan, 0.057502014412098915], 'true,false': [nan, 0.057502014412099026]}, {'': [0.15180770631766236, 0.1343408347064799], 'true': [0.1256418322852726, 0.22027358976730688], 'true,false': [nan, 0.22027358976730688], 'false': [0.0, 0.11483623582054113], 'true,true': [0.12609793006179937, 0.11704259085858718], 'false,false': [0.07632294045932775, 0.15234374999999983], 'false,false,false': [nan, 0.15234374999999983]}, {'': [0.03012320735096008, 0.11485640640495817], 'false': [0.0024993797752696422, 0.10992436478778583], 'false,false': [0.05746235836651024, 0.15427639807421323], 'false,false,false': [0.1662733511314734, 0.14202615159360565], 'false,false,true': [0.061820612933600846, 0.03954801223077909], 'true': [0.03012320735096008, nan], 'true,true': [9.737181995745914e-05, 0.24999999999999994], 'false,true': [nan, 0.0024993797752696422]}, {'': [0.0005900377076691708, 0.1200811418455308], 'false': [0.0699393126499544, 0.19643724436626542], 'false,false': [0.009663472059087908, 9.209686082911061e-05], 'false,true': [0.047040206340088236, 0.10890154311378651], 'false,true,false': [0.0, 0.11626297735554413], 'false,true,true': [0.01922923743647124, 2.89081914974935e-05], 'false,false,false': [1.5139404881252134e-17, 0.00020461316342523176]}, {'': [0.029098875659967337, 0.08874975931426134], 'false': [0.06185665690988169, 0.1074363000160338], 'false,false': [0.04899275087364551, 0.12682145758310076], 'false,false,false': [nan, 0.12682145758310076], 'false,true': [nan, 0.06185665690988169], 'false,true,false': [0.06185665690988169, nan]}, {'': [0.03129640906457577, 0.08606424411332562], 'false': [0.055681611861153744, 0.13527573476013288], 'false,false': [nan, 0.13527573476013288], 'false,true': [0.05025108279119439, 8.557895853219836e-05], 'false,true,false': [nan, 8.557895853219547e-05]}, {'': [0.00043076452956075114, 0.07572598843855181], 'false': [0.03680615847271766, 0.10889478284580482], 'false,false': [0.13002476481341843, 0.07959115020348792], 'false,false,false': [0.0, 0.08840980616019227], 'false,true': [0.03680615847271766, nan], 'false,true,true': [0.03874585295096183, 0.025909183985486892]}, {'': [0.03396727695131674, 0.11167717072424795], 'false': [0.0443508959719513, 0.0009688852288397415], 'false,true': [0.027200446292123755, 0.06434906939244048], 'true': [0.019489212768071053, 8.245321479985614e-05], 'false,false': [8.326672684688674e-18, 0.00011828442851545186], 'false,false,false': [nan, 0.00011828442851545186], 'true,false': [3.552202993987926e-05, 0.00012811659592938153]}, {'': [nan, 0.04560628077727674], 'false': [0.028212569604963746, 0.09068558108007069], 'false,false': [0.08769630586008356, 0.10174489962441072], 'false,false,false': [nan, 0.10174489962441072], 'false,false,true': [0.02204963529481346, 0.03170355474639821], 'false,true': [0.019858032838705873, 7.945780166579827e-05], 'false,true,false': [2.3755642567218545e-05, 3.647915202747021e-05]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
0;false;follows(A, E), recursion_accounttype(E, B).;true;true
0;false,true;follows(F, A), follows(E, G).;true;true
1;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
1;false;follows(E, A), recursion_accounttype(E, B).;true;true
1;false,false;follows(F, A), follows(G, F).;true;true
1;false,false,true;recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
3;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
3;true;recursion_accounttype(D, B).;true;true
3;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(D, A), tweets(D, E).;true;true
4;false,true;follows(A, F), follows(D, F).;true;true
4;false,true,true;follows(G, D), recursion_accounttype(G, B).;true;true
4;false,true,false;recursion_accounttype(D, B).;true;true
4;false,false;recursion_accounttype(H, B).;true;true
4;false,false,false;tweets(A, I), follows(A, J).;true;true
6;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
6;false;follows(D, A).;true;true
6;false,true;follows(E, D), recursion_accounttype(E, B).;true;true
7;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
7;false;follows(A, D), follows(D, A).;true;true
7;false,false;follows(A, G).;true;true
7;false,false,false;follows(H, A), recursion_accounttype(H, B).;true;true
8;;accounttype(A, B) :- follows(A, C), follows(D, A).;true;true
8;true;follows(C, E), recursion_accounttype(E, B).;true;true
8;true,false;follows(C, A).;true;true
8;false;recursion_accounttype(F, B).;true;true
8;false,false;follows(H, A), follows(I, H).;true;true
9;;accounttype(A, B) :- follows(D, A).;true;true
9;true;follows(E, D), recursion_accounttype(E, B).;true;true
9;true,false;follows(A, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.8581489350995116;  // std dev = 2.23e-07, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   else if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(D, F) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.14185106490048763;  // std dev = 8.16e-08, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.18072958026080266;  // std dev = 2.603, 31.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=10 */
%   | | | else return 0.24276431971489684;  // std dev = 1.754, 13.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=5 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( tweets(A, E), recursion_accounttype(D, B) )
%   | | then if ( follows(F, A), follows(F, D) )
%   | | | then return 0.6480448407823829;  // std dev = 0.964, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | | else return 0.7194734122109545;  // std dev = 2.11e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.7194734122109545;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.4694734122109545;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.7194734122109546;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.7194734122109543;  // std dev = 2.98e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.1254446385283914;  // std dev = 0.000, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.07144970457085102;  // std dev = 2.463, 34.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=8 */
%   | | | else return 0.10056442796095674;  // std dev = 2.261, 26.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=7 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( recursion_accounttype(E, B) )
%   | | then return 0.5613742384307724;  // std dev = 0.008, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | else return -0.11231637819360628;  // std dev = 5.89e-09, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
%   | else if ( tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.7772144626112627;  // std dev = 0.259, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.17415923119875626;  // std dev = 0.044, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | else return 0.08293643637328908;  // std dev = 0.432, 22.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=6 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.5553664367462845;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(I, A), tweets(A, J) )
%   | | then return 0.02122018479437178;  // std dev = 0.597, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else if ( follows(K, A) )
%   | | | then return -0.04524325221765004;  // std dev = 0.731, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return -0.010945716128849882;  // std dev = 1.572, 17.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=3 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then if ( follows(E, A) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return 0.42685624029380875;  // std dev = 0.039, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.2910532389567716;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else return 0.4816330672159901;  // std dev = 0.140, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.4168877219290792;  // std dev = 0.000723, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.4476668770623094;  // std dev = 0.178, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.10296532552057049;  // std dev = 0.038, 94.000 (wgt'ed) examples reached here.  /* #neg=94 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.14180566327376298;  // std dev = 2.539, 35.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=12 */
%   | | | else return 0.014451549474543255;  // std dev = 1.549, 15.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=3 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then return 0.332184097083097;  // std dev = 0.011, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | else return 0.10393745498776319;  // std dev = 0.923, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else if ( follows(E, A), tweets(E, F) )
%   | then if ( follows(A, G), follows(E, G) )
%   | | then if ( follows(H, E), recursion_accounttype(H, B) )
%   | | | then return 0.1728805186076121;  // std dev = 0.922, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return -0.09329539443957444;  // std dev = 0.020, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
%   | | else if ( recursion_accounttype(E, B) )
%   | | | then return 0.320848210147456;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.017794158748281653;  // std dev = 1.081, 23.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=5 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J) )
%   | | | then return 0.6757144050537354;  // std dev = 0.435, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.8119623232877949;  // std dev = 0.004, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.18632526145483164;  // std dev = 0.019, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then return 0.31860787114072786;  // std dev = 0.097, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | else return -0.10582421105197566;  // std dev = 0.028, 100.000 (wgt'ed) examples reached here.  /* #neg=100 */
%   else if ( follows(A, E), follows(E, F) )
%   | then if ( follows(A, F) )
%   | | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | | then return 0.27193063751098906;  // std dev = 0.202, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.07873615092636715;  // std dev = 0.401, 13.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=1 */
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0.6498203171221331;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.13823797054416698;  // std dev = 0.094, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( follows(H, A) )
%   | | then return -0.004078929744669581;  // std dev = 0.508, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else if ( follows(A, I) )
%   | | | then return -0.028833054927097652;  // std dev = 0.743, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.04185555957324634;  // std dev = 1.001, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then return 0.20796884380204503;  // std dev = 0.008, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | else return 0.2816087410653731;  // std dev = 0.127, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(E, A) )
%   | then if ( follows(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return 0.07473588068974447;  // std dev = 0.937, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.2811012200351806;  // std dev = 0.233, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return -0.08064655276409376;  // std dev = 0.006, 97.000 (wgt'ed) examples reached here.  /* #neg=97 */
%   | else if ( follows(A, H), tweets(A, I) )
%   | | then if ( tweets(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.4074930677119613;  // std dev = 0.014, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.1332730735428371;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( follows(A, K) )
%   | | | then return 0.03237940252762382;  // std dev = 1.311, 17.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=5 */
%   | | | else return -0.021278059736054795;  // std dev = 1.237, 17.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=3 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( follows(E, D) )
%   | | | then return 0.17364372557964244;  // std dev = 0.007, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return 0.16456957553645998;  // std dev = 3.73e-09, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.18613313568093556;  // std dev = 0.003, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.22951656254203132;  // std dev = 0.112, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, F), follows(F, A) )
%   | then if ( tweets(A, G) )
%   | | then return -0.04020930937135424;  // std dev = 0.086, 58.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=7 */
%   | | else return -0.04744464370979253;  // std dev = 0.086, 12.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=1 */
%   | else if ( follows(A, H) )
%   | | then return -0.004979463605820377;  // std dev = 0.237, 52.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=14 */
%   | | else if ( follows(I, A), recursion_accounttype(I, B) )
%   | | | then return 0.18784585219699768;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.006069262450035806;  // std dev = 1.317, 27.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=5 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(D, A) )
%   then if ( follows(C, E), recursion_accounttype(E, B) )
%   | then if ( tweets(A, F) )
%   | | then return 0.16472018680397832;  // std dev = 0.023, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | else return 0.06073976922380474;  // std dev = 0.306, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else return -0.07014999617916773;  // std dev = 0.002, 73.000 (wgt'ed) examples reached here.  /* #neg=73 */
%   else if ( recursion_accounttype(G, B) )
%   | then if ( tweets(A, H) )
%   | | then if ( follows(I, A), recursion_accounttype(I, B) )
%   | | | then return 0.1608503915571029;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.30928836163089224;  // std dev = 0.359, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.4428199585912026;  // std dev = 0.190, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.5810838852039275;  // std dev = 0.220, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(L, A), follows(M, L) )
%   | | then return -0.0878861076068843;  // std dev = 0.001, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | else return -0.15134639430231348;  // std dev = 0.028, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.10940654733753534;  // std dev = 0.171, 34.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=33 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return -0.3696360985808835;  // std dev = 1.001, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.09449466975258033;  // std dev = 0.967, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else return -0.0678079026630766;  // std dev = 0.006, 75.000 (wgt'ed) examples reached here.  /* #neg=75 */
%   else if ( follows(A, G), follows(G, H) )
%   | then if ( follows(A, H) )
%   | | then return -0.035309717768145434;  // std dev = 0.138, 19.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | | else if ( recursion_accounttype(H, B) )
%   | | | then return 0.31556637907147844;  // std dev = 0.174, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.11848123036328469;  // std dev = 0.075, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else if ( tweets(A, I) )
%   | | then return 0.1264405949691162;  // std dev = 0.539, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return 0.17867949950529596;  // std dev = 0.796, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */


Results
   AUC ROC   = 0.992824
   AUC PR    = 0.345729
   CLL	      = -0.106683
   Precision = 0.337802 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.50501


Total learning time: 12.138 seconds
Total inference time: 68.174 seconds
AUC ROC: 0.992824


Results scoring model
   AUC ROC   = 0.994577
   AUC PR    = 0.364461
   CLL	      = -0.10924
   Precision = 0.352273 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.521008


Total scoring time: 25.496 seconds
Refined model CLL: -0.10924


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.992824
   AUC PR    = 0.345729
   CLL	      = -0.106683
   Precision = 0.337802 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.50501


Total learning time: 59.324 seconds
Total inference time: 68.174 seconds
AUC ROC: 0.992824
Total revision time: 59.324
Best scored revision CLL: -0.10924


Dataset: 7_yeast_twitter, Fold: 1, Type: Transfer (trRDN-B), Time: 00:40:40
{'AUC ROC': 0.992824, 'AUC PR': 0.345729, 'CLL': -0.106683, 'Precision': [0.337802, 0.5], 'Recall': 1.0, 'F1': 0.50501, 'Learning time': 59.324, 'Inference time': 68.174, 'parameter_0.4': {'AUC ROC': 0.993004, 'AUC PR': 0.368203, 'CLL': -0.130159, 'Precision': [0.340782, 0.5], 'Recall': 0.968254, 'F1': 0.504132, 'Learning time': 4.297, 'Inference time': 43.647}}


Amount of data: 0.6
******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;false;true
0;false;interaction(A, D), interaction(D, D).;true;true
0;false,true;interaction(E, A), interaction(D, E).;true;true
0;false,true,true;interaction(A, A).;false;false
0;false,true,false;enzyme(D, F), phenotype(A, G).;false;false
0;false,false;interaction(H, A), recursion_proteinclass(H, B).;true;true
0;false,false,true;interaction(A, I), interaction(J, H).;false;false
0;false,false,false;interaction(K, A), complex(A, L).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
1;true;interaction(C, C).;false;true
1;true,false;interaction(A, D), interaction(D, D).;true;false
1;true,false,true;complex(C, E).;false;false
1;false;interaction(A, F), recursion_proteinclass(F, B).;false;true
1;false,false;interaction(A, G), interaction(G, H).;true;true
1;false,false,true;recursion_proteinclass(H, B).;false;false
1;false,false,false;interaction(I, A), location(I, J).;false;false
2;;proteinclass(A, B) :- interaction(C, A), enzyme(C, D).;true;true
2;true;location(A, E), location(C, E).;false;true
2;true,false;interaction(A, F), phenotype(A, G).;true;true
2;true,false,true;interaction(F, A), interaction(H, C).;false;false
2;true,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;false;interaction(A, J), recursion_proteinclass(J, B).;false;true
2;false,false;interaction(A, K), enzyme(K, L).;false;true
2;false,false,false;interaction(M, A), interaction(A, M).;false;false
3;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
3;true;interaction(D, C), interaction(C, D).;true;false
3;true,true;recursion_proteinclass(D, B).;false;false
3;false;interaction(A, E), recursion_proteinclass(E, B).;true;true
3;false,true;interaction(E, F), interaction(F, F).;false;false
3;false,false;interaction(A, G), interaction(H, A).;true;true
3;false,false,true;complex(A, I), complex(G, I).;false;false
3;false,false,false;enzyme(A, J), complex(A, K).;false;false
4;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
4;false;interaction(A, D), complex(D, E).;true;true
4;false,true;interaction(F, A), interaction(F, D).;true;true
4;false,true,true;interaction(D, G), recursion_proteinclass(G, B).;false;false
4;false,true,false;recursion_proteinclass(D, B).;false;false
4;false,false;enzyme(A, H), location(A, I).;true;true
4;false,false,true;enzyme(J, H), recursion_proteinclass(J, B).;false;false
4;false,false,false;complex(A, K), interaction(L, A).;false;false
5;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;false;true
5;false;interaction(D, A), interaction(A, D).;true;true
5;false,true;interaction(D, D).;true;true
5;false,true,true;interaction(A, A).;false;false
5;false,true,false;phenotype(D, E), complex(D, F).;false;false
5;false,false;enzyme(A, G), interaction(A, H).;true;true
5;false,false,true;enzyme(H, I).;false;false
5;false,false,false;interaction(A, J), interaction(J, J).;false;false
6;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
6;false;interaction(A, D), phenotype(A, E).;true;true
6;false,true;location(D, F), location(A, F).;true;true
6;false,true,true;interaction(D, G), recursion_proteinclass(G, B).;false;false
6;false,true,false;complex(D, H), interaction(D, D).;false;false
6;false,false;interaction(A, I), interaction(I, A).;true;true
6;false,false,true;interaction(I, I).;false;false
6;false,false,false;location(A, J).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
7;false;interaction(D, A), interaction(A, D).;true;true
7;false,true;complex(D, E).;true;true
7;false,true,true;complex(A, F), enzyme(D, G).;false;false
7;false,true,false;interaction(D, D), complex(A, H).;false;false
7;false,false;enzyme(A, I), interaction(J, A).;true;true
7;false,false,true;enzyme(J, K), phenotype(J, L).;false;false
7;false,false,false;interaction(A, M), recursion_proteinclass(M, B).;false;false
8;;proteinclass(A, B) :- interaction(C, A), interaction(A, D).;true;true
8;true;interaction(E, C), recursion_proteinclass(E, B).;false;true
8;true,false;interaction(A, C).;false;false
8;false;location(A, F).;true;true
8;false,true;location(G, F), recursion_proteinclass(G, B).;true;false
8;false,true,true;interaction(H, A), interaction(H, G).;false;false
8;false,false;interaction(A, I), interaction(I, J).;false;true
8;false,false,false;interaction(A, K).;false;false
9;;proteinclass(A, B) :- interaction(C, A), interaction(C, C).;true;true
9;true;recursion_proteinclass(C, B), interaction(A, C).;false;false
9;false;enzyme(A, D), interaction(A, E).;true;true
9;false,true;interaction(E, F), recursion_proteinclass(F, B).;false;true
9;false,true,false;interaction(E, A).;false;false
9;false,false;interaction(G, A), phenotype(A, H).;true;true
9;false,false,true;interaction(I, G), recursion_proteinclass(I, B).;false;false
9;false,false,false;interaction(A, J), enzyme(J, K).;false;false


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.8385410919622573;  // std dev = 0.990, 51.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=50 */
%   else if ( follows(D, A), follows(D, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), follows(E, G) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, H), tweets(A, I) )
%   | | | then return -0.006512719035825991;  // std dev = 3.945, 133.000 (wgt'ed) examples reached here.  /* #neg=115 #pos=18 */
%   | | | else return 0.021414241221961325;  // std dev = 3.659, 98.000 (wgt'ed) examples reached here.  /* #neg=82 #pos=16 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(D, A), follows(D, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.6827045365253277;  // std dev = 1.385, 50.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=48 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then return 0.7234138077162874;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( follows(F, A), follows(G, F) )
%   | | then if ( recursion_accounttype(G, B) )
%   | | | then return 0.8578006335744488;  // std dev = 0.005, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.13412566285432562;  // std dev = 0.997, 124.000 (wgt'ed) examples reached here.  /* #neg=123 #pos=1 */
%   | | else if ( follows(A, H) )
%   | | | then return 0.10373165449526266;  // std dev = 3.581, 69.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=17 */
%   | | | else return 0.20552214791046128;  // std dev = 2.133, 20.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=7 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, A) )
%   | then if ( follows(A, D), follows(C, E) )
%   | | then return 0.13637072382471843;  // std dev = 4.082, 139.000 (wgt'ed) examples reached here.  /* #neg=88 #pos=51 */
%   | | else return 0.08901437455552019;  // std dev = 1.333, 14.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=4 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.16490644345830313;  // std dev = 3.565, 62.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=21 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5592318388819554;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(H, A) )
%   | | then return -0.07903662685077532;  // std dev = 1.158, 34.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=2 */
%   | | else if ( follows(A, I), follows(I, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.21710880062773744;  // std dev = 2.068, 18.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=7 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, C) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then return 0.5132247307954613;  // std dev = 0.989, 47.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=46 */
%   | | else return 0.5355358969551695;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return -0.14075311580166605;  // std dev = 0.814, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(F, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.4511697212669116;  // std dev = 0.167, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( follows(G, A), follows(A, H) )
%   | | then if ( tweets(A, I), tweets(G, I) )
%   | | | then return -0.07709350699807115;  // std dev = 1.964, 77.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=6 */
%   | | | else return -0.07812817387923607;  // std dev = 1.259, 28.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=2 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.04849111677478849;  // std dev = 3.242, 64.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=14 */
%   | | | else return 0.11271083059692669;  // std dev = 2.856, 40.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=12 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.41037685259914053;  // std dev = 0.152, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   else if ( follows(D, A), tweets(D, E) )
%   | then if ( follows(A, F), follows(D, F) )
%   | | then if ( follows(G, D), recursion_accounttype(G, B) )
%   | | | then return 0.6113419465506877;  // std dev = 0.333, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.13357139996129888;  // std dev = 0.048, 102.000 (wgt'ed) examples reached here.  /* #neg=102 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0.3159695772681135;  // std dev = 1.05e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.02008364346492296;  // std dev = 1.938, 35.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=6 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then return 0.7866466249419193;  // std dev = 0.377, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | else if ( tweets(A, I), follows(A, J) )
%   | | | then return -0.1840142780795834;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | | else return -0.20873201969687463;  // std dev = 0.062, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.282316017585235;  // std dev = 0.993, 51.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=50 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(D, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(D, E) )
%   | | | then return -0.05654652005152112;  // std dev = 2.095, 116.000 (wgt'ed) examples reached here.  /* #neg=104 #pos=12 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return -0.04256569060402114;  // std dev = 0.256, 33.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=3 */
%   | | else if ( follows(G, A), follows(G, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.03719828796751368;  // std dev = 3.649, 100.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=28 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.2293601001976156;  // std dev = 1.426, 50.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=48 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0.4095601746122293;  // std dev = 1.022, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else if ( tweets(D, F), follows(D, D) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10842975199398955;  // std dev = 0.991, 135.000 (wgt'ed) examples reached here.  /* #neg=134 #pos=1 */
%   | else if ( follows(G, A), follows(A, G) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.11300083311424527;  // std dev = 0.389, 68.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=24 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.19231518327136665;  // std dev = 1.240, 50.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=48 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( tweets(D, E) )
%   | | then if ( tweets(A, F) )
%   | | | then return -0.03672984024162446;  // std dev = 1.552, 64.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=7 */
%   | | | else return -0.0735953537263958;  // std dev = 0.564, 18.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then return 0.016777327574397715;  // std dev = 0.337, 82.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=20 */
%   | | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0.1442781646662784;  // std dev = 5.27e-09, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.00404189896557688;  // std dev = 2.048, 39.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(D, A) )
%   then if ( follows(C, E), recursion_accounttype(E, B) )
%   | then return 0.19822318423724147;  // std dev = 1.731, 56.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=54 */
%   | else if ( follows(C, A) )
%   | | then return -0.09944735860927491;  // std dev = 0.043, 108.000 (wgt'ed) examples reached here.  /* #neg=108 */
%   | | else return -2.3980882344299927E-4;  // std dev = 0.940, 9.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   else if ( recursion_accounttype(F, B) )
%   | then if ( follows(A, G), follows(F, G) )
%   | | then return 0.5518476953181516;  // std dev = 0.684, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else return 0.3725455970153598;  // std dev = 0.955, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then return -0.11322527234523712;  // std dev = 0.012, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | else if ( follows(J, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.19570574891237213;  // std dev = 0.098, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(C, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0.18495744311666817;  // std dev = 1.475, 65.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=64 */
%   | | else if ( follows(A, D) )
%   | | | then return -0.09083613098649206;  // std dev = 0.043, 126.000 (wgt'ed) examples reached here.  /* #neg=126 */
%   | | | else return -0.07635362531937796;  // std dev = 0.977, 35.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=1 */
%   | else if ( follows(A, F) )
%   | | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | | then return 0.3409887967604506;  // std dev = 1.368, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return -0.10989256056692824;  // std dev = 1.237, 53.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=4 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.15518499114811127;  // std dev = 1.242, 14.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=7 */


Results
   AUC ROC   = 0.992541
   AUC PR    = 0.345641
   CLL	      = -0.126372
   Precision = 0.331361 at threshold = 0.5
   Recall    = 0.888889
   F1        = 0.482759


Total learning time: 5.527 seconds
Total inference time: 43.825 seconds
AUC ROC: 0.992541


Results scoring model
   AUC ROC   = 0.990501
   AUC PR    = 0.353294
   CLL	      = -0.134975
   Precision = 0.347107 at threshold = 0.5
   Recall    = 0.903226
   F1        = 0.501493


Total scoring time: 24.088 seconds
Parameter learned model CLL: -0.134975


Structure after Parameter Learning
[['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(D, A), follows(D, D)', 'false,false': 'follows(A, E), recursion_accounttype(E, B)', 'false,false,true': 'follows(F, A), follows(E, G)', 'false,false,false': 'follows(A, H), tweets(A, I)'}, {'true': [0.99, 1, 50], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 5], 'false,false,true,false': [0.0, 0, 4], 'false,false,false,true': [3.945, 115, 18], 'false,false,false,false': [3.659, 82, 16]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, C)', 'true,false': 'follows(D, A), follows(D, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,false': 'follows(F, A), follows(G, F)', 'false,false,true': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(A, H)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [1.385, 2, 48], 'false,true': [0.0, 0, 11], 'false,false,true,true': [0.005, 0, 9], 'false,false,true,false': [0.997, 123, 1], 'false,false,false,true': [3.581, 52, 17], 'false,false,false,false': [2.133, 13, 7]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, A)', 'true,true': 'follows(A, D), follows(C, E)', 'true,false': 'follows(F, A), recursion_accounttype(F, B)', 'false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false': 'follows(H, A)', 'false,false,false': 'follows(A, I), follows(I, A)'}, {'true,true,true': [4.082, 88, 51], 'true,true,false': [1.333, 10, 4], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.565, 41, 21], 'false,true': [0.0, 0, 8], 'false,false,true': [1.158, 32, 2], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.068, 11, 7]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D), follows(D, C)', 'true,true': 'recursion_accounttype(D, B)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(F, F)', 'false,false': 'follows(G, A), follows(A, H)', 'false,false,true': 'tweets(A, I), tweets(G, I)', 'false,false,false': 'tweets(A, J)'}, {'true,true,true': [0.989, 1, 46], 'true,true,false': [0.0, 0, 1], 'true,false': [0.814, 2, 1], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.167, 0, 11], 'false,false,true,true': [1.964, 71, 6], 'false,false,true,false': [1.259, 26, 2], 'false,false,false,true': [3.242, 50, 14], 'false,false,false,false': [2.856, 28, 12]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A), tweets(D, E)', 'false,true': 'follows(A, F), follows(D, F)', 'false,true,true': 'follows(G, D), recursion_accounttype(G, B)', 'false,true,false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(H, B)', 'false,false,false': 'tweets(A, I), follows(A, J)'}, {'true': [0.152, 0, 48], 'false,true,true,true': [0.333, 0, 6], 'false,true,true,false': [0.048, 102, 0], 'false,true,false,true': [1.05e-08, 0, 8], 'false,true,false,false': [1.938, 29, 6], 'false,false,true': [0.377, 0, 25], 'false,false,false,true': [0.0, 28, 0], 'false,false,false,false': [0.062, 29, 0]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(D, D)', 'false,true,false': 'tweets(D, E)', 'false,false': 'follows(F, A)', 'false,false,false': 'follows(G, A), follows(G, G)'}, {'true': [0.993, 1, 50], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [2.095, 104, 12], 'false,true,false,false': [0.0, 0, 0], 'false,false,true': [0.256, 30, 3], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [3.649, 72, 28]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(D, F), follows(D, D)', 'false,false': 'follows(G, A), follows(A, G)'}, {'true': [1.426, 2, 48], 'false,true,true': [1.022, 0, 20], 'false,true,false,true': [0.0, 0, 0], 'false,true,false,false': [0.991, 134, 1], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.389, 44, 24]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'tweets(D, E)', 'false,true,true': 'tweets(A, F)', 'false,false': 'follows(A, G)', 'false,false,false': 'follows(H, A), recursion_accounttype(H, B)'}, {'true': [1.24, 2, 48], 'false,true,true,true': [1.552, 57, 7], 'false,true,true,false': [0.564, 17, 1], 'false,true,false': [0.0, 0, 0], 'false,false,true': [0.337, 62, 20], 'false,false,false,true': [5.27e-09, 0, 8], 'false,false,false,false': [2.048, 30, 9]}], ['accounttype(A, B)', {'': 'follows(A, C), follows(D, A)', 'true': 'follows(C, E), recursion_accounttype(E, B)', 'true,false': 'follows(C, A)', 'false': 'recursion_accounttype(F, B)', 'false,true': 'follows(A, G), follows(F, G)', 'false,false': 'follows(H, A), follows(I, H)', 'false,false,false': 'follows(J, A)'}, {'true,true': [1.731, 2, 54], 'true,false,true': [0.043, 108, 0], 'true,false,false': [0.94, 8, 1], 'false,true,true': [0.684, 0, 21], 'false,true,false': [0.955, 0, 17], 'false,false,true': [0.012, 22, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.098, 57, 0]}], ['accounttype(A, B)', {'': 'follows(A, C), follows(C, C)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'follows(A, D)', 'false,false': 'follows(A, F)', 'false,false,true': 'follows(F, G), recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.0, 0, 0], 'false,true,true': [1.475, 1, 64], 'false,true,false,true': [0.043, 126, 0], 'false,true,false,false': [0.977, 34, 1], 'false,false,true,true': [1.368, 1, 17], 'false,false,true,false': [1.237, 49, 4], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.242, 7, 7]}]]
[{'': [0.019223375624760057, 0.1470659722222223], 'false': [nan, 0.1470659722222223], 'false,false': [-2.9605947323337506e-16, 0.12552238526264586], 'false,false,false': [0.11702187800327832, 0.1366097459391922], 'false,false,true': [0.0, 0.0]}, {'': [0.038345550048114206, 0.1463931758021503], 'false': [-8.074349270001139e-17, 0.12966018748816113], 'false,false': [0.06955316841065282, 0.197026196260125], 'false,false,false': [0.1858648266239765, 0.22749999999999976], 'false,false,true': [2.595748460423566e-06, 0.008020291605795989], 'true': [nan, 0.038345550048114206], 'true,false': [nan, 0.03834555004811349]}, {'': [0.14524898861026003, 0.14400927358653662], 'true': [0.12071254285485306, 0.205029783399742], 'true,false': [nan, 0.205029783399742], 'false': [-1.1102230246251565e-16, 0.12789319704555682], 'false,false': [0.03942594257142839, 0.23765432098765427], 'false,false,false': [nan, 0.23765432098765427], 'true,true': [0.11987664769335014, 0.12697437126453465]}, {'': [0.05586358439065514, 0.12533611967304298], 'false': [0.0025353693102222363, 0.12151080178625641], 'false,false': [0.05183074852188139, 0.18047240407247306], 'false,false,false': [0.1642270767057365, 0.20392697607869992], 'true': [0.02037042126152196, 0.220652831090164], 'false,false,true': [0.05008989336274497, 0.05661731515009947], 'true,true': [0.02079346389369796, 0.0], 'false,true': [nan, 0.0025353693102222363]}, {'': [0.00047953793190584165, 0.11399055913768034], 'false': [0.0559289592461619, 0.20676774733784775], 'false,false': [0.005686126715273545, 0.0002193052398421043], 'false,true': [0.030161650827125103, 0.10062334982344659], 'false,true,false': [1.3877787807814457e-17, 0.10733488225463697], 'false,true,true': [0.018460839612690183, 2.2384183533987048e-05], 'false,false,false': [-4.7580986769649563e-17, 0.0001309242121669676]}, {'': [0.01932659552089426, 0.08179754241011206], 'false': [0.03784419456130862, 0.11758491302978223], 'false,false': [0.06564864817264418, 0.13314526655925815], 'false,false,false': [nan, 0.13314526655925815], 'false,true': [nan, 0.03784419456130862], 'false,true,false': [0.03784419456130862, nan]}, {'': [0.04067400570008552, 0.08136362980271754], 'false': [0.043224292665251705, 0.15168743638367155], 'false,false': [nan, 0.15168743638367155], 'false,true': [0.052197209864446314, 0.007273866557992649], 'false,true,false': [nan, 0.007273866557992643]}, {'': [0.030763255427198665, 0.07877968318385983], 'false': [0.033494463737406485, 0.10589036485985914], 'false,false': [0.11381345487156781, 0.09198829324412588], 'false,false,false': [3.469446951953614e-18, 0.1075102466930489], 'false,true': [0.033494463737406485, nan], 'false,true,true': [0.03763882249192261, 0.017698231438598777]}, {'': [0.04132570905731939, 0.10644956071912501], 'false': [0.04429543062018206, 0.0014910359593601945], 'false,true': [0.022310356146777222, 0.05368677717290948], 'true': [0.053511600174605004, 0.008262665612880382], 'true,false': [1.7363812600179195e-05, 0.09812123681515833], 'false,false': [6.381578055017742e-06, 0.00016954604823931114], 'false,false,false': [nan, 0.00016954604823931114]}, {'': [nan, 0.046984663408992225], 'false': [0.02911189581331648, 0.09342693810240889], 'false,false': [0.08638219723848566, 0.11016637261739423], 'false,false,false': [nan, 0.11016637261739423], 'false,false,true': [0.1039776722914761, 0.02886705198805419], 'false,true': [0.03347603872329461, 0.005970322339811557], 'false,true,false': [1.4455747109864793e-05, 0.027247295401052286]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
0;false;follows(A, E), recursion_accounttype(E, B).;true;true
0;false,true;follows(F, A), follows(E, G).;true;true
1;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
1;false;follows(E, A), recursion_accounttype(E, B).;true;true
1;false,false;follows(F, A), follows(G, F).;true;true
1;false,false,true;recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
3;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
3;true;follows(C, D), follows(D, C).;true;true
3;true,true;recursion_accounttype(D, B).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(D, A), tweets(D, E).;true;true
4;false,true;follows(A, F), follows(D, F).;true;true
4;false,true,true;follows(G, D), recursion_accounttype(G, B).;true;true
4;false,true,false;recursion_accounttype(D, B).;true;true
4;false,false;recursion_accounttype(H, B).;true;true
4;false,false,false;tweets(A, I), follows(A, J).;true;true
7;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
7;false;follows(A, D), follows(D, A).;true;true
7;false,false;follows(A, G).;true;true
7;false,false,false;follows(H, A), recursion_accounttype(H, B).;true;true
8;;accounttype(A, B) :- follows(A, C), follows(D, A).;true;true
8;true;follows(C, E), recursion_accounttype(E, B).;true;true
8;true,false;follows(C, A).;true;true
8;false;recursion_accounttype(F, B).;true;true
8;false,false;follows(H, A), follows(I, H).;true;true
9;;accounttype(A, B) :- follows(D, A).;true;true
9;true;follows(E, D), recursion_accounttype(E, B).;true;true
9;true,false;follows(A, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then return 0.8581489350995118;  // std dev = 2.38e-07, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   | else return 0.7470378239884012;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else if ( follows(A, E), recursion_accounttype(E, B) )
%   | then if ( follows(F, A), follows(E, G) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.14185106490048796;  // std dev = 0.000, 137.000 (wgt'ed) examples reached here.  /* #neg=137 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.13474467978036342;  // std dev = 3.067, 47.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=13 */
%   | | | else return 0.31648226843284566;  // std dev = 2.441, 24.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=11 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( follows(E, F), follows(F, A) )
%   | | then if ( follows(F, E) )
%   | | | then return 0.7194734122109543;  // std dev = 7.30e-08, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.4694734122109545;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.7194734122109544;  // std dev = 1.05e-08, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return 0.7194734122109545;  // std dev = 1.05e-08, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.7353787942131409;  // std dev = 0.010, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.11949451141050843;  // std dev = 0.842, 142.000 (wgt'ed) examples reached here.  /* #neg=141 #pos=1 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.09223502013902787;  // std dev = 3.117, 52.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=13 */
%   | | | else return 0.3151033254158122;  // std dev = 2.345, 22.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=11 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.5190012321585663;  // std dev = 0.197, 50.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=48 */
%   | else if ( follows(A, E), follows(E, F) )
%   | | then if ( follows(A, F) )
%   | | | then return -0.0756392327444194;  // std dev = 2.287, 145.000 (wgt'ed) examples reached here.  /* #neg=135 #pos=10 */
%   | | | else return 0.13374401876697514;  // std dev = 2.843, 43.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=13 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.40856844393876646;  // std dev = 0.952, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.16285829261271076;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.5787351911402226;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(I, A) )
%   | | then return -0.06340895294120337;  // std dev = 0.175, 27.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=2 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.26285829261271076;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.07535829261271085;  // std dev = 1.854, 16.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=5 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, C) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then return 0.4304241578144726;  // std dev = 0.015, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | | else return 0.42638308398069735;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0.42638308398069724;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(A, F) )
%   | | then return 0.5700638109380812;  // std dev = 1.49e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.43508058905758723;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.5713640745500429;  // std dev = 0.111, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.10920530794655034;  // std dev = 0.133, 136.000 (wgt'ed) examples reached here.  /* #neg=136 */
%   | | else if ( tweets(A, I), follows(A, J) )
%   | | | then return 0.2344962149400532;  // std dev = 2.436, 26.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=11 */
%   | | | else return 0.07580031039978691;  // std dev = 2.949, 44.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=13 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.32944909029749136;  // std dev = 0.014, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   else if ( follows(D, A), tweets(D, E) )
%   | then if ( follows(A, F), follows(D, F) )
%   | | then if ( follows(G, D), recursion_accounttype(G, B) )
%   | | | then return 0.43089211677857064;  // std dev = 0.004, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.09679700119348421;  // std dev = 0.063, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0.3326480822707052;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.007188516543239711;  // std dev = 1.188, 33.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=6 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), follows(I, J) )
%   | | | then return 0.7577330922813797;  // std dev = 0.346, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.70505839876808;  // std dev = 0.128, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( tweets(A, K), follows(A, L) )
%   | | | then return -0.24167653196825617;  // std dev = 0.204, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | | else return -0.24687235309709418;  // std dev = 0.213, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C), tweets(A, D) )
%   | then if ( follows(E, A), follows(E, C) )
%   | | then if ( recursion_accounttype(E, B), tweets(E, D) )
%   | | | then return 0.25797948446323005;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.007979484463229936;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | else return 0.2706439889653941;  // std dev = 0.022, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.2660124891011954;  // std dev = 0.019, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   else if ( follows(F, A) )
%   | then return -0.05242247331157243;  // std dev = 0.140, 155.000 (wgt'ed) examples reached here.  /* #neg=140 #pos=15 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.5347289542318125;  // std dev = 0.663, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return -0.17963744444196894;  // std dev = 0.220, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.09708890587650551;  // std dev = 0.993, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | | else return 0.029012679366575114;  // std dev = 1.479, 16.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=5 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(C, D), follows(E, C) )
%   | then if ( tweets(A, D), follows(E, A) )
%   | | then if ( recursion_accounttype(E, B), tweets(E, D) )
%   | | | then return 0.2155935321662007;  // std dev = 0.058, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return -0.014195356311298257;  // std dev = 1.487, 12.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | else return 0.22165434785751348;  // std dev = 0.021, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else return -0.12210759102472131;  // std dev = 0.817, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(F, A) )
%   | then return -0.04229972738272478;  // std dev = 0.139, 146.000 (wgt'ed) examples reached here.  /* #neg=131 #pos=15 */
%   | else if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.3442661279650884;  // std dev = 1.325, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | | else return -0.16758933207612778;  // std dev = 0.267, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.00852008293551617;  // std dev = 1.371, 27.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=7 */
%   | | | else return 0.1363554571999822;  // std dev = 1.314, 11.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=5 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then return 0.19056144915642056;  // std dev = 0.027, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | else return 0.28705978681957084;  // std dev = 0.047, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.056904417628949266;  // std dev = 0.867, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(A, E), follows(E, A) )
%   | then if ( tweets(A, F) )
%   | | then return -0.044569571138388206;  // std dev = 0.126, 83.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=7 */
%   | | else return -0.06336437127955018;  // std dev = 0.087, 24.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(A, H), follows(H, I) )
%   | | | then return -0.0017176366518789927;  // std dev = 1.860, 65.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=15 */
%   | | | else return 0.11069322040416868;  // std dev = 0.939, 9.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=5 */
%   | | else if ( follows(J, A), recursion_accounttype(J, B) )
%   | | | then return 0.2037197003751452;  // std dev = 0.050, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.029211790847039336;  // std dev = 1.830, 50.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(D, A) )
%   then if ( follows(C, E), recursion_accounttype(E, B) )
%   | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.13852133659706528;  // std dev = 0.979, 40.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=39 */
%   | | | else return 0.2345599123264921;  // std dev = 0.006, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | | then return 0.23215570833542035;  // std dev = 0.041, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.2715569452273171;  // std dev = 0.919, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | else return -0.07457651361754512;  // std dev = 0.053, 127.000 (wgt'ed) examples reached here.  /* #neg=126 #pos=1 */
%   else if ( recursion_accounttype(I, B) )
%   | then if ( follows(A, J), recursion_accounttype(J, B) )
%   | | then return -0.049809746574525395;  // std dev = 0.866, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( follows(K, A), recursion_accounttype(K, B) )
%   | | | then return 0.1727078159988561;  // std dev = 0.044, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.44504088919414053;  // std dev = 0.426, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return -0.13892666412571802;  // std dev = 0.050, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.1487501349896583;  // std dev = 0.024, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.19342396666935827;  // std dev = 0.036, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.3365325419558831;  // std dev = 0.099, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return -0.07027301195553187;  // std dev = 0.056, 122.000 (wgt'ed) examples reached here.  /* #neg=121 #pos=1 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.14977537186322598;  // std dev = 0.039, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, H), tweets(A, I) )
%   | | then if ( tweets(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.27908122804838814;  // std dev = 0.186, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.11999445766208254;  // std dev = 0.133, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | else if ( tweets(A, K) )
%   | | | then return -0.05125979695901646;  // std dev = 0.850, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return -0.0039546287494738415;  // std dev = 1.726, 35.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=11 */


Results
   AUC ROC   = 0.992794
   AUC PR    = 0.36041
   CLL	      = -0.116064
   Precision = 0.337802 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.50501


Total learning time: 16.124 seconds
Total inference time: 73.541 seconds
AUC ROC: 0.992794


Results scoring model
   AUC ROC   = 0.994957
   AUC PR    = 0.43228
   CLL	      = -0.11718
   Precision = 0.351145 at threshold = 0.5
   Recall    = 0.989247
   F1        = 0.51831


Total scoring time: 47.162 seconds
Refined model CLL: -0.11718


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.992794
   AUC PR    = 0.36041
   CLL	      = -0.116064
   Precision = 0.337802 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.50501


Total learning time: 92.90100000000001 seconds
Total inference time: 73.541 seconds
AUC ROC: 0.992794
Total revision time: 92.90100000000001
Best scored revision CLL: -0.11718


Dataset: 7_yeast_twitter, Fold: 1, Type: Transfer (trRDN-B), Time: 00:44:12
{'AUC ROC': 0.992794, 'AUC PR': 0.36041, 'CLL': -0.116064, 'Precision': [0.337802, 0.5], 'Recall': 1.0, 'F1': 0.50501, 'Learning time': 92.90100000000001, 'Inference time': 73.541, 'parameter_0.6': {'AUC ROC': 0.992541, 'AUC PR': 0.345641, 'CLL': -0.126372, 'Precision': [0.331361, 0.5], 'Recall': 0.888889, 'F1': 0.482759, 'Learning time': 5.527, 'Inference time': 43.825}}


Amount of data: 0.8
******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;false;true
0;false;interaction(A, D), interaction(D, D).;true;true
0;false,true;interaction(E, A), interaction(D, E).;true;true
0;false,true,true;interaction(A, A).;false;false
0;false,true,false;enzyme(D, F), phenotype(A, G).;false;false
0;false,false;interaction(H, A), recursion_proteinclass(H, B).;true;true
0;false,false,true;interaction(A, I), interaction(J, H).;false;false
0;false,false,false;interaction(K, A), complex(A, L).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
1;true;interaction(C, C).;false;true
1;true,false;interaction(A, D), interaction(D, D).;true;false
1;true,false,true;complex(C, E).;false;false
1;false;interaction(A, F), recursion_proteinclass(F, B).;false;true
1;false,false;interaction(A, G), interaction(G, H).;true;true
1;false,false,true;recursion_proteinclass(H, B).;false;false
1;false,false,false;interaction(I, A), location(I, J).;false;false
2;;proteinclass(A, B) :- interaction(C, A), enzyme(C, D).;true;true
2;true;location(A, E), location(C, E).;false;true
2;true,false;interaction(A, F), phenotype(A, G).;true;true
2;true,false,true;interaction(F, A), interaction(H, C).;false;false
2;true,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;false;interaction(A, J), recursion_proteinclass(J, B).;false;true
2;false,false;interaction(A, K), enzyme(K, L).;false;true
2;false,false,false;interaction(M, A), interaction(A, M).;false;false
3;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
3;true;interaction(D, C), interaction(C, D).;true;false
3;true,true;recursion_proteinclass(D, B).;false;false
3;false;interaction(A, E), recursion_proteinclass(E, B).;true;true
3;false,true;interaction(E, F), interaction(F, F).;false;false
3;false,false;interaction(A, G), interaction(H, A).;true;true
3;false,false,true;complex(A, I), complex(G, I).;false;false
3;false,false,false;enzyme(A, J), complex(A, K).;false;false
4;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
4;false;interaction(A, D), complex(D, E).;true;true
4;false,true;interaction(F, A), interaction(F, D).;true;true
4;false,true,true;interaction(D, G), recursion_proteinclass(G, B).;false;false
4;false,true,false;recursion_proteinclass(D, B).;false;false
4;false,false;enzyme(A, H), location(A, I).;true;true
4;false,false,true;enzyme(J, H), recursion_proteinclass(J, B).;false;false
4;false,false,false;complex(A, K), interaction(L, A).;false;false
5;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;false;true
5;false;interaction(D, A), interaction(A, D).;true;true
5;false,true;interaction(D, D).;true;true
5;false,true,true;interaction(A, A).;false;false
5;false,true,false;phenotype(D, E), complex(D, F).;false;false
5;false,false;enzyme(A, G), interaction(A, H).;true;true
5;false,false,true;enzyme(H, I).;false;false
5;false,false,false;interaction(A, J), interaction(J, J).;false;false
6;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
6;false;interaction(A, D), phenotype(A, E).;true;true
6;false,true;location(D, F), location(A, F).;true;true
6;false,true,true;interaction(D, G), recursion_proteinclass(G, B).;false;false
6;false,true,false;complex(D, H), interaction(D, D).;false;false
6;false,false;interaction(A, I), interaction(I, A).;true;true
6;false,false,true;interaction(I, I).;false;false
6;false,false,false;location(A, J).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
7;false;interaction(D, A), interaction(A, D).;true;true
7;false,true;complex(D, E).;true;true
7;false,true,true;complex(A, F), enzyme(D, G).;false;false
7;false,true,false;interaction(D, D), complex(A, H).;false;false
7;false,false;enzyme(A, I), interaction(J, A).;true;true
7;false,false,true;enzyme(J, K), phenotype(J, L).;false;false
7;false,false,false;interaction(A, M), recursion_proteinclass(M, B).;false;false
8;;proteinclass(A, B) :- interaction(C, A), interaction(A, D).;true;true
8;true;interaction(E, C), recursion_proteinclass(E, B).;false;true
8;true,false;interaction(A, C).;false;false
8;false;location(A, F).;true;true
8;false,true;location(G, F), recursion_proteinclass(G, B).;true;false
8;false,true,true;interaction(H, A), interaction(H, G).;false;false
8;false,false;interaction(A, I), interaction(I, J).;false;true
8;false,false,false;interaction(A, K).;false;false
9;;proteinclass(A, B) :- interaction(C, A), interaction(C, C).;true;true
9;true;recursion_proteinclass(C, B), interaction(A, C).;false;false
9;false;enzyme(A, D), interaction(A, E).;true;true
9;false,true;interaction(E, F), recursion_proteinclass(F, B).;false;true
9;false,true,false;interaction(E, A).;false;false
9;false,false;interaction(G, A), phenotype(A, H).;true;true
9;false,false,true;interaction(I, G), recursion_proteinclass(I, B).;false;false
9;false,false,false;interaction(A, J), enzyme(J, K).;false;false


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.8282981888308559;  // std dev = 1.393, 67.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=65 */
%   else if ( follows(D, A), follows(D, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), follows(E, G) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.6914822684328455;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else if ( follows(A, H), tweets(A, I) )
%   | | | then return 0.002657605619743138;  // std dev = 4.625, 173.000 (wgt'ed) examples reached here.  /* #neg=148 #pos=25 */
%   | | | else return 0.06153876560798695;  // std dev = 4.372, 118.000 (wgt'ed) examples reached here.  /* #neg=94 #pos=24 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(D, A), follows(D, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.7111706854032583;  // std dev = 0.969, 61.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=60 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then return 0.7254585748682151;  // std dev = 7.30e-08, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(F, A), follows(G, F) )
%   | | then if ( recursion_accounttype(G, B) )
%   | | | then return 0.8561327468791551;  // std dev = 0.011, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return -0.13799348750156773;  // std dev = 1.000, 169.000 (wgt'ed) examples reached here.  /* #neg=168 #pos=1 */
%   | | else if ( follows(A, H) )
%   | | | then return 0.1674833444889786;  // std dev = 4.144, 80.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=25 */
%   | | | else return 0.20763436529721577;  // std dev = 2.535, 28.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=10 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, A) )
%   | then if ( follows(A, D), follows(C, E) )
%   | | then return 0.10104678663659412;  // std dev = 4.815, 203.000 (wgt'ed) examples reached here.  /* #neg=138 #pos=65 */
%   | | else return 0.14845354112760079;  // std dev = 1.579, 18.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=7 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.16850952391904378;  // std dev = 4.289, 85.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=30 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5612516183501227;  // std dev = 2.98e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( follows(H, A) )
%   | | then return -0.0785965495112123;  // std dev = 1.149, 31.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=2 */
%   | | else if ( follows(A, I), follows(I, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.09990504059731814;  // std dev = 2.687, 36.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=10 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, C) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then return 0.5053489871065815;  // std dev = 1.390, 58.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=56 */
%   | | else return 0.21217820080661665;  // std dev = 0.824, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.5424755643327535;  // std dev = 0.020, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(F, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.45685830288393103;  // std dev = 0.192, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(G, A), follows(A, H) )
%   | | then if ( tweets(A, I), tweets(G, I) )
%   | | | then return -0.08382053733632795;  // std dev = 2.565, 148.000 (wgt'ed) examples reached here.  /* #neg=138 #pos=10 */
%   | | | else return -0.0793832741280076;  // std dev = 1.254, 28.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=2 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.08811994040762527;  // std dev = 3.534, 71.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=18 */
%   | | | else return 0.08830002594665942;  // std dev = 3.668, 67.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=19 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.3705039317450303;  // std dev = 1.654, 63.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=60 */
%   else if ( follows(D, A), tweets(D, E) )
%   | then if ( follows(A, F), follows(D, F) )
%   | | then if ( follows(G, D), recursion_accounttype(G, B) )
%   | | | then return 0.5562252712146241;  // std dev = 0.983, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return -0.1296031698838845;  // std dev = 0.033, 130.000 (wgt'ed) examples reached here.  /* #neg=130 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0.32472177097493055;  // std dev = 0.091, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.028211692615330786;  // std dev = 2.004, 50.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=6 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then return 0.7828169374536809;  // std dev = 0.378, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | else if ( tweets(A, I), follows(A, J) )
%   | | | then return -0.20209855940122792;  // std dev = 1.49e-08, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | | else return -0.20571972728462837;  // std dev = 0.117, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.31380316887773;  // std dev = 0.253, 65.000 (wgt'ed) examples reached here.  /* #pos=65 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(D, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(D, E) )
%   | | | then return -0.039980950631228876;  // std dev = 2.501, 136.000 (wgt'ed) examples reached here.  /* #neg=120 #pos=16 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return -0.08540838184046366;  // std dev = 0.226, 50.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=3 */
%   | | else if ( follows(G, A), follows(G, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.07978654417829018;  // std dev = 4.117, 120.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=40 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.2437778095522896;  // std dev = 1.386, 62.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=60 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0.4122162700480489;  // std dev = 1.191, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | else if ( tweets(D, F), follows(D, D) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10903386265613069;  // std dev = 0.995, 176.000 (wgt'ed) examples reached here.  /* #neg=175 #pos=1 */
%   | else if ( follows(G, A), follows(A, G) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.09521907073661531;  // std dev = 0.384, 100.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=35 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.2140471348517165;  // std dev = 0.970, 61.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=60 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( tweets(D, E) )
%   | | then if ( tweets(A, F) )
%   | | | then return -0.04420741470274098;  // std dev = 1.966, 118.000 (wgt'ed) examples reached here.  /* #neg=107 #pos=11 */
%   | | | else return -0.05235092843544608;  // std dev = 0.562, 11.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then return 0.028497021886750816;  // std dev = 0.343, 104.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=30 */
%   | | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0.13912124041869078;  // std dev = 5.27e-09, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.02173253951594276;  // std dev = 2.306, 53.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=12 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(D, A) )
%   then if ( follows(C, E), recursion_accounttype(E, B) )
%   | then return 0.24387525981337949;  // std dev = 1.125, 70.000 (wgt'ed) examples reached here.  /* #pos=70 */
%   | else if ( follows(C, A) )
%   | | then return -0.09776663645546788;  // std dev = 0.035, 124.000 (wgt'ed) examples reached here.  /* #neg=124 */
%   | | else return -0.03644808922469683;  // std dev = 0.998, 17.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
%   else if ( recursion_accounttype(F, B) )
%   | then if ( follows(A, G), follows(F, G) )
%   | | then return 0.5317412172426998;  // std dev = 0.707, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | else return 0.38182432476583456;  // std dev = 1.109, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then return -0.11226290522372544;  // std dev = 3.38e-05, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | else if ( follows(J, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.20537299434181186;  // std dev = 0.030, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(C, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0.14345534015561098;  // std dev = 2.473, 87.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=82 */
%   | | else if ( follows(A, D) )
%   | | | then return -0.08940581438464958;  // std dev = 0.032, 128.000 (wgt'ed) examples reached here.  /* #neg=128 */
%   | | | else return -0.0807267541983644;  // std dev = 1.011, 54.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=2 */
%   | else if ( follows(A, F) )
%   | | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | | then return 0.3556309747672036;  // std dev = 1.327, 27.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=26 */
%   | | | else return -0.14314859466920865;  // std dev = 1.277, 69.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=4 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.04906188258300961;  // std dev = 1.728, 30.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=10 */


Results
   AUC ROC   = 0.992997
   AUC PR    = 0.369713
   CLL	      = -0.127728
   Precision = 0.345714 at threshold = 0.5
   Recall    = 0.960317
   F1        = 0.508403


Total learning time: 6.697 seconds
Total inference time: 41.141 seconds
AUC ROC: 0.992997


Results scoring model
   AUC ROC   = 0.992125
   AUC PR    = 0.403212
   CLL	      = -0.134757
   Precision = 0.356495 at threshold = 0.5
   Recall    = 0.951613
   F1        = 0.518681


Total scoring time: 37.341 seconds
Parameter learned model CLL: -0.134757


Structure after Parameter Learning
[['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(D, A), follows(D, D)', 'false,false': 'follows(A, E), recursion_accounttype(E, B)', 'false,false,true': 'follows(F, A), follows(E, G)', 'false,false,false': 'follows(A, H), tweets(A, I)'}, {'true': [1.393, 2, 65], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 5], 'false,false,true,false': [0.913, 1, 5], 'false,false,false,true': [4.625, 148, 25], 'false,false,false,false': [4.372, 94, 24]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, C)', 'true,false': 'follows(D, A), follows(D, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,false': 'follows(F, A), follows(G, F)', 'false,false,true': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(A, H)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [0.969, 1, 60], 'false,true': [7.3e-08, 0, 15], 'false,false,true,true': [0.011, 0, 13], 'false,false,true,false': [1.0, 168, 1], 'false,false,false,true': [4.144, 55, 25], 'false,false,false,false': [2.535, 18, 10]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, A)', 'true,true': 'follows(A, D), follows(C, E)', 'true,false': 'follows(F, A), recursion_accounttype(F, B)', 'false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false': 'follows(H, A)', 'false,false,false': 'follows(A, I), follows(I, A)'}, {'true,true,true': [4.815, 138, 65], 'true,true,false': [1.579, 11, 7], 'true,false,true': [0.0, 0, 0], 'true,false,false': [4.289, 55, 30], 'false,true': [2.98e-08, 0, 10], 'false,false,true': [1.149, 29, 2], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.687, 26, 10]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D), follows(D, C)', 'true,true': 'recursion_accounttype(D, B)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(F, F)', 'false,false': 'follows(G, A), follows(A, H)', 'false,false,true': 'tweets(A, I), tweets(G, I)', 'false,false,false': 'tweets(A, J)'}, {'true,true,true': [1.39, 2, 56], 'true,true,false': [0.824, 1, 2], 'true,false': [0.02, 0, 2], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.192, 0, 15], 'false,false,true,true': [2.565, 138, 10], 'false,false,true,false': [1.254, 26, 2], 'false,false,false,true': [3.534, 53, 18], 'false,false,false,false': [3.668, 48, 19]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A), tweets(D, E)', 'false,true': 'follows(A, F), follows(D, F)', 'false,true,true': 'follows(G, D), recursion_accounttype(G, B)', 'false,true,false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(H, B)', 'false,false,false': 'tweets(A, I), follows(A, J)'}, {'true': [1.654, 3, 60], 'false,true,true,true': [0.983, 1, 11], 'false,true,true,false': [0.033, 130, 0], 'false,true,false,true': [0.091, 0, 11], 'false,true,false,false': [2.004, 44, 6], 'false,false,true': [0.378, 0, 36], 'false,false,false,true': [1.49e-08, 29, 0], 'false,false,false,false': [0.117, 49, 0]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(D, D)', 'false,true,false': 'tweets(D, E)', 'false,false': 'follows(F, A)', 'false,false,false': 'follows(G, A), follows(G, G)'}, {'true': [0.253, 0, 65], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [2.501, 120, 16], 'false,true,false,false': [0.0, 0, 0], 'false,false,true': [0.226, 47, 3], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [4.117, 80, 40]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(D, F), follows(D, D)', 'false,false': 'follows(G, A), follows(A, G)'}, {'true': [1.386, 2, 60], 'false,true,true': [1.191, 0, 28], 'false,true,false,true': [0.0, 0, 0], 'false,true,false,false': [0.995, 175, 1], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.384, 65, 35]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'tweets(D, E)', 'false,true,true': 'tweets(A, F)', 'false,false': 'follows(A, G)', 'false,false,false': 'follows(H, A), recursion_accounttype(H, B)'}, {'true': [0.97, 1, 60], 'false,true,true,true': [1.966, 107, 11], 'false,true,true,false': [0.562, 10, 1], 'false,true,false': [0.0, 0, 0], 'false,false,true': [0.343, 74, 30], 'false,false,false,true': [5.27e-09, 0, 10], 'false,false,false,false': [2.306, 41, 12]}], ['accounttype(A, B)', {'': 'follows(A, C), follows(D, A)', 'true': 'follows(C, E), recursion_accounttype(E, B)', 'true,false': 'follows(C, A)', 'false': 'recursion_accounttype(F, B)', 'false,true': 'follows(A, G), follows(F, G)', 'false,false': 'follows(H, A), follows(I, H)', 'false,false,false': 'follows(J, A)'}, {'true,true': [1.125, 0, 70], 'true,false,true': [0.035, 124, 0], 'true,false,false': [0.998, 15, 2], 'false,true,true': [0.707, 0, 30], 'false,true,false': [1.109, 0, 22], 'false,false,true': [3.38e-05, 35, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.03, 66, 0]}], ['accounttype(A, B)', {'': 'follows(A, C), follows(C, C)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'follows(A, D)', 'false,false': 'follows(A, F)', 'false,false,true': 'follows(F, G), recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.0, 0, 0], 'false,true,true': [2.473, 5, 82], 'false,true,false,true': [0.032, 128, 0], 'false,true,false,false': [1.011, 52, 2], 'false,false,true,true': [1.327, 1, 26], 'false,false,true,false': [1.277, 65, 4], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.728, 20, 10]}]]
[{'': [0.02895967921586013, 0.15719705276084428], 'false': [nan, 0.15719705276084428], 'false,false': [0.0826446280991734, 0.14003141200505503], 'false,false,false': [0.12362591466470749, 0.16202240735420803], 'false,false,true': [0.0, 0.1388888888888887]}, {'': [0.015395377760773803, 0.15619169646097064], 'false': [3.552713678800501e-16, 0.14008625723654486], 'false,false': [0.071040418380024, 0.21880813078724057], 'false,false,false': [0.21461588069438747, 0.2295918367346937], 'false,false,true': [9.547072305365463e-06, 0.005912405137255209], 'true': [nan, 0.015395377760773803], 'true,false': [nan, 0.015395377760773512]}, {'': [0.14495101739857838, 0.15127084090407467], 'false': [8.881784197001253e-17, 0.1354242518742371], 'true': [0.11635846861268377, 0.21637014151070935], 'true,false': [nan, 0.21637014151070935], 'false,false': [0.04259589468147332, 0.20061728395061718], 'false,false,false': [nan, 0.20061728395061718], 'true,true': [0.11420438881476695, 0.1385873477019131]}, {'': [0.04542154901549009, 0.12004008547300164], 'false': [0.0024526191848073847, 0.11581266413499748], 'false,false': [0.046319578007382095, 0.18798988745108897], 'false,false,false': [0.1759288567919311, 0.20077096295672608], 'false,false,true': [0.04445104662652182, 0.05617954410511804], 'true': [0.046819555498018244, 0.0002098285971564029], 'true,true': [0.033319203052574166, 0.22610426491040383], 'false,true': [nan, 0.0024526191848073847]}, {'': [0.04344010859625687, 0.11831762548402144], 'false': [0.05798758062587181, 0.2119394880180712], 'false,false': [0.003962178816452284, 0.0001780404750320326], 'false,true': [0.0432002452958864, 0.08439023486378885], 'false,true,false': [0.0007475898348908414, 0.0803296114104743], 'false,true,true': [0.0804980481978923, 8.583805550153547e-06], 'false,false,false': [7.656710514656252e-18, 0.0002785360754907875]}, {'': [0.000987921938752656, 0.08859438084536414], 'false': [0.04598624697566138, 0.12042902152523435], 'false,false': [0.05118615543056434, 0.14125393232477562], 'false,false,false': [nan, 0.14125393232477562], 'false,true': [nan, 0.04598624697566138], 'false,true,false': [0.04598624697566138, nan]}, {'': [0.030976695292566397, 0.08191033401096781], 'false': [0.04397823711055279, 0.14747348442395095], 'false,false': [nan, 0.14747348442395095], 'false,true': [0.050630907761624676, 0.005627467376852705], 'false,true,false': [nan, 0.005627467376852705]}, {'': [0.01541940587771816, 0.07544215198366737], 'false': [0.03240292376210266, 0.1060449574030366], 'false,false': [0.11796806315819786, 0.08627464598246376], 'false,false,false': [2.7755575615628915e-18, 0.1003655624862512], 'false,true': [0.03240292376210266, nan], 'false,true,true': [0.03274560492142774, 0.028666227613895926]}, {'': [0.035761314915742554, 0.10677195305080123], 'false': [0.03873326373107, 0.001972028835705233], 'false,true': [0.016667190923330053, 0.05585697379324435], 'true': [0.018087889781220935, 0.007471081062688285], 'true,false': [9.754440704499586e-06, 0.0585882400332576], 'false,false': [3.2608558710377016e-11, 1.3523424988369545e-05], 'false,false,false': [nan, 1.3523424988369545e-05]}, {'': [nan, 0.05461887768519298], 'false': [0.03815483866453319, 0.08944320169285032], 'false,false': [0.08563495464610314, 0.09957504572162033], 'false,false,false': [nan, 0.09957504572162033], 'false,false,true': [0.06524788751131066, 0.023642829843352486], 'false,true': [0.07030098005503621, 0.005636771773936928], 'false,true,false': [8.242017726738798e-06, 0.018925495349048513]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
0;false;follows(A, E), recursion_accounttype(E, B).;true;true
0;false,true;follows(F, A), follows(E, G).;true;true
1;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
1;false;follows(E, A), recursion_accounttype(E, B).;true;true
1;false,false;follows(F, A), follows(G, F).;true;true
1;false,false,true;recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
3;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
3;true;follows(C, D), follows(D, C).;true;true
3;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(D, A), tweets(D, E).;true;true
4;false,true;follows(A, F), follows(D, F).;true;true
4;false,true,true;follows(G, D), recursion_accounttype(G, B).;true;true
4;false,true,false;recursion_accounttype(D, B).;true;true
4;false,false;recursion_accounttype(H, B).;true;true
4;false,false,false;tweets(A, I), follows(A, J).;true;true
5;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
7;false;follows(A, D), follows(D, A).;true;true
7;false,false;follows(A, G).;true;true
7;false,false,false;follows(H, A), recursion_accounttype(H, B).;true;true
8;;accounttype(A, B) :- follows(A, C), follows(D, A).;true;true
8;true;follows(C, E), recursion_accounttype(E, B).;true;true
8;true,false;follows(C, A).;true;true
8;false;recursion_accounttype(F, B).;true;true
8;false,false;follows(H, A), follows(I, H).;true;true
9;;accounttype(A, B) :- follows(D, A).;true;true
9;true;follows(E, D), recursion_accounttype(E, B).;true;true
9;true,false;follows(A, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.8392810105712104;  // std dev = 0.136, 53.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=52 */
%   | else return 0.7867203636709409;  // std dev = 0.258, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   else if ( follows(A, E), recursion_accounttype(E, B) )
%   | then if ( follows(F, A), follows(E, G) )
%   | | then return 0.6914822684328455;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.6081489350995122;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(I, A) )
%   | | then if ( follows(I, J), follows(J, A) )
%   | | | then return -0.1331554127265746;  // std dev = 0.996, 115.000 (wgt'ed) examples reached here.  /* #neg=114 #pos=1 */
%   | | | else return 0.0010060779566552051;  // std dev = 3.338, 91.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=13 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.1624967611864685;  // std dev = 3.822, 69.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=21 */
%   | | | else return 0.2699136409818652;  // std dev = 2.870, 34.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=14 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.7061039520728934;  // std dev = 0.139, 51.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=50 */
%   | else if ( tweets(A, E) )
%   | | then if ( follows(F, A) )
%   | | | then return 0.5851860008555361;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.7670719622367216;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.448295606241962;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.7239587858878;  // std dev = 0.010, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.8592242558687159;  // std dev = 0.015, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return -0.12620088767908116;  // std dev = 0.992, 172.000 (wgt'ed) examples reached here.  /* #neg=171 #pos=1 */
%   | | else if ( follows(A, J), tweets(A, K) )
%   | | | then return 0.1395632684509619;  // std dev = 3.120, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | | else return 0.24930341343428922;  // std dev = 3.486, 50.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=21 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( recursion_accounttype(E, B) )
%   | | then return 0.6251473549946426;  // std dev = 0.167, 98.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=96 */
%   | | else return -0.13821834208647463;  // std dev = 0.479, 195.000 (wgt'ed) examples reached here.  /* #neg=195 */
%   | else if ( follows(F, A) )
%   | | then return 0.30135273167796806;  // std dev = 0.858, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.20067573845006917;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.28258302161019233;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.4680060076608948;  // std dev = 0.287, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else if ( follows(I, A) )
%   | | then return -0.05461820322906052;  // std dev = 0.219, 27.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=2 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.5325830216101922;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.19434772749254534;  // std dev = 2.029, 17.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, C) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F), tweets(A, F) )
%   | | | then return 0.3512695439807952;  // std dev = 1.373, 35.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=33 */
%   | | | else return 0.41798071024032407;  // std dev = 0.022, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else return 0.4859466666858091;  // std dev = 0.107, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.4292436284650269;  // std dev = 0.029, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.4358297306871949;  // std dev = 0.078, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.5509150704887794;  // std dev = 1.050, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | | else return -0.10750370654590578;  // std dev = 0.132, 155.000 (wgt'ed) examples reached here.  /* #neg=155 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.05169266962474549;  // std dev = 3.808, 95.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=25 */
%   | | | else return 0.16151574383945871;  // std dev = 2.384, 23.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=10 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.32531873103685005;  // std dev = 0.020, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.1906930715906166;  // std dev = 1.312, 15.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=13 */
%   | | else return 0.3249678806152372;  // std dev = 0.016, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else return 0.36618937130213736;  // std dev = 0.104, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else if ( follows(F, A), tweets(F, G) )
%   | then if ( follows(A, H), follows(F, H) )
%   | | then return -0.05712002778510946;  // std dev = 0.132, 149.000 (wgt'ed) examples reached here.  /* #neg=138 #pos=11 */
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0.3426328459980653;  // std dev = 0.037, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.01085221913306381;  // std dev = 1.537, 39.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=6 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then return 0.6828248322372611;  // std dev = 0.067, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | else return -0.205097565686012;  // std dev = 0.056, 73.000 (wgt'ed) examples reached here.  /* #neg=73 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.26690617218152474;  // std dev = 0.148, 65.000 (wgt'ed) examples reached here.  /* #pos=65 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E) )
%   | | | then return 0.11142413892900022;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.4984434025167504;  // std dev = 0.331, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return -0.09428860349233908;  // std dev = 0.132, 158.000 (wgt'ed) examples reached here.  /* #neg=158 */
%   | else if ( follows(A, F), follows(F, G) )
%   | | then if ( recursion_accounttype(G, B) )
%   | | | then return 0.47890088280552756;  // std dev = 0.471, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | | else return -0.14897774128731414;  // std dev = 0.051, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.14072617534856643;  // std dev = 1.246, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
%   | | | else return 0.08593287400944621;  // std dev = 1.856, 22.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=9 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( recursion_accounttype(C, B) )
%   | | then if ( follows(E, A) )
%   | | | then return 0.21980450354986458;  // std dev = 0.112, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | | | else return 0.04577979263379891;  // std dev = 0.881, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else if ( follows(C, D), follows(F, A) )
%   | | | then return 0.30954486636134515;  // std dev = 0.203, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.4305994324372351;  // std dev = 0.407, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | else return -0.09733729160794885;  // std dev = 0.434, 217.000 (wgt'ed) examples reached here.  /* #neg=217 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.21812705258127935;  // std dev = 1.83e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.4530370099220309;  // std dev = 0.041, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.12931795088581963;  // std dev = 0.520, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | | else return -0.010101659170535888;  // std dev = 0.348, 28.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( follows(E, F), follows(F, A) )
%   | | then if ( tweets(F, G), recursion_accounttype(E, B) )
%   | | | then return 0.14985048644386645;  // std dev = 0.969, 31.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=30 */
%   | | | else return -0.4757523164825251;  // std dev = 0.849, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.18962173552915249;  // std dev = 0.067, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else return 0.18824017098690488;  // std dev = 0.081, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else if ( follows(A, H), follows(H, A) )
%   | then return -0.0492655506992841;  // std dev = 0.092, 153.000 (wgt'ed) examples reached here.  /* #neg=141 #pos=12 */
%   | else if ( follows(A, I) )
%   | | then if ( tweets(A, J) )
%   | | | then return -0.014509542634049103;  // std dev = 1.722, 74.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=18 */
%   | | | else return 0.018483278376779908;  // std dev = 1.248, 35.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=12 */
%   | | else if ( follows(K, A), recursion_accounttype(K, B) )
%   | | | then return 0.0923020138268548;  // std dev = 0.953, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | | else return -0.026304844397542142;  // std dev = 2.081, 55.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=12 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(D, A) )
%   then if ( follows(C, E), recursion_accounttype(E, B) )
%   | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then if ( follows(A, F), tweets(A, G) )
%   | | | then return 0.13116196514797468;  // std dev = 0.971, 35.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=34 */
%   | | | else return 0.1616623179923003;  // std dev = 0.107, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.25922337760542785;  // std dev = 0.174, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else return -0.06737407429737442;  // std dev = 0.057, 139.000 (wgt'ed) examples reached here.  /* #neg=137 #pos=2 */
%   else if ( recursion_accounttype(H, B) )
%   | then if ( follows(I, A), recursion_accounttype(I, B) )
%   | | then return 0.16980024561522492;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.28029805039443234;  // std dev = 0.288, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | | else return 0.47204367699699024;  // std dev = 0.323, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( follows(L, A), follows(M, L) )
%   | | then return -0.08299118866558856;  // std dev = 0.044, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | else return -0.16255440490111037;  // std dev = 0.066, 78.000 (wgt'ed) examples reached here.  /* #neg=78 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.16186856410172606;  // std dev = 0.044, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   | else if ( follows(A, C) )
%   | | then return -0.06873709179243653;  // std dev = 0.054, 120.000 (wgt'ed) examples reached here.  /* #neg=120 */
%   | | else return -0.05695237494968565;  // std dev = 0.101, 42.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=2 */
%   else if ( follows(A, E) )
%   | then if ( follows(F, E), recursion_accounttype(F, B) )
%   | | then if ( recursion_accounttype(E, B), tweets(F, G) )
%   | | | then return -0.2870620216531699;  // std dev = 1.269, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | | | else return 0.2609211849526893;  // std dev = 0.208, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | else return -0.10965161279470181;  // std dev = 0.160, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.24312127002354256;  // std dev = 5.27e-09, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.27503345370268045;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.033013829444155714;  // std dev = 0.297, 24.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=7 */


Results
   AUC ROC   = 0.993906
   AUC PR    = 0.412002
   CLL	      = -0.107251
   Precision = 0.341463 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.509091


Total learning time: 22.023 seconds
Total inference time: 55.483 seconds
AUC ROC: 0.993906


Results scoring model
   AUC ROC   = 0.99541
   AUC PR    = 0.444534
   CLL	      = -0.111153
   Precision = 0.349432 at threshold = 0.5
   Recall    = 0.991935
   F1        = 0.516807


Total scoring time: 44.763 seconds
Refined model CLL: -0.111153


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.993906
   AUC PR    = 0.412002
   CLL	      = -0.107251
   Precision = 0.341463 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.509091


Total learning time: 110.82400000000001 seconds
Total inference time: 55.483 seconds
AUC ROC: 0.993906
Total revision time: 110.82400000000001
Best scored revision CLL: -0.111153


Dataset: 7_yeast_twitter, Fold: 1, Type: Transfer (trRDN-B), Time: 00:47:40
{'AUC ROC': 0.993906, 'AUC PR': 0.412002, 'CLL': -0.107251, 'Precision': [0.341463, 0.5], 'Recall': 1.0, 'F1': 0.509091, 'Learning time': 110.82400000000001, 'Inference time': 55.483, 'parameter_0.8': {'AUC ROC': 0.992997, 'AUC PR': 0.369713, 'CLL': -0.127728, 'Precision': [0.345714, 0.5], 'Recall': 0.960317, 'F1': 0.508403, 'Learning time': 6.697, 'Inference time': 41.141}}


Amount of data: 1.0
******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;false;true
0;false;interaction(A, D), interaction(D, D).;true;true
0;false,true;interaction(E, A), interaction(D, E).;true;true
0;false,true,true;interaction(A, A).;false;false
0;false,true,false;enzyme(D, F), phenotype(A, G).;false;false
0;false,false;interaction(H, A), recursion_proteinclass(H, B).;true;true
0;false,false,true;interaction(A, I), interaction(J, H).;false;false
0;false,false,false;interaction(K, A), complex(A, L).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
1;true;interaction(C, C).;false;true
1;true,false;interaction(A, D), interaction(D, D).;true;false
1;true,false,true;complex(C, E).;false;false
1;false;interaction(A, F), recursion_proteinclass(F, B).;false;true
1;false,false;interaction(A, G), interaction(G, H).;true;true
1;false,false,true;recursion_proteinclass(H, B).;false;false
1;false,false,false;interaction(I, A), location(I, J).;false;false
2;;proteinclass(A, B) :- interaction(C, A), enzyme(C, D).;true;true
2;true;location(A, E), location(C, E).;false;true
2;true,false;interaction(A, F), phenotype(A, G).;true;true
2;true,false,true;interaction(F, A), interaction(H, C).;false;false
2;true,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;false;interaction(A, J), recursion_proteinclass(J, B).;false;true
2;false,false;interaction(A, K), enzyme(K, L).;false;true
2;false,false,false;interaction(M, A), interaction(A, M).;false;false
3;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
3;true;interaction(D, C), interaction(C, D).;true;false
3;true,true;recursion_proteinclass(D, B).;false;false
3;false;interaction(A, E), recursion_proteinclass(E, B).;true;true
3;false,true;interaction(E, F), interaction(F, F).;false;false
3;false,false;interaction(A, G), interaction(H, A).;true;true
3;false,false,true;complex(A, I), complex(G, I).;false;false
3;false,false,false;enzyme(A, J), complex(A, K).;false;false
4;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
4;false;interaction(A, D), complex(D, E).;true;true
4;false,true;interaction(F, A), interaction(F, D).;true;true
4;false,true,true;interaction(D, G), recursion_proteinclass(G, B).;false;false
4;false,true,false;recursion_proteinclass(D, B).;false;false
4;false,false;enzyme(A, H), location(A, I).;true;true
4;false,false,true;enzyme(J, H), recursion_proteinclass(J, B).;false;false
4;false,false,false;complex(A, K), interaction(L, A).;false;false
5;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;false;true
5;false;interaction(D, A), interaction(A, D).;true;true
5;false,true;interaction(D, D).;true;true
5;false,true,true;interaction(A, A).;false;false
5;false,true,false;phenotype(D, E), complex(D, F).;false;false
5;false,false;enzyme(A, G), interaction(A, H).;true;true
5;false,false,true;enzyme(H, I).;false;false
5;false,false,false;interaction(A, J), interaction(J, J).;false;false
6;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
6;false;interaction(A, D), phenotype(A, E).;true;true
6;false,true;location(D, F), location(A, F).;true;true
6;false,true,true;interaction(D, G), recursion_proteinclass(G, B).;false;false
6;false,true,false;complex(D, H), interaction(D, D).;false;false
6;false,false;interaction(A, I), interaction(I, A).;true;true
6;false,false,true;interaction(I, I).;false;false
6;false,false,false;location(A, J).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
7;false;interaction(D, A), interaction(A, D).;true;true
7;false,true;complex(D, E).;true;true
7;false,true,true;complex(A, F), enzyme(D, G).;false;false
7;false,true,false;interaction(D, D), complex(A, H).;false;false
7;false,false;enzyme(A, I), interaction(J, A).;true;true
7;false,false,true;enzyme(J, K), phenotype(J, L).;false;false
7;false,false,false;interaction(A, M), recursion_proteinclass(M, B).;false;false
8;;proteinclass(A, B) :- interaction(C, A), interaction(A, D).;true;true
8;true;interaction(E, C), recursion_proteinclass(E, B).;false;true
8;true,false;interaction(A, C).;false;false
8;false;location(A, F).;true;true
8;false,true;location(G, F), recursion_proteinclass(G, B).;true;false
8;false,true,true;interaction(H, A), interaction(H, G).;false;false
8;false,false;interaction(A, I), interaction(I, J).;false;true
8;false,false,false;interaction(A, K).;false;false
9;;proteinclass(A, B) :- interaction(C, A), interaction(C, C).;true;true
9;true;recursion_proteinclass(C, B), interaction(A, C).;false;false
9;false;enzyme(A, D), interaction(A, E).;true;true
9;false,true;interaction(E, F), recursion_proteinclass(F, B).;false;true
9;false,true,false;interaction(E, A).;false;false
9;false,false;interaction(G, A), phenotype(A, H).;true;true
9;false,false,true;interaction(I, G), recursion_proteinclass(I, B).;false;false
9;false,false,false;interaction(A, J), enzyme(J, K).;false;false


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.8465210281227679;  // std dev = 0.994, 86.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=85 */
%   else if ( follows(D, A), follows(D, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), follows(E, G) )
%   | | | then return 0.7152917922423694;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, H), tweets(A, I) )
%   | | | then return -0.01122043426985758;  // std dev = 5.021, 222.000 (wgt'ed) examples reached here.  /* #neg=193 #pos=29 */
%   | | | else return 0.06104748582415005;  // std dev = 4.724, 138.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=28 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(D, A), follows(D, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.6867557765131814;  // std dev = 1.689, 81.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=78 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then return 0.7218142888720925;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(F, A), follows(G, F) )
%   | | then if ( recursion_accounttype(G, B) )
%   | | | then return 0.8578301831639586;  // std dev = 0.014, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return -0.13852756670605595;  // std dev = 1.002, 222.000 (wgt'ed) examples reached here.  /* #neg=221 #pos=1 */
%   | | else if ( follows(A, H) )
%   | | | then return 0.0972206999788239;  // std dev = 4.688, 120.000 (wgt'ed) examples reached here.  /* #neg=91 #pos=29 */
%   | | | else return 0.1005539664245927;  // std dev = 2.872, 44.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=11 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, A) )
%   | then if ( follows(A, D), follows(C, E) )
%   | | then return 0.12983361182246644;  // std dev = 5.318, 227.000 (wgt'ed) examples reached here.  /* #neg=145 #pos=82 */
%   | | else return 0.19858683515423387;  // std dev = 1.648, 20.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=9 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.14801870050398808;  // std dev = 4.765, 113.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=37 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5576585304241164;  // std dev = 5.16e-08, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(H, A) )
%   | | then return -0.08961533734932987;  // std dev = 1.157, 39.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=2 */
%   | | else if ( follows(A, I), follows(I, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.23017405259567278;  // std dev = 2.584, 28.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=11 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, C) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then return 0.52239512327826;  // std dev = 0.965, 73.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=72 */
%   | | else return 0.5304563275465298;  // std dev = 0.005, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else return 0.32938705377944183;  // std dev = 0.898, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(F, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.44547689666539547;  // std dev = 0.191, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(G, A), follows(A, H) )
%   | | then if ( tweets(A, I), tweets(G, I) )
%   | | | then return -0.06900090800985284;  // std dev = 2.884, 150.000 (wgt'ed) examples reached here.  /* #neg=137 #pos=13 */
%   | | | else return -0.10517497893715338;  // std dev = 1.267, 43.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=2 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.03987291133273243;  // std dev = 3.897, 100.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=20 */
%   | | | else return 0.15235095207321303;  // std dev = 3.773, 66.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=22 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.3960542987079579;  // std dev = 0.964, 79.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=78 */
%   else if ( follows(D, A), tweets(D, E) )
%   | then if ( follows(A, F), follows(D, F) )
%   | | then if ( follows(G, D), recursion_accounttype(G, B) )
%   | | | then return 0.6254039275188941;  // std dev = 0.450, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.12935954596569352;  // std dev = 0.531, 160.000 (wgt'ed) examples reached here.  /* #neg=159 #pos=1 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0.262171392061562;  // std dev = 0.978, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | | else return -0.010599410448703531;  // std dev = 2.396, 63.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=9 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then return 0.7915739760211823;  // std dev = 0.412, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | | else if ( tweets(A, I), follows(A, J) )
%   | | | then return -0.17856382770273085;  // std dev = 3.33e-08, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | | | else return -0.20917447055204377;  // std dev = 0.109, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.26961859573517266;  // std dev = 1.733, 88.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=85 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(D, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(D, E) )
%   | | | then return -0.04787140687002354;  // std dev = 2.837, 179.000 (wgt'ed) examples reached here.  /* #neg=160 #pos=19 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return -0.07640263597895315;  // std dev = 0.209, 57.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=4 */
%   | | else if ( follows(G, A), follows(G, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.09047174533984821;  // std dev = 4.367, 141.000 (wgt'ed) examples reached here.  /* #neg=93 #pos=48 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.2361374568646823;  // std dev = 1.619, 81.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=78 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0.4086615659668282;  // std dev = 1.326, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | else if ( tweets(D, F), follows(D, D) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1085967326212389;  // std dev = 1.099, 213.000 (wgt'ed) examples reached here.  /* #neg=211 #pos=2 */
%   | else if ( follows(G, A), follows(A, G) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.05336491616745013;  // std dev = 0.367, 138.000 (wgt'ed) examples reached here.  /* #neg=98 #pos=40 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.16069789448474103;  // std dev = 2.206, 84.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=78 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( tweets(D, E) )
%   | | then if ( tweets(A, F) )
%   | | | then return -0.04750951621566459;  // std dev = 2.278, 156.000 (wgt'ed) examples reached here.  /* #neg=142 #pos=14 */
%   | | | else return -0.08201020375853264;  // std dev = 0.562, 24.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then return 0.03788410748137108;  // std dev = 0.348, 123.000 (wgt'ed) examples reached here.  /* #neg=88 #pos=35 */
%   | | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0.09041455110758184;  // std dev = 0.968, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | else return -0.02983757030403815;  // std dev = 2.491, 83.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=13 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(D, A) )
%   then if ( follows(C, E), recursion_accounttype(E, B) )
%   | then return 0.21140880834055323;  // std dev = 2.291, 92.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=88 */
%   | else if ( follows(C, A) )
%   | | then return -0.09872352683369523;  // std dev = 0.039, 162.000 (wgt'ed) examples reached here.  /* #neg=162 */
%   | | else return -0.06301631417559758;  // std dev = 1.176, 25.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=3 */
%   else if ( recursion_accounttype(F, B) )
%   | then if ( follows(A, G), follows(F, G) )
%   | | then return 0.5291360597149177;  // std dev = 0.987, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | else return 0.33041102883890816;  // std dev = 1.422, 29.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=28 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then return -0.10807040512239484;  // std dev = 0.030, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | | else if ( follows(J, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1942310404852974;  // std dev = 0.112, 93.000 (wgt'ed) examples reached here.  /* #neg=93 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(C, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0.18809878442276382;  // std dev = 2.041, 106.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=104 */
%   | | else if ( follows(A, D) )
%   | | | then return -0.09036465633470125;  // std dev = 0.045, 167.000 (wgt'ed) examples reached here.  /* #neg=167 */
%   | | | else return -0.0634622330095135;  // std dev = 1.161, 54.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=4 */
%   | else if ( follows(A, F) )
%   | | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | | then return 0.3651274993405201;  // std dev = 1.483, 34.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=33 */
%   | | | else return -0.12939382247344827;  // std dev = 1.260, 80.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=4 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.03346858574758126;  // std dev = 1.907, 37.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=11 */


Results
   AUC ROC   = 0.992596
   AUC PR    = 0.348822
   CLL	      = -0.125718
   Precision = 0.33913 at threshold = 0.5
   Recall    = 0.928571
   F1        = 0.496815


Total learning time: 7.746 seconds
Total inference time: 41.157 seconds
AUC ROC: 0.992596


Results scoring model
   AUC ROC   = 0.991732
   AUC PR    = 0.349107
   CLL	      = -0.132666
   Precision = 0.341404 at threshold = 0.5
   Recall    = 0.903846
   F1        = 0.495606


Total scoring time: 41.294 seconds
Parameter learned model CLL: -0.132666


Structure after Parameter Learning
[['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(D, A), follows(D, D)', 'false,false': 'follows(A, E), recursion_accounttype(E, B)', 'false,false,true': 'follows(F, A), follows(E, G)', 'false,false,false': 'follows(A, H), tweets(A, I)'}, {'true': [0.994, 1, 85], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.926, 1, 6], 'false,false,true,false': [0.0, 0, 8], 'false,false,false,true': [5.021, 193, 29], 'false,false,false,false': [4.724, 110, 28]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, C)', 'true,false': 'follows(D, A), follows(D, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,false': 'follows(F, A), follows(G, F)', 'false,false,true': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(A, H)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [1.689, 3, 78], 'false,true': [0.0, 0, 21], 'false,false,true,true': [0.014, 0, 16], 'false,false,true,false': [1.002, 221, 1], 'false,false,false,true': [4.688, 91, 29], 'false,false,false,false': [2.872, 33, 11]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, A)', 'true,true': 'follows(A, D), follows(C, E)', 'true,false': 'follows(F, A), recursion_accounttype(F, B)', 'false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false': 'follows(H, A)', 'false,false,false': 'follows(A, I), follows(I, A)'}, {'true,true,true': [5.318, 145, 82], 'true,true,false': [1.648, 11, 9], 'true,false,true': [0.0, 0, 0], 'true,false,false': [4.765, 76, 37], 'false,true': [5.16e-08, 0, 15], 'false,false,true': [1.157, 37, 2], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.584, 17, 11]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D), follows(D, C)', 'true,true': 'recursion_accounttype(D, B)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(F, F)', 'false,false': 'follows(G, A), follows(A, H)', 'false,false,true': 'tweets(A, I), tweets(G, I)', 'false,false,false': 'tweets(A, J)'}, {'true,true,true': [0.965, 1, 72], 'true,true,false': [0.005, 0, 2], 'true,false': [0.898, 1, 4], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.191, 0, 21], 'false,false,true,true': [2.884, 137, 13], 'false,false,true,false': [1.267, 41, 2], 'false,false,false,true': [3.897, 80, 20], 'false,false,false,false': [3.773, 44, 22]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A), tweets(D, E)', 'false,true': 'follows(A, F), follows(D, F)', 'false,true,true': 'follows(G, D), recursion_accounttype(G, B)', 'false,true,false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(H, B)', 'false,false,false': 'tweets(A, I), follows(A, J)'}, {'true': [0.964, 1, 78], 'false,true,true,true': [0.45, 0, 11], 'false,true,true,false': [0.531, 159, 1], 'false,true,false,true': [0.978, 1, 16], 'false,true,false,false': [2.396, 54, 9], 'false,false,true': [0.412, 0, 41], 'false,false,false,true': [3.33e-08, 39, 0], 'false,false,false,false': [0.109, 59, 0]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(D, D)', 'false,true,false': 'tweets(D, E)', 'false,false': 'follows(F, A)', 'false,false,false': 'follows(G, A), follows(G, G)'}, {'true': [1.733, 3, 85], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [2.837, 160, 19], 'false,true,false,false': [0.0, 0, 0], 'false,false,true': [0.209, 53, 4], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [4.367, 93, 48]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(D, F), follows(D, D)', 'false,false': 'follows(G, A), follows(A, G)'}, {'true': [1.619, 3, 78], 'false,true,true': [1.326, 0, 36], 'false,true,false,true': [0.0, 0, 0], 'false,true,false,false': [1.099, 211, 2], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.367, 98, 40]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'tweets(D, E)', 'false,true,true': 'tweets(A, F)', 'false,false': 'follows(A, G)', 'false,false,false': 'follows(H, A), recursion_accounttype(H, B)'}, {'true': [2.206, 6, 78], 'false,true,true,true': [2.278, 142, 14], 'false,true,true,false': [0.562, 23, 1], 'false,true,false': [0.0, 0, 0], 'false,false,true': [0.348, 88, 35], 'false,false,false,true': [0.968, 1, 15], 'false,false,false,false': [2.491, 70, 13]}], ['accounttype(A, B)', {'': 'follows(A, C), follows(D, A)', 'true': 'follows(C, E), recursion_accounttype(E, B)', 'true,false': 'follows(C, A)', 'false': 'recursion_accounttype(F, B)', 'false,true': 'follows(A, G), follows(F, G)', 'false,false': 'follows(H, A), follows(I, H)', 'false,false,false': 'follows(J, A)'}, {'true,true': [2.291, 4, 88], 'true,false,true': [0.039, 162, 0], 'true,false,false': [1.176, 22, 3], 'false,true,true': [0.987, 0, 37], 'false,true,false': [1.422, 1, 28], 'false,false,true': [0.03, 33, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.112, 93, 0]}], ['accounttype(A, B)', {'': 'follows(A, C), follows(C, C)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'follows(A, D)', 'false,false': 'follows(A, F)', 'false,false,true': 'follows(F, G), recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.0, 0, 0], 'false,true,true': [2.041, 2, 104], 'false,true,false,true': [0.045, 167, 0], 'false,true,false,false': [1.161, 50, 4], 'false,false,true,true': [1.483, 1, 33], 'false,false,true,false': [1.26, 76, 4], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.907, 26, 11]}]]
[{'': [0.011492698756084153, 0.15348622222222322], 'false': [nan, 0.15348622222222322], 'false,false': [0.06222222222222188, 0.13326388888888965], 'false,false,false': [0.11356626897167542, 0.16173072883847878], 'false,false,true': [0.12244897959183662, -2.220446049250313e-16]}, {'': [0.035233631519811105, 0.14019749749370938], 'false': [-1.691768418476429e-16, 0.12148789497695049], 'false,false': [0.06647161164794706, 0.18428691466224237], 'false,false,false': [0.18310580246155556, 0.1874999999999999], 'false,false,true': [1.2217691548022103e-05, 0.004523409594935095], 'true': [nan, 0.035233631519811105], 'true,false': [nan, 0.035233631519811105]}, {'': [0.1494448446227198, 0.1575205118344785], 'false': [1.7763568394002506e-16, 0.144527212894704], 'true': [0.12584619965281404, 0.20091848455715913], 'true,false': [nan, 0.20091848455715913], 'false,false': [0.034307200799033565, 0.2385204081632655], 'false,false,false': [nan, 0.2385204081632655], 'true,true': [0.12458427300410228, 0.13582481489663695]}, {'': [0.02391104325430189, 0.12166833791530499], 'false': [0.0017358209354974008, 0.11760277534962574], 'false,false': [0.051632588769852564, 0.18025444918027375], 'false,false,false': [0.15183704978942955, 0.21568984405119657], 'false,false,true': [0.05543299596338853, 0.037358336181476666], 'true': [0.012426702333505327, 0.16117446215962744], 'true,true': [0.012765049397929681, 1.3784348139811442e-05], 'false,true': [nan, 0.0017358209354974008]}, {'': [0.011767056611380614, 0.11540952965788642], 'false': [0.059511853027480535, 0.2046948669945415], 'false,false': [0.00413129580753504, 0.0003463772969694884], 'false,true': [0.037124804462359856, 0.09617216169795613], 'false,true,false': [0.056305876110864246, 0.0911188998004367], 'false,true,true': [0.01842578078565465, 0.001765058773046954], 'false,false,false': [2.846725704167068e-17, 0.00020244624708574095]}, {'': [0.034146868358821865, 0.08356641653222009], 'false': [0.044968034602234655, 0.11458903767809635], 'false,false': [0.04366826860151419, 0.13524255818407194], 'false,false,false': [nan, 0.13524255818407194], 'false,true': [nan, 0.044968034602234655], 'false,true,false': [0.044968034602234655, nan]}, {'': [0.03237678596578507, 0.07863378780424646], 'false': [0.04500495724019309, 0.13442204695604887], 'false,false': [nan, 0.13442204695604887], 'false,true': [0.04885137491216976, 0.0056720419787478354], 'false,true,false': [nan, 0.00567204197874784]}, {'': [0.05791659452312251, 0.07051994176041068], 'false': [0.030711515192576436, 0.10069846987110394], 'false,false': [0.12106175197740991, 0.07410678350717927], 'false,false,false': [0.058593750000000014, 0.07476018554252888], 'false,true': [0.030711515192576436, nan], 'false,true,true': [0.033256174624383336, 0.013139637770358365]}, {'': [0.044488423034891186, 0.10486625652178595], 'false': [0.05513605069538534, 0.0015413332850253455], 'false,true': [0.026312684396579734, 0.06977143890779704], 'true': [0.05707118870390913, 0.00755087859144165], 'true,false': [9.588825246817402e-06, 0.055313886459264584], 'false,false': [2.7823610003555295e-05, 0.0001340944873960504], 'false,false,false': [nan, 0.0001340944873960504]}, {'': [nan, 0.05050057044682789], 'false': [0.033153711840296876, 0.08785635554866306], 'false,false': [0.0844196462467074, 0.09826670112937902], 'false,false,false': [nan, 0.09826670112937902], 'false,false,true': [0.06471043018422208, 0.019859699189284902], 'false,true': [0.03929809757535911, 0.006243443973905444], 'false,true,false': [1.2101187303166548e-05, 0.024967549677891342]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
0;false;follows(A, E), recursion_accounttype(E, B).;true;true
0;false,true;follows(F, A), follows(E, G).;true;true
1;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
1;false;follows(E, A), recursion_accounttype(E, B).;true;true
1;false,false;follows(F, A), follows(G, F).;true;true
1;false,false,true;recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
3;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
3;true;follows(C, D), follows(D, C).;true;true
3;true,true;recursion_accounttype(D, B).;true;true
3;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(D, A), tweets(D, E).;true;true
4;false,true;follows(A, F), follows(D, F).;true;true
4;false,true,true;follows(G, D), recursion_accounttype(G, B).;true;true
4;false,false;recursion_accounttype(H, B).;true;true
4;false,false,false;tweets(A, I), follows(A, J).;true;true
8;;accounttype(A, B) :- follows(A, C), follows(D, A).;true;true
8;true;follows(C, E), recursion_accounttype(E, B).;true;true
8;true,false;follows(C, A).;true;true
8;false;recursion_accounttype(F, B).;true;true
8;false,false;follows(H, A), follows(I, H).;true;true
9;;accounttype(A, B) :- follows(D, A).;true;true
9;true;follows(E, D), recursion_accounttype(E, B).;true;true
9;true,false;follows(A, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then return 0.8406050754503896;  // std dev = 0.131, 57.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=56 */
%   | else return 0.8581489350995122;  // std dev = 0.000, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then if ( follows(G, A), follows(F, H) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.6081489350995123;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | | else return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(J, A) )
%   | | then if ( follows(J, K), follows(K, A) )
%   | | | then return -0.13485805790748095;  // std dev = 0.996, 143.000 (wgt'ed) examples reached here.  /* #neg=142 #pos=1 */
%   | | | else return 0.024815601766179047;  // std dev = 3.651, 96.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=16 */
%   | | else if ( follows(A, L), follows(L, M) )
%   | | | then return 0.13287420982478626;  // std dev = 4.258, 91.000 (wgt'ed) examples reached here.  /* #neg=66 #pos=25 */
%   | | | else return 0.23314893509951232;  // std dev = 3.062, 40.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=15 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.7270348366204973;  // std dev = 0.132, 78.000 (wgt'ed) examples reached here.  /* #pos=78 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.7203132289666083;  // std dev = 0.007, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.8562690263729593;  // std dev = 0.018, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return -0.12963639524552106;  // std dev = 0.996, 221.000 (wgt'ed) examples reached here.  /* #neg=220 #pos=1 */
%   | | else if ( follows(A, G), tweets(A, H) )
%   | | | then return 0.09119563676201964;  // std dev = 3.346, 60.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=15 */
%   | | | else return 0.2126311780647074;  // std dev = 3.942, 66.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=25 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.5265181430376518;  // std dev = 0.187, 81.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=78 */
%   | else if ( follows(A, E), follows(E, A) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return -0.09630973457262423;  // std dev = 1.079, 94.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=2 */
%   | | | else return 0.03952036490462957;  // std dev = 2.732, 64.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=13 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.07103970684213864;  // std dev = 3.672, 80.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=20 */
%   | | | else return 0.1687620676536726;  // std dev = 3.039, 41.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=15 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.5551590473362599;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(I, A) )
%   | | then return -0.055076455372527464;  // std dev = 0.218, 27.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=2 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.2948186717938399;  // std dev = 1.414, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | | else return 0.08648533846050672;  // std dev = 2.227, 24.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=7 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, C) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | | then return 0.4260873594841921;  // std dev = 0.014, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   | | | else return 0.3618110498685438;  // std dev = 0.991, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | else return 0.4661969281165983;  // std dev = 0.055, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else return 0.4547111035921592;  // std dev = 0.060, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.45353838047177963;  // std dev = 0.058, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return -0.09831102497180086;  // std dev = 0.866, 143.000 (wgt'ed) examples reached here.  /* #neg=142 #pos=1 */
%   | | | else return 0.013895422924680474;  // std dev = 3.121, 89.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=16 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.046738422021172635;  // std dev = 3.797, 77.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=19 */
%   | | | else return 0.08054748111009502;  // std dev = 3.835, 70.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=21 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then return 0.3129258295954281;  // std dev = 0.118, 71.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=70 */
%   | else return 0.3920634956655909;  // std dev = 0.036, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(E, A), tweets(E, F) )
%   | then if ( follows(A, G), follows(E, G) )
%   | | then if ( follows(H, E), recursion_accounttype(H, B) )
%   | | | then return 0.639696509139879;  // std dev = 0.408, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.10803055714259209;  // std dev = 0.605, 156.000 (wgt'ed) examples reached here.  /* #neg=155 #pos=1 */
%   | | else if ( follows(I, A), recursion_accounttype(I, B) )
%   | | | then return 0.3200493787348755;  // std dev = 0.113, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return -0.004502815636825702;  // std dev = 2.357, 69.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=9 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then if ( follows(A, K), tweets(A, L) )
%   | | | then return 0.8091384847083023;  // std dev = 0.021, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.7111445338326741;  // std dev = 1.028, 27.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=26 */
%   | | else return -0.21616618306914767;  // std dev = 0.030, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C), tweets(A, D) )
%   | then if ( follows(E, A), follows(E, C) )
%   | | then return 0.23389832584949397;  // std dev = 0.167, 35.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=34 */
%   | | else return 0.26246975442092246;  // std dev = 1.83e-08, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else return 0.26503662812706796;  // std dev = 0.230, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   else if ( follows(F, A) )
%   | then if ( follows(G, F), recursion_accounttype(G, B) )
%   | | then if ( follows(F, H), follows(H, A) )
%   | | | then return -0.01217116708379861;  // std dev = 1.054, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.5608689327688526;  // std dev = 0.716, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else return -0.0995832761546974;  // std dev = 0.083, 215.000 (wgt'ed) examples reached here.  /* #neg=213 #pos=2 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.3035481418199324;  // std dev = 0.032, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.035696799863817213;  // std dev = 3.050, 74.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=19 */
%   | | | else return 0.08781816251898521;  // std dev = 3.010, 60.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=21 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.2178101131650957;  // std dev = 0.209, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E) )
%   | | | then return 0.1951865032540734;  // std dev = 0.088, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.5146441629831429;  // std dev = 0.352, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.09625457051973677;  // std dev = 0.717, 167.000 (wgt'ed) examples reached here.  /* #neg=166 #pos=1 */
%   | | | else return -0.04995066322453026;  // std dev = 0.945, 22.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=1 */
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( tweets(J, H), recursion_accounttype(J, B) )
%   | | | then return 0.5298800359108016;  // std dev = 0.839, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return -0.16379784422666702;  // std dev = 0.023, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.010925048572251086;  // std dev = 2.517, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | | else return 0.06154518950024753;  // std dev = 2.338, 37.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=13 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.18307479386991177;  // std dev = 0.188, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( follows(A, D) )
%   | | | then return -0.06369022533348538;  // std dev = 0.673, 116.000 (wgt'ed) examples reached here.  /* #neg=114 #pos=2 */
%   | | | else return -0.08589031858426457;  // std dev = 0.015, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | else if ( follows(D, F), recursion_accounttype(F, B) )
%   | | | then return 0.3571590586173496;  // std dev = 0.741, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return -0.10659734693568809;  // std dev = 0.041, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.4662108995493773;  // std dev = 0.955, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | | else return -0.1709098948883277;  // std dev = 0.281, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.2122716338932443;  // std dev = 0.970, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | | | else return 0.02780618942529718;  // std dev = 2.188, 34.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=11 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(D, A) )
%   then if ( follows(C, E), recursion_accounttype(E, B) )
%   | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return 0.12600210581283527;  // std dev = 1.389, 66.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=64 */
%   | | | else return -0.13810951498377938;  // std dev = 1.163, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else return 0.2797798555968089;  // std dev = 0.098, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else return -0.07386232317319365;  // std dev = 0.076, 185.000 (wgt'ed) examples reached here.  /* #neg=182 #pos=3 */
%   else if ( recursion_accounttype(H, B) )
%   | then if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then if ( follows(I, J), follows(J, I) )
%   | | | then return 0.12943134006302426;  // std dev = 0.076, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.2099590794362118;  // std dev = 0.757, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(K, A), recursion_accounttype(K, B) )
%   | | | then return 0.14515345182038658;  // std dev = 1.67e-08, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.42897950809802554;  // std dev = 1.445, 44.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=42 */
%   | else return -0.14245555866648923;  // std dev = 0.056, 120.000 (wgt'ed) examples reached here.  /* #neg=120 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.12725394358266887;  // std dev = 0.107, 84.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=83 */
%   | | else return 0.20546395772551335;  // std dev = 0.158, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | else return -0.07046378192902737;  // std dev = 0.083, 210.000 (wgt'ed) examples reached here.  /* #neg=206 #pos=4 */
%   else if ( follows(A, F) )
%   | then if ( follows(G, F), recursion_accounttype(G, B) )
%   | | then if ( follows(A, G) )
%   | | | then return 0.003161886847395613;  // std dev = 0.965, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.3453443741157907;  // std dev = 0.194, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | else return -0.13496812854821527;  // std dev = 0.034, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.43720594010946223;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.22335232351184375;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else return -0.029043015028765957;  // std dev = 0.294, 27.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=7 */


Results
   AUC ROC   = 0.992361
   AUC PR    = 0.319604
   CLL	      = -0.11334
   Precision = 0.342391 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.510121


Total learning time: 20.515 seconds
Total inference time: 73.072 seconds
AUC ROC: 0.992361


Results scoring model
   AUC ROC   = 0.993202
   AUC PR    = 0.305652
   CLL	      = -0.118224
   Precision = 0.345212 at threshold = 0.5
   Recall    = 0.99359
   F1        = 0.512397


Total scoring time: 73.745 seconds
Refined model CLL: -0.118224


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.992361
   AUC PR    = 0.319604
   CLL	      = -0.11334
   Precision = 0.342391 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.510121


Total learning time: 143.3 seconds
Total inference time: 73.072 seconds
AUC ROC: 0.992361
Total revision time: 143.3
Best scored revision CLL: -0.118224


Dataset: 7_yeast_twitter, Fold: 1, Type: Transfer (trRDN-B), Time: 00:51:58
{'AUC ROC': 0.992361, 'AUC PR': 0.319604, 'CLL': -0.11334, 'Precision': [0.342391, 0.5], 'Recall': 1.0, 'F1': 0.510121, 'Learning time': 143.3, 'Inference time': 73.072, 'parameter_1.0': {'AUC ROC': 0.992596, 'AUC PR': 0.348822, 'CLL': -0.125718, 'Precision': [0.33913, 0.5], 'Recall': 0.928571, 'F1': 0.496815, 'Learning time': 7.746, 'Inference time': 41.157}}


Starting fold 2

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos	 examples: 156
Target test neg examples: 24648

Amount of data: 0.2
******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;false;true
0;false;interaction(A, D), interaction(D, D).;true;true
0;false,true;interaction(E, A), interaction(D, E).;true;true
0;false,true,true;interaction(A, A).;false;false
0;false,true,false;enzyme(D, F), phenotype(A, G).;false;false
0;false,false;interaction(H, A), recursion_proteinclass(H, B).;true;true
0;false,false,true;interaction(A, I), interaction(J, H).;false;false
0;false,false,false;interaction(K, A), complex(A, L).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
1;true;interaction(C, C).;false;true
1;true,false;interaction(A, D), interaction(D, D).;true;false
1;true,false,true;complex(C, E).;false;false
1;false;interaction(A, F), recursion_proteinclass(F, B).;false;true
1;false,false;interaction(A, G), interaction(G, H).;true;true
1;false,false,true;recursion_proteinclass(H, B).;false;false
1;false,false,false;interaction(I, A), location(I, J).;false;false
2;;proteinclass(A, B) :- interaction(C, A), enzyme(C, D).;true;true
2;true;location(A, E), location(C, E).;false;true
2;true,false;interaction(A, F), phenotype(A, G).;true;true
2;true,false,true;interaction(F, A), interaction(H, C).;false;false
2;true,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;false;interaction(A, J), recursion_proteinclass(J, B).;false;true
2;false,false;interaction(A, K), enzyme(K, L).;false;true
2;false,false,false;interaction(M, A), interaction(A, M).;false;false
3;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
3;true;interaction(D, C), interaction(C, D).;true;false
3;true,true;recursion_proteinclass(D, B).;false;false
3;false;interaction(A, E), recursion_proteinclass(E, B).;true;true
3;false,true;interaction(E, F), interaction(F, F).;false;false
3;false,false;interaction(A, G), interaction(H, A).;true;true
3;false,false,true;complex(A, I), complex(G, I).;false;false
3;false,false,false;enzyme(A, J), complex(A, K).;false;false
4;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
4;false;interaction(A, D), complex(D, E).;true;true
4;false,true;interaction(F, A), interaction(F, D).;true;true
4;false,true,true;interaction(D, G), recursion_proteinclass(G, B).;false;false
4;false,true,false;recursion_proteinclass(D, B).;false;false
4;false,false;enzyme(A, H), location(A, I).;true;true
4;false,false,true;enzyme(J, H), recursion_proteinclass(J, B).;false;false
4;false,false,false;complex(A, K), interaction(L, A).;false;false
5;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;false;true
5;false;interaction(D, A), interaction(A, D).;true;true
5;false,true;interaction(D, D).;true;true
5;false,true,true;interaction(A, A).;false;false
5;false,true,false;phenotype(D, E), complex(D, F).;false;false
5;false,false;enzyme(A, G), interaction(A, H).;true;true
5;false,false,true;enzyme(H, I).;false;false
5;false,false,false;interaction(A, J), interaction(J, J).;false;false
6;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
6;false;interaction(A, D), phenotype(A, E).;true;true
6;false,true;location(D, F), location(A, F).;true;true
6;false,true,true;interaction(D, G), recursion_proteinclass(G, B).;false;false
6;false,true,false;complex(D, H), interaction(D, D).;false;false
6;false,false;interaction(A, I), interaction(I, A).;true;true
6;false,false,true;interaction(I, I).;false;false
6;false,false,false;location(A, J).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
7;false;interaction(D, A), interaction(A, D).;true;true
7;false,true;complex(D, E).;true;true
7;false,true,true;complex(A, F), enzyme(D, G).;false;false
7;false,true,false;interaction(D, D), complex(A, H).;false;false
7;false,false;enzyme(A, I), interaction(J, A).;true;true
7;false,false,true;enzyme(J, K), phenotype(J, L).;false;false
7;false,false,false;interaction(A, M), recursion_proteinclass(M, B).;false;false
8;;proteinclass(A, B) :- interaction(C, A), interaction(A, D).;true;true
8;true;interaction(E, C), recursion_proteinclass(E, B).;false;true
8;true,false;interaction(A, C).;false;false
8;false;location(A, F).;true;true
8;false,true;location(G, F), recursion_proteinclass(G, B).;true;false
8;false,true,true;interaction(H, A), interaction(H, G).;false;false
8;false,false;interaction(A, I), interaction(I, J).;false;true
8;false,false,false;interaction(A, K).;false;false
9;;proteinclass(A, B) :- interaction(C, A), interaction(C, C).;true;true
9;true;recursion_proteinclass(C, B), interaction(A, C).;false;false
9;false;enzyme(A, D), interaction(A, E).;true;true
9;false,true;interaction(E, F), recursion_proteinclass(F, B).;false;true
9;false,true,false;interaction(E, A).;false;false
9;false,false;interaction(G, A), phenotype(A, H).;true;true
9;false,false,true;interaction(I, G), recursion_proteinclass(I, B).;false;false
9;false,false,false;interaction(A, J), enzyme(J, K).;false;false


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.8581489350995123;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else if ( follows(D, A), follows(D, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), follows(E, G) )
%   | | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, H), tweets(A, I) )
%   | | | then return -0.03928696233638519;  // std dev = 1.895, 39.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=4 */
%   | | | else return -0.0793510649004878;  // std dev = 0.968, 16.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=1 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(D, A), follows(D, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.7194734122109543;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then return 0.7194734122109544;  // std dev = 2.11e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(F, A), follows(G, F) )
%   | | then if ( recursion_accounttype(G, B) )
%   | | | then return 0.8640324095819827;  // std dev = 0.004, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.13581783994491015;  // std dev = 0.013, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | | else if ( follows(A, H) )
%   | | | then return -0.024986263050265724;  // std dev = 0.942, 9.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, A) )
%   | then if ( follows(A, D), follows(C, E) )
%   | | then return 0.12086946295502536;  // std dev = 2.544, 56.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=19 */
%   | | else return -0.11761946118262157;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.021055799457604607;  // std dev = 0.941, 9.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5553664367462845;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(H, A) )
%   | | then return -0.11761946118262157;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, C) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then return 0.5253552796228494;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(F, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.43548720006906655;  // std dev = 0.098, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(G, A), follows(A, H) )
%   | | then if ( tweets(A, I), tweets(G, I) )
%   | | | then return -0.05692051817751562;  // std dev = 1.380, 32.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=3 */
%   | | | else return -0.048085184216131845;  // std dev = 0.799, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.07855298932623796;  // std dev = 0.883, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return -0.12726136862247608;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.3955965427920841;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( follows(D, A), tweets(D, E) )
%   | then if ( follows(A, F), follows(D, F) )
%   | | then if ( follows(G, D), recursion_accounttype(G, B) )
%   | | | then return 0.6408546506259134;  // std dev = 0.258, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.1265748107605192;  // std dev = 0.036, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0.316808873670298;  // std dev = 1.05e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.03570850880387915;  // std dev = 0.816, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then return 0.8589717773862394;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( tweets(A, I), follows(A, J) )
%   | | | then return -0.14102822261376055;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return -0.11378443389501618;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.2883031566648846;  // std dev = 0.100, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(D, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(D, E) )
%   | | | then return -0.02898991107083676;  // std dev = 1.510, 48.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return -0.10159487926575442;  // std dev = 0.008, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( follows(G, A), follows(G, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.02708869027267813;  // std dev = 0.807, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.26195835090683833;  // std dev = 0.098, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0.36874867786865945;  // std dev = 0.647, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( tweets(D, F), follows(D, D) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11165498780321724;  // std dev = 0.044, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
%   | else if ( follows(G, A), follows(A, G) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.060585612901941505;  // std dev = 0.197, 17.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=1 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.17475179009082537;  // std dev = 0.585, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( tweets(D, E) )
%   | | then if ( tweets(A, F) )
%   | | | then return -0.024107249964970667;  // std dev = 1.070, 28.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=4 */
%   | | | else return -0.01469522368019549;  // std dev = 0.546, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | | else if ( follows(D, D), tweets(A, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10268472280340424;  // std dev = 0.002, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( follows(A, H) )
%   | | then return -0.01180591730895016;  // std dev = 0.265, 9.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   | | else if ( follows(I, A), recursion_accounttype(I, B) )
%   | | | then return 0.14901637433482806;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.09085880098801147;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(D, A) )
%   then if ( follows(C, E), recursion_accounttype(E, B) )
%   | then return 0.20663688375604844;  // std dev = 1.189, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | else if ( follows(C, A) )
%   | | then return -0.09944048376636751;  // std dev = 0.011, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then if ( follows(A, G), follows(F, G) )
%   | | then return 0.7402531036962995;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.13109027060634526;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then return -0.08362734477569654;  // std dev = 1.86e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( follows(J, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10851507783658833;  // std dev = 0.024, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(C, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0.1631197306989288;  // std dev = 1.147, 25.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=24 */
%   | | else if ( follows(A, D) )
%   | | | then return -0.09160785686425246;  // std dev = 0.016, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | | | else return -0.076521780478177;  // std dev = 0.004, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( follows(A, F) )
%   | | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.024096537064623905;  // std dev = 0.637, 9.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.98941
   AUC PR    = 0.437554
   CLL	      = -0.105332
   Precision = 0.311953 at threshold = 0.5
   Recall    = 0.685897
   F1        = 0.428858


Total learning time: 3.331 seconds
Total inference time: 40.396 seconds
AUC ROC: 0.98941


Results scoring model
   AUC ROC   = 0.996366
   AUC PR    = 0.666364
   CLL	      = -0.106644
   Precision = 0.410714 at threshold = 0.5
   Recall    = 0.92
   F1        = 0.567901


Total scoring time: 9.215 seconds
Parameter learned model CLL: -0.106644


Structure after Parameter Learning
[['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(D, A), follows(D, D)', 'false,false': 'follows(A, E), recursion_accounttype(E, B)', 'false,false,true': 'follows(F, A), follows(E, G)', 'false,false,false': 'follows(A, H), tweets(A, I)'}, {'true': [0.0, 0, 17], 'false,true': [0.0, 0, 0], 'false,false,true,true': [2.11e-08, 0, 3], 'false,false,true,false': [0.0, 0, 0], 'false,false,false,true': [1.895, 35, 4], 'false,false,false,false': [0.968, 15, 1]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, C)', 'true,false': 'follows(D, A), follows(D, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,false': 'follows(F, A), follows(G, F)', 'false,false,true': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(A, H)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [0.0, 0, 14], 'false,true': [2.11e-08, 0, 6], 'false,false,true,true': [0.004, 0, 4], 'false,false,true,false': [0.013, 39, 0], 'false,false,false,true': [0.942, 8, 1], 'false,false,false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, A)', 'true,true': 'follows(A, D), follows(C, E)', 'true,false': 'follows(F, A), recursion_accounttype(F, B)', 'false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false': 'follows(H, A)'}, {'true,true,true': [2.544, 37, 19], 'true,true,false': [0.0, 1, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [0.941, 8, 1], 'false,true': [0.0, 0, 5], 'false,false,true': [0.0, 4, 0], 'false,false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D), follows(D, C)', 'true,true': 'recursion_accounttype(D, B)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(F, F)', 'false,false': 'follows(G, A), follows(A, H)', 'false,false,true': 'tweets(A, I), tweets(G, I)', 'false,false,false': 'tweets(A, J)'}, {'true,true,true': [0.0, 0, 14], 'true,true,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.098, 0, 6], 'false,false,true,true': [1.38, 29, 3], 'false,false,true,false': [0.799, 9, 1], 'false,false,false,true': [0.883, 4, 1], 'false,false,false,false': [0.0, 4, 0]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A), tweets(D, E)', 'false,true': 'follows(A, F), follows(D, F)', 'false,true,true': 'follows(G, D), recursion_accounttype(G, B)', 'false,true,false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(H, B)', 'false,false,false': 'tweets(A, I), follows(A, J)'}, {'true': [0.0, 0, 14], 'false,true,true,true': [0.258, 0, 4], 'false,true,true,false': [0.036, 33, 0], 'false,true,false,true': [1.05e-08, 0, 5], 'false,true,false,false': [0.816, 7, 1], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 6, 0], 'false,false,false,false': [0.0, 3, 0]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(D, D)', 'false,true,false': 'tweets(D, E)', 'false,false': 'follows(F, A)', 'false,false,false': 'follows(G, A), follows(G, G)'}, {'true': [0.1, 0, 17], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [1.51, 41, 7], 'false,true,false,false': [0.0, 0, 0], 'false,false,true': [0.008, 2, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.807, 7, 1]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(D, F), follows(D, D)', 'false,false': 'follows(G, A), follows(A, G)'}, {'true': [0.098, 0, 14], 'false,true,true': [0.647, 0, 10], 'false,true,false,true': [0.0, 0, 0], 'false,true,false,false': [0.044, 48, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.197, 16, 1]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'tweets(D, E)', 'false,true,true': 'tweets(A, F)', 'false,true,false': 'follows(D, D), tweets(A, G)', 'false,false': 'follows(A, H)', 'false,false,false': 'follows(I, A), recursion_accounttype(I, B)'}, {'true': [0.585, 1, 14], 'false,true,true,true': [1.07, 24, 4], 'false,true,true,false': [0.546, 6, 1], 'false,true,false,true': [0.0, 0, 0], 'false,true,false,false': [0.002, 2, 0], 'false,false,true': [0.265, 8, 1], 'false,false,false,true': [0.0, 0, 5], 'false,false,false,false': [0.0, 3, 0]}], ['accounttype(A, B)', {'': 'follows(A, C), follows(D, A)', 'true': 'follows(C, E), recursion_accounttype(E, B)', 'true,false': 'follows(C, A)', 'false': 'recursion_accounttype(F, B)', 'false,true': 'follows(A, G), follows(F, G)', 'false,false': 'follows(H, A), follows(I, H)', 'false,false,false': 'follows(J, A)'}, {'true,true': [1.189, 1, 19], 'true,false,true': [0.011, 28, 0], 'true,false,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 1], 'false,true,false': [0.0, 0, 5], 'false,false,true': [1.86e-09, 3, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.024, 7, 0]}], ['accounttype(A, B)', {'': 'follows(A, C), follows(C, C)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'follows(A, D)', 'false,false': 'follows(A, F)', 'false,false,true': 'follows(F, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true,true': [1.147, 1, 24], 'false,true,false,true': [0.016, 33, 0], 'false,true,false,false': [0.004, 6, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.637, 8, 1], 'false,false,false': [0.0, 0, 0]}]]
[{'': [-2.0898315757650005e-16, 0.11890606420927488], 'false': [nan, 0.11890606420927488], 'false,false': [1.4802973661668753e-16, 0.08264462809917368], 'false,false,false': [0.09204470742932266, 0.05859375000000004], 'false,false,true': [1.4802973661668753e-16, nan]}, {'': [0.0, 0.1313232645901181], 'false': [7.401486830834377e-17, 0.0868503748561008], 'false,false': [0.08434905270965797, 0.09853847845959313], 'false,false,false': [0.09853847845959313, nan], 'false,false,true': [4.093048269759869e-06, 4.420456251090321e-06], 'true': [nan, 0.0], 'true,false': [nan, 0.0]}, {'': [0.11452334227270704, 0.11182963427436442], 'true': [0.11449497146845322, 0.09831755279715348], 'true,true': [0.11554168300519106, 0.0], 'false': [-4.4408920985006264e-17, 0.0], 'true,false': [nan, 0.09831755279715348], 'false,false': [0.0, nan]}, {'': [-1.9032394707859825e-16, 0.08231245477892121], 'false': [0.0016152543445369834, 0.06725860481072528], 'false,false': [0.06054542327201494, 0.0971412090910251], 'false,false,false': [0.15602770972480456, 0.0], 'false,false,true': [0.05950145775275834, 0.06382663626604813], 'false,true': [nan, 0.0016152543445369834], 'true': [-1.9032394707859825e-16, nan], 'true,true': [-1.9032394707859825e-16, nan]}, {'': [-6.344131569286608e-17, 0.07176954610316534], 'false': [0.06830170939018795, 0.08852123972186315], 'false,false': [0.0, 0.00016493867194479947], 'false,true': [0.05862305643614896, 0.0806136579646684], 'false,true,false': [2.2204460492503132e-17, 0.08320161536703025], 'false,true,true': [0.016669658070700755, 3.826514636646469e-05], 'false,false,false': [0.0, -2.3129646346357427e-18]}, {'': [0.000588986150190808, 0.050740075355840464], 'false': [0.047530543819725435, 0.06600596429442394], 'false,false': [7.196454654707744e-05, 0.08137922979173876], 'false,false,false': [nan, 0.08137922979173876], 'false,true': [nan, 0.047530543819725435], 'false,true,false': [0.047530543819725435, nan]}, {'': [0.0006849008579796835, 0.04004364117896438], 'false': [0.040183522733593324, 0.038786395568196255], 'false,true': [0.04187586401319099, 3.997198006054405e-05], 'false,false': [nan, 0.038786395568196255], 'false,true,false': [nan, 3.9971980060539425e-05]}, {'': [0.022822835980493655, 0.04160197973515153], 'false': [0.039361449915233764, 0.04489197086351005], 'false,false': [0.07044492796860514, 0.013485960875663203], 'false,true': [0.04126066137805029, 1.392034610215101e-06], 'false,true,true': [0.04092463401872722, 0.04253390182431429], 'false,false,false': [0.0, -1.1564823173178713e-18], 'false,true,false': [nan, 1.392034610215101e-06]}, {'': [0.05223856795985396, 0.045538989853195266], 'true': [0.07071754986727403, 4.563956567925155e-06], 'false': [0.051538799613636076, 0.00018918727841277656], 'false,true': [0.0, -2.7755575615628915e-18], 'false,false': [1.1564823173178713e-18, 8.444776351662036e-05], 'false,false,false': [nan, 8.444776351662036e-05], 'true,false': [4.563956567925155e-06, nan]}, {'': [nan, 0.03702774075450112], 'false': [0.035755485259805916, 0.04509651643879595], 'false,false': [0.04509651643879595, nan], 'false,false,true': [nan, 0.04509651643879594], 'false,true': [0.052654117394186385, 3.6654410024588994e-05], 'false,true,false': [7.929362316806982e-06, 2.0662718026390656e-06]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
0;false;follows(A, E), recursion_accounttype(E, B).;true;true
1;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
1;false;follows(E, A), recursion_accounttype(E, B).;true;true
1;false,false;follows(F, A), follows(G, F).;true;true
1;false,false,true;recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C).;true;true
2;true;follows(D, A).;true;true
2;true,true;follows(A, D), follows(C, E).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
3;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
3;false;follows(E, A), recursion_accounttype(E, B).;true;true
3;false,false;follows(G, A), follows(A, H).;true;true
3;false,false,false;tweets(A, J).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(D, A), tweets(D, E).;true;true
4;false,true;follows(A, F), follows(D, F).;true;true
4;false,true,true;follows(G, D), recursion_accounttype(G, B).;true;true
4;false,true,false;recursion_accounttype(D, B).;true;true
4;false,false;recursion_accounttype(H, B).;true;true
4;false,false,false;tweets(A, I), follows(A, J).;true;true
5;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
5;false;follows(A, D), follows(D, A).;true;true
5;false,false;follows(F, A).;true;true
6;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
6;false;follows(D, A).;true;true
6;false,true;follows(E, D), recursion_accounttype(E, B).;true;true
7;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
7;false;follows(A, D), follows(D, A).;true;true
7;false,true;tweets(D, E).;true;true
7;false,false;follows(A, H).;true;true
7;false,false,false;follows(I, A), recursion_accounttype(I, B).;true;true
8;;accounttype(A, B) :- follows(A, C), follows(D, A).;true;true
8;true;follows(C, E), recursion_accounttype(E, B).;true;true
8;false;recursion_accounttype(F, B).;true;true
8;false,true;follows(A, G), follows(F, G).;true;true
8;false,false;follows(H, A), follows(I, H).;true;true
9;;accounttype(A, B) :- follows(D, A).;true;true
9;true;follows(E, D), recursion_accounttype(E, B).;true;true
9;true,false;follows(A, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.8581489350995123;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.6081489350995122;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( follows(E, A), tweets(A, F) )
%   | | then if ( follows(E, G), follows(G, A) )
%   | | | then return -0.1418510649004877;  // std dev = 2.79e-08, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | | else return 0.024815601766178884;  // std dev = 1.581, 18.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=3 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return -0.050941973991396876;  // std dev = 0.953, 11.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=1 */
%   | | | else return 0.0581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.7313730497173961;  // std dev = 0.071, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else return 0.4020062622195435;  // std dev = 0.778, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then return 0.7194734122109544;  // std dev = 2.11e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(F, A), follows(G, F) )
%   | | then if ( recursion_accounttype(G, B) )
%   | | | then return 0.8573853290431865;  // std dev = 0.008, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.1320606033777134;  // std dev = 0.054, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
%   | | else return -0.021891115474675874;  // std dev = 0.330, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, A) )
%   | then if ( follows(A, D), follows(C, E) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.39957353116861277;  // std dev = 1.584, 17.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=14 */
%   | | | else return -0.03996826341532144;  // std dev = 1.714, 52.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=5 */
%   | | else return -0.12099912517009996;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( tweets(A, G) )
%   | | then return 0.02689840264334979;  // std dev = 0.906, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else return -0.14107906669134915;  // std dev = 0.014, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.5553664367462845;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.11165844710181276;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.4779631047198359;  // std dev = 0.128, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.4421301338401804;  // std dev = 0.135, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(E, A), follows(A, F) )
%   | | then if ( tweets(A, G) )
%   | | | then return -0.028416403553429774;  // std dev = 1.372, 30.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=3 */
%   | | | else return 0.09679056383942533;  // std dev = 0.740, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.06269048951308873;  // std dev = 0.881, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return -0.12562583643456407;  // std dev = 0.010, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.36262892579154976;  // std dev = 0.120, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( follows(D, A), tweets(D, E) )
%   | then if ( follows(A, F), follows(D, F) )
%   | | then if ( follows(G, D), recursion_accounttype(G, B) )
%   | | | then return 0.6575702794606118;  // std dev = 0.234, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.11165888883089824;  // std dev = 0.045, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0.31537282321609894;  // std dev = 1.05e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.01884974320043978;  // std dev = 0.793, 9.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then return 0.8421287770345068;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( tweets(A, I), follows(A, J) )
%   | | | then return -0.13837362497323794;  // std dev = 0.019, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return -0.10888962649113058;  // std dev = 0.009, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then return 0.2778230532404155;  // std dev = 0.026, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else return 0.25152569164538263;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(A, E), follows(E, A) )
%   | then if ( tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.47300878402824525;  // std dev = 0.408, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.10026708867210848;  // std dev = 0.042, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | else return 0.019676828082892384;  // std dev = 0.615, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(A, I), tweets(A, J) )
%   | | | then return -0.2207283951293209;  // std dev = 0.397, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return -0.10546821904287461;  // std dev = 0.002, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return -0.11560773478487726;  // std dev = 0.044, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.07769623670704656;  // std dev = 0.715, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then return 0.07004656615843234;  // std dev = 0.350, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return 0.23704632425144054;  // std dev = 0.066, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.22223374010928487;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(F, A) )
%   | then if ( follows(G, F), recursion_accounttype(G, B) )
%   | | then if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0.21379988915106854;  // std dev = 0.036, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.5305982435098496;  // std dev = 0.141, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.09684591604510362;  // std dev = 0.012, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( tweets(A, K) )
%   | | | then return -0.11534954537996454;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return -0.0859566143257878;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.004893842773078745;  // std dev = 0.280, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then return 0.05854447332053338;  // std dev = 0.350, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return 0.19703788683947251;  // std dev = 0.058, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.18619442379025153;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, F), follows(F, A) )
%   | then if ( tweets(F, G) )
%   | | then if ( tweets(A, H) )
%   | | | then return -0.027653972595298684;  // std dev = 0.826, 32.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=4 */
%   | | | else return 4.0956614326925214E-4;  // std dev = 0.483, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return -0.09020648899088267;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( follows(A, I) )
%   | | then if ( tweets(A, J) )
%   | | | then return 0.04936044146138626;  // std dev = 0.708, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return -0.11239231199782122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.09945106902509374;  // std dev = 0.118, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(D, A) )
%   then if ( follows(C, E), recursion_accounttype(E, B) )
%   | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then if ( follows(F, A), tweets(F, G) )
%   | | | then return 0.18428852556851932;  // std dev = 0.056, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.15698594781884087;  // std dev = 0.009, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.36818487968421537;  // std dev = 0.220, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.08750878539076327;  // std dev = 0.012, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   else if ( recursion_accounttype(H, B) )
%   | then if ( follows(A, I), follows(H, I) )
%   | | then return 0.6703705944942915;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.16039818215120571;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(J, A), follows(K, J) )
%   | | then return -0.09581693208964501;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( follows(A, L), follows(L, M) )
%   | | | then return -0.10878476557445434;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return -0.13410034421832853;  // std dev = 0.059, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E) )
%   | | | then return 0.15568432219908288;  // std dev = 0.056, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.002393256237674438;  // std dev = 0.912, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.13966075941713874;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.32328508645949416;  // std dev = 0.125, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, C) )
%   | | then if ( tweets(A, G) )
%   | | | then return -0.07304736987838255;  // std dev = 0.022, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | | else return -0.09965039131475101;  // std dev = 0.012, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else return -0.08497602657418535;  // std dev = 0.006, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else if ( follows(A, H), follows(H, I) )
%   | then return -0.0986780999663197;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return -0.004346762437530282;  // std dev = 0.210, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */


Results
   AUC ROC   = 0.98995
   AUC PR    = 0.320366
   CLL	      = -0.102585
   Precision = 0.314917 at threshold = 0.5
   Recall    = 0.730769
   F1        = 0.440154


Total learning time: 9.279 seconds
Total inference time: 153.168 seconds
AUC ROC: 0.98995


Results scoring model
   AUC ROC   = 0.995101
   AUC PR    = 0.473539
   CLL	      = -0.10234
   Precision = 0.387097 at threshold = 0.5
   Recall    = 0.96
   F1        = 0.551724


Total scoring time: 32.709 seconds
Refined model CLL: -0.10234


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.98995
   AUC PR    = 0.320366
   CLL	      = -0.102585
   Precision = 0.314917 at threshold = 0.5
   Recall    = 0.730769
   F1        = 0.440154


Total learning time: 54.534000000000006 seconds
Total inference time: 153.168 seconds
AUC ROC: 0.98995
Total revision time: 54.534000000000006
Best scored revision CLL: -0.10234


Dataset: 7_yeast_twitter, Fold: 2, Type: Transfer (trRDN-B), Time: 00:56:07
{'AUC ROC': 0.98995, 'AUC PR': 0.320366, 'CLL': -0.102585, 'Precision': [0.314917, 0.5], 'Recall': 0.730769, 'F1': 0.440154, 'Learning time': 54.534000000000006, 'Inference time': 153.168, 'parameter_0.2': {'AUC ROC': 0.98941, 'AUC PR': 0.437554, 'CLL': -0.105332, 'Precision': [0.311953, 0.5], 'Recall': 0.685897, 'F1': 0.428858, 'Learning time': 3.331, 'Inference time': 40.396}}


Amount of data: 0.4
******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;false;true
0;false;interaction(A, D), interaction(D, D).;true;true
0;false,true;interaction(E, A), interaction(D, E).;true;true
0;false,true,true;interaction(A, A).;false;false
0;false,true,false;enzyme(D, F), phenotype(A, G).;false;false
0;false,false;interaction(H, A), recursion_proteinclass(H, B).;true;true
0;false,false,true;interaction(A, I), interaction(J, H).;false;false
0;false,false,false;interaction(K, A), complex(A, L).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
1;true;interaction(C, C).;false;true
1;true,false;interaction(A, D), interaction(D, D).;true;false
1;true,false,true;complex(C, E).;false;false
1;false;interaction(A, F), recursion_proteinclass(F, B).;false;true
1;false,false;interaction(A, G), interaction(G, H).;true;true
1;false,false,true;recursion_proteinclass(H, B).;false;false
1;false,false,false;interaction(I, A), location(I, J).;false;false
2;;proteinclass(A, B) :- interaction(C, A), enzyme(C, D).;true;true
2;true;location(A, E), location(C, E).;false;true
2;true,false;interaction(A, F), phenotype(A, G).;true;true
2;true,false,true;interaction(F, A), interaction(H, C).;false;false
2;true,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;false;interaction(A, J), recursion_proteinclass(J, B).;false;true
2;false,false;interaction(A, K), enzyme(K, L).;false;true
2;false,false,false;interaction(M, A), interaction(A, M).;false;false
3;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
3;true;interaction(D, C), interaction(C, D).;true;false
3;true,true;recursion_proteinclass(D, B).;false;false
3;false;interaction(A, E), recursion_proteinclass(E, B).;true;true
3;false,true;interaction(E, F), interaction(F, F).;false;false
3;false,false;interaction(A, G), interaction(H, A).;true;true
3;false,false,true;complex(A, I), complex(G, I).;false;false
3;false,false,false;enzyme(A, J), complex(A, K).;false;false
4;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
4;false;interaction(A, D), complex(D, E).;true;true
4;false,true;interaction(F, A), interaction(F, D).;true;true
4;false,true,true;interaction(D, G), recursion_proteinclass(G, B).;false;false
4;false,true,false;recursion_proteinclass(D, B).;false;false
4;false,false;enzyme(A, H), location(A, I).;true;true
4;false,false,true;enzyme(J, H), recursion_proteinclass(J, B).;false;false
4;false,false,false;complex(A, K), interaction(L, A).;false;false
5;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;false;true
5;false;interaction(D, A), interaction(A, D).;true;true
5;false,true;interaction(D, D).;true;true
5;false,true,true;interaction(A, A).;false;false
5;false,true,false;phenotype(D, E), complex(D, F).;false;false
5;false,false;enzyme(A, G), interaction(A, H).;true;true
5;false,false,true;enzyme(H, I).;false;false
5;false,false,false;interaction(A, J), interaction(J, J).;false;false
6;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
6;false;interaction(A, D), phenotype(A, E).;true;true
6;false,true;location(D, F), location(A, F).;true;true
6;false,true,true;interaction(D, G), recursion_proteinclass(G, B).;false;false
6;false,true,false;complex(D, H), interaction(D, D).;false;false
6;false,false;interaction(A, I), interaction(I, A).;true;true
6;false,false,true;interaction(I, I).;false;false
6;false,false,false;location(A, J).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
7;false;interaction(D, A), interaction(A, D).;true;true
7;false,true;complex(D, E).;true;true
7;false,true,true;complex(A, F), enzyme(D, G).;false;false
7;false,true,false;interaction(D, D), complex(A, H).;false;false
7;false,false;enzyme(A, I), interaction(J, A).;true;true
7;false,false,true;enzyme(J, K), phenotype(J, L).;false;false
7;false,false,false;interaction(A, M), recursion_proteinclass(M, B).;false;false
8;;proteinclass(A, B) :- interaction(C, A), interaction(A, D).;true;true
8;true;interaction(E, C), recursion_proteinclass(E, B).;false;true
8;true,false;interaction(A, C).;false;false
8;false;location(A, F).;true;true
8;false,true;location(G, F), recursion_proteinclass(G, B).;true;false
8;false,true,true;interaction(H, A), interaction(H, G).;false;false
8;false,false;interaction(A, I), interaction(I, J).;false;true
8;false,false,false;interaction(A, K).;false;false
9;;proteinclass(A, B) :- interaction(C, A), interaction(C, C).;true;true
9;true;recursion_proteinclass(C, B), interaction(A, C).;false;false
9;false;enzyme(A, D), interaction(A, E).;true;true
9;false,true;interaction(E, F), recursion_proteinclass(F, B).;false;true
9;false,true,false;interaction(E, A).;false;false
9;false,false;interaction(G, A), phenotype(A, H).;true;true
9;false,false,true;interaction(I, G), recursion_proteinclass(I, B).;false;false
9;false,false,false;interaction(A, J), enzyme(J, K).;false;false


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.8581489350995116;  // std dev = 2.15e-07, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   else if ( follows(D, A), follows(D, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), follows(E, G) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, H), tweets(A, I) )
%   | | | then return -0.05435106490048769;  // std dev = 2.527, 80.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=7 */
%   | | | else return 0.02031109726167449;  // std dev = 2.242, 37.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=6 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(D, A), follows(D, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.648044840782383;  // std dev = 1.363, 28.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=26 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then return 0.7194734122109544;  // std dev = 2.98e-08, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( follows(F, A), follows(G, F) )
%   | | then if ( recursion_accounttype(G, B) )
%   | | | then return 0.8631407070210603;  // std dev = 0.008, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.13750548812373997;  // std dev = 0.036, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
%   | | else if ( follows(A, H) )
%   | | | then return 0.21104567434107646;  // std dev = 2.124, 20.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, A) )
%   | then if ( follows(A, D), follows(C, E) )
%   | | then return 0.1166969734511552;  // std dev = 3.408, 100.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=33 */
%   | | else return 0.14848738906810657;  // std dev = 0.743, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.15550955224683896;  // std dev = 2.240, 24.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=8 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5553664367462846;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(H, A) )
%   | | then return -0.12817475495908837;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, C) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then return 0.5057003963660798;  // std dev = 0.981, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.5345191677852417;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(F, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.4556649669738752;  // std dev = 0.168, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( follows(G, A), follows(A, H) )
%   | | then if ( tweets(A, I), tweets(G, I) )
%   | | | then return -0.06773571974487098;  // std dev = 1.813, 61.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=5 */
%   | | | else return -0.08839336601514049;  // std dev = 0.804, 16.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=1 */
%   | | else if ( tweets(A, J) )
%   | | | then return -0.053299024654532075;  // std dev = 1.307, 19.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=2 */
%   | | | else return 0.16140259332243093;  // std dev = 1.793, 14.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=5 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.3803343329661115;  // std dev = 0.997, 27.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=26 */
%   else if ( follows(D, A), tweets(D, E) )
%   | then if ( follows(A, F), follows(D, F) )
%   | | then if ( follows(G, D), recursion_accounttype(G, B) )
%   | | | then return 0.4774017683332675;  // std dev = 0.904, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return -0.1289189928804579;  // std dev = 0.082, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0.3124578082465481;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.038347095292522296;  // std dev = 1.156, 14.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=3 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then return 0.6641054894645719;  // std dev = 0.949, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else if ( tweets(A, I), follows(A, J) )
%   | | | then return -0.176376170286511;  // std dev = 7.45e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | else return -0.22240062395173377;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.31173998429964067;  // std dev = 0.204, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(D, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(D, E) )
%   | | | then return -0.044494723474136924;  // std dev = 1.954, 91.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return -0.1211337410763368;  // std dev = 0.015, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( follows(G, A), follows(G, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.060620895087013536;  // std dev = 2.006, 25.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=8 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.14920692107317943;  // std dev = 1.802, 30.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=26 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0.3731988024616542;  // std dev = 0.874, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( tweets(D, F), follows(D, D) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1104651598119041;  // std dev = 0.076, 87.000 (wgt'ed) examples reached here.  /* #neg=87 */
%   | else if ( follows(G, A), follows(A, G) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.07167069375596463;  // std dev = 0.381, 23.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=7 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.17672448053390136;  // std dev = 1.386, 28.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=26 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( tweets(D, E) )
%   | | then if ( tweets(A, F) )
%   | | | then return -0.03811479486118125;  // std dev = 1.487, 65.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=7 */
%   | | | else return -0.041588372820380026;  // std dev = 0.593, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   | | else if ( follows(D, D), tweets(A, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.095315460914405;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( follows(A, H) )
%   | | then return 0.021400345488389007;  // std dev = 0.331, 33.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=9 */
%   | | else if ( follows(I, A), recursion_accounttype(I, B) )
%   | | | then return 0.14355764556919906;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.09179435956886037;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(D, A) )
%   then if ( follows(C, E), recursion_accounttype(E, B) )
%   | then return 0.27713081276996054;  // std dev = 0.828, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | else if ( follows(C, A) )
%   | | then return -0.09708175193391093;  // std dev = 0.047, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
%   | | else return -0.03229223633657994;  // std dev = 0.310, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( recursion_accounttype(F, B) )
%   | then if ( follows(A, G), follows(F, G) )
%   | | then return 0.5773539040056951;  // std dev = 0.371, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.12679397586928054;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then return -0.084423019761218;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( follows(J, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.18744412395293625;  // std dev = 0.084, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(C, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0.16537902720240286;  // std dev = 1.615, 44.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=42 */
%   | | else if ( follows(A, D) )
%   | | | then return -0.08846484178409536;  // std dev = 0.036, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
%   | | | else return -0.08928786051016731;  // std dev = 0.038, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( follows(A, F) )
%   | | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | | then return 0.15444609362853468;  // std dev = 1.158, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return -0.004323997403650242;  // std dev = 1.148, 18.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=5 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.992592
   AUC PR    = 0.410139
   CLL	      = -0.126942
   Precision = 0.342711 at threshold = 0.5
   Recall    = 0.858974
   F1        = 0.489945


Total learning time: 4.321 seconds
Total inference time: 46.254 seconds
AUC ROC: 0.992592


Results scoring model
   AUC ROC   = 0.993482
   AUC PR    = 0.513687
   CLL	      = -0.124796
   Precision = 0.335714 at threshold = 0.5
   Recall    = 0.94
   F1        = 0.494737


Total scoring time: 15.609 seconds
Parameter learned model CLL: -0.124796


Structure after Parameter Learning
[['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(D, A), follows(D, D)', 'false,false': 'follows(A, E), recursion_accounttype(E, B)', 'false,false,true': 'follows(F, A), follows(E, G)', 'false,false,false': 'follows(A, H), tweets(A, I)'}, {'true': [2.15e-07, 0, 32], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 4], 'false,false,true,false': [0.0, 0, 1], 'false,false,false,true': [2.527, 73, 7], 'false,false,false,false': [2.242, 31, 6]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, C)', 'true,false': 'follows(D, A), follows(D, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,false': 'follows(F, A), follows(G, F)', 'false,false,true': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(A, H)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [1.363, 2, 26], 'false,true': [2.98e-08, 0, 11], 'false,false,true,true': [0.008, 0, 6], 'false,false,true,false': [0.036, 88, 0], 'false,false,false,true': [2.124, 13, 7], 'false,false,false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, A)', 'true,true': 'follows(A, D), follows(C, E)', 'true,false': 'follows(F, A), recursion_accounttype(F, B)', 'false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false': 'follows(H, A)'}, {'true,true,true': [3.408, 67, 33], 'true,true,false': [0.743, 3, 2], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.24, 16, 8], 'false,true': [0.0, 0, 7], 'false,false,true': [0.0, 4, 0], 'false,false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D), follows(D, C)', 'true,true': 'recursion_accounttype(D, B)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(F, F)', 'false,false': 'follows(G, A), follows(A, H)', 'false,false,true': 'tweets(A, I), tweets(G, I)', 'false,false,false': 'tweets(A, J)'}, {'true,true,true': [0.981, 1, 25], 'true,true,false': [0.0, 0, 0], 'true,false': [0.0, 0, 1], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.168, 0, 11], 'false,false,true,true': [1.813, 56, 5], 'false,false,true,false': [0.804, 15, 1], 'false,false,false,true': [1.307, 17, 2], 'false,false,false,false': [1.793, 9, 5]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A), tweets(D, E)', 'false,true': 'follows(A, F), follows(D, F)', 'false,true,true': 'follows(G, D), recursion_accounttype(G, B)', 'false,true,false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(H, B)', 'false,false,false': 'tweets(A, I), follows(A, J)'}, {'true': [0.997, 1, 26], 'false,true,true,true': [0.904, 1, 7], 'false,true,true,false': [0.082, 61, 0], 'false,true,false,true': [0.0, 0, 7], 'false,true,false,false': [1.156, 11, 3], 'false,false,true': [0.949, 1, 7], 'false,false,false,true': [7.45e-09, 14, 0], 'false,false,false,false': [0.0, 5, 0]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(D, D)', 'false,true,false': 'tweets(D, E)', 'false,false': 'follows(F, A)', 'false,false,false': 'follows(G, A), follows(G, G)'}, {'true': [0.204, 0, 32], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [1.954, 81, 10], 'false,true,false,false': [0.0, 0, 0], 'false,false,true': [0.015, 6, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.006, 17, 8]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(D, F), follows(D, D)', 'false,false': 'follows(G, A), follows(A, G)'}, {'true': [1.802, 4, 26], 'false,true,true': [0.874, 0, 17], 'false,true,false,true': [0.0, 0, 0], 'false,true,false,false': [0.076, 87, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.381, 16, 7]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'tweets(D, E)', 'false,true,true': 'tweets(A, F)', 'false,true,false': 'follows(D, D), tweets(A, G)', 'false,false': 'follows(A, H)', 'false,false,false': 'follows(I, A), recursion_accounttype(I, B)'}, {'true': [1.386, 2, 26], 'false,true,true,true': [1.487, 58, 7], 'false,true,true,false': [0.593, 9, 1], 'false,true,false,true': [0.0, 0, 0], 'false,true,false,false': [0.0, 2, 0], 'false,false,true': [0.331, 24, 9], 'false,false,false,true': [0.0, 0, 7], 'false,false,false,false': [0.0, 2, 0]}], ['accounttype(A, B)', {'': 'follows(A, C), follows(D, A)', 'true': 'follows(C, E), recursion_accounttype(E, B)', 'true,false': 'follows(C, A)', 'false': 'recursion_accounttype(F, B)', 'false,true': 'follows(A, G), follows(F, G)', 'false,false': 'follows(H, A), follows(I, H)', 'false,false,false': 'follows(J, A)'}, {'true,true': [0.828, 0, 34], 'true,false,true': [0.047, 64, 0], 'true,false,false': [0.31, 4, 1], 'false,true,true': [0.371, 0, 8], 'false,true,false': [0.0, 0, 7], 'false,false,true': [0.0, 4, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.084, 21, 0]}], ['accounttype(A, B)', {'': 'follows(A, C), follows(C, C)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'follows(A, D)', 'false,false': 'follows(A, F)', 'false,false,true': 'follows(F, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true,true': [1.615, 2, 42], 'false,true,false,true': [0.036, 62, 0], 'false,true,false,false': [0.038, 10, 0], 'false,false,true,true': [1.158, 1, 3], 'false,false,true,false': [1.148, 13, 5], 'false,false,false': [0.0, 0, 0]}]]
[{'': [1.4432899320127035e-15, 0.1257726417629668], 'false': [nan, 0.1257726417629668], 'false,false': [0.0, 0.0987654320987649], 'false,false,false': [0.07984375000000024, 0.13586559532505496], 'false,false,true': [0.0, 0.0]}, {'': [0.06632653061224472, 0.13610892095957686], 'false': [8.074349270001139e-17, 0.10064047961999795], 'false,false': [0.059847224967480316, 0.2255440316155441], 'false,false,false': [0.2255440316155441, nan], 'true': [nan, 0.06632653061224472], 'true,false': [nan, 0.06632653061224485], 'false,false,true': [1.1196841658585773e-05, 1.4647273339206276e-05]}, {'': [0.1334767860091221, 0.10811900579523996], 'true': [0.11593976676037361, 0.20906887580498837], 'true,false': [nan, 0.20906887580498837], 'true,true': [0.11616983892245424, 0.11037581825676293], 'false': [-6.344131569286608e-17, 0.0], 'false,false': [0.0, nan]}, {'': [0.03564215640984508, 0.09905769629148196], 'false': [0.002552892907391731, 0.08645578192753355], 'false,false': [0.05113642078920894, 0.16042613245654688], 'false,false,false': [0.0899057175870473, 0.22959183673469372], 'false,false,true': [0.05386369478344116, 0.04040062324054785], 'true': [0.036982248520709825, 0.0], 'true,true': [0.036982248520709825, nan], 'false,true': [nan, 0.002552892907391731]}, {'': [0.03680596361333532, 0.09240682510151371], 'false': [0.06312610680501315, 0.18523179071855475], 'false,false': [0.11264870029192309, 0.00041074106222371257], 'false,true': [0.04961830420317206, 0.08031422141883159], 'false,true,false': [-1.586032892321652e-17, 0.09542577114285926], 'false,true,true': [0.10212535951811413, 0.00010896020519187571], 'false,false,false': [3.96508223080413e-18, 0.0]}, {'': [0.0012957657565352138, 0.06650588820692513], 'false': [0.041937267251649334, 0.13497830511590322], 'false,false': [0.00023818116071178583, 0.16092211271672238], 'false,false,false': [nan, 0.16092211271672238], 'false,true': [nan, 0.041937267251649334], 'false,true,false': [0.041937267251649334, nan]}, {'': [0.10824033367247061, 0.0601671385046976], 'false': [0.03938837827719259, 0.14542286287123177], 'false,false': [nan, 0.14542286287123177], 'false,true': [0.04492909517914536, 6.701635307181465e-05], 'false,true,false': [nan, 6.70163530718223e-05]}, {'': [0.06855800774522876, 0.05429747812123088], 'false': [0.03335471972476915, 0.08891357129494541], 'false,false': [0.10950601395065668, 0.009573678129815697], 'false,true': [0.03416056472419284, 0.0], 'false,true,true': [0.034009562032092495, 0.0351316252448515], 'false,false,false': [-3.96508223080413e-18, 0.0], 'false,true,false': [nan, 0.0]}, {'': [0.03799598857065448, 0.09131224395909772], 'false': [0.05971578538407491, 0.0017070907101146603], 'false,true': [0.01723178146873794, 0.0], 'true': [0.02017090715278256, 0.0017068130515169818], 'false,false': [0.0, 0.000334115179953663], 'true,false': [3.420854316472238e-05, 0.019222649233707735], 'false,false,false': [nan, 0.000334115179953663]}, {'': [nan, 0.05158526828541046], 'false': [0.03769741325857728, 0.12457507919387384], 'false,false': [0.12457507919387384, nan], 'false,false,true': [0.335200262347219, 0.07318622079096253], 'false,true': [0.059290198589618995, 3.829418448629551e-05], 'false,true,false': [2.1273192084665347e-05, 0.00014324105530624936]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
0;false;follows(A, E), recursion_accounttype(E, B).;true;true
0;false,true;follows(F, A), follows(E, G).;true;true
1;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
1;false;follows(E, A), recursion_accounttype(E, B).;true;true
1;false,false;follows(F, A), follows(G, F).;true;true
1;false,false,true;recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
3;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
3;true;follows(C, D), follows(D, C).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(D, A), tweets(D, E).;true;true
4;false,true;follows(A, F), follows(D, F).;true;true
4;false,true,true;follows(G, D), recursion_accounttype(G, B).;true;true
4;false,true,false;recursion_accounttype(D, B).;true;true
4;false,false;recursion_accounttype(H, B).;true;true
4;false,false,false;tweets(A, I), follows(A, J).;true;true
5;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
5;false;follows(A, D), follows(D, A).;true;true
5;false,false;follows(F, A).;true;true
6;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
6;false;follows(D, A).;true;true
6;false,true;follows(E, D), recursion_accounttype(E, B).;true;true
7;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
7;false;follows(A, D), follows(D, A).;true;true
7;false,true;tweets(D, E).;true;true
7;false,false;follows(A, H).;true;true
7;false,false,false;follows(I, A), recursion_accounttype(I, B).;true;true
8;;accounttype(A, B) :- follows(A, C), follows(D, A).;true;true
8;true;follows(C, E), recursion_accounttype(E, B).;true;true
8;true,false;follows(C, A).;true;true
8;false;recursion_accounttype(F, B).;true;true
8;false,true;follows(A, G), follows(F, G).;true;true
8;false,false;follows(H, A), follows(I, H).;true;true
9;;accounttype(A, B) :- follows(D, A).;true;true
9;true;follows(E, D), recursion_accounttype(E, B).;true;true
9;true,false;follows(A, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), follows(A, E) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.8055173561521439;  // std dev = 0.973, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | | else return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.6081489350995122;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then if ( follows(G, A), follows(F, H) )
%   | | then return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(I, A) )
%   | | then return -0.08244512430642827;  // std dev = 0.236, 101.000 (wgt'ed) examples reached here.  /* #neg=95 #pos=6 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.001006077956655051;  // std dev = 1.309, 14.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=2 */
%   | | | else return 0.3581489350995123;  // std dev = 1.581, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.7352723534514285;  // std dev = 0.059, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else return 0.45578536787432594;  // std dev = 0.466, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then return 0.730774417186289;  // std dev = 0.080, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( follows(F, A), follows(G, F) )
%   | | then if ( recursion_accounttype(G, B) )
%   | | | then return 0.867891726113828;  // std dev = 2.98e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.13210827388617183;  // std dev = 3.94e-08, 79.000 (wgt'ed) examples reached here.  /* #neg=79 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return 0.09159799310134102;  // std dev = 1.469, 12.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=3 */
%   | | | else return 0.25866172311603053;  // std dev = 1.510, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.5746955636978935;  // std dev = 0.118, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A) )
%   | | | then return 0.6650911507448142;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.04748749252872312;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( follows(G, A) )
%   | | | then return -0.059620152069699395;  // std dev = 2.014, 88.000 (wgt'ed) examples reached here.  /* #neg=82 #pos=6 */
%   | | | else return 0.07721373793534284;  // std dev = 2.223, 26.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=7 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.5525741106509149;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return -0.1176833566528959;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, C) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F), tweets(E, F) )
%   | | | then return 0.2967764136530721;  // std dev = 1.323, 16.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=14 */
%   | | | else return 0.4426601238297455;  // std dev = 0.064, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.5052434443420117;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.6303114550456654;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(A, G) )
%   | then if ( follows(H, G), recursion_accounttype(H, B) )
%   | | then if ( follows(H, A) )
%   | | | then return 0.45125649729143114;  // std dev = 0.082, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.7644001518134124;  // std dev = 0.103, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return -0.1359957814860507;  // std dev = 0.465, 94.000 (wgt'ed) examples reached here.  /* #neg=94 */
%   | else if ( follows(I, A), recursion_accounttype(I, B) )
%   | | then return 0.41544577133496663;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return -0.10600283596136677;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), tweets(A, E) )
%   | | then return 0.28487678266957484;  // std dev = 0.249, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | else return 0.3380427611771695;  // std dev = 0.058, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.08812447105376553;  // std dev = 0.494, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( follows(F, A), tweets(F, G) )
%   | then if ( follows(A, H), follows(F, H) )
%   | | then return -0.048596108342151;  // std dev = 0.167, 81.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=7 */
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0.3193102907235517;  // std dev = 1.05e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.061563754780156896;  // std dev = 0.891, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return 0.6509473654815033;  // std dev = 0.065, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.4395060048590868;  // std dev = 0.745, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return -0.19202965509329054;  // std dev = 0.030, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then return 0.1696868917800875;  // std dev = 0.321, 17.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | | else return 0.2698739509747491;  // std dev = 0.048, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.28886877171658454;  // std dev = 0.053, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( follows(A, F), follows(F, A) )
%   | then if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.3606847510320602;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, H) )
%   | | | then return -0.03970721888860034;  // std dev = 1.443, 60.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=5 */
%   | | | else return -0.03517377160503868;  // std dev = 0.654, 11.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=1 */
%   | else if ( follows(I, A) )
%   | | then return -0.10174592755107195;  // std dev = 0.024, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( tweets(A, J) )
%   | | | then return -0.02889506572669538;  // std dev = 0.898, 14.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=2 */
%   | | | else return 0.11626469952461019;  // std dev = 1.175, 13.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.2519563261407258;  // std dev = 0.110, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else return 0.0837702434639062;  // std dev = 0.911, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(E, A) )
%   | then if ( follows(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return 0.23398111531802523;  // std dev = 0.156, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.5891306625733366;  // std dev = 0.031, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.09189540067550037;  // std dev = 0.039, 78.000 (wgt'ed) examples reached here.  /* #neg=78 */
%   | else if ( tweets(A, H) )
%   | | then return 0.05109787209926839;  // std dev = 0.297, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else return 0.11554183009271876;  // std dev = 0.327, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.21687949283944968;  // std dev = 0.215, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( tweets(D, E) )
%   | | then if ( tweets(A, F) )
%   | | | then return -0.0408428209732306;  // std dev = 1.318, 66.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=7 */
%   | | | else return -0.05380510781529868;  // std dev = 0.521, 17.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=1 */
%   | | else return -0.0806802748908088;  // std dev = 0.009, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( follows(A, G) )
%   | | then if ( tweets(A, H) )
%   | | | then return -0.01957556572936083;  // std dev = 0.967, 19.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=4 */
%   | | | else return 0.04006316806482348;  // std dev = 1.095, 12.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=5 */
%   | | else if ( follows(I, A), recursion_accounttype(I, B) )
%   | | | then return 0.16810696270619663;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(D, A) )
%   then if ( follows(C, E), recursion_accounttype(E, B) )
%   | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then if ( tweets(A, G) )
%   | | | then return 0.17424274195329723;  // std dev = 0.083, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | | else return -0.06295756928268581;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0.26376946634335735;  // std dev = 0.054, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.45378528938061047;  // std dev = 0.032, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return -0.07875465544305835;  // std dev = 0.029, 93.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=1 */
%   else if ( recursion_accounttype(I, B) )
%   | then if ( follows(A, J), follows(I, J) )
%   | | then if ( follows(A, K), follows(K, L) )
%   | | | then return 0.44955840026633;  // std dev = 0.127, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.428699428794574;  // std dev = 0.158, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.14588958921085102;  // std dev = 1.86e-09, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return -0.13469470109739512;  // std dev = 0.058, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F), tweets(E, F) )
%   | | | then return 0.09830122665124828;  // std dev = 0.973, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return -0.03440200156889217;  // std dev = 1.240, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return 0.160227867742782;  // std dev = 0.146, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.34550172859647477;  // std dev = 0.029, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return -0.07651225028855954;  // std dev = 0.004, 75.000 (wgt'ed) examples reached here.  /* #neg=75 */
%   else if ( tweets(A, H) )
%   | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | then return 0.05218858661518855;  // std dev = 0.972, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.11441019441127075;  // std dev = 0.008, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else if ( follows(A, J), follows(J, K) )
%   | | then return 0.054343102841892414;  // std dev = 0.484, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return 0.04190359707778313;  // std dev = 0.257, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */


Results
   AUC ROC   = 0.993322
   AUC PR    = 0.396181
   CLL	      = -0.118475
   Precision = 0.348039 at threshold = 0.5
   Recall    = 0.910256
   F1        = 0.503546


Total learning time: 7.267 seconds
Total inference time: 58.359 seconds
AUC ROC: 0.993322


Results scoring model
   AUC ROC   = 0.993184
   AUC PR    = 0.501677
   CLL	      = -0.113391
   Precision = 0.340136 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.507614


Total scoring time: 23.373 seconds
Refined model CLL: -0.113391


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.993322
   AUC PR    = 0.396181
   CLL	      = -0.118475
   Precision = 0.348039 at threshold = 0.5
   Recall    = 0.910256
   F1        = 0.503546


Total learning time: 50.57 seconds
Total inference time: 58.359 seconds
AUC ROC: 0.993322
Total revision time: 50.57
Best scored revision CLL: -0.113391


Dataset: 7_yeast_twitter, Fold: 2, Type: Transfer (trRDN-B), Time: 00:58:43
{'AUC ROC': 0.993322, 'AUC PR': 0.396181, 'CLL': -0.118475, 'Precision': [0.348039, 0.5], 'Recall': 0.910256, 'F1': 0.503546, 'Learning time': 50.57, 'Inference time': 58.359, 'parameter_0.4': {'AUC ROC': 0.992592, 'AUC PR': 0.410139, 'CLL': -0.126942, 'Precision': [0.342711, 0.5], 'Recall': 0.858974, 'F1': 0.489945, 'Learning time': 4.321, 'Inference time': 46.254}}


Amount of data: 0.6
******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;false;true
0;false;interaction(A, D), interaction(D, D).;true;true
0;false,true;interaction(E, A), interaction(D, E).;true;true
0;false,true,true;interaction(A, A).;false;false
0;false,true,false;enzyme(D, F), phenotype(A, G).;false;false
0;false,false;interaction(H, A), recursion_proteinclass(H, B).;true;true
0;false,false,true;interaction(A, I), interaction(J, H).;false;false
0;false,false,false;interaction(K, A), complex(A, L).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
1;true;interaction(C, C).;false;true
1;true,false;interaction(A, D), interaction(D, D).;true;false
1;true,false,true;complex(C, E).;false;false
1;false;interaction(A, F), recursion_proteinclass(F, B).;false;true
1;false,false;interaction(A, G), interaction(G, H).;true;true
1;false,false,true;recursion_proteinclass(H, B).;false;false
1;false,false,false;interaction(I, A), location(I, J).;false;false
2;;proteinclass(A, B) :- interaction(C, A), enzyme(C, D).;true;true
2;true;location(A, E), location(C, E).;false;true
2;true,false;interaction(A, F), phenotype(A, G).;true;true
2;true,false,true;interaction(F, A), interaction(H, C).;false;false
2;true,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;false;interaction(A, J), recursion_proteinclass(J, B).;false;true
2;false,false;interaction(A, K), enzyme(K, L).;false;true
2;false,false,false;interaction(M, A), interaction(A, M).;false;false
3;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
3;true;interaction(D, C), interaction(C, D).;true;false
3;true,true;recursion_proteinclass(D, B).;false;false
3;false;interaction(A, E), recursion_proteinclass(E, B).;true;true
3;false,true;interaction(E, F), interaction(F, F).;false;false
3;false,false;interaction(A, G), interaction(H, A).;true;true
3;false,false,true;complex(A, I), complex(G, I).;false;false
3;false,false,false;enzyme(A, J), complex(A, K).;false;false
4;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
4;false;interaction(A, D), complex(D, E).;true;true
4;false,true;interaction(F, A), interaction(F, D).;true;true
4;false,true,true;interaction(D, G), recursion_proteinclass(G, B).;false;false
4;false,true,false;recursion_proteinclass(D, B).;false;false
4;false,false;enzyme(A, H), location(A, I).;true;true
4;false,false,true;enzyme(J, H), recursion_proteinclass(J, B).;false;false
4;false,false,false;complex(A, K), interaction(L, A).;false;false
5;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;false;true
5;false;interaction(D, A), interaction(A, D).;true;true
5;false,true;interaction(D, D).;true;true
5;false,true,true;interaction(A, A).;false;false
5;false,true,false;phenotype(D, E), complex(D, F).;false;false
5;false,false;enzyme(A, G), interaction(A, H).;true;true
5;false,false,true;enzyme(H, I).;false;false
5;false,false,false;interaction(A, J), interaction(J, J).;false;false
6;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
6;false;interaction(A, D), phenotype(A, E).;true;true
6;false,true;location(D, F), location(A, F).;true;true
6;false,true,true;interaction(D, G), recursion_proteinclass(G, B).;false;false
6;false,true,false;complex(D, H), interaction(D, D).;false;false
6;false,false;interaction(A, I), interaction(I, A).;true;true
6;false,false,true;interaction(I, I).;false;false
6;false,false,false;location(A, J).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
7;false;interaction(D, A), interaction(A, D).;true;true
7;false,true;complex(D, E).;true;true
7;false,true,true;complex(A, F), enzyme(D, G).;false;false
7;false,true,false;interaction(D, D), complex(A, H).;false;false
7;false,false;enzyme(A, I), interaction(J, A).;true;true
7;false,false,true;enzyme(J, K), phenotype(J, L).;false;false
7;false,false,false;interaction(A, M), recursion_proteinclass(M, B).;false;false
8;;proteinclass(A, B) :- interaction(C, A), interaction(A, D).;true;true
8;true;interaction(E, C), recursion_proteinclass(E, B).;false;true
8;true,false;interaction(A, C).;false;false
8;false;location(A, F).;true;true
8;false,true;location(G, F), recursion_proteinclass(G, B).;true;false
8;false,true,true;interaction(H, A), interaction(H, G).;false;false
8;false,false;interaction(A, I), interaction(I, J).;false;true
8;false,false,false;interaction(A, K).;false;false
9;;proteinclass(A, B) :- interaction(C, A), interaction(C, C).;true;true
9;true;recursion_proteinclass(C, B), interaction(A, C).;false;false
9;false;enzyme(A, D), interaction(A, E).;true;true
9;false,true;interaction(E, F), recursion_proteinclass(F, B).;false;true
9;false,true,false;interaction(E, A).;false;false
9;false,false;interaction(G, A), phenotype(A, H).;true;true
9;false,false,true;interaction(I, G), recursion_proteinclass(I, B).;false;false
9;false,false,false;interaction(A, J), enzyme(J, K).;false;false


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.8381489350995122;  // std dev = 0.990, 50.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=49 */
%   else if ( follows(D, A), follows(D, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), follows(E, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.6081489350995122;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( follows(A, H), tweets(A, I) )
%   | | | then return -0.0360818341312569;  // std dev = 3.136, 104.000 (wgt'ed) examples reached here.  /* #neg=93 #pos=11 */
%   | | | else return 0.0044903985141464585;  // std dev = 2.263, 41.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=6 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(D, A), follows(D, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.7257609036106767;  // std dev = 0.075, 47.000 (wgt'ed) examples reached here.  /* #pos=47 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then return 0.723492266045418;  // std dev = 4.21e-08, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( follows(F, A), follows(G, F) )
%   | | then if ( recursion_accounttype(G, B) )
%   | | | then return 0.8616707849838597;  // std dev = 0.004, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.1387842123898268;  // std dev = 0.024, 127.000 (wgt'ed) examples reached here.  /* #neg=127 */
%   | | else if ( follows(A, H) )
%   | | | then return 0.11059795826984767;  // std dev = 2.871, 44.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=11 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, A) )
%   | then if ( follows(A, D), follows(C, E) )
%   | | then return 0.08311843275345036;  // std dev = 4.242, 172.000 (wgt'ed) examples reached here.  /* #neg=121 #pos=51 */
%   | | else return 0.034226306299744345;  // std dev = 1.033, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.15052537850793488;  // std dev = 2.974, 43.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=14 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5593091614946942;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(H, A) )
%   | | then return -0.12627608108043337;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, C) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then return 0.5151520439560666;  // std dev = 0.988, 44.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=43 */
%   | | else return 0.533194036565269;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0.5782429770835174;  // std dev = 1.49e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(F, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.4656624588517703;  // std dev = 0.199, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( follows(G, A), follows(A, H) )
%   | | then if ( tweets(A, I), tweets(G, I) )
%   | | | then return -0.08052908327858149;  // std dev = 1.822, 83.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=5 */
%   | | | else return -0.10902303625352756;  // std dev = 0.822, 33.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=1 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.01700856106741253;  // std dev = 2.194, 34.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=6 */
%   | | | else return 0.04991989818060305;  // std dev = 1.966, 22.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=5 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.2825309167247397;  // std dev = 2.457, 54.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=47 */
%   else if ( follows(D, A), tweets(D, E) )
%   | then if ( follows(A, F), follows(D, F) )
%   | | then if ( follows(G, D), recursion_accounttype(G, B) )
%   | | | then return 0.4882514142102001;  // std dev = 0.904, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return -0.12257562843909506;  // std dev = 0.035, 107.000 (wgt'ed) examples reached here.  /* #neg=107 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0.1878964246399457;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return -0.028066214960603617;  // std dev = 1.236, 25.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=3 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then return 0.8211441062587276;  // std dev = 0.018, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( tweets(A, I), follows(A, J) )
%   | | | then return -0.17071636864431883;  // std dev = 0.053, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | | else return -0.18475374864343738;  // std dev = 5.27e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.3144874974144971;  // std dev = 1.001, 50.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=49 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(D, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(D, E) )
%   | | | then return -0.051349774419463555;  // std dev = 2.036, 115.000 (wgt'ed) examples reached here.  /* #neg=104 #pos=11 */
%   | | | else return -0.10234034499714224;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( follows(F, A) )
%   | | then return -0.08204423128220437;  // std dev = 0.112, 16.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=1 */
%   | | else if ( follows(G, A), follows(G, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.12533805006656493;  // std dev = 2.302, 38.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=14 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.2514523703672613;  // std dev = 1.348, 49.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=47 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0.3900755242980011;  // std dev = 0.865, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( tweets(D, F), follows(D, D) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10494767596399285;  // std dev = 0.036, 134.000 (wgt'ed) examples reached here.  /* #neg=134 */
%   | else if ( follows(G, A), follows(A, G) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.05823970323402499;  // std dev = 0.365, 39.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=11 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.24189433897095416;  // std dev = 0.175, 47.000 (wgt'ed) examples reached here.  /* #pos=47 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( tweets(D, E) )
%   | | then if ( tweets(A, F) )
%   | | | then return -0.053118688534510454;  // std dev = 1.525, 93.000 (wgt'ed) examples reached here.  /* #neg=86 #pos=7 */
%   | | | else return -0.07042568584367291;  // std dev = 0.617, 24.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=1 */
%   | | else if ( follows(D, D), tweets(A, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.08837747926558037;  // std dev = 0.007, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( follows(A, H) )
%   | | then return 0.033054942712253975;  // std dev = 0.351, 47.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=13 */
%   | | else if ( follows(I, A), recursion_accounttype(I, B) )
%   | | | then return 0.15721835499846581;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.0946085571094555;  // std dev = 5.27e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(D, A) )
%   then if ( follows(C, E), recursion_accounttype(E, B) )
%   | then return 0.22227952938167414;  // std dev = 1.396, 54.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=53 */
%   | else if ( follows(C, A) )
%   | | then return -0.09135817169893415;  // std dev = 0.032, 109.000 (wgt'ed) examples reached here.  /* #neg=109 */
%   | | else return -0.06713616165078028;  // std dev = 0.355, 14.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=1 */
%   else if ( recursion_accounttype(F, B) )
%   | then if ( follows(A, G), follows(F, G) )
%   | | then return 0.4509487118189882;  // std dev = 1.386, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | else return 0.1374905849894068;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then return -0.08680953454237289;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( follows(J, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.18586781609606354;  // std dev = 0.022, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(C, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0.18076796436168388;  // std dev = 1.374, 61.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=60 */
%   | | else if ( follows(A, D) )
%   | | | then return -0.08404984807442856;  // std dev = 0.022, 93.000 (wgt'ed) examples reached here.  /* #neg=93 */
%   | | | else return -0.058242199103589444;  // std dev = 0.295, 12.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=1 */
%   | else if ( follows(A, F) )
%   | | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | | then return 0.4116575375460772;  // std dev = 0.412, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.014389434823472925;  // std dev = 1.466, 30.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=7 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.991763
   AUC PR    = 0.358265
   CLL	      = -0.124897
   Precision = 0.340206 at threshold = 0.5
   Recall    = 0.846154
   F1        = 0.485294


Total learning time: 5.937 seconds
Total inference time: 43.703 seconds
AUC ROC: 0.991763


Results scoring model
   AUC ROC   = 0.993217
   AUC PR    = 0.42238
   CLL	      = -0.121035
   Precision = 0.330049 at threshold = 0.5
   Recall    = 0.893333
   F1        = 0.482014


Total scoring time: 23.428 seconds
Parameter learned model CLL: -0.121035


Structure after Parameter Learning
[['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(D, A), follows(D, D)', 'false,false': 'follows(A, E), recursion_accounttype(E, B)', 'false,false,true': 'follows(F, A), follows(E, G)', 'false,false,false': 'follows(A, H), tweets(A, I)'}, {'true': [0.99, 1, 49], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 6], 'false,false,true,false': [0.866, 1, 3], 'false,false,false,true': [3.136, 93, 11], 'false,false,false,false': [2.263, 35, 6]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, C)', 'true,false': 'follows(D, A), follows(D, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,false': 'follows(F, A), follows(G, F)', 'false,false,true': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(A, H)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [0.075, 0, 47], 'false,true': [4.21e-08, 0, 11], 'false,false,true,true': [0.004, 0, 6], 'false,false,true,false': [0.024, 127, 0], 'false,false,false,true': [2.871, 33, 11], 'false,false,false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, A)', 'true,true': 'follows(A, D), follows(C, E)', 'true,false': 'follows(F, A), recursion_accounttype(F, B)', 'false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false': 'follows(H, A)'}, {'true,true,true': [4.242, 121, 51], 'true,true,false': [1.033, 10, 3], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.974, 29, 14], 'false,true': [0.0, 0, 7], 'false,false,true': [0.0, 5, 0], 'false,false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D), follows(D, C)', 'true,true': 'recursion_accounttype(D, B)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(F, F)', 'false,false': 'follows(G, A), follows(A, H)', 'false,false,true': 'tweets(A, I), tweets(G, I)', 'false,false,false': 'tweets(A, J)'}, {'true,true,true': [0.988, 1, 43], 'true,true,false': [0.0, 0, 1], 'true,false': [1.49e-08, 0, 3], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.199, 0, 11], 'false,false,true,true': [1.822, 78, 5], 'false,false,true,false': [0.822, 32, 1], 'false,false,false,true': [2.194, 28, 6], 'false,false,false,false': [1.966, 17, 5]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A), tweets(D, E)', 'false,true': 'follows(A, F), follows(D, F)', 'false,true,true': 'follows(G, D), recursion_accounttype(G, B)', 'false,true,false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(H, B)', 'false,false,false': 'tweets(A, I), follows(A, J)'}, {'true': [2.457, 7, 47], 'false,true,true,true': [0.904, 1, 7], 'false,true,true,false': [0.035, 107, 0], 'false,true,false,true': [0.935, 1, 7], 'false,true,false,false': [1.236, 22, 3], 'false,false,true': [0.018, 0, 11], 'false,false,false,true': [0.053, 17, 0], 'false,false,false,false': [5.27e-09, 7, 0]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(D, D)', 'false,true,false': 'tweets(D, E)', 'false,false': 'follows(F, A)', 'false,false,false': 'follows(G, A), follows(G, G)'}, {'true': [1.001, 1, 49], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [2.036, 104, 11], 'false,true,false,false': [0.0, 2, 0], 'false,false,true': [0.112, 15, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.302, 24, 14]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(D, F), follows(D, D)', 'false,false': 'follows(G, A), follows(A, G)'}, {'true': [1.348, 2, 47], 'false,true,true': [0.865, 0, 17], 'false,true,false,true': [0.0, 0, 0], 'false,true,false,false': [0.036, 134, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.365, 28, 11]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'tweets(D, E)', 'false,true,true': 'tweets(A, F)', 'false,true,false': 'follows(D, D), tweets(A, G)', 'false,false': 'follows(A, H)', 'false,false,false': 'follows(I, A), recursion_accounttype(I, B)'}, {'true': [0.175, 0, 47], 'false,true,true,true': [1.525, 86, 7], 'false,true,true,false': [0.617, 23, 1], 'false,true,false,true': [0.0, 0, 0], 'false,true,false,false': [0.007, 4, 0], 'false,false,true': [0.351, 34, 13], 'false,false,false,true': [0.0, 0, 7], 'false,false,false,false': [5.27e-09, 11, 0]}], ['accounttype(A, B)', {'': 'follows(A, C), follows(D, A)', 'true': 'follows(C, E), recursion_accounttype(E, B)', 'true,false': 'follows(C, A)', 'false': 'recursion_accounttype(F, B)', 'false,true': 'follows(A, G), follows(F, G)', 'false,false': 'follows(H, A), follows(I, H)', 'false,false,false': 'follows(J, A)'}, {'true,true': [1.396, 1, 53], 'true,false,true': [0.032, 109, 0], 'true,false,false': [0.355, 13, 1], 'false,true,true': [1.386, 1, 14], 'false,true,false': [0.0, 0, 7], 'false,false,true': [0.0, 5, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.022, 24, 0]}], ['accounttype(A, B)', {'': 'follows(A, C), follows(C, C)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'follows(A, D)', 'false,false': 'follows(A, F)', 'false,false,true': 'follows(F, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true,true': [1.374, 1, 60], 'false,true,false,true': [0.022, 93, 0], 'false,true,false,false': [0.295, 11, 1], 'false,false,true,true': [0.412, 0, 7], 'false,false,true,false': [1.466, 23, 7], 'false,false,false': [0.0, 0, 0]}]]
[{'': [0.019600000000000506, 0.13960457856399533], 'false': [nan, 0.13960457856399533], 'false,false': [0.08999999999999977, 0.10349583828775213], 'false,false,false': [0.09458210059171543, 0.12492563950029764], 'false,false,true': [-1.4802973661668753e-16, 0.18750000000000006]}, {'': [0.00011814002566578218, 0.11404186469141156], 'false': [1.6148698540002277e-16, 0.08676462001390331], 'false,false': [0.04312135682057241, 0.18733918040171524], 'false,false,false': [0.1873391804017153, nan], 'false,false,true': [3.311910015568742e-06, 4.586119601360523e-06], 'true': [nan, 0.00011814002566578218], 'true,false': [nan, 0.0001181400256655554]}, {'': [0.12329339856444078, 0.11424270395338794], 'true': [0.10318059263732476, 0.2057530673462594], 'true,false': [nan, 0.2057530673462594], 'false': [-6.344131569286608e-17, 0.0], 'true,true': [0.10460278781082571, 0.08214139333336935], 'false,false': [0.0, nan]}, {'': [0.020587761488501277, 0.08758367731615135], 'false': [0.003591579841333575, 0.07696988318672907], 'false,false': [0.03460422596012035, 0.15524526781131498], 'false,false,false': [0.14163619890857954, 0.1756198347107438], 'false,false,true': [0.03998294813907038, 0.02049499244146985], 'true': [0.02171465166514442, 7.401486830834377e-17], 'true,true': [0.02220093284244238, 0.0], 'false,true': [nan, 0.003591579841333575]}, {'': [0.11178254332329988, 0.0826335810720605], 'false': [0.04432003465762335, 0.213887963926219], 'false,false': [2.8987243705975114e-05, 0.00015855745202196514], 'false,true': [0.0312659346213524, 0.08134709272292194], 'false,true,false': [0.109375, 0.06107152925407834], 'false,true,true': [0.10214270274500392, 1.1281280687576562e-05], 'false,false,false': [0.00016637347042434397, 3.96508223080413e-18]}, {'': [0.020055867861427837, 0.06218471861136468], 'false': [0.035487267976649924, 0.1108045349789122], 'false,false': [0.01252198604805335, 0.13944372436530136], 'false,false,false': [nan, 0.13944372436530136], 'false,true': [nan, 0.035487267976649924], 'false,true,false': [0.036059992755567316, 0.0]}, {'': [0.0371109732448304, 0.05263523497708065], 'false': [0.02944219366606082, 0.1332572228222273], 'false,false': [nan, 0.1332572228222273], 'false,true': [0.04398114045130117, 9.518499573411066e-06], 'false,true,false': [nan, 9.518499573409409e-06]}, {'': [0.0006537012978740995, 0.048814106985187275], 'false': [0.022431111070241917, 0.09349517509329822], 'false,false': [0.12328508205137625, 0.015071275036911809], 'false,true': [0.023164312868727964, 1.2758385945455149e-05], 'false,true,true': [0.02499254494214109, 0.015841823921902264], 'false,false,false': [0.0, 2.523234146875356e-18], 'false,true,false': [nan, 1.2758385945455149e-05]}, {'': [0.032251065624600235, 0.11397508383531864], 'false': [0.10859067422345689, 0.001416295551255132], 'false,true': [0.12800305033401393, -3.96508223080413e-18], 'true': [0.03606460149284678, 0.0010913584052474714], 'false,false': [0.0, 1.953934092115602e-05], 'true,false': [9.165705559065372e-06, 0.008997075314958814], 'false,false,false': [nan, 1.953934092115602e-05]}, {'': [nan, 0.03968637449071755], 'false': [0.02788136095998234, 0.09051532693740341], 'false,false': [0.09051532693740341, nan], 'false,false,true': [0.024213103881418237, 0.07164497649757941], 'false,true': [0.030950284718780224, 0.0008992001385966078], 'false,true,false': [5.201386988835917e-06, 0.007237773974772192]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
0;false;follows(A, E), recursion_accounttype(E, B).;true;true
0;false,true;follows(F, A), follows(E, G).;true;true
1;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
1;false;follows(E, A), recursion_accounttype(E, B).;true;true
1;false,false;follows(F, A), follows(G, F).;true;true
1;false,false,true;recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
3;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
3;true;follows(C, D), follows(D, C).;true;true
3;true,true;recursion_accounttype(D, B).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(D, A), tweets(D, E).;true;true
4;false,true;follows(A, F), follows(D, F).;true;true
4;false,true,true;follows(G, D), recursion_accounttype(G, B).;true;true
4;false,false;recursion_accounttype(H, B).;true;true
4;false,false,false;tweets(A, I), follows(A, J).;true;true
5;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
5;false;follows(A, D), follows(D, A).;true;true
5;false,true;tweets(D, E).;true;true
6;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
6;false;follows(D, A).;true;true
6;false,true;follows(E, D), recursion_accounttype(E, B).;true;true
7;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
7;false;follows(A, D), follows(D, A).;true;true
7;false,true;tweets(D, E).;true;true
7;false,false;follows(A, H).;true;true
7;false,false,false;follows(I, A), recursion_accounttype(I, B).;true;true
8;;accounttype(A, B) :- follows(A, C), follows(D, A).;true;true
8;true;follows(C, E), recursion_accounttype(E, B).;true;true
8;true,false;follows(C, A).;true;true
8;false;recursion_accounttype(F, B).;true;true
8;false,true;follows(A, G), follows(F, G).;true;true
8;false,false;follows(H, A), follows(I, H).;true;true
9;;accounttype(A, B) :- follows(D, A).;true;true
9;true;follows(E, D), recursion_accounttype(E, B).;true;true
9;true,false;follows(A, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.7993254056877469;  // std dev = 0.235, 34.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=32 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return 0.7152917922423694;  // std dev = 0.350, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then if ( follows(G, A), follows(F, H) )
%   | | then return 0.7152917922423694;  // std dev = 0.350, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(I, A) )
%   | | then if ( follows(I, J), follows(J, A) )
%   | | | then return -0.13022315792374348;  // std dev = 0.994, 86.000 (wgt'ed) examples reached here.  /* #neg=85 #pos=1 */
%   | | | else return -0.035468086177083476;  // std dev = 2.114, 47.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=5 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.08542166237223962;  // std dev = 1.966, 22.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=5 */
%   | | | else return 0.17393840878372288;  // std dev = 2.026, 19.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=6 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( recursion_accounttype(D, B), tweets(A, E) )
%   | | then if ( tweets(D, E) )
%   | | | then return 0.6927296527848886;  // std dev = 0.981, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   | | | else return 0.7311911912464266;  // std dev = 3.65e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.7473839334745777;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else return 0.4694734122109545;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.7194734122109542;  // std dev = 4.21e-08, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( follows(G, A), follows(H, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.7211064544291136;  // std dev = 0.928, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return -0.13016560213589062;  // std dev = 0.055, 120.000 (wgt'ed) examples reached here.  /* #neg=120 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.12520695092259088;  // std dev = 1.900, 18.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=5 */
%   | | | else return 0.38108394715319327;  // std dev = 1.651, 11.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=6 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, A) )
%   | | then return 0.5258090318663912;  // std dev = 0.218, 40.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=38 */
%   | | else if ( follows(E, A), follows(D, E) )
%   | | | then return 0.249014270183571;  // std dev = 1.159, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.6029839806125494;  // std dev = 0.035, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(F, A) )
%   | | then if ( follows(F, G), follows(G, A) )
%   | | | then return -0.08419801326762745;  // std dev = 1.275, 73.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=3 */
%   | | | else return 0.004595803225336163;  // std dev = 2.006, 45.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=7 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.2016751703782952;  // std dev = 1.906, 15.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=6 */
%   | | | else return 0.1277953855065023;  // std dev = 1.838, 15.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=5 */
%   else if ( follows(I, A), recursion_accounttype(I, B) )
%   | then return 0.5553664367462846;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return -0.1130068563364771;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, C) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then return 0.45204447743994575;  // std dev = 0.151, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | | else return 0.4339729395067563;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0.46739475324103824;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(E, A), follows(A, E) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(E, G), follows(G, A) )
%   | | | then return 0.6456020374656398;  // std dev = 0.170, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.7520854520601626;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.1099461850106827;  // std dev = 0.089, 116.000 (wgt'ed) examples reached here.  /* #neg=116 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0.44789529595983324;  // std dev = 0.057, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.029392655408317904;  // std dev = 2.851, 45.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=11 */
%   | | | else return -0.10216514126143472;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.30639890247322327;  // std dev = 0.171, 33.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   | | else return 0.37620226757766784;  // std dev = 0.035, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.22133619402440385;  // std dev = 0.331, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   else if ( follows(F, A), tweets(F, G) )
%   | then if ( follows(A, H), follows(F, H) )
%   | | then if ( follows(I, F), recursion_accounttype(I, B) )
%   | | | then return 0.5281067720637367;  // std dev = 0.245, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.10073619718914148;  // std dev = 0.092, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
%   | | else if ( follows(J, A), recursion_accounttype(J, B) )
%   | | | then return 0.3302037250995262;  // std dev = 0.120, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.05196422269923571;  // std dev = 0.941, 28.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=2 */
%   | else if ( recursion_accounttype(K, B) )
%   | | then return 0.7678348817325216;  // std dev = 0.030, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return -0.2243174218525071;  // std dev = 0.037, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then return 0.27997304204094237;  // std dev = 0.018, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   | else return 0.24766814368775275;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( follows(A, E), follows(E, A) )
%   | then if ( tweets(E, F) )
%   | | then if ( tweets(A, G) )
%   | | | then return -0.04066610164677357;  // std dev = 1.580, 102.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=10 */
%   | | | else return -0.06795745714008325;  // std dev = 0.538, 23.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=1 */
%   | | else return -0.09151283769654356;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.4903354320980661;  // std dev = 0.486, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.153293803427091;  // std dev = 0.338, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.17683274218890443;  // std dev = 0.883, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.20106293994603863;  // std dev = 0.976, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( tweets(E, D), follows(E, A) )
%   | | then if ( recursion_accounttype(E, B), follows(A, E) )
%   | | | then return 0.18315330731878518;  // std dev = 0.981, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   | | | else return 0.1134658423248653;  // std dev = 1.309, 14.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=12 */
%   | | else return 0.19686649162859945;  // std dev = 0.022, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.24526390047416266;  // std dev = 0.021, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( follows(F, A) )
%   | then return -0.03656428754685645;  // std dev = 0.153, 134.000 (wgt'ed) examples reached here.  /* #neg=117 #pos=17 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.5628158598116945;  // std dev = 0.104, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.15651601213973573;  // std dev = 0.056, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.2796362549255663;  // std dev = 0.553, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return -0.03566785196485971;  // std dev = 1.148, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.19349558299582928;  // std dev = 0.022, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | else return 0.24043126917593977;  // std dev = 0.066, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( follows(A, E), follows(E, A) )
%   | then if ( tweets(E, F) )
%   | | then if ( tweets(A, G) )
%   | | | then return -0.046177809979782665;  // std dev = 1.531, 85.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=7 */
%   | | | else return -0.07065882276530584;  // std dev = 0.564, 35.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=1 */
%   | | else return -0.08384036896377184;  // std dev = 0.008, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( follows(A, H) )
%   | | then if ( tweets(A, I) )
%   | | | then return -0.023254510889395574;  // std dev = 1.258, 34.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=8 */
%   | | | else return 0.05376055043260373;  // std dev = 1.296, 14.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=5 */
%   | | else if ( follows(J, A), recursion_accounttype(J, B) )
%   | | | then return 0.21045388925894026;  // std dev = 7.45e-09, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.07464851132762458;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(D, A) )
%   then if ( follows(C, E), recursion_accounttype(E, B) )
%   | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0.17347187592653915;  // std dev = 0.028, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return 0.26205571862831917;  // std dev = 0.014, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.5497549600603945;  // std dev = 0.152, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return -0.07824439544289545;  // std dev = 0.038, 112.000 (wgt'ed) examples reached here.  /* #neg=111 #pos=1 */
%   else if ( recursion_accounttype(H, B) )
%   | then if ( follows(A, I), follows(H, I) )
%   | | then if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return -0.10675867223906949;  // std dev = 0.880, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.43808140455894756;  // std dev = 0.205, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.1776069398630248;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(K, A), follows(L, K) )
%   | | then return -0.06965301816862053;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else return -0.18926254762672906;  // std dev = 0.055, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.1299837217593233;  // std dev = 1.024, 44.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=43 */
%   | | | else return 0.0050042271104484715;  // std dev = 0.924, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return 0.32482840255452516;  // std dev = 0.110, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return -0.07527942110934889;  // std dev = 0.019, 126.000 (wgt'ed) examples reached here.  /* #neg=125 #pos=1 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.16094132175215145;  // std dev = 0.045, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.2874261843375359;  // std dev = 0.015, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.14666810553615123;  // std dev = 0.196, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.05755894566268369;  // std dev = 0.556, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.05438785119041732;  // std dev = 0.830, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */


Results
   AUC ROC   = 0.99356
   AUC PR    = 0.322873
   CLL	      = -0.115873
   Precision = 0.345154 at threshold = 0.5
   Recall    = 0.935897
   F1        = 0.504318


Total learning time: 11.992 seconds
Total inference time: 72.484 seconds
AUC ROC: 0.99356


Results scoring model
   AUC ROC   = 0.99194
   AUC PR    = 0.303231
   CLL	      = -0.116945
   Precision = 0.340909 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.508475


Total scoring time: 41.999 seconds
Refined model CLL: -0.116945


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.99356
   AUC PR    = 0.322873
   CLL	      = -0.115873
   Precision = 0.345154 at threshold = 0.5
   Recall    = 0.935897
   F1        = 0.504318


Total learning time: 83.356 seconds
Total inference time: 72.484 seconds
AUC ROC: 0.99356
Total revision time: 83.356
Best scored revision CLL: -0.116945


Dataset: 7_yeast_twitter, Fold: 2, Type: Transfer (trRDN-B), Time: 01:02:03
{'AUC ROC': 0.99356, 'AUC PR': 0.322873, 'CLL': -0.115873, 'Precision': [0.345154, 0.5], 'Recall': 0.935897, 'F1': 0.504318, 'Learning time': 83.356, 'Inference time': 72.484, 'parameter_0.6': {'AUC ROC': 0.991763, 'AUC PR': 0.358265, 'CLL': -0.124897, 'Precision': [0.340206, 0.5], 'Recall': 0.846154, 'F1': 0.485294, 'Learning time': 5.937, 'Inference time': 43.703}}


Amount of data: 0.8
******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;false;true
0;false;interaction(A, D), interaction(D, D).;true;true
0;false,true;interaction(E, A), interaction(D, E).;true;true
0;false,true,true;interaction(A, A).;false;false
0;false,true,false;enzyme(D, F), phenotype(A, G).;false;false
0;false,false;interaction(H, A), recursion_proteinclass(H, B).;true;true
0;false,false,true;interaction(A, I), interaction(J, H).;false;false
0;false,false,false;interaction(K, A), complex(A, L).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
1;true;interaction(C, C).;false;true
1;true,false;interaction(A, D), interaction(D, D).;true;false
1;true,false,true;complex(C, E).;false;false
1;false;interaction(A, F), recursion_proteinclass(F, B).;false;true
1;false,false;interaction(A, G), interaction(G, H).;true;true
1;false,false,true;recursion_proteinclass(H, B).;false;false
1;false,false,false;interaction(I, A), location(I, J).;false;false
2;;proteinclass(A, B) :- interaction(C, A), enzyme(C, D).;true;true
2;true;location(A, E), location(C, E).;false;true
2;true,false;interaction(A, F), phenotype(A, G).;true;true
2;true,false,true;interaction(F, A), interaction(H, C).;false;false
2;true,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;false;interaction(A, J), recursion_proteinclass(J, B).;false;true
2;false,false;interaction(A, K), enzyme(K, L).;false;true
2;false,false,false;interaction(M, A), interaction(A, M).;false;false
3;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
3;true;interaction(D, C), interaction(C, D).;true;false
3;true,true;recursion_proteinclass(D, B).;false;false
3;false;interaction(A, E), recursion_proteinclass(E, B).;true;true
3;false,true;interaction(E, F), interaction(F, F).;false;false
3;false,false;interaction(A, G), interaction(H, A).;true;true
3;false,false,true;complex(A, I), complex(G, I).;false;false
3;false,false,false;enzyme(A, J), complex(A, K).;false;false
4;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
4;false;interaction(A, D), complex(D, E).;true;true
4;false,true;interaction(F, A), interaction(F, D).;true;true
4;false,true,true;interaction(D, G), recursion_proteinclass(G, B).;false;false
4;false,true,false;recursion_proteinclass(D, B).;false;false
4;false,false;enzyme(A, H), location(A, I).;true;true
4;false,false,true;enzyme(J, H), recursion_proteinclass(J, B).;false;false
4;false,false,false;complex(A, K), interaction(L, A).;false;false
5;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;false;true
5;false;interaction(D, A), interaction(A, D).;true;true
5;false,true;interaction(D, D).;true;true
5;false,true,true;interaction(A, A).;false;false
5;false,true,false;phenotype(D, E), complex(D, F).;false;false
5;false,false;enzyme(A, G), interaction(A, H).;true;true
5;false,false,true;enzyme(H, I).;false;false
5;false,false,false;interaction(A, J), interaction(J, J).;false;false
6;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
6;false;interaction(A, D), phenotype(A, E).;true;true
6;false,true;location(D, F), location(A, F).;true;true
6;false,true,true;interaction(D, G), recursion_proteinclass(G, B).;false;false
6;false,true,false;complex(D, H), interaction(D, D).;false;false
6;false,false;interaction(A, I), interaction(I, A).;true;true
6;false,false,true;interaction(I, I).;false;false
6;false,false,false;location(A, J).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
7;false;interaction(D, A), interaction(A, D).;true;true
7;false,true;complex(D, E).;true;true
7;false,true,true;complex(A, F), enzyme(D, G).;false;false
7;false,true,false;interaction(D, D), complex(A, H).;false;false
7;false,false;enzyme(A, I), interaction(J, A).;true;true
7;false,false,true;enzyme(J, K), phenotype(J, L).;false;false
7;false,false,false;interaction(A, M), recursion_proteinclass(M, B).;false;false
8;;proteinclass(A, B) :- interaction(C, A), interaction(A, D).;true;true
8;true;interaction(E, C), recursion_proteinclass(E, B).;false;true
8;true,false;interaction(A, C).;false;false
8;false;location(A, F).;true;true
8;false,true;location(G, F), recursion_proteinclass(G, B).;true;false
8;false,true,true;interaction(H, A), interaction(H, G).;false;false
8;false,false;interaction(A, I), interaction(I, J).;false;true
8;false,false,false;interaction(A, K).;false;false
9;;proteinclass(A, B) :- interaction(C, A), interaction(C, C).;true;true
9;true;recursion_proteinclass(C, B), interaction(A, C).;false;false
9;false;enzyme(A, D), interaction(A, E).;true;true
9;false,true;interaction(E, F), recursion_proteinclass(F, B).;false;true
9;false,true,false;interaction(E, A).;false;false
9;false,false;interaction(G, A), phenotype(A, H).;true;true
9;false,false,true;interaction(I, G), recursion_proteinclass(I, B).;false;false
9;false,false,false;interaction(A, J), enzyme(J, K).;false;false


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.8581489350995127;  // std dev = 0.000, 69.000 (wgt'ed) examples reached here.  /* #pos=69 */
%   else if ( follows(D, A), follows(D, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), follows(E, G) )
%   | | | then return 0.7152917922423694;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.6914822684328455;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else if ( follows(A, H), tweets(A, I) )
%   | | | then return -0.06447011251953527;  // std dev = 3.463, 168.000 (wgt'ed) examples reached here.  /* #neg=155 #pos=13 */
%   | | | else return -0.030739953789376592;  // std dev = 2.494, 63.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=7 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(D, A), follows(D, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.7094638510786851;  // std dev = 1.002, 67.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=66 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then return 0.7194734122109542;  // std dev = 4.21e-08, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( follows(F, A), follows(G, F) )
%   | | then if ( recursion_accounttype(G, B) )
%   | | | then return 0.8648253075261731;  // std dev = 0.005, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.1354534387786921;  // std dev = 0.023, 153.000 (wgt'ed) examples reached here.  /* #neg=153 */
%   | | else if ( follows(A, H) )
%   | | | then return 0.09066028175874102;  // std dev = 3.047, 53.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=12 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, A) )
%   | then if ( follows(A, D), follows(C, E) )
%   | | then return 0.11267732531769005;  // std dev = 4.927, 207.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=71 */
%   | | else return 0.08923540786499715;  // std dev = 1.280, 16.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=5 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.17235807094722422;  // std dev = 3.071, 47.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=16 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5553664367462843;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(H, A) )
%   | | then return -0.12279834200921293;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, C) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then return 0.5010074198295427;  // std dev = 1.398, 62.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=60 */
%   | | else return 0.5652672199386105;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0.5552266463037645;  // std dev = 0.025, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(F, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.46585792436024775;  // std dev = 0.209, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( follows(G, A), follows(A, H) )
%   | | then if ( tweets(A, I), tweets(G, I) )
%   | | | then return -0.09424098363774823;  // std dev = 2.011, 135.000 (wgt'ed) examples reached here.  /* #neg=129 #pos=6 */
%   | | | else return -0.09097212166893444;  // std dev = 1.151, 38.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=2 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.019461939518680756;  // std dev = 2.362, 42.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=7 */
%   | | | else return 0.06555379997130875;  // std dev = 1.952, 21.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=5 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.3957268076945672;  // std dev = 0.960, 67.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=66 */
%   else if ( follows(D, A), tweets(D, E) )
%   | then if ( follows(A, F), follows(D, F) )
%   | | then if ( follows(G, D), recursion_accounttype(G, B) )
%   | | | then return 0.5700170973501795;  // std dev = 0.493, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.12244798771032214;  // std dev = 0.039, 147.000 (wgt'ed) examples reached here.  /* #neg=147 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0.3102722731604266;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.02733853421351282;  // std dev = 1.463, 34.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=4 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then return 0.824657570897446;  // std dev = 0.020, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( tweets(A, I), follows(A, J) )
%   | | | then return -0.17051385951811537;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | | else return -0.18210242652076822;  // std dev = 7.45e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.278631188243186;  // std dev = 1.399, 71.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=69 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(D, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(D, E) )
%   | | | then return -0.05300777692921564;  // std dev = 2.317, 154.000 (wgt'ed) examples reached here.  /* #neg=140 #pos=14 */
%   | | | else return -0.1044497530074699;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( follows(F, A) )
%   | | then return -0.11387323463332552;  // std dev = 0.139, 27.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=1 */
%   | | else if ( follows(G, A), follows(G, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.04994511577353755;  // std dev = 2.663, 56.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=16 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.2582396166598044;  // std dev = 0.976, 67.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=66 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0.354073583432148;  // std dev = 1.192, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | | else if ( tweets(D, F), follows(D, D) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10477260075479262;  // std dev = 0.062, 174.000 (wgt'ed) examples reached here.  /* #neg=174 */
%   | else if ( follows(G, A), follows(A, G) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.03964339247711274;  // std dev = 0.350, 50.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=12 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.18177154008096608;  // std dev = 1.684, 69.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=66 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( tweets(D, E) )
%   | | then if ( tweets(A, F) )
%   | | | then return -0.05860968500837973;  // std dev = 1.662, 132.000 (wgt'ed) examples reached here.  /* #neg=123 #pos=9 */
%   | | | else return -0.051039282257252606;  // std dev = 0.945, 29.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=2 */
%   | | else if ( follows(D, D), tweets(A, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09311684358381674;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( follows(A, H) )
%   | | then return 0.018940091923451564;  // std dev = 0.322, 62.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=15 */
%   | | else if ( follows(I, A), recursion_accounttype(I, B) )
%   | | | then return 0.14908143210395897;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.08984620915325879;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(D, A) )
%   then if ( follows(C, E), recursion_accounttype(E, B) )
%   | then return 0.21135863039090264;  // std dev = 1.665, 77.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=75 */
%   | else if ( follows(C, A) )
%   | | then return -0.0907263320995442;  // std dev = 0.037, 128.000 (wgt'ed) examples reached here.  /* #neg=128 */
%   | | else return -0.051995265967996196;  // std dev = 0.350, 9.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   else if ( recursion_accounttype(F, B) )
%   | then if ( follows(A, G), follows(F, G) )
%   | | then return 0.5447102281753996;  // std dev = 0.724, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else return 0.1311412952304445;  // std dev = 5.27e-09, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then return -0.08276485343462925;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( follows(J, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1661634988356305;  // std dev = 0.029, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(C, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0.18178999986523453;  // std dev = 1.495, 83.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=82 */
%   | | else if ( follows(A, D) )
%   | | | then return -0.08324471849727424;  // std dev = 0.032, 143.000 (wgt'ed) examples reached here.  /* #neg=143 */
%   | | | else return -0.04783183219040825;  // std dev = 0.370, 18.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | else if ( follows(A, F) )
%   | | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | | then return 0.37972959953522384;  // std dev = 0.505, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.0647250813404625;  // std dev = 1.844, 50.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=8 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.991743
   AUC PR    = 0.345179
   CLL	      = -0.11859
   Precision = 0.340206 at threshold = 0.5
   Recall    = 0.846154
   F1        = 0.485294


Total learning time: 7.75 seconds
Total inference time: 40.693 seconds
AUC ROC: 0.991743


Results scoring model
   AUC ROC   = 0.993139
   AUC PR    = 0.380594
   CLL	      = -0.11753
   Precision = 0.32967 at threshold = 0.5
   Recall    = 0.9
   F1        = 0.482574


Total scoring time: 34.447 seconds
Parameter learned model CLL: -0.11753


Structure after Parameter Learning
[['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(D, A), follows(D, D)', 'false,false': 'follows(A, E), recursion_accounttype(E, B)', 'false,false,true': 'follows(F, A), follows(E, G)', 'false,false,false': 'follows(A, H), tweets(A, I)'}, {'true': [0.0, 0, 69], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.926, 1, 6], 'false,false,true,false': [0.913, 1, 5], 'false,false,false,true': [3.463, 155, 13], 'false,false,false,false': [2.494, 56, 7]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, C)', 'true,false': 'follows(D, A), follows(D, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,false': 'follows(F, A), follows(G, F)', 'false,false,true': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(A, H)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [1.002, 1, 66], 'false,true': [4.21e-08, 0, 14], 'false,false,true,true': [0.005, 0, 8], 'false,false,true,false': [0.023, 153, 0], 'false,false,false,true': [3.047, 41, 12], 'false,false,false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, A)', 'true,true': 'follows(A, D), follows(C, E)', 'true,false': 'follows(F, A), recursion_accounttype(F, B)', 'false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false': 'follows(H, A)'}, {'true,true,true': [4.927, 136, 71], 'true,true,false': [1.28, 11, 5], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.071, 31, 16], 'false,true': [0.0, 0, 8], 'false,false,true': [0.0, 8, 0], 'false,false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D), follows(D, C)', 'true,true': 'recursion_accounttype(D, B)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(F, F)', 'false,false': 'follows(G, A), follows(A, H)', 'false,false,true': 'tweets(A, I), tweets(G, I)', 'false,false,false': 'tweets(A, J)'}, {'true,true,true': [1.398, 2, 60], 'true,true,false': [0.0, 0, 1], 'true,false': [0.025, 0, 5], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.209, 0, 14], 'false,false,true,true': [2.011, 129, 6], 'false,false,true,false': [1.151, 36, 2], 'false,false,false,true': [2.362, 35, 7], 'false,false,false,false': [1.952, 16, 5]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A), tweets(D, E)', 'false,true': 'follows(A, F), follows(D, F)', 'false,true,true': 'follows(G, D), recursion_accounttype(G, B)', 'false,true,false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(H, B)', 'false,false,false': 'tweets(A, I), follows(A, J)'}, {'true': [0.96, 1, 66], 'false,true,true,true': [0.493, 0, 10], 'false,true,true,false': [0.039, 147, 0], 'false,true,false,true': [0.0, 0, 8], 'false,true,false,false': [1.463, 30, 4], 'false,false,true': [0.02, 0, 12], 'false,false,false,true': [0.0, 22, 0], 'false,false,false,false': [7.45e-09, 11, 0]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(D, D)', 'false,true,false': 'tweets(D, E)', 'false,false': 'follows(F, A)', 'false,false,false': 'follows(G, A), follows(G, G)'}, {'true': [1.399, 2, 69], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [2.317, 140, 14], 'false,true,false,false': [0.0, 1, 0], 'false,false,true': [0.139, 26, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.663, 40, 16]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(D, F), follows(D, D)', 'false,false': 'follows(G, A), follows(A, G)'}, {'true': [0.976, 1, 66], 'false,true,true': [1.192, 1, 22], 'false,true,false,true': [0.0, 0, 0], 'false,true,false,false': [0.062, 174, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.35, 38, 12]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'tweets(D, E)', 'false,true,true': 'tweets(A, F)', 'false,true,false': 'follows(D, D), tweets(A, G)', 'false,false': 'follows(A, H)', 'false,false,false': 'follows(I, A), recursion_accounttype(I, B)'}, {'true': [1.684, 3, 66], 'false,true,true,true': [1.662, 123, 9], 'false,true,true,false': [0.945, 27, 2], 'false,true,false,true': [0.0, 0, 0], 'false,true,false,false': [0.0, 1, 0], 'false,false,true': [0.322, 47, 15], 'false,false,false,true': [0.0, 0, 8], 'false,false,false,false': [0.0, 17, 0]}], ['accounttype(A, B)', {'': 'follows(A, C), follows(D, A)', 'true': 'follows(C, E), recursion_accounttype(E, B)', 'true,false': 'follows(C, A)', 'false': 'recursion_accounttype(F, B)', 'false,true': 'follows(A, G), follows(F, G)', 'false,false': 'follows(H, A), follows(I, H)', 'false,false,false': 'follows(J, A)'}, {'true,true': [1.665, 2, 75], 'true,false,true': [0.037, 128, 0], 'true,false,false': [0.35, 8, 1], 'false,true,true': [0.724, 0, 16], 'false,true,false': [5.27e-09, 0, 8], 'false,false,true': [0.0, 9, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.029, 38, 0]}], ['accounttype(A, B)', {'': 'follows(A, C), follows(C, C)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'follows(A, D)', 'false,false': 'follows(A, F)', 'false,false,true': 'follows(F, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true,true': [1.495, 1, 82], 'false,true,false,true': [0.032, 143, 0], 'false,true,false,false': [0.37, 16, 2], 'false,false,true,true': [0.505, 0, 8], 'false,false,true,false': [1.844, 42, 8], 'false,false,false': [0.0, 0, 0]}]]
[{'': [-1.1327492888929132e-15, 0.11090768610588497], 'false': [nan, 0.11090768610588497], 'false,false': [0.13017751479289916, 0.0790839751878718], 'false,false,true': [0.12244897959183662, 0.13888888888888876], 'false,false,false': [0.0713931405895686, 0.09876543209876562]}, {'': [0.014973182776324692, 0.11293842885677728], 'false': [1.2688263138573217e-16, 0.08471702145331539], 'false,false': [0.04725013186893785, 0.17511834378127442], 'false,false,false': [0.17511834378127442, nan], 'false,false,true': [2.951110308679894e-06, 3.426342149327299e-06], 'true': [nan, 0.014973182776324692], 'true,false': [nan, 0.014973182776324692]}, {'': [0.131486171237853, 0.1149768667861232], 'true': [0.11624027566162551, 0.20071315662581504], 'true,false': [nan, 0.20071315662581504], 'true,true': [0.11727633314062721, 0.10232618622780774], 'false': [0.0, -1.734723475976807e-18], 'false,false': [-1.734723475976807e-18, nan]}, {'': [0.029021844617944242, 0.07694055867780283], 'false': [0.003119886391573155, 0.06587779589662081], 'false,false': [0.03103940558650293, 0.1494692598121318], 'false,false,false': [0.13279278867239802, 0.18140589569160986], 'false,false,true': [0.02995922330858137, 0.03486855689444126], 'true': [0.031106957138780287, 0.0001273686758834547], 'true,true': [0.031543137461698637, 0.0], 'false,true': [nan, 0.003119886391573155]}, {'': [0.013767130656665332, 0.07221126783399205], 'false': [0.040464544098037944, 0.19520862587878776], 'false,false': [3.264111792455893e-05, 2.984330781666519e-05], 'false,true': [0.030153634907714288, 0.06851754350942744], 'false,true,false': [-1.3877787807814457e-17, 0.0629286408803111], 'false,true,true': [0.02429782471501949, 1.008526438451636e-05], 'false,false,false': [-2.5232341468753557e-17, 5.046468293750712e-18]}, {'': [0.027583659172305985, 0.05717435789075979], 'false': [0.03465228496758259, 0.09760585958784726], 'false,false': [0.01921797274294745, 0.12667008917072622], 'false,false,false': [nan, 0.12667008917072622], 'false,true': [nan, 0.03465228496758259], 'false,true,false': [0.03486022705082258, 0.0]}, {'': [0.014208854569075415, 0.04920757844076263], 'false': [0.02893682263832677, 0.12249213516877878], 'false,false': [nan, 0.12249213516877878], 'false,true': [0.0617260188227328, 2.1827290736793323e-05], 'false,true,false': [nan, 2.1827290736799703e-05]}, {'': [0.04107690569236914, 0.0427788981375502], 'false': [0.022583117798755277, 0.07745402569644218], 'false,false': [0.10337627186483185, 0.012422004503866133], 'false,true': [0.02271544294297529, 0.0], 'false,true,true': [0.020930048930428685, 0.030795076066771673], 'false,false,false': [0.0, -9.79608551139844e-18], 'false,true,false': [nan, 0.0]}, {'': [0.03426441185540656, 0.09039660033476923], 'false': [0.05986823825378581, 0.0010947763170073915], 'false,true': [0.032789269948269084, 3.469446951953614e-18], 'true': [0.03601610837784625, 0.0009958101065737353], 'false,false': [0.0, 2.2192966155880272e-05], 'true,false': [1.0564166579601908e-05, 0.013606647743662402], 'false,false,false': [nan, 2.2192966155880272e-05]}, {'': [nan, 0.036921176215186015], 'false': [0.025104905753346236, 0.08649563556366886], 'false,false': [0.08649563556366886, nan], 'false,false,true': [0.03194052177683232, 0.06797756227269268], 'false,true': [0.02692054501975139, 0.0009831750167474482], 'false,true,false': [7.1536764432780724e-06, 0.007623256680011172]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
1;false;follows(E, A), recursion_accounttype(E, B).;true;true
1;false,false;follows(F, A), follows(G, F).;true;true
1;false,false,true;recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
3;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
3;true;follows(C, D), follows(D, C).;true;true
3;true,true;recursion_accounttype(D, B).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(D, A), tweets(D, E).;true;true
4;false,true;follows(A, F), follows(D, F).;true;true
4;false,true,true;follows(G, D), recursion_accounttype(G, B).;true;true
4;false,true,false;recursion_accounttype(D, B).;true;true
4;false,false;recursion_accounttype(H, B).;true;true
4;false,false,false;tweets(A, I), follows(A, J).;true;true
5;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
5;false;follows(A, D), follows(D, A).;true;true
5;false,true;tweets(D, E).;true;true
6;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
6;false;follows(D, A).;true;true
6;false,true;follows(E, D), recursion_accounttype(E, B).;true;true
7;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
7;false;follows(A, D), follows(D, A).;true;true
7;false,true;tweets(D, E).;true;true
7;false,false;follows(A, H).;true;true
7;false,false,false;follows(I, A), recursion_accounttype(I, B).;true;true
8;;accounttype(A, B) :- follows(A, C), follows(D, A).;true;true
8;true;follows(C, E), recursion_accounttype(E, B).;true;true
8;true,false;follows(C, A).;true;true
8;false;recursion_accounttype(F, B).;true;true
8;false,true;follows(A, G), follows(F, G).;true;true
8;false,false;follows(H, A), follows(I, H).;true;true
9;;accounttype(A, B) :- follows(D, A).;true;true
9;true;follows(E, D), recursion_accounttype(E, B).;true;true
9;true,false;follows(A, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( recursion_accounttype(D, B), tweets(A, E) )
%   | | then return 0.8364098046647294;  // std dev = 0.146, 46.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=45 */
%   | | else return 0.8581489350995122;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else return 0.6581489350995123;  // std dev = 0.400, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(F, H), follows(H, A) )
%   | | | then return 0.19148226843284552;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.7914822684328456;  // std dev = 0.966, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | else return -0.1418510649004883;  // std dev = 0.000, 182.000 (wgt'ed) examples reached here.  /* #neg=182 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.05814893509951233;  // std dev = 2.000, 25.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=5 */
%   | | | else return 0.13814893509951237;  // std dev = 2.245, 25.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=7 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(E, F) )
%   | | | then return 0.7238400459245512;  // std dev = 0.000, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | | | else return 0.5238400459245516;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.7283111152333736;  // std dev = 0.019, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.6435700702520027;  // std dev = 0.267, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.7414996535886116;  // std dev = 0.071, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.7452894073054538;  // std dev = 0.094, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.12544463852839147;  // std dev = 0.000, 170.000 (wgt'ed) examples reached here.  /* #neg=170 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.17991444211332844;  // std dev = 2.155, 21.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=7 */
%   | | | else return 0.1376733013458884;  // std dev = 1.882, 17.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=5 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A) )
%   | | then if ( recursion_accounttype(E, B), follows(E, D) )
%   | | | then return 0.5377152748846216;  // std dev = 0.991, 41.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=40 */
%   | | | else return 0.5745409166806376;  // std dev = 0.082, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else return 0.35735088624720995;  // std dev = 0.899, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( follows(A, F), follows(F, A) )
%   | | then if ( follows(F, G), follows(G, A) )
%   | | | then return -0.08896335200418809;  // std dev = 1.384, 120.000 (wgt'ed) examples reached here.  /* #neg=116 #pos=4 */
%   | | | else return 0.006289188843642631;  // std dev = 1.629, 40.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=7 */
%   | | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0.5499209759119214;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.054922757493351154;  // std dev = 3.019, 54.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=12 */
%   else if ( follows(I, A), recursion_accounttype(I, B) )
%   | then return 0.5987720875274971;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return -0.1123163781936063;  // std dev = 7.45e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, C) )
%   | then return 0.3984083605054561;  // std dev = 0.176, 63.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=61 */
%   | else return 0.45566462044515255;  // std dev = 0.051, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(A, E), follows(F, A) )
%   | then if ( follows(F, E) )
%   | | then return -0.06216575193193335;  // std dev = 0.167, 157.000 (wgt'ed) examples reached here.  /* #neg=146 #pos=11 */
%   | | else if ( follows(E, G), recursion_accounttype(G, B) )
%   | | | then return 0.5638837151869045;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.11294494970613463;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.8141701469893102;  // std dev = 0.023, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.18557886685160882;  // std dev = 0.036, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | | else if ( follows(J, A), recursion_accounttype(J, B) )
%   | | | then return 0.45055694218508396;  // std dev = 2.98e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.10159632948783626;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( follows(A, E) )
%   | | then if ( tweets(E, D), recursion_accounttype(E, B) )
%   | | | then return 0.25266578693835756;  // std dev = 1.668, 37.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=34 */
%   | | | else return 0.3356731794878164;  // std dev = 0.054, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return -0.00729636920727635;  // std dev = 0.809, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.3481826828550968;  // std dev = 0.040, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( follows(F, A), tweets(F, G) )
%   | then if ( follows(A, H), follows(F, H) )
%   | | then return -0.057121341345305006;  // std dev = 0.169, 148.000 (wgt'ed) examples reached here.  /* #neg=138 #pos=10 */
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0.34321996565270796;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.017445777885920277;  // std dev = 0.963, 26.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=4 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then return 0.660038417911509;  // std dev = 0.034, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return -0.15587609183889056;  // std dev = 0.010, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.25869260273944067;  // std dev = 0.133, 56.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=55 */
%   | else if ( follows(A, E) )
%   | | then return 0.5200900092024674;  // std dev = 0.198, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.2704782322426633;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(A, F), follows(F, A) )
%   | then if ( tweets(F, G) )
%   | | then if ( follows(A, H), recursion_accounttype(H, B) )
%   | | | then return 0.13773963083505789;  // std dev = 0.817, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return -0.054021871749212705;  // std dev = 1.792, 125.000 (wgt'ed) examples reached here.  /* #neg=117 #pos=8 */
%   | | else return -0.09287309566504455;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( follows(I, A) )
%   | | then return -0.08160641386699242;  // std dev = 0.095, 21.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=1 */
%   | | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return -0.04429562898143622;  // std dev = 1.146, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.02846147355169288;  // std dev = 1.917, 45.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=12 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.21766117424445885;  // std dev = 0.135, 55.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=54 */
%   | else if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return 0.07895061831245342;  // std dev = 0.931, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.22045170942482817;  // std dev = 0.006, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.045106719640120106;  // std dev = 0.781, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(G, A) )
%   | then return -0.03516832777480503;  // std dev = 0.164, 192.000 (wgt'ed) examples reached here.  /* #neg=170 #pos=22 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.5053092274720201;  // std dev = 0.012, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.13839303185111096;  // std dev = 0.010, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.10285078879372982;  // std dev = 0.977, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.17381065306601473;  // std dev = 0.779, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), tweets(A, E) )
%   | | then if ( follows(A, F), follows(F, D) )
%   | | | then return 0.13490766943437324;  // std dev = 1.386, 34.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=32 */
%   | | | else return 0.2099260610178532;  // std dev = 0.027, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.1917965075606131;  // std dev = 0.063, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return 0.2381804244577415;  // std dev = 0.135, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( follows(A, G), follows(G, A) )
%   | then if ( tweets(G, H) )
%   | | then return -0.045670688308813955;  // std dev = 0.160, 165.000 (wgt'ed) examples reached here.  /* #neg=154 #pos=11 */
%   | | else return -0.08913478162544247;  // std dev = 0.007, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( follows(A, I) )
%   | | then if ( tweets(A, J) )
%   | | | then return -0.006781129718280391;  // std dev = 1.414, 38.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=9 */
%   | | | else return 0.12458315329120247;  // std dev = 0.989, 12.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=6 */
%   | | else return 0.05516148465942305;  // std dev = 0.153, 18.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(D, A) )
%   then if ( follows(C, E), recursion_accounttype(E, B) )
%   | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then if ( follows(F, A), tweets(A, G) )
%   | | | then return 0.1478475878247338;  // std dev = 0.993, 45.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=44 */
%   | | | else return 0.17678666155506095;  // std dev = 0.099, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0.42170838332070415;  // std dev = 0.194, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.491533175033106;  // std dev = 0.820, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else return -0.08246409907793395;  // std dev = 0.034, 142.000 (wgt'ed) examples reached here.  /* #neg=141 #pos=1 */
%   else if ( recursion_accounttype(I, B) )
%   | then if ( follows(A, J), follows(I, J) )
%   | | then if ( follows(A, K), follows(K, L) )
%   | | | then return 0.206061550729722;  // std dev = 0.906, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.418593108061874;  // std dev = 0.170, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.21709624779323983;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return -0.12581160226457738;  // std dev = 0.037, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.14951857580154732;  // std dev = 0.075, 60.000 (wgt'ed) examples reached here.  /* #pos=60 */
%   | | else if ( follows(A, F), follows(F, A) )
%   | | | then return 0.444452319263217;  // std dev = 0.325, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.20581934176837155;  // std dev = 0.155, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return -0.07555240051859688;  // std dev = 0.029, 175.000 (wgt'ed) examples reached here.  /* #neg=173 #pos=2 */
%   else if ( follows(A, G), follows(G, H) )
%   | then if ( recursion_accounttype(H, B) )
%   | | then return 0.2683625256244785;  // std dev = 0.072, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.11156910583220728;  // std dev = 0.014, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else if ( tweets(A, I) )
%   | | then if ( tweets(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.35656167793830085;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.14557350949254208;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.015544522799962674;  // std dev = 0.226, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */


Results
   AUC ROC   = 0.994399
   AUC PR    = 0.391277
   CLL	      = -0.110417
   Precision = 0.361538 at threshold = 0.5
   Recall    = 0.903846
   F1        = 0.516484


Total learning time: 13.611 seconds
Total inference time: 56.355 seconds
AUC ROC: 0.994399


Results scoring model
   AUC ROC   = 0.992737
   AUC PR    = 0.359004
   CLL	      = -0.111644
   Precision = 0.354839 at threshold = 0.5
   Recall    = 0.99
   F1        = 0.522427


Total scoring time: 40.798 seconds
Refined model CLL: -0.111644


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.994399
   AUC PR    = 0.391277
   CLL	      = -0.110417
   Precision = 0.361538 at threshold = 0.5
   Recall    = 0.903846
   F1        = 0.516484


Total learning time: 96.60600000000001 seconds
Total inference time: 56.355 seconds
AUC ROC: 0.994399
Total revision time: 96.60600000000001
Best scored revision CLL: -0.111644


Dataset: 7_yeast_twitter, Fold: 2, Type: Transfer (trRDN-B), Time: 01:05:18
{'AUC ROC': 0.994399, 'AUC PR': 0.391277, 'CLL': -0.110417, 'Precision': [0.361538, 0.5], 'Recall': 0.903846, 'F1': 0.516484, 'Learning time': 96.60600000000001, 'Inference time': 56.355, 'parameter_0.8': {'AUC ROC': 0.991743, 'AUC PR': 0.345179, 'CLL': -0.11859, 'Precision': [0.340206, 0.5], 'Recall': 0.846154, 'F1': 0.485294, 'Learning time': 7.75, 'Inference time': 40.693}}


Amount of data: 1.0
******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;false;true
0;false;interaction(A, D), interaction(D, D).;true;true
0;false,true;interaction(E, A), interaction(D, E).;true;true
0;false,true,true;interaction(A, A).;false;false
0;false,true,false;enzyme(D, F), phenotype(A, G).;false;false
0;false,false;interaction(H, A), recursion_proteinclass(H, B).;true;true
0;false,false,true;interaction(A, I), interaction(J, H).;false;false
0;false,false,false;interaction(K, A), complex(A, L).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
1;true;interaction(C, C).;false;true
1;true,false;interaction(A, D), interaction(D, D).;true;false
1;true,false,true;complex(C, E).;false;false
1;false;interaction(A, F), recursion_proteinclass(F, B).;false;true
1;false,false;interaction(A, G), interaction(G, H).;true;true
1;false,false,true;recursion_proteinclass(H, B).;false;false
1;false,false,false;interaction(I, A), location(I, J).;false;false
2;;proteinclass(A, B) :- interaction(C, A), enzyme(C, D).;true;true
2;true;location(A, E), location(C, E).;false;true
2;true,false;interaction(A, F), phenotype(A, G).;true;true
2;true,false,true;interaction(F, A), interaction(H, C).;false;false
2;true,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;false;interaction(A, J), recursion_proteinclass(J, B).;false;true
2;false,false;interaction(A, K), enzyme(K, L).;false;true
2;false,false,false;interaction(M, A), interaction(A, M).;false;false
3;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
3;true;interaction(D, C), interaction(C, D).;true;false
3;true,true;recursion_proteinclass(D, B).;false;false
3;false;interaction(A, E), recursion_proteinclass(E, B).;true;true
3;false,true;interaction(E, F), interaction(F, F).;false;false
3;false,false;interaction(A, G), interaction(H, A).;true;true
3;false,false,true;complex(A, I), complex(G, I).;false;false
3;false,false,false;enzyme(A, J), complex(A, K).;false;false
4;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
4;false;interaction(A, D), complex(D, E).;true;true
4;false,true;interaction(F, A), interaction(F, D).;true;true
4;false,true,true;interaction(D, G), recursion_proteinclass(G, B).;false;false
4;false,true,false;recursion_proteinclass(D, B).;false;false
4;false,false;enzyme(A, H), location(A, I).;true;true
4;false,false,true;enzyme(J, H), recursion_proteinclass(J, B).;false;false
4;false,false,false;complex(A, K), interaction(L, A).;false;false
5;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;false;true
5;false;interaction(D, A), interaction(A, D).;true;true
5;false,true;interaction(D, D).;true;true
5;false,true,true;interaction(A, A).;false;false
5;false,true,false;phenotype(D, E), complex(D, F).;false;false
5;false,false;enzyme(A, G), interaction(A, H).;true;true
5;false,false,true;enzyme(H, I).;false;false
5;false,false,false;interaction(A, J), interaction(J, J).;false;false
6;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
6;false;interaction(A, D), phenotype(A, E).;true;true
6;false,true;location(D, F), location(A, F).;true;true
6;false,true,true;interaction(D, G), recursion_proteinclass(G, B).;false;false
6;false,true,false;complex(D, H), interaction(D, D).;false;false
6;false,false;interaction(A, I), interaction(I, A).;true;true
6;false,false,true;interaction(I, I).;false;false
6;false,false,false;location(A, J).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
7;false;interaction(D, A), interaction(A, D).;true;true
7;false,true;complex(D, E).;true;true
7;false,true,true;complex(A, F), enzyme(D, G).;false;false
7;false,true,false;interaction(D, D), complex(A, H).;false;false
7;false,false;enzyme(A, I), interaction(J, A).;true;true
7;false,false,true;enzyme(J, K), phenotype(J, L).;false;false
7;false,false,false;interaction(A, M), recursion_proteinclass(M, B).;false;false
8;;proteinclass(A, B) :- interaction(C, A), interaction(A, D).;true;true
8;true;interaction(E, C), recursion_proteinclass(E, B).;false;true
8;true,false;interaction(A, C).;false;false
8;false;location(A, F).;true;true
8;false,true;location(G, F), recursion_proteinclass(G, B).;true;false
8;false,true,true;interaction(H, A), interaction(H, G).;false;false
8;false,false;interaction(A, I), interaction(I, J).;false;true
8;false,false,false;interaction(A, K).;false;false
9;;proteinclass(A, B) :- interaction(C, A), interaction(C, C).;true;true
9;true;recursion_proteinclass(C, B), interaction(A, C).;false;false
9;false;enzyme(A, D), interaction(A, E).;true;true
9;false,true;interaction(E, F), recursion_proteinclass(F, B).;false;true
9;false,true,false;interaction(E, A).;false;false
9;false,false;interaction(G, A), phenotype(A, H).;true;true
9;false,false,true;interaction(I, G), recursion_proteinclass(I, B).;false;false
9;false,false,false;interaction(A, J), enzyme(J, K).;false;false


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.8228548174524533;  // std dev = 1.701, 85.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=82 */
%   else if ( follows(D, A), follows(D, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), follows(E, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, H), tweets(A, I) )
%   | | | then return -0.02185106490048781;  // std dev = 4.299, 175.000 (wgt'ed) examples reached here.  /* #neg=154 #pos=21 */
%   | | | else return -0.01685106490048768;  // std dev = 3.102, 88.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=11 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(D, A), follows(D, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.6878044947450237;  // std dev = 1.706, 80.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=77 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then return 0.7265413910401293;  // std dev = 7.30e-08, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(F, A), follows(G, F) )
%   | | then if ( recursion_accounttype(G, B) )
%   | | | then return 0.8606680436715876;  // std dev = 0.000930, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.1393688942553471;  // std dev = 0.004, 195.000 (wgt'ed) examples reached here.  /* #neg=195 */
%   | | else if ( follows(A, H) )
%   | | | then return 0.11811829624560297;  // std dev = 3.552, 66.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=17 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, A) )
%   | then if ( follows(A, D), follows(C, E) )
%   | | then return 0.10940482075521145;  // std dev = 5.666, 281.000 (wgt'ed) examples reached here.  /* #neg=190 #pos=91 */
%   | | else return 0.13245187667492256;  // std dev = 1.338, 16.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=6 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.20181778763355063;  // std dev = 3.488, 55.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=21 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.45121399786002353;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( follows(H, A) )
%   | | then return -0.12387671728173688;  // std dev = 7.45e-09, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, C) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then return 0.5156751525040758;  // std dev = 1.422, 73.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=71 */
%   | | else return 0.036097525546742615;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | else return 0.3545760645583746;  // std dev = 0.922, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(F, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.49378473430632;  // std dev = 0.170, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(G, A), follows(A, H) )
%   | | then if ( tweets(A, I), tweets(G, I) )
%   | | | then return -0.07853679477972503;  // std dev = 2.680, 159.000 (wgt'ed) examples reached here.  /* #neg=148 #pos=11 */
%   | | | else return -0.08037956105907045;  // std dev = 1.616, 60.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=4 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.024747641486909135;  // std dev = 2.643, 49.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=9 */
%   | | | else return 0.06711390569204469;  // std dev = 2.449, 32.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=8 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.3837197167831454;  // std dev = 1.575, 80.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=77 */
%   else if ( follows(D, A), tweets(D, E) )
%   | then if ( follows(A, F), follows(D, F) )
%   | | then if ( follows(G, D), recursion_accounttype(G, B) )
%   | | | then return 0.5907675148358464;  // std dev = 0.622, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.12405244430626619;  // std dev = 0.541, 169.000 (wgt'ed) examples reached here.  /* #neg=168 #pos=1 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0.33305611099846644;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.011459573051047662;  // std dev = 1.820, 42.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=6 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then return 0.8107212728128652;  // std dev = 0.015, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( tweets(A, I), follows(A, J) )
%   | | | then return -0.18327531817392473;  // std dev = 0.058, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | | else return -0.19312968089318577;  // std dev = 1.83e-08, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.29666912027147263;  // std dev = 1.385, 84.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=82 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(D, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(D, E) )
%   | | | then return -0.04829273909285224;  // std dev = 3.039, 207.000 (wgt'ed) examples reached here.  /* #neg=185 #pos=22 */
%   | | | else return -0.11013194104289777;  // std dev = 0.007, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( follows(F, A) )
%   | | then return -0.1197378384796627;  // std dev = 0.121, 32.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=1 */
%   | | else if ( follows(G, A), follows(G, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.0812180442643165;  // std dev = 2.981, 63.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=21 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.22801689528834654;  // std dev = 1.959, 81.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=77 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0.40251074578669543;  // std dev = 1.374, 33.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   | | else if ( tweets(D, F), follows(D, D) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10882526209822696;  // std dev = 0.067, 232.000 (wgt'ed) examples reached here.  /* #neg=232 */
%   | else if ( follows(G, A), follows(A, G) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.09190968339237197;  // std dev = 0.380, 52.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=17 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.2340422226793637;  // std dev = 0.237, 77.000 (wgt'ed) examples reached here.  /* #pos=77 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( tweets(D, E) )
%   | | then if ( tweets(A, F) )
%   | | | then return -0.04728605995750472;  // std dev = 2.193, 162.000 (wgt'ed) examples reached here.  /* #neg=147 #pos=15 */
%   | | | else return -0.05601646949567513;  // std dev = 1.110, 50.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=4 */
%   | | else if ( follows(D, D), tweets(A, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.0032862218899947365;  // std dev = 0.323, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( follows(A, H) )
%   | | then return 0.031337212837124054;  // std dev = 0.333, 73.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=21 */
%   | | else if ( follows(I, A), recursion_accounttype(I, B) )
%   | | | then return 0.15101902979163428;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.09150700017717038;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(D, A) )
%   then if ( follows(C, E), recursion_accounttype(E, B) )
%   | then return 0.23802626583514275;  // std dev = 1.712, 97.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=96 */
%   | else if ( follows(C, A) )
%   | | then return -0.0958329242165701;  // std dev = 0.047, 185.000 (wgt'ed) examples reached here.  /* #neg=185 */
%   | | else return -0.07482520983113967;  // std dev = 0.340, 13.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=1 */
%   else if ( recursion_accounttype(F, B) )
%   | then if ( follows(A, G), follows(F, G) )
%   | | then return 0.491787609536097;  // std dev = 1.149, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | else return 0.13265903868460194;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then return -0.0841787485239785;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( follows(J, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.19132133776832572;  // std dev = 0.018, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(C, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0.1662112785854756;  // std dev = 2.404, 107.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=103 */
%   | | else if ( follows(A, D) )
%   | | | then return -0.08745580965169215;  // std dev = 0.037, 176.000 (wgt'ed) examples reached here.  /* #neg=176 */
%   | | | else return -0.0892076309098287;  // std dev = 0.809, 30.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=2 */
%   | else if ( follows(A, F) )
%   | | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | | then return 0.3945888662259524;  // std dev = 0.507, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.04248937270686394;  // std dev = 1.775, 51.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=10 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.992615
   AUC PR    = 0.403062
   CLL	      = -0.125865
   Precision = 0.341837 at threshold = 0.5
   Recall    = 0.858974
   F1        = 0.489051


Total learning time: 9.03 seconds
Total inference time: 40.691 seconds
AUC ROC: 0.992615


Results scoring model
   AUC ROC   = 0.993063
   AUC PR    = 0.358736
   CLL	      = -0.124278
   Precision = 0.33913 at threshold = 0.5
   Recall    = 0.928571
   F1        = 0.496815


Total scoring time: 41.94 seconds
Parameter learned model CLL: -0.124278


Structure after Parameter Learning
[['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(D, A), follows(D, D)', 'false,false': 'follows(A, E), recursion_accounttype(E, B)', 'false,false,true': 'follows(F, A), follows(E, G)', 'false,false,false': 'follows(A, H), tweets(A, I)'}, {'true': [1.701, 3, 82], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 7], 'false,false,true,false': [0.0, 0, 5], 'false,false,false,true': [4.299, 154, 21], 'false,false,false,false': [3.102, 77, 11]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, C)', 'true,false': 'follows(D, A), follows(D, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,false': 'follows(F, A), follows(G, F)', 'false,false,true': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(A, H)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [1.706, 3, 77], 'false,true': [7.3e-08, 0, 17], 'false,false,true,true': [0.00093, 0, 15], 'false,false,true,false': [0.004, 195, 0], 'false,false,false,true': [3.552, 49, 17], 'false,false,false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, A)', 'true,true': 'follows(A, D), follows(C, E)', 'true,false': 'follows(F, A), recursion_accounttype(F, B)', 'false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false': 'follows(H, A)'}, {'true,true,true': [5.666, 190, 91], 'true,true,false': [1.338, 10, 6], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.488, 34, 21], 'false,true': [0.943, 1, 8], 'false,false,true': [7.45e-09, 25, 0], 'false,false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D), follows(D, C)', 'true,true': 'recursion_accounttype(D, B)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(F, F)', 'false,false': 'follows(G, A), follows(A, H)', 'false,false,true': 'tweets(A, I), tweets(G, I)', 'false,false,false': 'tweets(A, J)'}, {'true,true,true': [1.422, 2, 71], 'true,true,false': [0.707, 1, 1], 'true,false': [0.922, 1, 5], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.17, 0, 17], 'false,false,true,true': [2.68, 148, 11], 'false,false,true,false': [1.616, 56, 4], 'false,false,false,true': [2.643, 40, 9], 'false,false,false,false': [2.449, 24, 8]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A), tweets(D, E)', 'false,true': 'follows(A, F), follows(D, F)', 'false,true,true': 'follows(G, D), recursion_accounttype(G, B)', 'false,true,false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(H, B)', 'false,false,false': 'tweets(A, I), follows(A, J)'}, {'true': [1.575, 3, 77], 'false,true,true,true': [0.622, 0, 17], 'false,true,true,false': [0.541, 168, 1], 'false,true,false,true': [0.0, 0, 8], 'false,true,false,false': [1.82, 36, 6], 'false,false,true': [0.015, 0, 17], 'false,false,false,true': [0.058, 23, 0], 'false,false,false,false': [1.83e-08, 18, 0]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(D, D)', 'false,true,false': 'tweets(D, E)', 'false,false': 'follows(F, A)', 'false,false,false': 'follows(G, A), follows(G, G)'}, {'true': [1.385, 2, 82], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [3.039, 185, 22], 'false,true,false,false': [0.007, 5, 0], 'false,false,true': [0.121, 31, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.981, 42, 21]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(D, F), follows(D, D)', 'false,false': 'follows(G, A), follows(A, G)'}, {'true': [1.959, 4, 77], 'false,true,true': [1.374, 1, 32], 'false,true,false,true': [0.0, 0, 0], 'false,true,false,false': [0.067, 232, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.38, 35, 17]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'tweets(D, E)', 'false,true,true': 'tweets(A, F)', 'false,true,false': 'follows(D, D), tweets(A, G)', 'false,false': 'follows(A, H)', 'false,false,false': 'follows(I, A), recursion_accounttype(I, B)'}, {'true': [0.237, 0, 77], 'false,true,true,true': [2.193, 147, 15], 'false,true,true,false': [1.11, 46, 4], 'false,true,false,true': [0.0, 0, 0], 'false,true,false,false': [0.323, 3, 1], 'false,false,true': [0.333, 52, 21], 'false,false,false,true': [0.0, 0, 8], 'false,false,false,false': [0.0, 10, 0]}], ['accounttype(A, B)', {'': 'follows(A, C), follows(D, A)', 'true': 'follows(C, E), recursion_accounttype(E, B)', 'true,false': 'follows(C, A)', 'false': 'recursion_accounttype(F, B)', 'false,true': 'follows(A, G), follows(F, G)', 'false,false': 'follows(H, A), follows(I, H)', 'false,false,false': 'follows(J, A)'}, {'true,true': [1.712, 1, 96], 'true,false,true': [0.047, 185, 0], 'true,false,false': [0.34, 12, 1], 'false,true,true': [1.149, 1, 21], 'false,true,false': [0.0, 0, 8], 'false,false,true': [0.0, 8, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.018, 39, 0]}], ['accounttype(A, B)', {'': 'follows(A, C), follows(C, C)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'follows(A, D)', 'false,false': 'follows(A, F)', 'false,false,true': 'follows(F, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true,true': [2.404, 4, 103], 'false,true,false,true': [0.037, 176, 0], 'false,true,false,false': [0.809, 28, 2], 'false,false,true,true': [0.507, 0, 11], 'false,false,true,false': [1.775, 41, 10], 'false,false,false': [0.0, 0, 0]}]]
[{'': [0.03404844290657402, 0.1344000000000008], 'false': [nan, 0.1344000000000008], 'false,false': [-1.4802973661668753e-16, 0.10686868394801238], 'false,false,false': [0.10560000000000073, 0.10937499999999954], 'false,false,true': [-2.5376526277146434e-16, 0.0]}, {'': [0.03636159416370903, 0.1272877872885028], 'false': [3.134747363647501e-16, 0.10249255246388728], 'false,false': [0.06633149936400051, 0.1912115578704851], 'false,false,false': [0.1912115578704851, nan], 'false,false,true': [5.7646341152424914e-08, 6.958493264218573e-08], 'true': [nan, 0.03636159416370903], 'true,false': [nan, 0.03636159416370903]}, {'': [0.13196809345000685, 0.09051584914942144], 'true': [0.11415062137590112, 0.22116900740166773], 'true,false': [nan, 0.22116900740166773], 'true,true': [0.11425449346731056, 0.11182381602969796], 'false': [0.09876543209876543, 2.220446049250313e-18], 'false,false': [2.220446049250313e-18, nan]}, {'': [0.04866783772470485, 0.08958290892514012], 'false': [0.0017072295697898915, 0.0789082102954682], 'false,false': [0.04472699118654936, 0.16071963742131304], 'false,false,false': [0.1425213246117114, 0.1875], 'true': [0.039591673118654094, 0.14175326541050073], 'false,false,true': [0.04518281707100091, 0.043516587157946804], 'true,true': [0.02769386941586081, 0.25], 'false,true': [nan, 0.0017072295697898915]}, {'': [0.031003975863397183, 0.088495931948391], 'false': [0.05549560236127399, 0.20657828524557562], 'false,false': [1.318208395250555e-05, 0.00010608737445540432], 'false,true': [0.04608651126901059, 0.08223606536819224], 'false,true,false': [0.0, 0.07890950877029973], 'false,true,true': [0.022784408220599135, 0.001729172393008494], 'false,false,false': [0.00014647929174332644, 1.850371707708594e-17]}, {'': [0.022850529437633698, 0.0642556969771483], 'false': [0.0436380795796588, 0.10750041350030831], 'false,false': [0.014748115214195308, 0.1410099073853557], 'false,false,false': [nan, 0.1410099073853557], 'false,true': [nan, 0.0436380795796588], 'false,true,false': [0.04460171689056793, 9.598738924500305e-06]}, {'': [0.047367805291007294, 0.056056464369209164], 'false': [0.03564121405362273, 0.14439199795978871], 'false,false': [nan, 0.14439199795978871], 'false,true': [0.057169169093811166, 1.9316232447973768e-05], 'false,true,false': [nan, 1.9316232447975682e-05]}, {'': [0.0007300318069994482, 0.048533109317032364], 'false': [0.02852272226465779, 0.09188797399773406], 'false,false': [0.11091939313255608, 0.014523179064797415], 'false,true': [0.02851605739595482, 0.026157199652761202], 'false,true,true': [0.029691877232096146, 0.02464815750320548], 'false,true,false': [nan, 0.026157199652761202], 'false,false,false': [-3.469446951953614e-18, 0.0]}, {'': [0.03475077560290201, 0.1049754886383668], 'false': [0.06919371590736954, 0.001628023842979067], 'false,true': [0.05996217903925638, 0.0], 'true': [0.030221824482191028, 0.0006215060141569434], 'false,false': [-8.673617379884035e-19, 8.01414456414334e-06], 'true,false': [1.1870356691012774e-05, 0.008884742129067166], 'false,false,false': [nan, 8.01414456414334e-06]}, {'': [nan, 0.04313984384972711], 'false': [0.03506511194666206, 0.08282467349065284], 'false,false': [0.08282467349065284, nan], 'false,false,true': [0.023371197148322323, 0.061754242367090886], 'false,true': [0.054003138666665736, 0.0031868869196467657], 'false,true,false': [7.976890822242177e-06, 0.021833870468303547]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
0;false;follows(A, E), recursion_accounttype(E, B).;true;true
0;false,true;follows(F, A), follows(E, G).;true;true
1;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
1;false;follows(E, A), recursion_accounttype(E, B).;true;true
1;false,false;follows(F, A), follows(G, F).;true;true
1;false,false,true;recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
3;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
3;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(D, A), tweets(D, E).;true;true
4;false,true;follows(A, F), follows(D, F).;true;true
4;false,true,true;follows(G, D), recursion_accounttype(G, B).;true;true
4;false,true,false;recursion_accounttype(D, B).;true;true
4;false,false;recursion_accounttype(H, B).;true;true
4;false,false,false;tweets(A, I), follows(A, J).;true;true
5;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
5;false;follows(A, D), follows(D, A).;true;true
5;false,true;tweets(D, E).;true;true
6;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
6;false;follows(D, A).;true;true
6;false,true;follows(E, D), recursion_accounttype(E, B).;true;true
7;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
7;false;follows(A, D), follows(D, A).;true;true
7;false,false;follows(A, H).;true;true
7;false,false,false;follows(I, A), recursion_accounttype(I, B).;true;true
8;;accounttype(A, B) :- follows(A, C), follows(D, A).;true;true
8;true;follows(C, E), recursion_accounttype(E, B).;true;true
8;true,false;follows(C, A).;true;true
8;false;recursion_accounttype(F, B).;true;true
8;false,true;follows(A, G), follows(F, G).;true;true
8;false,false;follows(H, A), follows(I, H).;true;true
9;;accounttype(A, B) :- follows(D, A).;true;true
9;true;follows(E, D), recursion_accounttype(E, B).;true;true
9;true,false;follows(A, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.8152917922423699;  // std dev = 0.203, 70.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=67 */
%   | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.7152917922423694;  // std dev = 0.350, 14.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=12 */
%   | | else return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then if ( follows(G, A), follows(F, H) )
%   | | then return 0.7331489350995123;  // std dev = 0.331, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else return 0.6914822684328454;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else if ( follows(I, A) )
%   | | then if ( follows(I, J), follows(J, A) )
%   | | | then return -0.12249622619081046;  // std dev = 1.715, 155.000 (wgt'ed) examples reached here.  /* #neg=152 #pos=3 */
%   | | | else return 0.00814893509951235;  // std dev = 3.194, 80.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=12 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.12285481745245355;  // std dev = 2.572, 34.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=9 */
%   | | | else return 0.27920156667845974;  // std dev = 2.152, 19.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=8 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.7164067321000318;  // std dev = 0.123, 66.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=65 */
%   | else if ( tweets(A, E), follows(F, A) )
%   | | then return 0.49399761434482076;  // std dev = 0.433, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | else return 0.750543491992639;  // std dev = 0.007, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(H, A), follows(A, H) )
%   | | then return 0.5585187561308996;  // std dev = 0.910, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0.7273274267675457;  // std dev = 0.008, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( follows(I, A), follows(J, I) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.7984696886373416;  // std dev = 0.957, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | else return -0.13300163798034478;  // std dev = 0.103, 200.000 (wgt'ed) examples reached here.  /* #neg=200 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.13284871670914394;  // std dev = 2.527, 31.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=9 */
%   | | | else return 0.11695232016464051;  // std dev = 2.373, 27.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=8 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, A), tweets(A, E) )
%   | | then if ( tweets(D, E) )
%   | | | then return 0.5428663484818068;  // std dev = 0.988, 42.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=41 */
%   | | | else return 0.5666758722913307;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.6006783885930902;  // std dev = 0.112, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else if ( follows(F, A) )
%   | | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | | then return 0.6779547658521113;  // std dev = 0.366, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | | else return -0.11912121982384945;  // std dev = 0.115, 187.000 (wgt'ed) examples reached here.  /* #neg=187 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.12408843714908822;  // std dev = 2.510, 30.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=9 */
%   | | | else return 0.20279349936910113;  // std dev = 2.191, 20.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=8 */
%   else if ( follows(I, A), recursion_accounttype(I, B) )
%   | then return 0.5639923211013621;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return -0.11349803036425367;  // std dev = 1.05e-08, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.4171223634194368;  // std dev = 0.124, 66.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=65 */
%   | else if ( follows(E, A), follows(A, E) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.3263775475980493;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.09946171436848865;  // std dev = 0.821, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.45030489382142636;  // std dev = 0.048, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.41957406030832933;  // std dev = 0.063, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.08686372904329719;  // std dev = 1.220, 140.000 (wgt'ed) examples reached here.  /* #neg=137 #pos=3 */
%   | | | else return -0.020859073411924486;  // std dev = 2.233, 88.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=12 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.09569360731757393;  // std dev = 2.527, 31.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=9 */
%   | | | else return 0.1687119847097674;  // std dev = 2.191, 20.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=8 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.319151936952323;  // std dev = 0.122, 66.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=65 */
%   | else if ( tweets(A, E), follows(F, A) )
%   | | then return 0.1586549683056172;  // std dev = 0.431, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | else return 0.35899040921796904;  // std dev = 0.089, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(G, A), tweets(G, H) )
%   | then if ( follows(A, I), follows(G, I) )
%   | | then if ( follows(J, G), recursion_accounttype(J, B) )
%   | | | then return 0.4830790768708764;  // std dev = 0.569, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.097411299147682;  // std dev = 0.445, 191.000 (wgt'ed) examples reached here.  /* #neg=190 #pos=1 */
%   | | else if ( recursion_accounttype(G, B) )
%   | | | then return 0.2149212175165381;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return -0.0328730004444522;  // std dev = 1.502, 54.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=6 */
%   | else if ( recursion_accounttype(K, B) )
%   | | then return 0.7651965684615399;  // std dev = 0.108, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.22450187654105622;  // std dev = 0.041, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then if ( follows(D, F), follows(F, A) )
%   | | | then return 0.13337939300094412;  // std dev = 2.280, 45.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=39 */
%   | | | else return 0.2640266591788183;  // std dev = 0.010, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.26218385040405234;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.1982263486996906;  // std dev = 0.961, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | else return 0.26348383141981885;  // std dev = 0.155, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else if ( follows(A, H), follows(H, A) )
%   | then return -0.03479058560840064;  // std dev = 0.181, 203.000 (wgt'ed) examples reached here.  /* #neg=181 #pos=22 */
%   | else if ( follows(I, A) )
%   | | then return -0.08097579778174706;  // std dev = 0.086, 26.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=1 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.0651399313100716;  // std dev = 1.954, 30.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=11 */
%   | | | else return -0.0075540565456171365;  // std dev = 2.298, 34.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=10 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.24965361245605242;  // std dev = 0.371, 77.000 (wgt'ed) examples reached here.  /* #pos=77 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.215915551784025;  // std dev = 0.135, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.47962558340147565;  // std dev = 0.727, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | else return -0.08866354088267188;  // std dev = 0.115, 214.000 (wgt'ed) examples reached here.  /* #neg=214 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.5945550940907295;  // std dev = 0.097, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.19858889917715777;  // std dev = 0.100, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.07576233221697094;  // std dev = 1.352, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | | | else return 0.04260332206006591;  // std dev = 1.440, 15.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=5 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( recursion_accounttype(D, B), tweets(D, E) )
%   | | then if ( follows(F, A), follows(F, D) )
%   | | | then return 0.15893593177509377;  // std dev = 1.387, 55.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=53 */
%   | | | else return 0.07591866588095653;  // std dev = 0.952, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else if ( tweets(A, G), follows(A, D) )
%   | | | then return 0.16565483300421435;  // std dev = 0.913, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0.2906565507682894;  // std dev = 0.023, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.005542748165232791;  // std dev = 0.897, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(A, H), follows(H, A) )
%   | then return -0.03848268169883451;  // std dev = 0.134, 200.000 (wgt'ed) examples reached here.  /* #neg=180 #pos=20 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return -0.015059156456997513;  // std dev = 1.550, 42.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=11 */
%   | | | else return 0.0758192471552545;  // std dev = 1.924, 27.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=10 */
%   | | else return 0.025327987457371123;  // std dev = 0.133, 21.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=8 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(D, A) )
%   then if ( follows(C, E), recursion_accounttype(E, B) )
%   | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then if ( tweets(A, G) )
%   | | | then return 0.15212171009001615;  // std dev = 0.989, 59.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=58 */
%   | | | else return 0.17762481678881084;  // std dev = 0.093, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | | then return 0.2694766941386746;  // std dev = 0.079, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.4163254511686015;  // std dev = 0.215, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.07899603413893104;  // std dev = 0.022, 184.000 (wgt'ed) examples reached here.  /* #neg=183 #pos=1 */
%   else if ( recursion_accounttype(I, B) )
%   | then if ( follows(A, J), follows(I, J) )
%   | | then if ( follows(A, K), follows(K, L) )
%   | | | then return 0.3082520587923621;  // std dev = 0.947, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return 0.531859603830813;  // std dev = 0.348, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0.19064351651818856;  // std dev = 7.45e-09, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return -0.15055580002464306;  // std dev = 0.063, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(F, E) )
%   | | | then return 0.14303967884614938;  // std dev = 1.016, 67.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=66 */
%   | | | else return -0.12195605539871855;  // std dev = 1.121, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else return 0.2092177611085275;  // std dev = 0.170, 33.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   | else return -0.07161874520534293;  // std dev = 0.027, 177.000 (wgt'ed) examples reached here.  /* #neg=175 #pos=2 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.3640755305093764;  // std dev = 0.123, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return -0.14564556922773222;  // std dev = 0.066, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.33498053903771813;  // std dev = 7.45e-09, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.17423483263076167;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.016084994880282054;  // std dev = 0.290, 15.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=6 */


Results
   AUC ROC   = 0.99362
   AUC PR    = 0.326765
   CLL	      = -0.117156
   Precision = 0.345499 at threshold = 0.5
   Recall    = 0.910256
   F1        = 0.500882


Total learning time: 19.945 seconds
Total inference time: 87.568 seconds
AUC ROC: 0.99362


Results scoring model
   AUC ROC   = 0.992889
   AUC PR    = 0.369249
   CLL	      = -0.115007
   Precision = 0.341463 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.509091


Total scoring time: 87.282 seconds
Refined model CLL: -0.115007


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.99362
   AUC PR    = 0.326765
   CLL	      = -0.117156
   Precision = 0.345499 at threshold = 0.5
   Recall    = 0.910256
   F1        = 0.500882


Total learning time: 158.197 seconds
Total inference time: 87.568 seconds
AUC ROC: 0.99362
Total revision time: 158.197
Best scored revision CLL: -0.115007


Dataset: 7_yeast_twitter, Fold: 2, Type: Transfer (trRDN-B), Time: 01:10:05
{'AUC ROC': 0.99362, 'AUC PR': 0.326765, 'CLL': -0.117156, 'Precision': [0.345499, 0.5], 'Recall': 0.910256, 'F1': 0.500882, 'Learning time': 158.197, 'Inference time': 87.568, 'parameter_1.0': {'AUC ROC': 0.992615, 'AUC PR': 0.403062, 'CLL': -0.125865, 'Precision': [0.341837, 0.5], 'Recall': 0.858974, 'F1': 0.489051, 'Learning time': 9.03, 'Inference time': 40.691}}


