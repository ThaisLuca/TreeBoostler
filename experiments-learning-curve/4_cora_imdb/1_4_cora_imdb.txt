Starting experiment #1 for 4_cora_imdb

Start learning from source dataset

Source train facts examples: 42558
Source train pos examples: 3017
Source train neg examples: 5022

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.25375166443991654;  // std dev = 0.489, 6,595.000 (wgt'ed) examples reached here.  /* #neg=3,986 #pos=2,609 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.11529179224236855;  // std dev = 4.479, 105.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=27 */
%   | | | else return 0.31078051404687906;  // std dev = 6.861, 190.000 (wgt'ed) examples reached here.  /* #neg=104 #pos=86 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.46790503266048855;  // std dev = 4.417, 82.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=50 */
%   | | | else return 0.20814893509951235;  // std dev = 2.133, 20.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=7 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.4748156017661778;  // std dev = 3.766, 60.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=37 */
%   | | | else return 0.6142464960751212;  // std dev = 2.750, 41.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | then return 0.045745834324316524;  // std dev = 0.390, 645.000 (wgt'ed) examples reached here.  /* #neg=524 #pos=121 */
%   | else return 0.02093963277393071;  // std dev = 0.369, 301.000 (wgt'ed) examples reached here.  /* #neg=252 #pos=49 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.2202789253000489;  // std dev = 0.489, 6,595.000 (wgt'ed) examples reached here.  /* #neg=3,986 #pos=2,609 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.0815140714063931;  // std dev = 4.479, 105.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=27 */
%   | | | else return 0.2685926717395528;  // std dev = 6.861, 190.000 (wgt'ed) examples reached here.  /* #neg=104 #pos=86 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.40837613259448097;  // std dev = 4.389, 82.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=50 */
%   | | | else return 0.14101535675698904;  // std dev = 2.134, 20.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=7 */
%   | | else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | | | then return 0.7848853972746143;  // std dev = 0.022, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.44181395471449136;  // std dev = 4.632, 97.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=64 */
%   else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | then return 0.04145180608364211;  // std dev = 0.390, 645.000 (wgt'ed) examples reached here.  /* #neg=524 #pos=121 */
%   | else return 0.015443642182564108;  // std dev = 0.369, 301.000 (wgt'ed) examples reached here.  /* #neg=252 #pos=49 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.18612745546670761;  // std dev = 0.489, 6,595.000 (wgt'ed) examples reached here.  /* #neg=3,986 #pos=2,609 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.1417697000866624;  // std dev = 7.707, 263.000 (wgt'ed) examples reached here.  /* #neg=170 #pos=93 */
%   | | | else return 0.39717383827381164;  // std dev = 2.739, 32.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=20 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordauthor(K, J) )
%   | | | then return 0.3286333906661143;  // std dev = 4.362, 82.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=50 */
%   | | | else return 0.11466388020802412;  // std dev = 2.136, 20.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=7 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.33362325130600723;  // std dev = 3.742, 60.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=37 */
%   | | | else return 0.4320284206375123;  // std dev = 2.744, 41.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   else if ( haswordvenue(A, N), haswordtitle(P, N) )
%   | then return 0.036270579657639114;  // std dev = 0.390, 645.000 (wgt'ed) examples reached here.  /* #neg=524 #pos=121 */
%   | else return 0.013348050031270688;  // std dev = 0.369, 301.000 (wgt'ed) examples reached here.  /* #neg=252 #pos=49 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.15376240055336185;  // std dev = 0.489, 6,595.000 (wgt'ed) examples reached here.  /* #neg=3,986 #pos=2,609 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.039355388262597046;  // std dev = 4.479, 105.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=27 */
%   | | | else return 0.19026773487392346;  // std dev = 6.825, 190.000 (wgt'ed) examples reached here.  /* #neg=104 #pos=86 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then return 0.42945331874064585;  // std dev = 0.371, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.2149065296212601;  // std dev = 4.762, 94.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=51 */
%   | | | else return 0.2808667660315747;  // std dev = 4.607, 99.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=66 */
%   else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | then if ( haswordauthor(M, K) )
%   | | then return 0.11327522227551755;  // std dev = 0.444, 63.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=17 */
%   | | else return 0.024083599112996193;  // std dev = 0.383, 582.000 (wgt'ed) examples reached here.  /* #neg=478 #pos=104 */
%   | else return 0.008982215589516453;  // std dev = 0.369, 301.000 (wgt'ed) examples reached here.  /* #neg=252 #pos=49 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.12466581290352849;  // std dev = 0.489, 6,595.000 (wgt'ed) examples reached here.  /* #neg=3,986 #pos=2,609 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.020088475454078554;  // std dev = 4.479, 105.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=27 */
%   | | | else return 0.15190212028896452;  // std dev = 6.822, 190.000 (wgt'ed) examples reached here.  /* #neg=104 #pos=86 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, A) )
%   | | | then return 0.20567472435217807;  // std dev = 4.028, 71.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=44 */
%   | | | else return 0.07087719395858856;  // std dev = 2.685, 31.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=13 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.20821153028198738;  // std dev = 3.722, 60.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=37 */
%   | | | else return 0.2609087550846064;  // std dev = 2.742, 41.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | then return 0.028413028101778967;  // std dev = 0.390, 645.000 (wgt'ed) examples reached here.  /* #neg=524 #pos=121 */
%   | else return 0.007809545790365885;  // std dev = 0.369, 301.000 (wgt'ed) examples reached here.  /* #neg=252 #pos=49 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.09945562508083261;  // std dev = 0.489, 6,595.000 (wgt'ed) examples reached here.  /* #neg=3,986 #pos=2,609 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.06050965584022756;  // std dev = 7.677, 263.000 (wgt'ed) examples reached here.  /* #neg=170 #pos=93 */
%   | | | else return 0.24305081924403288;  // std dev = 2.739, 32.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=20 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordauthor(K, J) )
%   | | | then return 0.14786283765438238;  // std dev = 4.334, 82.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=50 */
%   | | | else return 0.030668623717483003;  // std dev = 2.152, 20.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=7 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.15718716528113352;  // std dev = 3.720, 60.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=37 */
%   | | | else return 0.19606053548193156;  // std dev = 2.742, 41.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   else if ( haswordvenue(A, N), haswordtitle(P, N) )
%   | then return 0.025582708555081185;  // std dev = 0.390, 645.000 (wgt'ed) examples reached here.  /* #neg=524 #pos=121 */
%   | else return 0.004622508030908493;  // std dev = 0.369, 301.000 (wgt'ed) examples reached here.  /* #neg=252 #pos=49 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.07833317677971688;  // std dev = 0.489, 6,595.000 (wgt'ed) examples reached here.  /* #neg=3,986 #pos=2,609 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return -0.0022064891736643588;  // std dev = 4.479, 105.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=27 */
%   | | | else return 0.09806701314082118;  // std dev = 6.798, 190.000 (wgt'ed) examples reached here.  /* #neg=104 #pos=86 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, A) )
%   | | | then return 0.11878485128893466;  // std dev = 4.026, 71.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=44 */
%   | | | else return 0.03769398413395367;  // std dev = 2.680, 31.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=13 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.11803621377439066;  // std dev = 3.720, 60.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=37 */
%   | | | else return 0.148523030194474;  // std dev = 2.742, 41.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | then return 0.022302670734266106;  // std dev = 0.390, 645.000 (wgt'ed) examples reached here.  /* #neg=524 #pos=121 */
%   | else return 0.0035296160530001075;  // std dev = 0.369, 301.000 (wgt'ed) examples reached here.  /* #neg=252 #pos=49 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( haswordauthor(E, C) )
%   | | then if ( author(F, E), title(F, D) )
%   | | | then return 0.6645472655320326;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.25338705904084335;  // std dev = 1.913, 15.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=9 */
%   | | else if ( title(G, D), venue(G, B) )
%   | | | then return 0.06057268481787143;  // std dev = 39.640, 6,583.000 (wgt'ed) examples reached here.  /* #neg=3,984 #pos=2,599 */
%   | | | else return 0.04205758316385609;  // std dev = 8.069, 288.000 (wgt'ed) examples reached here.  /* #neg=178 #pos=110 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then return 0.21648086849286835;  // std dev = 0.353, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.06620374539781688;  // std dev = 4.761, 94.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=51 */
%   | | | else return 0.08924455732701858;  // std dev = 4.556, 99.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=66 */
%   else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | then return 0.04120016481285264;  // std dev = 0.405, 91.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=19 */
%   | else return 0.011177812168652428;  // std dev = 0.381, 855.000 (wgt'ed) examples reached here.  /* #neg=704 #pos=151 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.047619690147803026;  // std dev = 0.489, 6,595.000 (wgt'ed) examples reached here.  /* #neg=3,986 #pos=2,609 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return -0.025034810310333642;  // std dev = 4.479, 105.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=27 */
%   | | | else return 0.06375008846556537;  // std dev = 6.799, 190.000 (wgt'ed) examples reached here.  /* #neg=104 #pos=86 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then return 0.16653586513679364;  // std dev = 0.354, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | | then return 0.2052631517070615;  // std dev = 1.109, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.053738144256808465;  // std dev = 6.486, 186.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=112 */
%   else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | then if ( haswordauthor(M, K) )
%   | | then return 0.0939608427660728;  // std dev = 0.443, 63.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=17 */
%   | | else return 0.009877149097986414;  // std dev = 0.383, 582.000 (wgt'ed) examples reached here.  /* #neg=478 #pos=104 */
%   | else return -7.169260910677578E-4;  // std dev = 0.369, 301.000 (wgt'ed) examples reached here.  /* #neg=252 #pos=49 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.5826726386451141;  // std dev = 1.416, 48.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=46 */
%   | | | else return -0.3599842362736307;  // std dev = 0.000, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | else if ( author(H, E), venue(H, A) )
%   | | | then return -0.2589775147817349;  // std dev = 1.103, 16.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | | | else return -0.02768125715085187;  // std dev = 4.772, 107.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=39 */
%   | else if ( haswordtitle(I, C) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return 0.036474852415649704;  // std dev = 39.122, 6,411.000 (wgt'ed) examples reached here.  /* #neg=3,878 #pos=2,533 */
%   | | | else return 0.023808655027978274;  // std dev = 8.056, 288.000 (wgt'ed) examples reached here.  /* #neg=178 #pos=110 */
%   | | else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | | | then return 0.15500922144593585;  // std dev = 1.110, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.040869712932706456;  // std dev = 6.486, 186.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=112 */
%   else return 0.010347444378920176;  // std dev = 0.383, 946.000 (wgt'ed) examples reached here.  /* #neg=776 #pos=170 */


Starting fold 1

Target train facts examples: 863
Target train pos examples: 326
Target train neg examples: 10928

Target test facts examples: 215
Target test pos	 examples: 56
Target test neg examples: 3308

Amount of data: 0.2
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;haswordauthor(E, C).;true;true
7;true,true,true;author(F, E), title(F, D).;false;false
7;true,true,false;title(G, D), venue(G, B).;false;false
7;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
7;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
7;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, B).;false;true
8;true,true,false;title(F, D), venue(F, A).;false;false
8;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
8;true,false,false;haswordvenue(A, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
8;false,true;haswordauthor(M, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;true,true;author(F, E), venue(F, B).;true;true
9;true,true,true;samebib(F, G), venue(G, A).;false;false
9;true,true,false;author(H, E), venue(H, A).;false;false
9;true,false;haswordtitle(I, C).;true;true
9;true,false,true;title(J, I), venue(J, A).;false;false
9;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995123;  // std dev = 8.43e-08, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.12345505754849195;  // std dev = 3.090, 49.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=13 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048763;  // std dev = 8.56e-08, 93.000 (wgt'ed) examples reached here.  /* #neg=93 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.6881801510724602;  // std dev = 1.173, 54.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=52 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.24869648232711913;  // std dev = 2.778, 32.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=13 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( movie(E, A) )
%   | | then return 0.35176092725962005;  // std dev = 0.385, 96.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=65 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360621;  // std dev = 7.60e-08, 94.000 (wgt'ed) examples reached here.  /* #neg=94 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4754971399890477;  // std dev = 0.000, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.048078452867696915;  // std dev = 3.012, 43.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=13 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783624;  // std dev = 5.10e-09, 94.000 (wgt'ed) examples reached here.  /* #neg=94 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926097;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(B, E) )
%   | | then return 0.36040952060995224;  // std dev = 8.94e-08, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.13046912638481475;  // std dev = 2.807, 33.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=13 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.092691276189261;  // std dev = 3.94e-08, 96.000 (wgt'ed) examples reached here.  /* #neg=96 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.28211457992666134;  // std dev = 0.000, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | else if ( movie(E, A) )
%   | | then return 0.04901732955618716;  // std dev = 0.469, 39.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=13 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839682;  // std dev = 5.67e-08, 102.000 (wgt'ed) examples reached here.  /* #neg=102 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.16991396117787172;  // std dev = 0.198, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.2286215215758087;  // std dev = 0.000, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.03359047068515464;  // std dev = 2.944, 39.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=13 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109164;  // std dev = 4.83e-08, 85.000 (wgt'ed) examples reached here.  /* #neg=85 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18164627979192177;  // std dev = 0.481, 53.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=52 */
%   | else if ( movie(E, B) )
%   | | then return -0.00919156570630583;  // std dev = 3.014, 46.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=13 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.07324622576333707;  // std dev = 0.000, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1643269983298339;  // std dev = 0.000, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | else if ( genre(A, E) )
%   | | then return -0.07557908692363037;  // std dev = 4.56e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.009434465147161801;  // std dev = 3.026, 44.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=13 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420265;  // std dev = 5.02e-09, 108.000 (wgt'ed) examples reached here.  /* #neg=108 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return -0.37168205287253997;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0.14298618105396987;  // std dev = 3.94e-08, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | | else if ( genre(A, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.03921202625105221;  // std dev = 2.924, 38.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=13 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.06419184008202626;  // std dev = 0.000, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.145489
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 0.99 seconds
Total inference time: 1.009 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.977986
   AUC PR    = 0.854327
   CLL	      = -0.138267
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.8
   F1        = 0.888889


Total scoring time: 0.924 seconds
Parameter learned model CLL: -0.138267


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 3, 0], 'true,false,true': [8.43e-08, 0, 52], 'true,false,false,true': [3.09, 36, 13], 'true,false,false,false': [0.0, 0, 0], 'false,true': [8.56e-08, 93, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.173, 2, 52], 'true,false,true': [0.0, 2, 0], 'true,false,false,true': [2.778, 19, 13], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 95, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 2, 0], 'true,false,true': [0.385, 31, 65], 'true,false,false': [0.0, 0, 0], 'false,true': [7.6e-08, 94, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 52], 'true,false,true': [0.0, 4, 0], 'true,false,false,true': [3.012, 30, 13], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.1e-09, 94, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [2.63e-09, 6, 0], 'true,false,true': [8.94e-08, 0, 52], 'true,false,false,true': [2.807, 20, 13], 'true,false,false,false': [0.0, 0, 0], 'false,true': [3.94e-08, 96, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 52], 'true,false,true': [0.469, 26, 13], 'true,false,false': [0.0, 0, 0], 'false,true': [5.67e-08, 102, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.198, 3, 0], 'true,false,true': [0.0, 0, 52], 'true,false,false,true': [2.944, 26, 13], 'true,false,false,false': [0.0, 0, 0], 'false,true': [4.83e-08, 85, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.481, 1, 52], 'true,false,true': [3.014, 33, 13], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 90, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 52], 'true,false,true': [4.56e-09, 9, 0], 'true,false,false,true': [3.026, 31, 13], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.02e-09, 108, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true,true,false': 'genre(A, G)'}, {'true,true,true,true': [0.0, 1, 0], 'true,true,true,false': [3.94e-08, 0, 52], 'true,true,false,true': [0.0, 0, 0], 'true,true,false,false': [2.924, 25, 13], 'true,false': [0.0, 0, 0], 'false': [0.0, 86, 0]}]]
[{'': [0.2343749999999994, 7.879002110243047e-17], 'true': [0.0, 0.22938927556121883], 'true,false': [1.3664283380001927e-16, 0.1949187838400661], 'true,false,false': [0.1949187838400661, nan], 'false': [7.879002110243047e-17, nan]}, {'': [0.1568246234101161, -1.402386978473882e-17], 'true': [0.02546097300973163, 0.23477190398975845], 'true,false': [0.0, 0.24121093749999972], 'true,false,false': [0.24121093749999972, nan], 'false': [-1.402386978473882e-17, nan]}, {'': [0.14946352690896164, 6.141659285160441e-17], 'true': [0.0, 0.14818209027527812], 'true,false': [0.14818209027527812, nan], 'false': [6.141659285160441e-17, nan]}, {'': [0.14075292527671204, 2.362176648138631e-17], 'true': [0.0, 0.19471811078715634], 'true,false': [0.0, 0.2109248242293132], 'true,false,false': [0.2109248242293132, nan], 'false': [2.362176648138631e-17, nan]}, {'': [0.10646217463827225, 1.61907524424502e-17], 'true': [1.1564823173178713e-18, 0.1052493183915861], 'true,false': [1.5372318802502167e-16, 0.23875114784205698], 'true,false,false': [0.23875114784205698, nan], 'false': [1.61907524424502e-17, nan]}, {'': [0.10749445101854556, 3.1565164425617195e-17], 'true': [-8.540177112501205e-17, 0.21977219820692584], 'true,false': [0.21977219820692584, nan], 'false': [3.1565164425617195e-17, nan]}, {'': [0.10469826880802145, 2.7429039431915633e-17], 'true': [0.013067264765757097, 0.10455330604907768], 'true,false': [-1.708035422500241e-17, 0.2222222222222223], 'true,false,false': [0.2222222222222223, nan], 'false': [2.7429039431915633e-17, nan]}, {'': [0.10315821563657696, -8.018277400070574e-18], 'true': [0.004369992079542818, 0.19748234474961102], 'true,false': [0.19748234474961102, nan], 'false': [-8.018277400070574e-18, nan]}, {'': [0.09609564500749354, 2.4671622769447922e-17], 'true': [0.0, 0.17342981920037012], 'true,false': [2.3129646346357427e-18, 0.20816115702479357], 'true,false,false': [0.20816115702479357, nan], 'false': [2.4671622769447922e-17, nan]}, {'': [0.09899272944136227, -1.2264091551091846e-17], 'true': [0.09899272944136227, nan], 'true,true': [0.004903501720426405, 0.22506925207756232], 'true,true,false': [nan, 0.22506925207756232], 'true,true,true': [0.0, 2.9890619893754213e-17]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, E).;true;true
9;true,true;genre(A, F).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995123;  // std dev = 8.43e-08, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | | else if ( actor(B) )
%   | | | then return -0.1418510649004877;  // std dev = 3.33e-08, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else return -0.14185106490048763;  // std dev = 8.16e-08, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.7194734122109542;  // std dev = 5.16e-08, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return 0.6972387266651825;  // std dev = 0.135, 38.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=37 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.7194734122109542;  // std dev = 4.21e-08, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return -0.1340603023762055;  // std dev = 0.151, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   else return -0.12544463852839138;  // std dev = 0.000, 98.000 (wgt'ed) examples reached here.  /* #neg=98 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( director(B), actor(A) )
%   | | then return 0.5584878340440326;  // std dev = 0.022, 65.000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | | else return -0.11532025690164202;  // std dev = 0.141, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   else return -0.11231637819360621;  // std dev = 7.60e-08, 94.000 (wgt'ed) examples reached here.  /* #neg=94 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4206072144602725;  // std dev = 0.018, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | else if ( genre(A, E) )
%   | | then return -0.1015963294878363;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.41675466886483653;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return -0.10716556387210134;  // std dev = 0.129, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   else return -0.1015963294878363;  // std dev = 2.58e-08, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.32281206272612933;  // std dev = 0.016, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.3201973849992178;  // std dev = 3.65e-08, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return -0.09638825468508648;  // std dev = 0.121, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   else return -0.09269127618926092;  // std dev = 5.77e-08, 105.000 (wgt'ed) examples reached here.  /* #neg=105 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.2535950725926152;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return 0.24363016780525726;  // std dev = 0.086, 38.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=37 */
%   | else if ( actor(B) )
%   | | then return -0.08497428680044203;  // std dev = 0.017, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | else return 0.2548211680261927;  // std dev = 1.05e-08, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else return -0.08518475138839682;  // std dev = 5.67e-08, 102.000 (wgt'ed) examples reached here.  /* #neg=102 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08578805157129554;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(B, E) )
%   | | then return 0.21246139459987834;  // std dev = 0.018, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.209509690660687;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return -0.08597552412564316;  // std dev = 0.161, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   else return -0.07877675473109158;  // std dev = 5.96e-08, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.17864533488550247;  // std dev = 0.017, 65.000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else return -0.07536266982089024;  // std dev = 0.154, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
%   else return -0.07324622576333707;  // std dev = 0.000, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.15430252825207164;  // std dev = 0.014, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | else if ( genre(A, E) )
%   | | then return -0.07396408240660005;  // std dev = 1.86e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.15238214308144166;  // std dev = 1.05e-08, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return -0.07220927347089601;  // std dev = 0.145, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   else return -0.06842697784420265;  // std dev = 5.05e-08, 105.000 (wgt'ed) examples reached here.  /* #neg=105 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.1352231570035417;  // std dev = 0.012, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | else if ( actor(B) )
%   | | then return -0.06297694117508897;  // std dev = 0.013, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | else return 0.1337245813252505;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else return -0.06419184008202626;  // std dev = 0.000, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063305
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.257 seconds
Total inference time: 1.006 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.066479
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.903 seconds
Refined model CLL: -0.066479


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063305
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 4.074 seconds
Total inference time: 1.006 seconds
AUC ROC: 1.0
Total revision time: 4.074
Best scored revision CLL: -0.066479


Dataset: 4_cora_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 00:00:06
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063305, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 4.074, 'Inference time': 1.006, 'parameter_0.2': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.145489, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 0.99, 'Inference time': 1.009}}


Amount of data: 0.4
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;haswordauthor(E, C).;true;true
7;true,true,true;author(F, E), title(F, D).;false;false
7;true,true,false;title(G, D), venue(G, B).;false;false
7;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
7;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
7;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, B).;false;true
8;true,true,false;title(F, D), venue(F, A).;false;false
8;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
8;true,false,false;haswordvenue(A, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
8;false,true;haswordauthor(M, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;true,true;author(F, E), venue(F, B).;true;true
9;true,true,true;samebib(F, G), venue(G, A).;false;false
9;true,true,false;author(H, E), venue(H, A).;false;false
9;true,false;haswordtitle(I, C).;true;true
9;true,false,true;title(J, I), venue(J, A).;false;false
9;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995111;  // std dev = 5.06e-07, 107.000 (wgt'ed) examples reached here.  /* #pos=107 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.1225167511914658;  // std dev = 4.113, 87.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=23 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048824;  // std dev = 0.000, 173.000 (wgt'ed) examples reached here.  /* #neg=173 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109547;  // std dev = 0.000, 107.000 (wgt'ed) examples reached here.  /* #pos=107 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.13007098409752738;  // std dev = 4.048, 80.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=23 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839147;  // std dev = 0.000, 172.000 (wgt'ed) examples reached here.  /* #neg=172 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14687695430132625;  // std dev = 0.167, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( movie(E, A) )
%   | | then return 0.3599812778917272;  // std dev = 0.371, 189.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=130 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360664;  // std dev = 0.000, 201.000 (wgt'ed) examples reached here.  /* #neg=201 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.45946444278883475;  // std dev = 0.665, 108.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=107 */
%   | else if ( genre(A, E) )
%   | | then return -0.09848497970289645;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.06498258214861549;  // std dev = 4.016, 77.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=23 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783653;  // std dev = 0.000, 190.000 (wgt'ed) examples reached here.  /* #neg=190 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11821760167038493;  // std dev = 0.182, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( genre(B, E) )
%   | | then return 0.3550147597128806;  // std dev = 1.84e-07, 107.000 (wgt'ed) examples reached here.  /* #pos=107 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.031551021635387456;  // std dev = 4.078, 83.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=23 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926055;  // std dev = 9.54e-08, 207.000 (wgt'ed) examples reached here.  /* #neg=207 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.278466141473195;  // std dev = 0.000, 107.000 (wgt'ed) examples reached here.  /* #pos=107 */
%   | else if ( movie(E, A) )
%   | | then return 0.05311076005054953;  // std dev = 0.445, 80.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=23 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 7.88e-08, 196.000 (wgt'ed) examples reached here.  /* #neg=196 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.13733675261455328;  // std dev = 0.294, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( genre(B, E) )
%   | | then return 0.22608535772820917;  // std dev = 0.000, 107.000 (wgt'ed) examples reached here.  /* #pos=107 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.00883003947998948;  // std dev = 4.146, 91.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=23 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109147;  // std dev = 7.74e-08, 195.000 (wgt'ed) examples reached here.  /* #neg=195 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1889826359635076;  // std dev = 0.000, 107.000 (wgt'ed) examples reached here.  /* #pos=107 */
%   | else if ( movie(E, B) )
%   | | then return -0.0069888647269174325;  // std dev = 4.129, 99.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=23 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.07324622576333666;  // std dev = 1.19e-07, 200.000 (wgt'ed) examples reached here.  /* #neg=200 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14822999680805313;  // std dev = 0.844, 110.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=107 */
%   | else if ( genre(A, E) )
%   | | then return -0.07432401862044066;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( movie(F, B) )
%   | | | then return -1.0637562012701029E-4;  // std dev = 4.130, 89.000 (wgt'ed) examples reached here.  /* #neg=66 #pos=23 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420262;  // std dev = 5.82e-09, 201.000 (wgt'ed) examples reached here.  /* #neg=201 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return -0.36594196235622817;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.14260172229880655;  // std dev = 8.69e-08, 107.000 (wgt'ed) examples reached here.  /* #pos=107 */
%   | | else if ( genre(A, G) )
%   | | | then return -0.06936955866770533;  // std dev = 2.63e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return -0.026189718560324565;  // std dev = 4.202, 99.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=23 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.06419184008202626;  // std dev = 0.000, 201.000 (wgt'ed) examples reached here.  /* #neg=201 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.12426
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.165 seconds
Total inference time: 1.057 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.979276
   AUC PR    = 0.866512
   CLL	      = -0.121977
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.823077
   F1        = 0.902954


Total scoring time: 1.118 seconds
Parameter learned model CLL: -0.121977


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 10, 0], 'true,false,true': [5.06e-07, 0, 107], 'true,false,false,true': [4.113, 64, 23], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 173, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 107], 'true,false,true': [0.0, 9, 0], 'true,false,false,true': [4.048, 57, 23], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 172, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.167, 10, 0], 'true,false,true': [0.371, 59, 130], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 201, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.665, 1, 107], 'true,false,true': [0.0, 5, 0], 'true,false,false,true': [4.016, 54, 23], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 190, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.182, 7, 0], 'true,false,true': [1.84e-07, 0, 107], 'true,false,false,true': [4.078, 60, 23], 'true,false,false,false': [0.0, 0, 0], 'false,true': [9.54e-08, 207, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 107], 'true,false,true': [0.445, 57, 23], 'true,false,false': [0.0, 0, 0], 'false,true': [7.88e-08, 196, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.294, 9, 0], 'true,false,true': [0.0, 0, 107], 'true,false,false,true': [4.146, 68, 23], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.74e-08, 195, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 107], 'true,false,true': [4.129, 76, 23], 'true,false,false': [0.0, 0, 0], 'false,true': [1.19e-07, 200, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.844, 3, 107], 'true,false,true': [0.0, 2, 0], 'true,false,false,true': [4.13, 66, 23], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.82e-09, 201, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true,true,false': 'genre(A, G)'}, {'true,true,true,true': [0.0, 3, 0], 'true,true,true,false': [8.69e-08, 0, 107], 'true,true,false,true': [2.63e-09, 8, 0], 'true,true,false,false': [4.202, 76, 23], 'true,false': [0.0, 0, 0], 'false': [0.0, 201, 0]}]]
[{'': [0.23116109188773973, -1.8225626531418756e-16], 'true': [-1.1102230246251566e-17, 0.22106493782549058], 'true,false': [2.3906110735853837e-15, 0.19447747390672573], 'true,false,false': [0.19447747390672573, nan], 'false': [-1.8225626531418756e-16, nan]}, {'': [0.1801367488065666, -1.0327656043024712e-17], 'true': [-5.976527683963459e-16, 0.19006375811794696], 'true,false': [0.0, 0.20484375000000016], 'true,false,false': [0.20484375000000016, nan], 'false': [-1.0327656043024712e-17, nan]}, {'': [0.14287179395895444, -3.0931586755725755e-17], 'true': [0.002787011315427512, 0.13737387478122673], 'true,false': [0.13737387478122673, nan], 'false': [-3.0931586755725755e-17, nan]}, {'': [0.1280129619896983, -8.998649778540742e-17], 'true': [0.004098272194300976, 0.19823575007491945], 'true,false': [0.0, 0.20947883285545657], 'true,false,false': [0.20947883285545657, nan], 'false': [-8.998649778540742e-17, nan]}, {'': [0.11316835191596591, 4.3979849284668035e-17], 'true': [0.004750323363911249, 0.1132477680677466], 'true,false': [3.1542784998696035e-16, 0.20031934968790827], 'true,false,false': [0.20031934968790827, nan], 'false': [4.3979849284668035e-17, nan]}, {'': [0.0969892798692312, 3.172065784643304e-17], 'true': [-1.4941319209908648e-16, 0.1976536174741811], 'true,false': [0.1976536174741811, nan], 'false': [3.172065784643304e-17, nan]}, {'': [0.09927098840815991, 3.0744637605004337e-17], 'true': [0.009629498418889684, 0.10050830859893169], 'true,false': [-2.490219868318108e-17, 0.1888660789759692], 'true,false,false': [0.1888660789759692, nan], 'false': [3.0744637605004337e-17, nan]}, {'': [0.09233212278109144, 7.105427357601002e-17], 'true': [-2.9052565130377925e-17, 0.17217728782307062], 'true,false': [0.17217728782307062, nan], 'false': [7.105427357601002e-17, nan]}, {'': [0.09402526639609222, 3.314098580970616e-17], 'true': [0.0064735186741423706, 0.1875489469350746], 'true,false': [0.0, 0.19164246938517887], 'true,false,false': [0.19164246938517887, nan], 'false': [3.314098580970616e-17, nan]}, {'': [0.09115979386216029, -1.6570492904853082e-18], 'true': [0.09115979386216029, nan], 'true,true': [0.006860822646612351, 0.165143611506433], 'true,true,false': [8.673617379884035e-19, 0.17834914804611782], 'true,true,true': [-3.700743415417188e-17, 7.055622960234639e-17]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, E).;true;true
9;true,true;genre(A, F).;true;true
9;true,false;genre(A, G).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995111;  // std dev = 5.06e-07, 107.000 (wgt'ed) examples reached here.  /* #pos=107 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.8581489350995121;  // std dev = 8.43e-08, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return -0.14185106490048766;  // std dev = 5.96e-08, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   else return -0.14185106490048827;  // std dev = 0.000, 175.000 (wgt'ed) examples reached here.  /* #neg=175 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.719473412210955;  // std dev = 0.000, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | else return 0.6969422641912382;  // std dev = 0.136, 75.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=73 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 5.27e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.7194734122109543;  // std dev = 5.96e-08, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return -0.1254446385283916;  // std dev = 0.000, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
%   else return -0.12544463852839155;  // std dev = 0.000, 184.000 (wgt'ed) examples reached here.  /* #neg=184 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.5584866546194178;  // std dev = 0.031, 130.000 (wgt'ed) examples reached here.  /* #pos=130 */
%   | else return -0.11973413257197296;  // std dev = 0.215, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   else return -0.11231637819360664;  // std dev = 0.000, 200.000 (wgt'ed) examples reached here.  /* #neg=200 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.41675495554785913;  // std dev = 0.000, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | else return 0.41378587713584397;  // std dev = 0.072, 74.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=73 */
%   | else if ( genre(A, E) )
%   | | then return -0.10092127560757833;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.4167549555478593;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return -0.10092127560757823;  // std dev = 2.69e-08, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
%   else return -0.10159632948783652;  // std dev = 0.000, 195.000 (wgt'ed) examples reached here.  /* #neg=195 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09212577296914035;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(B, E) )
%   | | then return 0.3240017154495919;  // std dev = 0.027, 107.000 (wgt'ed) examples reached here.  /* #pos=107 */
%   | | else if ( actor(B) )
%   | | | then return -0.09212577296914042;  // std dev = 0.000, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   | | | else return 0.32019757932322174;  // std dev = 2.98e-08, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   else return -0.09269127618926058;  // std dev = 9.06e-08, 193.000 (wgt'ed) examples reached here.  /* #neg=193 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.25409961708773915;  // std dev = 0.000, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | else return 0.25194220208405477;  // std dev = 0.060, 74.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=73 */
%   | else if ( actor(B) )
%   | | then return -0.0847046046995069;  // std dev = 2.24e-08, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
%   | | else if ( actor(A) )
%   | | | then return 0.2548213006468734;  // std dev = 2.98e-08, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return -0.12263038433569266;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.08518475138839678;  // std dev = 7.74e-08, 205.000 (wgt'ed) examples reached here.  /* #neg=205 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( actor(B) )
%   | | then return -0.07836430508354807;  // std dev = 2.63e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return -0.31194527030093694;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.21214428753129402;  // std dev = 0.022, 107.000 (wgt'ed) examples reached here.  /* #pos=107 */
%   | | else if ( actor(B) )
%   | | | then return -0.07836430508354797;  // std dev = 3.16e-08, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
%   | | | else return 0.20950978436537235;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   else return -0.07877675473109148;  // std dev = 7.88e-08, 178.000 (wgt'ed) examples reached here.  /* #neg=178 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( actor(A) )
%   | | then return 0.1788457717281699;  // std dev = 0.019, 107.000 (wgt'ed) examples reached here.  /* #pos=107 */
%   | | else return -0.24918084534686774;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( director(B), actor(A) )
%   | | then return 0.17691463056815288;  // std dev = 2.36e-08, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else return -0.0738620822884977;  // std dev = 0.059, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
%   else return -0.07324622576333661;  // std dev = 1.30e-07, 216.000 (wgt'ed) examples reached here.  /* #neg=216 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( actor(A) )
%   | | then return 0.1540700985814373;  // std dev = 0.017, 107.000 (wgt'ed) examples reached here.  /* #pos=107 */
%   | | else return -0.20551636164036152;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(A, E) )
%   | | then return -0.0680518112385524;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.1526058795728744;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return -0.06941732413191144;  // std dev = 0.055, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
%   else return -0.06842697784420262;  // std dev = 8.30e-08, 204.000 (wgt'ed) examples reached here.  /* #neg=204 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( genre(A, E) )
%   | | then return -0.17397935788669833;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return 0.13504192185233302;  // std dev = 0.016, 107.000 (wgt'ed) examples reached here.  /* #pos=107 */
%   | else if ( genre(A, F) )
%   | | then return -0.06386072711724101;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.1338993030965989;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return -0.06485895917739899;  // std dev = 0.052, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
%   else return -0.06419184008202626;  // std dev = 0.000, 209.000 (wgt'ed) examples reached here.  /* #neg=209 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063392
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.728 seconds
Total inference time: 1.017 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.065042
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.157 seconds
Refined model CLL: -0.065042


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063392
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 5.168 seconds
Total inference time: 1.017 seconds
AUC ROC: 1.0
Total revision time: 5.168
Best scored revision CLL: -0.065042


Dataset: 4_cora_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 00:00:14
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063392, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 5.168, 'Inference time': 1.017, 'parameter_0.4': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.12426, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 1.165, 'Inference time': 1.057}}


Amount of data: 0.6
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;haswordauthor(E, C).;true;true
7;true,true,true;author(F, E), title(F, D).;false;false
7;true,true,false;title(G, D), venue(G, B).;false;false
7;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
7;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
7;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, B).;false;true
8;true,true,false;title(F, D), venue(F, A).;false;false
8;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
8;true,false,false;haswordvenue(A, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
8;false,true;haswordauthor(M, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;true,true;author(F, E), venue(F, B).;true;true
9;true,true,true;samebib(F, G), venue(G, A).;false;false
9;true,true,false;author(H, E), venue(H, A).;false;false
9;true,false;haswordtitle(I, C).;true;true
9;true,false,true;title(J, I), venue(J, A).;false;false
9;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995097;  // std dev = 9.83e-07, 157.000 (wgt'ed) examples reached here.  /* #pos=157 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.17219852187637052;  // std dev = 5.105, 121.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=38 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048807;  // std dev = 0.000, 270.000 (wgt'ed) examples reached here.  /* #neg=270 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7141258296113402;  // std dev = 0.842, 158.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=157 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.16630302329594668;  // std dev = 5.044, 115.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=38 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.1254446385283919;  // std dev = 0.000, 267.000 (wgt'ed) examples reached here.  /* #neg=267 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( movie(E, A) )
%   | | then return 0.3651660115675422;  // std dev = 0.375, 280.000 (wgt'ed) examples reached here.  /* #neg=85 #pos=195 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360696;  // std dev = 0.000, 285.000 (wgt'ed) examples reached here.  /* #neg=285 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.45307134863261356;  // std dev = 1.155, 160.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=157 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783627;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.03528657110475577;  // std dev = 5.210, 133.000 (wgt'ed) examples reached here.  /* #neg=95 #pos=38 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783662;  // std dev = 0.000, 287.000 (wgt'ed) examples reached here.  /* #neg=287 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11078620143400858;  // std dev = 0.190, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( genre(B, E) )
%   | | then return 0.3565173576997646;  // std dev = 0.000, 157.000 (wgt'ed) examples reached here.  /* #pos=157 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.03296669797189296;  // std dev = 5.194, 131.000 (wgt'ed) examples reached here.  /* #neg=93 #pos=38 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926043;  // std dev = 1.52e-07, 296.000 (wgt'ed) examples reached here.  /* #neg=296 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2625423201893348;  // std dev = 1.208, 162.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=157 */
%   | else if ( movie(E, A) )
%   | | then return 0.04629282154820528;  // std dev = 0.457, 125.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=38 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 1.03e-07, 294.000 (wgt'ed) examples reached here.  /* #neg=294 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12121424384248783;  // std dev = 0.219, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( genre(B, E) )
%   | | then return 0.22977682428323498;  // std dev = 2.31e-07, 157.000 (wgt'ed) examples reached here.  /* #pos=157 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.022036167325888447;  // std dev = 5.177, 129.000 (wgt'ed) examples reached here.  /* #neg=91 #pos=38 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109143;  // std dev = 5.16e-08, 278.000 (wgt'ed) examples reached here.  /* #neg=278 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18854666591681563;  // std dev = 0.488, 158.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=157 */
%   | else if ( movie(E, B) )
%   | | then return -0.011671805294691376;  // std dev = 5.273, 150.000 (wgt'ed) examples reached here.  /* #neg=112 #pos=38 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.07324622576333696;  // std dev = 1.00e-07, 294.000 (wgt'ed) examples reached here.  /* #neg=294 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1609347737691996;  // std dev = 0.501, 158.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=157 */
%   | else if ( genre(A, E) )
%   | | then return -0.07737295096853701;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.05018916471579286;  // std dev = 5.065, 117.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=38 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420286;  // std dev = 0.000, 272.000 (wgt'ed) examples reached here.  /* #neg=272 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return -0.37590950392338335;  // std dev = 7.45e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.14321622061483677;  // std dev = 9.88e-08, 157.000 (wgt'ed) examples reached here.  /* #pos=157 */
%   | | else if ( genre(A, G) )
%   | | | then return -0.07202705331840485;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return -0.0032252826539889493;  // std dev = 5.225, 135.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=38 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.06419184008202601;  // std dev = 1.02e-07, 288.000 (wgt'ed) examples reached here.  /* #neg=288 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.135279
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.399 seconds
Total inference time: 0.999 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.976904
   AUC PR    = 0.852314
   CLL	      = -0.131901
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.805128
   F1        = 0.892045


Total scoring time: 1.319 seconds
Parameter learned model CLL: -0.131901


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 11, 0], 'true,false,true': [9.83e-07, 0, 157], 'true,false,false,true': [5.105, 83, 38], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 270, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.842, 1, 157], 'true,false,true': [0.0, 9, 0], 'true,false,false,true': [5.044, 77, 38], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 267, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 8, 0], 'true,false,true': [0.375, 85, 195], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 285, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.155, 3, 157], 'true,false,true': [0.0, 7, 0], 'true,false,false,true': [5.21, 95, 38], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 287, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.19, 11, 0], 'true,false,true': [0.0, 0, 157], 'true,false,false,true': [5.194, 93, 38], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.52e-07, 296, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [1.208, 5, 157], 'true,false,true': [0.457, 87, 38], 'true,false,false': [0.0, 0, 0], 'false,true': [1.03e-07, 294, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.219, 7, 0], 'true,false,true': [2.31e-07, 0, 157], 'true,false,false,true': [5.177, 91, 38], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.16e-08, 278, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.488, 1, 157], 'true,false,true': [5.273, 112, 38], 'true,false,false': [0.0, 0, 0], 'false,true': [1e-07, 294, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.501, 1, 157], 'true,false,true': [0.0, 14, 0], 'true,false,false,true': [5.065, 79, 38], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 272, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true,true,false': 'genre(A, G)'}, {'true,true,true,true': [7.45e-09, 3, 0], 'true,true,true,false': [9.88e-08, 0, 157], 'true,true,false,true': [0.0, 12, 0], 'true,true,false,false': [5.225, 97, 38], 'true,false': [0.0, 0, 0], 'false': [1.02e-07, 288, 0]}]]
[{'': [0.21946576310150032, -5.592234494408195e-17], 'true': [-1.0092936587501423e-17, 0.20942239014544267], 'true,false': [6.155019876648002e-15, 0.21542244382214468], 'true,false,false': [0.21542244382214468, nan], 'false': [-5.592234494408195e-17, nan]}, {'': [0.17502302931818672, -6.985672963933569e-17], 'true': [0.004489672426572971, 0.2109187751667599], 'true,false': [0.0, 0.22124763705104006], 'true,false,false': [0.22124763705104006, nan], 'false': [-6.985672963933569e-17, nan]}, {'': [0.1428570388848249, -1.1530737378563028e-16], 'true': [-1.734723475976807e-18, 0.1406056287746925], 'true,false': [0.1406056287746925, nan], 'false': [-1.1530737378563028e-16, nan]}, {'': [0.14021558025587205, -5.879926820314418e-17], 'true': [0.008338065373421567, 0.19476755512295468], 'true,false': [0.0, 0.2040816326530623], 'true,false,false': [0.2040816326530623, nan], 'false': [-5.879926820314418e-17, nan]}, {'': [0.1189795007554628, 7.801567200068668e-17], 'true': [0.0032742631961300535, 0.1196284430463334], 'true,false': [-5.430899891160001e-16, 0.2059320552415365], 'true,false,false': [0.2059320552415365, nan], 'false': [7.801567200068668e-17, nan]}, {'': [0.10764930361074865, 3.6252180395923476e-17], 'true': [0.00901096452590103, 0.20908827400083888], 'true,false': [0.20908827400083888, nan], 'false': [3.6252180395923476e-17, nan]}, {'': [0.1036266514796371, 9.584659205397035e-18], 'true': [0.00685716304004433, 0.10441361152320609], 'true,false': [3.394312431975001e-16, 0.2078000120185087], 'true,false,false': [0.2078000120185087, nan], 'false': [9.584659205397035e-18, nan]}, {'': [0.10105267815224139, 3.398641912117826e-17], 'true': [0.0015083531593762353, 0.18534169964952443], 'true,false': [0.18534169964952443, nan], 'false': [3.398641912117826e-17, nan]}, {'': [0.09419040847202967, -3.183727791204493e-17], 'true': [0.00159175861758095, 0.19741666360549162], 'true,false': [-9.912705577010326e-19, 0.21930016801811583], 'true,false,false': [0.21930016801811583, nan], 'false': [-3.183727791204493e-17, nan]}, {'': [0.09674613707790086, 3.623644594262664e-17], 'true': [0.09674613707790086, nan], 'true,true': [0.004958222848446298, 0.18609435938506483], 'true,true,false': [-1.734723475976807e-18, 0.20224965706447157], 'true,true,true': [1.850371707708594e-17, 6.222906125287501e-17]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, E).;true;true
9;true,true;genre(A, F).;true;true
9;true,false;genre(A, G).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995097;  // std dev = 9.83e-07, 157.000 (wgt'ed) examples reached here.  /* #pos=157 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.8581489350995115;  // std dev = 2.60e-07, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | | else return -0.14185106490048766;  // std dev = 7.74e-08, 93.000 (wgt'ed) examples reached here.  /* #neg=93 */
%   else return -0.141851064900488;  // std dev = 0.000, 280.000 (wgt'ed) examples reached here.  /* #neg=280 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.7194734122109552;  // std dev = 0.000, 51.000 (wgt'ed) examples reached here.  /* #pos=51 */
%   | | else if ( actor(A) )
%   | | | then return 0.7194734122109548;  // std dev = 0.000, 106.000 (wgt'ed) examples reached here.  /* #pos=106 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 5.27e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.719473412210955;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | | else return -0.12544463852839136;  // std dev = 0.000, 107.000 (wgt'ed) examples reached here.  /* #neg=107 */
%   else return -0.125444638528392;  // std dev = 0.000, 298.000 (wgt'ed) examples reached here.  /* #neg=298 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360636;  // std dev = 1.05e-08, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( actor(A), director(B) )
%   | | then return 0.5553664367462836;  // std dev = 5.65e-07, 195.000 (wgt'ed) examples reached here.  /* #pos=195 */
%   | | else return -0.11231637819360625;  // std dev = 5.67e-08, 76.000 (wgt'ed) examples reached here.  /* #neg=76 */
%   else return -0.11231637819360697;  // std dev = 0.000, 284.000 (wgt'ed) examples reached here.  /* #neg=284 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.41751358415831064;  // std dev = 0.000, 51.000 (wgt'ed) examples reached here.  /* #pos=51 */
%   | | else return 0.40790043760930894;  // std dev = 0.070, 108.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=106 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 3.73e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( actor(B) )
%   | | | then return -0.10159632948783624;  // std dev = 4.83e-08, 93.000 (wgt'ed) examples reached here.  /* #neg=93 */
%   | | | else return 0.404203073551999;  // std dev = 0.512, 39.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=38 */
%   else return -0.10159632948783662;  // std dev = 0.000, 289.000 (wgt'ed) examples reached here.  /* #neg=289 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1025609616067648;  // std dev = 0.082, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else if ( genre(B, E) )
%   | | then return 0.32212824948691243;  // std dev = 0.012, 157.000 (wgt'ed) examples reached here.  /* #pos=157 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.323618512141031;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | | else return -0.09330515476154212;  // std dev = 0.052, 85.000 (wgt'ed) examples reached here.  /* #neg=85 */
%   else return -0.09269127618926042;  // std dev = 1.65e-07, 310.000 (wgt'ed) examples reached here.  /* #neg=310 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2563367097949748;  // std dev = 0.012, 195.000 (wgt'ed) examples reached here.  /* #pos=195 */
%   | else return -0.08695247656204888;  // std dev = 0.095, 98.000 (wgt'ed) examples reached here.  /* #neg=98 */
%   else return -0.08518475138839678;  // std dev = 1.01e-07, 289.000 (wgt'ed) examples reached here.  /* #neg=289 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07793634559365181;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( genre(B, E) )
%   | | then return 0.21040746835702895;  // std dev = 0.009, 157.000 (wgt'ed) examples reached here.  /* #pos=157 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.21129333669048114;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | | else return -0.0807627922159964;  // std dev = 0.099, 105.000 (wgt'ed) examples reached here.  /* #neg=105 */
%   else return -0.07877675473109141;  // std dev = 4.71e-08, 286.000 (wgt'ed) examples reached here.  /* #neg=286 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17572032010589775;  // std dev = 0.292, 158.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=157 */
%   | else if ( actor(A), director(B) )
%   | | then return 0.17822198610768258;  // std dev = 2.58e-08, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | else return -0.07438025363321146;  // std dev = 0.072, 87.000 (wgt'ed) examples reached here.  /* #neg=87 */
%   else return -0.07324622576333677;  // std dev = 1.20e-07, 247.000 (wgt'ed) examples reached here.  /* #neg=247 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.15152513260801428;  // std dev = 0.287, 158.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=157 */
%   | else if ( genre(A, E) )
%   | | then return -0.06767034261638004;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.15359711881227928;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | | else return -0.06957611334427348;  // std dev = 0.068, 80.000 (wgt'ed) examples reached here.  /* #neg=80 */
%   else return -0.06842697784420297;  // std dev = 0.000, 295.000 (wgt'ed) examples reached here.  /* #neg=295 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( genre(A, E) )
%   | | then return -0.15291537011056922;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0.13468878083331692;  // std dev = 0.007, 157.000 (wgt'ed) examples reached here.  /* #pos=157 */
%   | else if ( genre(A, F) )
%   | | then return -0.06352384032353876;  // std dev = 6.97e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.1346728055165541;  // std dev = 3.65e-08, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | | else return -0.06465102535840309;  // std dev = 0.053, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
%   else return -0.06419184008202591;  // std dev = 1.26e-07, 309.000 (wgt'ed) examples reached here.  /* #neg=309 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063378
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.969 seconds
Total inference time: 1.002 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064784
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.352 seconds
Refined model CLL: -0.064784


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063378
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 6.039000000000001 seconds
Total inference time: 1.002 seconds
AUC ROC: 1.0
Total revision time: 6.039000000000001
Best scored revision CLL: -0.064784


Dataset: 4_cora_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 00:00:22
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063378, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 6.039000000000001, 'Inference time': 1.002, 'parameter_0.6': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.135279, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 1.399, 'Inference time': 0.999}}


Amount of data: 0.8
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;haswordauthor(E, C).;true;true
7;true,true,true;author(F, E), title(F, D).;false;false
7;true,true,false;title(G, D), venue(G, B).;false;false
7;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
7;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
7;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, B).;false;true
8;true,true,false;title(F, D), venue(F, A).;false;false
8;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
8;true,false,false;haswordvenue(A, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
8;false,true;haswordauthor(M, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;true,true;author(F, E), venue(F, B).;true;true
9;true,true,true;samebib(F, G), venue(G, A).;false;false
9;true,true,false;author(H, E), venue(H, A).;false;false
9;true,false;haswordtitle(I, C).;true;true
9;true,false,true;title(J, I), venue(J, A).;false;false
9;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995091;  // std dev = 1.08e-06, 211.000 (wgt'ed) examples reached here.  /* #pos=211 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.19148226843284616;  // std dev = 5.715, 147.000 (wgt'ed) examples reached here.  /* #neg=98 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048752;  // std dev = 2.33e-07, 354.000 (wgt'ed) examples reached here.  /* #neg=354 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7076287666398448;  // std dev = 1.453, 214.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=211 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 5.27e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.12661866488424242;  // std dev = 5.884, 167.000 (wgt'ed) examples reached here.  /* #neg=118 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839222;  // std dev = 0.000, 373.000 (wgt'ed) examples reached here.  /* #neg=373 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14625444852017902;  // std dev = 0.232, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else if ( movie(E, A) )
%   | | then return 0.36825642454301816;  // std dev = 0.373, 372.000 (wgt'ed) examples reached here.  /* #neg=112 #pos=260 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.1123163781936062;  // std dev = 0.000, 405.000 (wgt'ed) examples reached here.  /* #neg=405 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4571844319774625;  // std dev = 1.148, 214.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=211 */
%   | else if ( genre(A, E) )
%   | | then return -0.09854026312330831;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.036044582877775164;  // std dev = 5.926, 173.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783591;  // std dev = 1.11e-08, 402.000 (wgt'ed) examples reached here.  /* #neg=402 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11439669606441563;  // std dev = 0.257, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else if ( genre(B, E) )
%   | | then return 0.3563553093277964;  // std dev = 4.77e-07, 211.000 (wgt'ed) examples reached here.  /* #pos=211 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.03092289022210861;  // std dev = 5.920, 172.000 (wgt'ed) examples reached here.  /* #neg=123 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926089;  // std dev = 1.44e-07, 401.000 (wgt'ed) examples reached here.  /* #neg=401 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2717893188411391;  // std dev = 0.930, 214.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=211 */
%   | else if ( movie(E, A) )
%   | | then return 0.017122770480754786;  // std dev = 0.438, 184.000 (wgt'ed) examples reached here.  /* #neg=135 #pos=49 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 1.23e-07, 389.000 (wgt'ed) examples reached here.  /* #neg=389 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.16076318418419486;  // std dev = 0.429, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else if ( genre(B, E) )
%   | | then return 0.22804853734865543;  // std dev = 0.000, 211.000 (wgt'ed) examples reached here.  /* #pos=211 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.03379880672593788;  // std dev = 5.869, 165.000 (wgt'ed) examples reached here.  /* #neg=116 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109143;  // std dev = 9.88e-08, 375.000 (wgt'ed) examples reached here.  /* #neg=375 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18375532960430158;  // std dev = 0.815, 214.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=211 */
%   | else if ( movie(E, B) )
%   | | then return 0.06173444617479464;  // std dev = 5.696, 155.000 (wgt'ed) examples reached here.  /* #neg=106 #pos=49 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.07324622576333768;  // std dev = 0.000, 362.000 (wgt'ed) examples reached here.  /* #neg=362 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1546279591849522;  // std dev = 0.963, 215.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=211 */
%   | else if ( genre(A, E) )
%   | | then return -0.07527188458241253;  // std dev = 5.27e-09, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.02999188196673508;  // std dev = 5.806, 157.000 (wgt'ed) examples reached here.  /* #neg=108 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420333;  // std dev = 0.000, 397.000 (wgt'ed) examples reached here.  /* #neg=397 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return -0.35702969412719515;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.1435890413826184;  // std dev = 0.000, 211.000 (wgt'ed) examples reached here.  /* #pos=211 */
%   | | else if ( genre(A, G) )
%   | | | then return -0.07019714342489465;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return 0.04063546334392242;  // std dev = 5.735, 149.000 (wgt'ed) examples reached here.  /* #neg=100 #pos=49 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.06419184008202555;  // std dev = 2.06e-07, 416.000 (wgt'ed) examples reached here.  /* #neg=416 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.139894
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.628 seconds
Total inference time: 1.007 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.978679
   AUC PR    = 0.861362
   CLL	      = -0.135779
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.811538
   F1        = 0.895966


Total scoring time: 1.553 seconds
Parameter learned model CLL: -0.135779


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 18, 0], 'true,false,true': [1.08e-06, 0, 211], 'true,false,false,true': [5.715, 98, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.33e-07, 354, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.453, 3, 211], 'true,false,true': [5.27e-09, 10, 0], 'true,false,false,true': [5.884, 118, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 373, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.232, 20, 0], 'true,false,true': [0.373, 112, 260], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 405, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.148, 3, 211], 'true,false,true': [0.0, 18, 0], 'true,false,false,true': [5.926, 124, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.11e-08, 402, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.257, 16, 0], 'true,false,true': [4.77e-07, 0, 211], 'true,false,false,true': [5.92, 123, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.44e-07, 401, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.93, 3, 211], 'true,false,true': [0.438, 135, 49], 'true,false,false': [0.0, 0, 0], 'false,true': [1.23e-07, 389, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.429, 15, 0], 'true,false,true': [0.0, 0, 211], 'true,false,false,true': [5.869, 116, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [9.88e-08, 375, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.815, 3, 211], 'true,false,true': [5.696, 106, 49], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 362, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.963, 4, 211], 'true,false,true': [5.27e-09, 19, 0], 'true,false,false,true': [5.806, 108, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 397, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true,true,false': 'genre(A, G)'}, {'true,true,true,true': [0.0, 4, 0], 'true,true,true,false': [0.0, 0, 211], 'true,true,false,true': [0.0, 9, 0], 'true,true,false,false': [5.735, 100, 49], 'true,false': [0.0, 0, 0], 'false': [2.06e-07, 416, 0]}]]
[{'': [0.21333182435491538, 1.5304769379013457e-16], 'true': [-3.0839528461809902e-18, 0.19880777753503706], 'true,false': [5.522701832448172e-15, 0.22222222222222293], 'true,false,false': [0.22222222222222293, nan], 'false': [1.5304769379013457e-16, nan]}, {'': [0.18327071681911694, -1.2382112017267162e-16], 'true': [0.009867459218933564, 0.198995579585008], 'true,false': [2.7755575615628915e-18, 0.20732188317974692], 'true,false,false': [0.20732188317974692, nan], 'false': [-1.2382112017267162e-16, nan]}, {'': [0.14482364492460867, -1.75442650804963e-17], 'true': [0.0026875161074798952, 0.13895917643851857], 'true,false': [0.13895917643851857, nan], 'false': [-1.75442650804963e-17, nan]}, {'': [0.13760143628622884, 1.2372634702290302e-16], 'true': [0.006158073287007748, 0.18542773237098287], 'true,false': [0.0, 0.2030137993250698], 'true,false,false': [0.2030137993250698, nan], 'false': [1.2372634702290302e-16, nan]}, {'': [0.11719382535984452, 5.205035626671557e-17], 'true': [0.004123271151804643, 0.11769210489967144], 'true,false': [1.077600357550863e-15, 0.2037249864791786], 'true,false,false': [0.2037249864791786, nan], 'false': [5.205035626671557e-17, nan]}, {'': [0.10682532941776382, 3.881499520540393e-17], 'true': [0.004045024479530317, 0.19149148150674566], 'true,false': [0.19149148150674566, nan], 'false': [3.881499520540393e-17, nan]}, {'': [0.10090924410008174, 2.6053233644537006e-17], 'true': [0.012262338714058045, 0.10091036123863692], 'true,false': [-3.114938533545463e-16, 0.20877869605142366], 'true,false,false': [0.20877869605142366, nan], 'false': [2.6053233644537006e-17, nan]}, {'': [0.09333940444803485, -6.747211751865592e-17], 'true': [0.003105541606030137, 0.2092854818865667], 'true,false': [0.2092854818865667, nan], 'false': [-6.747211751865592e-17, nan]}, {'': [0.09363722398082013, -1.1857293764258598e-16], 'true': [0.0043132850249155245, 0.19258413400161742], 'true,false': [1.460819769243627e-18, 0.2146943080855197], 'true,false,false': [0.2146943080855197, nan], 'false': [-1.1857293764258598e-16, nan]}, {'': [0.09352240476810804, 1.0248212535001446e-16], 'true': [0.09352240476810804, nan], 'true,true': [0.004575933712966183, 0.208798502629313], 'true,true,false': [-7.709882115452476e-19, 0.22071077879374715], 'true,true,true': [0.0, -1.1365316271044256e-16]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, E).;true;true
9;true,true;genre(A, F).;true;true
9;true,false;genre(A, G).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995091;  // std dev = 1.08e-06, 211.000 (wgt'ed) examples reached here.  /* #pos=211 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.8581489350995122;  // std dev = 1.69e-07, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.14185106490048766;  // std dev = 7.88e-08, 115.000 (wgt'ed) examples reached here.  /* #neg=115 */
%   else return -0.1418510649004874;  // std dev = 2.81e-07, 383.000 (wgt'ed) examples reached here.  /* #neg=383 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( actor(A) )
%   | | then return 0.7194734122109571;  // std dev = 0.000, 211.000 (wgt'ed) examples reached here.  /* #pos=211 */
%   | | else return -0.12544463852839138;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 7.45e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.7194734122109547;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.12544463852839133;  // std dev = 0.000, 114.000 (wgt'ed) examples reached here.  /* #neg=114 */
%   else return -0.12544463852839222;  // std dev = 0.000, 377.000 (wgt'ed) examples reached here.  /* #neg=377 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.5553664367462832;  // std dev = 3.77e-07, 260.000 (wgt'ed) examples reached here.  /* #pos=260 */
%   | else return -0.11231637819360617;  // std dev = 9.31e-08, 120.000 (wgt'ed) examples reached here.  /* #neg=120 */
%   else return -0.11231637819360617;  // std dev = 0.000, 410.000 (wgt'ed) examples reached here.  /* #neg=410 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4146920434221331;  // std dev = 0.597, 212.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=211 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783635;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.41751358415831047;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.10239488223958793;  // std dev = 0.079, 99.000 (wgt'ed) examples reached here.  /* #neg=99 */
%   else return -0.1015963294878359;  // std dev = 2.27e-07, 404.000 (wgt'ed) examples reached here.  /* #neg=404 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.10319571866899284;  // std dev = 0.152, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else if ( genre(B, E) )
%   | | then return 0.3213268467577851;  // std dev = 4.50e-07, 211.000 (wgt'ed) examples reached here.  /* #pos=211 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.32071184716014944;  // std dev = 2.98e-08, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.09324065255986869;  // std dev = 0.073, 119.000 (wgt'ed) examples reached here.  /* #neg=119 */
%   else return -0.09269127618926078;  // std dev = 1.69e-07, 386.000 (wgt'ed) examples reached here.  /* #neg=386 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.25551276437103787;  // std dev = 0.003, 260.000 (wgt'ed) examples reached here.  /* #pos=260 */
%   | else return -0.08928577146723585;  // std dev = 0.234, 116.000 (wgt'ed) examples reached here.  /* #neg=116 */
%   else return -0.08518475138839678;  // std dev = 1.26e-07, 370.000 (wgt'ed) examples reached here.  /* #neg=370 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( female(B) )
%   | | then return -0.07772332164989883;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.11226759756337387;  // std dev = 0.060, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( genre(B, E) )
%   | | then return 0.2100671934314297;  // std dev = 0.000, 211.000 (wgt'ed) examples reached here.  /* #pos=211 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.20970127651609063;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.07987877214220102;  // std dev = 0.109, 128.000 (wgt'ed) examples reached here.  /* #neg=128 */
%   else return -0.07877675473109143;  // std dev = 2.18e-07, 383.000 (wgt'ed) examples reached here.  /* #neg=383 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.17727287799634447;  // std dev = 0.002, 260.000 (wgt'ed) examples reached here.  /* #pos=260 */
%   | else return -0.07556122623570494;  // std dev = 0.222, 147.000 (wgt'ed) examples reached here.  /* #neg=147 */
%   else return -0.0732462257633377;  // std dev = 0.000, 382.000 (wgt'ed) examples reached here.  /* #neg=382 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.15292255475906377;  // std dev = 0.000, 72.000 (wgt'ed) examples reached here.  /* #pos=72 */
%   | | else if ( actor(A) )
%   | | | then return 0.15292255475906336;  // std dev = 1.44e-07, 139.000 (wgt'ed) examples reached here.  /* #pos=139 */
%   | | | else return -0.18579813512223736;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(A, E) )
%   | | then return -0.06617419837684811;  // std dev = 0.004, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.15268427765243575;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.06928683001697854;  // std dev = 0.097, 119.000 (wgt'ed) examples reached here.  /* #neg=119 */
%   else return -0.06842697784420332;  // std dev = 0.000, 386.000 (wgt'ed) examples reached here.  /* #neg=386 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( genre(A, E) )
%   | | then return -0.15931339132159927;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0.13414652027214202;  // std dev = 0.000, 211.000 (wgt'ed) examples reached here.  /* #pos=211 */
%   | else if ( genre(A, F) )
%   | | then return -0.06236887671136787;  // std dev = 0.003, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.1339605147622089;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.06462618111399739;  // std dev = 0.075, 105.000 (wgt'ed) examples reached here.  /* #neg=105 */
%   else return -0.06419184008202575;  // std dev = 1.60e-07, 348.000 (wgt'ed) examples reached here.  /* #neg=348 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063311
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.091 seconds
Total inference time: 0.969 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064811
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.526 seconds
Refined model CLL: -0.064811


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063311
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 6.798 seconds
Total inference time: 0.969 seconds
AUC ROC: 1.0
Total revision time: 6.798
Best scored revision CLL: -0.064811


Dataset: 4_cora_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 00:00:32
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063311, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 6.798, 'Inference time': 0.969, 'parameter_0.8': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.139894, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 1.628, 'Inference time': 1.007}}


Amount of data: 1.0
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;haswordauthor(E, C).;true;true
7;true,true,true;author(F, E), title(F, D).;false;false
7;true,true,false;title(G, D), venue(G, B).;false;false
7;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
7;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
7;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, B).;false;true
8;true,true,false;title(F, D), venue(F, A).;false;false
8;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
8;true,false,false;haswordvenue(A, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
8;false,true;haswordauthor(M, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;true,true;author(F, E), venue(F, B).;true;true
9;true,true,true;samebib(F, G), venue(G, A).;false;false
9;true,true,false;author(H, E), venue(H, A).;false;false
9;true,false;haswordtitle(I, C).;true;true
9;true,false,true;title(J, I), venue(J, A).;false;false
9;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048774;  // std dev = 1.49e-08, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995086;  // std dev = 1.08e-06, 267.000 (wgt'ed) examples reached here.  /* #pos=267 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.13776978818008206;  // std dev = 6.519, 211.000 (wgt'ed) examples reached here.  /* #neg=152 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048763;  // std dev = 8.43e-08, 490.000 (wgt'ed) examples reached here.  /* #neg=490 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7009037847221806;  // std dev = 2.047, 273.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=267 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.1370195673951945;  // std dev = 6.443, 199.000 (wgt'ed) examples reached here.  /* #neg=140 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839235;  // std dev = 0.000, 496.000 (wgt'ed) examples reached here.  /* #neg=496 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.13897227408744411;  // std dev = 0.219, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else if ( movie(E, A) )
%   | | then return 0.36299068825935654;  // std dev = 0.373, 473.000 (wgt'ed) examples reached here.  /* #neg=147 #pos=326 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360588;  // std dev = 0.000, 481.000 (wgt'ed) examples reached here.  /* #neg=481 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4645414686712757;  // std dev = 0.945, 269.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=267 */
%   | else if ( genre(A, E) )
%   | | then return -0.09918903307012324;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.06122824418755001;  // std dev = 6.429, 197.000 (wgt'ed) examples reached here.  /* #neg=138 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783547;  // std dev = 1.51e-08, 484.000 (wgt'ed) examples reached here.  /* #neg=484 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12785841255028152;  // std dev = 0.351, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else if ( genre(B, E) )
%   | | then return 0.3574188252376312;  // std dev = 4.54e-07, 267.000 (wgt'ed) examples reached here.  /* #pos=267 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.02874776322046497;  // std dev = 6.525, 212.000 (wgt'ed) examples reached here.  /* #neg=153 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926132;  // std dev = 0.000, 472.000 (wgt'ed) examples reached here.  /* #neg=472 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.26246346520088604;  // std dev = 1.595, 276.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=267 */
%   | else if ( movie(E, A) )
%   | | then return 0.015767430165331126;  // std dev = 0.436, 225.000 (wgt'ed) examples reached here.  /* #neg=166 #pos=59 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 1.38e-07, 462.000 (wgt'ed) examples reached here.  /* #neg=462 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11852468984101797;  // std dev = 0.369, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else if ( genre(B, E) )
%   | | then return 0.23032674184879737;  // std dev = 0.000, 267.000 (wgt'ed) examples reached here.  /* #pos=267 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.04458073041181841;  // std dev = 6.415, 195.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109186;  // std dev = 0.000, 466.000 (wgt'ed) examples reached here.  /* #neg=466 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18493918967363768;  // std dev = 0.955, 271.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=267 */
%   | else if ( movie(E, B) )
%   | | then return 0.022625144248475292;  // std dev = 6.463, 210.000 (wgt'ed) examples reached here.  /* #neg=151 #pos=59 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.07324622576333682;  // std dev = 1.78e-07, 517.000 (wgt'ed) examples reached here.  /* #neg=517 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.15948152143587932;  // std dev = 0.850, 270.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=267 */
%   | else if ( genre(A, E) )
%   | | then return -0.07492081811212885;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.04959601071413698;  // std dev = 6.331, 184.000 (wgt'ed) examples reached here.  /* #neg=125 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420355;  // std dev = 0.000, 503.000 (wgt'ed) examples reached here.  /* #neg=503 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return -0.3647336469685584;  // std dev = 1.05e-08, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return 0.14415321789851987;  // std dev = 1.23e-07, 267.000 (wgt'ed) examples reached here.  /* #pos=267 */
%   | | else if ( genre(A, G) )
%   | | | then return -0.06989077516446876;  // std dev = 3.73e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return -1.3688890080573856E-5;  // std dev = 6.513, 210.000 (wgt'ed) examples reached here.  /* #neg=151 #pos=59 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.06419184008202541;  // std dev = 2.40e-07, 477.000 (wgt'ed) examples reached here.  /* #neg=477 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.134121
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.926 seconds
Total inference time: 1.036 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.978388
   AUC PR    = 0.863056
   CLL	      = -0.131031
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.819018
   F1        = 0.900506


Total scoring time: 1.734 seconds
Parameter learned model CLL: -0.131031


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [1.49e-08, 24, 0], 'true,false,true': [1.08e-06, 0, 267], 'true,false,false,true': [6.519, 152, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [8.43e-08, 490, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [2.047, 6, 267], 'true,false,true': [0.0, 18, 0], 'true,false,false,true': [6.443, 140, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 496, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.219, 21, 0], 'true,false,true': [0.373, 147, 326], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 481, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.945, 2, 267], 'true,false,true': [0.0, 10, 0], 'true,false,false,true': [6.429, 138, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.51e-08, 484, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.351, 21, 0], 'true,false,true': [4.54e-07, 0, 267], 'true,false,false,true': [6.525, 153, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 472, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [1.595, 9, 267], 'true,false,true': [0.436, 166, 59], 'true,false,false': [0.0, 0, 0], 'false,true': [1.38e-07, 462, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.369, 19, 0], 'true,false,true': [0.0, 0, 267], 'true,false,false,true': [6.415, 136, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 466, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.955, 4, 267], 'true,false,true': [6.463, 151, 59], 'true,false,false': [0.0, 0, 0], 'false,true': [1.78e-07, 517, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.85, 3, 267], 'true,false,true': [5.27e-09, 12, 0], 'true,false,false,true': [6.331, 125, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 503, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true,true,false': 'genre(A, G)'}, {'true,true,true,true': [1.05e-08, 6, 0], 'true,true,true,false': [1.23e-07, 0, 267], 'true,true,false,true': [3.73e-09, 10, 0], 'true,true,false,false': [6.513, 151, 59], 'true,false': [0.0, 0, 0], 'false': [2.4e-07, 477, 0]}]]
[{'': [0.22767892573134024, 1.4500872158369393e-17], 'true': [9.25185853854297e-18, 0.2168729539048714], 'true,false': [4.364382346990877e-15, 0.20143303160306425], 'true,false,false': [0.20143303160306425, nan], 'false': [1.4500872158369393e-17, nan]}, {'': [0.18020735875193428, -1.3788253692925331e-16], 'true': [0.015344982395697112, 0.19651915644695986], 'true,false': [0.0, 0.20858059139920737], 'true,false,false': [0.20858059139920737, nan], 'false': [-1.3788253692925331e-16, nan]}, {'': [0.14372043006020585, -1.107914868648805e-17], 'true': [0.0022737177148899703, 0.13928916530527552], 'true,false': [0.13928916530527552, nan], 'false': [-1.107914868648805e-17, nan]}, {'': [0.13074379699773467, 2.2938492244321414e-16], 'true': [0.0033181619800613333, 0.20084470785750266], 'true,false': [-1.3877787807814458e-18, 0.20979669664253375], 'true,false,false': [0.20979669664253375, nan], 'false': [2.2938492244321414e-16, nan]}, {'': [0.11558413448912895, -9.40866970021319e-18], 'true': [0.005877017783170954, 0.115544033667264], 'true,false': [7.717505369678991e-16, 0.2008499466002148], 'true,false,false': [0.2008499466002148, nan], 'false': [-9.40866970021319e-18, nan]}, {'': [0.10564756626671935, 4.133297840595821e-17], 'true': [0.009219706944794024, 0.19040532978579597], 'true,false': [0.19040532978579597, nan], 'false': [4.133297840595821e-17, nan]}, {'': [0.09669033739622414, -1.4294717055259525e-17], 'true': [0.007175728978791254, 0.0974823958266524], 'true,false': [-5.655068589850985e-16, 0.21101906640367954], 'true,false,false': [0.21101906640367954, nan], 'false': [-1.4294717055259525e-17, nan]}, {'': [0.09521425457910576, 6.098710618830648e-17], 'true': [0.0033678363324173744, 0.19889636703138694], 'true,false': [0.19889636703138694, nan], 'false': [6.098710618830648e-17, nan]}, {'': [0.09130279239787015, -1.2007183407476843e-16], 'true': [0.0026770694752238713, 0.20538869392568146], 'true,false': [2.3129646346357427e-18, 0.21783435727788394], 'true,false,false': [0.21783435727788394, nan], 'false': [-1.2007183407476843e-16, nan]}, {'': [0.09381057787352591, 1.2103060226521622e-16], 'true': [0.09381057787352591, nan], 'true,true': [0.005566467786462494, 0.19304735517209026], 'true,true,false': [1.3877787807814458e-18, 0.20201814058957035], 'true,true,true': [1.850371707708594e-17, 5.655068589850985e-17]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, E).;true;true
9;true,true;genre(A, F).;true;true
9;true,false;genre(A, G).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995086;  // std dev = 1.08e-06, 267.000 (wgt'ed) examples reached here.  /* #pos=267 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.8581489350995125;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.14185106490048813;  // std dev = 0.000, 165.000 (wgt'ed) examples reached here.  /* #neg=165 */
%   else return -0.1418510649004875;  // std dev = 1.74e-07, 479.000 (wgt'ed) examples reached here.  /* #neg=479 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.7194734122109543;  // std dev = 2.23e-07, 95.000 (wgt'ed) examples reached here.  /* #pos=95 */
%   | | else if ( actor(A) )
%   | | | then return 0.7194734122109566;  // std dev = 0.000, 172.000 (wgt'ed) examples reached here.  /* #pos=172 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 7.45e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.7194734122109543;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.12544463852839144;  // std dev = 0.000, 169.000 (wgt'ed) examples reached here.  /* #neg=169 */
%   else return -0.12544463852839235;  // std dev = 0.000, 522.000 (wgt'ed) examples reached here.  /* #neg=522 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360636;  // std dev = 9.13e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else if ( actor(B) )
%   | | then return -0.1123163781936062;  // std dev = 9.88e-08, 146.000 (wgt'ed) examples reached here.  /* #neg=146 */
%   | | else return 0.5553664367462833;  // std dev = 6.08e-07, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   else return -0.11231637819360582;  // std dev = 0.000, 500.000 (wgt'ed) examples reached here.  /* #neg=500 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.41751358415831147;  // std dev = 0.000, 95.000 (wgt'ed) examples reached here.  /* #pos=95 */
%   | | else return 0.4086145570672358;  // std dev = 0.067, 175.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=172 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783635;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.4175135841583105;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.10325486212608986;  // std dev = 0.135, 143.000 (wgt'ed) examples reached here.  /* #neg=143 */
%   else return -0.1015963294878357;  // std dev = 2.76e-07, 437.000 (wgt'ed) examples reached here.  /* #neg=437 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.10367607716656795;  // std dev = 0.105, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | else if ( genre(B, E) )
%   | | then return 0.32196273782986795;  // std dev = 0.015, 267.000 (wgt'ed) examples reached here.  /* #pos=267 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.3207118471601497;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.09395287355099917;  // std dev = 0.126, 157.000 (wgt'ed) examples reached here.  /* #neg=157 */
%   else return -0.09269127618926139;  // std dev = 0.000, 485.000 (wgt'ed) examples reached here.  /* #neg=485 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.2558713477632642;  // std dev = 0.015, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.08849359863657441;  // std dev = 0.187, 176.000 (wgt'ed) examples reached here.  /* #neg=176 */
%   else return -0.08518475138839678;  // std dev = 1.44e-07, 509.000 (wgt'ed) examples reached here.  /* #neg=509 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08366467830982346;  // std dev = 0.073, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | else if ( genre(B, E) )
%   | | then return 0.21038629726778413;  // std dev = 0.012, 267.000 (wgt'ed) examples reached here.  /* #pos=267 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.2096418558774466;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.07956902291080405;  // std dev = 0.109, 154.000 (wgt'ed) examples reached here.  /* #neg=154 */
%   else return -0.078776754731092;  // std dev = 0.000, 487.000 (wgt'ed) examples reached here.  /* #neg=487 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.17745867233268406;  // std dev = 0.011, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.07295391382929317;  // std dev = 0.042, 165.000 (wgt'ed) examples reached here.  /* #neg=165 */
%   else return -0.07324622576333709;  // std dev = 9.88e-08, 468.000 (wgt'ed) examples reached here.  /* #neg=468 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.15117106228969215;  // std dev = 0.367, 269.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=267 */
%   | else if ( genre(A, E) )
%   | | then return -0.06723265885222808;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.15262154845302983;  // std dev = 5.37e-08, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.0693698893951653;  // std dev = 0.112, 165.000 (wgt'ed) examples reached here.  /* #neg=165 */
%   else return -0.06842697784420348;  // std dev = 0.000, 462.000 (wgt'ed) examples reached here.  /* #neg=462 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( genre(A, E) )
%   | | then return -0.12253775628857427;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.13451513727527606;  // std dev = 0.008, 267.000 (wgt'ed) examples reached here.  /* #pos=267 */
%   | else if ( genre(A, F) )
%   | | then return -0.0631370445873595;  // std dev = 3.73e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.1339115375235363;  // std dev = 4.21e-08, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.0646085167720951;  // std dev = 0.075, 122.000 (wgt'ed) examples reached here.  /* #neg=122 */
%   else return -0.0641918400820254;  // std dev = 2.43e-07, 485.000 (wgt'ed) examples reached here.  /* #neg=485 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.06333
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.618 seconds
Total inference time: 1.061 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064665
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.593 seconds
Refined model CLL: -0.064665


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.06333
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 7.871 seconds
Total inference time: 1.061 seconds
AUC ROC: 1.0
Total revision time: 7.871
Best scored revision CLL: -0.064665


Dataset: 4_cora_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 00:00:42
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.06333, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 7.871, 'Inference time': 1.061, 'parameter_1.0': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.134121, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 1.926, 'Inference time': 1.036}}


Starting fold 2

Target train facts examples: 870
Target train pos examples: 324
Target train neg examples: 10813

Target test facts examples: 208
Target test pos	 examples: 58
Target test neg examples: 3423

Amount of data: 0.2
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;haswordauthor(E, C).;true;true
7;true,true,true;author(F, E), title(F, D).;false;false
7;true,true,false;title(G, D), venue(G, B).;false;false
7;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
7;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
7;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, B).;false;true
8;true,true,false;title(F, D), venue(F, A).;false;false
8;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
8;true,false,false;haswordvenue(A, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
8;false,true;haswordauthor(M, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;true,true;author(F, E), venue(F, B).;true;true
9;true,true,true;samebib(F, G), venue(G, A).;false;false
9;true,true,false;author(H, E), venue(H, A).;false;false
9;true,false;haswordtitle(I, C).;true;true
9;true,false,true;title(J, I), venue(J, A).;false;false
9;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995122;  // std dev = 1.69e-07, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.20698614440183793;  // std dev = 3.125, 43.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=15 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048763;  // std dev = 8.30e-08, 91.000 (wgt'ed) examples reached here.  /* #neg=91 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109547;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.12515735607357287;  // std dev = 3.254, 51.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=15 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839147;  // std dev = 0.000, 81.000 (wgt'ed) examples reached here.  /* #neg=81 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( movie(E, A) )
%   | | then return 0.3536694550604204;  // std dev = 0.387, 95.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=64 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.1123163781936062;  // std dev = 7.88e-08, 98.000 (wgt'ed) examples reached here.  /* #neg=98 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.45371195528601044;  // std dev = 0.669, 50.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=49 */
%   | else if ( genre(A, E) )
%   | | then return -0.1015963294878363;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.0720578178006037;  // std dev = 3.196, 47.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=15 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783628;  // std dev = 3.73e-09, 100.000 (wgt'ed) examples reached here.  /* #neg=100 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926096;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.357782043630046;  // std dev = 8.94e-08, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.022279500744024964;  // std dev = 3.279, 53.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=15 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.092691276189261;  // std dev = 3.65e-08, 94.000 (wgt'ed) examples reached here.  /* #neg=94 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2803379673247774;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | else if ( movie(E, A) )
%   | | then return 0.04573564216864373;  // std dev = 0.453, 50.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=15 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839682;  // std dev = 5.67e-08, 104.000 (wgt'ed) examples reached here.  /* #neg=104 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.17030859217179262;  // std dev = 0.200, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.22738719256233847;  // std dev = 6.66e-08, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.09179242055903815;  // std dev = 3.084, 41.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=15 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109164;  // std dev = 4.59e-08, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1899229410502013;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | else if ( movie(E, B) )
%   | | then return -0.002878483195198547;  // std dev = 3.257, 54.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=15 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.07324622576333707;  // std dev = 0.000, 97.000 (wgt'ed) examples reached here.  /* #neg=97 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.16240603007966234;  // std dev = 5.37e-08, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | else if ( genre(A, E) )
%   | | then return -0.07576351571620094;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.027047595215859442;  // std dev = 3.196, 47.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=15 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420264;  // std dev = 5.02e-09, 110.000 (wgt'ed) examples reached here.  /* #neg=110 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.14150571331035341;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | else if ( genre(A, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.051111734181298864;  // std dev = 3.125, 43.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=15 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.06419184008202626;  // std dev = 0.000, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.138253
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 0.941 seconds
Total inference time: 0.935 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.97214
   AUC PR    = 0.822639
   CLL	      = -0.141625
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.765625
   F1        = 0.867257


Total scoring time: 0.952 seconds
Parameter learned model CLL: -0.141625


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 3, 0], 'true,false,true': [1.69e-07, 0, 49], 'true,false,false,true': [3.125, 28, 15], 'true,false,false,false': [0.0, 0, 0], 'false,true': [8.3e-08, 91, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 49], 'true,false,true': [0.0, 5, 0], 'true,false,false,true': [3.254, 36, 15], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 81, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 2, 0], 'true,false,true': [0.387, 31, 64], 'true,false,false': [0.0, 0, 0], 'false,true': [7.88e-08, 98, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.669, 1, 49], 'true,false,true': [0.0, 3, 0], 'true,false,false,true': [3.196, 32, 15], 'true,false,false,false': [0.0, 0, 0], 'false,true': [3.73e-09, 100, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [8.94e-08, 0, 49], 'true,false,false,true': [3.279, 38, 15], 'true,false,false,false': [0.0, 0, 0], 'false,true': [3.65e-08, 94, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 49], 'true,false,true': [0.453, 35, 15], 'true,false,false': [0.0, 0, 0], 'false,true': [5.67e-08, 104, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.2, 3, 0], 'true,false,true': [6.66e-08, 0, 49], 'true,false,false,true': [3.084, 26, 15], 'true,false,false,false': [0.0, 0, 0], 'false,true': [4.59e-08, 82, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 49], 'true,false,true': [3.257, 39, 15], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 97, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [5.37e-08, 0, 49], 'true,false,true': [0.0, 2, 0], 'true,false,false,true': [3.196, 32, 15], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.02e-09, 110, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true,true,false': 'genre(A, G)'}, {'true,true,true,true': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 49], 'true,true,false,true': [0.0, 0, 0], 'true,true,false,false': [3.125, 28, 15], 'true,false': [0.0, 0, 0], 'false': [0.0, 103, 0]}]]
[{'': [0.21983379501384973, 7.564156871072495e-17], 'true': [0.0, 0.21172022684309946], 'true,false': [5.800348863347756e-16, 0.22714981070849058], 'true,false,false': [0.22714981070849058, nan], 'false': [7.564156871072495e-17, nan]}, {'': [0.19821831955025807, -2.1930331350620375e-17], 'true': [-5.800348863347756e-16, 0.194182245916359], 'true,false': [0.0, 0.20761245674740508], 'true,false,false': [0.20761245674740508, nan], 'false': [-2.1930331350620375e-17, nan]}, {'': [0.15103953892590297, 6.344131569286608e-17], 'true': [0.0, 0.14974214762485796], 'true,false': [0.14974214762485796, nan], 'false': [6.344131569286608e-17, nan]}, {'': [0.14588161086898122, 1.3322676295501878e-17], 'true': [0.008946347431850334, 0.20595610417483085], 'true,false': [-1.1564823173178713e-18, 0.21729289271163404], 'true,false,false': [0.21729289271163404, nan], 'false': [1.3322676295501878e-17, nan]}, {'': [0.1329723067886865, 1.4173059888831785e-17], 'true': [0.0, 0.13353561443121711], 'true,false': [1.6313481178165566e-16, 0.20291918832324637], 'true,false,false': [0.20291918832324637, nan], 'false': [1.4173059888831785e-17, nan]}, {'': [0.11746996250569593, 3.0958142032816866e-17], 'true': [-1.9032394707859825e-16, 0.20534937124143418], 'true,false': [0.20534937124143418, nan], 'false': [3.0958142032816866e-17, nan]}, {'': [0.11064592802304075, 2.572467983887558e-17], 'true': [0.013281716005505118, 0.11025122454871787], 'true,false': [9.06304509898087e-17, 0.23200475907198057], 'true,false,false': [0.23200475907198057, nan], 'false': [2.572467983887558e-17, nan]}, {'': [0.11223433416214282, -6.867358915207154e-18], 'true': [-9.063045098980869e-18, 0.19639264820687571], 'true,false': [0.19639264820687571, nan], 'false': [-6.867358915207154e-18, nan]}, {'': [0.10928769560463761, 2.5232341468753557e-17], 'true': [5.890979314337566e-17, 0.20883761916735372], 'true,false': [0.0, 0.21729289271163454], 'true,false,false': [0.21729289271163454, nan], 'false': [2.5232341468753557e-17, nan]}, {'': [0.10820192565393164, -1.6168296475123638e-17], 'true': [0.10820192565393164, nan], 'true,true': [-4.0783702945413916e-17, 0.227149810708491], 'true,true,false': [nan, 0.227149810708491], 'true,true,true': [nan, -4.0783702945413916e-17]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995122;  // std dev = 1.69e-07, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | else if ( actor(B) )
%   | | | then return -0.1418510649004877;  // std dev = 2.79e-08, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return -0.14185106490048763;  // std dev = 8.16e-08, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.7194734122109543;  // std dev = 5.96e-08, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else return 0.6946228813068563;  // std dev = 0.143, 34.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=33 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.7194734122109542;  // std dev = 5.16e-08, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.13098327957341474;  // std dev = 0.152, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   else return -0.12544463852839138;  // std dev = 0.000, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14927102622479058;  // std dev = 0.091, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( actor(B) )
%   | | then return -0.11176535246868945;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | else return 0.5585260364360581;  // std dev = 0.024, 64.000 (wgt'ed) examples reached here.  /* #pos=64 */
%   else return -0.11231637819360621;  // std dev = 7.30e-08, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.42082162137742707;  // std dev = 0.020, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | else if ( genre(A, E) )
%   | | then return -0.0982726246079131;  // std dev = 1.86e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( actor(B) )
%   | | | then return -0.10114199106745318;  // std dev = 1.18e-08, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | | else return 0.4167453830307312;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return -0.10159632948783631;  // std dev = 0.000, 108.000 (wgt'ed) examples reached here.  /* #neg=108 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08990140628477349;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.3229582615343769;  // std dev = 0.018, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.32019109073529695;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.10508799485731908;  // std dev = 0.377, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   else return -0.09269127618926101;  // std dev = 3.33e-08, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.25670620454460336;  // std dev = 0.016, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | else if ( actor(A), director(B) )
%   | | then return 0.25481687236277845;  // std dev = 2.58e-08, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( actor(A) )
%   | | | then return -0.0838746573009757;  // std dev = 2.17e-08, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | | | else return -0.14428249467431006;  // std dev = 0.334, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.08518475138839682;  // std dev = 5.16e-08, 89.000 (wgt'ed) examples reached here.  /* #neg=89 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.15103833732974004;  // std dev = 0.192, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.21084173135583267;  // std dev = 0.014, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.20950665550495345;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.1035333754997673;  // std dev = 0.457, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   else return -0.07877675473109158;  // std dev = 5.96e-08, 104.000 (wgt'ed) examples reached here.  /* #neg=104 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17789181534675527;  // std dev = 0.012, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | else if ( director(B), actor(A) )
%   | | then return 0.17691233515471866;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( actor(A) )
%   | | | then return -0.07055220454567164;  // std dev = 0.000, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | | | else return -0.1282257350294998;  // std dev = 0.292, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.07324622576333707;  // std dev = 0.000, 85.000 (wgt'ed) examples reached here.  /* #neg=85 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.15118102043104353;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else return 0.12763868857937566;  // std dev = 0.109, 35.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=33 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( actor(B) )
%   | | | then return -0.0657174929796521;  // std dev = 0.007, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | | else return 0.15260413791542035;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return -0.06842697784420265;  // std dev = 4.59e-08, 96.000 (wgt'ed) examples reached here.  /* #neg=96 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13660588866375334;  // std dev = 0.019, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | else if ( director(B), actor(A) )
%   | | then return 0.13389794317739417;  // std dev = 1.83e-08, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( female(A) )
%   | | | then return -0.06212271488184292;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | | else return -0.08590400484695149;  // std dev = 0.321, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   else return -0.06419184008202626;  // std dev = 0.000, 108.000 (wgt'ed) examples reached here.  /* #neg=108 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063075
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.36 seconds
Total inference time: 0.967 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.066679
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.889 seconds
Refined model CLL: -0.066679


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063075
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 4.142 seconds
Total inference time: 0.967 seconds
AUC ROC: 1.0
Total revision time: 4.142
Best scored revision CLL: -0.066679


Dataset: 4_cora_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 00:00:49
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063075, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 4.142, 'Inference time': 0.967, 'parameter_0.2': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.138253, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 0.941, 'Inference time': 0.935}}


Amount of data: 0.4
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;haswordauthor(E, C).;true;true
7;true,true,true;author(F, E), title(F, D).;false;false
7;true,true,false;title(G, D), venue(G, B).;false;false
7;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
7;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
7;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, B).;false;true
8;true,true,false;title(F, D), venue(F, A).;false;false
8;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
8;true,false,false;haswordvenue(A, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
8;false,true;haswordauthor(M, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;true,true;author(F, E), venue(F, B).;true;true
9;true,true,true;samebib(F, G), venue(G, A).;false;false
9;true,true,false;author(H, E), venue(H, A).;false;false
9;true,false;haswordtitle(I, C).;true;true
9;true,false,true;title(J, I), venue(J, A).;false;false
9;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995112;  // std dev = 4.46e-07, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.16767274462332082;  // std dev = 4.237, 84.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=26 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048827;  // std dev = 0.000, 175.000 (wgt'ed) examples reached here.  /* #neg=175 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7033797350540146;  // std dev = 1.183, 105.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=103 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.18783955141042463;  // std dev = 4.107, 74.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=26 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839155;  // std dev = 0.000, 185.000 (wgt'ed) examples reached here.  /* #neg=185 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( movie(E, A) )
%   | | then return 0.3796977577194372;  // std dev = 0.372, 181.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=129 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360663;  // std dev = 0.000, 198.000 (wgt'ed) examples reached here.  /* #neg=198 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.45830490481782815;  // std dev = 0.667, 104.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=103 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783627;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.060678016386250117;  // std dev = 4.214, 82.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=26 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783649;  // std dev = 0.000, 178.000 (wgt'ed) examples reached here.  /* #neg=178 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12567568513429683;  // std dev = 0.181, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(B, E) )
%   | | then return 0.35445092478666135;  // std dev = 0.000, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.06519959792480891;  // std dev = 4.163, 78.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=26 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.0926912761892606;  // std dev = 8.69e-08, 184.000 (wgt'ed) examples reached here.  /* #neg=184 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.27285898150169313;  // std dev = 0.541, 104.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=103 */
%   | else if ( movie(E, A) )
%   | | then return 0.060555271124309314;  // std dev = 0.464, 79.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=26 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 6.83e-08, 169.000 (wgt'ed) examples reached here.  /* #neg=169 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.0873580196690337;  // std dev = 3.73e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( genre(B, E) )
%   | | then return 0.2267347609222173;  // std dev = 8.94e-08, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.044143985742038205;  // std dev = 4.150, 77.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=26 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109147;  // std dev = 7.74e-08, 184.000 (wgt'ed) examples reached here.  /* #neg=184 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18471591010575084;  // std dev = 0.490, 104.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=103 */
%   | else if ( movie(E, B) )
%   | | then return -0.007255803992177818;  // std dev = 4.265, 94.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=26 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.07324622576333664;  // std dev = 1.20e-07, 201.000 (wgt'ed) examples reached here.  /* #neg=201 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.162697616689824;  // std dev = 0.000, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   | else if ( genre(A, E) )
%   | | then return -0.08010342383961727;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.03210782202838566;  // std dev = 4.163, 78.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=26 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420262;  // std dev = 5.59e-09, 169.000 (wgt'ed) examples reached here.  /* #neg=169 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.14173065315197286;  // std dev = 5.96e-08, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   | | else if ( genre(A, G) )
%   | | | then return -0.07439587934262402;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return -0.00917609256877156;  // std dev = 4.270, 87.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=26 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.06419184008202626;  // std dev = 0.000, 183.000 (wgt'ed) examples reached here.  /* #neg=183 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.137393
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.172 seconds
Total inference time: 0.985 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.975301
   AUC PR    = 0.846426
   CLL	      = -0.141781
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.79845
   F1        = 0.887931


Total scoring time: 1.119 seconds
Parameter learned model CLL: -0.141781


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 11, 0], 'true,false,true': [4.46e-07, 0, 103], 'true,false,false,true': [4.237, 58, 26], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 175, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.183, 2, 103], 'true,false,true': [0.0, 6, 0], 'true,false,false,true': [4.107, 48, 26], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 185, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 7, 0], 'true,false,true': [0.372, 52, 129], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 198, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.667, 1, 103], 'true,false,true': [0.0, 6, 0], 'true,false,false,true': [4.214, 56, 26], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 178, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.181, 6, 0], 'true,false,true': [0.0, 0, 103], 'true,false,false,true': [4.163, 52, 26], 'true,false,false,false': [0.0, 0, 0], 'false,true': [8.69e-08, 184, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.541, 1, 103], 'true,false,true': [0.464, 53, 26], 'true,false,false': [0.0, 0, 0], 'false,true': [6.83e-08, 169, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [3.73e-09, 7, 0], 'true,false,true': [8.94e-08, 0, 103], 'true,false,false,true': [4.15, 51, 26], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.74e-08, 184, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.49, 1, 103], 'true,false,true': [4.265, 68, 26], 'true,false,false': [0.0, 0, 0], 'false,true': [1.2e-07, 201, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 103], 'true,false,true': [0.0, 4, 0], 'true,false,false,true': [4.163, 52, 26], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.59e-09, 169, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true,true,false': 'genre(A, G)'}, {'true,true,true,true': [0.0, 0, 0], 'true,true,true,false': [5.96e-08, 0, 103], 'true,true,false,true': [0.0, 9, 0], 'true,true,false,false': [4.27, 61, 26], 'true,false': [0.0, 0, 0], 'false': [0.0, 183, 0]}]]
[{'': [0.22704315886134493, -1.9032394707859825e-16], 'true': [-1.0092936587501423e-17, 0.21396093682976786], 'true,false': [1.9315724855614373e-15, 0.21371882086167915], 'true,false,false': [0.21371882086167915, nan], 'false': [-1.9032394707859825e-16, nan]}, {'': [0.17299009881027486, -1.9203857723245952e-17], 'true': [0.01333883188823792, 0.2176197578026124], 'true,false': [-2.3129646346357427e-18, 0.22790357925492968], 'true,false,false': [0.22790357925492968, nan], 'false': [-1.9203857723245952e-17, nan]}, {'': [0.14190308734317186, -2.6914497566670462e-17], 'true': [-1.982541115402065e-18, 0.13837751284722238], 'true,false': [0.13837751284722238, nan], 'false': [-2.6914497566670462e-17, nan]}, {'': [0.137032538947368, -8.607347044846719e-17], 'true': [0.004281143577362132, 0.20344684960274445], 'true,false': [0.0, 0.21653777513384875], 'true,false,false': [0.21653777513384875, nan], 'false': [-8.607347044846719e-17, nan]}, {'': [0.11664975526411799, 4.102998134484274e-17], 'true': [0.005439856167266816, 0.116281817688324], 'true,false': [-1.7246182906798548e-16, 0.22222222222222265], 'true,false,false': [0.22222222222222265, nan], 'false': [4.102998134484274e-17, nan]}, {'': [0.10541229865010895, 2.7591341440388505e-17], 'true': [0.002812698445096146, 0.2148649464087553], 'true,false': [0.2148649464087553, nan], 'false': [2.7591341440388505e-17, nan]}, {'': [0.10195175626753757, 3.2582632244433945e-17], 'true': [1.982541115402065e-18, 0.10383194355543053], 'true,false': [7.760782308059347e-17, 0.2236464833867426], 'true,false,false': [0.2236464833867426, nan], 'false': [3.2582632244433945e-17, nan]}, {'': [0.10225484672175145, 7.180546925436336e-17], 'true': [0.0023101767906937684, 0.19347472401717664], 'true,false': [0.19347472401717664, nan], 'false': [7.180546925436336e-17, nan]}, {'': [0.09852134170246309, 3.087602494519666e-17], 'true': [-7.329627735389383e-17, 0.21196636508142436], 'true,false': [0.0, 0.222222222222222], 'true,false,false': [0.222222222222222, nan], 'false': [3.087602494519666e-17, nan]}, {'': [0.0979380819184583, -4.853433987432378e-18], 'true': [0.0979380819184583, nan], 'true,true': [3.4492365813597093e-17, 0.19025602760815183], 'true,true,false': [0.0, 0.20953890870656622], 'true,true,true': [nan, 3.4492365813597093e-17]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, E).;true;true
9;true,false;genre(A, G).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995112;  // std dev = 4.46e-07, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.8581489350995118;  // std dev = 1.46e-07, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | | else return -0.14185106490048766;  // std dev = 6.50e-08, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
%   else return -0.1418510649004883;  // std dev = 0.000, 180.000 (wgt'ed) examples reached here.  /* #neg=180 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.7194734122109551;  // std dev = 0.000, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | else return 0.6934759337266667;  // std dev = 0.146, 65.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=63 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | | else return -0.12544463852839163;  // std dev = 0.000, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
%   else return -0.12544463852839158;  // std dev = 0.000, 189.000 (wgt'ed) examples reached here.  /* #neg=189 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14920476483813308;  // std dev = 0.128, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( director(B), actor(A) )
%   | | then return 0.5584969449469367;  // std dev = 0.036, 129.000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | | else return -0.11231637819360628;  // std dev = 4.47e-08, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
%   else return -0.11231637819360657;  // std dev = 0.000, 194.000 (wgt'ed) examples reached here.  /* #neg=194 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.4167524542773898;  // std dev = 5.96e-08, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | else return 0.41337742091045654;  // std dev = 0.077, 64.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=63 */
%   | else if ( genre(A, E) )
%   | | then return -0.09827849652467134;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.41675245427738977;  // std dev = 5.16e-08, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | | else return -0.10159632948783619;  // std dev = 4.21e-08, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
%   else return -0.10159632948783653;  // std dev = 0.000, 205.000 (wgt'ed) examples reached here.  /* #neg=205 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( female(B) )
%   | | then return -0.08990634742184192;  // std dev = 3.73e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return -0.13544443983123147;  // std dev = 0.158, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.3241269674388227;  // std dev = 0.032, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.3201958838730619;  // std dev = 2.98e-08, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | | else return -0.09269127618926107;  // std dev = 0.000, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   else return -0.09269127618926055;  // std dev = 9.31e-08, 205.000 (wgt'ed) examples reached here.  /* #neg=205 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.0845983408608652;  // std dev = 0.014, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
%   | else return 0.25696290811583783;  // std dev = 0.030, 129.000 (wgt'ed) examples reached here.  /* #pos=129 */
%   else return -0.08518475138839678;  // std dev = 7.30e-08, 183.000 (wgt'ed) examples reached here.  /* #neg=183 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07460192181367288;  // std dev = 0.005, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( genre(B, E) )
%   | | then return 0.21149510049786263;  // std dev = 0.024, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.20915431382804162;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | | else return -0.08016192476087874;  // std dev = 0.048, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
%   else return -0.07877675473109147;  // std dev = 7.74e-08, 185.000 (wgt'ed) examples reached here.  /* #neg=185 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.17574342751846575;  // std dev = 3.65e-08, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | else return 0.16583923977186282;  // std dev = 0.080, 65.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=63 */
%   | else if ( director(B), actor(A) )
%   | | then return 0.17665380450498136;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | else return -0.0743600001543925;  // std dev = 0.046, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
%   else return -0.07324622576333667;  // std dev = 1.14e-07, 194.000 (wgt'ed) examples reached here.  /* #neg=194 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( actor(A) )
%   | | then return 0.1548509212746329;  // std dev = 0.025, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   | | else return -0.3161662415311871;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(A, E) )
%   | | then return -0.06560513749443549;  // std dev = 0.003, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.15240794778106273;  // std dev = 1.83e-08, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | | else return -0.06952497031929598;  // std dev = 0.043, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
%   else return -0.06842697784420262;  // std dev = 7.38e-08, 170.000 (wgt'ed) examples reached here.  /* #neg=170 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.13284311443456995;  // std dev = 0.000, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | else return 0.13134727133785037;  // std dev = 0.048, 64.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=63 */
%   | else if ( genre(A, E) )
%   | | then return -0.060871274281101014;  // std dev = 0.003, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( actor(B) )
%   | | | then return -0.06401123110424255;  // std dev = 0.000, 71.000 (wgt'ed) examples reached here.  /* #neg=71 */
%   | | | else return 0.13374473537706955;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   else return -0.06419184008202626;  // std dev = 0.000, 211.000 (wgt'ed) examples reached here.  /* #neg=211 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063669
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.681 seconds
Total inference time: 0.981 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.065912
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.149 seconds
Refined model CLL: -0.065912


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063669
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 5.121 seconds
Total inference time: 0.981 seconds
AUC ROC: 1.0
Total revision time: 5.121
Best scored revision CLL: -0.065912


Dataset: 4_cora_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 00:00:57
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063669, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 5.121, 'Inference time': 0.981, 'parameter_0.4': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.137393, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 1.172, 'Inference time': 0.985}}


Amount of data: 0.6
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;haswordauthor(E, C).;true;true
7;true,true,true;author(F, E), title(F, D).;false;false
7;true,true,false;title(G, D), venue(G, B).;false;false
7;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
7;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
7;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, B).;false;true
8;true,true,false;title(F, D), venue(F, A).;false;false
8;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
8;true,false,false;haswordvenue(A, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
8;false,true;haswordauthor(M, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;true,true;author(F, E), venue(F, B).;true;true
9;true,true,true;samebib(F, G), venue(G, A).;false;false
9;true,true,false;author(H, E), venue(H, A).;false;false
9;true,false;haswordtitle(I, C).;true;true
9;true,false,true;title(J, I), venue(J, A).;false;false
9;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995098;  // std dev = 9.54e-07, 154.000 (wgt'ed) examples reached here.  /* #pos=154 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.1706489350995114;  // std dev = 5.244, 128.000 (wgt'ed) examples reached here.  /* #neg=88 #pos=40 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048785;  // std dev = 9.42e-08, 299.000 (wgt'ed) examples reached here.  /* #neg=299 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7033284813051088;  // std dev = 1.449, 157.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=154 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.13683260147917728;  // std dev = 5.289, 133.000 (wgt'ed) examples reached here.  /* #neg=93 #pos=40 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839194;  // std dev = 0.000, 279.000 (wgt'ed) examples reached here.  /* #neg=279 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1572671293698374;  // std dev = 0.174, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( movie(E, A) )
%   | | then return 0.35258655910907166;  // std dev = 0.383, 288.000 (wgt'ed) examples reached here.  /* #neg=94 #pos=194 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360692;  // std dev = 0.000, 261.000 (wgt'ed) examples reached here.  /* #neg=261 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4671923030940927;  // std dev = 0.668, 155.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=154 */
%   | else if ( genre(A, E) )
%   | | then return -0.09756632158892396;  // std dev = 7.45e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.09100046966742535;  // std dev = 5.164, 120.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=40 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783663;  // std dev = 0.000, 306.000 (wgt'ed) examples reached here.  /* #neg=306 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11913791299080342;  // std dev = 0.252, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( genre(B, E) )
%   | | then return 0.358643575231874;  // std dev = 4.13e-07, 154.000 (wgt'ed) examples reached here.  /* #pos=154 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.05802996997728118;  // std dev = 5.225, 126.000 (wgt'ed) examples reached here.  /* #neg=86 #pos=40 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926044;  // std dev = 1.21e-07, 266.000 (wgt'ed) examples reached here.  /* #neg=266 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2809205720851941;  // std dev = 2.23e-07, 154.000 (wgt'ed) examples reached here.  /* #pos=154 */
%   | else if ( movie(E, A) )
%   | | then return -0.01675499545326849;  // std dev = 0.424, 165.000 (wgt'ed) examples reached here.  /* #neg=125 #pos=40 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 1.01e-07, 283.000 (wgt'ed) examples reached here.  /* #neg=283 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.0947415305730763;  // std dev = 0.230, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else if ( genre(B, E) )
%   | | then return 0.22779210307740522;  // std dev = 0.000, 154.000 (wgt'ed) examples reached here.  /* #pos=154 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.037904775778305276;  // std dev = 5.271, 131.000 (wgt'ed) examples reached here.  /* #neg=91 #pos=40 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109144;  // std dev = 5.16e-08, 264.000 (wgt'ed) examples reached here.  /* #neg=264 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18396865910724494;  // std dev = 0.685, 156.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=154 */
%   | else if ( movie(E, B) )
%   | | then return 0.008489990457138205;  // std dev = 5.337, 149.000 (wgt'ed) examples reached here.  /* #neg=109 #pos=40 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.07324622576333696;  // std dev = 9.88e-08, 297.000 (wgt'ed) examples reached here.  /* #neg=297 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1602494775099458;  // std dev = 0.499, 155.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=154 */
%   | else if ( genre(A, E) )
%   | | then return -0.07281213299690376;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.04083466359379638;  // std dev = 5.225, 126.000 (wgt'ed) examples reached here.  /* #neg=86 #pos=40 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420292;  // std dev = 0.000, 282.000 (wgt'ed) examples reached here.  /* #neg=282 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return -0.37347487484005915;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return 0.14272602612595853;  // std dev = 0.000, 154.000 (wgt'ed) examples reached here.  /* #pos=154 */
%   | | else if ( genre(A, G) )
%   | | | then return -0.06804687350875402;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | else return 0.05700944995595493;  // std dev = 5.131, 117.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=40 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.06419184008202593;  // std dev = 1.24e-07, 307.000 (wgt'ed) examples reached here.  /* #neg=307 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.133885
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.364 seconds
Total inference time: 0.992 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.975955
   AUC PR    = 0.847146
   CLL	      = -0.138382
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.793814
   F1        = 0.885057


Total scoring time: 1.339 seconds
Parameter learned model CLL: -0.138382


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 5, 0], 'true,false,true': [9.54e-07, 0, 154], 'true,false,false,true': [5.244, 88, 40], 'true,false,false,false': [0.0, 0, 0], 'false,true': [9.42e-08, 299, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.449, 3, 154], 'true,false,true': [0.0, 9, 0], 'true,false,false,true': [5.289, 93, 40], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 279, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.174, 10, 0], 'true,false,true': [0.383, 94, 194], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 261, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.668, 1, 154], 'true,false,true': [7.45e-09, 11, 0], 'true,false,false,true': [5.164, 80, 40], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 306, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.252, 13, 0], 'true,false,true': [4.13e-07, 0, 154], 'true,false,false,true': [5.225, 86, 40], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.21e-07, 266, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [2.23e-07, 0, 154], 'true,false,true': [0.424, 125, 40], 'true,false,false': [0.0, 0, 0], 'false,true': [1.01e-07, 283, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.23, 15, 0], 'true,false,true': [0.0, 0, 154], 'true,false,false,true': [5.271, 91, 40], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.16e-08, 264, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.685, 2, 154], 'true,false,true': [5.337, 109, 40], 'true,false,false': [0.0, 0, 0], 'false,true': [9.88e-08, 297, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.499, 1, 154], 'true,false,true': [0.0, 8, 0], 'true,false,false,true': [5.225, 86, 40], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 282, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true,true,false': 'genre(A, G)'}, {'true,true,true,true': [0.0, 5, 0], 'true,true,true,false': [0.0, 0, 154], 'true,true,false,true': [0.0, 14, 0], 'true,true,false,false': [5.131, 77, 40], 'true,false': [0.0, 0, 0], 'false': [1.24e-07, 307, 0]}]]
[{'': [0.21903871602180922, 2.9704963869569404e-17], 'true': [-2.7755575615628915e-18, 0.21467733011418438], 'true,false': [5.905809751772262e-15, 0.21484375000000128], 'true,false,false': [0.21484375000000128, nan], 'false': [2.9704963869569404e-17, nan]}, {'': [0.187303146223671, -7.640244470538712e-17], 'true': [0.013380484756332895, 0.2010548589569316], 'true,false': [0.0, 0.21030018655661653], 'true,false,false': [0.21030018655661653, nan], 'false': [-7.640244470538712e-17, nan]}, {'': [0.1501751835841652, -8.847754372491668e-17], 'true': [0.0030308550469611505, 0.14656118099879156], 'true,false': [0.14656118099879156, nan], 'false': [-8.847754372491668e-17, nan]}, {'': [0.13420278186822793, -5.224578939412501e-17], 'true': [0.0028774439334191292, 0.2062973688726034], 'true,false': [5.046468293750712e-18, 0.2222222222222216], 'true,false,false': [0.2222222222222216, nan], 'false': [-5.224578939412501e-17, nan]}, {'': [0.11974443854320545, 5.5093774154331073e-17], 'true': [0.004894443362640384, 0.11987188250112053], 'true,false': [1.107339328457299e-15, 0.2166792642983122], 'true,false,false': [0.2166792642983122, nan], 'false': [5.5093774154331073e-17, nan]}, {'': [0.11529282274919815, 3.6092055924210034e-17], 'true': [3.2297397080004555e-16, 0.18012185700025587], 'true,false': [0.18012185700025587, nan], 'false': [3.6092055924210034e-17, nan]}, {'': [0.10393418724980492, 1.0092936587501423e-17], 'true': [0.0035338411030718425, 0.1064512386966016], 'true,false': [0.0, 0.21210885146553357], 'true,false,false': [0.21210885146553357, nan], 'false': [1.0092936587501423e-17, nan]}, {'': [0.10261840593314134, 3.289549702593056e-17], 'true': [0.003004475370788489, 0.19116244442956365], 'true,false': [0.19116244442956365, nan], 'false': [3.289549702593056e-17, nan]}, {'': [0.09962633169327505, -4.015700301835673e-17], 'true': [0.0016042734824888404, 0.20446823443656797], 'true,false': [-8.673617379884035e-19, 0.21667926429831108], 'true,false,false': [0.21667926429831108, nan], 'false': [-4.015700301835673e-17, nan]}, {'': [0.09759913163019969, 4.990579068347609e-17], 'true': [0.09759913163019969, nan], 'true,true': [0.00811584965079538, 0.2024453020338021], 'true,true,false': [-9.912705577010326e-19, 0.22499817371612169], 'true,true,true': [0.0, -4.0371746350005693e-17]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, E).;true;true
9;true,true;genre(A, F).;true;true
9;true,false;genre(A, G).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995098;  // std dev = 9.54e-07, 154.000 (wgt'ed) examples reached here.  /* #pos=154 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.8581489350995117;  // std dev = 2.46e-07, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | | else return -0.14185106490048763;  // std dev = 8.69e-08, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
%   else return -0.14185106490048777;  // std dev = 1.40e-07, 312.000 (wgt'ed) examples reached here.  /* #neg=312 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.7194734122109547;  // std dev = 0.000, 60.000 (wgt'ed) examples reached here.  /* #pos=60 */
%   | | else return 0.7018709528205512;  // std dev = 0.121, 96.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=94 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 7.45e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.719473412210955;  // std dev = 0.000, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | | else return -0.12544463852839144;  // std dev = 0.000, 87.000 (wgt'ed) examples reached here.  /* #neg=87 */
%   else return -0.12544463852839194;  // std dev = 0.000, 279.000 (wgt'ed) examples reached here.  /* #neg=279 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.5574704433250662;  // std dev = 0.030, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else return -0.11426634461685212;  // std dev = 0.157, 115.000 (wgt'ed) examples reached here.  /* #neg=115 */
%   else return -0.11231637819360667;  // std dev = 0.000, 323.000 (wgt'ed) examples reached here.  /* #neg=323 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.4170019871702803;  // std dev = 0.000, 60.000 (wgt'ed) examples reached here.  /* #pos=60 */
%   | | else return 0.414693131769878;  // std dev = 0.064, 95.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=94 */
%   | else if ( genre(A, E) )
%   | | then return -0.1014184854663692;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.417001987170279;  // std dev = 7.30e-08, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | | else return -0.10141848546636917;  // std dev = 2.98e-08, 85.000 (wgt'ed) examples reached here.  /* #neg=85 */
%   else return -0.1015963294878366;  // std dev = 0.000, 260.000 (wgt'ed) examples reached here.  /* #neg=260 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( actor(B) )
%   | | then return -0.09254234893270871;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else return -0.2809905776964093;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.3230206733836773;  // std dev = 0.026, 154.000 (wgt'ed) examples reached here.  /* #pos=154 */
%   | | else if ( actor(B) )
%   | | | then return -0.09254234893270862;  // std dev = 2.11e-08, 75.000 (wgt'ed) examples reached here.  /* #neg=75 */
%   | | | else return 0.3203650306507714;  // std dev = 0.000, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   else return -0.09269127618926047;  // std dev = 1.48e-07, 272.000 (wgt'ed) examples reached here.  /* #neg=272 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( actor(A) )
%   | | then return 0.2567482379423504;  // std dev = 0.023, 154.000 (wgt'ed) examples reached here.  /* #pos=154 */
%   | | else return -0.22784074797851725;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( actor(B) )
%   | | then return -0.08505834367607558;  // std dev = 2.11e-08, 117.000 (wgt'ed) examples reached here.  /* #neg=117 */
%   | | else return 0.25493557813695505;  // std dev = 5.58e-08, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   else return -0.08518475138839678;  // std dev = 1.01e-07, 278.000 (wgt'ed) examples reached here.  /* #neg=278 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( female(B) )
%   | | then return -0.07866819986587745;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return -0.12330103766118483;  // std dev = 0.122, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(B, E) )
%   | | then return 0.21087107722362003;  // std dev = 0.020, 154.000 (wgt'ed) examples reached here.  /* #pos=154 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.2095905251817402;  // std dev = 0.000, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | | else return -0.07949927411616252;  // std dev = 0.074, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
%   else return -0.07877675473109143;  // std dev = 3.33e-08, 311.000 (wgt'ed) examples reached here.  /* #neg=311 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.17771945781705006;  // std dev = 0.018, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else return -0.07695487317580224;  // std dev = 0.181, 110.000 (wgt'ed) examples reached here.  /* #neg=110 */
%   else return -0.07324622576333685;  // std dev = 1.13e-07, 265.000 (wgt'ed) examples reached here.  /* #neg=265 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( actor(A) )
%   | | then return 0.15338851207876017;  // std dev = 0.016, 154.000 (wgt'ed) examples reached here.  /* #pos=154 */
%   | | else return -0.16129276623692068;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(A, E) )
%   | | then return -0.06582940009020816;  // std dev = 0.004, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( actor(B) )
%   | | | then return -0.06805006739355011;  // std dev = 4.53e-08, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */
%   | | | else return 0.1525544032401198;  // std dev = 0.000, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   else return -0.06842697784420299;  // std dev = 0.000, 295.000 (wgt'ed) examples reached here.  /* #neg=295 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( genre(A, E) )
%   | | then return -0.14064618388052594;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0.13451030699457234;  // std dev = 0.014, 154.000 (wgt'ed) examples reached here.  /* #pos=154 */
%   | else if ( genre(A, F) )
%   | | then return -0.06287572293879737;  // std dev = 0.004, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.13385910815834792;  // std dev = 0.000, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | | else return -0.06491989887107495;  // std dev = 0.089, 84.000 (wgt'ed) examples reached here.  /* #neg=84 */
%   else return -0.06419184008202598;  // std dev = 1.12e-07, 297.000 (wgt'ed) examples reached here.  /* #neg=297 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063391
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.066 seconds
Total inference time: 1.008 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064982
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.35 seconds
Refined model CLL: -0.064982


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063391
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 6.119 seconds
Total inference time: 1.008 seconds
AUC ROC: 1.0
Total revision time: 6.119
Best scored revision CLL: -0.064982


Dataset: 4_cora_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 00:01:05
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063391, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 6.119, 'Inference time': 1.008, 'parameter_0.6': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.133885, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 1.364, 'Inference time': 0.992}}


Amount of data: 0.8
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;haswordauthor(E, C).;true;true
7;true,true,true;author(F, E), title(F, D).;false;false
7;true,true,false;title(G, D), venue(G, B).;false;false
7;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
7;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
7;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, B).;false;true
8;true,true,false;title(F, D), venue(F, A).;false;false
8;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
8;true,false,false;haswordvenue(A, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
8;false,true;haswordauthor(M, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;true,true;author(F, E), venue(F, B).;true;true
9;true,true,true;samebib(F, G), venue(G, A).;false;false
9;true,true,false;author(H, E), venue(H, A).;false;false
9;true,false;haswordtitle(I, C).;true;true
9;true,false,true;title(J, I), venue(J, A).;false;false
9;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995091;  // std dev = 1.08e-06, 209.000 (wgt'ed) examples reached here.  /* #pos=209 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.1937194048981707;  // std dev = 5.764, 149.000 (wgt'ed) examples reached here.  /* #neg=99 #pos=50 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048735;  // std dev = 2.97e-07, 394.000 (wgt'ed) examples reached here.  /* #neg=394 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.695894303818231;  // std dev = 2.041, 215.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=209 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 7.45e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.11067213318208931;  // std dev = 6.009, 180.000 (wgt'ed) examples reached here.  /* #neg=130 #pos=50 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839227;  // std dev = 0.000, 425.000 (wgt'ed) examples reached here.  /* #neg=425 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14008749051700478;  // std dev = 0.192, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else if ( movie(E, A) )
%   | | then return 0.365054209566539;  // std dev = 0.376, 375.000 (wgt'ed) examples reached here.  /* #neg=116 #pos=259 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360646;  // std dev = 0.000, 355.000 (wgt'ed) examples reached here.  /* #neg=355 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.46390721972107113;  // std dev = 0.943, 211.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=209 */
%   | else if ( genre(A, E) )
%   | | then return -0.09908943237875247;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.07239686610124119;  // std dev = 5.846, 158.000 (wgt'ed) examples reached here.  /* #neg=108 #pos=50 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783606;  // std dev = 9.41e-09, 381.000 (wgt'ed) examples reached here.  /* #neg=381 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11483011043392044;  // std dev = 0.257, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else if ( genre(B, E) )
%   | | then return 0.3582415129924795;  // std dev = 1.46e-07, 209.000 (wgt'ed) examples reached here.  /* #pos=209 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.029694583824433792;  // std dev = 5.969, 174.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=50 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.0926912761892608;  // std dev = 1.59e-07, 389.000 (wgt'ed) examples reached here.  /* #neg=389 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.26797615820164183;  // std dev = 1.199, 214.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=209 */
%   | else if ( movie(E, A) )
%   | | then return 0.005942043478565181;  // std dev = 0.442, 187.000 (wgt'ed) examples reached here.  /* #neg=137 #pos=50 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 1.21e-07, 367.000 (wgt'ed) examples reached here.  /* #neg=367 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1510348932132047;  // std dev = 0.441, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else if ( genre(B, E) )
%   | | then return 0.22983867795894497;  // std dev = 1.63e-07, 209.000 (wgt'ed) examples reached here.  /* #pos=209 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.010188596557890874;  // std dev = 6.022, 182.000 (wgt'ed) examples reached here.  /* #neg=132 #pos=50 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109141;  // std dev = 1.07e-07, 384.000 (wgt'ed) examples reached here.  /* #neg=384 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18273974739309065;  // std dev = 0.944, 213.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=209 */
%   | else if ( movie(E, B) )
%   | | then return 0.03521017808781224;  // std dev = 5.875, 178.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=50 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.0732462257633372;  // std dev = 3.65e-08, 389.000 (wgt'ed) examples reached here.  /* #neg=389 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.15578193909910498;  // std dev = 0.968, 213.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=209 */
%   | else if ( genre(A, E) )
%   | | then return -0.07370067918103815;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.025937979616763786;  // std dev = 5.919, 167.000 (wgt'ed) examples reached here.  /* #neg=117 #pos=50 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.0684269778442034;  // std dev = 0.000, 422.000 (wgt'ed) examples reached here.  /* #neg=422 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return -0.35858655286704816;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.1446018779113728;  // std dev = 0.000, 209.000 (wgt'ed) examples reached here.  /* #pos=209 */
%   | | else if ( genre(A, G) )
%   | | | then return -0.06882462129931045;  // std dev = 3.23e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return 0.029995203888625147;  // std dev = 5.879, 162.000 (wgt'ed) examples reached here.  /* #neg=112 #pos=50 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.0641918400820257;  // std dev = 1.70e-07, 361.000 (wgt'ed) examples reached here.  /* #neg=361 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.129853
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.595 seconds
Total inference time: 0.963 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.97757
   AUC PR    = 0.857271
   CLL	      = -0.134045
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.80695
   F1        = 0.893162


Total scoring time: 1.702 seconds
Parameter learned model CLL: -0.134045


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 15, 0], 'true,false,true': [1.08e-06, 0, 209], 'true,false,false,true': [5.764, 99, 50], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.97e-07, 394, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [2.041, 6, 209], 'true,false,true': [7.45e-09, 13, 0], 'true,false,false,true': [6.009, 130, 50], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 425, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.192, 16, 0], 'true,false,true': [0.376, 116, 259], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 355, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.943, 2, 209], 'true,false,true': [0.0, 12, 0], 'true,false,false,true': [5.846, 108, 50], 'true,false,false,false': [0.0, 0, 0], 'false,true': [9.41e-09, 381, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.257, 16, 0], 'true,false,true': [1.46e-07, 0, 209], 'true,false,false,true': [5.969, 124, 50], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.59e-07, 389, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [1.199, 5, 209], 'true,false,true': [0.442, 137, 50], 'true,false,false': [0.0, 0, 0], 'false,true': [1.21e-07, 367, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.441, 17, 0], 'true,false,true': [1.63e-07, 0, 209], 'true,false,false,true': [6.022, 132, 50], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.07e-07, 384, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.944, 4, 209], 'true,false,true': [5.875, 128, 50], 'true,false,false': [0.0, 0, 0], 'false,true': [3.65e-08, 389, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.968, 4, 209], 'true,false,true': [0.0, 18, 0], 'true,false,false,true': [5.919, 117, 50], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 422, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true,true,false': 'genre(A, G)'}, {'true,true,true,true': [1.05e-08, 3, 0], 'true,true,true,false': [0.0, 0, 209], 'true,true,false,true': [3.23e-09, 6, 0], 'true,true,false,false': [5.879, 112, 50], 'true,false': [0.0, 0, 0], 'false': [1.7e-07, 361, 0]}]]
[{'': [0.2122203135219869, 2.2317173489927e-16], 'true': [-1.4802973661668754e-17, 0.20006398052495622], 'true,false': [5.575550653811312e-15, 0.22296292959776648], 'true,false,false': [0.22296292959776648, nan], 'false': [2.2317173489927e-16, nan]}, {'': [0.1904452891840519, -1.3165938927319503e-16], 'true': [0.01936643994875407, 0.1906065152989532], 'true,false': [4.270088556250602e-18, 0.20061728395061984], 'true,false,false': [0.20061728395061984, nan], 'false': [-1.3165938927319503e-16, nan]}, {'': [0.14591704315675605, -3.002293249690564e-17], 'true': [0.0023137040390364336, 0.14160245605728933], 'true,false': [0.14160245605728933, nan], 'false': [-3.002293249690564e-17, nan]}, {'': [0.13315570997695894, 8.975031275184993e-17], 'true': [0.004218430027096002, 0.20297174042049632], 'true,false': [-1.1564823173178713e-18, 0.2163114885435037], 'true,false,false': [0.2163114885435037, nan], 'false': [8.975031275184993e-17, nan]}, {'': [0.11919201514195174, 6.507219784435365e-17], 'true': [0.004113651601333829, 0.11979483569822168], 'true,false': [1.0199178025264596e-16, 0.20478266613819415], 'true,false,false': [0.20478266613819415, nan], 'false': [6.507219784435365e-17, nan]}, {'': [0.11169738166182183, 3.993172731621816e-17], 'true': [0.0067127884442929565, 0.195197680079278], 'true,false': [0.195197680079278, nan], 'false': [3.993172731621816e-17, nan]}, {'': [0.10396207175972406, 3.0068540250264654e-17], 'true': [0.011435029921153113, 0.1047501536946723], 'true,false': [1.2748972531580745e-16, 0.19925129815239673], 'true,false,false': [0.19925129815239673, nan], 'false': [3.0068540250264654e-17, nan]}, {'': [0.09595996758027911, 3.424852518123876e-18], 'true': [0.004186337838406453, 0.19392235139021133], 'true,false': [0.19392235139021133, nan], 'false': [3.424852518123876e-18, nan]}, {'': [0.09561769641934767, -1.241766037021502e-16], 'true': [0.004398181977583845, 0.19022299711645627], 'true,false': [-7.709882115452476e-18, 0.2097601204776075], 'true,false,false': [0.2097601204776075, nan], 'false': [-1.241766037021502e-16, nan]}, {'': [0.09612728739108875, 7.996066105333537e-17], 'true': [0.09612728739108875, nan], 'true,true': [0.003532296196088665, 0.20609762383920777], 'true,true,false': [1.734723475976807e-18, 0.21338210638622251], 'true,true,true': [3.700743415417188e-17, -2.4223047810003414e-16]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, E).;true;true
9;true,true;genre(A, F).;true;true
9;true,false;genre(A, G).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995091;  // std dev = 1.08e-06, 209.000 (wgt'ed) examples reached here.  /* #pos=209 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.8581489350995122;  // std dev = 1.46e-07, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | | | else return -0.14185106490048766;  // std dev = 7.30e-08, 116.000 (wgt'ed) examples reached here.  /* #neg=116 */
%   else return -0.1418510649004874;  // std dev = 2.78e-07, 382.000 (wgt'ed) examples reached here.  /* #neg=382 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.7194734122109541;  // std dev = 2.53e-07, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   | | else if ( actor(A) )
%   | | | then return 0.7194734122109556;  // std dev = 0.000, 127.000 (wgt'ed) examples reached here.  /* #pos=127 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 5.27e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.7194734122109547;  // std dev = 0.000, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | | | else return -0.12544463852839136;  // std dev = 0.000, 108.000 (wgt'ed) examples reached here.  /* #neg=108 */
%   else return -0.12544463852839224;  // std dev = 0.000, 400.000 (wgt'ed) examples reached here.  /* #neg=400 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360635;  // std dev = 1.39e-08, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else if ( director(B), actor(A) )
%   | | then return 0.5553664367462835;  // std dev = 5.46e-07, 259.000 (wgt'ed) examples reached here.  /* #pos=259 */
%   | | else return -0.1123163781936062;  // std dev = 8.16e-08, 109.000 (wgt'ed) examples reached here.  /* #neg=109 */
%   else return -0.11231637819360642;  // std dev = 0.000, 361.000 (wgt'ed) examples reached here.  /* #neg=361 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( actor(A) )
%   | | then return 0.4175135841583129;  // std dev = 0.000, 209.000 (wgt'ed) examples reached here.  /* #pos=209 */
%   | | else return -0.10159632948783627;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783631;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else if ( actor(B) )
%   | | | then return -0.10159632948783635;  // std dev = 0.000, 118.000 (wgt'ed) examples reached here.  /* #neg=118 */
%   | | | else return 0.41751358415831047;  // std dev = 0.000, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   else return -0.1015963294878364;  // std dev = 5.96e-08, 340.000 (wgt'ed) examples reached here.  /* #neg=340 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926096;  // std dev = 7.45e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else if ( genre(B, E) )
%   | | then return 0.3207118471601492;  // std dev = 3.77e-07, 209.000 (wgt'ed) examples reached here.  /* #pos=209 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.3207118471601495;  // std dev = 0.000, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | | | else return -0.09359609024618243;  // std dev = 0.075, 119.000 (wgt'ed) examples reached here.  /* #neg=119 */
%   else return -0.09269127618926075;  // std dev = 1.67e-07, 382.000 (wgt'ed) examples reached here.  /* #neg=382 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.25517224256948795;  // std dev = 3.26e-07, 259.000 (wgt'ed) examples reached here.  /* #pos=259 */
%   | else return -0.08548528572810188;  // std dev = 0.050, 139.000 (wgt'ed) examples reached here.  /* #neg=139 */
%   else return -0.08518475138839678;  // std dev = 1.21e-07, 373.000 (wgt'ed) examples reached here.  /* #neg=373 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07875494742103964;  // std dev = 7.45e-09, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else if ( genre(B, E) )
%   | | then return 0.20975771563253495;  // std dev = 2.92e-07, 209.000 (wgt'ed) examples reached here.  /* #pos=209 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.209757715632536;  // std dev = 0.000, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | | | else return -0.08043667531528045;  // std dev = 0.103, 134.000 (wgt'ed) examples reached here.  /* #neg=134 */
%   else return -0.07877675473109155;  // std dev = 9.42e-08, 423.000 (wgt'ed) examples reached here.  /* #neg=423 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.17709649774527714;  // std dev = 1.40e-07, 259.000 (wgt'ed) examples reached here.  /* #pos=259 */
%   | else return -0.07370725593266736;  // std dev = 0.062, 138.000 (wgt'ed) examples reached here.  /* #neg=138 */
%   else return -0.07324622576333713;  // std dev = 6.99e-08, 354.000 (wgt'ed) examples reached here.  /* #neg=354 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1527438580936717;  // std dev = 0.000, 209.000 (wgt'ed) examples reached here.  /* #pos=209 */
%   | else if ( genre(A, E) )
%   | | then return -0.06837983727605433;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.15274385809367094;  // std dev = 3.94e-08, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | | | else return -0.06892795323511901;  // std dev = 0.058, 116.000 (wgt'ed) examples reached here.  /* #neg=116 */
%   else return -0.06842697784420318;  // std dev = 0.000, 344.000 (wgt'ed) examples reached here.  /* #neg=344 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( genre(A, E) )
%   | | then return -0.07877538463097686;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.13400703000801095;  // std dev = 1.15e-07, 209.000 (wgt'ed) examples reached here.  /* #pos=209 */
%   | else if ( genre(A, F) )
%   | | then return -0.0641502462934641;  // std dev = 2.63e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.13400703000801137;  // std dev = 0.000, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | | | else return -0.06457719004779983;  // std dev = 0.055, 127.000 (wgt'ed) examples reached here.  /* #neg=127 */
%   else return -0.06419184008202557;  // std dev = 2.01e-07, 407.000 (wgt'ed) examples reached here.  /* #neg=407 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063375
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.296 seconds
Total inference time: 0.967 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064433
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.492 seconds
Refined model CLL: -0.064433


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063375
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 7.085 seconds
Total inference time: 0.967 seconds
AUC ROC: 1.0
Total revision time: 7.085
Best scored revision CLL: -0.064433


Dataset: 4_cora_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 00:01:15
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063375, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 7.085, 'Inference time': 0.967, 'parameter_0.8': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.129853, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 1.595, 'Inference time': 0.963}}


Amount of data: 1.0
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;haswordauthor(E, C).;true;true
7;true,true,true;author(F, E), title(F, D).;false;false
7;true,true,false;title(G, D), venue(G, B).;false;false
7;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
7;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
7;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, B).;false;true
8;true,true,false;title(F, D), venue(F, A).;false;false
8;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
8;true,false,false;haswordvenue(A, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
8;false,true;haswordauthor(M, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;true,true;author(F, E), venue(F, B).;true;true
9;true,true,true;samebib(F, G), venue(G, A).;false;false
9;true,true,false;author(H, E), venue(H, A).;false;false
9;true,false;haswordtitle(I, C).;true;true
9;true,false,true;title(J, I), venue(J, A).;false;false
9;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 7.45e-09, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995086;  // std dev = 1.08e-06, 265.000 (wgt'ed) examples reached here.  /* #pos=265 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.14736462137402326;  // std dev = 6.476, 204.000 (wgt'ed) examples reached here.  /* #neg=145 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048757;  // std dev = 1.19e-07, 486.000 (wgt'ed) examples reached here.  /* #neg=486 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.713144438048116;  // std dev = 1.190, 267.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=265 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 7.45e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.11886776442421071;  // std dev = 6.519, 211.000 (wgt'ed) examples reached here.  /* #neg=152 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839233;  // std dev = 0.000, 484.000 (wgt'ed) examples reached here.  /* #neg=484 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1479699713978392;  // std dev = 0.212, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else if ( movie(E, A) )
%   | | then return 0.358727158927245;  // std dev = 0.373, 473.000 (wgt'ed) examples reached here.  /* #neg=149 #pos=324 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360582;  // std dev = 0.000, 499.000 (wgt'ed) examples reached here.  /* #neg=499 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.46005083746300174;  // std dev = 1.152, 268.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=265 */
%   | else if ( genre(A, E) )
%   | | then return -0.09838797800755773;  // std dev = 3.73e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.031023218742388538;  // std dev = 6.576, 221.000 (wgt'ed) examples reached here.  /* #neg=162 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783538;  // std dev = 1.57e-08, 503.000 (wgt'ed) examples reached here.  /* #neg=503 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12402411016734163;  // std dev = 0.356, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | else if ( genre(B, E) )
%   | | then return 0.35661847898712534;  // std dev = 0.000, 265.000 (wgt'ed) examples reached here.  /* #pos=265 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.04482421175382672;  // std dev = 6.489, 206.000 (wgt'ed) examples reached here.  /* #neg=147 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.0926912761892612;  // std dev = 6.32e-08, 451.000 (wgt'ed) examples reached here.  /* #neg=451 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.26954034739876137;  // std dev = 1.198, 270.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=265 */
%   | else if ( movie(E, A) )
%   | | then return 0.023753327886407404;  // std dev = 0.432, 228.000 (wgt'ed) examples reached here.  /* #neg=169 #pos=59 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 1.48e-07, 484.000 (wgt'ed) examples reached here.  /* #neg=484 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.16015773625794258;  // std dev = 0.427, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else if ( genre(B, E) )
%   | | then return 0.22860054639444638;  // std dev = 1.69e-07, 265.000 (wgt'ed) examples reached here.  /* #pos=265 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.03343489668582411;  // std dev = 6.482, 205.000 (wgt'ed) examples reached here.  /* #neg=146 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109193;  // std dev = 1.59e-07, 477.000 (wgt'ed) examples reached here.  /* #neg=477 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18203050452333802;  // std dev = 1.049, 270.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=265 */
%   | else if ( movie(E, B) )
%   | | then return 0.006159307545520133;  // std dev = 6.561, 231.000 (wgt'ed) examples reached here.  /* #neg=172 #pos=59 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.07324622576333747;  // std dev = 0.000, 472.000 (wgt'ed) examples reached here.  /* #neg=472 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1535172852229918;  // std dev = 1.175, 271.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=265 */
%   | else if ( genre(A, E) )
%   | | then return -0.07123160022488324;  // std dev = 9.86e-09, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.02307175059919048;  // std dev = 6.495, 207.000 (wgt'ed) examples reached here.  /* #neg=148 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420353;  // std dev = 0.000, 488.000 (wgt'ed) examples reached here.  /* #neg=488 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return -0.3553236210384296;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return 0.1442563993428154;  // std dev = 2.23e-07, 265.000 (wgt'ed) examples reached here.  /* #pos=265 */
%   | | else if ( genre(A, G) )
%   | | | then return -0.06666062300051846;  // std dev = 5.27e-09, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | | else return 0.06317156260383788;  // std dev = 6.289, 179.000 (wgt'ed) examples reached here.  /* #neg=120 #pos=59 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.06419184008202544;  // std dev = 2.34e-07, 465.000 (wgt'ed) examples reached here.  /* #neg=465 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.127875
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.815 seconds
Total inference time: 0.987 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.978798
   AUC PR    = 0.865522
   CLL	      = -0.13201
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.817901
   F1        = 0.89983


Total scoring time: 1.725 seconds
Parameter learned model CLL: -0.13201


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [7.45e-09, 20, 0], 'true,false,true': [1.08e-06, 0, 265], 'true,false,false,true': [6.476, 145, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.19e-07, 486, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.19, 2, 265], 'true,false,true': [7.45e-09, 14, 0], 'true,false,false,true': [6.519, 152, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 484, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.212, 16, 0], 'true,false,true': [0.373, 149, 324], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 499, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.152, 3, 265], 'true,false,true': [3.73e-09, 12, 0], 'true,false,false,true': [6.576, 162, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.57e-08, 503, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.356, 23, 0], 'true,false,true': [0.0, 0, 265], 'true,false,false,true': [6.489, 147, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [6.32e-08, 451, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [1.198, 5, 265], 'true,false,true': [0.432, 169, 59], 'true,false,false': [0.0, 0, 0], 'false,true': [1.48e-07, 484, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.427, 15, 0], 'true,false,true': [1.69e-07, 0, 265], 'true,false,false,true': [6.482, 146, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.59e-07, 477, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [1.049, 5, 265], 'true,false,true': [6.561, 172, 59], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 472, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [1.175, 6, 265], 'true,false,true': [9.86e-09, 22, 0], 'true,false,false,true': [6.495, 148, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 488, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true,true,false': 'genre(A, G)'}, {'true,true,true,true': [0.0, 2, 0], 'true,true,true,false': [2.23e-07, 0, 265], 'true,true,false,true': [5.27e-09, 27, 0], 'true,true,false,false': [6.289, 120, 59], 'true,false': [0.0, 0, 0], 'false': [2.34e-07, 465, 0]}]]
[{'': [0.22356882080620546, 2.924044180082717e-17], 'true': [2.7755575615628915e-18, 0.21358331704256947], 'true,false': [4.397321081685148e-15, 0.2055699730872746], 'true,false,false': [0.2055699730872746, nan], 'false': [2.924044180082717e-17, nan]}, {'': [0.18304915848932685, -1.3579587408638277e-16], 'true': [0.005307408598889481, 0.19238228449884237], 'true,false': [3.96508223080413e-18, 0.2014330316030615], 'true,false,false': [0.2014330316030615, nan], 'false': [-1.3579587408638277e-16, nan]}, {'': [0.14305905827515558, -8.89958336372871e-18], 'true': [0.002796593158420426, 0.1394031103303398], 'true,false': [0.1394031103303398, nan], 'false': [-8.89958336372871e-18, nan]}, {'': [0.13658162312563824, 2.4897247947856396e-16], 'true': [0.004955171097584597, 0.18643556066868697], 'true,false': [1.1564823173178713e-18, 0.1956962388157495], 'true,false,false': [0.1956962388157495, nan], 'false': [2.4897247947856396e-16, nan]}, {'': [0.11355281567124759, 8.862090662196371e-18], 'true': [0.005499286013743523, 0.11331096469903668], 'true,false': [-1.152956137271106e-15, 0.2043783579979287], 'true,false,false': [0.2043783579979287, nan], 'false': [8.862090662196371e-18, nan]}, {'': [0.10322037368527864, 4.4959444798869974e-17], 'true': [0.0053113053772365, 0.18641223078978914], 'true,false': [0.18641223078978914, nan], 'false': [4.4959444798869974e-17, nan]}, {'': [0.0988555471855362, 5.306726407013327e-17], 'true': [0.012180702753386119, 0.0987704387792663], 'true,false': [1.0725173369963776e-16, 0.20497323022010627], 'true,false,false': [0.20497323022010627, nan], 'false': [5.306726407013327e-17, nan]}, {'': [0.09580346652581048, -3.4812077890788806e-17], 'true': [0.004074422792482705, 0.18635000430338924], 'true,false': [0.18635000430338924, nan], 'false': [-3.4812077890788806e-17, nan]}, {'': [0.09231498628378135, -1.2103251006159493e-16], 'true': [0.0050978471387856565, 0.18498003327214554], 'true,false': [4.4156597570318725e-18, 0.2037853858899846], 'true,false,false': [0.2037853858899846, nan], 'false': [-1.2103251006159493e-16, nan]}, {'': [0.08769411871747583, 1.1794627401394135e-16], 'true': [0.08769411871747583, nan], 'true,true': [0.0018555107279524107, 0.19392496759322336], 'true,true,false': [1.02798428206033e-18, 0.22096688617708762], 'true,true,true': [0.0, 1.876905339743661e-16]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, E).;true;true
9;true,true;genre(A, F).;true;true
9;true,false;genre(A, G).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995086;  // std dev = 1.08e-06, 265.000 (wgt'ed) examples reached here.  /* #pos=265 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.8581489350995125;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.14185106490048804;  // std dev = 0.000, 154.000 (wgt'ed) examples reached here.  /* #neg=154 */
%   else return -0.14185106490048757;  // std dev = 1.19e-07, 486.000 (wgt'ed) examples reached here.  /* #neg=486 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.7194734122109546;  // std dev = 0.000, 102.000 (wgt'ed) examples reached here.  /* #pos=102 */
%   | | else return 0.7042038088843416;  // std dev = 0.113, 166.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=163 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.7194734122109543;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.12544463852839116;  // std dev = 6.99e-08, 140.000 (wgt'ed) examples reached here.  /* #neg=140 */
%   else return -0.1254446385283923;  // std dev = 0.000, 454.000 (wgt'ed) examples reached here.  /* #neg=454 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5572617315975087;  // std dev = 0.034, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.11483100170590121;  // std dev = 0.223, 179.000 (wgt'ed) examples reached here.  /* #neg=179 */
%   else return -0.11231637819360592;  // std dev = 0.000, 467.000 (wgt'ed) examples reached here.  /* #neg=467 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.4170527282347106;  // std dev = 2.46e-07, 102.000 (wgt'ed) examples reached here.  /* #pos=102 */
%   | | else if ( actor(A) )
%   | | | then return 0.4207697059785653;  // std dev = 1.03e-07, 163.000 (wgt'ed) examples reached here.  /* #pos=163 */
%   | | | else return -0.20546550232109956;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(A, E) )
%   | | then return -0.10136703827837007;  // std dev = 9.13e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.41705272823471073;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.10136703827837033;  // std dev = 0.000, 153.000 (wgt'ed) examples reached here.  /* #neg=153 */
%   else return -0.10159632948783563;  // std dev = 2.92e-07, 450.000 (wgt'ed) examples reached here.  /* #neg=450 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09876407813188452;  // std dev = 0.111, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | else if ( genre(B, E) )
%   | | then return 0.32194990293413356;  // std dev = 0.020, 265.000 (wgt'ed) examples reached here.  /* #pos=265 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.3203994267810955;  // std dev = 6.66e-08, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.09249925946831583;  // std dev = 2.98e-08, 137.000 (wgt'ed) examples reached here.  /* #neg=137 */
%   else return -0.09269127618926117;  // std dev = 8.16e-08, 444.000 (wgt'ed) examples reached here.  /* #neg=444 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.25582455014272926;  // std dev = 0.019, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.08542247737262791;  // std dev = 0.075, 167.000 (wgt'ed) examples reached here.  /* #neg=167 */
%   else return -0.08518475138839678;  // std dev = 1.35e-07, 450.000 (wgt'ed) examples reached here.  /* #neg=450 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09165755106881364;  // std dev = 0.128, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else if ( genre(B, E) )
%   | | then return 0.2103866852980314;  // std dev = 0.015, 265.000 (wgt'ed) examples reached here.  /* #pos=265 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.20946375583199547;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.07860775478140646;  // std dev = 0.000, 153.000 (wgt'ed) examples reached here.  /* #neg=153 */
%   else return -0.07877675473109191;  // std dev = 0.000, 475.000 (wgt'ed) examples reached here.  /* #neg=475 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1774345558605204;  // std dev = 0.014, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.07493398220774196;  // std dev = 0.143, 165.000 (wgt'ed) examples reached here.  /* #neg=165 */
%   else return -0.07324622576333702;  // std dev = 1.26e-07, 480.000 (wgt'ed) examples reached here.  /* #neg=480 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.15099570488478592;  // std dev = 0.398, 267.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=265 */
%   | else if ( genre(A, E) )
%   | | then return -0.06696504914158277;  // std dev = 7.45e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( actor(B) )
%   | | | then return -0.06818198087700525;  // std dev = 0.000, 141.000 (wgt'ed) examples reached here.  /* #neg=141 */
%   | | | else return 0.14527291926369418;  // std dev = 0.307, 61.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=59 */
%   else return -0.0684269778442035;  // std dev = 0.000, 471.000 (wgt'ed) examples reached here.  /* #neg=471 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( genre(A, E) )
%   | | then return -0.14707535299527114;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0.1345387071573276;  // std dev = 0.011, 265.000 (wgt'ed) examples reached here.  /* #pos=265 */
%   | else if ( genre(A, F) )
%   | | then return -0.06290040995907711;  // std dev = 5.27e-09, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.1346643575919766;  // std dev = 4.21e-08, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.06445961107399903;  // std dev = 0.031, 145.000 (wgt'ed) examples reached here.  /* #neg=145 */
%   else return -0.06419184008202543;  // std dev = 2.35e-07, 467.000 (wgt'ed) examples reached here.  /* #neg=467 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063442
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.653 seconds
Total inference time: 1.022 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064674
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.643 seconds
Refined model CLL: -0.064674


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063442
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 7.835999999999999 seconds
Total inference time: 1.022 seconds
AUC ROC: 1.0
Total revision time: 7.835999999999999
Best scored revision CLL: -0.064674


Dataset: 4_cora_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 00:01:25
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063442, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 7.835999999999999, 'Inference time': 1.022, 'parameter_1.0': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.127875, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 1.815, 'Inference time': 0.987}}


Starting fold 3

Target train facts examples: 737
Target train pos examples: 204
Target train neg examples: 10693

Target test facts examples: 341
Target test pos	 examples: 178
Target test neg examples: 3543

Amount of data: 0.2
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;haswordauthor(E, C).;true;true
7;true,true,true;author(F, E), title(F, D).;false;false
7;true,true,false;title(G, D), venue(G, B).;false;false
7;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
7;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
7;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, B).;false;true
8;true,true,false;title(F, D), venue(F, A).;false;false
8;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
8;true,false,false;haswordvenue(A, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
8;false,true;haswordauthor(M, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;true,true;author(F, E), venue(F, B).;true;true
9;true,true,true;samebib(F, G), venue(G, A).;false;false
9;true,true,false;author(H, E), venue(H, A).;false;false
9;true,false;haswordtitle(I, C).;true;true
9;true,false,true;title(J, I), venue(J, A).;false;false
9;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995115;  // std dev = 2.60e-07, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.024815601766178884;  // std dev = 1.581, 18.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048766;  // std dev = 6.14e-08, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109548;  // std dev = 0.000, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | else if ( genre(A, E) )
%   | | then return -0.14185106490048777;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.02951416708964553;  // std dev = 1.629, 26.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839158;  // std dev = 0.000, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( movie(E, A) )
%   | | then return 0.3014264015416575;  // std dev = 0.356, 65.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=40 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360629;  // std dev = 3.94e-08, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4802480970333639;  // std dev = 0.000, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | else if ( genre(A, E) )
%   | | then return -0.11231637819360639;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.06655338385202207;  // std dev = 1.629, 26.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783626;  // std dev = 4.37e-09, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.10159632948783628;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.36371017161768776;  // std dev = 0.000, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.056856647335431956;  // std dev = 1.629, 26.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926105;  // std dev = 0.000, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.28434559015494015;  // std dev = 5.16e-08, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | else if ( movie(E, A) )
%   | | then return -0.07896331604586597;  // std dev = 0.276, 36.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=3 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839679;  // std dev = 1.83e-08, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08626065804147452;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(B, E) )
%   | | then return 0.23016981169090117;  // std dev = 0.000, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.02872936638734766;  // std dev = 1.620, 24.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109179;  // std dev = 0.000, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1919293093514651;  // std dev = 0.000, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | else if ( movie(E, B) )
%   | | then return -0.04288598283322641;  // std dev = 1.637, 28.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=3 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.07324622576333704;  // std dev = 1.05e-08, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1639054827383327;  // std dev = 4.94e-08, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | else if ( genre(A, E) )
%   | | then return -0.07661040293493224;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.029257076617131724;  // std dev = 1.629, 26.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420271;  // std dev = 1.32e-09, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.14266161256930673;  // std dev = 0.000, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | else if ( genre(A, G) )
%   | | | then return -0.07136363758987892;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return 0.008940508607264528;  // std dev = 1.597, 20.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=3 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.06419184008202625;  // std dev = 0.000, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */


Results
   AUC ROC   = 0.97199
   AUC PR    = 0.81824
   CLL	      = -0.112513
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.840391


Total learning time: 0.793 seconds
Total inference time: 1.082 seconds
AUC ROC: 0.97199


Results scoring model
   AUC ROC   = 0.989599
   AUC PR    = 0.94362
   CLL	      = -0.091524
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.925
   F1        = 0.961039


Total scoring time: 0.881 seconds
Parameter learned model CLL: -0.091524


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [2.6e-07, 0, 37], 'true,false,false,true': [1.581, 15, 3], 'true,false,false,false': [0.0, 0, 0], 'false,true': [6.14e-08, 61, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 37], 'true,false,true': [0.0, 2, 0], 'true,false,false,true': [1.629, 23, 3], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 67, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 3, 0], 'true,false,true': [0.356, 25, 40], 'true,false,false': [0.0, 0, 0], 'false,true': [3.94e-08, 56, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 37], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [1.629, 23, 3], 'true,false,false,false': [0.0, 0, 0], 'false,true': [4.37e-09, 51, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.0, 0, 37], 'true,false,false,true': [1.629, 23, 3], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 51, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [5.16e-08, 0, 37], 'true,false,true': [0.276, 33, 3], 'true,false,false': [0.0, 0, 0], 'false,true': [1.83e-08, 60, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 6, 0], 'true,false,true': [0.0, 0, 37], 'true,false,false,true': [1.62, 21, 3], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 50, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 37], 'true,false,true': [1.637, 25, 3], 'true,false,false': [0.0, 0, 0], 'false,true': [1.05e-08, 49, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [4.94e-08, 0, 37], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [1.629, 23, 3], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.32e-09, 45, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true,true,false': 'genre(A, G)'}, {'true,true,true,true': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 37], 'true,true,false,true': [0.0, 2, 0], 'true,true,false,false': [1.597, 17, 3], 'true,false': [0.0, 0, 0], 'false': [0.0, 50, 0]}]]
[{'': [0.19834710743801712, 6.188128333976282e-17], 'true': [nan, 0.19834710743801712], 'true,false': [1.8243664837083652e-15, 0.13888888888888876], 'true,false,false': [0.13888888888888876, nan], 'false': [6.188128333976282e-17, nan]}, {'': [0.18170896812420945, -3.314098580970616e-17], 'true': [-7.681543089298381e-16, 0.09561723264719388], 'true,false': [0.0, 0.10207100591715974], 'true,false,false': [0.10207100591715974, nan], 'false': [-3.314098580970616e-17, nan]}, {'': [0.12852879823342706, 2.7755575615628914e-17], 'true': [0.0, 0.12642182816414524], 'true,false': [0.12642182816414524, nan], 'false': [2.7755575615628914e-17, nan]}, {'': [0.11487370154949439, 1.959217102279688e-17], 'true': [-2.880578658486893e-16, 0.09836529039338149], 'true,false': [0.0, 0.10207100591715997], 'true,false,false': [0.10207100591715997, nan], 'false': [1.959217102279688e-17, nan]}, {'': [0.08497661518012703, -3.2653618371328133e-18], 'true': [0.0, 0.08499557869158181], 'true,false': [-1.200241107702872e-16, 0.1020710059171596], 'true,false,false': [0.1020710059171596, nan], 'false': [-3.2653618371328133e-18, nan]}, {'': [0.07056818899107047, 5.551115123125783e-18], 'true': [7.201446646217232e-17, 0.07619586067303907], 'true,false': [0.07619586067303907, nan], 'false': [5.551115123125783e-18, nan]}, {'': [0.05749646884592822, -1.1102230246251566e-18], 'true': [-1.1564823173178713e-18, 0.05902890635735497], 'true,false': [-1.200241107702872e-17, 0.10937499999999985], 'true,false,false': [0.10937499999999985, nan], 'false': [-1.1102230246251566e-18, nan]}, {'': [0.054729074620804896, 2.2657612747452172e-18], 'true': [-6.00120553851436e-17, 0.09566326530612243], 'true,false': [0.09566326530612243, nan], 'false': [2.2657612747452172e-18, nan]}, {'': [0.05076629724368215, 2.4671622769447924e-18], 'true': [6.601326092365796e-17, 0.09837057191933264], 'true,false': [0.0, 0.1020710059171597], 'true,false,false': [0.1020710059171597, nan], 'false': [2.4671622769447924e-18, nan]}, {'': [0.04806947454847806, -2.220446049250313e-18], 'true': [0.04806947454847806, nan], 'true,true': [-3.300663046182898e-17, 0.11644204594185545], 'true,true,false': [0.0, 0.1274999999999999], 'true,true,true': [nan, -3.300663046182898e-17]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, E).;true;true
9;true,false;genre(A, G).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.8581489350995115;  // std dev = 2.60e-07, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | else if ( actor(B) )
%   | | then return -0.14185106490048774;  // std dev = 1.05e-08, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | else return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return -0.14185106490048766;  // std dev = 7.30e-08, 75.000 (wgt'ed) examples reached here.  /* #neg=75 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109548;  // std dev = 0.000, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( actor(B) )
%   | | | then return -0.12544463852839138;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | | else return 0.7194734122109545;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return -0.1254446385283916;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( actor(B) )
%   | | then return -0.11231637819360636;  // std dev = 1.49e-08, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | else return 0.5553664367462842;  // std dev = 1.40e-07, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   else return -0.1123163781936063;  // std dev = 3.49e-08, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4175135841583102;  // std dev = 0.000, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( actor(B) )
%   | | | then return -0.10159632948783635;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | | else return 0.41751358415830997;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return -0.10159632948783627;  // std dev = 1.97e-08, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.10159632948783633;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.3207118471601495;  // std dev = 2.98e-08, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | else if ( actor(B) )
%   | | | then return -0.09269127618926103;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | | else return 0.32071184716014967;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return -0.09269127618926107;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2551722425694896;  // std dev = 0.000, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | else if ( actor(B) )
%   | | then return -0.08546277082546586;  // std dev = 0.007, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | else return 0.25517224256948945;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return -0.08518475138839679;  // std dev = 1.67e-08, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08574974827150443;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.20975771563253542;  // std dev = 5.58e-08, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | else if ( actor(B) )
%   | | | then return -0.07875658095138528;  // std dev = 9.13e-09, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | | else return 0.20975771563253554;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return -0.07877675473109172;  // std dev = 2.58e-08, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1770964977452775;  // std dev = 0.000, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | else if ( actor(B) )
%   | | then return -0.07367561122581939;  // std dev = 0.008, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | else return 0.17709649774527736;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return -0.07324622576333704;  // std dev = 0.000, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1527438580936709;  // std dev = 3.65e-08, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | else if ( genre(A, E) )
%   | | then return -0.0740488450287111;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( actor(B) )
%   | | | then return -0.06838318347510697;  // std dev = 5.27e-09, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | | else return 0.15274385809367097;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return -0.0684269778442027;  // std dev = 1.39e-08, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13400703000801112;  // std dev = 1.05e-08, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | else if ( genre(A, E) )
%   | | then return -0.0691290641040455;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( actor(B) )
%   | | | then return -0.06415319887046912;  // std dev = 5.27e-09, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | | else return 0.13400703000801117;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return -0.06419184008202625;  // std dev = 0.000, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */


Results
   AUC ROC   = 0.993085
   AUC PR    = 0.784141
   CLL	      = -0.10786
   Precision = 0.626761 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.770563


Total learning time: 1.197 seconds
Total inference time: 0.962 seconds
AUC ROC: 0.993085


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.06497
   Precision = 0.930233 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.963855


Total scoring time: 0.873 seconds
Refined model CLL: -0.06497


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.993085
   AUC PR    = 0.784141
   CLL	      = -0.10786
   Precision = 0.626761 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.770563


Total learning time: 3.7439999999999998 seconds
Total inference time: 0.962 seconds
AUC ROC: 0.993085
Total revision time: 3.7439999999999998
Best scored revision CLL: -0.06497


Dataset: 4_cora_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 00:01:31
{'AUC ROC': 0.993085, 'AUC PR': 0.784141, 'CLL': -0.10786, 'Precision': [0.626761, 0.5], 'Recall': 1.0, 'F1': 0.770563, 'Learning time': 3.7439999999999998, 'Inference time': 0.962, 'parameter_0.2': {'AUC ROC': 0.97199, 'AUC PR': 0.81824, 'CLL': -0.112513, 'Precision': [1.0, 0.5], 'Recall': 0.724719, 'F1': 0.840391, 'Learning time': 0.793, 'Inference time': 1.082}}


Amount of data: 0.4
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;haswordauthor(E, C).;true;true
7;true,true,true;author(F, E), title(F, D).;false;false
7;true,true,false;title(G, D), venue(G, B).;false;false
7;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
7;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
7;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, B).;false;true
8;true,true,false;title(F, D), venue(F, A).;false;false
8;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
8;true,false,false;haswordvenue(A, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
8;false,true;haswordauthor(M, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;true,true;author(F, E), venue(F, B).;true;true
9;true,true,true;samebib(F, G), venue(G, A).;false;false
9;true,true,false;author(H, E), venue(H, A).;false;false
9;true,false;haswordtitle(I, C).;true;true
9;true,false,true;title(J, I), venue(J, A).;false;false
9;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995125;  // std dev = 0.000, 78.000 (wgt'ed) examples reached here.  /* #pos=78 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.06290369647943514;  // std dev = 1.662, 38.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048763;  // std dev = 8.69e-08, 97.000 (wgt'ed) examples reached here.  /* #neg=97 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109538;  // std dev = 2.23e-07, 78.000 (wgt'ed) examples reached here.  /* #pos=78 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.06769829467945945;  // std dev = 1.673, 45.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 97.000 (wgt'ed) examples reached here.  /* #neg=97 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( movie(E, A) )
%   | | then return 0.3158351798507532;  // std dev = 0.337, 127.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=81 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360617;  // std dev = 9.31e-08, 122.000 (wgt'ed) examples reached here.  /* #neg=122 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.476652609347522;  // std dev = 1.03e-07, 78.000 (wgt'ed) examples reached here.  /* #pos=78 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.09275712421332696;  // std dev = 1.667, 41.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783635;  // std dev = 0.000, 116.000 (wgt'ed) examples reached here.  /* #neg=116 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926094;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.36121141181495375;  // std dev = 1.33e-07, 78.000 (wgt'ed) examples reached here.  /* #pos=78 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.09466161916486315;  // std dev = 1.680, 51.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926087;  // std dev = 6.83e-08, 113.000 (wgt'ed) examples reached here.  /* #neg=113 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2826566779348819;  // std dev = 8.43e-08, 78.000 (wgt'ed) examples reached here.  /* #pos=78 */
%   | else if ( movie(E, A) )
%   | | then return -0.08191245645522623;  // std dev = 0.226, 55.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=3 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.0851847513883968;  // std dev = 6.91e-08, 135.000 (wgt'ed) examples reached here.  /* #neg=135 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.13099720193639935;  // std dev = 0.232, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(B, E) )
%   | | then return 0.2289979066791726;  // std dev = 9.42e-08, 78.000 (wgt'ed) examples reached here.  /* #pos=78 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.07069438644243484;  // std dev = 1.678, 49.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109154;  // std dev = 7.15e-08, 125.000 (wgt'ed) examples reached here.  /* #neg=125 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.19108490036100367;  // std dev = 1.23e-07, 78.000 (wgt'ed) examples reached here.  /* #pos=78 */
%   | else if ( movie(E, B) )
%   | | then return -0.07455237881492215;  // std dev = 1.689, 65.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=3 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.07324622576333717;  // std dev = 0.000, 123.000 (wgt'ed) examples reached here.  /* #neg=123 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1632747995915905;  // std dev = 0.000, 78.000 (wgt'ed) examples reached here.  /* #pos=78 */
%   | else if ( genre(A, E) )
%   | | then return -0.06529217937957793;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.046388731113323846;  // std dev = 1.671, 43.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420264;  // std dev = 5.19e-09, 122.000 (wgt'ed) examples reached here.  /* #neg=122 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.142175681752367;  // std dev = 2.98e-08, 78.000 (wgt'ed) examples reached here.  /* #pos=78 */
%   | | else if ( genre(A, G) )
%   | | | then return -0.06141877072885222;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return -0.04481119848522002;  // std dev = 1.673, 45.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=3 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.06419184008202626;  // std dev = 0.000, 107.000 (wgt'ed) examples reached here.  /* #neg=107 */


Results
   AUC ROC   = 0.97199
   AUC PR    = 0.81824
   CLL	      = -0.10829
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.840391


Total learning time: 1.018 seconds
Total inference time: 1.083 seconds
AUC ROC: 0.97199


Results scoring model
   AUC ROC   = 0.995029
   AUC PR    = 0.972448
   CLL	      = -0.078888
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.962963
   F1        = 0.981132


Total scoring time: 1.1 seconds
Parameter learned model CLL: -0.078888


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 2, 0], 'true,false,true': [0.0, 0, 78], 'true,false,false,true': [1.662, 35, 3], 'true,false,false,false': [0.0, 0, 0], 'false,true': [8.69e-08, 97, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [2.23e-07, 0, 78], 'true,false,true': [0.0, 5, 0], 'true,false,false,true': [1.673, 42, 3], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 97, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 2, 0], 'true,false,true': [0.337, 46, 81], 'true,false,false': [0.0, 0, 0], 'false,true': [9.31e-08, 122, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.03e-07, 0, 78], 'true,false,true': [0.0, 2, 0], 'true,false,false,true': [1.667, 38, 3], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 116, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [2.63e-09, 3, 0], 'true,false,true': [1.33e-07, 0, 78], 'true,false,false,true': [1.68, 48, 3], 'true,false,false,false': [0.0, 0, 0], 'false,true': [6.83e-08, 113, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [8.43e-08, 0, 78], 'true,false,true': [0.226, 52, 3], 'true,false,false': [0.0, 0, 0], 'false,true': [6.91e-08, 135, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.232, 5, 0], 'true,false,true': [9.42e-08, 0, 78], 'true,false,false,true': [1.678, 46, 3], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.15e-08, 125, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [1.23e-07, 0, 78], 'true,false,true': [1.689, 62, 3], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 123, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 78], 'true,false,true': [0.0, 3, 0], 'true,false,false,true': [1.671, 40, 3], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.19e-09, 122, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true,true,false': 'genre(A, G)'}, {'true,true,true,true': [0.0, 0, 0], 'true,true,true,false': [2.98e-08, 0, 78], 'true,true,false,true': [0.0, 4, 0], 'true,true,false,false': [1.673, 42, 3], 'true,false': [0.0, 0, 0], 'false': [0.0, 107, 0]}]]
[{'': [0.21523987359954205, 7.783006770568107e-17], 'true': [0.0, 0.21068668252081021], 'true,false': [-1.002047447866808e-15, 0.07271468144044306], 'true,false,false': [0.07271468144044306, nan], 'false': [7.783006770568107e-17, nan]}, {'': [0.17166137471464232, -1.1445598192011922e-17], 'true': [6.376665577334232e-16, 0.05630011762051268], 'true,false': [0.0, 0.06222222222222217], 'true,false,false': [0.06222222222222217, nan], 'false': [-1.1445598192011922e-17, nan]}, {'': [0.11454598706847362, 7.098147206619854e-17], 'true': [0.0, 0.11350778713397386], 'true,false': [0.11350778713397386, nan], 'false': [7.098147206619854e-17, nan]}, {'': [0.09736266686329346, -1.5313421029312504e-17], 'true': [1.3664283380001927e-16, 0.06466597209131801], 'true,false': [0.0, 0.06781677572873307], 'true,false,false': [0.06781677572873307, nan], 'false': [-1.5313421029312504e-17, nan]}, {'': [0.07160386725950388, 4.126492657898812e-17], 'true': [2.3129646346357427e-18, 0.07156686081174857], 'true,false': [2.277380563333654e-16, 0.055363321799308134], 'true,false,false': [0.055363321799308134, nan], 'false': [4.126492657898812e-17, nan]}, {'': [0.05343742085061239, 3.536265930287536e-17], 'true': [9.109522253334617e-17, 0.05127379806414033], 'true,false': [0.05127379806414033, nan], 'false': [3.536265930287536e-17, nan]}, {'': [0.04439836882104324, 4.085620730620576e-17], 'true': [0.010808781939729057, 0.04345887518473861], 'true,false': [1.138690281666827e-16, 0.05747605164514805], 'true,false,false': [0.05747605164514805, nan], 'false': [4.085620730620576e-17, nan]}, {'': [0.03744288504078668, -1.3539305178355567e-17], 'true': [1.9357734788336063e-16, 0.04388534849628252], 'true,false': [0.04388534849628252, nan], 'false': [-1.3539305178355567e-17, nan]}, {'': [0.03289251045954223, 2.7300566179307128e-17], 'true': [-2.846725704167068e-17, 0.06068912567543736], 'true,false': [0.0, 0.06489994591671167], 'true,false,false': [0.06489994591671167, nan], 'false': [2.7300566179307128e-17, nan]}, {'': [0.030461047341225164, -1.6601465788787386e-17], 'true': [0.030461047341225164, nan], 'true,true': [1.1386902816668272e-17, 0.05716353438652605], 'true,true,false': [0.0, 0.06222222222222227], 'true,true,true': [nan, 1.1386902816668272e-17]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, E).;true;true
9;true,false;genre(A, G).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995125;  // std dev = 0.000, 78.000 (wgt'ed) examples reached here.  /* #pos=78 */
%   | | else if ( actor(B) )
%   | | | then return -0.14185106490048766;  // std dev = 5.77e-08, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   | | | else return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return -0.1418510649004879;  // std dev = 0.000, 133.000 (wgt'ed) examples reached here.  /* #neg=133 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109538;  // std dev = 2.23e-07, 78.000 (wgt'ed) examples reached here.  /* #pos=78 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( actor(B) )
%   | | | then return -0.12544463852839152;  // std dev = 0.000, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
%   | | | else return 0.7194734122109545;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return -0.12544463852839105;  // std dev = 8.16e-08, 120.000 (wgt'ed) examples reached here.  /* #neg=120 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( actor(B) )
%   | | then return -0.1123163781936064;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | | else return 0.5553664367462836;  // std dev = 3.42e-07, 81.000 (wgt'ed) examples reached here.  /* #pos=81 */
%   else return -0.11231637819360618;  // std dev = 8.69e-08, 109.000 (wgt'ed) examples reached here.  /* #neg=109 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.41751358415831047;  // std dev = 0.000, 78.000 (wgt'ed) examples reached here.  /* #pos=78 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( actor(B) )
%   | | | then return -0.10159632948783634;  // std dev = 0.000, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | | | else return 0.4175135841583102;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return -0.10159632948783634;  // std dev = 0.000, 112.000 (wgt'ed) examples reached here.  /* #neg=112 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926097;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( genre(B, E) )
%   | | then return 0.32071184716015005;  // std dev = 0.000, 78.000 (wgt'ed) examples reached here.  /* #pos=78 */
%   | | else if ( actor(B) )
%   | | | then return -0.09269127618926101;  // std dev = 0.000, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
%   | | | else return 0.32071184716014967;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return -0.09269127618926092;  // std dev = 5.87e-08, 106.000 (wgt'ed) examples reached here.  /* #neg=106 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2551722425694895;  // std dev = 0.000, 78.000 (wgt'ed) examples reached here.  /* #pos=78 */
%   | else if ( actor(B) )
%   | | then return -0.08518475138839679;  // std dev = 1.67e-08, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
%   | | else return 0.25517224256948945;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return -0.08518475138839682;  // std dev = 5.67e-08, 102.000 (wgt'ed) examples reached here.  /* #neg=102 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07877675473109177;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.20975771563253573;  // std dev = 0.000, 78.000 (wgt'ed) examples reached here.  /* #pos=78 */
%   | | else if ( actor(B) )
%   | | | then return -0.07877675473109177;  // std dev = 0.000, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
%   | | | else return 0.20975771563253576;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return -0.0787767547310916;  // std dev = 5.77e-08, 99.000 (wgt'ed) examples reached here.  /* #neg=99 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17709649774527716;  // std dev = 3.65e-08, 78.000 (wgt'ed) examples reached here.  /* #pos=78 */
%   | else if ( actor(B) )
%   | | then return -0.07324622576333704;  // std dev = 1.29e-08, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
%   | | else return 0.17709649774527736;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return -0.07324622576333709;  // std dev = 0.000, 112.000 (wgt'ed) examples reached here.  /* #neg=112 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.15274385809367055;  // std dev = 8.16e-08, 78.000 (wgt'ed) examples reached here.  /* #pos=78 */
%   | else if ( genre(A, E) )
%   | | then return -0.06842697784420272;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( actor(B) )
%   | | | then return -0.0684269778442027;  // std dev = 1.39e-08, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
%   | | | else return 0.15274385809367097;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return -0.06842697784420264;  // std dev = 5.58e-08, 118.000 (wgt'ed) examples reached here.  /* #neg=118 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13400703000801092;  // std dev = 5.37e-08, 78.000 (wgt'ed) examples reached here.  /* #pos=78 */
%   | else if ( genre(A, E) )
%   | | then return -0.0641918400820262;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( actor(B) )
%   | | | then return -0.06419184008202623;  // std dev = 0.000, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | | | else return 0.13400703000801117;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return -0.06419184008202626;  // std dev = 0.000, 123.000 (wgt'ed) examples reached here.  /* #neg=123 */


Results
   AUC ROC   = 0.993085
   AUC PR    = 0.784141
   CLL	      = -0.099714
   Precision = 0.784141 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.879012


Total learning time: 1.275 seconds
Total inference time: 1.056 seconds
AUC ROC: 0.993085


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064077
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.11 seconds
Refined model CLL: -0.064077


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.993085
   AUC PR    = 0.784141
   CLL	      = -0.099714
   Precision = 0.784141 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.879012


Total learning time: 4.503 seconds
Total inference time: 1.056 seconds
AUC ROC: 0.993085
Total revision time: 4.503
Best scored revision CLL: -0.064077


Dataset: 4_cora_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 00:01:39
{'AUC ROC': 0.993085, 'AUC PR': 0.784141, 'CLL': -0.099714, 'Precision': [0.784141, 0.5], 'Recall': 1.0, 'F1': 0.879012, 'Learning time': 4.503, 'Inference time': 1.056, 'parameter_0.4': {'AUC ROC': 0.97199, 'AUC PR': 0.81824, 'CLL': -0.10829, 'Precision': [1.0, 0.5], 'Recall': 0.724719, 'F1': 0.840391, 'Learning time': 1.018, 'Inference time': 1.083}}


Amount of data: 0.6
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;haswordauthor(E, C).;true;true
7;true,true,true;author(F, E), title(F, D).;false;false
7;true,true,false;title(G, D), venue(G, B).;false;false
7;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
7;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
7;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, B).;false;true
8;true,true,false;title(F, D), venue(F, A).;false;false
8;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
8;true,false,false;haswordvenue(A, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
8;false,true;haswordauthor(M, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;true,true;author(F, E), venue(F, B).;true;true
9;true,true,true;samebib(F, G), venue(G, A).;false;false
9;true,true,false;author(H, E), venue(H, A).;false;false
9;true,false;haswordtitle(I, C).;true;true
9;true,false,true;title(J, I), venue(J, A).;false;false
9;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995107;  // std dev = 6.31e-07, 117.000 (wgt'ed) examples reached here.  /* #pos=117 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.07428349733292013;  // std dev = 2.159, 74.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=5 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048838;  // std dev = 0.000, 193.000 (wgt'ed) examples reached here.  /* #neg=193 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109552;  // std dev = 0.000, 117.000 (wgt'ed) examples reached here.  /* #pos=117 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.07749130819883955;  // std dev = 2.173, 90.000 (wgt'ed) examples reached here.  /* #neg=85 #pos=5 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.1254446385283914;  // std dev = 0.000, 165.000 (wgt'ed) examples reached here.  /* #neg=165 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( movie(E, A) )
%   | | then return 0.34007953586939377;  // std dev = 0.330, 182.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=122 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.1123163781936064;  // std dev = 5.96e-08, 168.000 (wgt'ed) examples reached here.  /* #neg=168 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.459196815769267;  // std dev = 0.952, 119.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=117 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783627;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.09059580493764915;  // std dev = 2.150, 66.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=5 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.1015963294878365;  // std dev = 0.000, 176.000 (wgt'ed) examples reached here.  /* #neg=176 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926096;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(B, E) )
%   | | then return 0.35964651475917736;  // std dev = 4.21e-08, 117.000 (wgt'ed) examples reached here.  /* #pos=117 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.08567312371463258;  // std dev = 2.158, 73.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=5 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926065;  // std dev = 8.02e-08, 163.000 (wgt'ed) examples reached here.  /* #neg=163 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2815987212535129;  // std dev = 1.40e-07, 117.000 (wgt'ed) examples reached here.  /* #pos=117 */
%   | else if ( movie(E, A) )
%   | | then return -0.07951090262041448;  // std dev = 0.239, 82.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=5 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 7.15e-08, 172.000 (wgt'ed) examples reached here.  /* #neg=172 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07918949681174801;  // std dev = 1.86e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.22826324847221102;  // std dev = 1.55e-07, 117.000 (wgt'ed) examples reached here.  /* #pos=117 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.05920727913225489;  // std dev = 2.151, 67.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=5 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109151;  // std dev = 7.88e-08, 144.000 (wgt'ed) examples reached here.  /* #neg=144 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.19055511990806517;  // std dev = 0.000, 117.000 (wgt'ed) examples reached here.  /* #pos=117 */
%   | else if ( movie(E, B) )
%   | | then return -0.04076463174925652;  // std dev = 2.135, 61.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=5 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.07324622576333666;  // std dev = 1.19e-07, 197.000 (wgt'ed) examples reached here.  /* #neg=197 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.16287882639502424;  // std dev = 1.28e-07, 117.000 (wgt'ed) examples reached here.  /* #pos=117 */
%   | else if ( genre(A, E) )
%   | | then return -0.07087241882114834;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.05509579978640507;  // std dev = 2.159, 74.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=5 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420264;  // std dev = 5.43e-09, 146.000 (wgt'ed) examples reached here.  /* #neg=146 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.14187040517318522;  // std dev = 9.88e-08, 117.000 (wgt'ed) examples reached here.  /* #pos=117 */
%   | | else if ( genre(A, G) )
%   | | | then return -0.0663450900462287;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return -0.016856314614231805;  // std dev = 2.121, 50.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=5 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.06419184008202626;  // std dev = 0.000, 166.000 (wgt'ed) examples reached here.  /* #neg=166 */


Results
   AUC ROC   = 0.97199
   AUC PR    = 0.81824
   CLL	      = -0.109158
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.840391


Total learning time: 1.195 seconds
Total inference time: 1.013 seconds
AUC ROC: 0.97199


Results scoring model
   AUC ROC   = 0.994589
   AUC PR    = 0.968089
   CLL	      = -0.081056
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.959016
   F1        = 0.979079


Total scoring time: 1.338 seconds
Parameter learned model CLL: -0.081056


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 7, 0], 'true,false,true': [6.31e-07, 0, 117], 'true,false,false,true': [2.159, 69, 5], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 193, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 117], 'true,false,true': [0.0, 2, 0], 'true,false,false,true': [2.173, 85, 5], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 165, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [2.63e-09, 3, 0], 'true,false,true': [0.33, 60, 122], 'true,false,false': [0.0, 0, 0], 'false,true': [5.96e-08, 168, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.952, 2, 117], 'true,false,true': [0.0, 6, 0], 'true,false,false,true': [2.15, 61, 5], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 176, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 5, 0], 'true,false,true': [4.21e-08, 0, 117], 'true,false,false,true': [2.158, 68, 5], 'true,false,false,false': [0.0, 0, 0], 'false,true': [8.02e-08, 163, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [1.4e-07, 0, 117], 'true,false,true': [0.239, 77, 5], 'true,false,false': [0.0, 0, 0], 'false,true': [7.15e-08, 172, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [1.86e-09, 3, 0], 'true,false,true': [1.55e-07, 0, 117], 'true,false,false,true': [2.151, 62, 5], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.88e-08, 144, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 117], 'true,false,true': [2.135, 56, 5], 'true,false,false': [0.0, 0, 0], 'false,true': [1.19e-07, 197, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [1.28e-07, 0, 117], 'true,false,true': [0.0, 4, 0], 'true,false,false,true': [2.159, 69, 5], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.43e-09, 146, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true,true,false': 'genre(A, G)'}, {'true,true,true,true': [0.0, 0, 0], 'true,true,true,false': [9.88e-08, 0, 117], 'true,true,false,true': [2.63e-09, 6, 0], 'true,true,false,false': [2.121, 45, 5], 'true,false': [0.0, 0, 0], 'false': [0.0, 166, 0]}]]
[{'': [0.23650647893072524, -2.277970558298249e-16], 'true': [-7.93016446160826e-18, 0.23075025355664988], 'true,false': [3.4008883079115908e-15, 0.06300219138056992], 'true,false,false': [0.06300219138056992, nan], 'false': [-2.277970558298249e-16, nan]}, {'': [0.17954182422188955, 0.0], 'true': [-1.1538728187557183e-15, 0.05137740529118512], 'true,false': [0.0, 0.052469135802469286], 'true,false,false': [0.052469135802469286, nan], 'false': [0.0, nan]}, {'': [0.11028738589158975, 2.114710523095536e-17], 'true': [2.3129646346357427e-18, 0.10878646556900526], 'true,false': [0.10878646556900526, nan], 'false': [2.114710523095536e-17, nan]}, {'': [0.10017384647048572, -8.074349270001139e-17], 'true': [0.007618190008385541, 0.06419274562061411], 'true,false': [0.0, 0.07001836547291106], 'true,false,false': [0.07001836547291106, nan], 'false': [-8.074349270001139e-17, nan]}, {'': [0.07157648458547024, 3.950486836089514e-17], 'true': [0.0, 0.07143195659653585], 'true,false': [1.518253708889103e-17, 0.06380183899418262], 'true,false,false': [0.06380183899418262, nan], 'false': [3.950486836089514e-17, nan]}, {'': [0.05510729596504168, 2.9692011123696044e-17], 'true': [1.6700790797780132e-16, 0.05706856772351924], 'true,false': [0.05706856772351924, nan], 'false': [2.9692011123696044e-17, nan]}, {'': [0.044218956433752926, 4.3175339846533866e-17], 'true': [1.1564823173178713e-18, 0.044280269066894244], 'true,false': [2.049642507000289e-16, 0.06905769659166829], 'true,false,false': [0.06905769659166829, nan], 'false': [4.3175339846533866e-17, nan]}, {'': [0.037668025501055184, 7.21363183512792e-17], 'true': [-2.9605947323337506e-16, 0.07474500074225189], 'true,false': [0.07474500074225189, nan], 'false': [7.21363183512792e-17, nan]}, {'': [0.035401279801968666, 2.889621570942188e-17], 'true': [1.4043846807224202e-16, 0.059783419387617616], 'true,false': [0.0, 0.06300219138056963], 'true,false,false': [0.06300219138056963, nan], 'false': [2.889621570942188e-17, nan]}, {'': [0.03197751135949476, -7.35689956076911e-18], 'true': [0.03197751135949476, nan], 'true,true': [8.350395398890066e-17, 0.08059143548090773], 'true,true,false': [1.1564823173178713e-18, 0.08999999999999969], 'true,true,true': [nan, 8.350395398890066e-17]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, E).;true;true
9;true,false;genre(A, G).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995107;  // std dev = 6.31e-07, 117.000 (wgt'ed) examples reached here.  /* #pos=117 */
%   | | else if ( actor(B) )
%   | | | then return -0.14185106490048766;  // std dev = 6.66e-08, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.14185106490048827;  // std dev = 0.000, 174.000 (wgt'ed) examples reached here.  /* #neg=174 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109552;  // std dev = 0.000, 117.000 (wgt'ed) examples reached here.  /* #pos=117 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( actor(B) )
%   | | | then return -0.1254446385283916;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
%   | | | else return 0.7194734122109545;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.1254446385283914;  // std dev = 0.000, 164.000 (wgt'ed) examples reached here.  /* #neg=164 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( actor(B) )
%   | | then return -0.1123163781936063;  // std dev = 3.65e-08, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
%   | | else return 0.5553664367462834;  // std dev = 4.54e-07, 122.000 (wgt'ed) examples reached here.  /* #pos=122 */
%   else return -0.11231637819360649;  // std dev = 2.98e-08, 177.000 (wgt'ed) examples reached here.  /* #neg=177 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4175135841583094;  // std dev = 3.32e-07, 117.000 (wgt'ed) examples reached here.  /* #pos=117 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783627;  // std dev = 5.27e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( actor(B) )
%   | | | then return -0.10159632948783624;  // std dev = 3.16e-08, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
%   | | | else return 0.4175135841583102;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.10159632948783652;  // std dev = 0.000, 182.000 (wgt'ed) examples reached here.  /* #neg=182 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926098;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.32071184716015;  // std dev = 1.93e-07, 117.000 (wgt'ed) examples reached here.  /* #pos=117 */
%   | | else if ( actor(B) )
%   | | | then return -0.09269127618926107;  // std dev = 0.000, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
%   | | | else return 0.32071184716014967;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.09269127618926064;  // std dev = 8.30e-08, 170.000 (wgt'ed) examples reached here.  /* #neg=170 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2551722425694898;  // std dev = 0.000, 117.000 (wgt'ed) examples reached here.  /* #pos=117 */
%   | else if ( actor(B) )
%   | | then return -0.08518475138839679;  // std dev = 1.67e-08, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
%   | | else return 0.25517224256948945;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.08518475138839678;  // std dev = 7.15e-08, 171.000 (wgt'ed) examples reached here.  /* #neg=171 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.13903210879592084;  // std dev = 0.209, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.20975771563253542;  // std dev = 1.81e-07, 117.000 (wgt'ed) examples reached here.  /* #pos=117 */
%   | | else if ( actor(B) )
%   | | | then return -0.07877675473109176;  // std dev = 1.49e-08, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   | | | else return 0.20975771563253573;  // std dev = 5.27e-09, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.07877675473109148;  // std dev = 8.30e-08, 172.000 (wgt'ed) examples reached here.  /* #neg=172 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1770964977452781;  // std dev = 0.000, 117.000 (wgt'ed) examples reached here.  /* #pos=117 */
%   | else if ( actor(B) )
%   | | then return -0.07302163470936712;  // std dev = 0.008, 71.000 (wgt'ed) examples reached here.  /* #neg=71 */
%   | | else return 0.17709649774527736;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.0732462257633367;  // std dev = 1.11e-07, 184.000 (wgt'ed) examples reached here.  /* #neg=184 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.15274385809367094;  // std dev = 3.65e-08, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else return 0.14615648485044594;  // std dev = 0.056, 73.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=72 */
%   | else if ( genre(A, E) )
%   | | then return -0.06469806054053254;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( actor(B) )
%   | | | then return -0.06844129572725863;  // std dev = 0.000, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
%   | | | else return 0.15274385809367097;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.06842697784420262;  // std dev = 7.52e-08, 178.000 (wgt'ed) examples reached here.  /* #neg=178 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1344786015613533;  // std dev = 0.004, 117.000 (wgt'ed) examples reached here.  /* #pos=117 */
%   | else if ( genre(A, E) )
%   | | then return -0.06089156784000735;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( actor(B) )
%   | | | then return -0.06420447261135385;  // std dev = 1.97e-08, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
%   | | | else return 0.13400703000801117;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.06419184008202626;  // std dev = 0.000, 177.000 (wgt'ed) examples reached here.  /* #neg=177 */


Results
   AUC ROC   = 0.991725
   AUC PR    = 0.81335
   CLL	      = -0.099216
   Precision = 0.784141 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.879012


Total learning time: 1.6 seconds
Total inference time: 0.991 seconds
AUC ROC: 0.991725


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063846
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.244 seconds
Refined model CLL: -0.063846


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.991725
   AUC PR    = 0.81335
   CLL	      = -0.099216
   Precision = 0.784141 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.879012


Total learning time: 5.377000000000001 seconds
Total inference time: 0.991 seconds
AUC ROC: 0.991725
Total revision time: 5.377000000000001
Best scored revision CLL: -0.063846


Dataset: 4_cora_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 00:01:47
{'AUC ROC': 0.991725, 'AUC PR': 0.81335, 'CLL': -0.099216, 'Precision': [0.784141, 0.5], 'Recall': 1.0, 'F1': 0.879012, 'Learning time': 5.377000000000001, 'Inference time': 0.991, 'parameter_0.6': {'AUC ROC': 0.97199, 'AUC PR': 0.81824, 'CLL': -0.109158, 'Precision': [1.0, 0.5], 'Recall': 0.724719, 'F1': 0.840391, 'Learning time': 1.195, 'Inference time': 1.013}}


Amount of data: 0.8
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;haswordauthor(E, C).;true;true
7;true,true,true;author(F, E), title(F, D).;false;false
7;true,true,false;title(G, D), venue(G, B).;false;false
7;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
7;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
7;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, B).;false;true
8;true,true,false;title(F, D), venue(F, A).;false;false
8;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
8;true,false,false;haswordvenue(A, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
8;false,true;haswordauthor(M, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;true,true;author(F, E), venue(F, B).;true;true
9;true,true,true;samebib(F, G), venue(G, A).;false;false
9;true,true,false;author(H, E), venue(H, A).;false;false
9;true,false;haswordtitle(I, C).;true;true
9;true,false,true;title(J, I), venue(J, A).;false;false
9;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995098;  // std dev = 9.68e-07, 155.000 (wgt'ed) examples reached here.  /* #pos=155 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.04546552273181298;  // std dev = 2.689, 83.000 (wgt'ed) examples reached here.  /* #neg=75 #pos=8 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048835;  // std dev = 0.000, 238.000 (wgt'ed) examples reached here.  /* #neg=238 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109563;  // std dev = 0.000, 155.000 (wgt'ed) examples reached here.  /* #pos=155 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.05038467079417855;  // std dev = 2.704, 93.000 (wgt'ed) examples reached here.  /* #neg=85 #pos=8 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839183;  // std dev = 0.000, 238.000 (wgt'ed) examples reached here.  /* #neg=238 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( movie(E, A) )
%   | | then return 0.34378429340815736;  // std dev = 0.333, 241.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=163 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360685;  // std dev = 0.000, 250.000 (wgt'ed) examples reached here.  /* #neg=250 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4696855658261826;  // std dev = 2.06e-07, 155.000 (wgt'ed) examples reached here.  /* #pos=155 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783627;  // std dev = 3.73e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.05538510318748373;  // std dev = 2.654, 67.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=8 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783656;  // std dev = 0.000, 225.000 (wgt'ed) examples reached here.  /* #neg=225 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14359195639197042;  // std dev = 0.176, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.3563842906668613;  // std dev = 3.32e-07, 155.000 (wgt'ed) examples reached here.  /* #pos=155 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.0942155363397192;  // std dev = 2.724, 110.000 (wgt'ed) examples reached here.  /* #neg=102 #pos=8 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926047;  // std dev = 9.42e-08, 245.000 (wgt'ed) examples reached here.  /* #neg=245 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.27242895289814645;  // std dev = 0.768, 157.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=155 */
%   | else if ( movie(E, A) )
%   | | then return -0.07224053752960204;  // std dev = 0.268, 102.000 (wgt'ed) examples reached here.  /* #neg=94 #pos=8 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 9.06e-08, 247.000 (wgt'ed) examples reached here.  /* #neg=247 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07606588410895881;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(B, E) )
%   | | then return 0.22795309002564584;  // std dev = 1.03e-07, 155.000 (wgt'ed) examples reached here.  /* #pos=155 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.06172378500836684;  // std dev = 2.708, 96.000 (wgt'ed) examples reached here.  /* #neg=88 #pos=8 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109144;  // std dev = 6.83e-08, 225.000 (wgt'ed) examples reached here.  /* #neg=225 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.19033135757349912;  // std dev = 8.43e-08, 155.000 (wgt'ed) examples reached here.  /* #pos=155 */
%   | else if ( movie(E, B) )
%   | | then return -0.04672579049427507;  // std dev = 2.696, 91.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=8 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.07324622576333675;  // std dev = 1.21e-07, 243.000 (wgt'ed) examples reached here.  /* #neg=243 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.16271151400777215;  // std dev = 1.30e-07, 155.000 (wgt'ed) examples reached here.  /* #pos=155 */
%   | else if ( genre(A, E) )
%   | | then return -0.067872884853705;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.046096912614602234;  // std dev = 2.704, 93.000 (wgt'ed) examples reached here.  /* #neg=85 #pos=8 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420268;  // std dev = 9.31e-10, 243.000 (wgt'ed) examples reached here.  /* #neg=243 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return -0.38717693272632225;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0.14174137206750612;  // std dev = 0.000, 155.000 (wgt'ed) examples reached here.  /* #pos=155 */
%   | | else if ( genre(A, G) )
%   | | | then return -0.06370273828566152;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return -0.03496782288059472;  // std dev = 2.695, 87.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.06419184008202622;  // std dev = 4.47e-08, 254.000 (wgt'ed) examples reached here.  /* #neg=254 */


Results
   AUC ROC   = 0.97199
   AUC PR    = 0.81824
   CLL	      = -0.107347
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.840391


Total learning time: 1.341 seconds
Total inference time: 1.073 seconds
AUC ROC: 0.97199


Results scoring model
   AUC ROC   = 0.993625
   AUC PR    = 0.96094
   CLL	      = -0.083229
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.95092
   F1        = 0.974843


Total scoring time: 1.542 seconds
Parameter learned model CLL: -0.083229


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 7, 0], 'true,false,true': [9.68e-07, 0, 155], 'true,false,false,true': [2.689, 75, 8], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 238, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 155], 'true,false,true': [0.0, 6, 0], 'true,false,false,true': [2.704, 85, 8], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 238, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 9, 0], 'true,false,true': [0.333, 78, 163], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 250, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [2.06e-07, 0, 155], 'true,false,true': [3.73e-09, 8, 0], 'true,false,false,true': [2.654, 59, 8], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 225, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.176, 4, 0], 'true,false,true': [3.32e-07, 0, 155], 'true,false,false,true': [2.724, 102, 8], 'true,false,false,false': [0.0, 0, 0], 'false,true': [9.42e-08, 245, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.768, 2, 155], 'true,false,true': [0.268, 94, 8], 'true,false,false': [0.0, 0, 0], 'false,true': [9.06e-08, 247, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 5, 0], 'true,false,true': [1.03e-07, 0, 155], 'true,false,false,true': [2.708, 88, 8], 'true,false,false,false': [0.0, 0, 0], 'false,true': [6.83e-08, 225, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [8.43e-08, 0, 155], 'true,false,true': [2.696, 83, 8], 'true,false,false': [0.0, 0, 0], 'false,true': [1.21e-07, 243, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [1.3e-07, 0, 155], 'true,false,true': [0.0, 5, 0], 'true,false,false,true': [2.704, 85, 8], 'true,false,false,false': [0.0, 0, 0], 'false,true': [9.31e-10, 243, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true,true,false': 'genre(A, G)'}, {'true,true,true,true': [0.0, 1, 0], 'true,true,true,false': [0.0, 0, 155], 'true,true,false,true': [0.0, 11, 0], 'true,true,false,false': [2.695, 79, 8], 'true,false': [0.0, 0, 0], 'false': [4.47e-08, 254, 0]}]]
[{'': [0.2226738858808883, -1.7539657868027682e-16], 'true': [-7.93016446160826e-18, 0.2158216227667592], 'true,false': [6.051073620666659e-15, 0.08709536942952557], 'true,false,false': [0.08709536942952557, nan], 'false': [-1.7539657868027682e-16, nan]}, {'': [0.1715507143923579, -5.784355254349555e-17], 'true': [-2.567122142101007e-15, 0.07417760831016512], 'true,false': [-2.3129646346357427e-18, 0.0786218059891316], 'true,false,false': [0.0786218059891316, nan], 'false': [-5.784355254349555e-17, nan]}, {'': [0.1140227190099225, -9.237055564881302e-17], 'true': [-1.5419764230904951e-18, 0.11079182723358624], 'true,false': [0.11079182723358624, nan], 'false': [-9.237055564881302e-17, nan]}, {'': [0.09242475458747473, -8.092292268378919e-17], 'true': [2.7504880093939363e-16, 0.09413383553084771], 'true,false': [1.734723475976807e-18, 0.10514591222989544], 'true,false,false': [0.10514591222989544, nan], 'false': [-8.092292268378919e-17, nan]}, {'': [0.07769029939158661, 3.6252180395923476e-17], 'true': [0.007772637735295487, 0.07728947898462452], 'true,false': [7.105427357601002e-16, 0.0674380165289258], 'true,false,false': [0.0674380165289258, nan], 'false': [3.6252180395923476e-17, nan]}, {'': [0.05898032815596131, 3.3261742438162584e-17], 'true': [0.0037581615069236666, 0.07196703727608462], 'true,false': [0.07196703727608462, nan], 'false': [3.3261742438162584e-17, nan]}, {'': [0.04879278967471705, 2.0724163126336256e-17], 'true': [0.0, 0.04903553154040693], 'true,false': [6.876220023484841e-17, 0.07638888888888894], 'true,false,false': [0.07638888888888894, nan], 'false': [2.0724163126336256e-17, nan]}, {'': [0.042638001626061094, 6.030841121420603e-17], 'true': [4.584146682323227e-17, 0.07985506282945085], 'true,false': [0.07985506282945085, nan], 'false': [6.030841121420603e-17, nan]}, {'': [0.03936675936380208, 9.13763806275849e-19], 'true': [1.0887348370517664e-16, 0.07463344851255564], 'true,false': [-6.938893903907229e-19, 0.07862180598913196], 'true,false,false': [0.07862180598913196, nan], 'false': [9.13763806275849e-19, nan]}, {'': [0.03711161469872397, 7.867722221753078e-18], 'true': [0.03711161469872397, nan], 'true,true': [0.001781803042308771, 0.07420847942937603], 'true,true,false': [-1.261617073437678e-18, 0.08349848064473549], 'true,true,true': [0.0, -1.1460366705808068e-17]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, E).;true;true
9;true,true;genre(A, F).;true;true
9;true,false;genre(A, G).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995098;  // std dev = 9.68e-07, 155.000 (wgt'ed) examples reached here.  /* #pos=155 */
%   | | else if ( actor(B) )
%   | | | then return -0.14185106490048763;  // std dev = 8.43e-08, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else return -0.14185106490048835;  // std dev = 0.000, 191.000 (wgt'ed) examples reached here.  /* #neg=191 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109563;  // std dev = 0.000, 155.000 (wgt'ed) examples reached here.  /* #pos=155 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( actor(B) )
%   | | | then return -0.12544463852839147;  // std dev = 0.000, 83.000 (wgt'ed) examples reached here.  /* #neg=83 */
%   | | | else return 0.7194734122109543;  // std dev = 2.98e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else return -0.12544463852839186;  // std dev = 0.000, 246.000 (wgt'ed) examples reached here.  /* #neg=246 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( actor(B) )
%   | | then return -0.11231637819360621;  // std dev = 7.30e-08, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
%   | | else return 0.5553664367462833;  // std dev = 5.53e-07, 163.000 (wgt'ed) examples reached here.  /* #pos=163 */
%   else return -0.11231637819360693;  // std dev = 0.000, 271.000 (wgt'ed) examples reached here.  /* #neg=271 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.41751358415830886;  // std dev = 4.66e-07, 155.000 (wgt'ed) examples reached here.  /* #pos=155 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783627;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( actor(B) )
%   | | | then return -0.10159632948783617;  // std dev = 5.77e-08, 83.000 (wgt'ed) examples reached here.  /* #neg=83 */
%   | | | else return 0.41751358415831025;  // std dev = 1.49e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else return -0.10159632948783656;  // std dev = 0.000, 234.000 (wgt'ed) examples reached here.  /* #neg=234 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926097;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( genre(B, E) )
%   | | then return 0.3207118471601497;  // std dev = 2.92e-07, 155.000 (wgt'ed) examples reached here.  /* #pos=155 */
%   | | else if ( actor(B) )
%   | | | then return -0.09269127618926107;  // std dev = 1.83e-08, 89.000 (wgt'ed) examples reached here.  /* #neg=89 */
%   | | | else return 0.3207118471601498;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else return -0.09269127618926047;  // std dev = 9.19e-08, 243.000 (wgt'ed) examples reached here.  /* #neg=243 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.08518475138839682;  // std dev = 5.48e-08, 100.000 (wgt'ed) examples reached here.  /* #neg=100 */
%   | else return 0.25517224256949056;  // std dev = 0.000, 163.000 (wgt'ed) examples reached here.  /* #pos=163 */
%   else return -0.08518475138839678;  // std dev = 8.30e-08, 221.000 (wgt'ed) examples reached here.  /* #neg=221 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( female(B) )
%   | | then return -0.07877675473109173;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.19928746286075005;  // std dev = 0.241, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.20975771563253517;  // std dev = 2.53e-07, 155.000 (wgt'ed) examples reached here.  /* #pos=155 */
%   | | else if ( actor(B) )
%   | | | then return -0.07877675473109161;  // std dev = 5.16e-08, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
%   | | | else return 0.09864660452142447;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else return -0.07877675473109143;  // std dev = 6.32e-08, 241.000 (wgt'ed) examples reached here.  /* #neg=241 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17417867581882807;  // std dev = 0.454, 156.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=155 */
%   | else if ( actor(B) )
%   | | then return -0.07306960433552041;  // std dev = 0.011, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
%   | | else return 0.19387377054679011;  // std dev = 7.45e-09, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else return -0.07324622576333681;  // std dev = 1.16e-07, 256.000 (wgt'ed) examples reached here.  /* #neg=256 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( director(A) )
%   | | then return -0.31436121030077907;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0.15312184540474733;  // std dev = 0.000, 155.000 (wgt'ed) examples reached here.  /* #pos=155 */
%   | else if ( genre(A, E) )
%   | | then return -0.06479079920500631;  // std dev = 0.009, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( actor(B) )
%   | | | then return -0.06843823738705117;  // std dev = 2.89e-08, 76.000 (wgt'ed) examples reached here.  /* #neg=76 */
%   | | | else return 0.16535568645956078;  // std dev = 5.27e-09, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else return -0.06842697784420271;  // std dev = 0.000, 247.000 (wgt'ed) examples reached here.  /* #neg=247 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( genre(A, E) )
%   | | then return -0.25083395195988184;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0.1343020497263083;  // std dev = 0.000, 155.000 (wgt'ed) examples reached here.  /* #pos=155 */
%   | else if ( genre(A, F) )
%   | | then return -0.060482320251108515;  // std dev = 0.009, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( actor(B) )
%   | | | then return -0.0642017742926831;  // std dev = 2.58e-08, 77.000 (wgt'ed) examples reached here.  /* #neg=77 */
%   | | | else return 0.1437775968928129;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else return -0.06419184008202625;  // std dev = 2.58e-08, 242.000 (wgt'ed) examples reached here.  /* #neg=242 */


Results
   AUC ROC   = 0.998096
   AUC PR    = 0.964754
   CLL	      = -0.094374
   Precision = 0.784141 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.879012


Total learning time: 1.699 seconds
Total inference time: 0.98 seconds
AUC ROC: 0.998096


Results scoring model
   AUC ROC   = 0.999997
   AUC PR    = 0.999848
   CLL	      = -0.063906
   Precision = 0.993902 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.996942


Total scoring time: 1.479 seconds
Refined model CLL: -0.063906


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.998096
   AUC PR    = 0.964754
   CLL	      = -0.094374
   Precision = 0.784141 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.879012


Total learning time: 6.061 seconds
Total inference time: 0.98 seconds
AUC ROC: 0.998096
Total revision time: 6.061
Best scored revision CLL: -0.063906


Dataset: 4_cora_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 00:01:55
{'AUC ROC': 0.998096, 'AUC PR': 0.964754, 'CLL': -0.094374, 'Precision': [0.784141, 0.5], 'Recall': 1.0, 'F1': 0.879012, 'Learning time': 6.061, 'Inference time': 0.98, 'parameter_0.8': {'AUC ROC': 0.97199, 'AUC PR': 0.81824, 'CLL': -0.107347, 'Precision': [1.0, 0.5], 'Recall': 0.724719, 'F1': 0.840391, 'Learning time': 1.341, 'Inference time': 1.073}}


Amount of data: 1.0
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;haswordauthor(E, C).;true;true
7;true,true,true;author(F, E), title(F, D).;false;false
7;true,true,false;title(G, D), venue(G, B).;false;false
7;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
7;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
7;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, B).;false;true
8;true,true,false;title(F, D), venue(F, A).;false;false
8;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
8;true,false,false;haswordvenue(A, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
8;false,true;haswordauthor(M, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;true,true;author(F, E), venue(F, B).;true;true
9;true,true,true;samebib(F, G), venue(G, A).;false;false
9;true,true,false;author(H, E), venue(H, A).;false;false
9;true,false;haswordtitle(I, C).;true;true
9;true,false,true;title(J, I), venue(J, A).;false;false
9;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995093;  // std dev = 1.09e-06, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.050941973991396765;  // std dev = 3.015, 110.000 (wgt'ed) examples reached here.  /* #neg=100 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048763;  // std dev = 2.00e-07, 337.000 (wgt'ed) examples reached here.  /* #neg=337 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.719473412210957;  // std dev = 0.000, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 5.27e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.05101657369260679;  // std dev = 3.025, 118.000 (wgt'ed) examples reached here.  /* #neg=108 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839208;  // std dev = 0.000, 290.000 (wgt'ed) examples reached here.  /* #neg=290 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360638;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( movie(E, A) )
%   | | then return 0.34657690111952616;  // std dev = 0.332, 300.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=204 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360699;  // std dev = 0.000, 279.000 (wgt'ed) examples reached here.  /* #neg=279 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4689900395395729;  // std dev = 0.000, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783627;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.09494527046504658;  // std dev = 3.034, 126.000 (wgt'ed) examples reached here.  /* #neg=116 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783662;  // std dev = 0.000, 302.000 (wgt'ed) examples reached here.  /* #neg=302 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926096;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.35590341860712565;  // std dev = 0.000, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.07703115725594847;  // std dev = 3.026, 119.000 (wgt'ed) examples reached here.  /* #neg=109 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926042;  // std dev = 1.56e-07, 301.000 (wgt'ed) examples reached here.  /* #neg=301 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2790673226138146;  // std dev = 4.46e-07, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else if ( movie(E, A) )
%   | | then return -0.06534916797764746;  // std dev = 0.273, 123.000 (wgt'ed) examples reached here.  /* #neg=113 #pos=10 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 1.01e-07, 290.000 (wgt'ed) examples reached here.  /* #neg=290 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08022832297412634;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( genre(B, E) )
%   | | then return 0.22650362589555395;  // std dev = 2.67e-07, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.04750303305651591;  // std dev = 3.008, 105.000 (wgt'ed) examples reached here.  /* #neg=95 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109144;  // std dev = 5.37e-08, 263.000 (wgt'ed) examples reached here.  /* #neg=263 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1892848624253572;  // std dev = 0.000, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else if ( movie(E, B) )
%   | | then return -0.05036581893389164;  // std dev = 3.021, 119.000 (wgt'ed) examples reached here.  /* #neg=109 #pos=10 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.07324622576333693;  // std dev = 1.02e-07, 289.000 (wgt'ed) examples reached here.  /* #neg=289 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.16192850295110708;  // std dev = 2.67e-07, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else if ( genre(A, E) )
%   | | then return -0.0711046732333338;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.03858620490163304;  // std dev = 3.012, 108.000 (wgt'ed) examples reached here.  /* #neg=98 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420292;  // std dev = 0.000, 283.000 (wgt'ed) examples reached here.  /* #neg=283 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.14113716378531552;  // std dev = 0.000, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | | else if ( genre(A, G) )
%   | | | then return -0.06654914176637296;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return -0.03834775470526473;  // std dev = 3.019, 113.000 (wgt'ed) examples reached here.  /* #neg=103 #pos=10 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.06419184008202607;  // std dev = 9.06e-08, 279.000 (wgt'ed) examples reached here.  /* #neg=279 */


Results
   AUC ROC   = 0.97199
   AUC PR    = 0.81824
   CLL	      = -0.109726
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.840391


Total learning time: 1.364 seconds
Total inference time: 1.035 seconds
AUC ROC: 0.97199


Results scoring model
   AUC ROC   = 0.993632
   AUC PR    = 0.960741
   CLL	      = -0.083355
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.95098
   F1        = 0.974874


Total scoring time: 1.691 seconds
Parameter learned model CLL: -0.083355


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 7, 0], 'true,false,true': [1.09e-06, 0, 194], 'true,false,false,true': [3.015, 100, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2e-07, 337, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 194], 'true,false,true': [5.27e-09, 11, 0], 'true,false,false,true': [3.025, 108, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 290, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 10, 0], 'true,false,true': [0.332, 96, 204], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 279, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 194], 'true,false,true': [0.0, 6, 0], 'true,false,false,true': [3.034, 116, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 302, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 2, 0], 'true,false,true': [0.0, 0, 194], 'true,false,false,true': [3.026, 109, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.56e-07, 301, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [4.46e-07, 0, 194], 'true,false,true': [0.273, 113, 10], 'true,false,false': [0.0, 0, 0], 'false,true': [1.01e-07, 290, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 8, 0], 'true,false,true': [2.67e-07, 0, 194], 'true,false,false,true': [3.008, 95, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.37e-08, 263, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 194], 'true,false,true': [3.021, 109, 10], 'true,false,false': [0.0, 0, 0], 'false,true': [1.02e-07, 289, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [2.67e-07, 0, 194], 'true,false,true': [0.0, 9, 0], 'true,false,false,true': [3.012, 98, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 283, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true,true,false': 'genre(A, G)'}, {'true,true,true,true': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 194], 'true,true,false,true': [0.0, 10, 0], 'true,true,false,false': [3.019, 103, 10], 'true,false': [0.0, 0, 0], 'false': [9.06e-08, 279, 0]}]]
[{'': [0.22568004880016174, 1.1859949224482385e-16], 'true': [-7.93016446160826e-18, 0.22074099722992158], 'true,false': [6.15315358802561e-15, 0.08264462809917324], 'true,false,false': [0.08264462809917324, nan], 'false': [1.1859949224482385e-16, nan]}, {'': [0.17326765736425, -1.0719394720518753e-16], 'true': [-3.516087764586063e-15, 0.07138202541396427], 'true,false': [2.523234146875356e-18, 0.0775639184142485], 'true,false,false': [0.0775639184142485, nan], 'false': [-1.0719394720518753e-16, nan]}, {'': [0.11299860401018359, -1.0186992627384949e-16], 'true': [0.0, 0.1099722227955093], 'true,false': [0.1099722227955093, nan], 'false': [-1.0186992627384949e-16, nan]}, {'': [0.10495333294919323, -5.2937786604643225e-17], 'true': [-3.6625914214438153e-17, 0.06974698910107947], 'true,false': [0.0, 0.07306626354245421], 'true,false,false': [0.07306626354245421, nan], 'false': [-5.2937786604643225e-17, nan]}, {'': [0.07347438327651283, 8.114586890947988e-17], 'true': [0.0, 0.07343177895297642], 'true,false': [-5.860146274310105e-16, 0.07697196525669078], 'true,false,false': [0.07697196525669078, nan], 'false': [8.114586890947988e-17, nan]}, {'': [0.05698126509650276, 3.522086836741876e-17], 'true': [1.0255255980042682e-15, 0.0742585475548485], 'true,false': [0.0742585475548485, nan], 'false': [3.522086836741876e-17, nan]}, {'': [0.04725684325941045, 1.0975588836598506e-17], 'true': [0.0, 0.04736647854526447], 'true,false': [3.662591421443815e-16, 0.08616780045351438], 'true,false,false': [0.08616780045351438, nan], 'false': [1.0975588836598506e-17, nan]}, {'': [0.042689789201970176, 3.611106031652758e-17], 'true': [-2.518031602242623e-16, 0.076687798720981], 'true,false': [0.076687798720981, nan], 'false': [3.611106031652758e-17, nan]}, {'': [0.03887759310512824, -4.158432530398113e-17], 'true': [3.662591421443815e-16, 0.07763127392997292], 'true,false': [0.0, 0.08401920438957526], 'true,false,false': [0.08401920438957526, nan], 'false': [-4.158432530398113e-17, nan]}, {'': [0.036623516575196156, 2.944677556353462e-17], 'true': [0.036623516575196156, nan], 'true,true': [-1.6023837468816692e-16, 0.07416545390179376], 'true,true,false': [0.0, 0.08066410838750161], 'true,true,true': [nan, -1.6023837468816692e-16]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, E).;true;true
9;true,false;genre(A, G).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995093;  // std dev = 1.09e-06, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | | else if ( actor(B) )
%   | | | then return -0.14185106490048763;  // std dev = 8.16e-08, 109.000 (wgt'ed) examples reached here.  /* #neg=109 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.14185106490048785;  // std dev = 8.43e-08, 297.000 (wgt'ed) examples reached here.  /* #neg=297 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.7194734122109543;  // std dev = 2.06e-07, 75.000 (wgt'ed) examples reached here.  /* #pos=75 */
%   | | else if ( actor(A) )
%   | | | then return 0.7194734122109553;  // std dev = 0.000, 119.000 (wgt'ed) examples reached here.  /* #pos=119 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( actor(B) )
%   | | | then return -0.12544463852839136;  // std dev = 0.000, 101.000 (wgt'ed) examples reached here.  /* #neg=101 */
%   | | | else return 0.7194734122109544;  // std dev = 2.98e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.12544463852839197;  // std dev = 0.000, 282.000 (wgt'ed) examples reached here.  /* #neg=282 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( actor(B) )
%   | | then return -0.11231637819360618;  // std dev = 8.82e-08, 114.000 (wgt'ed) examples reached here.  /* #neg=114 */
%   | | else return 0.5553664367462837;  // std dev = 5.53e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.1123163781936069;  // std dev = 0.000, 294.000 (wgt'ed) examples reached here.  /* #neg=294 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4175135841583128;  // std dev = 0.000, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 3.73e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( actor(B) )
%   | | | then return -0.10159632948783631;  // std dev = 0.000, 106.000 (wgt'ed) examples reached here.  /* #neg=106 */
%   | | | else return 0.4175135841583102;  // std dev = 2.11e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.1015963294878366;  // std dev = 0.000, 273.000 (wgt'ed) examples reached here.  /* #neg=273 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926097;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(B, E) )
%   | | then return 0.32071184716014894;  // std dev = 3.95e-07, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | | else if ( actor(B) )
%   | | | then return -0.09269127618926103;  // std dev = 3.16e-08, 91.000 (wgt'ed) examples reached here.  /* #neg=91 */
%   | | | else return 0.3207118471601497;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.09269127618926044;  // std dev = 1.37e-07, 279.000 (wgt'ed) examples reached here.  /* #neg=279 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2551722425694885;  // std dev = 2.31e-07, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else if ( actor(B) )
%   | | then return -0.0851847513883968;  // std dev = 5.96e-08, 114.000 (wgt'ed) examples reached here.  /* #neg=114 */
%   | | else return 0.2551722425694894;  // std dev = 1.83e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.08518475138839678;  // std dev = 1.01e-07, 293.000 (wgt'ed) examples reached here.  /* #neg=293 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07877675473109179;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(B, E) )
%   | | then return 0.209757715632535;  // std dev = 2.98e-07, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | | else if ( actor(B) )
%   | | | then return -0.07877675473109154;  // std dev = 7.22e-08, 127.000 (wgt'ed) examples reached here.  /* #neg=127 */
%   | | | else return 0.2097577156325357;  // std dev = 1.97e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.07877675473109143;  // std dev = 3.33e-08, 302.000 (wgt'ed) examples reached here.  /* #neg=302 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1753816018132499;  // std dev = 0.334, 195.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=194 */
%   | else if ( actor(B) )
%   | | then return -0.07324622576333707;  // std dev = 0.000, 106.000 (wgt'ed) examples reached here.  /* #neg=106 */
%   | | else return 0.17709649774527736;  // std dev = 7.45e-09, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.07324622576333692;  // std dev = 1.03e-07, 285.000 (wgt'ed) examples reached here.  /* #neg=285 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.15124826633504404;  // std dev = 0.334, 195.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=194 */
%   | else if ( genre(A, E) )
%   | | then return -0.06842697784420272;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( actor(B) )
%   | | | then return -0.06842697784420265;  // std dev = 4.15e-08, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */
%   | | | else return 0.15274385809367094;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.06842697784420294;  // std dev = 0.000, 289.000 (wgt'ed) examples reached here.  /* #neg=289 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1326366469367926;  // std dev = 0.339, 195.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=194 */
%   | else if ( genre(A, E) )
%   | | then return -0.0641918400820262;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( actor(B) )
%   | | | then return -0.06419184008202626;  // std dev = 0.000, 101.000 (wgt'ed) examples reached here.  /* #neg=101 */
%   | | | else return 0.04309793909892026;  // std dev = 0.953, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   else return -0.06419184008202612;  // std dev = 7.30e-08, 268.000 (wgt'ed) examples reached here.  /* #neg=268 */


Results
   AUC ROC   = 0.998096
   AUC PR    = 0.964754
   CLL	      = -0.094752
   Precision = 0.784141 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.879012


Total learning time: 1.841 seconds
Total inference time: 1.011 seconds
AUC ROC: 0.998096


Results scoring model
   AUC ROC   = 0.999998
   AUC PR    = 0.999878
   CLL	      = -0.063991
   Precision = 0.995122 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.997555


Total scoring time: 1.777 seconds
Refined model CLL: -0.063991


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.998096
   AUC PR    = 0.964754
   CLL	      = -0.094752
   Precision = 0.784141 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.879012


Total learning time: 6.673 seconds
Total inference time: 1.011 seconds
AUC ROC: 0.998096
Total revision time: 6.673
Best scored revision CLL: -0.063991


Dataset: 4_cora_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 00:02:04
{'AUC ROC': 0.998096, 'AUC PR': 0.964754, 'CLL': -0.094752, 'Precision': [0.784141, 0.5], 'Recall': 1.0, 'F1': 0.879012, 'Learning time': 6.673, 'Inference time': 1.011, 'parameter_1.0': {'AUC ROC': 0.97199, 'AUC PR': 0.81824, 'CLL': -0.109726, 'Precision': [1.0, 0.5], 'Recall': 0.724719, 'F1': 0.840391, 'Learning time': 1.364, 'Inference time': 1.035}}


Starting fold 4

Target train facts examples: 927
Target train pos examples: 337
Target train neg examples: 12345

Target test facts examples: 151
Target test pos	 examples: 45
Target test neg examples: 1891

Amount of data: 0.2
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;haswordauthor(E, C).;true;true
7;true,true,true;author(F, E), title(F, D).;false;false
7;true,true,false;title(G, D), venue(G, B).;false;false
7;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
7;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
7;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, B).;false;true
8;true,true,false;title(F, D), venue(F, A).;false;false
8;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
8;true,false,false;haswordvenue(A, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
8;false,true;haswordauthor(M, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;true,true;author(F, E), venue(F, B).;true;true
9;true,true,true;samebib(F, G), venue(G, A).;false;false
9;true,true,false;author(H, E), venue(H, A).;false;false
9;true,false;haswordtitle(I, C).;true;true
9;true,false,true;title(J, I), venue(J, A).;false;false
9;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995124;  // std dev = 0.000, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.13721870254137283;  // std dev = 2.941, 43.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=12 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048763;  // std dev = 8.69e-08, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109545;  // std dev = 0.000, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.08550896511570963;  // std dev = 3.010, 49.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=12 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839136;  // std dev = 0.000, 105.000 (wgt'ed) examples reached here.  /* #neg=105 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360638;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( movie(E, A) )
%   | | then return 0.32843489896639305;  // std dev = 0.381, 104.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=67 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.1123163781936062;  // std dev = 7.74e-08, 96.000 (wgt'ed) examples reached here.  /* #neg=96 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.473510513563749;  // std dev = 5.96e-08, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783633;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.01239266809823912;  // std dev = 3.029, 51.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=12 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783626;  // std dev = 4.75e-09, 96.000 (wgt'ed) examples reached here.  /* #neg=96 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926098;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.3590320581834838;  // std dev = 0.000, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.08263687568365782;  // std dev = 2.882, 39.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=12 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.092691276189261;  // std dev = 4.21e-08, 97.000 (wgt'ed) examples reached here.  /* #neg=97 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2811832595649473;  // std dev = 0.000, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | else if ( movie(E, A) )
%   | | then return -0.0014685676124992966;  // std dev = 0.423, 51.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=12 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839682;  // std dev = 5.87e-08, 106.000 (wgt'ed) examples reached here.  /* #neg=106 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08507037809190529;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.22797462714113173;  // std dev = 4.21e-08, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.1033305061550495;  // std dev = 2.808, 35.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=12 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.0787767547310916;  // std dev = 5.77e-08, 100.000 (wgt'ed) examples reached here.  /* #neg=100 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1903468973323228;  // std dev = 6.14e-08, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | else if ( movie(E, B) )
%   | | then return -0.015439046679184545;  // std dev = 3.004, 53.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=12 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.07324622576333714;  // std dev = 0.000, 119.000 (wgt'ed) examples reached here.  /* #neg=119 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.16272313472048058;  // std dev = 0.000, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | else if ( genre(A, E) )
%   | | then return -0.07756664123710132;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.059888770383889664;  // std dev = 2.865, 38.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=12 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420265;  // std dev = 4.75e-09, 100.000 (wgt'ed) examples reached here.  /* #neg=100 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.14175033491542705;  // std dev = 5.77e-08, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | | else if ( genre(A, G) )
%   | | | then return -0.07219543331695541;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return 0.04022217880526392;  // std dev = 2.882, 39.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=12 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.06419184008202626;  // std dev = 0.000, 111.000 (wgt'ed) examples reached here.  /* #neg=111 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.132484
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 0.978 seconds
Total inference time: 0.884 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.979108
   AUC PR    = 0.864057
   CLL	      = -0.128616
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.820896
   F1        = 0.901639


Total scoring time: 1.004 seconds
Parameter learned model CLL: -0.128616


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.0, 0, 55], 'true,false,false,true': [2.941, 31, 12], 'true,false,false,false': [0.0, 0, 0], 'false,true': [8.69e-08, 95, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 55], 'true,false,true': [0.0, 4, 0], 'true,false,false,true': [3.01, 37, 12], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 105, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 5, 0], 'true,false,true': [0.381, 37, 67], 'true,false,false': [0.0, 0, 0], 'false,true': [7.74e-08, 96, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [5.96e-08, 0, 55], 'true,false,true': [0.0, 3, 0], 'true,false,false,true': [3.029, 39, 12], 'true,false,false,false': [0.0, 0, 0], 'false,true': [4.75e-09, 96, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 2, 0], 'true,false,true': [0.0, 0, 55], 'true,false,false,true': [2.882, 27, 12], 'true,false,false,false': [0.0, 0, 0], 'false,true': [4.21e-08, 97, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 55], 'true,false,true': [0.423, 39, 12], 'true,false,false': [0.0, 0, 0], 'false,true': [5.87e-08, 106, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 4, 0], 'true,false,true': [4.21e-08, 0, 55], 'true,false,false,true': [2.808, 23, 12], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.77e-08, 100, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [6.14e-08, 0, 55], 'true,false,true': [3.004, 41, 12], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 119, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 55], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [2.865, 26, 12], 'true,false,false,false': [0.0, 0, 0], 'false,true': [4.75e-09, 100, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true,true,false': 'genre(A, G)'}, {'true,true,true,true': [0.0, 0, 0], 'true,true,true,false': [5.77e-08, 0, 55], 'true,true,false,true': [0.0, 2, 0], 'true,true,false,false': [2.882, 27, 12], 'true,false': [0.0, 0, 0], 'false': [0.0, 111, 0]}]]
[{'': [0.21875318845015737, 7.946859544685331e-17], 'true': [0.0, 0.2162640566430646], 'true,false': [-1.291895883200182e-16, 0.20118983234180587], 'true,false,false': [0.20118983234180587, nan], 'false': [7.946859544685331e-17, nan]}, {'': [0.19097560754578474, -8.458842092382146e-18], 'true': [-3.2297397080004555e-16, 0.17407161867059687], 'true,false': [0.0, 0.18492294877134463], 'true,false,false': [0.18492294877134463, nan], 'false': [-8.458842092382146e-18, nan]}, {'': [0.14678506198388777, 6.245004513516506e-17], 'true': [0.0, 0.1449309494976291], 'true,false': [0.1449309494976291, nan], 'false': [6.245004513516506e-17, nan]}, {'': [0.13914846526020438, 2.1973164029039556e-17], 'true': [6.45947941600091e-17, 0.17061639779664597], 'true,false': [-1.1564823173178713e-18, 0.17993079584775085], 'true,false,false': [0.17993079584775085, nan], 'false': [2.1973164029039556e-17, nan]}, {'': [0.10701474415622976, 1.8312957107219077e-17], 'true': [0.0, 0.10692494836952494], 'true,false': [-3.229739708000455e-17, 0.21301775147929006], 'true,false,false': [0.21301775147929006, nan], 'false': [1.8312957107219077e-17, nan]}, {'': [0.10604974755801574, 3.2468786569226275e-17], 'true': [-1.1304088978001593e-16, 0.17896369740028464], 'true,false': [0.17896369740028464, nan], 'false': [3.2468786569226275e-17, nan]}, {'': [0.09027760394917393, 3.3306690738754695e-17], 'true': [0.0, 0.09131128243701742], 'true,false': [3.229739708000455e-17, 0.2253061224489795], 'true,false,false': [0.2253061224489795, nan], 'false': [3.3306690738754695e-17, nan]}, {'': [0.09412110247371513, -1.0262565773845985e-17], 'true': [6.863196879500968e-17, 0.17022790752083689], 'true,false': [0.17022790752083689, nan], 'false': [-1.0262565773845985e-17, nan]}, {'': [0.09028798716340217, 2.3314683517128286e-17], 'true': [-4.844609562000683e-17, 0.21099835499196415], 'true,false': [0.0, 0.2160664819944598], 'true,false,false': [0.2160664819944598, nan], 'false': [2.3314683517128286e-17, nan]}, {'': [0.08959090699423433, -1.650331523091449e-17], 'true': [0.08959090699423433, nan], 'true,true': [6.055761952500853e-17, 0.20321304386530345], 'true,true,false': [0.0, 0.21301775147929], 'true,true,true': [nan, 6.055761952500853e-17]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, E).;true;true
9;true,false;genre(A, G).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995124;  // std dev = 0.000, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | | else if ( actor(B) )
%   | | | then return -0.1418510649004877;  // std dev = 2.11e-08, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else return -0.14185106490048763;  // std dev = 8.16e-08, 111.000 (wgt'ed) examples reached here.  /* #neg=111 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109545;  // std dev = 0.000, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.7194734122109542;  // std dev = 4.21e-08, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.1295257424563033;  // std dev = 0.153, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   else return -0.1254446385283913;  // std dev = 0.000, 115.000 (wgt'ed) examples reached here.  /* #neg=115 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( director(B), actor(A) )
%   | | then return 0.5553664367462837;  // std dev = 2.15e-07, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | | else return -0.1165304913775124;  // std dev = 0.141, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   else return -0.11231637819360624;  // std dev = 7.15e-08, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4175135841583103;  // std dev = 0.000, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( actor(B) )
%   | | | then return -0.10084168587388033;  // std dev = 7.45e-09, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | | else return 0.4175135841583102;  // std dev = 2.11e-08, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else return -0.10159632948783631;  // std dev = 0.000, 106.000 (wgt'ed) examples reached here.  /* #neg=106 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926096;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(B, E) )
%   | | then return 0.3207118471601496;  // std dev = 0.000, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.3207118471601497;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.10181275222741239;  // std dev = 0.219, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   else return -0.09269127618926107;  // std dev = 0.000, 81.000 (wgt'ed) examples reached here.  /* #neg=81 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.25517224256948945;  // std dev = 1.49e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.240667320399677;  // std dev = 0.086, 36.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=35 */
%   | else if ( director(B), actor(A) )
%   | | then return 0.2551722425694894;  // std dev = 2.11e-08, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return -0.08978940526903018;  // std dev = 0.208, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   else return -0.08518475138839682;  // std dev = 5.05e-08, 87.000 (wgt'ed) examples reached here.  /* #neg=87 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.13799523725352658;  // std dev = 0.206, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.21129418368359515;  // std dev = 0.009, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.20975771563253567;  // std dev = 2.11e-08, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.08347315640391367;  // std dev = 0.196, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   else return -0.0787767547310916;  // std dev = 5.77e-08, 100.000 (wgt'ed) examples reached here.  /* #neg=100 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1782228416814278;  // std dev = 0.008, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | else if ( director(B), actor(A) )
%   | | then return 0.17709649774527736;  // std dev = 1.05e-08, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( actor(A) )
%   | | | then return -0.07150322867512758;  // std dev = 0.000, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | | else return -0.13271877240462035;  // std dev = 0.221, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.07324622576333707;  // std dev = 0.000, 96.000 (wgt'ed) examples reached here.  /* #neg=96 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.15239957370377955;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.1409576377912307;  // std dev = 0.079, 36.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=35 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.15274385809367094;  // std dev = 1.05e-08, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.0715790929207918;  // std dev = 0.166, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   else return -0.06842697784420265;  // std dev = 4.94e-08, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.13373819510482315;  // std dev = 2.24e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.12305446878405465;  // std dev = 0.081, 36.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=35 */
%   | else if ( genre(A, E) )
%   | | then return -0.060973571829768494;  // std dev = 2.63e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.13400703000801117;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.06727802414487262;  // std dev = 0.158, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   else return -0.06419184008202626;  // std dev = 0.000, 109.000 (wgt'ed) examples reached here.  /* #neg=109 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064256
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.285 seconds
Total inference time: 0.857 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.065919
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.985 seconds
Refined model CLL: -0.065919


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064256
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 4.252 seconds
Total inference time: 0.857 seconds
AUC ROC: 1.0
Total revision time: 4.252
Best scored revision CLL: -0.065919


Dataset: 4_cora_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 00:02:11
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.064256, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 4.252, 'Inference time': 0.857, 'parameter_0.2': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.132484, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 0.978, 'Inference time': 0.884}}


Amount of data: 0.4
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;haswordauthor(E, C).;true;true
7;true,true,true;author(F, E), title(F, D).;false;false
7;true,true,false;title(G, D), venue(G, B).;false;false
7;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
7;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
7;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, B).;false;true
8;true,true,false;title(F, D), venue(F, A).;false;false
8;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
8;true,false,false;haswordvenue(A, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
8;false,true;haswordauthor(M, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;true,true;author(F, E), venue(F, B).;true;true
9;true,true,true;samebib(F, G), venue(G, A).;false;false
9;true,true,false;author(H, E), venue(H, A).;false;false
9;true,false;haswordtitle(I, C).;true;true
9;true,false,true;title(J, I), venue(J, A).;false;false
9;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( genre(B, E) )
%   | | then return 0.858148935099511;  // std dev = 5.72e-07, 111.000 (wgt'ed) examples reached here.  /* #pos=111 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.09773226843284516;  // std dev = 4.182, 96.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=23 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048827;  // std dev = 0.000, 178.000 (wgt'ed) examples reached here.  /* #neg=178 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7119295010436393;  // std dev = 0.841, 112.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=111 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.11964020547644529;  // std dev = 4.087, 84.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=23 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839177;  // std dev = 0.000, 226.000 (wgt'ed) examples reached here.  /* #neg=226 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1330216101920298;  // std dev = 0.146, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( movie(E, A) )
%   | | then return 0.33087773092977224;  // std dev = 0.379, 207.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=134 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.1123163781936065;  // std dev = 0.000, 184.000 (wgt'ed) examples reached here.  /* #neg=184 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4747823730757708;  // std dev = 1.98e-07, 111.000 (wgt'ed) examples reached here.  /* #pos=111 */
%   | else if ( genre(A, E) )
%   | | then return -0.09972199787087797;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.06155322939981761;  // std dev = 4.058, 81.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=23 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783652;  // std dev = 0.000, 199.000 (wgt'ed) examples reached here.  /* #neg=199 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1197439644507445;  // std dev = 0.186, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( genre(B, E) )
%   | | then return 0.35991374385767455;  // std dev = 0.000, 111.000 (wgt'ed) examples reached here.  /* #pos=111 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.00888148117317382;  // std dev = 4.175, 95.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=23 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926061;  // std dev = 8.56e-08, 179.000 (wgt'ed) examples reached here.  /* #neg=179 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2768760979365173;  // std dev = 0.547, 112.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=111 */
%   | else if ( movie(E, A) )
%   | | then return 0.03618741692673489;  // std dev = 0.441, 86.000 (wgt'ed) examples reached here.  /* #neg=63 #pos=23 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 8.02e-08, 213.000 (wgt'ed) examples reached here.  /* #neg=213 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12452165396563235;  // std dev = 0.220, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(B, E) )
%   | | then return 0.22925398866926974;  // std dev = 0.000, 111.000 (wgt'ed) examples reached here.  /* #pos=111 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.03910764549196991;  // std dev = 4.068, 82.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=23 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109147;  // std dev = 7.30e-08, 200.000 (wgt'ed) examples reached here.  /* #neg=200 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.191269489997437;  // std dev = 0.000, 111.000 (wgt'ed) examples reached here.  /* #pos=111 */
%   | else if ( movie(E, B) )
%   | | then return 0.017466133264488717;  // std dev = 4.095, 91.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=23 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.0732462257633367;  // std dev = 1.06e-07, 182.000 (wgt'ed) examples reached here.  /* #neg=182 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.15450667405006016;  // std dev = 0.705, 113.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=111 */
%   | else if ( genre(A, E) )
%   | | then return -0.07651615722785687;  // std dev = 2.63e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.02191883546937873;  // std dev = 4.087, 84.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=23 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420261;  // std dev = 4.47e-09, 193.000 (wgt'ed) examples reached here.  /* #neg=193 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return -0.3752464697998773;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0.14337231518117302;  // std dev = 3.65e-08, 111.000 (wgt'ed) examples reached here.  /* #pos=111 */
%   | | else if ( genre(A, G) )
%   | | | then return -0.07128158706987708;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return 0.0023834358093538285;  // std dev = 4.130, 89.000 (wgt'ed) examples reached here.  /* #neg=66 #pos=23 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.06419184008202626;  // std dev = 0.000, 196.000 (wgt'ed) examples reached here.  /* #neg=196 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.12547
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.166 seconds
Total inference time: 0.856 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.979735
   AUC PR    = 0.868735
   CLL	      = -0.122974
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.828358
   F1        = 0.906122


Total scoring time: 1.131 seconds
Parameter learned model CLL: -0.122974


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 7, 0], 'true,false,true': [5.72e-07, 0, 111], 'true,false,false,true': [4.182, 73, 23], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 178, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.841, 1, 111], 'true,false,true': [0.0, 7, 0], 'true,false,false,true': [4.087, 61, 23], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 226, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.146, 11, 0], 'true,false,true': [0.379, 73, 134], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 184, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.98e-07, 0, 111], 'true,false,true': [0.0, 6, 0], 'true,false,false,true': [4.058, 58, 23], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 199, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.186, 7, 0], 'true,false,true': [0.0, 0, 111], 'true,false,false,true': [4.175, 72, 23], 'true,false,false,false': [0.0, 0, 0], 'false,true': [8.56e-08, 179, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.547, 1, 111], 'true,false,true': [0.441, 63, 23], 'true,false,false': [0.0, 0, 0], 'false,true': [8.02e-08, 213, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.22, 6, 0], 'true,false,true': [0.0, 0, 111], 'true,false,false,true': [4.068, 59, 23], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.3e-08, 200, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 111], 'true,false,true': [4.095, 68, 23], 'true,false,false': [0.0, 0, 0], 'false,true': [1.06e-07, 182, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.705, 2, 111], 'true,false,true': [2.63e-09, 9, 0], 'true,false,false,true': [4.087, 61, 23], 'true,false,false,false': [0.0, 0, 0], 'false,true': [4.47e-09, 193, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true,true,false': 'genre(A, G)'}, {'true,true,true,true': [0.0, 1, 0], 'true,true,true,false': [3.65e-08, 0, 111], 'true,true,false,true': [0.0, 6, 0], 'true,true,false,false': [4.13, 66, 23], 'true,false': [0.0, 0, 0], 'false': [0.0, 196, 0]}]]
[{'': [0.23408157917722508, -1.9709577291098283e-16], 'true': [-7.93016446160826e-18, 0.22829004177460827], 'true,false': [2.944591517564379e-15, 0.18218315972222318], 'true,false,false': [0.18218315972222318, nan], 'false': [-1.9709577291098283e-16, nan]}, {'': [0.18004934217230076, -5.1089909097794814e-17], 'true': [0.006317076122738019, 0.18780773048593957], 'true,false': [-1.982541115402065e-18, 0.19883786848072613], 'true,false,false': [0.19883786848072613, nan], 'false': [-5.1089909097794814e-17, nan]}, {'': [0.14688662414465678, -2.172175482962263e-17], 'true': [0.0019291798444884191, 0.14373083001726417], 'true,false': [0.14373083001726417, nan], 'false': [-2.172175482962263e-17, nan]}, {'': [0.12826840413225668, -9.149576685353049e-17], 'true': [3.5207072492617577e-16, 0.19097047542547], 'true,false': [0.0, 0.2033226642280136], 'true,false,false': [0.2033226642280136, nan], 'false': [-9.149576685353049e-17, nan]}, {'': [0.11482327697565618, 4.093559755601136e-17], 'true': [0.004916089269354981, 0.11523938746723593], 'true,false': [-4.1608358400366226e-16, 0.18349030470914146], 'true,false,false': [0.18349030470914146, nan], 'false': [4.093559755601136e-17, nan]}, {'': [0.10024172228799572, 3.023142508368971e-17], 'true': [0.002668699866339711, 0.19454449165078297], 'true,false': [0.19454449165078297, nan], 'false': [3.023142508368971e-17, nan]}, {'': [0.0941496031831172, 2.6645352591003756e-17], 'true': [0.008035830434255443, 0.09457980603521306], 'true,false': [-1.5203054030903045e-16, 0.20181439619274236], 'true,false,false': [0.20181439619274236, nan], 'false': [2.6645352591003756e-17, nan]}, {'': [0.09048592606338933, 6.161127774018726e-17], 'true': [-3.200642953874325e-17, 0.18425963935840345], 'true,false': [0.18425963935840345, nan], 'false': [6.161127774018726e-17, nan]}, {'': [0.08887812679891915, 2.013357816677745e-17], 'true': [0.004402125594045319, 0.18044243855921288], 'true,false': [7.709882115452476e-19, 0.1988378684807257], 'true,false,false': [0.1988378684807257, nan], 'false': [2.013357816677745e-17, nan]}, {'': [0.08876959873649622, -2.832201593431522e-18], 'true': [0.08876959873649622, nan], 'true,true': [0.002380035419245034, 0.17985981702602138], 'true,true,false': [-5.782411586589357e-19, 0.19164246938517882], 'true,true,true': [0.0, 1.200241107702872e-17]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, E).;true;true
9;true,true;genre(A, F).;true;true
9;true,false;genre(A, G).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.858148935099511;  // std dev = 5.72e-07, 111.000 (wgt'ed) examples reached here.  /* #pos=111 */
%   | | else if ( actor(B) )
%   | | | then return -0.14185106490048768;  // std dev = 5.05e-08, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
%   | | | else return 0.8581489350995121;  // std dev = 8.43e-08, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   else return -0.14185106490048832;  // std dev = 0.000, 184.000 (wgt'ed) examples reached here.  /* #neg=184 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.719473412210955;  // std dev = 0.000, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | else return 0.7083560694380678;  // std dev = 0.096, 76.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=75 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( actor(B) )
%   | | | then return -0.12544463852839158;  // std dev = 0.000, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   | | | else return 0.7194734122109543;  // std dev = 5.96e-08, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   else return -0.12544463852839172;  // std dev = 0.000, 213.000 (wgt'ed) examples reached here.  /* #neg=213 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( actor(B) )
%   | | then return -0.11231637819360638;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return -0.22557030524344404;  // std dev = 5.27e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( actor(B) )
%   | | then return -0.11231637819360629;  // std dev = 4.08e-08, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   | | else return 0.5569019996970409;  // std dev = 0.016, 134.000 (wgt'ed) examples reached here.  /* #pos=134 */
%   else return -0.11231637819360653;  // std dev = 0.000, 189.000 (wgt'ed) examples reached here.  /* #neg=189 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.41714018877323017;  // std dev = 5.16e-08, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | else return 0.4118396601283314;  // std dev = 0.069, 76.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=75 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783633;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.41714018877322995;  // std dev = 5.16e-08, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return -0.11712095793102761;  // std dev = 0.670, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
%   else return -0.1015963294878365;  // std dev = 0.000, 186.000 (wgt'ed) examples reached here.  /* #neg=186 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926098;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( genre(B, E) )
%   | | then return 0.32288150261680304;  // std dev = 0.018, 111.000 (wgt'ed) examples reached here.  /* #pos=111 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.32045871503574214;  // std dev = 5.16e-08, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return -0.1065658218255174;  // std dev = 0.644, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
%   else return -0.09269127618926057;  // std dev = 9.19e-08, 199.000 (wgt'ed) examples reached here.  /* #neg=199 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.2563691104305203;  // std dev = 0.017, 134.000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else if ( actor(B) )
%   | | then return -0.08303855285148654;  // std dev = 0.004, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
%   | | else return -0.33745076340521113;  // std dev = 0.233, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.08518475138839678;  // std dev = 7.74e-08, 203.000 (wgt'ed) examples reached here.  /* #neg=203 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( actor(B) )
%   | | then return -0.07893264732868124;  // std dev = 4.56e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else return -0.18582534492464506;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.2108507526738621;  // std dev = 0.013, 111.000 (wgt'ed) examples reached here.  /* #pos=111 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.20940885569008924;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return -0.08793567784969067;  // std dev = 0.511, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
%   else return -0.07877675473109147;  // std dev = 7.30e-08, 200.000 (wgt'ed) examples reached here.  /* #neg=200 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( actor(A) )
%   | | then return 0.17789805796452424;  // std dev = 0.012, 111.000 (wgt'ed) examples reached here.  /* #pos=111 */
%   | | else return -0.15933383682935653;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( actor(A), director(B) )
%   | | then return 0.1768405832289338;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else if ( actor(A) )
%   | | | then return -0.0708126261682791;  // std dev = 1.29e-08, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   | | | else return -0.13062906460632356;  // std dev = 0.451, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   else return -0.07324622576333667;  // std dev = 1.14e-07, 194.000 (wgt'ed) examples reached here.  /* #neg=194 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.15191445286270533;  // std dev = 3.65e-08, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | else return 0.15018424679389905;  // std dev = 0.033, 76.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=75 */
%   | else if ( genre(A, E) )
%   | | then return -0.06497929746992402;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.15254969349843428;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return -0.07068442871341839;  // std dev = 0.322, 73.000 (wgt'ed) examples reached here.  /* #neg=73 */
%   else return -0.06842697784420262;  // std dev = 7.81e-08, 186.000 (wgt'ed) examples reached here.  /* #neg=186 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( genre(A, E) )
%   | | then return -0.1581120973016451;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return 0.13478584577731917;  // std dev = 0.010, 111.000 (wgt'ed) examples reached here.  /* #pos=111 */
%   | else if ( genre(A, F) )
%   | | then return -0.061141194389018765;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( actor(B) )
%   | | | then return -0.06204918428065509;  // std dev = 0.000, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   | | | else return 0.1338554304609212;  // std dev = 7.45e-09, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   else return -0.06419184008202626;  // std dev = 0.000, 218.000 (wgt'ed) examples reached here.  /* #neg=218 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063453
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.964 seconds
Total inference time: 0.881 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.065373
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.209 seconds
Refined model CLL: -0.065373


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063453
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 5.469999999999999 seconds
Total inference time: 0.881 seconds
AUC ROC: 1.0
Total revision time: 5.469999999999999
Best scored revision CLL: -0.065373


Dataset: 4_cora_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 00:02:19
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063453, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 5.469999999999999, 'Inference time': 0.881, 'parameter_0.4': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.12547, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 1.166, 'Inference time': 0.856}}


Amount of data: 0.6
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;haswordauthor(E, C).;true;true
7;true,true,true;author(F, E), title(F, D).;false;false
7;true,true,false;title(G, D), venue(G, B).;false;false
7;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
7;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
7;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, B).;false;true
8;true,true,false;title(F, D), venue(F, A).;false;false
8;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
8;true,false,false;haswordvenue(A, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
8;false,true;haswordauthor(M, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;true,true;author(F, E), venue(F, B).;true;true
9;true,true,true;samebib(F, G), venue(G, A).;false;false
9;true,true,false;author(H, E), venue(H, A).;false;false
9;true,false;haswordtitle(I, C).;true;true
9;true,false,true;title(J, I), venue(J, A).;false;false
9;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995096;  // std dev = 1.03e-06, 165.000 (wgt'ed) examples reached here.  /* #pos=165 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.16142762362410104;  // std dev = 5.077, 122.000 (wgt'ed) examples reached here.  /* #neg=85 #pos=37 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.1418510649004878;  // std dev = 1.23e-07, 306.000 (wgt'ed) examples reached here.  /* #neg=306 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109565;  // std dev = 0.000, 165.000 (wgt'ed) examples reached here.  /* #pos=165 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.1264030868164878;  // std dev = 5.129, 128.000 (wgt'ed) examples reached here.  /* #neg=91 #pos=37 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839202;  // std dev = 0.000, 306.000 (wgt'ed) examples reached here.  /* #neg=306 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1267166182384897;  // std dev = 0.108, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( movie(E, A) )
%   | | then return 0.3475069863749646;  // std dev = 0.377, 300.000 (wgt'ed) examples reached here.  /* #neg=98 #pos=202 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360696;  // std dev = 0.000, 288.000 (wgt'ed) examples reached here.  /* #neg=288 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4606772587561571;  // std dev = 0.949, 167.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=165 */
%   | else if ( genre(A, E) )
%   | | then return -0.10028947470799113;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.07573816919529217;  // std dev = 5.040, 118.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=37 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783663;  // std dev = 0.000, 311.000 (wgt'ed) examples reached here.  /* #neg=311 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.10696834026248131;  // std dev = 0.192, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( genre(B, E) )
%   | | then return 0.3575975940976686;  // std dev = 0.000, 165.000 (wgt'ed) examples reached here.  /* #pos=165 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.006920333630620381;  // std dev = 5.237, 143.000 (wgt'ed) examples reached here.  /* #neg=106 #pos=37 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926043;  // std dev = 1.50e-07, 294.000 (wgt'ed) examples reached here.  /* #neg=294 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2609127729758387;  // std dev = 1.324, 171.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=165 */
%   | else if ( movie(E, A) )
%   | | then return 0.04687695862865519;  // std dev = 0.446, 129.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=37 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 1.12e-07, 329.000 (wgt'ed) examples reached here.  /* #neg=329 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1545734426824241;  // std dev = 0.284, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( genre(B, E) )
%   | | then return 0.23070814379285084;  // std dev = 1.40e-07, 165.000 (wgt'ed) examples reached here.  /* #pos=165 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.023381689523856122;  // std dev = 5.307, 155.000 (wgt'ed) examples reached here.  /* #neg=118 #pos=37 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109141;  // std dev = 4.21e-08, 299.000 (wgt'ed) examples reached here.  /* #neg=299 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1923169222220755;  // std dev = 0.000, 165.000 (wgt'ed) examples reached here.  /* #pos=165 */
%   | else if ( movie(E, B) )
%   | | then return -0.009804951780557368;  // std dev = 5.270, 153.000 (wgt'ed) examples reached here.  /* #neg=116 #pos=37 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.073246225763337;  // std dev = 9.19e-08, 309.000 (wgt'ed) examples reached here.  /* #neg=309 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.16419480250157212;  // std dev = 0.000, 165.000 (wgt'ed) examples reached here.  /* #pos=165 */
%   | else if ( genre(A, E) )
%   | | then return -0.07455265569637268;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.04755474317487211;  // std dev = 5.077, 122.000 (wgt'ed) examples reached here.  /* #neg=85 #pos=37 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420287;  // std dev = 0.000, 274.000 (wgt'ed) examples reached here.  /* #neg=274 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return -0.36992599761144196;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.1428844072122691;  // std dev = 6.66e-08, 165.000 (wgt'ed) examples reached here.  /* #pos=165 */
%   | | else if ( genre(A, G) )
%   | | | then return -0.06956929941584812;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return 0.013315855163673817;  // std dev = 5.168, 133.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=37 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.06419184008202604;  // std dev = 9.77e-08, 284.000 (wgt'ed) examples reached here.  /* #neg=284 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.129271
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.346 seconds
Total inference time: 0.908 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.977843
   AUC PR    = 0.858816
   CLL	      = -0.127657
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.816832
   F1        = 0.899183


Total scoring time: 1.394 seconds
Parameter learned model CLL: -0.127657


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 15, 0], 'true,false,true': [1.03e-06, 0, 165], 'true,false,false,true': [5.077, 85, 37], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.23e-07, 306, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 165], 'true,false,true': [0.0, 8, 0], 'true,false,false,true': [5.129, 91, 37], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 306, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.108, 8, 0], 'true,false,true': [0.377, 98, 202], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 288, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.949, 2, 165], 'true,false,true': [0.0, 10, 0], 'true,false,false,true': [5.04, 81, 37], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 311, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.192, 13, 0], 'true,false,true': [0.0, 0, 165], 'true,false,false,true': [5.237, 106, 37], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.5e-07, 294, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [1.324, 6, 165], 'true,false,true': [0.446, 92, 37], 'true,false,false': [0.0, 0, 0], 'false,true': [1.12e-07, 329, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.284, 7, 0], 'true,false,true': [1.4e-07, 0, 165], 'true,false,false,true': [5.307, 118, 37], 'true,false,false,false': [0.0, 0, 0], 'false,true': [4.21e-08, 299, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 165], 'true,false,true': [5.27, 116, 37], 'true,false,false': [0.0, 0, 0], 'false,true': [9.19e-08, 309, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 165], 'true,false,true': [0.0, 12, 0], 'true,false,false,true': [5.077, 85, 37], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 274, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true,true,false': 'genre(A, G)'}, {'true,true,true,true': [0.0, 4, 0], 'true,true,true,false': [6.66e-08, 0, 165], 'true,true,false,true': [2.63e-09, 6, 0], 'true,true,false,false': [5.168, 96, 37], 'true,false': [0.0, 0, 0], 'false': [9.77e-08, 284, 0]}]]
[{'': [0.22148151396869026, 4.9343245538895844e-17], 'true': [-1.4802973661668754e-17, 0.20845220896211444], 'true,false': [6.373353023787565e-15, 0.2113007256113962], 'true,false,false': [0.2113007256113962, nan], 'false': [4.9343245538895844e-17, nan]}, {'': [0.18050108920205074, -8.707631565687502e-17], 'true': [-2.842170943040401e-15, 0.1969283645871346], 'true,false': [0.0, 0.20550537109374867], 'true,false,false': [0.20550537109374867, nan], 'false': [-8.707631565687502e-17, nan]}, {'': [0.14436779691761836, -9.868649107779169e-17], 'true': [0.001451568393451834, 0.14233764888590153], 'true,false': [0.14233764888590153, nan], 'false': [-9.868649107779169e-17, nan]}, {'': [0.1291583616198358, -4.997788535290094e-17], 'true': [0.005387675360400626, 0.2006558968457565], 'true,false': [0.0, 0.21523987359954105], 'true,false,false': [0.21523987359954105, nan], 'false': [-4.997788535290094e-17, nan]}, {'': [0.11844214754380646, 7.703588334133739e-17], 'true': [0.0028357118334656076, 0.1196340962903125], 'true,false': [-5.598215493867456e-16, 0.1917942197662485], 'true,false,false': [0.1917942197662485, nan], 'false': [7.703588334133739e-17, nan]}, {'': [0.1026636355433403, 3.7794826370218094e-17], 'true': [0.010243955805336867, 0.19906098556887744], 'true,false': [0.19906098556887744, nan], 'false': [3.7794826370218094e-17, nan]}, {'': [0.10360603148879781, 5.940992773913881e-18], 'true': [0.011511170056637123, 0.10414884227714608], 'true,false': [1.1842378929335003e-16, 0.1817273673257031], 'true,false,false': [0.1817273673257031, nan], 'false': [5.940992773913881e-18, nan]}, {'': [0.09753250062598949, 2.73064562690977e-17], 'true': [-2.745278751800387e-16, 0.18151716709451093], 'true,false': [0.18151716709451093, nan], 'false': [2.73064562690977e-17, nan]}, {'': [0.09078627558072198, -3.322565256177476e-17], 'true': [-1.399553873466864e-16, 0.19359394184544526], 'true,false': [-1.1564823173178713e-18, 0.21130072561139526], 'true,false,false': [0.21130072561139526, nan], 'false': [-3.322565256177476e-17, nan]}, {'': [0.09379880637343528, 3.3619429618930795e-17], 'true': [0.09379880637343528, nan], 'true,true': [0.006076929290116007, 0.19241875786376428], 'true,true,false': [1.1564823173178713e-18, 0.20080275877664042], 'true,true,true': [0.0, 2.6914497566670462e-17]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, E).;true;true
9;true,true;genre(A, F).;true;true
9;true,false;genre(A, G).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995096;  // std dev = 1.03e-06, 165.000 (wgt'ed) examples reached here.  /* #pos=165 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.8581489350995115;  // std dev = 2.60e-07, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | | else return -0.14185106490048763;  // std dev = 8.69e-08, 98.000 (wgt'ed) examples reached here.  /* #neg=98 */
%   else return -0.14185106490048768;  // std dev = 1.69e-07, 323.000 (wgt'ed) examples reached here.  /* #neg=323 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.7194734122109547;  // std dev = 0.000, 61.000 (wgt'ed) examples reached here.  /* #pos=61 */
%   | | else return 0.7114265736324847;  // std dev = 0.082, 105.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=104 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 5.27e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.7194734122109548;  // std dev = 0.000, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | | else return -0.12544463852839136;  // std dev = 0.000, 105.000 (wgt'ed) examples reached here.  /* #neg=105 */
%   else return -0.1254446385283921;  // std dev = 0.000, 297.000 (wgt'ed) examples reached here.  /* #neg=297 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( female(B) )
%   | | then return -0.11231637819360639;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.15024663161782814;  // std dev = 0.131, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( actor(A), director(B) )
%   | | then return 0.5563890074430549;  // std dev = 0.014, 202.000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | | else return -0.11231637819360621;  // std dev = 7.60e-08, 98.000 (wgt'ed) examples reached here.  /* #neg=98 */
%   else return -0.11231637819360663;  // std dev = 0.000, 329.000 (wgt'ed) examples reached here.  /* #neg=329 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.4172649200601706;  // std dev = 7.30e-08, 61.000 (wgt'ed) examples reached here.  /* #pos=61 */
%   | | else if ( actor(A) )
%   | | | then return 0.41922284127532117;  // std dev = 2.67e-07, 104.000 (wgt'ed) examples reached here.  /* #pos=104 */
%   | | | else return -0.2009012361022253;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(A, E) )
%   | | then return -0.09818620510000192;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.4172649200601701;  // std dev = 5.16e-08, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | | else return -0.10159632948783616;  // std dev = 5.48e-08, 77.000 (wgt'ed) examples reached here.  /* #neg=77 */
%   else return -0.10159632948783663;  // std dev = 0.000, 300.000 (wgt'ed) examples reached here.  /* #neg=300 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( female(B) )
%   | | then return -0.09297846491738886;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.10328605246838629;  // std dev = 0.074, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(B, E) )
%   | | then return 0.3213800507817899;  // std dev = 0.008, 165.000 (wgt'ed) examples reached here.  /* #pos=165 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.3205432705500931;  // std dev = 0.000, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | | else return -0.09269127618926108;  // std dev = 1.49e-08, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
%   else return -0.09269127618926044;  // std dev = 1.66e-07, 293.000 (wgt'ed) examples reached here.  /* #neg=293 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.25552365100111757;  // std dev = 0.008, 202.000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.08634722211805046;  // std dev = 0.100, 112.000 (wgt'ed) examples reached here.  /* #neg=112 */
%   else return -0.08518475138839678;  // std dev = 1.12e-07, 326.000 (wgt'ed) examples reached here.  /* #neg=326 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( female(B) )
%   | | then return -0.07891914512714844;  // std dev = 2.63e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return -0.08946501266786566;  // std dev = 0.063, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(B, E) )
%   | | then return 0.21009720168269752;  // std dev = 0.006, 165.000 (wgt'ed) examples reached here.  /* #pos=165 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.20959917126802427;  // std dev = 0.000, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | | else return -0.0786924343915239;  // std dev = 4.59e-08, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
%   else return -0.07877675473109143;  // std dev = 2.98e-08, 310.000 (wgt'ed) examples reached here.  /* #neg=310 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.17678586194055496;  // std dev = 0.000, 61.000 (wgt'ed) examples reached here.  /* #pos=61 */
%   | | else return 0.17469946986611404;  // std dev = 0.030, 105.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=104 */
%   | else if ( actor(A), director(B) )
%   | | then return 0.17698020424858704;  // std dev = 0.000, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | else return -0.07291808285887591;  // std dev = 0.009, 84.000 (wgt'ed) examples reached here.  /* #neg=84 */
%   else return -0.07324622576333698;  // std dev = 9.66e-08, 302.000 (wgt'ed) examples reached here.  /* #neg=302 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.15250816877049703;  // std dev = 0.000, 61.000 (wgt'ed) examples reached here.  /* #pos=61 */
%   | | else return 0.15061664410353062;  // std dev = 0.030, 105.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=104 */
%   | else if ( genre(A, E) )
%   | | then return -0.0654265865362729;  // std dev = 0.003, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.15265563207422905;  // std dev = 4.08e-08, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | | else return -0.06837918429432308;  // std dev = 0.000, 84.000 (wgt'ed) examples reached here.  /* #neg=84 */
%   else return -0.06842697784420297;  // std dev = 0.000, 293.000 (wgt'ed) examples reached here.  /* #neg=293 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.13456121409495095;  // std dev = 0.007, 165.000 (wgt'ed) examples reached here.  /* #pos=165 */
%   | else if ( genre(A, F) )
%   | | then return -0.06248478113476972;  // std dev = 0.006, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.13393814955316008;  // std dev = 0.000, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | | else return -0.06414967012174884;  // std dev = 1.97e-08, 78.000 (wgt'ed) examples reached here.  /* #neg=78 */
%   else return -0.06419184008202597;  // std dev = 1.13e-07, 296.000 (wgt'ed) examples reached here.  /* #neg=296 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064074
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.138 seconds
Total inference time: 0.979 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064691
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.448 seconds
Refined model CLL: -0.064691


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064074
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 6.3260000000000005 seconds
Total inference time: 0.979 seconds
AUC ROC: 1.0
Total revision time: 6.3260000000000005
Best scored revision CLL: -0.064691


Dataset: 4_cora_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 00:02:27
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.064074, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 6.3260000000000005, 'Inference time': 0.979, 'parameter_0.6': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.129271, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 1.346, 'Inference time': 0.908}}


Amount of data: 0.8
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;haswordauthor(E, C).;true;true
7;true,true,true;author(F, E), title(F, D).;false;false
7;true,true,false;title(G, D), venue(G, B).;false;false
7;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
7;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
7;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, B).;false;true
8;true,true,false;title(F, D), venue(F, A).;false;false
8;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
8;true,false,false;haswordvenue(A, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
8;false,true;haswordauthor(M, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;true,true;author(F, E), venue(F, B).;true;true
9;true,true,true;samebib(F, G), venue(G, A).;false;false
9;true,true,false;author(H, E), venue(H, A).;false;false
9;true,false;haswordtitle(I, C).;true;true
9;true,false,true;title(J, I), venue(J, A).;false;false
9;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( genre(B, E) )
%   | | then return 0.858148935099509;  // std dev = 1.08e-06, 221.000 (wgt'ed) examples reached here.  /* #pos=221 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.12334230526525813;  // std dev = 5.939, 181.000 (wgt'ed) examples reached here.  /* #neg=133 #pos=48 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048735;  // std dev = 3.01e-07, 398.000 (wgt'ed) examples reached here.  /* #neg=398 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7118956718455819;  // std dev = 1.190, 223.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=221 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 7.45e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.08861529355953789;  // std dev = 6.015, 195.000 (wgt'ed) examples reached here.  /* #neg=147 #pos=48 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839227;  // std dev = 0.000, 408.000 (wgt'ed) examples reached here.  /* #neg=408 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12266845591096773;  // std dev = 0.109, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( movie(E, A) )
%   | | then return 0.3585533959261244;  // std dev = 0.372, 395.000 (wgt'ed) examples reached here.  /* #neg=126 #pos=269 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360621;  // std dev = 0.000, 400.000 (wgt'ed) examples reached here.  /* #neg=400 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4618558399341454;  // std dev = 0.948, 223.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=221 */
%   | else if ( genre(A, E) )
%   | | then return -0.10065533795188755;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.010182327693462969;  // std dev = 6.054, 203.000 (wgt'ed) examples reached here.  /* #neg=155 #pos=48 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783588;  // std dev = 1.13e-08, 406.000 (wgt'ed) examples reached here.  /* #neg=406 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.10612058759213343;  // std dev = 0.192, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else if ( genre(B, E) )
%   | | then return 0.3565307284686175;  // std dev = 0.000, 221.000 (wgt'ed) examples reached here.  /* #pos=221 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.06462444136997517;  // std dev = 5.827, 164.000 (wgt'ed) examples reached here.  /* #neg=116 #pos=48 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926083;  // std dev = 1.59e-07, 394.000 (wgt'ed) examples reached here.  /* #neg=394 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.27456748052731833;  // std dev = 0.773, 223.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=221 */
%   | else if ( movie(E, A) )
%   | | then return 0.04446994137344954;  // std dev = 0.442, 175.000 (wgt'ed) examples reached here.  /* #neg=127 #pos=48 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 1.28e-07, 385.000 (wgt'ed) examples reached here.  /* #neg=385 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12862403126183478;  // std dev = 0.436, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | else if ( genre(B, E) )
%   | | then return 0.22766343362348354;  // std dev = 0.000, 221.000 (wgt'ed) examples reached here.  /* #pos=221 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.03959383733694834;  // std dev = 5.848, 167.000 (wgt'ed) examples reached here.  /* #neg=119 #pos=48 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109151;  // std dev = 2.18e-07, 418.000 (wgt'ed) examples reached here.  /* #neg=418 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18142265361293675;  // std dev = 0.970, 225.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=221 */
%   | else if ( movie(E, B) )
%   | | then return 0.02714088950952932;  // std dev = 5.856, 175.000 (wgt'ed) examples reached here.  /* #neg=127 #pos=48 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.07324622576333771;  // std dev = 0.000, 398.000 (wgt'ed) examples reached here.  /* #neg=398 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1592376094688943;  // std dev = 0.707, 223.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=221 */
%   | else if ( genre(A, E) )
%   | | then return -0.07916451157776631;  // std dev = 3.73e-09, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.04331791596772561;  // std dev = 5.781, 158.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=48 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420332;  // std dev = 0.000, 386.000 (wgt'ed) examples reached here.  /* #neg=386 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return -0.3751267443817115;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return 0.1430879577514965;  // std dev = 0.000, 221.000 (wgt'ed) examples reached here.  /* #pos=221 */
%   | | else if ( genre(A, G) )
%   | | | then return -0.0735824982551999;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.006952035925543907;  // std dev = 5.896, 174.000 (wgt'ed) examples reached here.  /* #neg=126 #pos=48 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.06419184008202561;  // std dev = 1.93e-07, 395.000 (wgt'ed) examples reached here.  /* #neg=395 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.130365
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.625 seconds
Total inference time: 0.881 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.978328
   AUC PR    = 0.862334
   CLL	      = -0.128648
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.821561
   F1        = 0.902041


Total scoring time: 1.619 seconds
Parameter learned model CLL: -0.128648


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 8, 0], 'true,false,true': [1.08e-06, 0, 221], 'true,false,false,true': [5.939, 133, 48], 'true,false,false,false': [0.0, 0, 0], 'false,true': [3.01e-07, 398, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.19, 2, 221], 'true,false,true': [7.45e-09, 13, 0], 'true,false,false,true': [6.015, 147, 48], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 408, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.109, 11, 0], 'true,false,true': [0.372, 126, 269], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 400, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.948, 2, 221], 'true,false,true': [0.0, 10, 0], 'true,false,false,true': [6.054, 155, 48], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.13e-08, 406, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.192, 14, 0], 'true,false,true': [0.0, 0, 221], 'true,false,false,true': [5.827, 116, 48], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.59e-07, 394, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.773, 2, 221], 'true,false,true': [0.442, 127, 48], 'true,false,false': [0.0, 0, 0], 'false,true': [1.28e-07, 385, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.436, 23, 0], 'true,false,true': [0.0, 0, 221], 'true,false,false,true': [5.848, 119, 48], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.18e-07, 418, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.97, 4, 221], 'true,false,true': [5.856, 127, 48], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 398, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.707, 2, 221], 'true,false,true': [3.73e-09, 19, 0], 'true,false,false,true': [5.781, 110, 48], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 386, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true,true,false': 'genre(A, G)'}, {'true,true,true,true': [0.0, 2, 0], 'true,true,true,false': [0.0, 0, 221], 'true,true,false,true': [0.0, 12, 0], 'true,true,false,false': [5.896, 126, 48], 'true,false': [0.0, 0, 0], 'false': [1.93e-07, 395, 0]}]]
[{'': [0.22563355145746922, 2.2762361509902707e-16], 'true': [-6.938893903907228e-18, 0.2213868468602297], 'true,false': [5.2728058219301554e-15, 0.19486584658588052], 'true,false,false': [0.19486584658588052, nan], 'false': [2.2762361509902707e-16, nan]}, {'': [0.18974469440935296, -1.2843756559389067e-16], 'true': [0.006345147469472734, 0.17664935961127304], 'true,false': [4.270088556250602e-18, 0.1855621301775148], 'true,false,false': [0.1855621301775148, nan], 'false': [-1.2843756559389067e-16, nan]}, {'': [0.1405251120798913, -1.9984014443252817e-17], 'true': [0.0010716551306629068, 0.13813444090452603], 'true,false': [0.13813444090452603, nan], 'false': [-1.9984014443252817e-17, nan]}, {'': [0.13854654991024548, 1.2907026296134824e-16], 'true': [0.004029738048724558, 0.17261656613435233], 'true,false': [-2.7755575615628915e-18, 0.18054308524836923], 'true,false,false': [0.18054308524836923, nan], 'false': [1.2907026296134824e-16, nan]}, {'': [0.10916223776377965, 6.424640853160804e-17], 'true': [0.0026278781114811955, 0.1090203722229215], 'true,false': [-4.822688251765386e-17, 0.20701963117192243], 'true,false,false': [0.20701963117192243, nan], 'false': [6.424640853160804e-17, nan]}, {'': [0.10033188885115295, 4.2678703284291734e-17], 'true': [0.0026793461564688864, 0.1951040342771943], 'true,false': [0.1951040342771943, nan], 'false': [4.2678703284291734e-17, nan]}, {'': [0.09587462071308159, 1.1367833840659498e-16], 'true': [0.008274999338645648, 0.09682485511634839], 'true,false': [0.0, 0.2048119330201869], 'true,false,false': [0.2048119330201869, nan], 'false': [1.1367833840659498e-16, nan]}, {'': [0.09394705581280023, -6.917972615754745e-17], 'true': [0.004181564221235088, 0.19597072042788247], 'true,false': [0.19597072042788247, nan], 'false': [-6.917972615754745e-17, nan]}, {'': [0.08954037773385809, -1.0699558682916016e-16], 'true': [0.002242950586323807, 0.19023819936554523], 'true,false': [7.304098846218135e-19, 0.2115045665758688], 'true,false,false': [0.2115045665758688, nan], 'false': [-1.0699558682916016e-16, nan]}, {'': [0.09109623424936406, 9.443922437317787e-17], 'true': [0.09109623424936406, nan], 'true,true': [0.0023868877929998857, 0.18726574812268765], 'true,true,false': [-2.3129646346357427e-18, 0.1997621878715815], 'true,true,true': [0.0, -1.326239269235481e-16]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, E).;true;true
9;true,true;genre(A, F).;true;true
9;true,false;genre(A, G).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( genre(B, E) )
%   | | then return 0.858148935099509;  // std dev = 1.08e-06, 221.000 (wgt'ed) examples reached here.  /* #pos=221 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.8581489350995121;  // std dev = 1.69e-07, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | | | else return -0.1418510649004879;  // std dev = 0.000, 141.000 (wgt'ed) examples reached here.  /* #neg=141 */
%   else return -0.14185106490048746;  // std dev = 2.55e-07, 367.000 (wgt'ed) examples reached here.  /* #neg=367 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109572;  // std dev = 0.000, 221.000 (wgt'ed) examples reached here.  /* #pos=221 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 7.45e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( actor(B) )
%   | | | then return -0.12544463852839105;  // std dev = 8.02e-08, 119.000 (wgt'ed) examples reached here.  /* #neg=119 */
%   | | | else return 0.7194734122109548;  // std dev = 0.000, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   else return -0.12544463852839227;  // std dev = 0.000, 417.000 (wgt'ed) examples reached here.  /* #neg=417 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1267166182384897;  // std dev = 0.152, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else if ( actor(B) )
%   | | then return -0.11231637819360618;  // std dev = 9.06e-08, 117.000 (wgt'ed) examples reached here.  /* #neg=117 */
%   | | else return 0.5553664367462832;  // std dev = 3.58e-07, 269.000 (wgt'ed) examples reached here.  /* #pos=269 */
%   else return -0.1123163781936062;  // std dev = 0.000, 403.000 (wgt'ed) examples reached here.  /* #neg=403 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.41751358415831047;  // std dev = 1.19e-07, 221.000 (wgt'ed) examples reached here.  /* #pos=221 */
%   | else if ( genre(A, E) )
%   | | then return -0.10028947470799114;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.41751358415831047;  // std dev = 0.000, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | | | else return -0.1034968900699018;  // std dev = 0.237, 125.000 (wgt'ed) examples reached here.  /* #neg=125 */
%   else return -0.10159632948783587;  // std dev = 2.35e-07, 409.000 (wgt'ed) examples reached here.  /* #neg=409 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( actor(B) )
%   | | then return -0.0915959845726247;  // std dev = 7.45e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else return -0.28260413749577334;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.32071184716014944;  // std dev = 3.53e-07, 221.000 (wgt'ed) examples reached here.  /* #pos=221 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.32071184716014944;  // std dev = 2.98e-08, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | | | else return -0.09642439199494131;  // std dev = 0.314, 115.000 (wgt'ed) examples reached here.  /* #neg=115 */
%   else return -0.0926912761892609;  // std dev = 1.50e-07, 402.000 (wgt'ed) examples reached here.  /* #neg=402 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.2551722425694879;  // std dev = 3.42e-07, 269.000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.09069461642470493;  // std dev = 0.387, 130.000 (wgt'ed) examples reached here.  /* #neg=130 */
%   else return -0.08518475138839678;  // std dev = 1.25e-07, 397.000 (wgt'ed) examples reached here.  /* #neg=397 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( female(B) )
%   | | then return -0.07751551858254689;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return -0.1114728790497996;  // std dev = 0.059, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( genre(B, E) )
%   | | then return 0.20975771563253492;  // std dev = 3.01e-07, 221.000 (wgt'ed) examples reached here.  /* #pos=221 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.209757715632536;  // std dev = 0.000, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | | | else return -0.08264485200539382;  // std dev = 0.341, 128.000 (wgt'ed) examples reached here.  /* #neg=128 */
%   else return -0.07877675473109141;  // std dev = 1.25e-07, 407.000 (wgt'ed) examples reached here.  /* #neg=407 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1770964977452771;  // std dev = 1.88e-07, 269.000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.07475855685494248;  // std dev = 0.265, 143.000 (wgt'ed) examples reached here.  /* #neg=143 */
%   else return -0.0732462257633377;  // std dev = 0.000, 392.000 (wgt'ed) examples reached here.  /* #neg=392 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.15122809724880945;  // std dev = 0.336, 222.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=221 */
%   | else if ( genre(A, E) )
%   | | then return -0.06536458692442476;  // std dev = 0.002, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.15274385809367094;  // std dev = 3.94e-08, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | | | else return -0.0706457454898417;  // std dev = 0.252, 110.000 (wgt'ed) examples reached here.  /* #neg=110 */
%   else return -0.06842697784420335;  // std dev = 0.000, 397.000 (wgt'ed) examples reached here.  /* #neg=397 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( genre(A, E) )
%   | | then return -0.2075293361142071;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return 0.13418303036334597;  // std dev = 2.04e-07, 221.000 (wgt'ed) examples reached here.  /* #pos=221 */
%   | else if ( genre(A, F) )
%   | | then return -0.06195697813159625;  // std dev = 0.004, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.13400703000801137;  // std dev = 0.000, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | | | else return -0.06907362229974129;  // std dev = 0.336, 114.000 (wgt'ed) examples reached here.  /* #neg=114 */
%   else return -0.06419184008202565;  // std dev = 1.81e-07, 378.000 (wgt'ed) examples reached here.  /* #neg=378 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063702
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.104 seconds
Total inference time: 0.881 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.065099
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.549 seconds
Refined model CLL: -0.065099


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063702
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 6.897 seconds
Total inference time: 0.881 seconds
AUC ROC: 1.0
Total revision time: 6.897
Best scored revision CLL: -0.065099


Dataset: 4_cora_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 00:02:37
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063702, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 6.897, 'Inference time': 0.881, 'parameter_0.8': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.130365, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 1.625, 'Inference time': 0.881}}


Amount of data: 1.0
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;haswordauthor(E, C).;true;true
7;true,true,true;author(F, E), title(F, D).;false;false
7;true,true,false;title(G, D), venue(G, B).;false;false
7;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
7;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
7;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, B).;false;true
8;true,true,false;title(F, D), venue(F, A).;false;false
8;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
8;true,false,false;haswordvenue(A, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
8;false,true;haswordauthor(M, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;true,true;author(F, E), venue(F, B).;true;true
9;true,true,true;samebib(F, G), venue(G, A).;false;false
9;true,true,false;author(H, E), venue(H, A).;false;false
9;true,false;haswordtitle(I, C).;true;true
9;true,false,true;title(J, I), venue(J, A).;false;false
9;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995086;  // std dev = 1.07e-06, 278.000 (wgt'ed) examples reached here.  /* #pos=278 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.14455670208980467;  // std dev = 6.489, 206.000 (wgt'ed) examples reached here.  /* #neg=147 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 503.000 (wgt'ed) examples reached here.  /* #neg=503 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.707488759008981;  // std dev = 1.678, 282.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=278 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.13315770958642714;  // std dev = 6.456, 201.000 (wgt'ed) examples reached here.  /* #neg=142 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839227;  // std dev = 0.000, 489.000 (wgt'ed) examples reached here.  /* #neg=489 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.13017466041848103;  // std dev = 0.180, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else if ( movie(E, A) )
%   | | then return 0.337530063115384;  // std dev = 0.380, 511.000 (wgt'ed) examples reached here.  /* #neg=174 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360572;  // std dev = 0.000, 534.000 (wgt'ed) examples reached here.  /* #neg=534 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.466995309778591;  // std dev = 1.168, 281.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=278 */
%   | else if ( genre(A, E) )
%   | | then return -0.09997788138869121;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.01266370694498341;  // std dev = 6.666, 239.000 (wgt'ed) examples reached here.  /* #neg=180 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783544;  // std dev = 1.53e-08, 490.000 (wgt'ed) examples reached here.  /* #neg=490 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11965186438473631;  // std dev = 0.260, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else if ( genre(B, E) )
%   | | then return 0.36119919884282475;  // std dev = 0.000, 278.000 (wgt'ed) examples reached here.  /* #pos=278 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.04447529451110704;  // std dev = 6.513, 210.000 (wgt'ed) examples reached here.  /* #neg=151 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926164;  // std dev = 0.000, 542.000 (wgt'ed) examples reached here.  /* #neg=542 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.27106624913697097;  // std dev = 1.329, 284.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=278 */
%   | else if ( movie(E, A) )
%   | | then return 0.02093140630654555;  // std dev = 0.431, 232.000 (wgt'ed) examples reached here.  /* #neg=173 #pos=59 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 1.44e-07, 505.000 (wgt'ed) examples reached here.  /* #neg=505 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1336127747329779;  // std dev = 0.423, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else if ( genre(B, E) )
%   | | then return 0.23104347894196844;  // std dev = 0.000, 278.000 (wgt'ed) examples reached here.  /* #pos=278 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.023399999412853013;  // std dev = 6.554, 217.000 (wgt'ed) examples reached here.  /* #neg=158 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.0787767547310921;  // std dev = 0.000, 505.000 (wgt'ed) examples reached here.  /* #neg=505 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1839754227077658;  // std dev = 1.077, 283.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=278 */
%   | else if ( movie(E, B) )
%   | | then return 0.04226503304241251;  // std dev = 6.425, 209.000 (wgt'ed) examples reached here.  /* #neg=150 #pos=59 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.07324622576333704;  // std dev = 1.13e-07, 474.000 (wgt'ed) examples reached here.  /* #neg=474 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1584889888362992;  // std dev = 0.990, 282.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=278 */
%   | else if ( genre(A, E) )
%   | | then return -0.07673797050933232;  // std dev = 3.73e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.035529196270084405;  // std dev = 6.443, 199.000 (wgt'ed) examples reached here.  /* #neg=140 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420357;  // std dev = 0.000, 512.000 (wgt'ed) examples reached here.  /* #neg=512 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return -0.3688215662797288;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.14480563130700813;  // std dev = 0.000, 278.000 (wgt'ed) examples reached here.  /* #pos=278 */
%   | | else if ( genre(A, G) )
%   | | | then return -0.07147467824716171;  // std dev = 3.73e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | else return -0.004470360624757451;  // std dev = 6.592, 224.000 (wgt'ed) examples reached here.  /* #neg=165 #pos=59 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.06419184008202539;  // std dev = 2.43e-07, 491.000 (wgt'ed) examples reached here.  /* #neg=491 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.129176
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.792 seconds
Total inference time: 0.87 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.978805
   AUC PR    = 0.865091
   CLL	      = -0.127347
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.824926
   F1        = 0.904065


Total scoring time: 1.867 seconds
Parameter learned model CLL: -0.127347


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 18, 0], 'true,false,true': [1.07e-06, 0, 278], 'true,false,false,true': [6.489, 147, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 503, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.678, 4, 278], 'true,false,true': [0.0, 18, 0], 'true,false,false,true': [6.456, 142, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 489, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.18, 19, 0], 'true,false,true': [0.38, 174, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 534, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.168, 3, 278], 'true,false,true': [0.0, 11, 0], 'true,false,false,true': [6.666, 180, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.53e-08, 490, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.26, 14, 0], 'true,false,true': [0.0, 0, 278], 'true,false,false,true': [6.513, 151, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 542, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [1.329, 6, 278], 'true,false,true': [0.431, 173, 59], 'true,false,false': [0.0, 0, 0], 'false,true': [1.44e-07, 505, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.423, 19, 0], 'true,false,true': [0.0, 0, 278], 'true,false,false,true': [6.554, 158, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 505, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [1.077, 5, 278], 'true,false,true': [6.425, 150, 59], 'true,false,false': [0.0, 0, 0], 'false,true': [1.13e-07, 474, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.99, 4, 278], 'true,false,true': [3.73e-09, 13, 0], 'true,false,false,true': [6.443, 140, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 512, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true,true,false': 'genre(A, G)'}, {'true,true,true,true': [0.0, 4, 0], 'true,true,true,false': [0.0, 0, 278], 'true,true,false,true': [3.73e-09, 14, 0], 'true,true,false,false': [6.592, 165, 59], 'true,false': [0.0, 0, 0], 'false': [2.43e-07, 491, 0]}]]
[{'': [0.22065125950382006, -3.88467698477192e-17], 'true': [-3.0839528461809902e-18, 0.2114737722833167], 'true,false': [4.089454594302735e-15, 0.20437835799792678], 'true,false,false': [0.20437835799792678, nan], 'false': [-3.88467698477192e-17, nan]}, {'': [0.17829925719452064, -1.2350947349613194e-16], 'true': [0.009982417909825004, 0.19537171947787513], 'true,false': [0.0, 0.20737110467562786], 'true,false,false': [0.20737110467562786, nan], 'false': [-1.2350947349613194e-16, nan]}, {'': [0.14683394235031236, -3.3265109352064616e-18], 'true': [0.0017008973014574636, 0.14438837968233637], 'true,false': [0.14438837968233637, nan], 'false': [-3.3265109352064616e-18, nan]}, {'': [0.13905722285079827, 2.3382656355370643e-16], 'true': [0.00485146631072353, 0.1782742991659525], 'true,false': [-6.308085367188389e-18, 0.18592111482642218], 'true,false,false': [0.18592111482642218, nan], 'false': [2.3382656355370643e-16, nan]}, {'': [0.1117680483762086, -5.735469499908558e-17], 'true': [0.00481123302763898, 0.1115255988434499], 'true,false': [-1.5846636552923098e-15, 0.20201814058957102], 'true,false,false': [0.20201814058957102, nan], 'false': [-5.735469499908558e-17, nan]}, {'': [0.10236497354063463, 4.133107497614444e-17], 'true': [0.0062154651247407445, 0.18562889111848221], 'true,false': [0.18562889111848221, nan], 'false': [4.133107497614444e-17, nan]}, {'': [0.09681372059602521, -4.221045955010496e-17], 'true': [0.009430377445860049, 0.09740016193081134], 'true,false': [-4.345045506446656e-16, 0.19796555458812196], 'true,false,false': [0.19796555458812196, nan], 'false': [-4.221045955010496e-17, nan]}, {'': [0.09115381661363578, 2.7170014948632524e-17], 'true': [0.00409580199224969, 0.19748506351466252], 'true,false': [0.19748506351466252, nan], 'false': [2.7170014948632524e-17, nan]}, {'': [0.09044704476594366, -1.249000902703301e-16], 'true': [0.0034721963096924244, 0.19651576011364416], 'true,false': [1.0675221390626506e-18, 0.20858059139920898], 'true,false,false': [0.20858059139920898, nan], 'false': [-1.249000902703301e-16, nan]}, {'': [0.09097680116504683, 1.2029300389013917e-16], 'true': [0.09097680116504683, nan], 'true,true': [0.0036889485273387396, 0.18285284970035606], 'true,true,false': [9.912705577010326e-19, 0.19401705994897872], 'true,true,true': [0.0, -1.1501591046476442e-16]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, E).;true;true
9;true,true;genre(A, F).;true;true
9;true,false;genre(A, G).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048774;  // std dev = 1.05e-08, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995086;  // std dev = 1.07e-06, 278.000 (wgt'ed) examples reached here.  /* #pos=278 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.8581489350995125;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.14185106490048827;  // std dev = 0.000, 174.000 (wgt'ed) examples reached here.  /* #neg=174 */
%   else return -0.14185106490048793;  // std dev = 0.000, 521.000 (wgt'ed) examples reached here.  /* #neg=521 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.7194734122109551;  // std dev = 0.000, 111.000 (wgt'ed) examples reached here.  /* #pos=111 */
%   | | else if ( actor(A) )
%   | | | then return 0.7194734122109565;  // std dev = 0.000, 167.000 (wgt'ed) examples reached here.  /* #pos=167 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 5.27e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.7194734122109543;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.12544463852839136;  // std dev = 2.98e-08, 163.000 (wgt'ed) examples reached here.  /* #neg=163 */
%   else return -0.1254446385283923;  // std dev = 0.000, 524.000 (wgt'ed) examples reached here.  /* #neg=524 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360635;  // std dev = 1.39e-08, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else if ( director(B), actor(A) )
%   | | then return 0.5553664367462833;  // std dev = 6.42e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | | else return -0.11231637819360656;  // std dev = 0.000, 189.000 (wgt'ed) examples reached here.  /* #neg=189 */
%   else return -0.11231637819360575;  // std dev = 0.000, 522.000 (wgt'ed) examples reached here.  /* #neg=522 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.41751358415831175;  // std dev = 0.000, 111.000 (wgt'ed) examples reached here.  /* #pos=111 */
%   | | else return 0.40537066220167756;  // std dev = 0.078, 171.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=167 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783634;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.4175135841583105;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.10159632948783645;  // std dev = 0.000, 154.000 (wgt'ed) examples reached here.  /* #neg=154 */
%   else return -0.10159632948783531;  // std dev = 3.69e-07, 518.000 (wgt'ed) examples reached here.  /* #neg=518 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.103156152876267;  // std dev = 0.081, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else if ( genre(B, E) )
%   | | then return 0.3223044412506811;  // std dev = 0.022, 278.000 (wgt'ed) examples reached here.  /* #pos=278 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.3207118471601497;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.0926912761892607;  // std dev = 7.60e-08, 158.000 (wgt'ed) examples reached here.  /* #neg=158 */
%   else return -0.0926912761892616;  // std dev = 0.000, 531.000 (wgt'ed) examples reached here.  /* #neg=531 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2560688164158356;  // std dev = 0.020, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.08545094693063927;  // std dev = 0.047, 151.000 (wgt'ed) examples reached here.  /* #neg=151 */
%   else return -0.08518475138839678;  // std dev = 1.43e-07, 493.000 (wgt'ed) examples reached here.  /* #neg=493 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.0917451197131597;  // std dev = 0.100, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | else if ( genre(B, E) )
%   | | then return 0.21055705535668864;  // std dev = 0.016, 278.000 (wgt'ed) examples reached here.  /* #pos=278 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.20960913874820783;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.07875743882630945;  // std dev = 4.47e-08, 149.000 (wgt'ed) examples reached here.  /* #neg=149 */
%   else return -0.07877675473109211;  // std dev = 0.000, 507.000 (wgt'ed) examples reached here.  /* #neg=507 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.177561010556985;  // std dev = 0.015, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.07371912528048308;  // std dev = 0.070, 199.000 (wgt'ed) examples reached here.  /* #neg=199 */
%   else return -0.07324622576333703;  // std dev = 1.17e-07, 476.000 (wgt'ed) examples reached here.  /* #neg=476 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1486181133956287;  // std dev = 0.575, 283.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=278 */
%   | else if ( genre(A, E) )
%   | | then return -0.06690210081078415;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.15258700941846398;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.06838110996906915;  // std dev = 9.19e-08, 173.000 (wgt'ed) examples reached here.  /* #neg=173 */
%   else return -0.06842697784420353;  // std dev = 0.000, 489.000 (wgt'ed) examples reached here.  /* #neg=489 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( genre(A, E) )
%   | | then return -0.12135139205402666;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return 0.13490080943863997;  // std dev = 0.012, 278.000 (wgt'ed) examples reached here.  /* #pos=278 */
%   | else if ( genre(A, F) )
%   | | then return -0.06284473238038277;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.1338845687652055;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.06415136927824248;  // std dev = 0.000, 156.000 (wgt'ed) examples reached here.  /* #neg=156 */
%   else return -0.06419184008202547;  // std dev = 2.25e-07, 452.000 (wgt'ed) examples reached here.  /* #neg=452 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063941
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.857 seconds
Total inference time: 0.864 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064319
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.694 seconds
Refined model CLL: -0.064319


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063941
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 8.21 seconds
Total inference time: 0.864 seconds
AUC ROC: 1.0
Total revision time: 8.21
Best scored revision CLL: -0.064319


Dataset: 4_cora_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 00:02:47
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063941, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 8.21, 'Inference time': 0.864, 'parameter_1.0': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.129176, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 1.792, 'Inference time': 0.87}}


Starting fold 5

Target train facts examples: 915
Target train pos examples: 337
Target train neg examples: 12165

Target test facts examples: 163
Target test pos	 examples: 45
Target test neg examples: 2071

Amount of data: 0.2
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;haswordauthor(E, C).;true;true
7;true,true,true;author(F, E), title(F, D).;false;false
7;true,true,false;title(G, D), venue(G, B).;false;false
7;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
7;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
7;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, B).;false;true
8;true,true,false;title(F, D), venue(F, A).;false;false
8;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
8;true,false,false;haswordvenue(A, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
8;false,true;haswordauthor(M, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;true,true;author(F, E), venue(F, B).;true;true
9;true,true,true;samebib(F, G), venue(G, A).;false;false
9;true,true,false;author(H, E), venue(H, A).;false;false
9;true,false;haswordtitle(I, C).;true;true
9;true,false,true;title(J, I), venue(J, A).;false;false
9;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995123;  // std dev = 8.43e-08, 53.000 (wgt'ed) examples reached here.  /* #pos=53 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.10814893509951237;  // std dev = 3.240, 56.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=14 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048763;  // std dev = 8.16e-08, 111.000 (wgt'ed) examples reached here.  /* #neg=111 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7038267816417074;  // std dev = 0.837, 54.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=53 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.13613410450242194;  // std dev = 3.149, 48.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=14 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 97.000 (wgt'ed) examples reached here.  /* #neg=97 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.13480911756471967;  // std dev = 0.101, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( movie(E, A) )
%   | | then return 0.36527776782141114;  // std dev = 0.378, 98.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=67 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.1123163781936062;  // std dev = 7.88e-08, 99.000 (wgt'ed) examples reached here.  /* #neg=99 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.45581482451308;  // std dev = 0.664, 54.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=53 */
%   | else if ( genre(A, E) )
%   | | then return -0.09956163467271623;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.04681960426928468;  // std dev = 3.175, 50.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=14 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783633;  // std dev = 0.000, 110.000 (wgt'ed) examples reached here.  /* #neg=110 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.18827540454487482;  // std dev = 0.195, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.35822688180000734;  // std dev = 7.30e-08, 53.000 (wgt'ed) examples reached here.  /* #pos=53 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.07652539797683716;  // std dev = 3.090, 44.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=14 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926107;  // std dev = 0.000, 80.000 (wgt'ed) examples reached here.  /* #neg=80 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.27083531152489665;  // std dev = 0.524, 54.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=53 */
%   | else if ( movie(E, A) )
%   | | then return 0.06100027740741108;  // std dev = 0.448, 47.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=14 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.0851847513883968;  // std dev = 5.37e-08, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.30270313420017997;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.2293243002038762;  // std dev = 5.16e-08, 53.000 (wgt'ed) examples reached here.  /* #pos=53 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.0014857954998873401;  // std dev = 3.199, 52.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=14 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.0787767547310916;  // std dev = 5.77e-08, 100.000 (wgt'ed) examples reached here.  /* #neg=100 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18328012803282498;  // std dev = 0.430, 54.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=53 */
%   | else if ( movie(E, B) )
%   | | then return 0.0734270388949372;  // std dev = 3.036, 41.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=14 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.07324622576333707;  // std dev = 0.000, 100.000 (wgt'ed) examples reached here.  /* #neg=100 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1645529001315664;  // std dev = 3.33e-08, 53.000 (wgt'ed) examples reached here.  /* #pos=53 */
%   | else if ( genre(A, E) )
%   | | then return -0.06548432018371154;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.015187179701264602;  // std dev = 3.135, 47.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=14 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420265;  // std dev = 4.84e-09, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.14316005970336687;  // std dev = 4.47e-08, 53.000 (wgt'ed) examples reached here.  /* #pos=53 */
%   | | else if ( genre(A, G) )
%   | | | then return -0.061589158238883425;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return 0.09260351063820953;  // std dev = 2.950, 37.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.06419184008202626;  // std dev = 0.000, 113.000 (wgt'ed) examples reached here.  /* #neg=113 */


Results
   AUC ROC   = 0.971565
   AUC PR    = 0.823063
   CLL	      = -0.144085
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.777778
   F1        = 0.875


Total learning time: 0.932 seconds
Total inference time: 0.897 seconds
AUC ROC: 0.971565


Results scoring model
   AUC ROC   = 0.974535
   AUC PR    = 0.838867
   CLL	      = -0.140152
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.791045
   F1        = 0.883333


Total scoring time: 0.917 seconds
Parameter learned model CLL: -0.140152


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [8.43e-08, 0, 53], 'true,false,false,true': [3.24, 42, 14], 'true,false,false,false': [0.0, 0, 0], 'false,true': [8.16e-08, 111, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.837, 1, 53], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [3.149, 34, 14], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 97, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.101, 5, 0], 'true,false,true': [0.378, 31, 67], 'true,false,false': [0.0, 0, 0], 'false,true': [7.88e-08, 99, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.664, 1, 53], 'true,false,true': [0.0, 4, 0], 'true,false,false,true': [3.175, 36, 14], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 110, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.195, 4, 0], 'true,false,true': [7.3e-08, 0, 53], 'true,false,false,true': [3.09, 30, 14], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 80, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.524, 1, 53], 'true,false,true': [0.448, 33, 14], 'true,false,false': [0.0, 0, 0], 'false,true': [5.37e-08, 92, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 2, 0], 'true,false,true': [5.16e-08, 0, 53], 'true,false,false,true': [3.199, 38, 14], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.77e-08, 100, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.43, 1, 53], 'true,false,true': [3.036, 27, 14], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 100, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [3.33e-08, 0, 53], 'true,false,true': [0.0, 4, 0], 'true,false,false,true': [3.135, 33, 14], 'true,false,false,false': [0.0, 0, 0], 'false,true': [4.84e-09, 103, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true,true,false': 'genre(A, G)'}, {'true,true,true,true': [0.0, 0, 0], 'true,true,true,false': [4.47e-08, 0, 53], 'true,true,false,true': [0.0, 5, 0], 'true,true,false,false': [2.95, 23, 14], 'true,false': [0.0, 0, 0], 'false': [0.0, 113, 0]}]]
[{'': [0.23809917355371835, 6.00120553851436e-17], 'true': [0.0, 0.23684875010520934], 'true,false': [1.340646671245472e-16, 0.18749999999999947], 'true,false,false': [0.18749999999999947, nan], 'false': [6.00120553851436e-17, nan]}, {'': [0.1856293416737096, -1.1445598192011922e-17], 'true': [0.012975303553036197, 0.20374885119922287], 'true,false': [0.0, 0.2065972222222221], 'true,false,false': [0.2065972222222221, nan], 'false': [-1.1445598192011922e-17, nan]}, {'': [0.14743729184508947, 6.280049432223107e-17], 'true': [0.002023693297667317, 0.14271621256172065], 'true,false': [0.14271621256172065, nan], 'false': [6.280049432223107e-17, nan]}, {'': [0.14221848554134395, -6.0557619525008536e-18], 'true': [0.008168567896611516, 0.18813631461688615], 'true,false': [0.0, 0.20160000000000036], 'true,false,false': [0.20160000000000036, nan], 'false': [-6.0557619525008536e-18, nan]}, {'': [0.12044215688700821, 0.0], 'true': [0.009465415055427064, 0.11807489041487089], 'true,false': [1.005485003434104e-16, 0.21694214876033066], 'true,false,false': [0.21694214876033066, nan], 'false': [0.0, nan]}, {'': [0.10713582700187485, 3.137586808723268e-17], 'true': [0.005093738570234245, 0.2008344847372477], 'true,false': [0.2008344847372477, nan], 'false': [3.137586808723268e-17, nan]}, {'': [0.11157168128003268, 3.3306690738754695e-17], 'true': [0.0, 0.11041231638611633], 'true,false': [5.02742501717052e-17, 0.19674556213017727], 'true,false,false': [0.19674556213017727, nan], 'false': [3.3306690738754695e-17, nan]}, {'': [0.10195535909222385, -5.551115123125783e-18], 'true': [0.0034260364189340775, 0.22486615110053515], 'true,false': [0.22486615110053515, nan], 'false': [-5.551115123125783e-18, nan]}, {'': [0.10080568517755908, 2.3713501496848002e-17], 'true': [2.0947604238210502e-17, 0.19321131581091272], 'true,false': [0.0, 0.20914440923494776], 'true,false,false': [0.20914440923494776, nan], 'false': [2.3713501496848002e-17, nan]}, {'': [0.09388109061249832, -1.7193719407911715e-17], 'true': [0.09388109061249832, nan], 'true,true': [3.77056876287789e-17, 0.20970065683308978], 'true,true,false': [-6.938893903907229e-19, 0.23520818115412737], 'true,true,true': [nan, 3.77056876287789e-17]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, E).;true;true
9;true,false;genre(A, G).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995123;  // std dev = 8.43e-08, 53.000 (wgt'ed) examples reached here.  /* #pos=53 */
%   | | else if ( actor(B) )
%   | | | then return -0.1418510649004877;  // std dev = 2.11e-08, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else return -0.14185106490048766;  // std dev = 7.30e-08, 114.000 (wgt'ed) examples reached here.  /* #neg=114 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109546;  // std dev = 0.000, 53.000 (wgt'ed) examples reached here.  /* #pos=53 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.7194734122109542;  // std dev = 5.16e-08, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.13029094944278682;  // std dev = 0.153, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   else return -0.12544463852839133;  // std dev = 0.000, 107.000 (wgt'ed) examples reached here.  /* #neg=107 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.13535676226541965;  // std dev = 0.103, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( director(B) )
%   | | then return 0.5553664367462837;  // std dev = 2.23e-07, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | | else return -0.11183410122807787;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   else return -0.11231637819360622;  // std dev = 6.83e-08, 84.000 (wgt'ed) examples reached here.  /* #neg=84 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.41751358415830986;  // std dev = 4.71e-08, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else return 0.3986613917306838;  // std dev = 0.107, 33.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   | else if ( genre(A, E) )
%   | | then return -0.09951254957513767;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( actor(B) )
%   | | | then return -0.10119869637904133;  // std dev = 2.24e-08, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | | | else return 0.41751358415831025;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else return -0.10159632948783613;  // std dev = 5.96e-08, 79.000 (wgt'ed) examples reached here.  /* #neg=79 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12816781712463612;  // std dev = 0.166, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(B, E) )
%   | | then return 0.32319991662341097;  // std dev = 0.015, 53.000 (wgt'ed) examples reached here.  /* #pos=53 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.3207118471601497;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.1065377461856515;  // std dev = 0.376, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   else return -0.092691276189261;  // std dev = 4.21e-08, 97.000 (wgt'ed) examples reached here.  /* #neg=97 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.2565155053890639;  // std dev = 0.014, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.08941788767575667;  // std dev = 0.166, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   else return -0.08518475138839682;  // std dev = 5.48e-08, 97.000 (wgt'ed) examples reached here.  /* #neg=97 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07448512797721905;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.2110162194065028;  // std dev = 0.011, 53.000 (wgt'ed) examples reached here.  /* #pos=53 */
%   | | else if ( actor(B) )
%   | | | then return -0.07719163849126566;  // std dev = 1.05e-08, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | | else return 0.20953514397938644;  // std dev = 1.05e-08, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else return -0.07877675473109164;  // std dev = 4.83e-08, 84.000 (wgt'ed) examples reached here.  /* #neg=84 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.1777924489115902;  // std dev = 0.010, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else if ( actor(A) )
%   | | then return -0.07186938587880247;  // std dev = 7.45e-09, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | | else return -0.17237062206589773;  // std dev = 0.354, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.07324622576333707;  // std dev = 0.000, 105.000 (wgt'ed) examples reached here.  /* #neg=105 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1534733753753912;  // std dev = 0.009, 53.000 (wgt'ed) examples reached here.  /* #pos=53 */
%   | else if ( genre(A, E) )
%   | | then return -0.05915560218707309;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.1525089089271639;  // std dev = 1.67e-08, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.07667228800698253;  // std dev = 0.364, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.06842697784420265;  // std dev = 4.71e-08, 99.000 (wgt'ed) examples reached here.  /* #neg=99 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13457648214510678;  // std dev = 0.008, 53.000 (wgt'ed) examples reached here.  /* #pos=53 */
%   | else if ( genre(A, E) )
%   | | then return -0.055947814565215026;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.13382358210111156;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.07620500631512382;  // std dev = 0.348, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   else return -0.06419184008202626;  // std dev = 0.000, 87.000 (wgt'ed) examples reached here.  /* #neg=87 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063404
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.268 seconds
Total inference time: 0.85 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.066283
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.893 seconds
Refined model CLL: -0.066283


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063404
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 4.01 seconds
Total inference time: 0.85 seconds
AUC ROC: 1.0
Total revision time: 4.01
Best scored revision CLL: -0.066283


Dataset: 4_cora_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 00:02:53
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063404, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 4.01, 'Inference time': 0.85, 'parameter_0.2': {'AUC ROC': 0.971565, 'AUC PR': 0.823063, 'CLL': -0.144085, 'Precision': [1.0, 0.5], 'Recall': 0.777778, 'F1': 0.875, 'Learning time': 0.932, 'Inference time': 0.897}}


Amount of data: 0.4
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;haswordauthor(E, C).;true;true
7;true,true,true;author(F, E), title(F, D).;false;false
7;true,true,false;title(G, D), venue(G, B).;false;false
7;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
7;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
7;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, B).;false;true
8;true,true,false;title(F, D), venue(F, A).;false;false
8;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
8;true,false,false;haswordvenue(A, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
8;false,true;haswordauthor(M, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;true,true;author(F, E), venue(F, B).;true;true
9;true,true,true;samebib(F, G), venue(G, A).;false;false
9;true,true,false;author(H, E), venue(H, A).;false;false
9;true,false;haswordtitle(I, C).;true;true
9;true,false,true;title(J, I), venue(J, A).;false;false
9;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995111;  // std dev = 5.20e-07, 108.000 (wgt'ed) examples reached here.  /* #pos=108 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.17522210583121858;  // std dev = 4.214, 82.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=26 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048843;  // std dev = 0.000, 209.000 (wgt'ed) examples reached here.  /* #neg=209 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7117218704610525;  // std dev = 0.841, 109.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=108 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.16045300620524627;  // std dev = 4.189, 80.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=26 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.1254446385283916;  // std dev = 0.000, 193.000 (wgt'ed) examples reached here.  /* #neg=193 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1692375963377627;  // std dev = 0.114, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( movie(E, A) )
%   | | then return 0.36672106756803724;  // std dev = 0.374, 192.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=134 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360657;  // std dev = 0.000, 195.000 (wgt'ed) examples reached here.  /* #neg=195 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4538355410636019;  // std dev = 0.930, 110.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=108 */
%   | else if ( genre(A, E) )
%   | | then return -0.09651742168439115;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.07481086453063407;  // std dev = 4.189, 80.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=26 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783653;  // std dev = 0.000, 203.000 (wgt'ed) examples reached here.  /* #neg=203 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1406120788120952;  // std dev = 0.283, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( genre(B, E) )
%   | | then return 0.356536791653338;  // std dev = 0.000, 108.000 (wgt'ed) examples reached here.  /* #pos=108 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.03097082171477877;  // std dev = 4.280, 88.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=26 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.0926912761892606;  // std dev = 8.69e-08, 181.000 (wgt'ed) examples reached here.  /* #neg=181 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2698259186110588;  // std dev = 0.745, 110.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=108 */
%   | else if ( movie(E, A) )
%   | | then return 0.020402884134385315;  // std dev = 0.441, 94.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=26 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 7.60e-08, 195.000 (wgt'ed) examples reached here.  /* #neg=195 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.15498229968624008;  // std dev = 0.186, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.22850182229376484;  // std dev = 0.000, 108.000 (wgt'ed) examples reached here.  /* #pos=108 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.03128464696274936;  // std dev = 4.248, 85.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=26 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109146;  // std dev = 6.66e-08, 221.000 (wgt'ed) examples reached here.  /* #neg=221 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17815020536786266;  // std dev = 0.795, 111.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=108 */
%   | else if ( movie(E, B) )
%   | | then return 0.059497208959229074;  // std dev = 4.112, 82.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=26 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.07324622576333666;  // std dev = 1.15e-07, 195.000 (wgt'ed) examples reached here.  /* #neg=195 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.15607209293684177;  // std dev = 0.667, 110.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=108 */
%   | else if ( genre(A, E) )
%   | | then return -0.0725108421723117;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.020207299443616666;  // std dev = 4.226, 83.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=26 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420262;  // std dev = 5.82e-09, 209.000 (wgt'ed) examples reached here.  /* #neg=209 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return -0.345907493029817;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.14436312534882;  // std dev = 1.01e-07, 108.000 (wgt'ed) examples reached here.  /* #pos=108 */
%   | | else if ( genre(A, G) )
%   | | | then return -0.06778289543143762;  // std dev = 2.63e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return -0.02641616105648245;  // std dev = 4.354, 96.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=26 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.06419184008202626;  // std dev = 0.000, 214.000 (wgt'ed) examples reached here.  /* #neg=214 */


Results
   AUC ROC   = 0.97178
   AUC PR    = 0.824078
   CLL	      = -0.13965
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.777778
   F1        = 0.875


Total learning time: 1.183 seconds
Total inference time: 0.863 seconds
AUC ROC: 0.97178


Results scoring model
   AUC ROC   = 0.977152
   AUC PR    = 0.853749
   CLL	      = -0.13651
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.80597
   F1        = 0.892562


Total scoring time: 1.211 seconds
Parameter learned model CLL: -0.13651


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 6, 0], 'true,false,true': [5.2e-07, 0, 108], 'true,false,false,true': [4.214, 56, 26], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 209, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.841, 1, 108], 'true,false,true': [0.0, 4, 0], 'true,false,false,true': [4.189, 54, 26], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 193, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.114, 4, 0], 'true,false,true': [0.374, 58, 134], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 195, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.93, 2, 108], 'true,false,true': [0.0, 5, 0], 'true,false,false,true': [4.189, 54, 26], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 203, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.283, 11, 0], 'true,false,true': [0.0, 0, 108], 'true,false,false,true': [4.28, 62, 26], 'true,false,false,false': [0.0, 0, 0], 'false,true': [8.69e-08, 181, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.745, 2, 108], 'true,false,true': [0.441, 68, 26], 'true,false,false': [0.0, 0, 0], 'false,true': [7.6e-08, 195, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.186, 3, 0], 'true,false,true': [0.0, 0, 108], 'true,false,false,true': [4.248, 59, 26], 'true,false,false,false': [0.0, 0, 0], 'false,true': [6.66e-08, 221, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.795, 3, 108], 'true,false,true': [4.112, 56, 26], 'true,false,false': [0.0, 0, 0], 'false,true': [1.15e-07, 195, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.667, 2, 108], 'true,false,true': [0.0, 6, 0], 'true,false,false,true': [4.226, 57, 26], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.82e-09, 209, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true,true,false': 'genre(A, G)'}, {'true,true,true,true': [0.0, 3, 0], 'true,true,true,false': [1.01e-07, 0, 108], 'true,true,false,true': [2.63e-09, 8, 0], 'true,true,false,false': [4.354, 70, 26], 'true,false': [0.0, 0, 0], 'false': [0.0, 214, 0]}]]
[{'': [0.2162640566430699, -2.3798082058950725e-16], 'true': [-6.938893903907228e-18, 0.2078670360110849], 'true,false': [2.500057773970723e-15, 0.21653777513385009], 'true,false,false': [0.21653777513385009, nan], 'false': [-2.3798082058950725e-16, nan]}, {'': [0.1746456725779199, -4.6019607238348455e-17], 'true': [0.006489331146051002, 0.2126354858623245], 'true,false': [0.0, 0.2193750000000006], 'true,false,false': [0.2193750000000006, nan], 'false': [-4.6019607238348455e-17, nan]}, {'': [0.1431373687869138, -3.643808901333847e-17], 'true': [0.003240025075014627, 0.1401896174050812], 'true,false': [0.1401896174050812, nan], 'false': [-3.643808901333847e-17, nan]}, {'': [0.1323739058986145, -8.969289460025895e-17], 'true': [0.007866312375046033, 0.20809568894989008], 'true,false': [0.0, 0.21937500000000068], 'true,false,false': [0.21937500000000068, nan], 'false': [-8.969289460025895e-17, nan]}, {'': [0.11990671365766667, 4.171003628426002e-17], 'true': [0.007263351783472672, 0.11968250251447506], 'true,false': [-9.868649107779169e-17, 0.20816115702479357], 'true,false,false': [0.20816115702479357, nan], 'false': [4.171003628426002e-17, nan]}, {'': [0.10789913335385995, 2.960594732333751e-17], 'true': [0.0050493090331444725, 0.19470970528950868], 'true,false': [0.19470970528950868, nan], 'false': [2.960594732333751e-17, nan]}, {'': [0.10301760993359133, 2.0094534382355774e-17], 'true': [0.01148576705060235, 0.10309363772759694], 'true,false': [-2.8783559897689243e-16, 0.21231833910034573], 'true,false,false': [0.21231833910034573, nan], 'false': [2.0094534382355774e-17, nan]}, {'': [0.09430922968721839, 6.832141690000964e-17], 'true': [0.005694506493903271, 0.20616632576562657], 'true,false': [0.20616632576562657, nan], 'false': [6.832141690000964e-17, nan]}, {'': [0.09719827437495916, 3.346605289539946e-17], 'true': [0.0040484618261774005, 0.20116319450893452], 'true,false': [0.0, 0.21512556249092787], 'true,false,false': [0.21512556249092787, nan], 'false': [3.346605289539946e-17, nan]}, {'': [0.09795050127131548, -5.187958058996058e-19], 'true': [0.09795050127131548, nan], 'true,true': [0.0063207816309959666, 0.18241317246876235], 'true,true,false': [8.673617379884035e-19, 0.1974826388888888], 'true,true,true': [-1.850371707708594e-17, 9.457455394955037e-17]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, E).;true;true
9;true,true;genre(A, F).;true;true
9;true,false;genre(A, G).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995111;  // std dev = 5.20e-07, 108.000 (wgt'ed) examples reached here.  /* #pos=108 */
%   | | else if ( actor(B) )
%   | | | then return -0.14185106490048766;  // std dev = 6.14e-08, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   | | | else return 0.8581489350995118;  // std dev = 1.46e-07, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   else return -0.14185106490048832;  // std dev = 0.000, 185.000 (wgt'ed) examples reached here.  /* #neg=185 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109548;  // std dev = 0.000, 108.000 (wgt'ed) examples reached here.  /* #pos=108 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | | else return -0.12854627751360465;  // std dev = 0.154, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
%   else return -0.1254446385283915;  // std dev = 0.000, 175.000 (wgt'ed) examples reached here.  /* #neg=175 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5553664367462834;  // std dev = 4.92e-07, 134.000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.11411432840973976;  // std dev = 0.114, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   else return -0.1123163781936066;  // std dev = 0.000, 194.000 (wgt'ed) examples reached here.  /* #neg=194 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( actor(A) )
%   | | then return 0.4175135841583096;  // std dev = 2.92e-07, 108.000 (wgt'ed) examples reached here.  /* #pos=108 */
%   | | else return -0.20808754292600293;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(A, E) )
%   | | then return -0.10143233996479085;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.4175135841583105;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | | else return -0.10326256482518205;  // std dev = 0.132, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
%   else return -0.10159632948783655;  // std dev = 0.000, 201.000 (wgt'ed) examples reached here.  /* #neg=201 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.13421224238714563;  // std dev = 0.059, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.32071184716015017;  // std dev = 0.000, 108.000 (wgt'ed) examples reached here.  /* #pos=108 */
%   | | else if ( actor(B) )
%   | | | then return -0.09214056769669901;  // std dev = 0.000, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
%   | | | else return 0.32071184716014955;  // std dev = 2.11e-08, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   else return -0.09269127618926053;  // std dev = 9.88e-08, 220.000 (wgt'ed) examples reached here.  /* #neg=220 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.2551722425694895;  // std dev = 0.000, 134.000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.08526943059151507;  // std dev = 0.073, 80.000 (wgt'ed) examples reached here.  /* #neg=80 */
%   else return -0.08518475138839678;  // std dev = 7.88e-08, 199.000 (wgt'ed) examples reached here.  /* #neg=199 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.0898128196528953;  // std dev = 0.063, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(B, E) )
%   | | then return 0.20975771563253554;  // std dev = 1.60e-07, 108.000 (wgt'ed) examples reached here.  /* #pos=108 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.20975771563253578;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | | else return -0.08167674757904485;  // std dev = 0.179, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
%   else return -0.07877675473109147;  // std dev = 7.74e-08, 194.000 (wgt'ed) examples reached here.  /* #neg=194 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.17709649774527758;  // std dev = 0.000, 134.000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.07345278349903843;  // std dev = 0.063, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   else return -0.07324622576333667;  // std dev = 1.12e-07, 190.000 (wgt'ed) examples reached here.  /* #neg=190 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.15017697170526859;  // std dev = 0.279, 109.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=108 */
%   | else if ( genre(A, E) )
%   | | then return -0.06503462671532888;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( actor(B) )
%   | | | then return -0.0678424484335375;  // std dev = 0.000, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
%   | | | else return 0.1527438580936709;  // std dev = 2.98e-08, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   else return -0.06842697784420262;  // std dev = 8.30e-08, 204.000 (wgt'ed) examples reached here.  /* #neg=204 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( genre(A, E) )
%   | | then return -0.14465542944872242;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return 0.13430519493206156;  // std dev = 1.25e-07, 108.000 (wgt'ed) examples reached here.  /* #pos=108 */
%   | else if ( genre(A, F) )
%   | | then return -0.061190290888425265;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.13400703000801117;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | | else return -0.06749241532592087;  // std dev = 0.193, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
%   else return -0.06419184008202626;  // std dev = 0.000, 196.000 (wgt'ed) examples reached here.  /* #neg=196 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063673
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.682 seconds
Total inference time: 0.851 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064994
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.121 seconds
Refined model CLL: -0.064994


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063673
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 5.197000000000001 seconds
Total inference time: 0.851 seconds
AUC ROC: 1.0
Total revision time: 5.197000000000001
Best scored revision CLL: -0.064994


Dataset: 4_cora_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 00:03:01
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063673, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 5.197000000000001, 'Inference time': 0.851, 'parameter_0.4': {'AUC ROC': 0.97178, 'AUC PR': 0.824078, 'CLL': -0.13965, 'Precision': [1.0, 0.5], 'Recall': 0.777778, 'F1': 0.875, 'Learning time': 1.183, 'Inference time': 0.863}}


Amount of data: 0.6
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;haswordauthor(E, C).;true;true
7;true,true,true;author(F, E), title(F, D).;false;false
7;true,true,false;title(G, D), venue(G, B).;false;false
7;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
7;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
7;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, B).;false;true
8;true,true,false;title(F, D), venue(F, A).;false;false
8;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
8;true,false,false;haswordvenue(A, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
8;false,true;haswordauthor(M, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;true,true;author(F, E), venue(F, B).;true;true
9;true,true,true;samebib(F, G), venue(G, A).;false;false
9;true,true,false;author(H, E), venue(H, A).;false;false
9;true,false;haswordtitle(I, C).;true;true
9;true,false,true;title(J, I), venue(J, A).;false;false
9;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995095;  // std dev = 1.08e-06, 172.000 (wgt'ed) examples reached here.  /* #pos=172 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.1145591915097676;  // std dev = 4.723, 117.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=30 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.1418510649004879;  // std dev = 0.000, 289.000 (wgt'ed) examples reached here.  /* #neg=289 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.714589492842521;  // std dev = 0.842, 173.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=172 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.07263127402448574;  // std dev = 4.809, 131.000 (wgt'ed) examples reached here.  /* #neg=101 #pos=30 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839202;  // std dev = 0.000, 308.000 (wgt'ed) examples reached here.  /* #neg=308 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1480490956405785;  // std dev = 0.212, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else if ( movie(E, A) )
%   | | then return 0.3430968535347077;  // std dev = 0.369, 303.000 (wgt'ed) examples reached here.  /* #neg=101 #pos=202 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360676;  // std dev = 0.000, 308.000 (wgt'ed) examples reached here.  /* #neg=308 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.47107351657740504;  // std dev = 0.000, 172.000 (wgt'ed) examples reached here.  /* #pos=172 */
%   | else if ( genre(A, E) )
%   | | then return -0.09838095929437926;  // std dev = 3.73e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.022629043529205747;  // std dev = 4.769, 124.000 (wgt'ed) examples reached here.  /* #neg=94 #pos=30 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783662;  // std dev = 0.000, 297.000 (wgt'ed) examples reached here.  /* #neg=297 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.13246141401860265;  // std dev = 0.304, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else if ( genre(B, E) )
%   | | then return 0.3573444334715446;  // std dev = 0.000, 172.000 (wgt'ed) examples reached here.  /* #pos=172 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.01488985470689377;  // std dev = 4.781, 126.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=30 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926043;  // std dev = 1.38e-07, 282.000 (wgt'ed) examples reached here.  /* #neg=282 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2769100482437885;  // std dev = 0.540, 173.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=172 */
%   | else if ( movie(E, A) )
%   | | then return 0.016208450868220252;  // std dev = 0.417, 130.000 (wgt'ed) examples reached here.  /* #neg=100 #pos=30 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 1.03e-07, 298.000 (wgt'ed) examples reached here.  /* #neg=298 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08091504963562209;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else if ( genre(B, E) )
%   | | then return 0.22773179973383226;  // std dev = 2.15e-07, 172.000 (wgt'ed) examples reached here.  /* #pos=172 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.029976960484170638;  // std dev = 4.716, 116.000 (wgt'ed) examples reached here.  /* #neg=86 #pos=30 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109143;  // std dev = 3.65e-08, 293.000 (wgt'ed) examples reached here.  /* #neg=293 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1817449589199319;  // std dev = 0.844, 175.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=172 */
%   | else if ( movie(E, B) )
%   | | then return -0.029587943626950865;  // std dev = 4.880, 153.000 (wgt'ed) examples reached here.  /* #neg=123 #pos=30 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.07324622576333695;  // std dev = 1.01e-07, 291.000 (wgt'ed) examples reached here.  /* #neg=291 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.16082526606169492;  // std dev = 0.503, 173.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=172 */
%   | else if ( genre(A, E) )
%   | | then return -0.07306854039687888;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.017189293671586506;  // std dev = 4.756, 122.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=30 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420297;  // std dev = 0.000, 295.000 (wgt'ed) examples reached here.  /* #neg=295 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return -0.3779794406346568;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return 0.14289316681414468;  // std dev = 1.07e-07, 172.000 (wgt'ed) examples reached here.  /* #pos=172 */
%   | | else if ( genre(A, G) )
%   | | | then return -0.06827142400381486;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return -0.018992762319122686;  // std dev = 4.860, 141.000 (wgt'ed) examples reached here.  /* #neg=111 #pos=30 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.06419184008202587;  // std dev = 1.35e-07, 319.000 (wgt'ed) examples reached here.  /* #neg=319 */


Results
   AUC ROC   = 0.971565
   AUC PR    = 0.823063
   CLL	      = -0.11952
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.777778
   F1        = 0.875


Total learning time: 1.362 seconds
Total inference time: 0.865 seconds
AUC ROC: 0.971565


Results scoring model
   AUC ROC   = 0.981555
   AUC PR    = 0.885484
   CLL	      = -0.116673
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.851485
   F1        = 0.919786


Total scoring time: 1.409 seconds
Parameter learned model CLL: -0.116673


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 8, 0], 'true,false,true': [1.08e-06, 0, 172], 'true,false,false,true': [4.723, 87, 30], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 289, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.842, 1, 172], 'true,false,true': [0.0, 7, 0], 'true,false,false,true': [4.809, 101, 30], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 308, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.212, 16, 0], 'true,false,true': [0.369, 101, 202], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 308, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 172], 'true,false,true': [3.73e-09, 11, 0], 'true,false,false,true': [4.769, 94, 30], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 297, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.304, 14, 0], 'true,false,true': [0.0, 0, 172], 'true,false,false,true': [4.781, 96, 30], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.38e-07, 282, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.54, 1, 172], 'true,false,true': [0.417, 100, 30], 'true,false,false': [0.0, 0, 0], 'false,true': [1.03e-07, 298, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 12, 0], 'true,false,true': [2.15e-07, 0, 172], 'true,false,false,true': [4.716, 86, 30], 'true,false,false,false': [0.0, 0, 0], 'false,true': [3.65e-08, 293, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.844, 3, 172], 'true,false,true': [4.88, 123, 30], 'true,false,false': [0.0, 0, 0], 'false,true': [1.01e-07, 291, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.503, 1, 172], 'true,false,true': [0.0, 9, 0], 'true,false,false,true': [4.756, 92, 30], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 295, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true,true,false': 'genre(A, G)'}, {'true,true,true,true': [0.0, 5, 0], 'true,true,true,false': [1.07e-07, 0, 172], 'true,true,false,true': [0.0, 8, 0], 'true,true,false,false': [4.86, 111, 30], 'true,false': [0.0, 0, 0], 'false': [1.35e-07, 319, 0]}]]
[{'': [0.21755149701278126, 0.0], 'true': [-6.938893903907228e-18, 0.21041414734019473], 'true,false': [6.774942364224211e-15, 0.19066403681788416], 'true,false,false': [0.19066403681788416, nan], 'false': [0.0, nan]}, {'': [0.1824244971432914, -8.651088503572649e-17], 'true': [0.004102658964346279, 0.1694962211987045], 'true,false': [-1.982541115402065e-18, 0.17656313734630852], 'true,false,false': [0.17656313734630852, nan], 'false': [-8.651088503572649e-17, nan]}, {'': [0.14097366441260153, -6.632501186072363e-17], 'true': [0.0028090196115193207, 0.13617046061260502], 'true,false': [0.13617046061260502, nan], 'false': [-6.632501186072363e-17, nan]}, {'': [0.12630792377763767, -5.3828995133340925e-17], 'true': [-6.196593625814827e-16, 0.16955472791610837], 'true,false': [1.261617073437678e-18, 0.18340270551508747], 'true,false,false': [0.18340270551508747, nan], 'false': [-5.3828995133340925e-17, nan]}, {'': [0.10599426030677057, 6.771573057997409e-17], 'true': [0.006613212633686115, 0.10532200546559106], 'true,false': [-9.088337317861747e-16, 0.18140589569160875], 'true,false,false': [0.18140589569160875, nan], 'false': [6.771573057997409e-17, nan]}, {'': [0.09219886396558005, 3.576557394765605e-17], 'true': [0.0016871805779080451, 0.1738437438858207], 'true,false': [0.1738437438858207, nan], 'false': [3.576557394765605e-17, nan]}, {'': [0.08518240270394663, 4.54698849675832e-18], 'true': [-4.625929269271485e-18, 0.08663411018811636], 'true,false': [2.685190571186425e-16, 0.19173602853745636], 'true,false,false': [0.19173602853745636, nan], 'false': [4.54698849675832e-18, nan]}, {'': [0.08588056109158475, 3.509983445550323e-17], 'true': [0.004071211531638197, 0.1556247512697909], 'true,false': [0.1556247512697909, nan], 'false': [3.509983445550323e-17, nan]}, {'': [0.08098096163128012, -5.268855032119387e-17], 'true': [0.0014639656198418163, 0.17321551125783022], 'true,false': [-1.5419764230904951e-18, 0.18543402311206625], 'true,false,false': [0.18543402311206625, nan], 'false': [-5.268855032119387e-17, nan]}, {'': [0.08211481780021872, 5.707729656380115e-17], 'true': [0.08211481780021872, nan], 'true,true': [0.007447576205555354, 0.15862688122975846], 'true,true,false': [0.0, 0.16749660479855114], 'true,true,true': [0.0, 6.712976427966062e-17]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, E).;true;true
9;true,true;genre(A, F).;true;true
9;true,false;genre(A, G).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995095;  // std dev = 1.08e-06, 172.000 (wgt'ed) examples reached here.  /* #pos=172 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.8581489350995117;  // std dev = 1.98e-07, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | | else return -0.14185106490048763;  // std dev = 8.02e-08, 87.000 (wgt'ed) examples reached here.  /* #neg=87 */
%   else return -0.14185106490048774;  // std dev = 1.49e-07, 315.000 (wgt'ed) examples reached here.  /* #neg=315 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.7194734122109547;  // std dev = 0.000, 61.000 (wgt'ed) examples reached here.  /* #pos=61 */
%   | | else return 0.7119295010436394;  // std dev = 0.079, 112.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=111 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.7194734122109546;  // std dev = 0.000, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | | else return -0.12544463852839144;  // std dev = 0.000, 89.000 (wgt'ed) examples reached here.  /* #neg=89 */
%   else return -0.12544463852839205;  // std dev = 0.000, 315.000 (wgt'ed) examples reached here.  /* #neg=315 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.5563896511158677;  // std dev = 0.013, 202.000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.11494434994725225;  // std dev = 0.195, 130.000 (wgt'ed) examples reached here.  /* #neg=130 */
%   else return -0.11231637819360697;  // std dev = 0.000, 287.000 (wgt'ed) examples reached here.  /* #neg=287 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.4172647635479763;  // std dev = 1.03e-07, 61.000 (wgt'ed) examples reached here.  /* #pos=61 */
%   | | else if ( actor(A) )
%   | | | then return 0.419100239269836;  // std dev = 0.000, 111.000 (wgt'ed) examples reached here.  /* #pos=111 */
%   | | | else return -0.20671099963663767;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(A, E) )
%   | | then return -0.1013567136538877;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.41726476354797615;  // std dev = 0.000, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | | else return -0.1013567136538877;  // std dev = 4.71e-08, 99.000 (wgt'ed) examples reached here.  /* #neg=99 */
%   else return -0.10159632948783662;  // std dev = 0.000, 288.000 (wgt'ed) examples reached here.  /* #neg=288 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11079461567123872;  // std dev = 0.103, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( genre(B, E) )
%   | | then return 0.32134632795078133;  // std dev = 0.008, 172.000 (wgt'ed) examples reached here.  /* #pos=172 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.32054316444881775;  // std dev = 0.000, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | | else return -0.09249061170481544;  // std dev = 2.79e-08, 87.000 (wgt'ed) examples reached here.  /* #neg=87 */
%   else return -0.0926912761892604;  // std dev = 1.75e-07, 322.000 (wgt'ed) examples reached here.  /* #neg=322 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2532060983244284;  // std dev = 0.414, 173.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=172 */
%   | else if ( director(B), actor(A) )
%   | | then return 0.2550571385826607;  // std dev = 0.000, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | else return -0.08488358587073717;  // std dev = 0.004, 108.000 (wgt'ed) examples reached here.  /* #neg=108 */
%   else return -0.08518475138839678;  // std dev = 1.05e-07, 304.000 (wgt'ed) examples reached here.  /* #neg=304 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09132883237847358;  // std dev = 0.158, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else if ( genre(B, E) )
%   | | then return 0.21046195901295756;  // std dev = 0.006, 172.000 (wgt'ed) examples reached here.  /* #pos=172 */
%   | | else if ( actor(B) )
%   | | | then return -0.07863995644803091;  // std dev = 3.49e-08, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */
%   | | | else return 0.20967640447235159;  // std dev = 0.000, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   else return -0.07877675473109144;  // std dev = 4.71e-08, 272.000 (wgt'ed) examples reached here.  /* #neg=272 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.17752734103425993;  // std dev = 0.006, 202.000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.07797371685824836;  // std dev = 0.216, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
%   else return -0.07324622576333702;  // std dev = 9.19e-08, 312.000 (wgt'ed) examples reached here.  /* #neg=312 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.15127284708913571;  // std dev = 0.323, 173.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=172 */
%   | else if ( genre(A, E) )
%   | | then return -0.06607673755924474;  // std dev = 3.73e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.1526351647332369;  // std dev = 1.05e-08, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | | else return -0.0682309976210645;  // std dev = 0.021, 96.000 (wgt'ed) examples reached here.  /* #neg=96 */
%   else return -0.06842697784420301;  // std dev = 0.000, 302.000 (wgt'ed) examples reached here.  /* #neg=302 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( genre(A, E) )
%   | | then return -0.193536091249761;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0.13453940927263733;  // std dev = 0.004, 172.000 (wgt'ed) examples reached here.  /* #pos=172 */
%   | else if ( genre(A, F) )
%   | | then return -0.06211415989536857;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.1339221690656186;  // std dev = 2.79e-08, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | | else return -0.0641468722368577;  // std dev = 0.027, 118.000 (wgt'ed) examples reached here.  /* #neg=118 */
%   else return -0.06419184008202605;  // std dev = 9.42e-08, 281.000 (wgt'ed) examples reached here.  /* #neg=281 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.06372
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.032 seconds
Total inference time: 0.873 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064773
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.439 seconds
Refined model CLL: -0.064773


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.06372
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 6.242 seconds
Total inference time: 0.873 seconds
AUC ROC: 1.0
Total revision time: 6.242
Best scored revision CLL: -0.064773


Dataset: 4_cora_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 00:03:09
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.06372, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 6.242, 'Inference time': 0.873, 'parameter_0.6': {'AUC ROC': 0.971565, 'AUC PR': 0.823063, 'CLL': -0.11952, 'Precision': [1.0, 0.5], 'Recall': 0.777778, 'F1': 0.875, 'Learning time': 1.362, 'Inference time': 0.865}}


Amount of data: 0.8
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;haswordauthor(E, C).;true;true
7;true,true,true;author(F, E), title(F, D).;false;false
7;true,true,false;title(G, D), venue(G, B).;false;false
7;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
7;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
7;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, B).;false;true
8;true,true,false;title(F, D), venue(F, A).;false;false
8;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
8;true,false,false;haswordvenue(A, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
8;false,true;haswordauthor(M, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;true,true;author(F, E), venue(F, B).;true;true
9;true,true,true;samebib(F, G), venue(G, A).;false;false
9;true,true,false;author(H, E), venue(H, A).;false;false
9;true,false;haswordtitle(I, C).;true;true
9;true,false,true;title(J, I), venue(J, A).;false;false
9;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048774;  // std dev = 1.05e-08, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else if ( genre(B, E) )
%   | | then return 0.858148935099509;  // std dev = 1.08e-06, 227.000 (wgt'ed) examples reached here.  /* #pos=227 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.1560212755250436;  // std dev = 5.430, 141.000 (wgt'ed) examples reached here.  /* #neg=99 #pos=42 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048735;  // std dev = 3.00e-07, 397.000 (wgt'ed) examples reached here.  /* #neg=397 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7084527419839223;  // std dev = 1.454, 230.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=227 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 5.27e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.08659630638262508;  // std dev = 5.618, 169.000 (wgt'ed) examples reached here.  /* #neg=127 #pos=42 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839222;  // std dev = 0.000, 362.000 (wgt'ed) examples reached here.  /* #neg=362 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.13896833467941205;  // std dev = 0.198, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else if ( movie(E, A) )
%   | | then return 0.35571960601191727;  // std dev = 0.369, 393.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=269 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360618;  // std dev = 0.000, 407.000 (wgt'ed) examples reached here.  /* #neg=407 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.460696506456356;  // std dev = 1.156, 230.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=227 */
%   | else if ( genre(A, E) )
%   | | then return -0.09918938505902736;  // std dev = 9.13e-09, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else if ( movie(F, B) )
%   | | | then return -4.103127947478783E-4;  // std dev = 5.684, 182.000 (wgt'ed) examples reached here.  /* #neg=140 #pos=42 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783595;  // std dev = 1.07e-08, 396.000 (wgt'ed) examples reached here.  /* #neg=396 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14293521747913207;  // std dev = 0.336, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else if ( genre(B, E) )
%   | | then return 0.35823849634110694;  // std dev = 0.000, 227.000 (wgt'ed) examples reached here.  /* #pos=227 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.023438830112691923;  // std dev = 5.595, 165.000 (wgt'ed) examples reached here.  /* #neg=123 #pos=42 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926114;  // std dev = 9.42e-08, 438.000 (wgt'ed) examples reached here.  /* #neg=438 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2736163654207118;  // std dev = 0.927, 230.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=227 */
%   | else if ( movie(E, A) )
%   | | then return 0.013441547233860244;  // std dev = 0.414, 182.000 (wgt'ed) examples reached here.  /* #neg=140 #pos=42 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 1.26e-07, 401.000 (wgt'ed) examples reached here.  /* #neg=401 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11947307141292991;  // std dev = 0.302, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else if ( genre(B, E) )
%   | | then return 0.22884002717980137;  // std dev = 2.95e-07, 227.000 (wgt'ed) examples reached here.  /* #pos=227 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.010795693384967367;  // std dev = 5.618, 169.000 (wgt'ed) examples reached here.  /* #neg=127 #pos=42 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109141;  // std dev = 1.23e-07, 405.000 (wgt'ed) examples reached here.  /* #neg=405 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1867795784114113;  // std dev = 0.676, 229.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=227 */
%   | else if ( movie(E, B) )
%   | | then return 0.01858428599485084;  // std dev = 5.560, 173.000 (wgt'ed) examples reached here.  /* #neg=131 #pos=42 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.07324622576333771;  // std dev = 0.000, 397.000 (wgt'ed) examples reached here.  /* #neg=397 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.15733839126326152;  // std dev = 0.848, 230.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=227 */
%   | else if ( genre(A, E) )
%   | | then return -0.07338382546258403;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.002524064026212168;  // std dev = 5.629, 171.000 (wgt'ed) examples reached here.  /* #neg=129 #pos=42 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420333;  // std dev = 0.000, 393.000 (wgt'ed) examples reached here.  /* #neg=393 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return -0.36439378454466537;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return 0.14333889834265512;  // std dev = 0.000, 227.000 (wgt'ed) examples reached here.  /* #pos=227 */
%   | | else if ( genre(A, G) )
%   | | | then return -0.06854740779053882;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | | else return -0.00891782146565983;  // std dev = 5.670, 179.000 (wgt'ed) examples reached here.  /* #neg=137 #pos=42 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.0641918400820256;  // std dev = 1.95e-07, 398.000 (wgt'ed) examples reached here.  /* #neg=398 */


Results
   AUC ROC   = 0.971565
   AUC PR    = 0.823063
   CLL	      = -0.123641
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.777778
   F1        = 0.875


Total learning time: 1.624 seconds
Total inference time: 0.881 seconds
AUC ROC: 0.971565


Results scoring model
   AUC ROC   = 0.980732
   AUC PR    = 0.87973
   CLL	      = -0.120448
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.843866
   F1        = 0.915323


Total scoring time: 1.563 seconds
Parameter learned model CLL: -0.120448


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [1.05e-08, 21, 0], 'true,false,true': [1.08e-06, 0, 227], 'true,false,false,true': [5.43, 99, 42], 'true,false,false,false': [0.0, 0, 0], 'false,true': [3e-07, 397, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.454, 3, 227], 'true,false,true': [5.27e-09, 10, 0], 'true,false,false,true': [5.618, 127, 42], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 362, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.198, 17, 0], 'true,false,true': [0.369, 124, 269], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 407, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.156, 3, 227], 'true,false,true': [9.13e-09, 18, 0], 'true,false,false,true': [5.684, 140, 42], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.07e-08, 396, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.336, 15, 0], 'true,false,true': [0.0, 0, 227], 'true,false,false,true': [5.595, 123, 42], 'true,false,false,false': [0.0, 0, 0], 'false,true': [9.42e-08, 438, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.927, 3, 227], 'true,false,true': [0.414, 140, 42], 'true,false,false': [0.0, 0, 0], 'false,true': [1.26e-07, 401, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.302, 12, 0], 'true,false,true': [2.95e-07, 0, 227], 'true,false,false,true': [5.618, 127, 42], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.23e-07, 405, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.676, 2, 227], 'true,false,true': [5.56, 131, 42], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 397, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.848, 3, 227], 'true,false,true': [0.0, 17, 0], 'true,false,false,true': [5.629, 129, 42], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 393, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true,true,false': 'genre(A, G)'}, {'true,true,true,true': [0.0, 2, 0], 'true,true,true,false': [0.0, 0, 227], 'true,true,false,true': [0.0, 18, 0], 'true,true,false,false': [5.67, 137, 42], 'true,false': [0.0, 0, 0], 'false': [1.95e-07, 398, 0]}]]
[{'': [0.21332134997786517, 2.259597490924752e-16], 'true': [5.28677630773884e-18, 0.19664904300567473], 'true,false': [5.133436505050944e-15, 0.20914440923494912], 'true,false,false': [0.20914440923494912, nan], 'false': [2.259597490924752e-16, nan]}, {'': [0.18220858597502135, -1.2022304576051418e-16], 'true': [0.009190108033810356, 0.17869623307929872], 'true,false': [2.7755575615628915e-18, 0.18675816673085546], 'true,false,false': [0.18675816673085546, nan], 'false': [-1.2022304576051418e-16, nan]}, {'': [0.14002141256724138, -1.7458052475678137e-17], 'true': [0.002308562049694168, 0.13583168943724433], 'true,false': [0.13583168943724433, nan], 'false': [-1.7458052475678137e-17, nan]}, {'': [0.13356800344815498, 1.1438661465834946e-16], 'true': [0.00580812982729143, 0.16233758482757557], 'true,false': [4.625929269271485e-18, 0.17751479289940772], 'true,false,false': [0.17751479289940772, nan], 'false': [1.1438661465834946e-16, nan]}, {'': [0.108124881481688, 2.0278046111875004e-17], 'true': [0.007511379658572456, 0.10719182872124126], 'true,false': [-1.095550473638921e-16, 0.18975206611570208], 'true,false,false': [0.18975206611570208, nan], 'false': [2.0278046111875004e-17, nan]}, {'': [0.09462737241955686, 3.986835799152682e-17], 'true': [0.003739815986981499, 0.17169664407502938], 'true,false': [0.17169664407502938, nan], 'false': [3.986835799152682e-17, nan]}, {'': [0.09072979439185684, 3.728156329605464e-17], 'true': [0.007576455510602503, 0.09133320819706969], 'true,false': [3.8344266577362237e-16, 0.18675816673085563], 'true,false,false': [0.18675816673085563, nan], 'false': [3.728156329605464e-17, nan]}, {'': [0.08496017277244258, -6.935398239472011e-17], 'true': [0.001994043282414299, 0.1786671383973106], 'true,false': [0.1786671383973106, nan], 'false': [-6.935398239472011e-17, nan]}, {'': [0.0842001579893379, -1.1073980296515557e-16], 'true': [0.0031231267098728458, 0.16900695267350774], 'true,false': [-1.6326809185664067e-18, 0.18528778085564854], 'true,false,false': [0.18528778085564854, nan], 'false': [-1.1073980296515557e-16, nan]}, {'': [0.08263441507085191, 9.540107397532752e-17], 'true': [0.08263441507085191, nan], 'true,true': [0.00223179925404659, 0.16346906517753607], 'true,true,false': [0.0, 0.17958241003714043], 'true,true,true': [0.0, -2.0737205393879577e-16]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, E).;true;true
9;true,true;genre(A, F).;true;true
9;true,false;genre(A, G).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else if ( genre(B, E) )
%   | | then return 0.858148935099509;  // std dev = 1.08e-06, 227.000 (wgt'ed) examples reached here.  /* #pos=227 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.8581489350995118;  // std dev = 2.38e-07, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   | | | else return -0.14185106490048768;  // std dev = 6.66e-08, 117.000 (wgt'ed) examples reached here.  /* #neg=117 */
%   else return -0.14185106490048743;  // std dev = 2.63e-07, 373.000 (wgt'ed) examples reached here.  /* #neg=373 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.7194734122109541;  // std dev = 2.67e-07, 84.000 (wgt'ed) examples reached here.  /* #pos=84 */
%   | | else return 0.7021120824012433;  // std dev = 0.120, 146.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=143 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 7.45e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.719473412210955;  // std dev = 0.000, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   | | | else return -0.12544463852839133;  // std dev = 0.000, 113.000 (wgt'ed) examples reached here.  /* #neg=113 */
%   else return -0.12544463852839227;  // std dev = 0.000, 407.000 (wgt'ed) examples reached here.  /* #neg=407 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.13474938712944737;  // std dev = 0.174, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else if ( actor(A), director(B) )
%   | | then return 0.5576432135634172;  // std dev = 0.035, 269.000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | | else return -0.11231637819360621;  // std dev = 8.02e-08, 106.000 (wgt'ed) examples reached here.  /* #neg=106 */
%   else return -0.1123163781936062;  // std dev = 0.000, 404.000 (wgt'ed) examples reached here.  /* #neg=404 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.41689660148458346;  // std dev = 0.621, 228.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=227 */
%   | else if ( genre(A, E) )
%   | | then return -0.09956698958149025;  // std dev = 3.73e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.4169599853702655;  // std dev = 0.000, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   | | | else return -0.10159632948783631;  // std dev = 0.000, 110.000 (wgt'ed) examples reached here.  /* #neg=110 */
%   else return -0.10159632948783623;  // std dev = 1.33e-07, 359.000 (wgt'ed) examples reached here.  /* #neg=359 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( female(B) )
%   | | then return -0.09098953720992486;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return -0.11966201179354245;  // std dev = 0.067, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( genre(B, E) )
%   | | then return 0.3227389908194193;  // std dev = 0.028, 227.000 (wgt'ed) examples reached here.  /* #pos=227 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.32033655894045543;  // std dev = 0.000, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   | | | else return -0.09269127618926076;  // std dev = 8.02e-08, 140.000 (wgt'ed) examples reached here.  /* #neg=140 */
%   else return -0.09269127618926083;  // std dev = 1.53e-07, 394.000 (wgt'ed) examples reached here.  /* #neg=394 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.2562998528799214;  // std dev = 0.026, 269.000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.08947521967142273;  // std dev = 0.334, 151.000 (wgt'ed) examples reached here.  /* #neg=151 */
%   else return -0.08518475138839678;  // std dev = 1.23e-07, 395.000 (wgt'ed) examples reached here.  /* #neg=395 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( actor(B) )
%   | | then return -0.07611614585086257;  // std dev = 0.003, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return -0.23744674179594533;  // std dev = 7.45e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(B, E) )
%   | | then return 0.21077773246275255;  // std dev = 0.021, 227.000 (wgt'ed) examples reached here.  /* #pos=227 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.20934767300036292;  // std dev = 1.49e-08, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   | | | else return -0.07846595342410914;  // std dev = 2.11e-08, 126.000 (wgt'ed) examples reached here.  /* #neg=126 */
%   else return -0.07877675473109141;  // std dev = 1.13e-07, 391.000 (wgt'ed) examples reached here.  /* #neg=391 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.17624780851664384;  // std dev = 0.000, 84.000 (wgt'ed) examples reached here.  /* #pos=84 */
%   | | else return 0.17105785756372777;  // std dev = 0.053, 146.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=143 */
%   | else if ( director(B), actor(A) )
%   | | then return 0.17679569247832388;  // std dev = 5.16e-08, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   | | else return -0.07283945779723155;  // std dev = 0.007, 117.000 (wgt'ed) examples reached here.  /* #neg=117 */
%   else return -0.0732462257633372;  // std dev = 3.65e-08, 392.000 (wgt'ed) examples reached here.  /* #neg=392 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.15209973665342072;  // std dev = 3.33e-08, 84.000 (wgt'ed) examples reached here.  /* #pos=84 */
%   | | else return 0.14720901719716442;  // std dev = 0.054, 146.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=143 */
%   | else if ( genre(A, E) )
%   | | then return -0.06598482149751889;  // std dev = 0.003, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.15251562876750993;  // std dev = 0.000, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   | | | else return -0.06819957526298005;  // std dev = 0.000, 119.000 (wgt'ed) examples reached here.  /* #neg=119 */
%   else return -0.06842697784420336;  // std dev = 0.000, 406.000 (wgt'ed) examples reached here.  /* #neg=406 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( genre(A, E) )
%   | | then return -0.2523894480378078;  // std dev = 1.05e-08, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0.13552396302967898;  // std dev = 0.023, 227.000 (wgt'ed) examples reached here.  /* #pos=227 */
%   | else if ( genre(A, F) )
%   | | then return -0.06208354422606733;  // std dev = 0.003, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.13382882968399057;  // std dev = 2.36e-08, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   | | | else return -0.06399116470800315;  // std dev = 0.000, 131.000 (wgt'ed) examples reached here.  /* #neg=131 */
%   else return -0.06419184008202564;  // std dev = 1.84e-07, 382.000 (wgt'ed) examples reached here.  /* #neg=382 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063819
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.374 seconds
Total inference time: 0.897 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064997
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.667 seconds
Refined model CLL: -0.064997


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063819
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 7.228 seconds
Total inference time: 0.897 seconds
AUC ROC: 1.0
Total revision time: 7.228
Best scored revision CLL: -0.064997


Dataset: 4_cora_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 00:03:19
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063819, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 7.228, 'Inference time': 0.897, 'parameter_0.8': {'AUC ROC': 0.971565, 'AUC PR': 0.823063, 'CLL': -0.123641, 'Precision': [1.0, 0.5], 'Recall': 0.777778, 'F1': 0.875, 'Learning time': 1.624, 'Inference time': 0.881}}


Amount of data: 1.0
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;haswordauthor(E, C).;true;true
7;true,true,true;author(F, E), title(F, D).;false;false
7;true,true,false;title(G, D), venue(G, B).;false;false
7;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
7;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
7;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, B).;false;true
8;true,true,false;title(F, D), venue(F, A).;false;false
8;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
8;true,false,false;haswordvenue(A, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
8;false,true;haswordauthor(M, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;true,true;author(F, E), venue(F, B).;true;true
9;true,true,true;samebib(F, G), venue(G, A).;false;false
9;true,true,false;author(H, E), venue(H, A).;false;false
9;true,false;haswordtitle(I, C).;true;true
9;true,false,true;title(J, I), venue(J, A).;false;false
9;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995085;  // std dev = 1.08e-06, 288.000 (wgt'ed) examples reached here.  /* #pos=288 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.0788696558202328;  // std dev = 6.179, 222.000 (wgt'ed) examples reached here.  /* #neg=173 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048804;  // std dev = 0.000, 532.000 (wgt'ed) examples reached here.  /* #neg=532 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7107629168425108;  // std dev = 1.456, 291.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=288 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.08498935036975683;  // std dev = 6.116, 207.000 (wgt'ed) examples reached here.  /* #neg=158 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.1254446385283923;  // std dev = 0.000, 502.000 (wgt'ed) examples reached here.  /* #neg=502 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12043599625964999;  // std dev = 0.155, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | else if ( movie(E, A) )
%   | | then return 0.357305424345451;  // std dev = 0.363, 493.000 (wgt'ed) examples reached here.  /* #neg=156 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360583;  // std dev = 0.000, 494.000 (wgt'ed) examples reached here.  /* #neg=494 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4638384784938333;  // std dev = 0.950, 290.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=288 */
%   | else if ( genre(A, E) )
%   | | then return -0.10085760901902986;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.03745983272813614;  // std dev = 6.041, 192.000 (wgt'ed) examples reached here.  /* #neg=143 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783538;  // std dev = 1.57e-08, 503.000 (wgt'ed) examples reached here.  /* #neg=503 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11202393360174476;  // std dev = 0.268, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else if ( genre(B, E) )
%   | | then return 0.35662206167205457;  // std dev = 0.000, 288.000 (wgt'ed) examples reached here.  /* #pos=288 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.010222810498928389;  // std dev = 6.206, 229.000 (wgt'ed) examples reached here.  /* #neg=180 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926143;  // std dev = 0.000, 493.000 (wgt'ed) examples reached here.  /* #neg=493 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.27765532682035704;  // std dev = 0.548, 289.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=288 */
%   | else if ( movie(E, A) )
%   | | then return 0.010444074946161149;  // std dev = 0.415, 217.000 (wgt'ed) examples reached here.  /* #neg=168 #pos=49 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 1.49e-07, 528.000 (wgt'ed) examples reached here.  /* #neg=528 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14935263563305995;  // std dev = 0.550, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | else if ( genre(B, E) )
%   | | then return 0.2271747969427107;  // std dev = 0.000, 288.000 (wgt'ed) examples reached here.  /* #pos=288 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.004736865566475263;  // std dev = 6.147, 214.000 (wgt'ed) examples reached here.  /* #neg=165 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109215;  // std dev = 0.000, 515.000 (wgt'ed) examples reached here.  /* #neg=515 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1847723717615007;  // std dev = 0.835, 291.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=288 */
%   | else if ( movie(E, B) )
%   | | then return 0.002506999363572203;  // std dev = 6.140, 224.000 (wgt'ed) examples reached here.  /* #neg=175 #pos=49 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.07324622576333693;  // std dev = 1.46e-07, 494.000 (wgt'ed) examples reached here.  /* #neg=494 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.15953905067967167;  // std dev = 0.701, 290.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=288 */
%   | else if ( genre(A, E) )
%   | | then return -0.07330370048783999;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.04080663685518572;  // std dev = 5.996, 184.000 (wgt'ed) examples reached here.  /* #neg=135 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420357;  // std dev = 0.000, 508.000 (wgt'ed) examples reached here.  /* #neg=508 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return -0.3711945742491045;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return 0.14236073350595776;  // std dev = 0.000, 288.000 (wgt'ed) examples reached here.  /* #pos=288 */
%   | | else if ( genre(A, G) )
%   | | | then return -0.06847728414449614;  // std dev = 8.33e-09, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | | else return 0.011076841713160882;  // std dev = 6.087, 201.000 (wgt'ed) examples reached here.  /* #neg=152 #pos=49 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.06419184008202541;  // std dev = 2.37e-07, 475.000 (wgt'ed) examples reached here.  /* #neg=475 */


Results
   AUC ROC   = 0.971565
   AUC PR    = 0.823063
   CLL	      = -0.121416
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.777778
   F1        = 0.875


Total learning time: 2.013 seconds
Total inference time: 0.915 seconds
AUC ROC: 0.971565


Results scoring model
   AUC ROC   = 0.982257
   AUC PR    = 0.888508
   CLL	      = -0.117539
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.854599
   F1        = 0.9216


Total scoring time: 1.851 seconds
Parameter learned model CLL: -0.117539


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 17, 0], 'true,false,true': [1.08e-06, 0, 288], 'true,false,false,true': [6.179, 173, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 532, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.456, 3, 288], 'true,false,true': [0.0, 17, 0], 'true,false,false,true': [6.116, 158, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 502, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.155, 28, 0], 'true,false,true': [0.363, 156, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 494, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.95, 2, 288], 'true,false,true': [0.0, 13, 0], 'true,false,false,true': [6.041, 143, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.57e-08, 503, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.268, 20, 0], 'true,false,true': [0.0, 0, 288], 'true,false,false,true': [6.206, 180, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 493, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.548, 1, 288], 'true,false,true': [0.415, 168, 49], 'true,false,false': [0.0, 0, 0], 'false,true': [1.49e-07, 528, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.55, 26, 0], 'true,false,true': [0.0, 0, 288], 'true,false,false,true': [6.147, 165, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 515, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.835, 3, 288], 'true,false,true': [6.14, 175, 49], 'true,false,false': [0.0, 0, 0], 'false,true': [1.46e-07, 494, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.701, 2, 288], 'true,false,true': [0.0, 16, 0], 'true,false,false,true': [5.996, 135, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 508, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true,true,false': 'genre(A, G)'}, {'true,true,true,true': [0.0, 5, 0], 'true,true,true,false': [0.0, 0, 288], 'true,true,false,true': [8.33e-09, 20, 0], 'true,true,false,false': [6.087, 152, 49], 'true,false': [0.0, 0, 0], 'false': [2.37e-07, 475, 0]}]]
[{'': [0.2305484843138481, -1.502557476936302e-16], 'true': [-3.2653618371328133e-18, 0.22414840445982576], 'true,false': [4.046146134189459e-15, 0.17200308416524734], 'true,false,false': [0.17200308416524734, nan], 'false': [-1.502557476936302e-16, nan]}, {'': [0.17930597752973237, -1.2561886015679063e-16], 'true': [0.007283782038113938, 0.17007426687705682], 'true,false': [0.0, 0.18068099605591487], 'true,false,false': [0.18068099605591487, nan], 'false': [-1.2561886015679063e-16, nan]}, {'': [0.13650985451409103, -1.0787592142106784e-17], 'true': [0.0008570665679994606, 0.13194818377878784], 'true,false': [0.13194818377878784, nan], 'false': [-1.0787592142106784e-17, nan]}, {'': [0.12196383536841644, 2.4897247947856396e-16], 'true': [0.0031123361189541216, 0.17915966809129247], 'true,false': [0.0, 0.1900770399305546], 'true,false,false': [0.1900770399305546, nan], 'false': [2.4897247947856396e-16, nan]}, {'': [0.10718632487183191, -2.5222105224750006e-17], 'true': [0.003582570026806628, 0.1077032826444468], 'true,false': [-8.881784197001252e-16, 0.1681890124139497], 'true,false,false': [0.1681890124139497, nan], 'false': [-2.5222105224750006e-17, nan]}, {'': [0.09208584019140117, 4.2053902447922596e-17], 'true': [0.0010376056590106287, 0.17256272689093302], 'true,false': [0.17256272689093302, nan], 'false': [4.2053902447922596e-17, nan]}, {'': [0.08734617571999605, -5.001393042971579e-17], 'true': [0.01161909682428567, 0.08736057678456541], 'true,false': [-3.577385301569949e-16, 0.17654380295222147], 'true,false,false': [0.17654380295222147, nan], 'false': [-5.001393042971579e-17, nan]}, {'': [0.08272273800375318, 4.315036856842714e-17], 'true': [0.002397340834752205, 0.1683027462890767], 'true,false': [0.1683027462890767, nan], 'false': [4.315036856842714e-17, nan]}, {'': [0.07871426015734677, -1.2413517283210412e-16], 'true': [0.001696898989215388, 0.18071379282752553], 'true,false': [0.0, 0.19538634215500988], 'true,false,false': [0.19538634215500988, nan], 'false': [-1.2413517283210412e-16, nan]}, {'': [0.07896090467888194, 1.18735430844122e-16], 'true': [0.07896090467888194, nan], 'true,true': [0.004423863270832232, 0.16818936017497443], 'true,true,false': [3.469446951953614e-18, 0.18435187247840426], 'true,true,true': [0.0, -1.6653345369377348e-16]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, E).;true;true
9;true,true;genre(A, F).;true;true
9;true,false;genre(A, G).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995085;  // std dev = 1.08e-06, 288.000 (wgt'ed) examples reached here.  /* #pos=288 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.8581489350995122;  // std dev = 1.69e-07, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.14185106490048813;  // std dev = 0.000, 158.000 (wgt'ed) examples reached here.  /* #neg=158 */
%   else return -0.14185106490048766;  // std dev = 0.000, 493.000 (wgt'ed) examples reached here.  /* #neg=493 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.7194734122109548;  // std dev = 0.000, 105.000 (wgt'ed) examples reached here.  /* #pos=105 */
%   | | else return 0.7014002988261578;  // std dev = 0.122, 187.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=183 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 7.45e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.7194734122109547;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.12544463852839127;  // std dev = 5.16e-08, 156.000 (wgt'ed) examples reached here.  /* #neg=156 */
%   else return -0.12544463852839233;  // std dev = 0.000, 488.000 (wgt'ed) examples reached here.  /* #neg=488 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12476539540738298;  // std dev = 0.149, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else if ( director(B), actor(A) )
%   | | then return 0.5577874093124621;  // std dev = 0.041, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | | else return -0.11231637819360633;  // std dev = 7.88e-08, 159.000 (wgt'ed) examples reached here.  /* #neg=159 */
%   else return -0.11231637819360589;  // std dev = 0.000, 476.000 (wgt'ed) examples reached here.  /* #neg=476 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.416924931175361;  // std dev = 1.46e-07, 105.000 (wgt'ed) examples reached here.  /* #pos=105 */
%   | | else return 0.41457124819013647;  // std dev = 0.065, 185.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=183 */
%   | else if ( genre(A, E) )
%   | | then return -0.10046567382908779;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.4169249311753603;  // std dev = 5.96e-08, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.10159632948783645;  // std dev = 0.000, 158.000 (wgt'ed) examples reached here.  /* #neg=158 */
%   else return -0.10159632948783529;  // std dev = 3.76e-07, 526.000 (wgt'ed) examples reached here.  /* #neg=526 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( actor(B) )
%   | | then return -0.09174378458515357;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else return -0.27875514320126366;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.3231489135160596;  // std dev = 0.036, 288.000 (wgt'ed) examples reached here.  /* #pos=288 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.3203127969928787;  // std dev = 1.12e-07, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.09269127618926074;  // std dev = 7.30e-08, 146.000 (wgt'ed) examples reached here.  /* #neg=146 */
%   else return -0.09269127618926158;  // std dev = 0.000, 529.000 (wgt'ed) examples reached here.  /* #neg=529 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.2543616542812292;  // std dev = 0.000, 105.000 (wgt'ed) examples reached here.  /* #pos=105 */
%   | | else return 0.25044004991797963;  // std dev = 0.061, 186.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=183 */
%   | else if ( actor(A), director(B) )
%   | | then return 0.25489993188997134;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | else return -0.08510758691046352;  // std dev = 0.003, 146.000 (wgt'ed) examples reached here.  /* #neg=146 */
%   else return -0.08518475138839678;  // std dev = 1.49e-07, 525.000 (wgt'ed) examples reached here.  /* #neg=525 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( actor(B) )
%   | | then return -0.07803296207532359;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else return -0.2730981898193519;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.21176246449888794;  // std dev = 0.033, 288.000 (wgt'ed) examples reached here.  /* #pos=288 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.20956534063411433;  // std dev = 5.96e-08, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.0787823548147144;  // std dev = 0.000, 168.000 (wgt'ed) examples reached here.  /* #neg=168 */
%   else return -0.07877675473109194;  // std dev = 0.000, 479.000 (wgt'ed) examples reached here.  /* #neg=479 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( director(A) )
%   | | then return -0.2223440585310049;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0.17856616127066677;  // std dev = 0.029, 288.000 (wgt'ed) examples reached here.  /* #pos=288 */
%   | else if ( director(B), actor(A) )
%   | | then return 0.17695538695817703;  // std dev = 2.98e-08, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | else return -0.0731503640578709;  // std dev = 0.003, 155.000 (wgt'ed) examples reached here.  /* #neg=155 */
%   else return -0.07324622576333681;  // std dev = 1.81e-07, 520.000 (wgt'ed) examples reached here.  /* #neg=520 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.15184876799479963;  // std dev = 9.66e-08, 105.000 (wgt'ed) examples reached here.  /* #pos=105 */
%   | | else if ( actor(A) )
%   | | | then return 0.15501126808828328;  // std dev = 0.000, 183.000 (wgt'ed) examples reached here.  /* #pos=183 */
%   | | | else return -0.1862744148724418;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(A, E) )
%   | | then return -0.06782678526549048;  // std dev = 5.27e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.15263680296229662;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.06843765114634145;  // std dev = 0.000, 158.000 (wgt'ed) examples reached here.  /* #neg=158 */
%   else return -0.06842697784420355;  // std dev = 0.000, 506.000 (wgt'ed) examples reached here.  /* #neg=506 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( genre(A, E) )
%   | | then return -0.15967118298629215;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0.1348753199641292;  // std dev = 0.020, 288.000 (wgt'ed) examples reached here.  /* #pos=288 */
%   | else if ( genre(A, F) )
%   | | then return -0.0636620255473768;  // std dev = 9.13e-09, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.13392344817680726;  // std dev = 3.94e-08, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.06420125706146233;  // std dev = 0.000, 170.000 (wgt'ed) examples reached here.  /* #neg=170 */
%   else return -0.06419184008202541;  // std dev = 2.41e-07, 479.000 (wgt'ed) examples reached here.  /* #neg=479 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063804
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.895 seconds
Total inference time: 0.87 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064572
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.88 seconds
Refined model CLL: -0.064572


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063804
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 8.639 seconds
Total inference time: 0.87 seconds
AUC ROC: 1.0
Total revision time: 8.639
Best scored revision CLL: -0.064572


Dataset: 4_cora_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 00:03:30
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063804, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 8.639, 'Inference time': 0.87, 'parameter_1.0': {'AUC ROC': 0.971565, 'AUC PR': 0.823063, 'CLL': -0.121416, 'Precision': [1.0, 0.5], 'Recall': 0.777778, 'F1': 0.875, 'Learning time': 2.013, 'Inference time': 0.915}}


Starting fold 1

Target train facts examples: 863
Target train pos examples: 326
Target train neg examples: 10928

Target test facts examples: 215
Target test pos	 examples: 56
Target test neg examples: 3308

Amount of data: 0.2
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;haswordauthor(E, C).;true;true
7;true,true,true;author(F, E), title(F, D).;false;false
7;true,true,false;title(G, D), venue(G, B).;false;false
7;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
7;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
7;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, B).;false;true
8;true,true,false;title(F, D), venue(F, A).;false;false
8;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
8;true,false,false;haswordvenue(A, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
8;false,true;haswordauthor(M, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;true,true;author(F, E), venue(F, B).;true;true
9;true,true,true;samebib(F, G), venue(G, A).;false;false
9;true,true,false;author(H, E), venue(H, A).;false;false
9;true,false;haswordtitle(I, C).;true;true
9;true,false,true;title(J, I), venue(J, A).;false;false
9;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995124;  // std dev = 0.000, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.16117923812981538;  // std dev = 2.640, 33.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.1418510649004877;  // std dev = 5.16e-08, 118.000 (wgt'ed) examples reached here.  /* #neg=118 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.6898271648165915;  // std dev = 1.174, 57.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=55 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.18220200062307576;  // std dev = 2.560, 29.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839108;  // std dev = 7.60e-08, 98.000 (wgt'ed) examples reached here.  /* #neg=98 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14899424835097516;  // std dev = 0.090, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( movie(E, A) )
%   | | then return 0.32961375182743996;  // std dev = 0.382, 99.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=65 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360625;  // std dev = 6.99e-08, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4685003543736796;  // std dev = 0.672, 56.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=55 */
%   | else if ( genre(A, E) )
%   | | then return -0.0982971540385213;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.011696017182053731;  // std dev = 2.727, 39.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783665;  // std dev = 0.000, 106.000 (wgt'ed) examples reached here.  /* #neg=106 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08992204717145177;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.36677198586919607;  // std dev = 4.21e-08, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.04723519336602999;  // std dev = 2.657, 34.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926098;  // std dev = 4.21e-08, 96.000 (wgt'ed) examples reached here.  /* #neg=96 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2670823287467257;  // std dev = 0.765, 57.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=55 */
%   | else if ( movie(E, A) )
%   | | then return 0.01152444010648475;  // std dev = 0.426, 40.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=10 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 4.47e-08, 104.000 (wgt'ed) examples reached here.  /* #neg=104 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08370921387036973;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.23506217170268984;  // std dev = 0.000, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.014066989728557851;  // std dev = 2.750, 41.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109157;  // std dev = 6.14e-08, 110.000 (wgt'ed) examples reached here.  /* #neg=110 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18656741055839793;  // std dev = 0.493, 56.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=55 */
%   | else if ( movie(E, B) )
%   | | then return -0.04031991202241741;  // std dev = 2.798, 49.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=10 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.07324622576333707;  // std dev = 0.000, 104.000 (wgt'ed) examples reached here.  /* #neg=104 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14986038439757043;  // std dev = 0.709, 57.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=55 */
%   | else if ( genre(A, E) )
%   | | then return -0.07467402048259722;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.009601143770633707;  // std dev = 2.760, 42.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420265;  // std dev = 4.75e-09, 97.000 (wgt'ed) examples reached here.  /* #neg=97 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.14786635858018116;  // std dev = 0.000, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | | else if ( genre(A, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.00781637608547329;  // std dev = 2.760, 42.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=10 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.06419184008202625;  // std dev = 0.000, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.121378
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 0.94 seconds
Total inference time: 0.983 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.980989
   AUC PR    = 0.883942
   CLL	      = -0.122596
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.846154
   F1        = 0.916667


Total scoring time: 0.928 seconds
Parameter learned model CLL: -0.122596


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 2, 0], 'true,false,true': [0.0, 0, 55], 'true,false,false,true': [2.64, 23, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.16e-08, 118, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.174, 2, 55], 'true,false,true': [0.0, 2, 0], 'true,false,false,true': [2.56, 19, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.6e-08, 98, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.09, 3, 0], 'true,false,true': [0.382, 34, 65], 'true,false,false': [0.0, 0, 0], 'false,true': [6.99e-08, 92, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.672, 1, 55], 'true,false,true': [0.0, 2, 0], 'true,false,false,true': [2.727, 29, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 106, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 2, 0], 'true,false,true': [4.21e-08, 0, 55], 'true,false,false,true': [2.657, 24, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [4.21e-08, 96, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.765, 2, 55], 'true,false,true': [0.426, 30, 10], 'true,false,false': [0.0, 0, 0], 'false,true': [4.47e-08, 104, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.0, 0, 55], 'true,false,false,true': [2.75, 31, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [6.14e-08, 110, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.493, 1, 55], 'true,false,true': [2.798, 39, 10], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 104, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.709, 2, 55], 'true,false,true': [0.0, 4, 0], 'true,false,false,true': [2.76, 32, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [4.75e-09, 97, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true,true,false': 'genre(A, G)'}, {'true,true,true,true': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 55], 'true,true,false,true': [0.0, 0, 0], 'true,true,false,false': [2.76, 32, 10], 'true,false': [0.0, 0, 0], 'false': [0.0, 82, 0]}]]
[{'': [0.2006172839506165, 2.258080728051166e-17], 'true': [0.0, 0.19305268595041236], 'true,false': [-1.291895883200182e-16, 0.21120293847566585], 'true,false,false': [0.21120293847566585, nan], 'false': [2.258080728051166e-17, nan]}, {'': [0.15560425546210563, 5.890979314337566e-17], 'true': [0.02416974957561361, 0.21705821294648425], 'true,false': [0.0, 0.22592152199762197], 'true,false,false': [0.22592152199762197, nan], 'false': [5.890979314337566e-17, nan]}, {'': [0.14827551011071063, 5.3097622916855314e-17], 'true': [0.002690532318561608, 0.145949952050448], 'true,false': [0.145949952050448, nan], 'false': [5.3097622916855314e-17, nan]}, {'': [0.1336773409477133, -4.3989968900242054e-17], 'true': [0.008068407607239989, 0.18192473390456723], 'true,false': [0.0, 0.1906640368178832], 'true,false,false': [0.1906640368178832, nan], 'false': [-4.3989968900242054e-17, nan]}, {'': [0.10355136305280639, 1.850371707708594e-17], 'true': [0.0, 0.10341741303053367], 'true,false': [3.229739708000455e-17, 0.20761245674740478], 'true,false,false': [0.20761245674740478, nan], 'false': [1.850371707708594e-17, nan]}, {'': [0.09672921347645724, 1.921539850312771e-17], 'true': [0.010277654827353419, 0.1815447405984751], 'true,false': [0.1815447405984751, nan], 'false': [1.921539850312771e-17, nan]}, {'': [0.09343816145929193, 3.431598439750484e-17], 'true': [0.0, 0.09394650587583465], 'true,false': [-5.652044489000796e-17, 0.18441403926234415], 'true,false,false': [0.18441403926234415, nan], 'false': [3.431598439750484e-17, nan]}, {'': [0.08970062247582176, -4.270088556250602e-18], 'true': [0.004335194681933512, 0.15980625423758044], 'true,false': [0.15980625423758044, nan], 'false': [-4.270088556250602e-18, nan]}, {'': [0.08573677214332279, 2.2891196384023845e-17], 'true': [0.008812597066379178, 0.16596766682222605], 'true,false': [0.0, 0.18140589569161], 'true,false,false': [0.18140589569161, nan], 'false': [2.2891196384023845e-17, nan]}, {'': [0.08449732724988776, -1.0154478883766675e-17], 'true': [0.08449732724988776, nan], 'true,true': [-1.6148698540002276e-17, 0.1814058956916099], 'true,true,false': [nan, 0.1814058956916099], 'true,true,true': [nan, -1.6148698540002276e-17]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995124;  // std dev = 0.000, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | | else if ( actor(B) )
%   | | | then return -0.1418510649004877;  // std dev = 2.79e-08, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.14185106490048763;  // std dev = 8.16e-08, 109.000 (wgt'ed) examples reached here.  /* #neg=109 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.7194734122109542;  // std dev = 5.96e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.696003466357084;  // std dev = 0.139, 36.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=35 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( actor(B) )
%   | | | then return -0.1254446385283913;  // std dev = 3.16e-08, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | | | else return 0.7194734122109544;  // std dev = 2.98e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.1254446385283914;  // std dev = 0.000, 93.000 (wgt'ed) examples reached here.  /* #neg=93 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.11231637819360642;  // std dev = 0.000, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | else return 0.5584829197463258;  // std dev = 0.023, 65.000 (wgt'ed) examples reached here.  /* #pos=65 */
%   else return -0.1123163781936062;  // std dev = 8.16e-08, 102.000 (wgt'ed) examples reached here.  /* #neg=102 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4203931614806831;  // std dev = 0.020, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( actor(B) )
%   | | | then return -0.10159632948783635;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | | else return 0.4167558633847247;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.10159632948783633;  // std dev = 0.000, 109.000 (wgt'ed) examples reached here.  /* #neg=109 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926096;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(B, E) )
%   | | then return 0.32266740085986784;  // std dev = 0.018, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | | else if ( director(B), female(A) )
%   | | | then return 0.3201981946875901;  // std dev = 2.11e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.11103848022435946;  // std dev = 0.578, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   else return -0.0926912761892609;  // std dev = 6.14e-08, 108.000 (wgt'ed) examples reached here.  /* #neg=108 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.25624837877926504;  // std dev = 0.017, 65.000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else if ( actor(A) )
%   | | then return -0.08376582363008367;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | else if ( female(B) )
%   | | | then return -0.08483001944881856;  // std dev = 0.001, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return -0.18018151897105592;  // std dev = 0.520, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.08518475138839682;  // std dev = 5.77e-08, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07714007243780185;  // std dev = 0.006, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.21074477922237145;  // std dev = 0.014, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | | else if ( actor(B) )
%   | | | then return -0.07755507749691715;  // std dev = 7.51e-05, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | | | else return 0.20927390216109076;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.07877675473109161;  // std dev = 5.27e-08, 91.000 (wgt'ed) examples reached here.  /* #neg=91 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.17765470865839814;  // std dev = 0.013, 65.000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else if ( actor(A) )
%   | | then return -0.07218716322834345;  // std dev = 0.000, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | else return -0.1672855247014373;  // std dev = 0.542, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.07324622576333707;  // std dev = 0.000, 108.000 (wgt'ed) examples reached here.  /* #neg=108 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.15331499749127397;  // std dev = 0.011, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | else if ( genre(A, E) )
%   | | then return -0.06278742533616974;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( director(B), female(A) )
%   | | | then return 0.1523565855307311;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.08381407759619752;  // std dev = 0.548, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   else return -0.06842697784420265;  // std dev = 5.05e-08, 105.000 (wgt'ed) examples reached here.  /* #neg=105 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.13271902597216306;  // std dev = 1.83e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.12203450303607928;  // std dev = 0.079, 36.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=35 */
%   | else if ( actor(B) )
%   | | then return -0.06104940764837941;  // std dev = 0.014, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | else return 0.13370461966561242;  // std dev = 5.27e-09, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.06419184008202626;  // std dev = 0.000, 107.000 (wgt'ed) examples reached here.  /* #neg=107 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063255
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.497 seconds
Total inference time: 1.017 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.068545
   Precision = 0.915493 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.955882


Total scoring time: 0.853 seconds
Refined model CLL: -0.068545


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063255
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 4.218 seconds
Total inference time: 1.017 seconds
AUC ROC: 1.0
Total revision time: 4.218
Best scored revision CLL: -0.068545


Dataset: 4_cora_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 00:03:37
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063255, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 4.218, 'Inference time': 1.017, 'parameter_0.2': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.121378, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 0.94, 'Inference time': 0.983}}


Amount of data: 0.4
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;haswordauthor(E, C).;true;true
7;true,true,true;author(F, E), title(F, D).;false;false
7;true,true,false;title(G, D), venue(G, B).;false;false
7;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
7;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
7;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, B).;false;true
8;true,true,false;title(F, D), venue(F, A).;false;false
8;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
8;true,false,false;haswordvenue(A, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
8;false,true;haswordauthor(M, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;true,true;author(F, E), venue(F, B).;true;true
9;true,true,true;samebib(F, G), venue(G, A).;false;false
9;true,true,false;author(H, E), venue(H, A).;false;false
9;true,false;haswordtitle(I, C).;true;true
9;true,false,true;title(J, I), venue(J, A).;false;false
9;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995111;  // std dev = 5.20e-07, 108.000 (wgt'ed) examples reached here.  /* #pos=108 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.12644161802634116;  // std dev = 4.012, 82.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=22 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.1418510649004882;  // std dev = 0.000, 167.000 (wgt'ed) examples reached here.  /* #neg=167 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7041112658338757;  // std dev = 1.184, 110.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=108 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.07121633606643608;  // std dev = 4.118, 96.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=22 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839158;  // std dev = 0.000, 188.000 (wgt'ed) examples reached here.  /* #neg=188 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.15323029573660854;  // std dev = 0.180, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( movie(E, A) )
%   | | then return 0.3668965324935351;  // std dev = 0.367, 188.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=130 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360664;  // std dev = 0.000, 201.000 (wgt'ed) examples reached here.  /* #neg=201 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.455628199433395;  // std dev = 0.935, 110.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=108 */
%   | else if ( genre(A, E) )
%   | | then return -0.09792233109726944;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.011329384891914028;  // std dev = 4.098, 93.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=22 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783656;  // std dev = 0.000, 217.000 (wgt'ed) examples reached here.  /* #neg=217 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11706879650813538;  // std dev = 0.178, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( genre(B, E) )
%   | | then return 0.35783232545503973;  // std dev = 0.000, 108.000 (wgt'ed) examples reached here.  /* #pos=108 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.014545342059121434;  // std dev = 4.084, 91.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=22 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926057;  // std dev = 9.19e-08, 199.000 (wgt'ed) examples reached here.  /* #neg=199 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2754257845287056;  // std dev = 0.537, 109.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=108 */
%   | else if ( movie(E, A) )
%   | | then return 0.0075232866263021;  // std dev = 0.410, 99.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=22 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 7.88e-08, 208.000 (wgt'ed) examples reached here.  /* #neg=208 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08106278374677268;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( genre(B, E) )
%   | | then return 0.22828102202795966;  // std dev = 0.000, 108.000 (wgt'ed) examples reached here.  /* #pos=108 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.018888822059930074;  // std dev = 4.062, 88.000 (wgt'ed) examples reached here.  /* #neg=66 #pos=22 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109147;  // std dev = 7.45e-08, 195.000 (wgt'ed) examples reached here.  /* #neg=195 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18608798350908284;  // std dev = 0.486, 109.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=108 */
%   | else if ( movie(E, B) )
%   | | then return 0.042088208416781916;  // std dev = 3.975, 83.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=22 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.07324622576333666;  // std dev = 1.15e-07, 195.000 (wgt'ed) examples reached here.  /* #neg=195 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.15889874970404325;  // std dev = 0.499, 109.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=108 */
%   | else if ( genre(A, E) )
%   | | then return -0.07820650353705426;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.005067135485661543;  // std dev = 4.070, 89.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=22 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420262;  // std dev = 5.59e-09, 163.000 (wgt'ed) examples reached here.  /* #neg=163 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return -0.37447624013172676;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.1429120909847138;  // std dev = 0.000, 108.000 (wgt'ed) examples reached here.  /* #pos=108 */
%   | | else if ( genre(A, G) )
%   | | | then return -0.07275130809868123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.03542610344695538;  // std dev = 3.984, 79.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=22 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.06419184008202626;  // std dev = 0.000, 170.000 (wgt'ed) examples reached here.  /* #neg=170 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.12296
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.199 seconds
Total inference time: 0.973 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.979132
   AUC PR    = 0.871552
   CLL	      = -0.123674
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.830769
   F1        = 0.907563


Total scoring time: 1.111 seconds
Parameter learned model CLL: -0.123674


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 9, 0], 'true,false,true': [5.2e-07, 0, 108], 'true,false,false,true': [4.012, 60, 22], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 167, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.184, 2, 108], 'true,false,true': [0.0, 3, 0], 'true,false,false,true': [4.118, 74, 22], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 188, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.18, 11, 0], 'true,false,true': [0.367, 58, 130], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 201, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.935, 2, 108], 'true,false,true': [0.0, 5, 0], 'true,false,false,true': [4.098, 71, 22], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 217, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.178, 7, 0], 'true,false,true': [0.0, 0, 108], 'true,false,false,true': [4.084, 69, 22], 'true,false,false,false': [0.0, 0, 0], 'false,true': [9.19e-08, 199, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.537, 1, 108], 'true,false,true': [0.41, 77, 22], 'true,false,false': [0.0, 0, 0], 'false,true': [7.88e-08, 208, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 8, 0], 'true,false,true': [0.0, 0, 108], 'true,false,false,true': [4.062, 66, 22], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.45e-08, 195, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.486, 1, 108], 'true,false,true': [3.975, 61, 22], 'true,false,false': [0.0, 0, 0], 'false,true': [1.15e-07, 195, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.499, 1, 108], 'true,false,true': [0.0, 5, 0], 'true,false,false,true': [4.07, 67, 22], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.59e-09, 163, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true,true,false': 'genre(A, G)'}, {'true,true,true,true': [0.0, 3, 0], 'true,true,true,false': [0.0, 0, 108], 'true,true,false,true': [0.0, 12, 0], 'true,true,false,false': [3.984, 57, 22], 'true,false': [0.0, 0, 0], 'false': [0.0, 170, 0]}]]
[{'': [0.2265094315800149, -1.6753066000331702e-16], 'true': [-9.25185853854297e-18, 0.2160664819944642], 'true,false': [2.500057773970723e-15, 0.19631171921475404], 'true,false,false': [0.19631171921475404, nan], 'false': [-1.6753066000331702e-16, nan]}, {'': [0.1901370003646854, -2.362176648138631e-17], 'true': [0.012743759230782685, 0.1724327675963095], 'true,false': [0.0, 0.17664930555555514], 'true,false,false': [0.17664930555555514, nan], 'false': [-2.362176648138631e-17, nan]}, {'': [0.1415830403618274, -3.0931586755725755e-17], 'true': [0.00292941013525228, 0.13474172718130295], 'true,false': [0.13474172718130295, nan], 'false': [-3.0931586755725755e-17, nan]}, {'': [0.13564894132112879, -7.981326812973476e-17], 'true': [0.007942024003249285, 0.17196258908124878], 'true,false': [0.0, 0.18059891316915225], 'true,false,false': [0.18059891316915225, nan], 'false': [-7.981326812973476e-17, nan]}, {'': [0.11270154062534163, 4.2400477322367786e-17], 'true': [0.004525046715123999, 0.11307220634232447], 'true,false': [-1.4802973661668753e-16, 0.18331119430020487], 'true,false,false': [0.18331119430020487, nan], 'false': [4.2400477322367786e-17, nan]}, {'': [0.09932450153953123, 2.9890619893754213e-17], 'true': [0.0026421950973959905, 0.16816154091706353], 'true,false': [0.16816154091706353, nan], 'false': [2.9890619893754213e-17, nan]}, {'': [0.0930511394030827, 2.846725704167068e-17], 'true': [0.0, 0.0950308144456588], 'true,false': [-1.7270135938613546e-16, 0.18750000000000028], 'true,false,false': [0.18750000000000028, nan], 'false': [2.846725704167068e-17, nan]}, {'': [0.0886282951985757, 6.832141690000964e-17], 'true': [0.0021675618387381078, 0.19040115047965991], 'true,false': [0.19040115047965991, nan], 'false': [6.832141690000964e-17, nan]}, {'': [0.08920222538727142, 3.065032890069451e-17], 'true': [0.002286723875130341, 0.17653857410587379], 'true,false': [0.0, 0.18608761520010067], 'true,false,false': [0.18608761520010067, nan], 'false': [3.065032890069451e-17, nan]}, {'': [0.08592795248137182, -5.877651306839064e-18], 'true': [0.08592795248137182, nan], 'true,true': [0.0070393459943873605, 0.17577283452527045], 'true,true,false': [0.0, 0.2009293382470752], 'true,true,true': [0.0, -8.635067969306773e-17]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, E).;true;true
9;true,true;genre(A, F).;true;true
9;true,false;genre(A, G).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995111;  // std dev = 5.20e-07, 108.000 (wgt'ed) examples reached here.  /* #pos=108 */
%   | | else if ( actor(B) )
%   | | | then return -0.14185106490048766;  // std dev = 6.83e-08, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
%   | | | else return 0.8581489350995121;  // std dev = 5.96e-08, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   else return -0.14185106490048835;  // std dev = 0.000, 190.000 (wgt'ed) examples reached here.  /* #neg=190 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.7194734122109551;  // std dev = 0.000, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | | else return 0.7070481467589049;  // std dev = 0.102, 68.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=67 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.7194734122109542;  // std dev = 7.30e-08, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | | else return -0.13000587233017555;  // std dev = 0.216, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
%   else return -0.1254446385283916;  // std dev = 0.000, 190.000 (wgt'ed) examples reached here.  /* #neg=190 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.5569466465353806;  // std dev = 0.017, 130.000 (wgt'ed) examples reached here.  /* #pos=130 */
%   | else return -0.11370691608599044;  // std dev = 0.113, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
%   else return -0.11231637819360667;  // std dev = 0.000, 212.000 (wgt'ed) examples reached here.  /* #neg=212 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.41712933363776006;  // std dev = 0.000, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | | else return 0.40200071278850213;  // std dev = 0.105, 69.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=67 */
%   | else if ( genre(A, E) )
%   | | then return -0.10146947911063676;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.4171293336377601;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | | else return -0.10338768522286998;  // std dev = 0.132, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   else return -0.10159632948783648;  // std dev = 0.000, 172.000 (wgt'ed) examples reached here.  /* #neg=172 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09258505525748839;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( genre(B, E) )
%   | | then return 0.32419197015195234;  // std dev = 0.030, 108.000 (wgt'ed) examples reached here.  /* #pos=108 */
%   | | else if ( actor(B) )
%   | | | then return -0.09204213278250808;  // std dev = 1.05e-08, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
%   | | | else return 0.2757445495073594;  // std dev = 0.726, 24.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=22 */
%   else return -0.09269127618926057;  // std dev = 9.19e-08, 197.000 (wgt'ed) examples reached here.  /* #neg=197 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.25856863722996487;  // std dev = 0.037, 130.000 (wgt'ed) examples reached here.  /* #pos=130 */
%   | else return -0.09037788844797043;  // std dev = 0.246, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
%   else return -0.08518475138839678;  // std dev = 7.60e-08, 200.000 (wgt'ed) examples reached here.  /* #neg=200 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.13363092505963722;  // std dev = 0.192, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(B, E) )
%   | | then return 0.21126557204646523;  // std dev = 0.023, 108.000 (wgt'ed) examples reached here.  /* #pos=108 */
%   | | else if ( actor(B) )
%   | | | then return -0.0778896687232121;  // std dev = 0.000, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
%   | | | else return 0.2165286684857257;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   else return -0.07877675473109147;  // std dev = 7.45e-08, 193.000 (wgt'ed) examples reached here.  /* #neg=193 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.17570464027189828;  // std dev = 4.47e-08, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | | else return 0.16813189598848322;  // std dev = 0.067, 69.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=67 */
%   | else if ( actor(B) )
%   | | then return -0.07190885975904557;  // std dev = 0.009, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   | | else return 0.18204697014977225;  // std dev = 1.49e-08, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   else return -0.07324622576333663;  // std dev = 1.26e-07, 211.000 (wgt'ed) examples reached here.  /* #neg=211 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.15168717204890328;  // std dev = 4.34e-08, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | | else return 0.15027821340447556;  // std dev = 0.049, 68.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=67 */
%   | else if ( genre(A, E) )
%   | | then return -0.06470794622005216;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( actor(B) )
%   | | | then return -0.06778831471633308;  // std dev = 0.000, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
%   | | | else return 0.15648900923679054;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   else return -0.06842697784420262;  // std dev = 7.74e-08, 185.000 (wgt'ed) examples reached here.  /* #neg=185 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( genre(A, E) )
%   | | then return -0.27995337794310626;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0.13583340734420546;  // std dev = 0.022, 108.000 (wgt'ed) examples reached here.  /* #pos=108 */
%   | else if ( genre(A, F) )
%   | | then return -0.060900344390530145;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( actor(B) )
%   | | | then return -0.06362804798613811;  // std dev = 0.000, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
%   | | | else return 0.13692406648900682;  // std dev = 2.36e-08, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   else return -0.06419184008202626;  // std dev = 0.000, 209.000 (wgt'ed) examples reached here.  /* #neg=209 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063423
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.875 seconds
Total inference time: 1.033 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.066941
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.168 seconds
Refined model CLL: -0.066941


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063423
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 5.353000000000001 seconds
Total inference time: 1.033 seconds
AUC ROC: 1.0
Total revision time: 5.353000000000001
Best scored revision CLL: -0.066941


Dataset: 4_cora_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 00:03:45
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063423, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 5.353000000000001, 'Inference time': 1.033, 'parameter_0.4': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.12296, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 1.199, 'Inference time': 0.973}}


Amount of data: 0.6
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;haswordauthor(E, C).;true;true
7;true,true,true;author(F, E), title(F, D).;false;false
7;true,true,false;title(G, D), venue(G, B).;false;false
7;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
7;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
7;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, B).;false;true
8;true,true,false;title(F, D), venue(F, A).;false;false
8;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
8;true,false,false;haswordvenue(A, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
8;false,true;haswordauthor(M, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;true,true;author(F, E), venue(F, B).;true;true
9;true,true,true;samebib(F, G), venue(G, A).;false;false
9;true,true,false;author(H, E), venue(H, A).;false;false
9;true,false;haswordtitle(I, C).;true;true
9;true,false,true;title(J, I), venue(J, A).;false;false
9;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995096;  // std dev = 1.02e-06, 164.000 (wgt'ed) examples reached here.  /* #pos=164 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.12086079950629075;  // std dev = 4.781, 118.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=31 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.1418510649004879;  // std dev = 5.96e-08, 292.000 (wgt'ed) examples reached here.  /* #neg=292 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.70929367665988;  // std dev = 1.188, 166.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=164 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.0831005909433364;  // std dev = 4.853, 129.000 (wgt'ed) examples reached here.  /* #neg=98 #pos=31 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839194;  // std dev = 0.000, 272.000 (wgt'ed) examples reached here.  /* #neg=272 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.13900290954523314;  // std dev = 0.198, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else if ( movie(E, A) )
%   | | then return 0.35640111555389187;  // std dev = 0.368, 286.000 (wgt'ed) examples reached here.  /* #neg=91 #pos=195 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360679;  // std dev = 0.000, 305.000 (wgt'ed) examples reached here.  /* #neg=305 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.46500920647773364;  // std dev = 0.669, 165.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=164 */
%   | else if ( genre(A, E) )
%   | | then return -0.09918629580815584;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.08243160161837411;  // std dev = 4.635, 101.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=31 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783662;  // std dev = 0.000, 283.000 (wgt'ed) examples reached here.  /* #neg=283 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.13445558482836856;  // std dev = 0.348, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else if ( genre(B, E) )
%   | | then return 0.35689808781766735;  // std dev = 0.000, 164.000 (wgt'ed) examples reached here.  /* #pos=164 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.030389857654691002;  // std dev = 4.759, 115.000 (wgt'ed) examples reached here.  /* #neg=84 #pos=31 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926046;  // std dev = 1.17e-07, 262.000 (wgt'ed) examples reached here.  /* #neg=262 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.27002702760249464;  // std dev = 0.928, 167.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=164 */
%   | else if ( movie(E, A) )
%   | | then return 0.011581225985553067;  // std dev = 0.423, 128.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=31 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 9.77e-08, 275.000 (wgt'ed) examples reached here.  /* #neg=275 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11464008950283791;  // std dev = 0.308, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else if ( genre(B, E) )
%   | | then return 0.22868028878624078;  // std dev = 9.42e-08, 164.000 (wgt'ed) examples reached here.  /* #pos=164 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.022668970389558868;  // std dev = 4.759, 115.000 (wgt'ed) examples reached here.  /* #neg=84 #pos=31 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109143;  // std dev = 4.47e-08, 283.000 (wgt'ed) examples reached here.  /* #neg=283 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18218157856917877;  // std dev = 0.829, 167.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=164 */
%   | else if ( movie(E, B) )
%   | | then return 0.06327068853605333;  // std dev = 4.594, 102.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=31 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.07324622576333698;  // std dev = 9.66e-08, 302.000 (wgt'ed) examples reached here.  /* #neg=302 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.16128910896773144;  // std dev = 0.494, 165.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=164 */
%   | else if ( genre(A, E) )
%   | | then return -0.07729155061321448;  // std dev = 2.63e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.011188256569599084;  // std dev = 4.815, 123.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=31 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420294;  // std dev = 0.000, 287.000 (wgt'ed) examples reached here.  /* #neg=287 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return -0.3676878001121895;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0.14332681872847622;  // std dev = 1.26e-07, 164.000 (wgt'ed) examples reached here.  /* #pos=164 */
%   | | else if ( genre(A, G) )
%   | | | then return -0.07195627413554533;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.001655133308417699;  // std dev = 4.781, 118.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=31 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.06419184008202597;  // std dev = 1.13e-07, 296.000 (wgt'ed) examples reached here.  /* #neg=296 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.127089
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.445 seconds
Total inference time: 0.96 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.98048
   AUC PR    = 0.879367
   CLL	      = -0.126296
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.841026
   F1        = 0.913649


Total scoring time: 1.258 seconds
Parameter learned model CLL: -0.126296


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 4, 0], 'true,false,true': [1.02e-06, 0, 164], 'true,false,false,true': [4.781, 87, 31], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.96e-08, 292, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.188, 2, 164], 'true,false,true': [0.0, 8, 0], 'true,false,false,true': [4.853, 98, 31], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 272, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.198, 17, 0], 'true,false,true': [0.368, 91, 195], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 305, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.669, 1, 164], 'true,false,true': [0.0, 9, 0], 'true,false,false,true': [4.635, 70, 31], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 283, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.348, 18, 0], 'true,false,true': [0.0, 0, 164], 'true,false,false,true': [4.759, 84, 31], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.17e-07, 262, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.928, 3, 164], 'true,false,true': [0.423, 97, 31], 'true,false,false': [0.0, 0, 0], 'false,true': [9.77e-08, 275, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.308, 14, 0], 'true,false,true': [9.42e-08, 0, 164], 'true,false,false,true': [4.759, 84, 31], 'true,false,false,false': [0.0, 0, 0], 'false,true': [4.47e-08, 283, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.829, 3, 164], 'true,false,true': [4.594, 71, 31], 'true,false,false': [0.0, 0, 0], 'false,true': [9.66e-08, 302, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.494, 1, 164], 'true,false,true': [2.63e-09, 9, 0], 'true,false,false,true': [4.815, 92, 31], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 287, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true,true,false': 'genre(A, G)'}, {'true,true,true,true': [0.0, 1, 0], 'true,true,true,false': [1.26e-07, 0, 164], 'true,true,false,true': [0.0, 8, 0], 'true,true,false,false': [4.781, 87, 31], 'true,false': [0.0, 0, 0], 'false': [1.13e-07, 296, 0]}]]
[{'': [0.2169421487603355, 1.2166827667125003e-17], 'true': [0.0, 0.21333182435491674], 'true,false': [6.325563379327721e-15, 0.19369434070669472], 'true,false,false': [0.19369434070669472, nan], 'false': [1.2166827667125003e-17, nan]}, {'': [0.1844067352405067, -7.18379604169219e-17], 'true': [0.008497415302964908, 0.17429196702637964], 'true,false': [0.0, 0.1825611441620081], 'true,false,false': [0.1825611441620081, nan], 'false': [-7.18379604169219e-17, nan]}, {'': [0.14094677549869464, -7.280150981148567e-17], 'true': [0.0023145556056394134, 0.13541742442531093], 'true,false': [0.13541742442531093, nan], 'false': [-7.280150981148567e-17, nan]}, {'': [0.11865801220116236, -5.806113344329441e-17], 'true': [0.0027158058981895422, 0.19779750056022533], 'true,false': [-3.0839528461809902e-18, 0.21272424272130194], 'true,false,false': [0.21272424272130194, nan], 'false': [-5.806113344329441e-17, nan]}, {'': [0.10815849351899512, 5.2544906508976876e-17], 'true': [0.006710206597810979, 0.1069892502703041], 'true,false': [-6.715495368464362e-16, 0.19689981096408213], 'true,false,false': [0.19689981096408213, nan], 'false': [5.2544906508976876e-17, nan]}, {'': [0.09691161671686174, 3.47197018610049e-17], 'true': [0.005157489605567012, 0.17880975127521823], 'true,false': [0.17880975127521823, nan], 'false': [3.47197018610049e-17, nan]}, {'': [0.09043489173794204, 7.061489202562832e-18], 'true': [0.006775583743921335, 0.091442316321255], 'true,false': [5.415722071342227e-17, 0.19689981096408407], 'true,false,false': [0.19689981096408407, nan], 'false': [7.061489202562832e-18, nan]}, {'': [0.0843497949911835, 3.088037551937521e-17], 'true': [0.004113329316298829, 0.20693910172843766], 'true,false': [0.20693910172843766, nan], 'false': [3.088037551937521e-17, nan]}, {'': [0.08674938982638006, -4.564680031559877e-17], 'true': [0.0014780376660380476, 0.17593664625685443], 'true,false': [7.709882115452476e-19, 0.18851212902373052], 'true,false,false': [0.18851212902373052, nan], 'false': [-4.564680031559877e-17, nan]}, {'': [0.08461204657818662, 4.2758589461914814e-17], 'true': [0.08461204657818662, nan], 'true,true': [0.0015730502945710783, 0.18171848407230293], 'true,true,false': [0.0, 0.19369434070669414], 'true,true,true': [0.0, 9.748299728416009e-17]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, E).;true;true
9;true,true;genre(A, F).;true;true
9;true,false;genre(A, G).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995096;  // std dev = 1.02e-06, 164.000 (wgt'ed) examples reached here.  /* #pos=164 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.8581489350995116;  // std dev = 2.06e-07, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | | else return -0.14185106490048766;  // std dev = 7.30e-08, 77.000 (wgt'ed) examples reached here.  /* #neg=77 */
%   else return -0.14185106490048802;  // std dev = 0.000, 275.000 (wgt'ed) examples reached here.  /* #neg=275 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.7194734122109547;  // std dev = 0.000, 61.000 (wgt'ed) examples reached here.  /* #pos=61 */
%   | | else return 0.7113492001846148;  // std dev = 0.082, 104.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=103 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.7194734122109547;  // std dev = 0.000, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | | else return -0.12544463852839144;  // std dev = 0.000, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
%   else return -0.125444638528392;  // std dev = 0.000, 293.000 (wgt'ed) examples reached here.  /* #neg=293 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( actor(B) )
%   | | then return -0.11231637819360638;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return -0.22609359973834398;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( director(B), actor(A) )
%   | | then return 0.5564256125271164;  // std dev = 0.014, 195.000 (wgt'ed) examples reached here.  /* #pos=195 */
%   | | else return -0.11231637819360624;  // std dev = 6.50e-08, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */
%   else return -0.11231637819360671;  // std dev = 0.000, 314.000 (wgt'ed) examples reached here.  /* #neg=314 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.41725601938133383;  // std dev = 0.000, 61.000 (wgt'ed) examples reached here.  /* #pos=61 */
%   | | else if ( actor(A) )
%   | | | then return 0.41923276738745074;  // std dev = 2.06e-07, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   | | | else return -0.1889885924134002;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.4172560193813334;  // std dev = 0.000, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | | else return -0.10159632948783623;  // std dev = 4.83e-08, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */
%   else return -0.10159632948783662;  // std dev = 0.000, 302.000 (wgt'ed) examples reached here.  /* #neg=302 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( actor(B) )
%   | | then return -0.09269127618926097;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else return -0.16170667043465894;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.32137904178362864;  // std dev = 0.008, 164.000 (wgt'ed) examples reached here.  /* #pos=164 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.32053723669133655;  // std dev = 0.000, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | | else return -0.09269127618926107;  // std dev = 1.49e-08, 91.000 (wgt'ed) examples reached here.  /* #neg=91 */
%   else return -0.09269127618926043;  // std dev = 1.52e-07, 295.000 (wgt'ed) examples reached here.  /* #neg=295 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.25553623512748846;  // std dev = 0.008, 195.000 (wgt'ed) examples reached here.  /* #pos=195 */
%   | else return -0.08571600027754761;  // std dev = 0.056, 105.000 (wgt'ed) examples reached here.  /* #neg=105 */
%   else return -0.08518475138839678;  // std dev = 9.66e-08, 271.000 (wgt'ed) examples reached here.  /* #neg=271 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08822253994700922;  // std dev = 0.020, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( genre(B, E) )
%   | | then return 0.21009451643522611;  // std dev = 0.006, 164.000 (wgt'ed) examples reached here.  /* #pos=164 */
%   | | else if ( actor(B) )
%   | | | then return -0.07873821010603946;  // std dev = 0.000, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
%   | | | else return 0.20959349644330408;  // std dev = 0.000, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   else return -0.07877675473109143;  // std dev = 4.47e-08, 283.000 (wgt'ed) examples reached here.  /* #neg=283 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.177285106956443;  // std dev = 0.006, 195.000 (wgt'ed) examples reached here.  /* #pos=195 */
%   | else return -0.07337476133121697;  // std dev = 0.022, 105.000 (wgt'ed) examples reached here.  /* #neg=105 */
%   else return -0.07324622576333693;  // std dev = 1.02e-07, 288.000 (wgt'ed) examples reached here.  /* #neg=288 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.1524389247425255;  // std dev = 0.000, 61.000 (wgt'ed) examples reached here.  /* #pos=61 */
%   | | else return 0.14815254268024644;  // std dev = 0.036, 105.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=103 */
%   | else if ( genre(A, E) )
%   | | then return -0.06778560374625353;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( actor(B) )
%   | | | then return -0.06838738769679455;  // std dev = 2.69e-08, 75.000 (wgt'ed) examples reached here.  /* #neg=75 */
%   | | | else return 0.15261250047178343;  // std dev = 0.000, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   else return -0.06842697784420299;  // std dev = 0.000, 297.000 (wgt'ed) examples reached here.  /* #neg=297 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( genre(A, E) )
%   | | then return -0.12938003432427572;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0.13453115738508586;  // std dev = 0.008, 164.000 (wgt'ed) examples reached here.  /* #pos=164 */
%   | else if ( genre(A, F) )
%   | | then return -0.06362565354910728;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( actor(B) )
%   | | | then return -0.06415690851542788;  // std dev = 2.36e-08, 108.000 (wgt'ed) examples reached here.  /* #neg=108 */
%   | | | else return 0.11305364528957271;  // std dev = 0.391, 34.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=31 */
%   else return -0.06419184008202591;  // std dev = 1.24e-07, 308.000 (wgt'ed) examples reached here.  /* #neg=308 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063463
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.96 seconds
Total inference time: 0.97 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064795
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.366 seconds
Refined model CLL: -0.064795


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063463
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 6.029 seconds
Total inference time: 0.97 seconds
AUC ROC: 1.0
Total revision time: 6.029
Best scored revision CLL: -0.064795


Dataset: 4_cora_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 00:03:53
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063463, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 6.029, 'Inference time': 0.97, 'parameter_0.6': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.127089, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 1.445, 'Inference time': 0.96}}


Amount of data: 0.8
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;haswordauthor(E, C).;true;true
7;true,true,true;author(F, E), title(F, D).;false;false
7;true,true,false;title(G, D), venue(G, B).;false;false
7;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
7;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
7;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, B).;false;true
8;true,true,false;title(F, D), venue(F, A).;false;false
8;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
8;true,false,false;haswordvenue(A, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
8;false,true;haswordauthor(M, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;true,true;author(F, E), venue(F, B).;true;true
9;true,true,true;samebib(F, G), venue(G, A).;false;false
9;true,true,false;author(H, E), venue(H, A).;false;false
9;true,false;haswordtitle(I, C).;true;true
9;true,false,true;title(J, I), venue(J, A).;false;false
9;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995091;  // std dev = 1.08e-06, 212.000 (wgt'ed) examples reached here.  /* #pos=212 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.13721870254137283;  // std dev = 5.883, 172.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=48 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.1418510649004874;  // std dev = 2.76e-07, 380.000 (wgt'ed) examples reached here.  /* #neg=380 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7115769818302156;  // std dev = 1.189, 214.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=212 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 7.45e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.09867552206106726;  // std dev = 5.968, 186.000 (wgt'ed) examples reached here.  /* #neg=138 #pos=48 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839222;  // std dev = 0.000, 360.000 (wgt'ed) examples reached here.  /* #neg=360 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1455130265822063;  // std dev = 0.253, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | else if ( movie(E, A) )
%   | | then return 0.37515587033057696;  // std dev = 0.367, 370.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=260 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360629;  // std dev = 0.000, 385.000 (wgt'ed) examples reached here.  /* #neg=385 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.45762287885253045;  // std dev = 0.937, 214.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=212 */
%   | else if ( genre(A, E) )
%   | | then return -0.0986061432994113;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.06103173058900487;  // std dev = 5.819, 163.000 (wgt'ed) examples reached here.  /* #neg=115 #pos=48 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783612;  // std dev = 8.64e-09, 373.000 (wgt'ed) examples reached here.  /* #neg=373 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1194545038096833;  // std dev = 0.312, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else if ( genre(B, E) )
%   | | then return 0.35377087491545456;  // std dev = 0.000, 212.000 (wgt'ed) examples reached here.  /* #pos=212 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.016324066190328643;  // std dev = 5.956, 184.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=48 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926076;  // std dev = 1.66e-07, 384.000 (wgt'ed) examples reached here.  /* #neg=384 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.26763869378057176;  // std dev = 1.068, 216.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=212 */
%   | else if ( movie(E, A) )
%   | | then return 0.06597258755805671;  // std dev = 0.452, 160.000 (wgt'ed) examples reached here.  /* #neg=112 #pos=48 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 1.19e-07, 358.000 (wgt'ed) examples reached here.  /* #neg=358 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.13443516063980157;  // std dev = 0.410, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else if ( genre(B, E) )
%   | | then return 0.22724835160280368;  // std dev = 3.48e-07, 212.000 (wgt'ed) examples reached here.  /* #pos=212 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.027358374710920386;  // std dev = 5.848, 167.000 (wgt'ed) examples reached here.  /* #neg=119 #pos=48 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109143;  // std dev = 9.42e-08, 370.000 (wgt'ed) examples reached here.  /* #neg=370 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1853557285785078;  // std dev = 0.673, 214.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=212 */
%   | else if ( movie(E, B) )
%   | | then return 0.005502868609010221;  // std dev = 5.898, 187.000 (wgt'ed) examples reached here.  /* #neg=139 #pos=48 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.0732462257633372;  // std dev = 3.65e-08, 389.000 (wgt'ed) examples reached here.  /* #neg=389 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.15385530814921403;  // std dev = 0.972, 216.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=212 */
%   | else if ( genre(A, E) )
%   | | then return -0.07629191820194292;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.022716618908112652;  // std dev = 5.841, 166.000 (wgt'ed) examples reached here.  /* #neg=118 #pos=48 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420326;  // std dev = 0.000, 366.000 (wgt'ed) examples reached here.  /* #neg=366 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return -0.3623441736106751;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.14302692230089087;  // std dev = 1.88e-07, 212.000 (wgt'ed) examples reached here.  /* #pos=212 */
%   | | else if ( genre(A, G) )
%   | | | then return -0.07108631368414096;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return 0.004958614600086027;  // std dev = 5.896, 174.000 (wgt'ed) examples reached here.  /* #neg=126 #pos=48 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.06419184008202564;  // std dev = 1.88e-07, 389.000 (wgt'ed) examples reached here.  /* #neg=389 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.130827
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.507 seconds
Total inference time: 1.024 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.977826
   AUC PR    = 0.85994
   CLL	      = -0.128833
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.815385
   F1        = 0.898305


Total scoring time: 1.492 seconds
Parameter learned model CLL: -0.128833


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 16, 0], 'true,false,true': [1.08e-06, 0, 212], 'true,false,false,true': [5.883, 124, 48], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.76e-07, 380, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.189, 2, 212], 'true,false,true': [7.45e-09, 15, 0], 'true,false,false,true': [5.968, 138, 48], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 360, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.253, 24, 0], 'true,false,true': [0.367, 110, 260], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 385, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.937, 2, 212], 'true,false,true': [0.0, 13, 0], 'true,false,false,true': [5.819, 115, 48], 'true,false,false,false': [0.0, 0, 0], 'false,true': [8.64e-09, 373, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.312, 20, 0], 'true,false,true': [0.0, 0, 212], 'true,false,false,true': [5.956, 136, 48], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.66e-07, 384, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [1.068, 4, 212], 'true,false,true': [0.452, 112, 48], 'true,false,false': [0.0, 0, 0], 'false,true': [1.19e-07, 358, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.41, 19, 0], 'true,false,true': [3.48e-07, 0, 212], 'true,false,false,true': [5.848, 119, 48], 'true,false,false,false': [0.0, 0, 0], 'false,true': [9.42e-08, 370, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.673, 2, 212], 'true,false,true': [5.898, 139, 48], 'true,false,false': [0.0, 0, 0], 'false,true': [3.65e-08, 389, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.972, 4, 212], 'true,false,true': [0.0, 11, 0], 'true,false,false,true': [5.841, 118, 48], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 366, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true,true,false': 'genre(A, G)'}, {'true,true,true,true': [0.0, 3, 0], 'true,true,true,false': [1.88e-07, 0, 212], 'true,true,false,true': [0.0, 9, 0], 'true,true,false,false': [5.896, 126, 48], 'true,false': [0.0, 0, 0], 'false': [1.88e-07, 389, 0]}]]
[{'': [0.22750000000000356, 2.0100880024792309e-16], 'true': [-6.938893903907228e-18, 0.21864149305555916], 'true,false': [5.496651352106436e-15, 0.20118983234180732], 'true,false,false': [0.20118983234180732, nan], 'false': [2.0100880024792309e-16, nan]}, {'': [0.18991277624551325, -1.2089095157029481e-16], 'true': [0.006609482952333307, 0.18064738050530094], 'true,false': [3.7007434154171884e-18, 0.1914672216441203], 'true,false,false': [0.1914672216441203, nan], 'false': [-1.2089095157029481e-16, nan]}, {'': [0.14229794422077138, -2.3069569342860397e-17], 'true': [0.002676328127431076, 0.1348410134476389], 'true,false': [0.1348410134476389, nan], 'false': [-2.3069569342860397e-17, nan]}, {'': [0.1311685949678392, 7.500702471998377e-17], 'true': [0.0041008377855952065, 0.19415826853612428], 'true,false': [-2.135044278125301e-18, 0.20776092438556149], 'true,false,false': [0.20776092438556149, nan], 'false': [7.500702471998377e-17, nan]}, {'': [0.11706366219471075, 7.170190367370803e-17], 'true': [0.004855654313663788, 0.11791683161903004], 'true,false': [-7.541137525755781e-16, 0.19281663516068054], 'true,false,false': [0.19281663516068054, nan], 'false': [7.170190367370803e-17, nan]}, {'': [0.09976385780722109, 3.9695124902798894e-17], 'true': [0.005284978972491271, 0.20394717621769004], 'true,false': [0.20394717621769004, nan], 'false': [3.9695124902798894e-17, nan]}, {'': [0.09914172690260777, 2.400482215405744e-17], 'true': [0.008837752036661352, 0.10009512605709453], 'true,false': [5.697748352793256e-16, 0.20481193302018755], 'true,false,false': [0.20481193302018755, nan], 'false': [2.400482215405744e-17, nan]}, {'': [0.09591794375251955, 3.424852518123876e-18], 'true': [0.0021151133008164586, 0.18600198226441758], 'true,false': [0.18600198226441758, nan], 'false': [3.424852518123876e-18, nan]}, {'': [0.09414753528033624, -9.585532125178947e-17], 'true': [0.004373572378500902, 0.19334243078020277], 'true,false': [0.0, 0.2055450718536799], 'true,false,false': [0.2055450718536799, nan], 'false': [-9.585532125178947e-17, nan]}, {'': [0.0938663002616552, 9.132940048330337e-17], 'true': [0.0938663002616552, nan], 'true,true': [0.003513993829198597, 0.19020823254612837], 'true,true,false': [-7.709882115452476e-19, 0.19976218787158137], 'true,true,true': [-3.700743415417188e-17, 1.6758083390568402e-16]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, E).;true;true
9;true,true;genre(A, F).;true;true
9;true,false;genre(A, G).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995091;  // std dev = 1.08e-06, 212.000 (wgt'ed) examples reached here.  /* #pos=212 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.8581489350995121;  // std dev = 1.69e-07, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 126.000 (wgt'ed) examples reached here.  /* #neg=126 */
%   else return -0.14185106490048735;  // std dev = 3.01e-07, 399.000 (wgt'ed) examples reached here.  /* #neg=399 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.7194734122109543;  // std dev = 2.06e-07, 74.000 (wgt'ed) examples reached here.  /* #pos=74 */
%   | | else return 0.701496432407991;  // std dev = 0.122, 141.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=138 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.7194734122109548;  // std dev = 0.000, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | | | else return -0.12544463852839108;  // std dev = 7.88e-08, 130.000 (wgt'ed) examples reached here.  /* #neg=130 */
%   else return -0.12544463852839227;  // std dev = 0.000, 412.000 (wgt'ed) examples reached here.  /* #neg=412 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.5577201882446775;  // std dev = 0.036, 260.000 (wgt'ed) examples reached here.  /* #pos=260 */
%   | else return -0.11634723735373169;  // std dev = 0.246, 139.000 (wgt'ed) examples reached here.  /* #neg=139 */
%   else return -0.11231637819360614;  // std dev = 0.000, 415.000 (wgt'ed) examples reached here.  /* #neg=415 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4168579798753128;  // std dev = 0.624, 213.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=212 */
%   | else if ( genre(A, E) )
%   | | then return -0.10122900515849209;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.4169412726095725;  // std dev = 0.000, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | | | else return -0.10122900515849227;  // std dev = 0.000, 128.000 (wgt'ed) examples reached here.  /* #neg=128 */
%   else return -0.10159632948783608;  // std dev = 1.79e-07, 378.000 (wgt'ed) examples reached here.  /* #neg=378 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( female(B) )
%   | | then return -0.09238363376749256;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return -0.13009328244610824;  // std dev = 0.075, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( genre(B, E) )
%   | | then return 0.32289798874433695;  // std dev = 0.027, 212.000 (wgt'ed) examples reached here.  /* #pos=212 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.3203238742268351;  // std dev = 8.43e-08, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | | | else return -0.09238363376749241;  // std dev = 3.33e-08, 112.000 (wgt'ed) examples reached here.  /* #neg=112 */
%   else return -0.09269127618926067;  // std dev = 1.79e-07, 372.000 (wgt'ed) examples reached here.  /* #neg=372 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2563399854200918;  // std dev = 0.026, 260.000 (wgt'ed) examples reached here.  /* #pos=260 */
%   | else return -0.08882734385830612;  // std dev = 0.337, 171.000 (wgt'ed) examples reached here.  /* #neg=171 */
%   else return -0.08518475138839678;  // std dev = 1.25e-07, 363.000 (wgt'ed) examples reached here.  /* #neg=363 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( actor(B) )
%   | | then return -0.07659684471968874;  // std dev = 0.005, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else return -0.23889185146707148;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.2108656702982275;  // std dev = 0.021, 212.000 (wgt'ed) examples reached here.  /* #pos=212 */
%   | | else if ( actor(B) )
%   | | | then return -0.07827036271370548;  // std dev = 4.71e-08, 127.000 (wgt'ed) examples reached here.  /* #neg=127 */
%   | | | else return 0.20933348657145937;  // std dev = 0.000, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   else return -0.07877675473109141;  // std dev = 2.26e-07, 404.000 (wgt'ed) examples reached here.  /* #neg=404 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.17620056734890874;  // std dev = 0.000, 74.000 (wgt'ed) examples reached here.  /* #pos=74 */
%   | | else if ( actor(A) )
%   | | | then return 0.1788252037267207;  // std dev = 1.07e-07, 138.000 (wgt'ed) examples reached here.  /* #pos=138 */
%   | | | else return -0.19818827388402258;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( actor(A), director(B) )
%   | | then return 0.17678528328849;  // std dev = 0.000, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | | else return -0.07342858668428888;  // std dev = 0.044, 111.000 (wgt'ed) examples reached here.  /* #neg=111 */
%   else return -0.07324622576333771;  // std dev = 0.000, 396.000 (wgt'ed) examples reached here.  /* #neg=396 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.15035070453152935;  // std dev = 0.453, 214.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=212 */
%   | else if ( genre(A, E) )
%   | | then return -0.06716696044651825;  // std dev = 0.004, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( actor(B) )
%   | | | then return -0.06800274021043153;  // std dev = 4.34e-08, 100.000 (wgt'ed) examples reached here.  /* #neg=100 */
%   | | | else return 0.15250772965232337;  // std dev = 0.000, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   else return -0.06842697784420328;  // std dev = 0.000, 374.000 (wgt'ed) examples reached here.  /* #neg=374 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( genre(A, E) )
%   | | then return -0.19069602236334846;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.1348380388251506;  // std dev = 0.012, 212.000 (wgt'ed) examples reached here.  /* #pos=212 */
%   | else if ( genre(A, F) )
%   | | then return -0.06285693171439317;  // std dev = 0.004, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.1338226611904225;  // std dev = 0.000, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | | | else return -0.0641932078905598;  // std dev = 0.038, 101.000 (wgt'ed) examples reached here.  /* #neg=101 */
%   else return -0.06419184008202566;  // std dev = 1.81e-07, 377.000 (wgt'ed) examples reached here.  /* #neg=377 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063412
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.298 seconds
Total inference time: 0.987 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064975
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.484 seconds
Refined model CLL: -0.064975


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063412
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 6.781 seconds
Total inference time: 0.987 seconds
AUC ROC: 1.0
Total revision time: 6.781
Best scored revision CLL: -0.064975


Dataset: 4_cora_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 00:04:02
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063412, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 6.781, 'Inference time': 0.987, 'parameter_0.8': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.130827, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 1.507, 'Inference time': 1.024}}


Amount of data: 1.0
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;haswordauthor(E, C).;true;true
7;true,true,true;author(F, E), title(F, D).;false;false
7;true,true,false;title(G, D), venue(G, B).;false;false
7;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
7;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
7;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, B).;false;true
8;true,true,false;title(F, D), venue(F, A).;false;false
8;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
8;true,false,false;haswordvenue(A, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
8;false,true;haswordauthor(M, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;true,true;author(F, E), venue(F, B).;true;true
9;true,true,true;samebib(F, G), venue(G, A).;false;false
9;true,true,false;author(H, E), venue(H, A).;false;false
9;true,false;haswordtitle(I, C).;true;true
9;true,false,true;title(J, I), venue(J, A).;false;false
9;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995086;  // std dev = 1.08e-06, 267.000 (wgt'ed) examples reached here.  /* #pos=267 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.13384986967895257;  // std dev = 6.537, 214.000 (wgt'ed) examples reached here.  /* #neg=155 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048716;  // std dev = 2.95e-07, 450.000 (wgt'ed) examples reached here.  /* #neg=450 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7070022970708933;  // std dev = 1.677, 271.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=267 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.12471570450643368;  // std dev = 6.501, 208.000 (wgt'ed) examples reached here.  /* #neg=149 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839233;  // std dev = 0.000, 485.000 (wgt'ed) examples reached here.  /* #neg=485 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.13688540572864644;  // std dev = 0.224, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | else if ( movie(E, A) )
%   | | then return 0.35641588405098606;  // std dev = 0.375, 479.000 (wgt'ed) examples reached here.  /* #neg=153 #pos=326 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360583;  // std dev = 0.000, 497.000 (wgt'ed) examples reached here.  /* #neg=497 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4572929217541077;  // std dev = 1.489, 272.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=267 */
%   | else if ( genre(A, E) )
%   | | then return -0.09937565197270513;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.06233136288592764;  // std dev = 6.443, 199.000 (wgt'ed) examples reached here.  /* #neg=140 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783541;  // std dev = 1.56e-08, 496.000 (wgt'ed) examples reached here.  /* #neg=496 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1422138355911371;  // std dev = 0.375, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else if ( genre(B, E) )
%   | | then return 0.35919494107211875;  // std dev = 5.46e-07, 267.000 (wgt'ed) examples reached here.  /* #pos=267 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.009898075687714869;  // std dev = 6.628, 231.000 (wgt'ed) examples reached here.  /* #neg=172 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926126;  // std dev = 2.11e-08, 462.000 (wgt'ed) examples reached here.  /* #neg=462 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.27333409497129785;  // std dev = 1.070, 271.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=267 */
%   | else if ( movie(E, A) )
%   | | then return 0.07895957436430187;  // std dev = 0.458, 188.000 (wgt'ed) examples reached here.  /* #neg=129 #pos=59 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 1.46e-07, 475.000 (wgt'ed) examples reached here.  /* #neg=475 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.10972465872032858;  // std dev = 0.305, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else if ( genre(B, E) )
%   | | then return 0.22945536259740612;  // std dev = 1.46e-07, 267.000 (wgt'ed) examples reached here.  /* #pos=267 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.01207626063702625;  // std dev = 6.543, 215.000 (wgt'ed) examples reached here.  /* #neg=156 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109194;  // std dev = 1.56e-07, 479.000 (wgt'ed) examples reached here.  /* #neg=479 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1843017558319787;  // std dev = 0.957, 271.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=267 */
%   | else if ( movie(E, B) )
%   | | then return 0.04221824752488864;  // std dev = 6.367, 202.000 (wgt'ed) examples reached here.  /* #neg=143 #pos=59 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.07324622576333727;  // std dev = 0.000, 506.000 (wgt'ed) examples reached here.  /* #neg=506 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.15186640699738713;  // std dev = 1.291, 274.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=267 */
%   | else if ( genre(A, E) )
%   | | then return -0.08059297527698187;  // std dev = 5.27e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.03113965587517777;  // std dev = 6.408, 194.000 (wgt'ed) examples reached here.  /* #neg=135 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420354;  // std dev = 0.000, 494.000 (wgt'ed) examples reached here.  /* #neg=494 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return -0.364270256049073;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.1446724096539002;  // std dev = 1.26e-07, 267.000 (wgt'ed) examples reached here.  /* #pos=267 */
%   | | else if ( genre(A, G) )
%   | | | then return -0.07481949298018671;  // std dev = 3.73e-09, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | | else return -9.057547581054492E-4;  // std dev = 6.525, 212.000 (wgt'ed) examples reached here.  /* #neg=153 #pos=59 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.0641918400820254;  // std dev = 2.44e-07, 485.000 (wgt'ed) examples reached here.  /* #neg=485 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.133499
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.72 seconds
Total inference time: 0.979 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.978388
   AUC PR    = 0.863056
   CLL	      = -0.130594
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.819018
   F1        = 0.900506


Total scoring time: 1.784 seconds
Parameter learned model CLL: -0.130594


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 16, 0], 'true,false,true': [1.08e-06, 0, 267], 'true,false,false,true': [6.537, 155, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.95e-07, 450, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.677, 4, 267], 'true,false,true': [0.0, 17, 0], 'true,false,false,true': [6.501, 149, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 485, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.224, 23, 0], 'true,false,true': [0.375, 153, 326], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 497, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.489, 5, 267], 'true,false,true': [0.0, 18, 0], 'true,false,false,true': [6.443, 140, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.56e-08, 496, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.375, 19, 0], 'true,false,true': [5.46e-07, 0, 267], 'true,false,false,true': [6.628, 172, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.11e-08, 462, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [1.07, 4, 267], 'true,false,true': [0.458, 129, 59], 'true,false,false': [0.0, 0, 0], 'false,true': [1.46e-07, 475, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.305, 19, 0], 'true,false,true': [1.46e-07, 0, 267], 'true,false,false,true': [6.543, 156, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.56e-07, 479, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.957, 4, 267], 'true,false,true': [6.367, 143, 59], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 506, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [1.291, 7, 267], 'true,false,true': [5.27e-09, 16, 0], 'true,false,false,true': [6.408, 135, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 494, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true,true,false': 'genre(A, G)'}, {'true,true,true,true': [0.0, 4, 0], 'true,true,true,false': [1.26e-07, 0, 267], 'true,true,false,true': [3.73e-09, 19, 0], 'true,true,false,false': [6.525, 153, 59], 'true,false': [0.0, 0, 0], 'false': [2.44e-07, 485, 0]}]]
[{'': [0.22568408438559187, 1.934255225124717e-16], 'true': [-6.938893903907228e-18, 0.2184032745363334], 'true,false': [4.364382346990877e-15, 0.19968992925146356], 'true,false,false': [0.19968992925146356, nan], 'false': [1.934255225124717e-16, nan]}, {'': [0.18244499914172257, -1.3551588259342118e-16], 'true': [0.010381541581847974, 0.19221291396945187], 'true,false': [0.0, 0.20319434171597767], 'true,false,false': [0.20319434171597767, nan], 'false': [-1.3551588259342118e-16, nan]}, {'': [0.1446081460274363, -3.574158630584005e-18], 'true': [0.002173093610463195, 0.14029808124673937], 'true,false': [0.14029808124673937, nan], 'false': [-3.574158630584005e-18, nan]}, {'': [0.1314626533278819, 2.399514279028564e-16], 'true': [0.008148227333384592, 0.1932681085750906], 'true,false': [-6.1679056923619804e-18, 0.2085805913992094], 'true,false,false': [0.2085805913992094, nan], 'false': [2.399514279028564e-16, nan]}, {'': [0.11854913292748448, 9.612320559525165e-19], 'true': [0.007393175610965778, 0.1185570088503792], 'true,false': [1.117707674229371e-15, 0.19017634602050199], 'true,false,false': [0.19017634602050199, nan], 'false': [9.612320559525165e-19, nan]}, {'': [0.09741804411999659, 4.487638331116422e-17], 'true': [0.004228643138498481, 0.20944287686217655], 'true,false': [0.20944287686217655, nan], 'false': [4.487638331116422e-17, nan]}, {'': [0.09900687345071647, 5.099145415814915e-17], 'true': [0.004890237817310616, 0.10049190301099503], 'true,false': [7.983626244495507e-17, 0.19911303407247102], 'true,false,false': [0.19911303407247102, nan], 'false': [5.099145415814915e-17, nan]}, {'': [0.0925700999222349, -4.388233298913662e-18], 'true': [0.0033770687846222795, 0.20066372979293198], 'true,false': [0.20066372979293198, nan], 'false': [-4.388233298913662e-18, nan]}, {'': [0.09275633493620382, -1.204614455868591e-16], 'true': [0.006084394309813175, 0.19638680530379238], 'true,false': [1.734723475976807e-18, 0.2116324795408643], 'true,false,false': [0.2116324795408643, nan], 'false': [-1.204614455868591e-16, nan]}, {'': [0.09220582977439544, 1.231546365460483e-16], 'true': [0.09220582977439544, nan], 'true,true': [0.0037667811751883346, 0.18474221844487504], 'true,true,false': [7.304098846218135e-19, 0.20084994660021208], 'true,true,true': [0.0, 5.98771968337163e-17]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, E).;true;true
9;true,true;genre(A, F).;true;true
9;true,false;genre(A, G).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995086;  // std dev = 1.08e-06, 267.000 (wgt'ed) examples reached here.  /* #pos=267 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.8581489350995125;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.14185106490048807;  // std dev = 0.000, 154.000 (wgt'ed) examples reached here.  /* #neg=154 */
%   else return -0.14185106490048766;  // std dev = 0.000, 494.000 (wgt'ed) examples reached here.  /* #neg=494 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.7194734122109543;  // std dev = 2.23e-07, 95.000 (wgt'ed) examples reached here.  /* #pos=95 */
%   | | else return 0.7002707292396078;  // std dev = 0.126, 176.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=172 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 7.45e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.7194734122109543;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.12544463852839124;  // std dev = 5.58e-08, 148.000 (wgt'ed) examples reached here.  /* #neg=148 */
%   else return -0.1254446385283923;  // std dev = 0.000, 457.000 (wgt'ed) examples reached here.  /* #neg=457 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12952324696894876;  // std dev = 0.145, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( actor(A), director(B) )
%   | | then return 0.5578655147417858;  // std dev = 0.043, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | | else return -0.11231637819360617;  // std dev = 1.03e-07, 146.000 (wgt'ed) examples reached here.  /* #neg=146 */
%   else return -0.1123163781936057;  // std dev = 0.000, 543.000 (wgt'ed) examples reached here.  /* #neg=543 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.416905943983288;  // std dev = 5.96e-08, 95.000 (wgt'ed) examples reached here.  /* #pos=95 */
%   | | else if ( actor(A) )
%   | | | then return 0.42158134399145464;  // std dev = 4.09e-07, 172.000 (wgt'ed) examples reached here.  /* #pos=172 */
%   | | | else return -0.20244160456883487;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(A, E) )
%   | | then return -0.10003651234811135;  // std dev = 1.29e-08, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | else if ( actor(B) )
%   | | | then return -0.10159632948783641;  // std dev = 0.000, 131.000 (wgt'ed) examples reached here.  /* #neg=131 */
%   | | | else return 0.41690594398328773;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   else return -0.10159632948783559;  // std dev = 3.00e-07, 456.000 (wgt'ed) examples reached here.  /* #neg=456 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09983928940450264;  // std dev = 0.107, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else if ( genre(B, E) )
%   | | then return 0.32234262033900846;  // std dev = 0.025, 267.000 (wgt'ed) examples reached here.  /* #pos=267 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.3202999263498402;  // std dev = 1.60e-07, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.09409677848578031;  // std dev = 0.106, 153.000 (wgt'ed) examples reached here.  /* #neg=153 */
%   else return -0.09269127618926132;  // std dev = 0.000, 472.000 (wgt'ed) examples reached here.  /* #neg=472 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.2560329816462793;  // std dev = 0.024, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.08725550239129007;  // std dev = 0.151, 157.000 (wgt'ed) examples reached here.  /* #neg=157 */
%   else return -0.08518475138839678;  // std dev = 1.48e-07, 488.000 (wgt'ed) examples reached here.  /* #neg=488 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.0833291223962589;  // std dev = 0.094, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | else if ( genre(B, E) )
%   | | then return 0.2105859614923486;  // std dev = 0.019, 267.000 (wgt'ed) examples reached here.  /* #pos=267 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.20937005963829297;  // std dev = 9.42e-08, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.0792716939442383;  // std dev = 0.065, 125.000 (wgt'ed) examples reached here.  /* #neg=125 */
%   else return -0.07877675473109168;  // std dev = 1.99e-07, 439.000 (wgt'ed) examples reached here.  /* #neg=439 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.17754256174242053;  // std dev = 0.018, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.07562517430799173;  // std dev = 0.158, 162.000 (wgt'ed) examples reached here.  /* #neg=162 */
%   else return -0.07324622576333743;  // std dev = 0.000, 480.000 (wgt'ed) examples reached here.  /* #neg=480 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14805774981383124;  // std dev = 0.623, 272.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=267 */
%   | else if ( genre(A, E) )
%   | | then return -0.06642768269938225;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.15243369786239508;  // std dev = 1.49e-08, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.06831740539978105;  // std dev = 0.041, 140.000 (wgt'ed) examples reached here.  /* #neg=140 */
%   else return -0.06842697784420355;  // std dev = 0.000, 505.000 (wgt'ed) examples reached here.  /* #neg=505 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( genre(A, E) )
%   | | then return -0.1453513509981076;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0.13498541470016812;  // std dev = 0.013, 267.000 (wgt'ed) examples reached here.  /* #pos=267 */
%   | else if ( genre(A, F) )
%   | | then return -0.062424923008265985;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.13376484612697498;  // std dev = 5.16e-08, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.06491404051183729;  // std dev = 0.077, 142.000 (wgt'ed) examples reached here.  /* #neg=142 */
%   else return -0.06419184008202539;  // std dev = 2.45e-07, 492.000 (wgt'ed) examples reached here.  /* #neg=492 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063361
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.49 seconds
Total inference time: 0.983 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064728
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.719 seconds
Refined model CLL: -0.064728


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063361
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 7.713 seconds
Total inference time: 0.983 seconds
AUC ROC: 1.0
Total revision time: 7.713
Best scored revision CLL: -0.064728


Dataset: 4_cora_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 00:04:13
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063361, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 7.713, 'Inference time': 0.983, 'parameter_1.0': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.133499, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 1.72, 'Inference time': 0.979}}


Starting fold 2

Target train facts examples: 870
Target train pos examples: 324
Target train neg examples: 10813

Target test facts examples: 208
Target test pos	 examples: 58
Target test neg examples: 3423

Amount of data: 0.2
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;haswordauthor(E, C).;true;true
7;true,true,true;author(F, E), title(F, D).;false;false
7;true,true,false;title(G, D), venue(G, B).;false;false
7;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
7;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
7;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, B).;false;true
8;true,true,false;title(F, D), venue(F, A).;false;false
8;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
8;true,false,false;haswordvenue(A, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
8;false,true;haswordauthor(M, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;true,true;author(F, E), venue(F, B).;true;true
9;true,true,true;samebib(F, G), venue(G, A).;false;false
9;true,true,false;author(H, E), venue(H, A).;false;false
9;true,false;haswordtitle(I, C).;true;true
9;true,false,true;title(J, I), venue(J, A).;false;false
9;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995124;  // std dev = 0.000, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.09499104036267027;  // std dev = 2.621, 38.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=9 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048763;  // std dev = 8.69e-08, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7043855898763233;  // std dev = 0.837, 56.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=55 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.055490127738493024;  // std dev = 2.668, 43.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=9 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.1254446385283915;  // std dev = 0.000, 76.000 (wgt'ed) examples reached here.  /* #neg=76 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1498367403260148;  // std dev = 0.092, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( movie(E, A) )
%   | | then return 0.37898670185826927;  // std dev = 0.354, 90.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=64 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.1123163781936062;  // std dev = 7.74e-08, 97.000 (wgt'ed) examples reached here.  /* #neg=97 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.45281224329304676;  // std dev = 0.659, 56.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=55 */
%   | else if ( genre(A, E) )
%   | | then return -0.09822250517890964;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.017675931454654608;  // std dev = 2.621, 38.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=9 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783633;  // std dev = 0.000, 109.000 (wgt'ed) examples reached here.  /* #neg=109 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08985922968928368;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.35564117393115896;  // std dev = 0.000, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.008563121972513655;  // std dev = 2.631, 39.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=9 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926107;  // std dev = 0.000, 85.000 (wgt'ed) examples reached here.  /* #neg=85 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2598347979129815;  // std dev = 0.754, 57.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=55 */
%   | else if ( movie(E, A) )
%   | | then return 0.0026964337310326817;  // std dev = 0.411, 41.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=9 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 3.49e-08, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08298090723695617;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.2297347697376685;  // std dev = 9.19e-08, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.03298466793229523;  // std dev = 2.586, 35.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=9 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109162;  // std dev = 4.71e-08, 85.000 (wgt'ed) examples reached here.  /* #neg=85 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1828378242532682;  // std dev = 0.487, 56.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=55 */
%   | else if ( movie(E, B) )
%   | | then return 0.0025610816723702946;  // std dev = 2.617, 42.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=9 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.07324622576333707;  // std dev = 0.000, 94.000 (wgt'ed) examples reached here.  /* #neg=94 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14717238273165223;  // std dev = 0.701, 57.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=55 */
%   | else if ( genre(A, E) )
%   | | then return -0.07706300973585899;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.005400545645986552;  // std dev = 2.641, 40.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=9 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420265;  // std dev = 4.84e-09, 105.000 (wgt'ed) examples reached here.  /* #neg=105 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return -0.3734404882558624;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0.14559775007327955;  // std dev = 4.71e-08, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | | else if ( genre(A, G) )
%   | | | then return -0.07175750361806837;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0.007397768944063269;  // std dev = 2.621, 38.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=9 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.06419184008202625;  // std dev = 0.000, 70.000 (wgt'ed) examples reached here.  /* #neg=70 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.112358
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 0.871 seconds
Total inference time: 0.984 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.982633
   AUC PR    = 0.893846
   CLL	      = -0.117221
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.859375
   F1        = 0.92437


Total scoring time: 0.902 seconds
Parameter learned model CLL: -0.117221


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 5, 0], 'true,false,true': [0.0, 0, 55], 'true,false,false,true': [2.621, 29, 9], 'true,false,false,false': [0.0, 0, 0], 'false,true': [8.69e-08, 95, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.837, 1, 55], 'true,false,true': [0.0, 2, 0], 'true,false,false,true': [2.668, 34, 9], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 76, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.092, 3, 0], 'true,false,true': [0.354, 26, 64], 'true,false,false': [0.0, 0, 0], 'false,true': [7.74e-08, 97, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.659, 1, 55], 'true,false,true': [0.0, 3, 0], 'true,false,false,true': [2.621, 29, 9], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 109, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 2, 0], 'true,false,true': [0.0, 0, 55], 'true,false,false,true': [2.631, 30, 9], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 85, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.754, 2, 55], 'true,false,true': [0.411, 32, 9], 'true,false,false': [0.0, 0, 0], 'false,true': [3.49e-08, 88, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 3, 0], 'true,false,true': [9.19e-08, 0, 55], 'true,false,false,true': [2.586, 26, 9], 'true,false,false,false': [0.0, 0, 0], 'false,true': [4.71e-08, 85, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.487, 1, 55], 'true,false,true': [2.617, 33, 9], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 94, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.701, 2, 55], 'true,false,true': [0.0, 4, 0], 'true,false,false,true': [2.641, 31, 9], 'true,false,false,false': [0.0, 0, 0], 'false,true': [4.84e-09, 105, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true,true,false': 'genre(A, G)'}, {'true,true,true,true': [0.0, 1, 0], 'true,true,true,false': [4.71e-08, 0, 55], 'true,true,false,true': [0.0, 1, 0], 'true,true,false,false': [2.621, 29, 9], 'true,false': [0.0, 0, 0], 'false': [0.0, 70, 0]}]]
[{'': [0.22657226155768362, 7.946859544685331e-17], 'true': [-2.7755575615628915e-18, 0.21459128222915874], 'true,false': [-1.291895883200182e-16, 0.18074792243767326], 'true,false,false': [0.18074792243767326, nan], 'false': [7.946859544685331e-17, nan]}, {'': [0.18463142101132166, -2.6294755846385285e-17], 'true': [0.012520331054076461, 0.15952986353033272], 'true,false': [0.0, 0.16549486208761513], 'true,false,false': [0.16549486208761513, nan], 'false': [-2.6294755846385285e-17, nan]}, {'': [0.13003821497697884, 6.180623023686439e-17], 'true': [0.002815555149094128, 0.12525786601413522], 'true,false': [0.12525786601413522, nan], 'false': [6.180623023686439e-17, nan]}, {'': [0.12368704947278238, -4.0742129344042444e-18], 'true': [0.007744606799495861, 0.1684334099856647], 'true,false': [-1.1564823173178713e-18, 0.18074792243767293], 'true,false,false': [0.18074792243767293, nan], 'false': [-4.0742129344042444e-18, nan]}, {'': [0.10260375901203683, 0.0], 'true': [0.0, 0.1028930216527843], 'true,false': [-6.45947941600091e-17, 0.17751479289940858], 'true,false,false': [0.17751479289940858, nan], 'false': [0.0, nan]}, {'': [0.09269750860553597, 1.3877787807814457e-17], 'true': [0.009985187490565447, 0.1692301772121253], 'true,false': [0.1692301772121253, nan], 'false': [1.3877787807814457e-17, nan]}, {'': [0.08253403984842674, 2.6122894697062506e-17], 'true': [0.0, 0.08348545625223512], 'true,false': [1.5341263613002163e-16, 0.19102040816326527], 'true,false,false': [0.19102040816326527, nan], 'false': [2.6122894697062506e-17, nan]}, {'': [0.08024442409247938, -8.267618268485208e-18], 'true': [0.004238042298793563, 0.16301500710372954], 'true,false': [0.16301500710372954, nan], 'false': [-8.267618268485208e-18, nan]}, {'': [0.08033123064730016, 2.4319171015598667e-17], 'true': [0.008619600720845406, 0.1589471494842503], 'true,false': [0.0, 0.17437499999999967], 'true,false,false': [0.17437499999999967, nan], 'false': [2.4319171015598667e-17, nan]}, {'': [0.07929898725958603, -6.3441315692866086e-18], 'true': [0.07929898725958603, nan], 'true,true': [0.0047248208248183, 0.17626989626907166], 'true,true,false': [0.0, 0.180747922437673], 'true,true,true': [0.0, 4.0371746350005693e-17]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, E).;true;true
9;true,true;genre(A, F).;true;true
9;true,false;genre(A, G).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995124;  // std dev = 0.000, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.1418510649004877;  // std dev = 3.49e-08, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   else return -0.14185106490048763;  // std dev = 8.69e-08, 97.000 (wgt'ed) examples reached here.  /* #neg=97 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109545;  // std dev = 0.000, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( actor(B) )
%   | | | then return -0.12544463852839138;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | | else return 0.7194734122109543;  // std dev = 2.98e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.12544463852839147;  // std dev = 0.000, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.5553664367462837;  // std dev = 2.06e-07, 64.000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | else return -0.11519642620258308;  // std dev = 0.114, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.11231637819360622;  // std dev = 6.99e-08, 85.000 (wgt'ed) examples reached here.  /* #neg=85 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.4175135841583099;  // std dev = 4.21e-08, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else return 0.39856137604819253;  // std dev = 0.107, 33.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.4175135841583102;  // std dev = 1.49e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.10894629364503691;  // std dev = 0.145, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   else return -0.10159632948783621;  // std dev = 5.05e-08, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.10133375596576501;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.3231222038230514;  // std dev = 0.015, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | | else if ( actor(B) )
%   | | | then return -0.09183451362937543;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | | else return 0.3207118471601497;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.09269127618926093;  // std dev = 5.58e-08, 104.000 (wgt'ed) examples reached here.  /* #neg=104 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.25658602914592255;  // std dev = 0.014, 64.000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | else return -0.0849580341459452;  // std dev = 0.008, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else return -0.08518475138839682;  // std dev = 5.67e-08, 102.000 (wgt'ed) examples reached here.  /* #neg=102 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08558426143428673;  // std dev = 1.86e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.2109583142323476;  // std dev = 0.012, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | | else if ( actor(B) )
%   | | | then return -0.078115534051239;  // std dev = 0.000, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | | else return 0.2095234633570096;  // std dev = 1.49e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.07877675473109164;  // std dev = 4.83e-08, 85.000 (wgt'ed) examples reached here.  /* #neg=85 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.17782901640917445;  // std dev = 0.011, 64.000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | else return -0.07871367649310838;  // std dev = 0.220, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.07324622576333707;  // std dev = 0.000, 76.000 (wgt'ed) examples reached here.  /* #neg=76 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.15343097928785657;  // std dev = 0.009, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | else if ( genre(A, E) )
%   | | then return -0.07357131532016391;  // std dev = 1.86e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.1524965775173882;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.08459679656822974;  // std dev = 0.350, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   else return -0.06842697784420265;  // std dev = 4.47e-08, 94.000 (wgt'ed) examples reached here.  /* #neg=94 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( genre(A, E) )
%   | | then return -0.31117594403463567;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0.13454341836967942;  // std dev = 0.008, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | else if ( genre(A, F) )
%   | | then return -0.0687114589465823;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.13381395228006276;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.07107446477480216;  // std dev = 0.238, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   else return -0.06419184008202626;  // std dev = 0.000, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.06323
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.233 seconds
Total inference time: 0.946 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.066336
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.913 seconds
Refined model CLL: -0.066336


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.06323
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.9190000000000005 seconds
Total inference time: 0.946 seconds
AUC ROC: 1.0
Total revision time: 3.9190000000000005
Best scored revision CLL: -0.066336


Dataset: 4_cora_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 00:04:19
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.06323, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 3.9190000000000005, 'Inference time': 0.946, 'parameter_0.2': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.112358, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 0.871, 'Inference time': 0.984}}


Amount of data: 0.4
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;haswordauthor(E, C).;true;true
7;true,true,true;author(F, E), title(F, D).;false;false
7;true,true,false;title(G, D), venue(G, B).;false;false
7;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
7;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
7;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, B).;false;true
8;true,true,false;title(F, D), venue(F, A).;false;false
8;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
8;true,false,false;haswordvenue(A, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
8;false,true;haswordauthor(M, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;true,true;author(F, E), venue(F, B).;true;true
9;true,true,true;samebib(F, G), venue(G, A).;false;false
9;true,true,false;author(H, E), venue(H, A).;false;false
9;true,false;haswordtitle(I, C).;true;true
9;true,false,true;title(J, I), venue(J, A).;false;false
9;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( genre(B, E) )
%   | | then return 0.858148935099511;  // std dev = 5.33e-07, 109.000 (wgt'ed) examples reached here.  /* #pos=109 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.09070707463439591;  // std dev = 3.918, 86.000 (wgt'ed) examples reached here.  /* #neg=66 #pos=20 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048827;  // std dev = 0.000, 174.000 (wgt'ed) examples reached here.  /* #neg=174 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109548;  // std dev = 0.000, 109.000 (wgt'ed) examples reached here.  /* #pos=109 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.11701482118548161;  // std dev = 3.820, 74.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=20 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839163;  // std dev = 0.000, 197.000 (wgt'ed) examples reached here.  /* #neg=197 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.13535676226541962;  // std dev = 0.146, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( movie(E, A) )
%   | | then return 0.34105429629035333;  // std dev = 0.371, 194.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=129 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360667;  // std dev = 0.000, 212.000 (wgt'ed) examples reached here.  /* #neg=212 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.45228594134803;  // std dev = 1.153, 112.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=109 */
%   | else if ( genre(A, E) )
%   | | then return -0.09951254957513767;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.021414075308354912;  // std dev = 3.889, 82.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=20 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783648;  // std dev = 0.000, 172.000 (wgt'ed) examples reached here.  /* #neg=172 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11908500097236588;  // std dev = 0.182, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( genre(B, E) )
%   | | then return 0.3610147430786364;  // std dev = 0.000, 109.000 (wgt'ed) examples reached here.  /* #pos=109 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.030195527696466405;  // std dev = 3.856, 78.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=20 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926064;  // std dev = 8.02e-08, 164.000 (wgt'ed) examples reached here.  /* #neg=164 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2726738377701621;  // std dev = 0.766, 111.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=109 */
%   | else if ( movie(E, A) )
%   | | then return -0.027584357744067575;  // std dev = 0.397, 101.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=20 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 7.15e-08, 177.000 (wgt'ed) examples reached here.  /* #neg=177 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.18658711958189345;  // std dev = 0.359, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( genre(B, E) )
%   | | then return 0.2306488335665229;  // std dev = 1.12e-07, 109.000 (wgt'ed) examples reached here.  /* #pos=109 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.04730048386543894;  // std dev = 3.811, 73.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=20 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109146;  // std dev = 6.32e-08, 235.000 (wgt'ed) examples reached here.  /* #neg=235 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18374290297940654;  // std dev = 0.664, 111.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=109 */
%   | else if ( movie(E, B) )
%   | | then return -0.010974970331430856;  // std dev = 3.933, 93.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=20 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.07324622576333671;  // std dev = 1.02e-07, 177.000 (wgt'ed) examples reached here.  /* #neg=177 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.16092659770151332;  // std dev = 0.483, 110.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=109 */
%   | else if ( genre(A, E) )
%   | | then return -0.0662114591581444;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.08435748946113829;  // std dev = 3.695, 63.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=20 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420262;  // std dev = 5.67e-09, 178.000 (wgt'ed) examples reached here.  /* #neg=178 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.14430690025786633;  // std dev = 0.000, 109.000 (wgt'ed) examples reached here.  /* #pos=109 */
%   | | else if ( genre(A, G) )
%   | | | then return -0.062233477886548254;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return 0.014636828241815213;  // std dev = 3.839, 76.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=20 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.06419184008202626;  // std dev = 0.000, 184.000 (wgt'ed) examples reached here.  /* #neg=184 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.118828
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.164 seconds
Total inference time: 1.04 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.980284
   AUC PR    = 0.881596
   CLL	      = -0.125587
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.844961
   F1        = 0.915966


Total scoring time: 1.095 seconds
Parameter learned model CLL: -0.125587


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 7, 0], 'true,false,true': [5.33e-07, 0, 109], 'true,false,false,true': [3.918, 66, 20], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 174, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 109], 'true,false,true': [0.0, 6, 0], 'true,false,false,true': [3.82, 54, 20], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 197, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.146, 10, 0], 'true,false,true': [0.371, 65, 129], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 212, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.153, 3, 109], 'true,false,true': [0.0, 6, 0], 'true,false,false,true': [3.889, 62, 20], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 172, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.182, 7, 0], 'true,false,true': [0.0, 0, 109], 'true,false,false,true': [3.856, 58, 20], 'true,false,false,false': [0.0, 0, 0], 'false,true': [8.02e-08, 164, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.766, 2, 109], 'true,false,true': [0.397, 81, 20], 'true,false,false': [0.0, 0, 0], 'false,true': [7.15e-08, 177, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.359, 9, 0], 'true,false,true': [1.12e-07, 0, 109], 'true,false,false,true': [3.811, 53, 20], 'true,false,false,false': [0.0, 0, 0], 'false,true': [6.32e-08, 235, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.664, 2, 109], 'true,false,true': [3.933, 73, 20], 'true,false,false': [0.0, 0, 0], 'false,true': [1.02e-07, 177, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.483, 1, 109], 'true,false,true': [0.0, 2, 0], 'true,false,false,true': [3.695, 43, 20], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.67e-09, 178, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true,true,false': 'genre(A, G)'}, {'true,true,true,true': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 109], 'true,true,false,true': [0.0, 7, 0], 'true,true,false,false': [3.839, 56, 20], 'true,false': [0.0, 0, 0], 'false': [0.0, 184, 0]}]]
[{'': [0.23078619743162856, -1.8376105235175005e-16], 'true': [-7.93016446160826e-18, 0.2239053254437913], 'true,false': [2.6074962780187164e-15, 0.17847485127095683], 'true,false,false': [0.17847485127095683, nan], 'false': [-1.8376105235175005e-16, nan]}, {'': [0.1729785659381265, -3.1559639278684655e-17], 'true': [-6.518740695046791e-16, 0.186510752086261], 'true,false': [-2.3129646346357427e-18, 0.19722425127830487], 'true,false,false': [0.19722425127830487, nan], 'false': [-3.1559639278684655e-17, nan]}, {'': [0.14166664443666777, -5.655853144316835e-17], 'true': [0.0021234371927066815, 0.13773373558160568], 'true,false': [0.13773373558160568, nan], 'false': [-5.655853144316835e-17, nan]}, {'': [0.13018108866821, -8.13302913388196e-17], 'true': [0.011876440086620952, 0.17276941446682323], 'true,false': [0.0, 0.18441403926234323], 'true,false,false': [0.18441403926234323, nan], 'false': [-8.13302913388196e-17, nan]}, {'': [0.10654923233761464, 3.9263985017231144e-17], 'true': [0.0047515584107363645, 0.10613675045022172], 'true,false': [-1.7926536911378675e-16, 0.19066403681788327], 'true,false,false': [0.19066403681788327, nan], 'false': [3.9263985017231144e-17, nan]}, {'': [0.10020251441191998, 2.885325374732045e-17], 'true': [0.005287610288556189, 0.1573111450164645], 'true,false': [0.1573111450164645, nan], 'false': [2.885325374732045e-17, nan]}, {'': [0.08969766678277968, 1.7007671866598143e-17], 'true': [0.014328184713938534, 0.08785856630197927], 'true,false': [1.1407796216331884e-16, 0.19891161568774682], 'true,false,false': [0.19891161568774682, nan], 'false': [1.7007671866598143e-17, nan]}, {'': [0.08740188578479607, 5.896099678800266e-17], 'true': [0.003966699176170042, 0.16635557029293785], 'true,false': [0.16635557029293785, nan], 'false': [5.896099678800266e-17, nan]}, {'': [0.08112776252533997, 3.1809760817911786e-17], 'true': [0.0021201411802352203, 0.2106883158215182], 'true,false': [0.0, 0.21667926429831172], 'true,false,false': [0.21667926429831172, nan], 'false': [3.1809760817911786e-17, nan]}, {'': [0.08150108363603915, -3.620292471603771e-18], 'true': [0.08150108363603915, nan], 'true,true': [-6.926161988487215e-17, 0.17800863784668816], 'true,true,false': [0.0, 0.19390581717451547], 'true,true,true': [nan, -6.926161988487215e-17]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, E).;true;true
9;true,false;genre(A, G).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else if ( genre(B, E) )
%   | | then return 0.858148935099511;  // std dev = 5.33e-07, 109.000 (wgt'ed) examples reached here.  /* #pos=109 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return -0.14185106490048766;  // std dev = 5.96e-08, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
%   else return -0.1418510649004883;  // std dev = 0.000, 179.000 (wgt'ed) examples reached here.  /* #neg=179 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( actor(A) )
%   | | then return 0.7194734122109548;  // std dev = 0.000, 109.000 (wgt'ed) examples reached here.  /* #pos=109 */
%   | | else return -0.12544463852839138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.7194734122109543;  // std dev = 7.30e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return -0.12544463852839155;  // std dev = 0.000, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
%   else return -0.12544463852839155;  // std dev = 0.000, 181.000 (wgt'ed) examples reached here.  /* #neg=181 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( actor(A), director(B) )
%   | | then return 0.5553664367462834;  // std dev = 4.84e-07, 129.000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | | else return -0.11231637819360629;  // std dev = 4.59e-08, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
%   else return -0.11231637819360649;  // std dev = 0.000, 183.000 (wgt'ed) examples reached here.  /* #neg=183 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.4175135841583106;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else return 0.4017829807144879;  // std dev = 0.089, 66.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=64 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783627;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( actor(B) )
%   | | | then return -0.10159632948783616;  // std dev = 5.37e-08, 72.000 (wgt'ed) examples reached here.  /* #neg=72 */
%   | | | else return 0.41751358415831047;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.1015963294878365;  // std dev = 0.000, 175.000 (wgt'ed) examples reached here.  /* #neg=175 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926094;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.3227296814486906;  // std dev = 0.018, 109.000 (wgt'ed) examples reached here.  /* #pos=109 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.3207118471601496;  // std dev = 2.11e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return -0.09434778192424051;  // std dev = 0.075, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
%   else return -0.09269127618926061;  // std dev = 8.43e-08, 176.000 (wgt'ed) examples reached here.  /* #neg=176 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2563358803579709;  // std dev = 0.016, 129.000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | else return -0.08571518831244115;  // std dev = 0.048, 75.000 (wgt'ed) examples reached here.  /* #neg=75 */
%   else return -0.08518475138839678;  // std dev = 7.45e-08, 193.000 (wgt'ed) examples reached here.  /* #neg=193 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09002245763485305;  // std dev = 0.055, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( genre(B, E) )
%   | | then return 0.21076601301198805;  // std dev = 0.013, 109.000 (wgt'ed) examples reached here.  /* #pos=109 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.20956489685562785;  // std dev = 1.83e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return -0.07948471815369708;  // std dev = 0.046, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
%   else return -0.07877675473109148;  // std dev = 8.02e-08, 171.000 (wgt'ed) examples reached here.  /* #neg=171 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1776993965182873;  // std dev = 0.012, 129.000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | else return -0.07421689239896512;  // std dev = 0.060, 70.000 (wgt'ed) examples reached here.  /* #neg=70 */
%   else return -0.07324622576333673;  // std dev = 9.83e-08, 173.000 (wgt'ed) examples reached here.  /* #neg=173 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.15095482814790562;  // std dev = 0.259, 110.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=109 */
%   | else if ( genre(A, E) )
%   | | then return -0.06761889251442497;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.15254030956133474;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return -0.06868486379288474;  // std dev = 0.041, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */
%   else return -0.06842697784420262;  // std dev = 8.49e-08, 210.000 (wgt'ed) examples reached here.  /* #neg=210 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13010074841178013;  // std dev = 0.361, 111.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=109 */
%   | else if ( genre(A, E) )
%   | | then return -0.06347838677312691;  // std dev = 1.86e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.13384810275900577;  // std dev = 1.67e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return -0.0645545052299331;  // std dev = 0.039, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
%   else return -0.06419184008202626;  // std dev = 0.000, 193.000 (wgt'ed) examples reached here.  /* #neg=193 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063465
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.699 seconds
Total inference time: 1.051 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.06493
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.095 seconds
Refined model CLL: -0.06493


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063465
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 5.053 seconds
Total inference time: 1.051 seconds
AUC ROC: 1.0
Total revision time: 5.053
Best scored revision CLL: -0.06493


Dataset: 4_cora_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 00:04:27
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063465, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 5.053, 'Inference time': 1.051, 'parameter_0.4': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.118828, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 1.164, 'Inference time': 1.04}}


Amount of data: 0.6
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;haswordauthor(E, C).;true;true
7;true,true,true;author(F, E), title(F, D).;false;false
7;true,true,false;title(G, D), venue(G, B).;false;false
7;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
7;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
7;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, B).;false;true
8;true,true,false;title(F, D), venue(F, A).;false;false
8;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
8;true,false,false;haswordvenue(A, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
8;false,true;haswordauthor(M, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;true,true;author(F, E), venue(F, B).;true;true
9;true,true,true;samebib(F, G), venue(G, A).;false;false
9;true,true,false;author(H, E), venue(H, A).;false;false
9;true,false;haswordtitle(I, C).;true;true
9;true,false,true;title(J, I), venue(J, A).;false;false
9;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995097;  // std dev = 1.00e-06, 160.000 (wgt'ed) examples reached here.  /* #pos=160 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.18195845890903473;  // std dev = 4.795, 105.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=34 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.1418510649004878;  // std dev = 1.26e-07, 307.000 (wgt'ed) examples reached here.  /* #neg=307 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7142254740076064;  // std dev = 0.842, 161.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=160 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.1711585206311395;  // std dev = 4.749, 101.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=34 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839188;  // std dev = 0.000, 255.000 (wgt'ed) examples reached here.  /* #neg=255 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.148029157829566;  // std dev = 0.212, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else if ( movie(E, A) )
%   | | then return 0.352073000860341;  // std dev = 0.376, 283.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=194 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360699;  // std dev = 0.000, 282.000 (wgt'ed) examples reached here.  /* #neg=282 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4525712623858338;  // std dev = 1.325, 164.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=160 */
%   | else if ( genre(A, E) )
%   | | then return -0.09838272783516679;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.010824858620246491;  // std dev = 5.011, 130.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=34 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783662;  // std dev = 0.000, 294.000 (wgt'ed) examples reached here.  /* #neg=294 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.13317982270716067;  // std dev = 0.242, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( genre(B, E) )
%   | | then return 0.35961888524160013;  // std dev = 0.000, 160.000 (wgt'ed) examples reached here.  /* #pos=160 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.03538299018676388;  // std dev = 4.920, 118.000 (wgt'ed) examples reached here.  /* #neg=84 #pos=34 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926046;  // std dev = 1.56e-07, 281.000 (wgt'ed) examples reached here.  /* #neg=281 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.27164867420444694;  // std dev = 0.926, 163.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=160 */
%   | else if ( movie(E, A) )
%   | | then return 0.013830341036989796;  // std dev = 0.437, 129.000 (wgt'ed) examples reached here.  /* #neg=95 #pos=34 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 1.01e-07, 289.000 (wgt'ed) examples reached here.  /* #neg=289 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1272143677241886;  // std dev = 0.294, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( genre(B, E) )
%   | | then return 0.2300044229473956;  // std dev = 1.12e-07, 160.000 (wgt'ed) examples reached here.  /* #pos=160 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.021173301459310897;  // std dev = 4.936, 120.000 (wgt'ed) examples reached here.  /* #neg=86 #pos=34 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109144;  // std dev = 4.47e-08, 279.000 (wgt'ed) examples reached here.  /* #neg=279 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18300462127936495;  // std dev = 0.821, 163.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=160 */
%   | else if ( movie(E, B) )
%   | | then return -9.307267837268586E-4;  // std dev = 4.987, 134.000 (wgt'ed) examples reached here.  /* #neg=100 #pos=34 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.07324622576333685;  // std dev = 1.12e-07, 266.000 (wgt'ed) examples reached here.  /* #neg=266 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.158971016030028;  // std dev = 0.689, 162.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=160 */
%   | else if ( genre(A, E) )
%   | | then return -0.07167750917373404;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.008518646694647825;  // std dev = 5.024, 132.000 (wgt'ed) examples reached here.  /* #neg=98 #pos=34 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420283;  // std dev = 0.000, 268.000 (wgt'ed) examples reached here.  /* #neg=268 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return -0.3612706607419304;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.14427025553120268;  // std dev = 0.000, 160.000 (wgt'ed) examples reached here.  /* #pos=160 */
%   | | else if ( genre(A, G) )
%   | | | then return -0.06705208463140662;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return 0.041872174747583465;  // std dev = 4.856, 111.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=34 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.06419184008202605;  // std dev = 9.42e-08, 283.000 (wgt'ed) examples reached here.  /* #neg=283 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.125784
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.383 seconds
Total inference time: 1.026 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.978684
   AUC PR    = 0.867226
   CLL	      = -0.129566
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.824742
   F1        = 0.903955


Total scoring time: 1.366 seconds
Parameter learned model CLL: -0.129566


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 15, 0], 'true,false,true': [1e-06, 0, 160], 'true,false,false,true': [4.795, 71, 34], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.26e-07, 307, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.842, 1, 160], 'true,false,true': [0.0, 6, 0], 'true,false,false,true': [4.749, 67, 34], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 255, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.212, 16, 0], 'true,false,true': [0.376, 89, 194], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 282, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.325, 4, 160], 'true,false,true': [0.0, 9, 0], 'true,false,false,true': [5.011, 96, 34], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 294, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.242, 9, 0], 'true,false,true': [0.0, 0, 160], 'true,false,false,true': [4.92, 84, 34], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.56e-07, 281, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.926, 3, 160], 'true,false,true': [0.437, 95, 34], 'true,false,false': [0.0, 0, 0], 'false,true': [1.01e-07, 289, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.294, 10, 0], 'true,false,true': [1.12e-07, 0, 160], 'true,false,false,true': [4.936, 86, 34], 'true,false,false,false': [0.0, 0, 0], 'false,true': [4.47e-08, 279, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.821, 3, 160], 'true,false,true': [4.987, 100, 34], 'true,false,false': [0.0, 0, 0], 'false,true': [1.12e-07, 266, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.689, 2, 160], 'true,false,true': [0.0, 11, 0], 'true,false,false,true': [5.024, 98, 34], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 268, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true,true,false': 'genre(A, G)'}, {'true,true,true,true': [0.0, 3, 0], 'true,true,true,false': [0.0, 0, 160], 'true,true,false,true': [0.0, 11, 0], 'true,true,false,false': [4.856, 77, 34], 'true,false': [0.0, 0, 0], 'false': [9.42e-08, 283, 0]}]]
[{'': [0.21280612244898464, 5.207560766971418e-17], 'true': [-1.4802973661668754e-17, 0.19614097543610343], 'true,false': [6.306066779870889e-15, 0.21895691609977466], 'true,false,false': [0.21895691609977466, nan], 'false': [5.207560766971418e-17, nan]}, {'': [0.1638008962425518, -6.617799989922502e-17], 'true': [0.004406536861786095, 0.21544577113210261], 'true,false': [-2.3129646346357427e-18, 0.22331144005489525], 'true,false,false': [0.22331144005489525, nan], 'false': [-6.617799989922502e-17, nan]}, {'': [0.14663113339988407, -1.0393577251809976e-16], 'true': [0.002805885784518545, 0.14137920249696864], 'true,false': [0.14137920249696864, nan], 'false': [-1.0393577251809976e-16, nan]}, {'': [0.13900393455601778, -5.437827059388522e-17], 'true': [0.01070202639990357, 0.1813530872205558], 'true,false': [0.0, 0.19313609467455692], 'true,false,false': [0.19313609467455692, nan], 'false': [-5.437827059388522e-17, nan]}, {'': [0.11324584868957167, 8.692137559342863e-17], 'true': [0.0065275385775202775, 0.1127448928653083], 'true,false': [-6.661338147750939e-16, 0.2051134731399029], 'true,false,false': [0.2051134731399029, nan], 'false': [8.692137559342863e-17, nan]}, {'': [0.10353862287211715, 3.534273988426104e-17], 'true': [0.005260375153357296, 0.1906146722841134], 'true,false': [0.1906146722841134, nan], 'false': [3.534273988426104e-17, nan]}, {'': [0.09701970389785476, 7.162729191130042e-18], 'true': [0.00865940165011973, 0.09770391661817], 'true,false': [7.771561172376095e-17, 0.2030555555555554], 'true,false,false': [0.2030555555555554, nan], 'false': [7.162729191130042e-18, nan]}, {'': [0.09437781188408056, 4.674623261579606e-17], 'true': [0.004135362196972593, 0.18558249682967562], 'true,false': [0.18558249682967562, nan], 'false': [4.674623261579606e-17, nan]}, {'': [0.09185002176087921, -2.6512788647764932e-17], 'true': [0.002933329957196921, 0.1768036948271057], 'true,false': [-2.523234146875356e-18, 0.1912304866850324], 'true,false,false': [0.1912304866850324, nan], 'false': [-2.6512788647764932e-17, nan]}, {'': [0.08840685325697203, 3.1384396455834815e-17], 'true': [0.08840685325697203, nan], 'true,true': [0.004617199618074044, 0.19429776867501042], 'true,true,false': [-1.8924256101565167e-18, 0.21248275302329314], 'true,true,true': [0.0, -1.7208456881689927e-16]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, E).;true;true
9;true,true;genre(A, F).;true;true
9;true,false;genre(A, G).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995097;  // std dev = 1.00e-06, 160.000 (wgt'ed) examples reached here.  /* #pos=160 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.8581489350995115;  // std dev = 2.38e-07, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | | else return -0.14185106490048766;  // std dev = 7.45e-08, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */
%   else return -0.141851064900488;  // std dev = 0.000, 280.000 (wgt'ed) examples reached here.  /* #neg=280 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.7194734122109546;  // std dev = 1.19e-07, 65.000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | | else return 0.7020524214740606;  // std dev = 0.120, 97.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=95 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.7194734122109548;  // std dev = 0.000, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 99.000 (wgt'ed) examples reached here.  /* #neg=99 */
%   else return -0.125444638528392;  // std dev = 0.000, 292.000 (wgt'ed) examples reached here.  /* #neg=292 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.5574709270679749;  // std dev = 0.030, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else return -0.11455947136376896;  // std dev = 0.157, 100.000 (wgt'ed) examples reached here.  /* #neg=100 */
%   else return -0.11231637819360685;  // std dev = 0.000, 298.000 (wgt'ed) examples reached here.  /* #neg=298 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4156401275106411;  // std dev = 0.623, 161.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=160 */
%   | else if ( genre(A, E) )
%   | | then return -0.10139177513301348;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( actor(B) )
%   | | | then return -0.1013917751330134;  // std dev = 2.36e-08, 78.000 (wgt'ed) examples reached here.  /* #neg=78 */
%   | | | else return 0.41700186956690244;  // std dev = 0.000, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   else return -0.10159632948783662;  // std dev = 0.000, 283.000 (wgt'ed) examples reached here.  /* #neg=283 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11347991125477293;  // std dev = 0.059, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( genre(B, E) )
%   | | then return 0.32292177246962017;  // std dev = 0.024, 160.000 (wgt'ed) examples reached here.  /* #pos=160 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.3203649509307483;  // std dev = 0.000, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | | else return -0.0936040905135659;  // std dev = 0.075, 99.000 (wgt'ed) examples reached here.  /* #neg=99 */
%   else return -0.09269127618926044;  // std dev = 1.33e-07, 277.000 (wgt'ed) examples reached here.  /* #neg=277 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.2563747111827953;  // std dev = 0.023, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else return -0.0872120415242136;  // std dev = 0.180, 91.000 (wgt'ed) examples reached here.  /* #neg=91 */
%   else return -0.08518475138839678;  // std dev = 9.88e-08, 281.000 (wgt'ed) examples reached here.  /* #neg=281 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( actor(B) )
%   | | then return -0.07699182083286318;  // std dev = 2.63e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return -0.242428713183188;  // std dev = 7.45e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(B, E) )
%   | | then return 0.21087403301375093;  // std dev = 0.018, 160.000 (wgt'ed) examples reached here.  /* #pos=160 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.2093521672690599;  // std dev = 0.000, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | | else return -0.07907268719361403;  // std dev = 0.046, 71.000 (wgt'ed) examples reached here.  /* #neg=71 */
%   else return -0.07877675473109143;  // std dev = 5.16e-08, 279.000 (wgt'ed) examples reached here.  /* #neg=279 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.17771956213939533;  // std dev = 0.017, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else return -0.07708953320655387;  // std dev = 0.222, 100.000 (wgt'ed) examples reached here.  /* #neg=100 */
%   else return -0.07324622576333689;  // std dev = 1.07e-07, 278.000 (wgt'ed) examples reached here.  /* #neg=278 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.15204855301162185;  // std dev = 6.66e-08, 65.000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | | else if ( actor(A) )
%   | | | then return 0.15430827823165863;  // std dev = 8.43e-08, 95.000 (wgt'ed) examples reached here.  /* #pos=95 */
%   | | | else return -0.18863131104182393;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(A, E) )
%   | | then return -0.06673122465177773;  // std dev = 4.56e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.15239917944496142;  // std dev = 2.11e-08, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | | else return -0.06874088819019908;  // std dev = 0.057, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */
%   else return -0.06842697784420282;  // std dev = 0.000, 266.000 (wgt'ed) examples reached here.  /* #neg=266 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( genre(A, E) )
%   | | then return -0.16143906332223165;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.1345108730521483;  // std dev = 0.011, 160.000 (wgt'ed) examples reached here.  /* #pos=160 */
%   | else if ( genre(A, F) )
%   | | then return -0.06269356353120005;  // std dev = 5.89e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.13373788718145938;  // std dev = 0.000, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | | else return -0.06486577979122798;  // std dev = 0.066, 94.000 (wgt'ed) examples reached here.  /* #neg=94 */
%   else return -0.06419184008202602;  // std dev = 1.01e-07, 287.000 (wgt'ed) examples reached here.  /* #neg=287 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063363
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.308 seconds
Total inference time: 1.056 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.06476
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.312 seconds
Refined model CLL: -0.06476


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063363
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 6.369000000000001 seconds
Total inference time: 1.056 seconds
AUC ROC: 1.0
Total revision time: 6.369000000000001
Best scored revision CLL: -0.06476


Dataset: 4_cora_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 00:04:36
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063363, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 6.369000000000001, 'Inference time': 1.056, 'parameter_0.6': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.125784, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 1.383, 'Inference time': 1.026}}


Amount of data: 0.8
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;haswordauthor(E, C).;true;true
7;true,true,true;author(F, E), title(F, D).;false;false
7;true,true,false;title(G, D), venue(G, B).;false;false
7;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
7;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
7;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, B).;false;true
8;true,true,false;title(F, D), venue(F, A).;false;false
8;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
8;true,false,false;haswordvenue(A, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
8;false,true;haswordauthor(M, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;true,true;author(F, E), venue(F, B).;true;true
9;true,true,true;samebib(F, G), venue(G, A).;false;false
9;true,true,false;author(H, E), venue(H, A).;false;false
9;true,false;haswordtitle(I, C).;true;true
9;true,false,true;title(J, I), venue(J, A).;false;false
9;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995091;  // std dev = 1.08e-06, 210.000 (wgt'ed) examples reached here.  /* #pos=210 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.17025084592753817;  // std dev = 5.806, 157.000 (wgt'ed) examples reached here.  /* #neg=108 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048738;  // std dev = 2.84e-07, 386.000 (wgt'ed) examples reached here.  /* #neg=386 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7115024872039821;  // std dev = 1.189, 212.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=210 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 7.45e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.13310496947143932;  // std dev = 5.869, 165.000 (wgt'ed) examples reached here.  /* #neg=116 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839224;  // std dev = 0.000, 390.000 (wgt'ed) examples reached here.  /* #neg=390 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1350771870157257;  // std dev = 0.176, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else if ( movie(E, A) )
%   | | then return 0.3756928014988613;  // std dev = 0.369, 366.000 (wgt'ed) examples reached here.  /* #neg=107 #pos=259 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360632;  // std dev = 0.000, 380.000 (wgt'ed) examples reached here.  /* #neg=380 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4543321747350021;  // std dev = 1.147, 213.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=210 */
%   | else if ( genre(A, E) )
%   | | then return -0.09953760506313049;  // std dev = 7.45e-09, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.05477864253228568;  // std dev = 5.854, 163.000 (wgt'ed) examples reached here.  /* #neg=114 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783592;  // std dev = 1.10e-08, 399.000 (wgt'ed) examples reached here.  /* #neg=399 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14535687173726233;  // std dev = 0.372, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else if ( genre(B, E) )
%   | | then return 0.3544177321781713;  // std dev = 0.000, 210.000 (wgt'ed) examples reached here.  /* #pos=210 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.007309256022925654;  // std dev = 6.008, 186.000 (wgt'ed) examples reached here.  /* #neg=137 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926065;  // std dev = 1.80e-07, 370.000 (wgt'ed) examples reached here.  /* #neg=370 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2607702513427437;  // std dev = 1.395, 217.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=210 */
%   | else if ( movie(E, A) )
%   | | then return 0.0140690615072275;  // std dev = 0.439, 185.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=49 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 1.35e-07, 411.000 (wgt'ed) examples reached here.  /* #neg=411 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.10946023683467376;  // std dev = 0.305, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else if ( genre(B, E) )
%   | | then return 0.2288414864773139;  // std dev = 0.000, 210.000 (wgt'ed) examples reached here.  /* #pos=210 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.010492265370315479;  // std dev = 5.978, 181.000 (wgt'ed) examples reached here.  /* #neg=132 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109143;  // std dev = 2.15e-07, 377.000 (wgt'ed) examples reached here.  /* #neg=377 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17766747921325707;  // std dev = 1.157, 216.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=210 */
%   | else if ( movie(E, B) )
%   | | then return 0.011144941008282606;  // std dev = 5.944, 191.000 (wgt'ed) examples reached here.  /* #neg=142 #pos=49 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.0732462257633377;  // std dev = 0.000, 383.000 (wgt'ed) examples reached here.  /* #neg=383 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.15584237698956516;  // std dev = 0.972, 214.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=210 */
%   | else if ( genre(A, E) )
%   | | then return -0.07367827693315467;  // std dev = 6.45e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.02213683819491903;  // std dev = 5.913, 171.000 (wgt'ed) examples reached here.  /* #neg=122 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420333;  // std dev = 0.000, 394.000 (wgt'ed) examples reached here.  /* #neg=394 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return -0.3608606596834977;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return 0.14464727627638657;  // std dev = 0.000, 210.000 (wgt'ed) examples reached here.  /* #pos=210 */
%   | | else if ( genre(A, G) )
%   | | | then return -0.0688050264185004;  // std dev = 6.97e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.022925816574019205;  // std dev = 5.891, 168.000 (wgt'ed) examples reached here.  /* #neg=119 #pos=49 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.06419184008202562;  // std dev = 1.90e-07, 389.000 (wgt'ed) examples reached here.  /* #neg=389 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.12602
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.68 seconds
Total inference time: 1.037 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.977079
   AUC PR    = 0.856436
   CLL	      = -0.129992
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.810811
   F1        = 0.895522


Total scoring time: 1.598 seconds
Parameter learned model CLL: -0.129992


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 13, 0], 'true,false,true': [1.08e-06, 0, 210], 'true,false,false,true': [5.806, 108, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.84e-07, 386, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.189, 2, 210], 'true,false,true': [7.45e-09, 14, 0], 'true,false,false,true': [5.869, 116, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 390, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.176, 15, 0], 'true,false,true': [0.369, 107, 259], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 380, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.147, 3, 210], 'true,false,true': [7.45e-09, 19, 0], 'true,false,false,true': [5.854, 114, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.1e-08, 399, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.372, 18, 0], 'true,false,true': [0.0, 0, 210], 'true,false,false,true': [6.008, 137, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.8e-07, 370, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [1.395, 7, 210], 'true,false,true': [0.439, 136, 49], 'true,false,false': [0.0, 0, 0], 'false,true': [1.35e-07, 411, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.305, 16, 0], 'true,false,true': [0.0, 0, 210], 'true,false,false,true': [5.978, 132, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.15e-07, 377, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [1.157, 6, 210], 'true,false,true': [5.944, 142, 49], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 383, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.972, 4, 210], 'true,false,true': [6.45e-09, 13, 0], 'true,false,false,true': [5.913, 122, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 394, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true,true,false': 'genre(A, G)'}, {'true,true,true,true': [0.0, 5, 0], 'true,true,true,false': [0.0, 0, 210], 'true,true,false,true': [6.97e-09, 12, 0], 'true,true,false,false': [5.891, 119, 49], 'true,false': [0.0, 0, 0], 'false': [1.9e-07, 389, 0]}]]
[{'': [0.21702908587257982, 2.0938921293448549e-16], 'true': [-1.2810265668751807e-17, 0.20767842956737745], 'true,false': [5.549000412602687e-15, 0.21469430808552148], 'true,false,false': [0.21469430808552148, nan], 'false': [2.0938921293448549e-16, nan]}, {'': [0.18287513296489794, -1.2753331154668464e-16], 'true': [0.006671242774012169, 0.19726904392526687], 'true,false': [3.96508223080413e-18, 0.20877869605142071], 'true,false,false': [0.20877869605142071, nan], 'false': [-1.2753331154668464e-16, nan]}, {'': [0.1408265375724454, -2.337311630789803e-17], 'true': [0.0020722176729482586, 0.13624208840658722], 'true,false': [0.13624208840658722, nan], 'false': [-2.337311630789803e-17, nan]}, {'': [0.13404539286444028, 1.2020459815490416e-16], 'true': [0.006179412140392007, 0.1905228612814263], 'true,false': [2.921639538487254e-18, 0.21024502239451912], 'true,false,false': [0.21024502239451912, nan], 'false': [1.2020459815490416e-16, nan]}, {'': [0.12093313992955769, 8.761760086230966e-17], 'true': [0.007692076967835782, 0.12115032956186927], 'true,false': [-3.0451831532575723e-16, 0.19403977338420728], 'true,false,false': [0.19403977338420728, nan], 'false': [8.761760086230966e-17, nan]}, {'': [0.10845648742160839, 4.4300870082366345e-17], 'true': [0.008970349901603928, 0.19229795203899788], 'true,false': [0.19229795203899788, nan], 'false': [4.4300870082366345e-17, nan]}, {'': [0.10154138225656942, 1.2250736823450003e-16], 'true': [0.005799750588908583, 0.10324689585817727], 'true,false': [-5.752012622819859e-16, 0.19742987088306146], 'true,false,false': [0.19742987088306146, nan], 'false': [1.2250736823450003e-16, nan]}, {'': [0.09700763922519455, -6.841060935027074e-17], 'true': [0.006195480164409595, 0.1849896777003776], 'true,false': [0.1849896777003776, nan], 'false': [-6.841060935027074e-17, nan]}, {'': [0.09539617003494473, -1.1102230246251565e-16], 'true': [0.004417728524062235, 0.1905977129142047], 'true,false': [3.2025664171879517e-18, 0.20443897267535288], 'true,false,false': [0.20443897267535288, nan], 'false': [-1.1102230246251565e-16, nan]}, {'': [0.09460946736521879, 9.247101798934466e-17], 'true': [0.09460946736521879, nan], 'true,true': [0.005804547041305177, 0.19334764592201045], 'true,true,false': [4.04768811061255e-18, 0.2065972222222225], 'true,true,true': [-2.2204460492503132e-17, -2.5799468381765544e-16]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, E).;true;true
9;true,true;genre(A, F).;true;true
9;true,false;genre(A, G).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995091;  // std dev = 1.08e-06, 210.000 (wgt'ed) examples reached here.  /* #pos=210 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.8581489350995122;  // std dev = 1.69e-07, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.14185106490048785;  // std dev = 0.000, 132.000 (wgt'ed) examples reached here.  /* #neg=132 */
%   else return -0.14185106490048752;  // std dev = 2.33e-07, 354.000 (wgt'ed) examples reached here.  /* #neg=354 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.7194734122109541;  // std dev = 2.53e-07, 83.000 (wgt'ed) examples reached here.  /* #pos=83 */
%   | | else return 0.7128724899395544;  // std dev = 0.074, 128.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=127 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.7194734122109547;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.12544463852839108;  // std dev = 7.88e-08, 114.000 (wgt'ed) examples reached here.  /* #neg=114 */
%   else return -0.12544463852839224;  // std dev = 0.000, 402.000 (wgt'ed) examples reached here.  /* #neg=402 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12182003409418335;  // std dev = 0.109, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else if ( actor(A), director(B) )
%   | | then return 0.5561654062065021;  // std dev = 0.013, 259.000 (wgt'ed) examples reached here.  /* #pos=259 */
%   | | else return -0.11231637819360622;  // std dev = 8.56e-08, 120.000 (wgt'ed) examples reached here.  /* #neg=120 */
%   else return -0.11231637819360633;  // std dev = 0.000, 376.000 (wgt'ed) examples reached here.  /* #neg=376 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.41731929080356245;  // std dev = 2.42e-07, 83.000 (wgt'ed) examples reached here.  /* #pos=83 */
%   | | else if ( actor(A) )
%   | | | then return 0.41892526746968345;  // std dev = 3.48e-07, 127.000 (wgt'ed) examples reached here.  /* #pos=127 */
%   | | | else return -0.20573983966219073;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(A, E) )
%   | | then return -0.10073216637928105;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.4173192908035617;  // std dev = 5.96e-08, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.10159632948783635;  // std dev = 0.000, 117.000 (wgt'ed) examples reached here.  /* #neg=117 */
%   else return -0.10159632948783591;  // std dev = 2.25e-07, 403.000 (wgt'ed) examples reached here.  /* #neg=403 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09744569509618668;  // std dev = 0.079, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else if ( genre(B, E) )
%   | | then return 0.3212386637473178;  // std dev = 0.008, 210.000 (wgt'ed) examples reached here.  /* #pos=210 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.32058012927241153;  // std dev = 9.88e-08, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.09269127618926089;  // std dev = 6.41e-08, 114.000 (wgt'ed) examples reached here.  /* #neg=114 */
%   else return -0.09269127618926078;  // std dev = 1.63e-07, 386.000 (wgt'ed) examples reached here.  /* #neg=386 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.25544673695714526;  // std dev = 0.007, 259.000 (wgt'ed) examples reached here.  /* #pos=259 */
%   | else return -0.08958289813768695;  // std dev = 0.207, 135.000 (wgt'ed) examples reached here.  /* #neg=135 */
%   else return -0.08518475138839678;  // std dev = 1.15e-07, 343.000 (wgt'ed) examples reached here.  /* #neg=343 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09371457287395812;  // std dev = 0.140, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | else if ( genre(B, E) )
%   | | then return 0.21002579061746732;  // std dev = 0.006, 210.000 (wgt'ed) examples reached here.  /* #pos=210 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.20963384520341508;  // std dev = 4.21e-08, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.07845816765017406;  // std dev = 0.000, 121.000 (wgt'ed) examples reached here.  /* #neg=121 */
%   else return -0.07877675473109143;  // std dev = 9.42e-08, 369.000 (wgt'ed) examples reached here.  /* #neg=369 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.17723873298831733;  // std dev = 0.005, 259.000 (wgt'ed) examples reached here.  /* #pos=259 */
%   | else return -0.07689101103186506;  // std dev = 0.177, 127.000 (wgt'ed) examples reached here.  /* #neg=127 */
%   else return -0.07324622576333711;  // std dev = 7.45e-08, 347.000 (wgt'ed) examples reached here.  /* #neg=347 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.152508953521563;  // std dev = 0.000, 83.000 (wgt'ed) examples reached here.  /* #pos=83 */
%   | | else if ( actor(A) )
%   | | | then return 0.15315567126692778;  // std dev = 8.94e-08, 127.000 (wgt'ed) examples reached here.  /* #pos=127 */
%   | | | else return -0.12851280463726006;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(A, E) )
%   | | then return -0.06614436976313597;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.15264477758613307;  // std dev = 5.16e-08, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.06793622999480062;  // std dev = 2.79e-08, 127.000 (wgt'ed) examples reached here.  /* #neg=127 */
%   else return -0.06842697784420332;  // std dev = 0.000, 388.000 (wgt'ed) examples reached here.  /* #neg=388 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( genre(A, E) )
%   | | then return -0.11479356691977022;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.1341289171893391;  // std dev = 0.004, 210.000 (wgt'ed) examples reached here.  /* #pos=210 */
%   | else if ( genre(A, F) )
%   | | then return -0.06217406262337699;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.1339296746380514;  // std dev = 2.36e-08, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.06375867629981;  // std dev = 5.32e-08, 113.000 (wgt'ed) examples reached here.  /* #neg=113 */
%   else return -0.06419184008202569;  // std dev = 1.75e-07, 369.000 (wgt'ed) examples reached here.  /* #neg=369 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063347
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.347 seconds
Total inference time: 0.998 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064365
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.482 seconds
Refined model CLL: -0.064365


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063347
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 7.107 seconds
Total inference time: 0.998 seconds
AUC ROC: 1.0
Total revision time: 7.107
Best scored revision CLL: -0.064365


Dataset: 4_cora_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 00:04:45
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063347, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 7.107, 'Inference time': 0.998, 'parameter_0.8': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.12602, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 1.68, 'Inference time': 1.037}}


Amount of data: 1.0
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;haswordauthor(E, C).;true;true
7;true,true,true;author(F, E), title(F, D).;false;false
7;true,true,false;title(G, D), venue(G, B).;false;false
7;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
7;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
7;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, B).;false;true
8;true,true,false;title(F, D), venue(F, A).;false;false
8;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
8;true,false,false;haswordvenue(A, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
8;false,true;haswordauthor(M, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;true,true;author(F, E), venue(F, B).;true;true
9;true,true,true;samebib(F, G), venue(G, A).;false;false
9;true,true,false;author(H, E), venue(H, A).;false;false
9;true,false;haswordtitle(I, C).;true;true
9;true,false,true;title(J, I), venue(J, A).;false;false
9;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048774;  // std dev = 1.05e-08, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995086;  // std dev = 1.08e-06, 265.000 (wgt'ed) examples reached here.  /* #pos=265 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.14180278125335954;  // std dev = 6.501, 208.000 (wgt'ed) examples reached here.  /* #neg=149 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048788;  // std dev = 0.000, 516.000 (wgt'ed) examples reached here.  /* #neg=516 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7007667395008612;  // std dev = 2.047, 271.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=265 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.14569533452580674;  // std dev = 6.400, 193.000 (wgt'ed) examples reached here.  /* #neg=134 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839224;  // std dev = 0.000, 458.000 (wgt'ed) examples reached here.  /* #neg=458 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14729479113268446;  // std dev = 0.208, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else if ( movie(E, A) )
%   | | then return 0.34571112624854855;  // std dev = 0.380, 485.000 (wgt'ed) examples reached here.  /* #neg=161 #pos=324 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360595;  // std dev = 0.000, 462.000 (wgt'ed) examples reached here.  /* #neg=462 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.463851762410813;  // std dev = 1.337, 269.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=265 */
%   | else if ( genre(A, E) )
%   | | then return -0.09844788799548622;  // std dev = 5.27e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.0730907561388227;  // std dev = 6.378, 190.000 (wgt'ed) examples reached here.  /* #neg=131 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783553;  // std dev = 1.45e-08, 467.000 (wgt'ed) examples reached here.  /* #neg=467 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11776136117252832;  // std dev = 0.311, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else if ( genre(B, E) )
%   | | then return 0.36158796250316905;  // std dev = 1.88e-07, 265.000 (wgt'ed) examples reached here.  /* #pos=265 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.030030196516670764;  // std dev = 6.513, 210.000 (wgt'ed) examples reached here.  /* #neg=151 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926105;  // std dev = 1.15e-07, 426.000 (wgt'ed) examples reached here.  /* #neg=426 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.27284418391331466;  // std dev = 1.204, 270.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=265 */
%   | else if ( movie(E, A) )
%   | | then return 0.010975970451898067;  // std dev = 0.431, 231.000 (wgt'ed) examples reached here.  /* #neg=172 #pos=59 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 1.41e-07, 487.000 (wgt'ed) examples reached here.  /* #neg=487 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.13695013212824783;  // std dev = 0.411, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else if ( genre(B, E) )
%   | | then return 0.23095782219073172;  // std dev = 2.73e-07, 265.000 (wgt'ed) examples reached here.  /* #pos=265 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.022244234755343418;  // std dev = 6.513, 210.000 (wgt'ed) examples reached here.  /* #neg=151 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109179;  // std dev = 0.000, 456.000 (wgt'ed) examples reached here.  /* #neg=456 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1818641328000337;  // std dev = 1.163, 271.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=265 */
%   | else if ( movie(E, B) )
%   | | then return 0.034538442639955924;  // std dev = 6.419, 206.000 (wgt'ed) examples reached here.  /* #neg=147 #pos=59 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.07324622576333703;  // std dev = 1.19e-07, 476.000 (wgt'ed) examples reached here.  /* #neg=476 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1602846356450366;  // std dev = 0.848, 268.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=265 */
%   | else if ( genre(A, E) )
%   | | then return -0.07431401803889835;  // std dev = 2.63e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.009874757371184237;  // std dev = 6.519, 211.000 (wgt'ed) examples reached here.  /* #neg=152 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420343;  // std dev = 0.000, 433.000 (wgt'ed) examples reached here.  /* #neg=433 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return -0.36256561184989883;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.14479561382328676;  // std dev = 0.000, 265.000 (wgt'ed) examples reached here.  /* #pos=265 */
%   | | else if ( genre(A, G) )
%   | | | then return -0.06936082031053463;  // std dev = 6.45e-09, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | | else return 0.005299631830178415;  // std dev = 6.531, 213.000 (wgt'ed) examples reached here.  /* #neg=154 #pos=59 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.0641918400820254;  // std dev = 2.44e-07, 484.000 (wgt'ed) examples reached here.  /* #neg=484 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.125859
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.816 seconds
Total inference time: 1.028 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.977686
   AUC PR    = 0.861626
   CLL	      = -0.1303
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.817901
   F1        = 0.89983


Total scoring time: 1.926 seconds
Parameter learned model CLL: -0.1303


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [1.05e-08, 21, 0], 'true,false,true': [1.08e-06, 0, 265], 'true,false,false,true': [6.501, 149, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 516, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [2.047, 6, 265], 'true,false,true': [0.0, 18, 0], 'true,false,false,true': [6.4, 134, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 458, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.208, 16, 0], 'true,false,true': [0.38, 161, 324], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 462, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.337, 4, 265], 'true,false,true': [5.27e-09, 16, 0], 'true,false,false,true': [6.378, 131, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.45e-08, 467, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.311, 21, 0], 'true,false,true': [1.88e-07, 0, 265], 'true,false,false,true': [6.513, 151, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.15e-07, 426, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [1.204, 5, 265], 'true,false,true': [0.431, 172, 59], 'true,false,false': [0.0, 0, 0], 'false,true': [1.41e-07, 487, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.411, 17, 0], 'true,false,true': [2.73e-07, 0, 265], 'true,false,false,true': [6.513, 151, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 456, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [1.163, 6, 265], 'true,false,true': [6.419, 147, 59], 'true,false,false': [0.0, 0, 0], 'false,true': [1.19e-07, 476, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.848, 3, 265], 'true,false,true': [2.63e-09, 11, 0], 'true,false,false,true': [6.519, 152, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 433, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true,true,false': 'genre(A, G)'}, {'true,true,true,true': [0.0, 4, 0], 'true,true,true,false': [0.0, 0, 265], 'true,true,false,true': [6.45e-09, 18, 0], 'true,true,false,false': [6.531, 154, 59], 'true,false': [0.0, 0, 0], 'false': [2.44e-07, 484, 0]}]]
[{'': [0.22570440426822544, -9.294890438722241e-17], 'true': [5.28677630773884e-18, 0.2157789110933344], 'true,false': [4.397321081685148e-15, 0.20319434171597683], 'true,false,false': [0.20319434171597683, nan], 'false': [-9.294890438722241e-17, nan]}, {'': [0.17847225880772766, -1.1829450568058437e-16], 'true': [0.015455665838146719, 0.19987746925510896], 'true,false': [0.0, 0.21224730865257901], 'true,false,false': [0.21224730865257901, nan], 'false': [-1.1829450568058437e-16, nan]}, {'': [0.14731883415750543, -1.3457248783335231e-17], 'true': [0.0026916766178206528, 0.14432780910884938], 'true,false': [0.14432780910884938, nan], 'false': [-1.3457248783335231e-17, nan]}, {'': [0.13042042666049966, 2.0920690828054342e-16], 'true': [0.006645383858295492, 0.19957858180427587], 'true,false': [1.734723475976807e-18, 0.21409972299168836], 'true,false,false': [0.21409972299168836, nan], 'false': [2.0920690828054342e-16, nan]}, {'': [0.11618296164387887, 3.1273888017610045e-17], 'true': [0.0046078932946909045, 0.1164274559687904], 'true,false': [1.340646671245472e-16, 0.2020181405895705], 'true,false,false': [0.2020181405895705, nan], 'false': [3.1273888017610045e-17, nan]}, {'': [0.1056716233881537, 4.1034937255139254e-17], 'true': [0.005371294362414108, 0.1859492082697189], 'true,false': [0.1859492082697189, nan], 'false': [4.1034937255139254e-17, nan]}, {'': [0.09947788968601175, -6.817158923136926e-18], 'true': [0.009930404751637974, 0.10005761460718117], 'true,false': [2.815358009615491e-16, 0.20201814058957143], 'true,false,false': [0.20201814058957143, nan], 'false': [-6.817158923136926e-18, nan]}, {'': [0.09453797817828745, 2.9854736796642864e-17], 'true': [0.004993048749959959, 0.20000610354649057], 'true,false': [0.20000610354649057, nan], 'false': [2.9854736796642864e-17, nan]}, {'': [0.09427853179953921, -1.261500526825813e-16], 'true': [0.0026814130031678637, 0.1917859088929534], 'true,false': [6.30808536718839e-19, 0.20143303160306353], 'true,false,false': [0.20143303160306353, nan], 'false': [-1.261500526825813e-16, nan]}, {'': [0.09224597491733413, 1.2340908827444921e-16], 'true': [0.09224597491733413, nan], 'true,true': [0.003770820443548215, 0.18506404310215271], 'true,true,false': [2.3129646346357427e-18, 0.2002689060812438], 'true,true,true': [0.0, -2.010970006868208e-17]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, E).;true;true
9;true,true;genre(A, F).;true;true
9;true,false;genre(A, G).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995086;  // std dev = 1.08e-06, 265.000 (wgt'ed) examples reached here.  /* #pos=265 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.8581489350995125;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.1418510649004881;  // std dev = 0.000, 159.000 (wgt'ed) examples reached here.  /* #neg=159 */
%   else return -0.14185106490048777;  // std dev = 0.000, 503.000 (wgt'ed) examples reached here.  /* #neg=503 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.7194734122109546;  // std dev = 0.000, 102.000 (wgt'ed) examples reached here.  /* #pos=102 */
%   | | else if ( actor(A) )
%   | | | then return 0.7194734122109564;  // std dev = 0.000, 163.000 (wgt'ed) examples reached here.  /* #pos=163 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.7194734122109543;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.12544463852839122;  // std dev = 6.66e-08, 146.000 (wgt'ed) examples reached here.  /* #neg=146 */
%   else return -0.12544463852839227;  // std dev = 0.000, 485.000 (wgt'ed) examples reached here.  /* #neg=485 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5553664367462833;  // std dev = 5.72e-07, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.11231637819360643;  // std dev = 5.58e-08, 171.000 (wgt'ed) examples reached here.  /* #neg=171 */
%   else return -0.11231637819360583;  // std dev = 0.000, 495.000 (wgt'ed) examples reached here.  /* #neg=495 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.41556204312956824;  // std dev = 0.518, 266.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=265 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783631;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.4175135841583105;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.10159632948783645;  // std dev = 0.000, 155.000 (wgt'ed) examples reached here.  /* #neg=155 */
%   else return -0.1015963294878354;  // std dev = 3.50e-07, 499.000 (wgt'ed) examples reached here.  /* #neg=499 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09968160881972206;  // std dev = 0.087, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | else if ( genre(B, E) )
%   | | then return 0.32113715028428347;  // std dev = 0.000, 265.000 (wgt'ed) examples reached here.  /* #pos=265 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.3207118471601497;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.09269127618926067;  // std dev = 8.30e-08, 172.000 (wgt'ed) examples reached here.  /* #neg=172 */
%   else return -0.09269127618926144;  // std dev = 0.000, 498.000 (wgt'ed) examples reached here.  /* #neg=498 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.25540958457580115;  // std dev = 0.002, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.08653288879142541;  // std dev = 0.108, 176.000 (wgt'ed) examples reached here.  /* #neg=176 */
%   else return -0.08518475138839678;  // std dev = 1.43e-07, 500.000 (wgt'ed) examples reached here.  /* #neg=500 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.0839675916368075;  // std dev = 0.075, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | else if ( genre(B, E) )
%   | | then return 0.20997144218821964;  // std dev = 0.000, 265.000 (wgt'ed) examples reached here.  /* #pos=265 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.20971837667020607;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.07867897462264206;  // std dev = 0.000, 159.000 (wgt'ed) examples reached here.  /* #neg=159 */
%   else return -0.07877675473109164;  // std dev = 7.30e-08, 434.000 (wgt'ed) examples reached here.  /* #neg=434 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.1772194433140092;  // std dev = 0.001, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.07331429151908259;  // std dev = 0.043, 175.000 (wgt'ed) examples reached here.  /* #neg=175 */
%   else return -0.07324622576333695;  // std dev = 1.44e-07, 492.000 (wgt'ed) examples reached here.  /* #neg=492 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14898262893471395;  // std dev = 0.519, 269.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=265 */
%   | else if ( genre(A, E) )
%   | | then return -0.06756528694194655;  // std dev = 7.45e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.15270232774465084;  // std dev = 5.96e-08, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.06834298313219303;  // std dev = 1.49e-08, 139.000 (wgt'ed) examples reached here.  /* #neg=139 */
%   else return -0.06842697784420351;  // std dev = 0.000, 480.000 (wgt'ed) examples reached here.  /* #neg=480 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( genre(A, E) )
%   | | then return -0.12362256246520908;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.13455496642071857;  // std dev = 0.000, 265.000 (wgt'ed) examples reached here.  /* #pos=265 */
%   | else if ( genre(A, F) )
%   | | then return -0.06343102483287633;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.13397460707310224;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.06411772631217545;  // std dev = 0.000, 157.000 (wgt'ed) examples reached here.  /* #neg=157 */
%   else return -0.06419184008202541;  // std dev = 2.42e-07, 480.000 (wgt'ed) examples reached here.  /* #neg=480 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063464
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.828 seconds
Total inference time: 1.078 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.06453
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.726 seconds
Refined model CLL: -0.06453


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063464
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 8.296 seconds
Total inference time: 1.078 seconds
AUC ROC: 1.0
Total revision time: 8.296
Best scored revision CLL: -0.06453


Dataset: 4_cora_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 00:04:56
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063464, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 8.296, 'Inference time': 1.078, 'parameter_1.0': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.125859, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 1.816, 'Inference time': 1.028}}


Starting fold 3

Target train facts examples: 737
Target train pos examples: 204
Target train neg examples: 10693

Target test facts examples: 341
Target test pos	 examples: 178
Target test neg examples: 3543

Amount of data: 0.2
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;haswordauthor(E, C).;true;true
7;true,true,true;author(F, E), title(F, D).;false;false
7;true,true,false;title(G, D), venue(G, B).;false;false
7;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
7;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
7;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, B).;false;true
8;true,true,false;title(F, D), venue(F, A).;false;false
8;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
8;true,false,false;haswordvenue(A, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
8;false,true;haswordauthor(M, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;true,true;author(F, E), venue(F, B).;true;true
9;true,true,true;samebib(F, G), venue(G, A).;false;false
9;true,true,false;author(H, E), venue(H, A).;false;false
9;true,false;haswordtitle(I, C).;true;true
9;true,false,true;title(J, I), venue(J, A).;false;false
9;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995115;  // std dev = 2.60e-07, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.06185106490048781;  // std dev = 1.356, 25.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048766;  // std dev = 5.96e-08, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.719473412210955;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.08773478109645007;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839152;  // std dev = 0.000, 72.000 (wgt'ed) examples reached here.  /* #neg=72 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.3752435384487309;  // std dev = 0.323, 55.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=40 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360626;  // std dev = 4.71e-08, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4618577752075466;  // std dev = 4.21e-08, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | else if ( genre(A, E) )
%   | | then return -0.11231637819360639;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.08688393955263667;  // std dev = 1.333, 18.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783623;  // std dev = 5.10e-09, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.10159632948783628;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.3509824214707375;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.1104854061208103;  // std dev = 1.361, 27.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926107;  // std dev = 0.000, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.27573719786564815;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | else if ( movie(E, A) )
%   | | then return -0.08866840484041691;  // std dev = 0.266, 26.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839679;  // std dev = 1.97e-08, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.0854987705474947;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.22418486182368702;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.09584027202917234;  // std dev = 1.371, 33.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109173;  // std dev = 2.36e-08, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18760802447403901;  // std dev = 4.21e-08, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | else if ( movie(E, B) )
%   | | then return -0.06812730253274854;  // std dev = 1.359, 28.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.07324622576333704;  // std dev = 1.29e-08, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.16067205194854645;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | else if ( genre(A, E) )
%   | | then return -0.07422687698149509;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.040766582973787574;  // std dev = 1.345, 21.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.0684269778442027;  // std dev = 2.08e-09, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.14016644523815577;  // std dev = 2.58e-08, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | else if ( genre(A, G) )
%   | | | then return -0.06928467173546507;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return -0.03604689590068902;  // std dev = 1.345, 21.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=2 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.06419184008202625;  // std dev = 0.000, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */


Results
   AUC ROC   = 0.97199
   AUC PR    = 0.81824
   CLL	      = -0.110687
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.840391


Total learning time: 0.817 seconds
Total inference time: 1.024 seconds
AUC ROC: 0.97199


Results scoring model
   AUC ROC   = 0.993382
   AUC PR    = 0.966034
   CLL	      = -0.084823
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.95
   F1        = 0.974359


Total scoring time: 0.982 seconds
Parameter learned model CLL: -0.084823


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 2, 0], 'true,false,true': [2.6e-07, 0, 38], 'true,false,false,true': [1.356, 23, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.96e-08, 58, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 38], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [1.247, 7, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 72, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.323, 15, 40], 'true,false,false': [0.0, 0, 0], 'false,true': [4.71e-08, 62, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [4.21e-08, 0, 38], 'true,false,true': [0.0, 2, 0], 'true,false,false,true': [1.333, 16, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.1e-09, 56, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 2, 0], 'true,false,true': [0.0, 0, 38], 'true,false,false,true': [1.361, 25, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 66, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 38], 'true,false,true': [0.266, 24, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [1.97e-08, 52, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.0, 0, 38], 'true,false,false,true': [1.371, 31, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.36e-08, 60, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [4.21e-08, 0, 38], 'true,false,true': [1.359, 26, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [1.29e-08, 45, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 38], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [1.345, 19, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.08e-09, 52, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true,true,false': 'genre(A, G)'}, {'true,true,true,true': [0.0, 0, 0], 'true,true,true,false': [2.58e-08, 0, 38], 'true,true,false,true': [0.0, 3, 0], 'true,true,false,false': [1.345, 19, 2], 'true,false': [0.0, 0, 0], 'false': [0.0, 52, 0]}]]
[{'': [0.23668639053254525, 6.125368411725002e-17], 'true': [0.0, 0.2317964222726136], 'true,false': [1.7763568394002505e-15, 0.07360000000000004], 'true,false,false': [0.07360000000000004, nan], 'false': [6.125368411725002e-17, nan]}, {'': [0.10359956946849642, -3.0839528461809905e-17], 'true': [-7.47939721852737e-16, 0.1596456474011981], 'true,false': [0.0, 0.1728395061728395], 'true,false,false': [0.1728395061728395, nan], 'false': [-3.0839528461809905e-17, nan]}, {'': [0.10460802165392724, 3.581364595565021e-17], 'true': [nan, 0.10460802165392724], 'true,false': [0.10460802165392724, nan], 'false': [3.581364595565021e-17, nan]}, {'': [0.09933237759335115, 2.577303450022685e-17], 'true': [4.674623261579606e-17, 0.08894710169305932], 'true,false': [0.0, 0.09876543209876545], 'true,false,false': [0.09876543209876545, nan], 'false': [2.577303450022685e-17, nan]}, {'': [0.07978047566022584, -1.6821560979169039e-18], 'true': [0.0, 0.08020347756825709], 'true,false': [-1.1686558153949016e-16, 0.0685871056241427], 'true,false,false': [0.0685871056241427, nan], 'false': [-1.6821560979169039e-18, nan]}, {'': [0.060781011508183894, 7.472654973438553e-18], 'true': [0.0, 0.07076987810898637], 'true,false': [0.07076987810898637, nan], 'false': [7.472654973438553e-18, nan]}, {'': [0.05157221815420828, 9.25185853854297e-18], 'true': [0.0, 0.0519388438030262], 'true,false': [-9.933574430856664e-17, 0.05693296602387508], 'true,false,false': [0.05693296602387508, nan], 'false': [9.25185853854297e-18, nan]}, {'': [0.043950710587952434, 3.7007434154171884e-18], 'true': [4.674623261579606e-17, 0.0659432371012876], 'true,false': [0.0659432371012876, nan], 'false': [3.7007434154171884e-18, nan]}, {'': [0.03974237475313869, 4.270088556250602e-18], 'true': [-5.551115123125783e-17, 0.0822996595584721], 'true,false': [0.0, 0.08616780045351466], 'true,false,false': [0.08616780045351466, nan], 'false': [4.270088556250602e-18, nan]}, {'': [0.03695110308092676, -2.6688053476566264e-18], 'true': [0.03695110308092676, nan], 'true,true': [1.7529837230923523e-17, 0.07551765739990503], 'true,true,false': [0.0, 0.08616780045351469], 'true,true,true': [nan, 1.7529837230923523e-17]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, E).;true;true
9;true,false;genre(A, G).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995115;  // std dev = 2.60e-07, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | else if ( female(A) )
%   | | | then return 0.011995088945666036;  // std dev = 1.301, 13.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   else return -0.14185106490048766;  // std dev = 6.66e-08, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.719473412210955;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( female(A), actor(B) )
%   | | | then return -0.14331750143463115;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | | else return 0.025651844101417878;  // std dev = 1.278, 13.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
%   else return -0.12544463852839158;  // std dev = 0.000, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.12631239294224028;  // std dev = 0.021, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | else if ( female(A) )
%   | | then return 0.5904414583458897;  // std dev = 0.096, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0.5553664367462846;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   else return -0.11231637819360635;  // std dev = 1.49e-08, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.41415649452948883;  // std dev = 0.026, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | else if ( genre(A, E) )
%   | | then return -0.10032595445483022;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( female(A) )
%   | | | then return 0.13722353767078863;  // std dev = 1.048, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | | else return -0.11481123066625615;  // std dev = 5.27e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   else return -0.10159632948783617;  // std dev = 4.47e-08, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09162658786364086;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.3184428231187815;  // std dev = 0.023, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | else if ( female(A) )
%   | | | then return 0.1607307809571664;  // std dev = 1.000, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return -0.10364891099121619;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   else return -0.09269127618926107;  // std dev = 0.000, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.25362695319755696;  // std dev = 0.020, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | else if ( female(A), actor(B) )
%   | | then return -0.14683036108848338;  // std dev = 1.05e-08, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( female(B) )
%   | | | then return -0.09440725643142488;  // std dev = 1.86e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.02866593071508576;  // std dev = 1.041, 13.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
%   else return -0.08518475138839679;  // std dev = 1.83e-08, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08651930234348017;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.20866771920617128;  // std dev = 0.017, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | else if ( female(A), actor(B) )
%   | | | then return -0.129373347918;  // std dev = 1.05e-08, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return 0.009991828610879461;  // std dev = 1.048, 15.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=2 */
%   else return -0.07877675473109179;  // std dev = 0.000, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17629799864876333;  // std dev = 0.015, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | else if ( actor(A), actor(B) )
%   | | then return -0.10522283064937943;  // std dev = 0.043, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | else if ( female(B) )
%   | | | then return -0.07132663903764506;  // std dev = 1.32e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.3087764072205359;  // std dev = 0.777, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else return -0.07324622576333704;  // std dev = 7.45e-09, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.15213875738962265;  // std dev = 0.014, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | else if ( genre(A, E) )
%   | | then return -0.10577553173485199;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( female(A), actor(B) )
%   | | | then return -0.1051651667501244;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.03230104129128323;  // std dev = 0.924, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   else return -0.06842697784420268;  // std dev = 1.97e-08, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13353508913267095;  // std dev = 0.012, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | else if ( genre(A, E) )
%   | | then return -0.06044972124326998;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( female(A) )
%   | | | then return 0.1091205095039935;  // std dev = 0.857, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | | else return -0.08827458654304382;  // std dev = 0.016, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   else return -0.06419184008202625;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */


Results
   AUC ROC   = 0.995299
   AUC PR    = 0.922374
   CLL	      = -0.097018
   Precision = 0.693548 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.708791


Total learning time: 1.186 seconds
Total inference time: 0.991 seconds
AUC ROC: 0.995299


Results scoring model
   AUC ROC   = 0.999977
   AUC PR    = 0.99875
   CLL	      = -0.073798
   Precision = 0.974359 at threshold = 0.5
   Recall    = 0.95
   F1        = 0.962025


Total scoring time: 0.854 seconds
Refined model CLL: -0.073798


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.995299
   AUC PR    = 0.922374
   CLL	      = -0.097018
   Precision = 0.693548 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.708791


Total learning time: 3.839 seconds
Total inference time: 0.991 seconds
AUC ROC: 0.995299
Total revision time: 3.839
Best scored revision CLL: -0.073798


Dataset: 4_cora_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 00:05:03
{'AUC ROC': 0.995299, 'AUC PR': 0.922374, 'CLL': -0.097018, 'Precision': [0.693548, 0.5], 'Recall': 0.724719, 'F1': 0.708791, 'Learning time': 3.839, 'Inference time': 0.991, 'parameter_0.2': {'AUC ROC': 0.97199, 'AUC PR': 0.81824, 'CLL': -0.110687, 'Precision': [1.0, 0.5], 'Recall': 0.724719, 'F1': 0.840391, 'Learning time': 0.817, 'Inference time': 1.024}}


Amount of data: 0.4
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;haswordauthor(E, C).;true;true
7;true,true,true;author(F, E), title(F, D).;false;false
7;true,true,false;title(G, D), venue(G, B).;false;false
7;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
7;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
7;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, B).;false;true
8;true,true,false;title(F, D), venue(F, A).;false;false
8;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
8;true,false,false;haswordvenue(A, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
8;false,true;haswordauthor(M, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;true,true;author(F, E), venue(F, B).;true;true
9;true,true,true;samebib(F, G), venue(G, A).;false;false
9;true,true,false;author(H, E), venue(H, A).;false;false
9;true,false;haswordtitle(I, C).;true;true
9;true,false,true;title(J, I), venue(J, A).;false;false
9;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995127;  // std dev = 0.000, 75.000 (wgt'ed) examples reached here.  /* #pos=75 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.0168510649004877;  // std dev = 2.291, 48.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=6 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048766;  // std dev = 7.30e-08, 114.000 (wgt'ed) examples reached here.  /* #neg=114 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.719473412210954;  // std dev = 2.06e-07, 75.000 (wgt'ed) examples reached here.  /* #pos=75 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.009377366769860984;  // std dev = 2.284, 46.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=6 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839133;  // std dev = 0.000, 107.000 (wgt'ed) examples reached here.  /* #neg=107 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( movie(E, A) )
%   | | then return 0.357500674157922;  // std dev = 0.337, 117.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=81 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360617;  // std dev = 9.42e-08, 124.000 (wgt'ed) examples reached here.  /* #neg=124 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4662705490315585;  // std dev = 0.000, 75.000 (wgt'ed) examples reached here.  /* #pos=75 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.0836877897185787;  // std dev = 2.319, 58.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=6 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783637;  // std dev = 0.000, 121.000 (wgt'ed) examples reached here.  /* #neg=121 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926096;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.35402493156053544;  // std dev = 1.93e-07, 75.000 (wgt'ed) examples reached here.  /* #pos=75 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.04140432853829616;  // std dev = 2.280, 45.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=6 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.0926912761892608;  // std dev = 7.60e-08, 126.000 (wgt'ed) examples reached here.  /* #neg=126 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2777964241284785;  // std dev = 0.000, 75.000 (wgt'ed) examples reached here.  /* #pos=75 */
%   | else if ( movie(E, A) )
%   | | then return -0.047026961525817076;  // std dev = 0.318, 52.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=6 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.0851847513883968;  // std dev = 6.05e-08, 110.000 (wgt'ed) examples reached here.  /* #neg=110 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08159079127737684;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.22561923384094684;  // std dev = 9.42e-08, 75.000 (wgt'ed) examples reached here.  /* #pos=75 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.04470280740011208;  // std dev = 2.301, 51.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=6 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109154;  // std dev = 7.22e-08, 127.000 (wgt'ed) examples reached here.  /* #neg=127 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1886457021631768;  // std dev = 9.88e-08, 75.000 (wgt'ed) examples reached here.  /* #pos=75 */
%   | else if ( movie(E, B) )
%   | | then return -0.013649810607622893;  // std dev = 2.260, 46.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=6 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.0732462257633371;  // std dev = 4.59e-08, 113.000 (wgt'ed) examples reached here.  /* #neg=113 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1614498443600604;  // std dev = 7.60e-08, 75.000 (wgt'ed) examples reached here.  /* #pos=75 */
%   | else if ( genre(A, E) )
%   | | then return -0.07473253893247116;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.01820621338225453;  // std dev = 2.276, 44.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=6 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420265;  // std dev = 5.10e-09, 111.000 (wgt'ed) examples reached here.  /* #neg=111 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.14076753013570925;  // std dev = 2.11e-08, 75.000 (wgt'ed) examples reached here.  /* #pos=75 */
%   | | else if ( genre(A, G) )
%   | | | then return -0.06972639575740498;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return -0.021770849191297473;  // std dev = 2.284, 46.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=6 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.06419184008202626;  // std dev = 2.98e-08, 109.000 (wgt'ed) examples reached here.  /* #neg=109 */


Results
   AUC ROC   = 0.97199
   AUC PR    = 0.81824
   CLL	      = -0.112233
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.840391


Total learning time: 0.975 seconds
Total inference time: 1.009 seconds
AUC ROC: 0.97199


Results scoring model
   AUC ROC   = 0.990414
   AUC PR    = 0.941692
   CLL	      = -0.091634
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.925926
   F1        = 0.961538


Total scoring time: 1.088 seconds
Parameter learned model CLL: -0.091634


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.0, 0, 75], 'true,false,false,true': [2.291, 42, 6], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.3e-08, 114, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [2.06e-07, 0, 75], 'true,false,true': [0.0, 3, 0], 'true,false,false,true': [2.284, 40, 6], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 107, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 4, 0], 'true,false,true': [0.337, 36, 81], 'true,false,false': [0.0, 0, 0], 'false,true': [9.42e-08, 124, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 75], 'true,false,true': [0.0, 4, 0], 'true,false,false,true': [2.319, 52, 6], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 121, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 2, 0], 'true,false,true': [1.93e-07, 0, 75], 'true,false,false,true': [2.28, 39, 6], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.6e-08, 126, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 75], 'true,false,true': [0.318, 46, 6], 'true,false,false': [0.0, 0, 0], 'false,true': [6.05e-08, 110, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 2, 0], 'true,false,true': [9.42e-08, 0, 75], 'true,false,false,true': [2.301, 45, 6], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.22e-08, 127, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [9.88e-08, 0, 75], 'true,false,true': [2.26, 40, 6], 'true,false,false': [0.0, 0, 0], 'false,true': [4.59e-08, 113, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [7.6e-08, 0, 75], 'true,false,true': [0.0, 5, 0], 'true,false,false,true': [2.276, 38, 6], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.1e-09, 111, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true,true,false': 'genre(A, G)'}, {'true,true,true,true': [0.0, 0, 0], 'true,true,true,false': [2.11e-08, 0, 75], 'true,true,false,true': [0.0, 2, 0], 'true,true,false,false': [2.284, 40, 6], 'true,false': [0.0, 0, 0], 'false': [2.98e-08, 109, 0]}]]
[{'': [0.22652185223725438, 4.674623261579606e-17], 'true': [0.0, 0.22486615110053693], 'true,false': [-1.4210854715202005e-15, 0.10937500000000022], 'true,false,false': [0.10937500000000022, nan], 'false': [4.674623261579606e-17, nan]}, {'': [0.1718366935232295, -6.22554967079527e-18], 'true': [5.684341886080802e-16, 0.10725166860065909], 'true,false': [0.0, 0.1134215500945181], 'true,false,false': [0.1134215500945181, nan], 'false': [-6.22554967079527e-18, nan]}, {'': [0.11715963192324666, 7.162729191130042e-17], 'true': [0.0, 0.11386829396439115], 'true,false': [0.11386829396439115, nan], 'false': [7.162729191130042e-17, nan]}, {'': [0.11452168039275042, -2.3856031934094273e-17], 'true': [-4.7369515717340015e-17, 0.08678242649431228], 'true,false': [0.0, 0.09274673008323403], 'true,false,false': [0.09274673008323403, nan], 'false': [-2.3856031934094273e-17, nan]}, {'': [0.08010612394250138, 4.5818728000403283e-17], 'true': [0.0, 0.07998121608543717], 'true,false': [4.973799150320702e-16, 0.11555555555555586], 'true,false,false': [0.11555555555555586, nan], 'false': [4.5818728000403283e-17, nan]}, {'': [0.0669006881352731, 3.3306690738754695e-17], 'true': [-1.1842378929335003e-16, 0.10108287320547166], 'true,false': [0.10108287320547166, nan], 'false': [3.3306690738754695e-17, nan]}, {'': [0.05929264071118028, 4.108699382471052e-17], 'true': [0.0, 0.059622505442537034], 'true,false': [1.1842378929335003e-16, 0.10380622837370279], 'true,false,false': [0.10380622837370279, nan], 'false': [4.108699382471052e-17, nan]}, {'': [0.051863800861203097, 1.8667466785732722e-17], 'true': [1.3026616822268503e-16, 0.11105855577219383], 'true,false': [0.11105855577219383, nan], 'false': [1.8667466785732722e-17, nan]}, {'': [0.05012216996899947, 2.600522400022889e-17], 'true': [7.697546304067752e-17, 0.1060441651456629], 'true,false': [0.0, 0.11776859504132221], 'true,false,false': [0.11776859504132221, nan], 'false': [2.600522400022889e-17, nan]}, {'': [0.04889559523641379, 8.148425868808489e-18], 'true': [0.04889559523641379, nan], 'true,true': [5.921189464667502e-18, 0.10878748184799054], 'true,true,false': [0.0, 0.11342155009451833], 'true,true,true': [nan, 5.921189464667502e-18]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, E).;true;true
9;true,false;genre(A, G).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995127;  // std dev = 0.000, 75.000 (wgt'ed) examples reached here.  /* #pos=75 */
%   | | else if ( actor(B) )
%   | | | then return -0.14185106490048768;  // std dev = 4.08e-08, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.14185106490048763;  // std dev = 8.69e-08, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.719473412210954;  // std dev = 2.06e-07, 75.000 (wgt'ed) examples reached here.  /* #pos=75 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( actor(B) )
%   | | | then return -0.12544463852839158;  // std dev = 0.000, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   | | | else return 0.7194734122109544;  // std dev = 2.11e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.12544463852839133;  // std dev = 0.000, 110.000 (wgt'ed) examples reached here.  /* #neg=110 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.13151669825345075;  // std dev = 0.105, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( actor(B) )
%   | | then return -0.11231637819360638;  // std dev = 0.000, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | | else return 0.5553664367462836;  // std dev = 3.42e-07, 81.000 (wgt'ed) examples reached here.  /* #pos=81 */
%   else return -0.1123163781936062;  // std dev = 7.88e-08, 98.000 (wgt'ed) examples reached here.  /* #neg=98 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4175135841583105;  // std dev = 0.000, 75.000 (wgt'ed) examples reached here.  /* #pos=75 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( actor(B) )
%   | | | then return -0.10159632948783631;  // std dev = 7.45e-09, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
%   | | | else return 0.4175135841583102;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.10159632948783638;  // std dev = 0.000, 122.000 (wgt'ed) examples reached here.  /* #neg=122 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.099857186543928;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(B, E) )
%   | | then return 0.32071184716015;  // std dev = 0.000, 75.000 (wgt'ed) examples reached here.  /* #pos=75 */
%   | | else if ( actor(B) )
%   | | | then return -0.09269127618926101;  // std dev = 0.000, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
%   | | | else return 0.3207118471601497;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.09269127618926082;  // std dev = 7.60e-08, 123.000 (wgt'ed) examples reached here.  /* #neg=123 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2551722425694895;  // std dev = 0.000, 75.000 (wgt'ed) examples reached here.  /* #pos=75 */
%   | else if ( actor(B) )
%   | | then return -0.0853010678058434;  // std dev = 0.006, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   | | else return 0.2551722425694894;  // std dev = 7.45e-09, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.0851847513883968;  // std dev = 6.75e-08, 128.000 (wgt'ed) examples reached here.  /* #neg=128 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08440320938859462;  // std dev = 1.86e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.20975771563253573;  // std dev = 0.000, 75.000 (wgt'ed) examples reached here.  /* #pos=75 */
%   | | else if ( actor(B) )
%   | | | then return -0.07876831394852866;  // std dev = 0.000, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | | | else return 0.20975771563253573;  // std dev = 1.05e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.07877675473109155;  // std dev = 6.66e-08, 115.000 (wgt'ed) examples reached here.  /* #neg=115 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1770964977452772;  // std dev = 2.11e-08, 75.000 (wgt'ed) examples reached here.  /* #pos=75 */
%   | else if ( actor(B) )
%   | | then return -0.07357069934686432;  // std dev = 0.008, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
%   | | else return 0.17709649774527736;  // std dev = 5.27e-09, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.07324622576333709;  // std dev = 4.59e-08, 112.000 (wgt'ed) examples reached here.  /* #neg=112 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.15274385809367058;  // std dev = 7.60e-08, 75.000 (wgt'ed) examples reached here.  /* #pos=75 */
%   | else if ( genre(A, E) )
%   | | then return -0.07296952411325593;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( actor(B) )
%   | | | then return -0.06839942300339623;  // std dev = 1.58e-08, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | | | else return 0.15274385809367097;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.06842697784420265;  // std dev = 6.23e-08, 135.000 (wgt'ed) examples reached here.  /* #neg=135 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13400703000801092;  // std dev = 5.16e-08, 75.000 (wgt'ed) examples reached here.  /* #pos=75 */
%   | else if ( genre(A, E) )
%   | | then return -0.06818472101084083;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( actor(B) )
%   | | | then return -0.06416752786799687;  // std dev = 1.18e-08, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | | | else return 0.13400703000801117;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.06419184008202626;  // std dev = 3.94e-08, 130.000 (wgt'ed) examples reached here.  /* #neg=130 */


Results
   AUC ROC   = 0.993085
   AUC PR    = 0.784141
   CLL	      = -0.099643
   Precision = 0.784141 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.879012


Total learning time: 1.338 seconds
Total inference time: 1.018 seconds
AUC ROC: 0.993085


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063922
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.01 seconds
Refined model CLL: -0.063922


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.993085
   AUC PR    = 0.784141
   CLL	      = -0.099643
   Precision = 0.784141 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.879012


Total learning time: 4.4110000000000005 seconds
Total inference time: 1.018 seconds
AUC ROC: 0.993085
Total revision time: 4.4110000000000005
Best scored revision CLL: -0.063922


Dataset: 4_cora_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 00:05:10
{'AUC ROC': 0.993085, 'AUC PR': 0.784141, 'CLL': -0.099643, 'Precision': [0.784141, 0.5], 'Recall': 1.0, 'F1': 0.879012, 'Learning time': 4.4110000000000005, 'Inference time': 1.018, 'parameter_0.4': {'AUC ROC': 0.97199, 'AUC PR': 0.81824, 'CLL': -0.112233, 'Precision': [1.0, 0.5], 'Recall': 0.724719, 'F1': 0.840391, 'Learning time': 0.975, 'Inference time': 1.009}}


Amount of data: 0.6
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;haswordauthor(E, C).;true;true
7;true,true,true;author(F, E), title(F, D).;false;false
7;true,true,false;title(G, D), venue(G, B).;false;false
7;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
7;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
7;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, B).;false;true
8;true,true,false;title(F, D), venue(F, A).;false;false
8;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
8;true,false,false;haswordvenue(A, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
8;false,true;haswordauthor(M, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;true,true;author(F, E), venue(F, B).;true;true
9;true,true,true;samebib(F, G), venue(G, A).;false;false
9;true,true,false;author(H, E), venue(H, A).;false;false
9;true,false;haswordtitle(I, C).;true;true
9;true,false,true;title(J, I), venue(J, A).;false;false
9;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995107;  // std dev = 6.19e-07, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.052107475156897946;  // std dev = 2.524, 78.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048824;  // std dev = 0.000, 170.000 (wgt'ed) examples reached here.  /* #neg=170 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7121896359114779;  // std dev = 0.841, 116.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=115 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.047018050182182095;  // std dev = 2.526, 79.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.1254446385283913;  // std dev = 4.71e-08, 152.000 (wgt'ed) examples reached here.  /* #neg=152 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.15029114848562453;  // std dev = 0.093, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( movie(E, A) )
%   | | then return 0.3349155308388523;  // std dev = 0.339, 185.000 (wgt'ed) examples reached here.  /* #neg=63 #pos=122 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360638;  // std dev = 6.66e-08, 164.000 (wgt'ed) examples reached here.  /* #neg=164 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.467894125216714;  // std dev = 0.672, 116.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=115 */
%   | else if ( genre(A, E) )
%   | | then return -0.09818226339443627;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.08329978023692365;  // std dev = 2.524, 78.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.1015963294878365;  // std dev = 0.000, 171.000 (wgt'ed) examples reached here.  /* #neg=171 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08982536303257238;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( genre(B, E) )
%   | | then return 0.36051070569613086;  // std dev = 2.19e-07, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.05999651936510474;  // std dev = 2.508, 69.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926064;  // std dev = 8.30e-08, 171.000 (wgt'ed) examples reached here.  /* #neg=171 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.28218298632897915;  // std dev = 0.000, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   | else if ( movie(E, A) )
%   | | then return -0.03757366434242216;  // std dev = 0.318, 61.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=7 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 7.60e-08, 191.000 (wgt'ed) examples reached here.  /* #neg=191 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07993958733924676;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( genre(B, E) )
%   | | then return 0.22866902325336114;  // std dev = 1.74e-07, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.06433148484857323;  // std dev = 2.532, 83.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109148;  // std dev = 8.16e-08, 177.000 (wgt'ed) examples reached here.  /* #neg=177 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18652923874277658;  // std dev = 0.499, 116.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=115 */
%   | else if ( movie(E, B) )
%   | | then return -0.03794911450918683;  // std dev = 2.503, 72.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=7 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.07324622576333668;  // std dev = 1.13e-07, 186.000 (wgt'ed) examples reached here.  /* #neg=186 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.16368791666569396;  // std dev = 1.10e-07, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   | else if ( genre(A, E) )
%   | | then return -0.07168717939493514;  // std dev = 2.63e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.04029268474289699;  // std dev = 2.516, 73.000 (wgt'ed) examples reached here.  /* #neg=66 #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420262;  // std dev = 5.67e-09, 171.000 (wgt'ed) examples reached here.  /* #neg=171 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.1424940225790951;  // std dev = 0.000, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   | | else if ( genre(A, G) )
%   | | | then return -0.0670605708975155;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return -0.03292072755492279;  // std dev = 2.512, 71.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=7 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.06419184008202626;  // std dev = 0.000, 174.000 (wgt'ed) examples reached here.  /* #neg=174 */


Results
   AUC ROC   = 0.97199
   AUC PR    = 0.81824
   CLL	      = -0.109955
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.840391


Total learning time: 1.16 seconds
Total inference time: 1.004 seconds
AUC ROC: 0.97199


Results scoring model
   AUC ROC   = 0.992456
   AUC PR    = 0.95445
   CLL	      = -0.08526
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.942623
   F1        = 0.970464


Total scoring time: 1.413 seconds
Parameter learned model CLL: -0.08526


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [6.19e-07, 0, 115], 'true,false,false,true': [2.524, 71, 7], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 170, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.841, 1, 115], 'true,false,true': [0.0, 4, 0], 'true,false,false,true': [2.526, 72, 7], 'true,false,false,false': [0.0, 0, 0], 'false,true': [4.71e-08, 152, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.093, 3, 0], 'true,false,true': [0.339, 63, 122], 'true,false,false': [0.0, 0, 0], 'false,true': [6.66e-08, 164, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.672, 1, 115], 'true,false,true': [0.0, 4, 0], 'true,false,false,true': [2.524, 71, 7], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 171, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 7, 0], 'true,false,true': [2.19e-07, 0, 115], 'true,false,false,true': [2.508, 62, 7], 'true,false,false,false': [0.0, 0, 0], 'false,true': [8.3e-08, 171, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 115], 'true,false,true': [0.318, 54, 7], 'true,false,false': [0.0, 0, 0], 'false,true': [7.6e-08, 191, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 9, 0], 'true,false,true': [1.74e-07, 0, 115], 'true,false,false,true': [2.532, 76, 7], 'true,false,false,false': [0.0, 0, 0], 'false,true': [8.16e-08, 177, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.499, 1, 115], 'true,false,true': [2.503, 65, 7], 'true,false,false': [0.0, 0, 0], 'false,true': [1.13e-07, 186, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [1.1e-07, 0, 115], 'true,false,true': [2.63e-09, 7, 0], 'true,false,false,true': [2.516, 66, 7], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.67e-09, 171, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true,true,false': 'genre(A, G)'}, {'true,true,true,true': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 115], 'true,true,false,true': [0.0, 1, 0], 'true,true,false,false': [2.512, 64, 7], 'true,false': [0.0, 0, 0], 'false': [0.0, 174, 0]}]]
[{'': [0.23339355935806536, -1.750233944703188e-16], 'true': [0.0, 0.23254315552095753], 'true,false': [3.3364615418300357e-15, 0.08168967784352424], 'true,false,false': [0.08168967784352424, nan], 'false': [-1.750233944703188e-16, nan]}, {'': [0.17726836795114206, 1.460819769243627e-17], 'true': [0.006101140675793815, 0.07714655507995548], 'true,false': [0.0, 0.08075628905624088], 'true,false,false': [0.08075628905624088, nan], 'false': [1.460819769243627e-17, nan]}, {'': [0.11710673336460654, 2.7078610356711135e-17], 'true': [0.0028841663574630805, 0.11520220096869299], 'true,false': [0.11520220096869299, nan], 'false': [2.7078610356711135e-17, nan]}, {'': [0.10837284992457696, -7.920889415454333e-17], 'true': [0.00389079634679049, 0.07771509277785822], 'true,false': [0.0, 0.08168967784352396], 'true,false,false': [0.08168967784352396, nan], 'false': [-7.920889415454333e-17, nan]}, {'': [0.07587963720868211, 4.025370030804661e-17], 'true': [0.0, 0.07562766519233087], 'true,false': [4.1705769272875447e-16, 0.09115731989077927], 'true,false,false': [0.09115731989077927, nan], 'false': [4.025370030804661e-17, nan]}, {'': [0.05829918901922422, 3.022596716256971e-17], 'true': [-2.4714529939481746e-16, 0.10140013084804708], 'true,false': [0.10140013084804708, nan], 'false': [3.022596716256971e-17, nan]}, {'': [0.052392852941186986, 3.763467880085276e-17], 'true': [-3.0839528461809902e-18, 0.05327364505508425], 'true,false': [2.6259188060699356e-16, 0.0772245608941789], 'true,false,false': [0.0772245608941789, nan], 'false': [3.763467880085276e-17, nan]}, {'': [0.046561791871412406, 6.864282141499624e-17], 'true': [0.002144721972868838, 0.08703059689342975], 'true,false': [0.08703059689342975, nan], 'false': [6.864282141499624e-17, nan]}, {'': [0.04282738392323408, 3.2462661538747265e-17], 'true': [1.0426442318218862e-16, 0.07918828418241916], 'true,false': [9.912705577010326e-19, 0.08669544004503683], 'true,false,false': [0.08669544004503683, nan], 'false': [3.2462661538747265e-17, nan]}, {'': [0.04107398569942513, -5.742532885992189e-18], 'true': [0.04107398569942513, nan], 'true,true': [-7.723290606088046e-18, 0.08765289577682771], 'true,true,false': [0.0, 0.08887125570323344], 'true,true,true': [nan, -7.723290606088046e-18]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, E).;true;true
9;true,false;genre(A, G).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995107;  // std dev = 6.19e-07, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   | | else if ( actor(B) )
%   | | | then return -0.14185106490048766;  // std dev = 6.50e-08, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.14185106490048838;  // std dev = 0.000, 196.000 (wgt'ed) examples reached here.  /* #neg=196 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109551;  // std dev = 0.000, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( actor(B) )
%   | | | then return -0.1254446385283916;  // std dev = 0.000, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
%   | | | else return 0.7194734122109543;  // std dev = 2.11e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.12544463852839144;  // std dev = 0.000, 167.000 (wgt'ed) examples reached here.  /* #neg=167 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.5553664367462834;  // std dev = 4.62e-07, 122.000 (wgt'ed) examples reached here.  /* #pos=122 */
%   | else return -0.11231637819360625;  // std dev = 5.27e-08, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
%   else return -0.11231637819360651;  // std dev = 0.000, 181.000 (wgt'ed) examples reached here.  /* #neg=181 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4175135841583094;  // std dev = 3.26e-07, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783633;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( actor(B) )
%   | | | then return -0.10159632948783616;  // std dev = 5.58e-08, 73.000 (wgt'ed) examples reached here.  /* #neg=73 */
%   | | | else return 0.41751358415831025;  // std dev = 1.49e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.10159632948783652;  // std dev = 0.000, 185.000 (wgt'ed) examples reached here.  /* #neg=185 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926098;  // std dev = 1.86e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.32071184716015005;  // std dev = 1.84e-07, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   | | else if ( actor(B) )
%   | | | then return -0.09269127618926107;  // std dev = 0.000, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
%   | | | else return 0.3207118471601498;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.09269127618926068;  // std dev = 7.45e-08, 150.000 (wgt'ed) examples reached here.  /* #neg=150 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.2551722425694897;  // std dev = 0.000, 47.000 (wgt'ed) examples reached here.  /* #pos=47 */
%   | | else return 0.24545557436807292;  // std dev = 0.080, 69.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=68 */
%   | else if ( actor(B) )
%   | | then return -0.08518475138839679;  // std dev = 2.98e-08, 80.000 (wgt'ed) examples reached here.  /* #neg=80 */
%   | | else return 0.25517224256948956;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.08518475138839678;  // std dev = 6.66e-08, 167.000 (wgt'ed) examples reached here.  /* #neg=167 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.27730613066778415;  // std dev = 0.281, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.2107127736397551;  // std dev = 0.009, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   | | else if ( actor(B) )
%   | | | then return -0.07877675473109162;  // std dev = 4.59e-08, 83.000 (wgt'ed) examples reached here.  /* #neg=83 */
%   | | | else return 0.20975771563253587;  // std dev = 7.45e-09, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.07877675473109146;  // std dev = 6.99e-08, 212.000 (wgt'ed) examples reached here.  /* #neg=212 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.176957356883677;  // std dev = 0.000, 47.000 (wgt'ed) examples reached here.  /* #pos=47 */
%   | | else return 0.16988505376347396;  // std dev = 0.070, 69.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=68 */
%   | else if ( actor(B) )
%   | | then return -0.07204754685660052;  // std dev = 0.029, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
%   | | else return 0.17709649774527736;  // std dev = 5.27e-09, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.07324622576333668;  // std dev = 1.10e-07, 187.000 (wgt'ed) examples reached here.  /* #neg=187 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.15392980646195856;  // std dev = 0.012, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   | else if ( genre(A, E) )
%   | | then return -0.05686989559806241;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( actor(B) )
%   | | | then return -0.06850342684258004;  // std dev = 0.000, 72.000 (wgt'ed) examples reached here.  /* #neg=72 */
%   | | | else return 0.152743858093671;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.06842697784420262;  // std dev = 8.49e-08, 210.000 (wgt'ed) examples reached here.  /* #neg=210 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1349323528073397;  // std dev = 0.010, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   | else if ( genre(A, E) )
%   | | then return -0.05389539953642646;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( actor(B) )
%   | | | then return -0.06425928681244522;  // std dev = 7.45e-09, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
%   | | | else return 0.13400703000801117;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.06419184008202626;  // std dev = 0.000, 190.000 (wgt'ed) examples reached here.  /* #neg=190 */


Results
   AUC ROC   = 0.991725
   AUC PR    = 0.81335
   CLL	      = -0.102651
   Precision = 0.626761 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.770563


Total learning time: 1.616 seconds
Total inference time: 0.984 seconds
AUC ROC: 0.991725


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.06402
   Precision = 0.953125 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.976


Total scoring time: 1.194 seconds
Refined model CLL: -0.06402


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.991725
   AUC PR    = 0.81335
   CLL	      = -0.102651
   Precision = 0.626761 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.770563


Total learning time: 5.383 seconds
Total inference time: 0.984 seconds
AUC ROC: 0.991725
Total revision time: 5.383
Best scored revision CLL: -0.06402


Dataset: 4_cora_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 00:05:18
{'AUC ROC': 0.991725, 'AUC PR': 0.81335, 'CLL': -0.102651, 'Precision': [0.626761, 0.5], 'Recall': 1.0, 'F1': 0.770563, 'Learning time': 5.383, 'Inference time': 0.984, 'parameter_0.6': {'AUC ROC': 0.97199, 'AUC PR': 0.81824, 'CLL': -0.109955, 'Precision': [1.0, 0.5], 'Recall': 0.724719, 'F1': 0.840391, 'Learning time': 1.16, 'Inference time': 1.004}}


Amount of data: 0.8
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;haswordauthor(E, C).;true;true
7;true,true,true;author(F, E), title(F, D).;false;false
7;true,true,false;title(G, D), venue(G, B).;false;false
7;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
7;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
7;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, B).;false;true
8;true,true,false;title(F, D), venue(F, A).;false;false
8;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
8;true,false,false;haswordvenue(A, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
8;false,true;haswordauthor(M, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;true,true;author(F, E), venue(F, B).;true;true
9;true,true,true;samebib(F, G), venue(G, A).;false;false
9;true,true,false;author(H, E), venue(H, A).;false;false
9;true,false;haswordtitle(I, C).;true;true
9;true,false,true;title(J, I), venue(J, A).;false;false
9;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995098;  // std dev = 9.54e-07, 154.000 (wgt'ed) examples reached here.  /* #pos=154 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.04507687135210058;  // std dev = 2.851, 93.000 (wgt'ed) examples reached here.  /* #neg=84 #pos=9 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.1418510649004882;  // std dev = 0.000, 252.000 (wgt'ed) examples reached here.  /* #neg=252 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109563;  // std dev = 0.000, 154.000 (wgt'ed) examples reached here.  /* #pos=154 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.025340854479753785;  // std dev = 2.828, 81.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=9 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839188;  // std dev = 0.000, 255.000 (wgt'ed) examples reached here.  /* #neg=255 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.125116591566836;  // std dev = 0.109, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( movie(E, A) )
%   | | then return 0.3343294262854139;  // std dev = 0.339, 246.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=163 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360678;  // std dev = 0.000, 234.000 (wgt'ed) examples reached here.  /* #neg=234 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4720412515510744;  // std dev = 0.000, 154.000 (wgt'ed) examples reached here.  /* #pos=154 */
%   | else if ( genre(A, E) )
%   | | then return -0.10043393986968054;  // std dev = 3.73e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.07122228765948108;  // std dev = 2.837, 85.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=9 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783656;  // std dev = 0.000, 230.000 (wgt'ed) examples reached here.  /* #neg=230 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09171716827390272;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(B, E) )
%   | | then return 0.3580143171034552;  // std dev = 2.06e-07, 154.000 (wgt'ed) examples reached here.  /* #pos=154 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.08042387651701517;  // std dev = 2.867, 104.000 (wgt'ed) examples reached here.  /* #neg=95 #pos=9 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926049;  // std dev = 7.15e-08, 226.000 (wgt'ed) examples reached here.  /* #neg=226 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.28049504719125457;  // std dev = 2.86e-07, 154.000 (wgt'ed) examples reached here.  /* #pos=154 */
%   | else if ( movie(E, A) )
%   | | then return -0.05756261263833566;  // std dev = 0.292, 95.000 (wgt'ed) examples reached here.  /* #neg=86 #pos=9 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 8.43e-08, 223.000 (wgt'ed) examples reached here.  /* #neg=223 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11641010424922228;  // std dev = 0.236, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( genre(B, E) )
%   | | then return 0.22749637634929976;  // std dev = 0.000, 154.000 (wgt'ed) examples reached here.  /* #pos=154 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.04636862923387664;  // std dev = 2.842, 88.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=9 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109143;  // std dev = 6.14e-08, 251.000 (wgt'ed) examples reached here.  /* #neg=251 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.19000175596135452;  // std dev = 0.000, 154.000 (wgt'ed) examples reached here.  /* #pos=154 */
%   | else if ( movie(E, B) )
%   | | then return -0.05732400651051511;  // std dev = 2.866, 116.000 (wgt'ed) examples reached here.  /* #neg=107 #pos=9 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.07324622576333677;  // std dev = 1.20e-07, 246.000 (wgt'ed) examples reached here.  /* #neg=246 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.16246499158578342;  // std dev = 1.30e-07, 154.000 (wgt'ed) examples reached here.  /* #pos=154 */
%   | else if ( genre(A, E) )
%   | | then return -0.06812463852296909;  // std dev = 1.86e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.028848702878575116;  // std dev = 2.835, 84.000 (wgt'ed) examples reached here.  /* #neg=75 #pos=9 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420261;  // std dev = 3.95e-09, 231.000 (wgt'ed) examples reached here.  /* #neg=231 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return -0.38921372921632497;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0.14155120452327322;  // std dev = 0.000, 154.000 (wgt'ed) examples reached here.  /* #pos=154 */
%   | | else if ( genre(A, G) )
%   | | | then return -0.06392501886322406;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return -0.037900512896196004;  // std dev = 2.854, 95.000 (wgt'ed) examples reached here.  /* #neg=86 #pos=9 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.06419184008202611;  // std dev = 8.02e-08, 273.000 (wgt'ed) examples reached here.  /* #neg=273 */


Results
   AUC ROC   = 0.97199
   AUC PR    = 0.81824
   CLL	      = -0.107807
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.840391


Total learning time: 1.368 seconds
Total inference time: 1.079 seconds
AUC ROC: 0.97199


Results scoring model
   AUC ROC   = 0.992803
   AUC PR    = 0.955887
   CLL	      = -0.084981
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.944785
   F1        = 0.971609


Total scoring time: 1.475 seconds
Parameter learned model CLL: -0.084981


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 2, 0], 'true,false,true': [9.54e-07, 0, 154], 'true,false,false,true': [2.851, 84, 9], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 252, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 154], 'true,false,true': [0.0, 7, 0], 'true,false,false,true': [2.828, 72, 9], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 255, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.109, 9, 0], 'true,false,true': [0.339, 83, 163], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 234, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 154], 'true,false,true': [3.73e-09, 7, 0], 'true,false,false,true': [2.837, 76, 9], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 230, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 5, 0], 'true,false,true': [2.06e-07, 0, 154], 'true,false,false,true': [2.867, 95, 9], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.15e-08, 226, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [2.86e-07, 0, 154], 'true,false,true': [0.292, 86, 9], 'true,false,false': [0.0, 0, 0], 'false,true': [8.43e-08, 223, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.236, 7, 0], 'true,false,true': [0.0, 0, 154], 'true,false,false,true': [2.842, 79, 9], 'true,false,false,false': [0.0, 0, 0], 'false,true': [6.14e-08, 251, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 154], 'true,false,true': [2.866, 107, 9], 'true,false,false': [0.0, 0, 0], 'false,true': [1.2e-07, 246, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [1.3e-07, 0, 154], 'true,false,true': [1.86e-09, 6, 0], 'true,false,false,true': [2.835, 75, 9], 'true,false,false,false': [0.0, 0, 0], 'false,true': [3.95e-09, 231, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true,true,false': 'genre(A, G)'}, {'true,true,true,true': [0.0, 1, 0], 'true,true,true,false': [0.0, 0, 154], 'true,true,false,true': [2.63e-09, 6, 0], 'true,true,false,false': [2.854, 86, 9], 'true,false': [0.0, 0, 0], 'false': [8.02e-08, 273, 0]}]]
[{'': [0.2260931275302064, -1.1983359630874705e-16], 'true': [0.0, 0.22442590437476964], 'true,false': [5.905809751772262e-15, 0.08740894901144651], 'true,false,false': [0.08740894901144651, nan], 'false': [-1.1983359630874705e-16, nan]}, {'': [0.16445566608142154, -6.617799989922502e-17], 'true': [-2.5837917664003644e-15, 0.09164279122137726], 'true,false': [-1.982541115402065e-18, 0.09876543209876543], 'true,false,false': [0.09876543209876543, nan], 'false': [-6.617799989922502e-17, nan]}, {'': [0.11797151651242412, -7.97083197166779e-17], 'true': [0.0013107636992016553, 0.11478933483531928], 'true,false': [0.11478933483531928, nan], 'false': [-7.97083197166779e-17, nan]}, {'': [0.10239763925377905, -7.916372871240247e-17], 'true': [-2.214678656914598e-15, 0.08752801719476501], 'true,false': [1.982541115402065e-18, 0.09467128027681657], 'true,false,false': [0.09467128027681657, nan], 'false': [-7.916372871240247e-17, nan]}, {'': [0.07802184792619657, 2.25974597932554e-17], 'true': [-1.3877787807814458e-18, 0.0781170322562437], 'true,false': [2.7683483211432474e-16, 0.07904955621301785], 'true,false,false': [0.07904955621301785, nan], 'false': [2.25974597932554e-17, nan]}, {'': [0.05951200042450285, 3.1862902948883416e-17], 'true': [5.306000948857891e-16, 0.08530304463683626], 'true,false': [0.08530304463683626, nan], 'false': [3.1862902948883416e-17, nan]}, {'': [0.05117022396254765, 1.503887762440451e-17], 'true': [0.007947067660514794, 0.050742395728915216], 'true,false': [-1.7878916240716808e-16, 0.09181301652892579], 'true,false,false': [0.09181301652892579, nan], 'false': [1.503887762440451e-17, nan]}, {'': [0.04542175662939798, 5.867032243954079e-17], 'true': [0.0, 0.07083347996999563], 'true,false': [0.07083347996999563, nan], 'false': [5.867032243954079e-17, nan]}, {'': [0.04172419913595944, 1.6340944951192782e-17], 'true': [1.0958045437858688e-16, 0.0893816982310049], 'true,false': [5.782411586589357e-19, 0.09566326530612243], 'true,false,false': [0.09566326530612243, nan], 'false': [1.6340944951192782e-17, nan]}, {'': [0.04046625083729889, 2.3587155834527135e-17], 'true': [0.04046625083729889, nan], 'true,true': [0.0018057672379891403, 0.08070485807523647], 'true,true,false': [1.1564823173178713e-18, 0.0857617728531856], 'true,true,true': [0.0, -5.767392335715098e-17]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, E).;true;true
9;true,true;genre(A, F).;true;true
9;true,false;genre(A, G).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995098;  // std dev = 9.54e-07, 154.000 (wgt'ed) examples reached here.  /* #pos=154 */
%   | | else if ( actor(B) )
%   | | | then return -0.14185106490048763;  // std dev = 8.30e-08, 89.000 (wgt'ed) examples reached here.  /* #neg=89 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.1418510649004883;  // std dev = 0.000, 244.000 (wgt'ed) examples reached here.  /* #neg=244 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109563;  // std dev = 0.000, 154.000 (wgt'ed) examples reached here.  /* #pos=154 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( actor(B) )
%   | | | then return -0.12544463852839158;  // std dev = 0.000, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
%   | | | else return 0.7194734122109543;  // std dev = 2.98e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.12544463852839174;  // std dev = 0.000, 222.000 (wgt'ed) examples reached here.  /* #neg=222 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( actor(B) )
%   | | then return -0.11231637819360622;  // std dev = 6.83e-08, 83.000 (wgt'ed) examples reached here.  /* #neg=83 */
%   | | else return 0.5553664367462833;  // std dev = 5.53e-07, 163.000 (wgt'ed) examples reached here.  /* #pos=163 */
%   else return -0.11231637819360671;  // std dev = 0.000, 218.000 (wgt'ed) examples reached here.  /* #neg=218 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.41751358415830886;  // std dev = 4.66e-07, 154.000 (wgt'ed) examples reached here.  /* #pos=154 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( actor(B) )
%   | | | then return -0.10159632948783615;  // std dev = 5.96e-08, 80.000 (wgt'ed) examples reached here.  /* #neg=80 */
%   | | | else return 0.41751358415831025;  // std dev = 2.11e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.10159632948783656;  // std dev = 0.000, 231.000 (wgt'ed) examples reached here.  /* #neg=231 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926097;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( genre(B, E) )
%   | | then return 0.3207118471601497;  // std dev = 2.92e-07, 154.000 (wgt'ed) examples reached here.  /* #pos=154 */
%   | | else if ( actor(B) )
%   | | | then return -0.09269127618926107;  // std dev = 0.000, 70.000 (wgt'ed) examples reached here.  /* #neg=70 */
%   | | | else return 0.3207118471601498;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.09269127618926047;  // std dev = 8.43e-08, 239.000 (wgt'ed) examples reached here.  /* #neg=239 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.25180335742037274;  // std dev = 0.520, 155.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=154 */
%   | else if ( actor(B) )
%   | | then return -0.08518475138839679;  // std dev = 3.16e-08, 85.000 (wgt'ed) examples reached here.  /* #neg=85 */
%   | | else return 0.25517224256948956;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.08518475138839678;  // std dev = 8.02e-08, 214.000 (wgt'ed) examples reached here.  /* #neg=214 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07877675473109177;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.210316686097354;  // std dev = 1.26e-07, 154.000 (wgt'ed) examples reached here.  /* #pos=154 */
%   | | else if ( actor(B) )
%   | | | then return -0.0787767547310916;  // std dev = 5.27e-08, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */
%   | | | else return 0.20975771563253587;  // std dev = 7.45e-09, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.07877675473109146;  // std dev = 6.32e-08, 235.000 (wgt'ed) examples reached here.  /* #neg=235 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17750636758231486;  // std dev = 1.07e-07, 154.000 (wgt'ed) examples reached here.  /* #pos=154 */
%   | else if ( actor(B) )
%   | | then return -0.07324622576333706;  // std dev = 0.000, 93.000 (wgt'ed) examples reached here.  /* #neg=93 */
%   | | else return 0.17709649774527736;  // std dev = 7.45e-09, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.07324622576333682;  // std dev = 1.14e-07, 260.000 (wgt'ed) examples reached here.  /* #neg=260 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.15305471443796148;  // std dev = 4.21e-08, 63.000 (wgt'ed) examples reached here.  /* #pos=63 */
%   | | else return 0.14768577007196035;  // std dev = 0.051, 92.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=91 */
%   | else if ( genre(A, E) )
%   | | then return -0.06842697784420272;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( actor(B) )
%   | | | then return -0.06842697784420265;  // std dev = 4.21e-08, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
%   | | | else return 0.15274385809367097;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.0684269778442027;  // std dev = 0.000, 246.000 (wgt'ed) examples reached here.  /* #neg=246 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( genre(A, E) )
%   | | then return -0.37480610784354335;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0.13461912453025218;  // std dev = 0.004, 154.000 (wgt'ed) examples reached here.  /* #pos=154 */
%   | else if ( genre(A, F) )
%   | | then return -0.0641918400820262;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( actor(B) )
%   | | | then return -0.06419184008202625;  // std dev = 0.000, 85.000 (wgt'ed) examples reached here.  /* #neg=85 */
%   | | | else return 0.13400703000801117;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.06419184008202626;  // std dev = 2.11e-08, 248.000 (wgt'ed) examples reached here.  /* #neg=248 */


Results
   AUC ROC   = 0.988073
   AUC PR    = 0.631126
   CLL	      = -0.096974
   Precision = 0.784141 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.879012


Total learning time: 1.695 seconds
Total inference time: 0.99 seconds
AUC ROC: 0.988073


Results scoring model
   AUC ROC   = 0.999886
   AUC PR    = 0.977312
   CLL	      = -0.064059
   Precision = 0.993902 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.996942


Total scoring time: 1.422 seconds
Refined model CLL: -0.064059


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.988073
   AUC PR    = 0.631126
   CLL	      = -0.096974
   Precision = 0.784141 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.879012


Total learning time: 5.96 seconds
Total inference time: 0.99 seconds
AUC ROC: 0.988073
Total revision time: 5.96
Best scored revision CLL: -0.064059


Dataset: 4_cora_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 00:05:26
{'AUC ROC': 0.988073, 'AUC PR': 0.631126, 'CLL': -0.096974, 'Precision': [0.784141, 0.5], 'Recall': 1.0, 'F1': 0.879012, 'Learning time': 5.96, 'Inference time': 0.99, 'parameter_0.8': {'AUC ROC': 0.97199, 'AUC PR': 0.81824, 'CLL': -0.107807, 'Precision': [1.0, 0.5], 'Recall': 0.724719, 'F1': 0.840391, 'Learning time': 1.368, 'Inference time': 1.079}}


Amount of data: 1.0
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;haswordauthor(E, C).;true;true
7;true,true,true;author(F, E), title(F, D).;false;false
7;true,true,false;title(G, D), venue(G, B).;false;false
7;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
7;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
7;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, B).;false;true
8;true,true,false;title(F, D), venue(F, A).;false;false
8;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
8;true,false,false;haswordvenue(A, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
8;false,true;haswordauthor(M, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;true,true;author(F, E), venue(F, B).;true;true
9;true,true,true;samebib(F, G), venue(G, A).;false;false
9;true,true,false;author(H, E), venue(H, A).;false;false
9;true,false;haswordtitle(I, C).;true;true
9;true,false,true;title(J, I), venue(J, A).;false;false
9;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995093;  // std dev = 1.09e-06, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.045697218746641524;  // std dev = 3.006, 104.000 (wgt'ed) examples reached here.  /* #neg=94 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048802;  // std dev = 0.000, 276.000 (wgt'ed) examples reached here.  /* #neg=276 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7151404991302422;  // std dev = 0.843, 195.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=194 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 7.45e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.05945580786473752;  // std dev = 3.038, 130.000 (wgt'ed) examples reached here.  /* #neg=120 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839202;  // std dev = 0.000, 309.000 (wgt'ed) examples reached here.  /* #neg=309 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360638;  // std dev = 7.45e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( movie(E, A) )
%   | | then return 0.3161955136250303;  // std dev = 0.342, 321.000 (wgt'ed) examples reached here.  /* #neg=117 #pos=204 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360688;  // std dev = 0.000, 294.000 (wgt'ed) examples reached here.  /* #neg=294 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.47412924958170016;  // std dev = 0.684, 195.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=194 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783627;  // std dev = 5.27e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.07607267418233833;  // std dev = 3.011, 107.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.1015963294878366;  // std dev = 0.000, 268.000 (wgt'ed) examples reached here.  /* #neg=268 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1741416031675546;  // std dev = 0.223, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(B, E) )
%   | | then return 0.36271161728954227;  // std dev = 3.91e-07, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.07136861101948624;  // std dev = 3.020, 114.000 (wgt'ed) examples reached here.  /* #neg=104 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926043;  // std dev = 1.41e-07, 284.000 (wgt'ed) examples reached here.  /* #neg=284 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2781094342029676;  // std dev = 0.767, 196.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=194 */
%   | else if ( movie(E, A) )
%   | | then return -0.06354733088749036;  // std dev = 0.270, 125.000 (wgt'ed) examples reached here.  /* #neg=115 #pos=10 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 1.10e-07, 323.000 (wgt'ed) examples reached here.  /* #neg=323 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.10503153332167918;  // std dev = 0.228, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( genre(B, E) )
%   | | then return 0.23068715023213573;  // std dev = 0.000, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.056387537229005795;  // std dev = 3.024, 117.000 (wgt'ed) examples reached here.  /* #neg=107 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109143;  // std dev = 4.94e-08, 283.000 (wgt'ed) examples reached here.  /* #neg=283 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.19230180960030177;  // std dev = 0.000, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else if ( movie(E, B) )
%   | | then return -0.03956654204555881;  // std dev = 3.005, 111.000 (wgt'ed) examples reached here.  /* #neg=101 #pos=10 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.07324622576333698;  // std dev = 9.77e-08, 299.000 (wgt'ed) examples reached here.  /* #neg=299 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.16418352440780293;  // std dev = 0.000, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else if ( genre(A, E) )
%   | | then return -0.06516208252725286;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.047239860597665786;  // std dev = 3.028, 120.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420283;  // std dev = 0.000, 267.000 (wgt'ed) examples reached here.  /* #neg=267 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.1428757237896046;  // std dev = 1.67e-07, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | | else if ( genre(A, G) )
%   | | | then return -0.06130337168285512;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return -0.032710699779279734;  // std dev = 3.012, 108.000 (wgt'ed) examples reached here.  /* #neg=98 #pos=10 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.0641918400820259;  // std dev = 1.28e-07, 312.000 (wgt'ed) examples reached here.  /* #neg=312 */


Results
   AUC ROC   = 0.97199
   AUC PR    = 0.81824
   CLL	      = -0.108939
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.840391


Total learning time: 1.447 seconds
Total inference time: 1.005 seconds
AUC ROC: 0.97199


Results scoring model
   AUC ROC   = 0.993632
   AUC PR    = 0.960741
   CLL	      = -0.082997
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.95098
   F1        = 0.974874


Total scoring time: 1.688 seconds
Parameter learned model CLL: -0.082997


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 13, 0], 'true,false,true': [1.09e-06, 0, 194], 'true,false,false,true': [3.006, 94, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 276, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.843, 1, 194], 'true,false,true': [7.45e-09, 13, 0], 'true,false,false,true': [3.038, 120, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 309, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [7.45e-09, 11, 0], 'true,false,true': [0.342, 117, 204], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 294, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.684, 1, 194], 'true,false,true': [5.27e-09, 9, 0], 'true,false,false,true': [3.011, 97, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 268, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.223, 5, 0], 'true,false,true': [3.91e-07, 0, 194], 'true,false,false,true': [3.02, 104, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.41e-07, 284, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.767, 2, 194], 'true,false,true': [0.27, 115, 10], 'true,false,false': [0.0, 0, 0], 'false,true': [1.1e-07, 323, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.228, 8, 0], 'true,false,true': [0.0, 0, 194], 'true,false,false,true': [3.024, 107, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [4.94e-08, 283, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 194], 'true,false,true': [3.005, 101, 10], 'true,false,false': [0.0, 0, 0], 'false,true': [9.77e-08, 299, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 194], 'true,false,true': [0.0, 11, 0], 'true,false,false,true': [3.028, 110, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 267, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true,true,false': 'genre(A, G)'}, {'true,true,true,true': [0.0, 0, 0], 'true,true,true,false': [1.67e-07, 0, 194], 'true,true,false,true': [0.0, 4, 0], 'true,true,false,false': [3.012, 98, 10], 'true,false': [0.0, 0, 0], 'false': [1.28e-07, 312, 0]}]]
[{'': [0.22568004880016174, -3.8616453030440226e-17], 'true': [-1.2810265668751807e-17, 0.21593621908923494], 'true,false': [6.15315358802561e-15, 0.08690828402366835], 'true,false,false': [0.08690828402366835, nan], 'false': [-3.8616453030440226e-17, nan]}, {'': [0.17829023854670054, -8.623091453399274e-17], 'true': [0.003642182338411897, 0.06491071194460785], 'true,false': [4.270088556250602e-18, 0.07100591715976358], 'true,false,false': [0.07100591715976358, nan], 'false': [-8.623091453399274e-17, nan]}, {'': [0.11887391148410162, -9.516197353929913e-17], 'true': [5.046468293750712e-18, 0.11686359624229946], 'true,false': [0.11686359624229946, nan], 'false': [-9.516197353929913e-17, nan]}, {'': [0.10197678702817654, -6.462492232892702e-17], 'true': [0.0023961360010117936, 0.07819679980072965], 'true,false': [3.0839528461809902e-18, 0.08472355664250159], 'true,false,false': [0.08472355664250159, nan], 'false': [-6.462492232892702e-17, nan]}, {'': [0.07475649824266045, 7.03662480396226e-17], 'true': [0.009951233647306407, 0.07354788030835886], 'true,false': [7.874571556104203e-16, 0.08002462296091127], 'true,false,false': [0.08002462296091127, nan], 'false': [7.03662480396226e-17, nan]}, {'': [0.0580154381885398, 3.71220082537204e-17], 'true': [0.0030000075685175636, 0.07300564073442174], 'true,false': [0.07300564073442174, nan], 'false': [3.71220082537204e-17, nan]}, {'': [0.04895466570399251, 8.630709025354574e-18], 'true': [0.006506436980477872, 0.0487461130441407], 'true,false': [-1.8312957107219077e-17, 0.07816494995982222], 'true,false,false': [0.07816494995982222, nan], 'false': [8.630709025354574e-18, nan]}, {'': [0.042043120954098345, 3.193283615978711e-17], 'true': [-1.3734717830414308e-16, 0.08132714040491407], 'true,false': [0.08132714040491407, nan], 'false': [3.193283615978711e-17, nan]}, {'': [0.039123789341175226, -2.6612087481651693e-17], 'true': [-2.0144252817940985e-16, 0.0699992614244315], 'true,false': [-1.261617073437678e-18, 0.07638888888888863], 'true,false,false': [0.07638888888888863, nan], 'false': [-2.6612087481651693e-17, nan]}, {'': [0.03690175952446185, 5.2664425527090757e-17], 'true': [0.03690175952446185, nan], 'true,true': [1.4421453721935024e-16, 0.08104667362558203], 'true,true,false': [0.0, 0.08401920438957473], 'true,true,true': [nan, 1.4421453721935024e-16]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, E).;true;true
9;true,false;genre(A, G).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995093;  // std dev = 1.09e-06, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | | else if ( actor(B) )
%   | | | then return -0.14185106490048763;  // std dev = 8.69e-08, 102.000 (wgt'ed) examples reached here.  /* #neg=102 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.14185106490048788;  // std dev = 7.88e-08, 296.000 (wgt'ed) examples reached here.  /* #neg=296 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.719473412210957;  // std dev = 0.000, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( actor(B) )
%   | | | then return -0.12544463852839138;  // std dev = 0.000, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
%   | | | else return 0.7194734122109544;  // std dev = 2.98e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.12544463852839205;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #neg=326 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( actor(B) )
%   | | then return -0.1123163781936062;  // std dev = 8.02e-08, 100.000 (wgt'ed) examples reached here.  /* #neg=100 */
%   | | else return 0.5553664367462833;  // std dev = 6.36e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.11231637819360679;  // std dev = 0.000, 305.000 (wgt'ed) examples reached here.  /* #neg=305 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4175135841583099;  // std dev = 3.04e-07, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783627;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( actor(B) )
%   | | | then return -0.10159632948783634;  // std dev = 0.000, 112.000 (wgt'ed) examples reached here.  /* #neg=112 */
%   | | | else return 0.4175135841583103;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.10159632948783663;  // std dev = 0.000, 308.000 (wgt'ed) examples reached here.  /* #neg=308 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926096;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(B, E) )
%   | | then return 0.320711847160149;  // std dev = 3.95e-07, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | | else if ( actor(B) )
%   | | | then return -0.09269127618926087;  // std dev = 6.83e-08, 113.000 (wgt'ed) examples reached here.  /* #neg=113 */
%   | | | else return 0.3207118471601498;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.09269127618926042;  // std dev = 1.60e-07, 305.000 (wgt'ed) examples reached here.  /* #neg=305 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.08518475138839682;  // std dev = 5.58e-08, 107.000 (wgt'ed) examples reached here.  /* #neg=107 */
%   | else return 0.25517224256949106;  // std dev = 0.000, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.08518475138839678;  // std dev = 1.01e-07, 288.000 (wgt'ed) examples reached here.  /* #neg=288 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07877675473109173;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( genre(B, E) )
%   | | then return 0.209757715632535;  // std dev = 2.92e-07, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | | else if ( actor(B) )
%   | | | then return -0.07877675473109157;  // std dev = 6.32e-08, 108.000 (wgt'ed) examples reached here.  /* #neg=108 */
%   | | | else return 0.2097577156325356;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.07877675473109143;  // std dev = 4.47e-08, 283.000 (wgt'ed) examples reached here.  /* #neg=283 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17709649774527758;  // std dev = 0.000, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else if ( actor(B) )
%   | | then return -0.07324622576333707;  // std dev = 0.000, 107.000 (wgt'ed) examples reached here.  /* #neg=107 */
%   | | else return 0.17709649774527714;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.07324622576333699;  // std dev = 9.42e-08, 304.000 (wgt'ed) examples reached here.  /* #neg=304 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.15274385809367114;  // std dev = 0.000, 75.000 (wgt'ed) examples reached here.  /* #pos=75 */
%   | | else return 0.14862471492949877;  // std dev = 0.045, 120.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=119 */
%   | else if ( genre(A, E) )
%   | | then return -0.06842697784420272;  // std dev = 2.63e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( actor(B) )
%   | | | then return -0.06842697784420265;  // std dev = 4.83e-08, 101.000 (wgt'ed) examples reached here.  /* #neg=101 */
%   | | | else return 0.15274385809367078;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.0684269778442031;  // std dev = 0.000, 323.000 (wgt'ed) examples reached here.  /* #neg=323 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.13400703000801092;  // std dev = 5.16e-08, 75.000 (wgt'ed) examples reached here.  /* #pos=75 */
%   | | else return 0.13023405977032454;  // std dev = 0.046, 120.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=119 */
%   | else if ( genre(A, E) )
%   | | then return -0.06419184008202619;  // std dev = 5.27e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( actor(B) )
%   | | | then return -0.06419184008202626;  // std dev = 0.000, 106.000 (wgt'ed) examples reached here.  /* #neg=106 */
%   | | | else return 0.13400703000801095;  // std dev = 5.27e-09, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.06419184008202598;  // std dev = 1.08e-07, 294.000 (wgt'ed) examples reached here.  /* #neg=294 */


Results
   AUC ROC   = 0.988073
   AUC PR    = 0.631126
   CLL	      = -0.099686
   Precision = 0.784141 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.879012


Total learning time: 2.091 seconds
Total inference time: 1.023 seconds
AUC ROC: 0.988073


Results scoring model
   AUC ROC   = 0.999909
   AUC PR    = 0.981202
   CLL	      = -0.064303
   Precision = 0.995122 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.997555


Total scoring time: 1.546 seconds
Refined model CLL: -0.064303


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.988073
   AUC PR    = 0.631126
   CLL	      = -0.099686
   Precision = 0.784141 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.879012


Total learning time: 6.772 seconds
Total inference time: 1.023 seconds
AUC ROC: 0.988073
Total revision time: 6.772
Best scored revision CLL: -0.064303


Dataset: 4_cora_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 00:05:35
{'AUC ROC': 0.988073, 'AUC PR': 0.631126, 'CLL': -0.099686, 'Precision': [0.784141, 0.5], 'Recall': 1.0, 'F1': 0.879012, 'Learning time': 6.772, 'Inference time': 1.023, 'parameter_1.0': {'AUC ROC': 0.97199, 'AUC PR': 0.81824, 'CLL': -0.108939, 'Precision': [1.0, 0.5], 'Recall': 0.724719, 'F1': 0.840391, 'Learning time': 1.447, 'Inference time': 1.005}}


Starting fold 4

Target train facts examples: 927
Target train pos examples: 337
Target train neg examples: 12345

Target test facts examples: 151
Target test pos	 examples: 45
Target test neg examples: 1891

Amount of data: 0.2
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;haswordauthor(E, C).;true;true
7;true,true,true;author(F, E), title(F, D).;false;false
7;true,true,false;title(G, D), venue(G, B).;false;false
7;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
7;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
7;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, B).;false;true
8;true,true,false;title(F, D), venue(F, A).;false;false
8;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
8;true,false,false;haswordvenue(A, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
8;false,true;haswordauthor(M, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;true,true;author(F, E), venue(F, B).;true;true
9;true,true,true;samebib(F, G), venue(G, A).;false;false
9;true,true,false;author(H, E), venue(H, A).;false;false
9;true,false;haswordtitle(I, C).;true;true
9;true,false,true;title(J, I), venue(J, A).;false;false
9;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995125;  // std dev = 0.000, 61.000 (wgt'ed) examples reached here.  /* #pos=61 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.00548742853685133;  // std dev = 2.276, 44.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=6 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048763;  // std dev = 8.69e-08, 102.000 (wgt'ed) examples reached here.  /* #neg=102 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7058457017151584;  // std dev = 0.838, 62.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=61 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.06571215599038822;  // std dev = 2.181, 29.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=6 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.1254446385283913;  // std dev = 0.000, 120.000 (wgt'ed) examples reached here.  /* #neg=120 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1574426570768538;  // std dev = 0.124, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( movie(E, A) )
%   | | then return 0.3630783038398871;  // std dev = 0.344, 96.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=67 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360625;  // std dev = 6.99e-08, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.468274444137955;  // std dev = 2.06e-07, 61.000 (wgt'ed) examples reached here.  /* #pos=61 */
%   | else if ( genre(A, E) )
%   | | then return -0.09755086796895573;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.0015400049749533962;  // std dev = 2.191, 30.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=6 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783631;  // std dev = 0.000, 108.000 (wgt'ed) examples reached here.  /* #neg=108 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11709532234787254;  // std dev = 0.180, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( genre(B, E) )
%   | | then return 0.35540885873304723;  // std dev = 9.42e-08, 61.000 (wgt'ed) examples reached here.  /* #pos=61 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.0012922987641970547;  // std dev = 2.191, 30.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=6 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926086;  // std dev = 7.07e-08, 115.000 (wgt'ed) examples reached here.  /* #neg=115 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.25344626667676545;  // std dev = 0.912, 64.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=61 */
%   | else if ( movie(E, A) )
%   | | then return -0.03364779806474074;  // std dev = 0.362, 38.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=6 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839682;  // std dev = 5.77e-08, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07777046967553429;  // std dev = 1.86e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.23072845709993747;  // std dev = 0.000, 61.000 (wgt'ed) examples reached here.  /* #pos=61 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.0652986499008388;  // std dev = 2.284, 46.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=6 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.0787767547310916;  // std dev = 5.77e-08, 100.000 (wgt'ed) examples reached here.  /* #neg=100 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.16944270525166347;  // std dev = 0.826, 64.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=61 */
%   | else if ( movie(E, B) )
%   | | then return -0.017372076997852315;  // std dev = 2.231, 37.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=6 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.07324622576333707;  // std dev = 4.71e-08, 102.000 (wgt'ed) examples reached here.  /* #neg=102 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.16737122115522318;  // std dev = 0.000, 61.000 (wgt'ed) examples reached here.  /* #pos=61 */
%   | else if ( genre(A, E) )
%   | | then return -0.07121492819706293;  // std dev = 1.32e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.05695437311112718;  // std dev = 2.135, 25.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=6 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420265;  // std dev = 5.02e-09, 102.000 (wgt'ed) examples reached here.  /* #neg=102 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.14532546855628128;  // std dev = 0.000, 61.000 (wgt'ed) examples reached here.  /* #pos=61 */
%   | | else if ( genre(A, G) )
%   | | | then return -0.06664598112282508;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return -0.004216766639759864;  // std dev = 2.208, 32.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=6 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.06419184008202626;  // std dev = 2.69e-08, 102.000 (wgt'ed) examples reached here.  /* #neg=102 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.103781
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 0.962 seconds
Total inference time: 0.835 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.988647
   AUC PR    = 0.931996
   CLL	      = -0.105553
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.910448
   F1        = 0.953125


Total scoring time: 0.946 seconds
Parameter learned model CLL: -0.105553


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 3, 0], 'true,false,true': [0.0, 0, 61], 'true,false,false,true': [2.276, 38, 6], 'true,false,false,false': [0.0, 0, 0], 'false,true': [8.69e-08, 102, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.838, 1, 61], 'true,false,true': [0.0, 4, 0], 'true,false,false,true': [2.181, 23, 6], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 120, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.124, 5, 0], 'true,false,true': [0.344, 29, 67], 'true,false,false': [0.0, 0, 0], 'false,true': [6.99e-08, 92, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [2.06e-07, 0, 61], 'true,false,true': [0.0, 3, 0], 'true,false,false,true': [2.191, 24, 6], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 108, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.18, 7, 0], 'true,false,true': [9.42e-08, 0, 61], 'true,false,false,true': [2.191, 24, 6], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.07e-08, 115, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.912, 3, 61], 'true,false,true': [0.362, 32, 6], 'true,false,false': [0.0, 0, 0], 'false,true': [5.77e-08, 103, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [1.86e-09, 3, 0], 'true,false,true': [0.0, 0, 61], 'true,false,false,true': [2.284, 40, 6], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.77e-08, 100, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.826, 3, 61], 'true,false,true': [2.231, 31, 6], 'true,false,false': [0.0, 0, 0], 'false,true': [4.71e-08, 102, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 61], 'true,false,true': [1.32e-09, 3, 0], 'true,false,false,true': [2.135, 19, 6], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.02e-09, 102, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true,true,false': 'genre(A, G)'}, {'true,true,true,true': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 61], 'true,true,false,true': [0.0, 4, 0], 'true,true,false,false': [2.208, 26, 6], 'true,false': [0.0, 0, 0], 'false': [2.69e-08, 102, 0]}]]
[{'': [0.23551097393689918, 7.401486830834377e-17], 'true': [0.0, 0.23092970521541878], 'true,false': [-6.988944941902625e-16, 0.11776859504132253], 'true,false,false': [0.11776859504132253, nan], 'false': [7.401486830834377e-17, nan]}, {'': [0.1585795093951533, -1.8503717077085942e-18], 'true': [0.011328584094790869, 0.1480929563720308], 'true,false': [0.0, 0.16409036860879928], 'true,false,false': [0.16409036860879928, nan], 'false': [-1.8503717077085942e-18, nan]}, {'': [0.12553468400555404, 5.3097622916855314e-17], 'true': [0.003054571568772932, 0.11850088272861563], 'true,false': [0.11850088272861563, nan], 'false': [5.3097622916855314e-17, nan]}, {'': [0.10350231688905871, -2.05596856412066e-18], 'true': [6.988944941902625e-16, 0.146216370728335], 'true,false': [-1.1564823173178713e-18, 0.16000000000000006], 'true,false,false': [0.16000000000000006, nan], 'false': [-2.05596856412066e-18, nan]}, {'': [0.0837745744027633, 4.344350965924526e-17], 'true': [0.0046375734406745245, 0.08086479408773918], 'true,false': [1.4560301962297134e-16, 0.1600000000000002], 'true,false,false': [0.1600000000000002, nan], 'false': [4.344350965924526e-17, nan]}, {'': [0.07623330404046352, 3.2336592950247276e-17], 'true': [0.013001271223545732, 0.1310129658931474], 'true,false': [0.1310129658931474, nan], 'false': [3.2336592950247276e-17, nan]}, {'': [0.06919392035932251, 3.3306690738754695e-17], 'true': [1.1564823173178713e-18, 0.07023813402704086], 'true,false': [-1.310427176606742e-16, 0.11342155009451807], 'true,false,false': [0.11342155009451807, nan], 'false': [3.3306690738754695e-17, nan]}, {'': [0.06413698566286423, 2.1769078914218755e-17], 'true': [0.010652612599760223, 0.1345357946034592], 'true,false': [0.1345357946034592, nan], 'false': [2.1769078914218755e-17, nan]}, {'': [0.055053862316931, 2.44902137784961e-17], 'true': [-1.0920226471722851e-17, 0.1644286386923946], 'true,false': [5.782411586589357e-19, 0.18240000000000026], 'true,false,false': [0.18240000000000026, nan], 'false': [2.44902137784961e-17, nan]}, {'': [0.056115378099657096, 7.074950647121095e-18], 'true': [0.056115378099657096, nan], 'true,true': [-5.4601132358614255e-17, 0.1358015957354045], 'true,true,false': [0.0, 0.1523437499999998], 'true,true,true': [nan, -5.4601132358614255e-17]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, E).;true;true
9;true,false;genre(A, G).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995125;  // std dev = 0.000, 61.000 (wgt'ed) examples reached here.  /* #pos=61 */
%   | | else if ( actor(B) )
%   | | | then return -0.14185106490048774;  // std dev = 1.05e-08, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.14185106490048763;  // std dev = 8.16e-08, 87.000 (wgt'ed) examples reached here.  /* #neg=87 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109543;  // std dev = 0.000, 61.000 (wgt'ed) examples reached here.  /* #pos=61 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( actor(B) )
%   | | | then return -0.1254446385283913;  // std dev = 2.58e-08, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | | | else return 0.7194734122109544;  // std dev = 2.11e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.12544463852839138;  // std dev = 0.000, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.5553664367462837;  // std dev = 2.06e-07, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.11527027358742863;  // std dev = 0.114, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.11231637819360618;  // std dev = 8.82e-08, 111.000 (wgt'ed) examples reached here.  /* #neg=111 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.41751358415831036;  // std dev = 0.000, 61.000 (wgt'ed) examples reached here.  /* #pos=61 */
%   | else if ( genre(A, E) )
%   | | then return -0.10132703123496654;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( actor(B) )
%   | | | then return -0.10132703123496654;  // std dev = 0.000, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | | else return 0.4175135841583102;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.1015963294878363;  // std dev = 2.11e-08, 104.000 (wgt'ed) examples reached here.  /* #neg=104 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1886981356656217;  // std dev = 0.192, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.3207118471601498;  // std dev = 0.000, 61.000 (wgt'ed) examples reached here.  /* #pos=61 */
%   | | else if ( actor(B) )
%   | | | then return -0.09246574937409203;  // std dev = 9.13e-09, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | | else return 0.3207118471601497;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.09269127618926103;  // std dev = 3.16e-08, 91.000 (wgt'ed) examples reached here.  /* #neg=91 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.25517224256948967;  // std dev = 0.000, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.09562314080570916;  // std dev = 0.274, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
%   else return -0.08518475138839682;  // std dev = 5.37e-08, 96.000 (wgt'ed) examples reached here.  /* #neg=96 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07121232290946188;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(B, E) )
%   | | then return 0.20975771563253565;  // std dev = 0.000, 61.000 (wgt'ed) examples reached here.  /* #pos=61 */
%   | | else if ( actor(B) )
%   | | | then return -0.07784584374198407;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | | else return 0.20975771563253556;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.07877675473109158;  // std dev = 5.87e-08, 101.000 (wgt'ed) examples reached here.  /* #neg=101 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.17709649774527725;  // std dev = 0.000, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.08477397500493515;  // std dev = 0.242, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   else return -0.07324622576333707;  // std dev = 0.000, 81.000 (wgt'ed) examples reached here.  /* #neg=81 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14698720733956844;  // std dev = 0.354, 62.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=61 */
%   | else if ( genre(A, E) )
%   | | then return -0.06156034838910675;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( actor(B) )
%   | | | then return -0.06694444063068829;  // std dev = 0.000, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | | | else return 0.15274385809367097;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.06842697784420265;  // std dev = 4.94e-08, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.13467649305005566;  // std dev = 0.000, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | else return 0.12213280877753335;  // std dev = 0.066, 29.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=28 */
%   | else if ( genre(A, E) )
%   | | then return -0.05809849602483419;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( female(A), director(B) )
%   | | | then return 0.13400703000801117;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.08042164031861412;  // std dev = 0.570, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   else return -0.06419184008202626;  // std dev = 0.000, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063634
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.312 seconds
Total inference time: 0.835 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.068469
   Precision = 0.87013 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.930556


Total scoring time: 0.893 seconds
Refined model CLL: -0.068469


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063634
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 4.1129999999999995 seconds
Total inference time: 0.835 seconds
AUC ROC: 1.0
Total revision time: 4.1129999999999995
Best scored revision CLL: -0.068469


Dataset: 4_cora_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 00:05:42
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063634, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 4.1129999999999995, 'Inference time': 0.835, 'parameter_0.2': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.103781, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 0.962, 'Inference time': 0.835}}


Amount of data: 0.4
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;haswordauthor(E, C).;true;true
7;true,true,true;author(F, E), title(F, D).;false;false
7;true,true,false;title(G, D), venue(G, B).;false;false
7;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
7;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
7;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, B).;false;true
8;true,true,false;title(F, D), venue(F, A).;false;false
8;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
8;true,false,false;haswordvenue(A, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
8;false,true;haswordauthor(M, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;true,true;author(F, E), venue(F, B).;true;true
9;true,true,true;samebib(F, G), venue(G, A).;false;false
9;true,true,false;author(H, E), venue(H, A).;false;false
9;true,false;haswordtitle(I, C).;true;true
9;true,false,true;title(J, I), venue(J, A).;false;false
9;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995108;  // std dev = 5.72e-07, 112.000 (wgt'ed) examples reached here.  /* #pos=112 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.09990717685775369;  // std dev = 4.084, 91.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=22 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.1418510649004882;  // std dev = 0.000, 167.000 (wgt'ed) examples reached here.  /* #neg=167 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7046502885137734;  // std dev = 1.184, 114.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=112 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.08467729254607122;  // std dev = 4.091, 92.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=22 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839155;  // std dev = 0.000, 185.000 (wgt'ed) examples reached here.  /* #neg=185 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1348378239413977;  // std dev = 0.142, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( movie(E, A) )
%   | | then return 0.3399683858742211;  // std dev = 0.375, 204.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=134 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360664;  // std dev = 0.000, 199.000 (wgt'ed) examples reached here.  /* #neg=199 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.46834288548927894;  // std dev = 0.674, 113.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=112 */
%   | else if ( genre(A, E) )
%   | | then return -0.09955906120101826;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.03748773666633159;  // std dev = 4.046, 86.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=22 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783656;  // std dev = 0.000, 216.000 (wgt'ed) examples reached here.  /* #neg=216 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11071375262034541;  // std dev = 0.187, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( genre(B, E) )
%   | | then return 0.3609806234365842;  // std dev = 7.30e-08, 112.000 (wgt'ed) examples reached here.  /* #pos=112 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.022399631221745257;  // std dev = 4.070, 89.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=22 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926055;  // std dev = 9.42e-08, 208.000 (wgt'ed) examples reached here.  /* #neg=208 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2728757792504726;  // std dev = 0.769, 114.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=112 */
%   | else if ( movie(E, A) )
%   | | then return 0.03163961431745885;  // std dev = 0.426, 89.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=22 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 7.30e-08, 189.000 (wgt'ed) examples reached here.  /* #neg=189 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.2631644287760492;  // std dev = 0.206, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.23059281172764193;  // std dev = 0.000, 112.000 (wgt'ed) examples reached here.  /* #pos=112 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.06702179019918127;  // std dev = 3.920, 73.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=22 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109146;  // std dev = 6.66e-08, 218.000 (wgt'ed) examples reached here.  /* #neg=218 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18816086293737555;  // std dev = 0.458, 113.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=112 */
%   | else if ( movie(E, B) )
%   | | then return -0.02638402740051282;  // std dev = 4.138, 104.000 (wgt'ed) examples reached here.  /* #neg=82 #pos=22 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.07324622576333673;  // std dev = 9.83e-08, 173.000 (wgt'ed) examples reached here.  /* #neg=173 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1605225596123133;  // std dev = 0.469, 113.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=112 */
%   | else if ( genre(A, E) )
%   | | then return -0.06474787989206786;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.020186543609994115;  // std dev = 4.030, 84.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=22 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420262;  // std dev = 5.74e-09, 192.000 (wgt'ed) examples reached here.  /* #neg=192 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.14377998362296104;  // std dev = 0.000, 112.000 (wgt'ed) examples reached here.  /* #pos=112 */
%   | | else if ( genre(A, G) )
%   | | | then return -0.060935796200548564;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.0366137963769677;  // std dev = 3.974, 78.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=22 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.06419184008202626;  // std dev = 0.000, 196.000 (wgt'ed) examples reached here.  /* #neg=196 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.123935
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.161 seconds
Total inference time: 0.862 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.979652
   AUC PR    = 0.873296
   CLL	      = -0.124245
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.835821
   F1        = 0.910569


Total scoring time: 1.173 seconds
Parameter learned model CLL: -0.124245


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 10, 0], 'true,false,true': [5.72e-07, 0, 112], 'true,false,false,true': [4.084, 69, 22], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 167, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.184, 2, 112], 'true,false,true': [0.0, 3, 0], 'true,false,false,true': [4.091, 70, 22], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 185, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.142, 10, 0], 'true,false,true': [0.375, 70, 134], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 199, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.674, 1, 112], 'true,false,true': [0.0, 2, 0], 'true,false,false,true': [4.046, 64, 22], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 216, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.187, 10, 0], 'true,false,true': [7.3e-08, 0, 112], 'true,false,false,true': [4.07, 67, 22], 'true,false,false,false': [0.0, 0, 0], 'false,true': [9.42e-08, 208, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.769, 2, 112], 'true,false,true': [0.426, 67, 22], 'true,false,false': [0.0, 0, 0], 'false,true': [7.3e-08, 189, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.206, 4, 0], 'true,false,true': [0.0, 0, 112], 'true,false,false,true': [3.92, 51, 22], 'true,false,false,false': [0.0, 0, 0], 'false,true': [6.66e-08, 218, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.458, 1, 112], 'true,false,true': [4.138, 82, 22], 'true,false,false': [0.0, 0, 0], 'false,true': [9.83e-08, 173, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.469, 1, 112], 'true,false,true': [0.0, 6, 0], 'true,false,false,true': [4.03, 62, 22], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.74e-09, 192, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true,true,false': 'genre(A, G)'}, {'true,true,true,true': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 112], 'true,true,false,true': [0.0, 8, 0], 'true,true,false,false': [3.974, 56, 22], 'true,false': [0.0, 0, 0], 'false': [0.0, 196, 0]}]]
[{'': [0.2333311291851308, -1.6753066000331702e-16], 'true': [-1.1102230246251566e-17, 0.22436846319979092], 'true,false': [2.91830052187184e-15, 0.1833111943002062], 'true,false,false': [0.1833111943002062, nan], 'false': [-1.6753066000331702e-16, nan]}, {'': [0.1847651634739353, -1.9203857723245952e-17], 'true': [0.012304599783948109, 0.17755159331388745], 'true,false': [0.0, 0.1819470699432882], 'true,false,false': [0.1819470699432882, nan], 'false': [-1.9203857723245952e-17, nan]}, {'': [0.14404444377086145, -2.6779248835179654e-17], 'true': [0.0020288620742828474, 0.14047136867457555], 'true,false': [0.14047136867457555, nan], 'false': [-2.6779248835179654e-17, nan]}, {'': [0.13024746873239085, -8.018277400070575e-17], 'true': [0.00401561945136548, 0.1864636699267934], 'true,false': [0.0, 0.19037317468902068], 'true,false,false': [0.19037317468902068, nan], 'false': [-8.018277400070575e-17, nan]}, {'': [0.11027604698337014, 4.2700885562506023e-17], 'true': [0.0035037665273111055, 0.11068101889510656], 'true,false': [4.7580986769649563e-17, 0.18608761520010073], 'true,false,false': [0.18608761520010073, nan], 'false': [4.2700885562506023e-17, nan]}, {'': [0.09674222179524206, 2.819614030794048e-17], 'true': [0.005187751363411748, 0.18133336744620093], 'true,false': [0.18133336744620093, nan], 'false': [2.819614030794048e-17, nan]}, {'': [0.09161957366529451, 2.0371064672021222e-17], 'true': [0.01062233181244697, 0.08947194899996853], 'true,false': [-2.458350983098561e-16, 0.21054606868080333], 'true,false,false': [0.21054606868080333, nan], 'false': [2.0371064672021222e-17, nan]}, {'': [0.09134686699365993, 5.583202493779689e-17], 'true': [0.0018580340252315976, 0.16461064189840363], 'true,false': [0.16461064189840363, nan], 'false': [5.583202493779689e-17, nan]}, {'': [0.0865341130543347, 3.2959746043559335e-17], 'true': [0.00194740466753146, 0.18087214259278622], 'true,false': [-1.1564823173178713e-18, 0.19331065759637195], 'true,false,false': [0.19331065759637195, nan], 'false': [3.2959746043559335e-17, nan]}, {'': [0.08344051641653132, -2.2657612747452172e-18], 'true': [0.08344051641653132, nan], 'true,true': [-9.516197353929913e-17, 0.18446415769584676], 'true,true,false': [0.0, 0.2024983563445096], 'true,true,true': [nan, -9.516197353929913e-17]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, E).;true;true
9;true,false;genre(A, G).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995108;  // std dev = 5.72e-07, 112.000 (wgt'ed) examples reached here.  /* #pos=112 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.8581489350995121;  // std dev = 5.96e-08, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | | else return -0.14185106490048766;  // std dev = 6.50e-08, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
%   else return -0.14185106490048846;  // std dev = 0.000, 213.000 (wgt'ed) examples reached here.  /* #neg=213 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.7194734122109544;  // std dev = 5.96e-08, 61.000 (wgt'ed) examples reached here.  /* #pos=61 */
%   | | else return 0.703224988158275;  // std dev = 0.116, 52.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=51 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( actor(B) )
%   | | | then return -0.12544463852839158;  // std dev = 0.000, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
%   | | | else return 0.6827378447875044;  // std dev = 0.826, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   else return -0.12544463852839163;  // std dev = 0.000, 199.000 (wgt'ed) examples reached here.  /* #neg=199 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.13478814805496017;  // std dev = 0.142, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( actor(B) )
%   | | then return -0.11231637819360624;  // std dev = 5.87e-08, 73.000 (wgt'ed) examples reached here.  /* #neg=73 */
%   | | else return 0.5583782241110468;  // std dev = 0.038, 134.000 (wgt'ed) examples reached here.  /* #pos=134 */
%   else return -0.1123163781936064;  // std dev = 0.000, 173.000 (wgt'ed) examples reached here.  /* #neg=173 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.4167813120178758;  // std dev = 1.40e-07, 61.000 (wgt'ed) examples reached here.  /* #pos=61 */
%   | | else return 0.4087591345526534;  // std dev = 0.086, 52.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=51 */
%   | else if ( genre(A, E) )
%   | | then return -0.09956351458650571;  // std dev = 5.27e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.4257371688934796;  // std dev = 3.65e-08, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | | else return -0.10483651202893247;  // std dev = 0.228, 71.000 (wgt'ed) examples reached here.  /* #neg=71 */
%   else return -0.10159632948783653;  // std dev = 0.000, 202.000 (wgt'ed) examples reached here.  /* #neg=202 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1834668778591234;  // std dev = 0.185, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.3226315955046868;  // std dev = 0.028, 112.000 (wgt'ed) examples reached here.  /* #pos=112 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.32629242288794225;  // std dev = 5.96e-08, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | | else return -0.10210939923124876;  // std dev = 0.366, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
%   else return -0.09269127618926054;  // std dev = 9.54e-08, 211.000 (wgt'ed) examples reached here.  /* #neg=211 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2568928920289152;  // std dev = 0.027, 134.000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.091942953757388;  // std dev = 0.266, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   else return -0.08518475138839678;  // std dev = 6.83e-08, 168.000 (wgt'ed) examples reached here.  /* #neg=168 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07062965578596185;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.21061666861903322;  // std dev = 0.021, 112.000 (wgt'ed) examples reached here.  /* #pos=112 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.2127903010530385;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | | else return -0.08042099908107576;  // std dev = 0.190, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
%   else return -0.07877675473109147;  // std dev = 7.15e-08, 204.000 (wgt'ed) examples reached here.  /* #neg=204 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1777269461461838;  // std dev = 0.019, 112.000 (wgt'ed) examples reached here.  /* #pos=112 */
%   | else if ( actor(A), director(B) )
%   | | then return 0.17931758015266694;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else return -0.07404938059037902;  // std dev = 0.181, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
%   else return -0.07324622576333663;  // std dev = 1.26e-07, 210.000 (wgt'ed) examples reached here.  /* #neg=210 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( actor(A) )
%   | | then return 0.15322241354082713;  // std dev = 0.017, 112.000 (wgt'ed) examples reached here.  /* #pos=112 */
%   | | else return -0.24361385091722831;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(A, E) )
%   | | then return -0.061702869379259825;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( actor(B) )
%   | | | then return -0.0670463514753692;  // std dev = 2.47e-08, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
%   | | | else return 0.1544266921298627;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   else return -0.06842697784420262;  // std dev = 8.09e-08, 197.000 (wgt'ed) examples reached here.  /* #neg=197 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13140792541374563;  // std dev = 0.335, 113.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=112 */
%   | else if ( genre(A, E) )
%   | | then return -0.05822568397695583;  // std dev = 2.63e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.1353194256336206;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | | else return -0.06665150003521089;  // std dev = 0.204, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   else return -0.06419184008202626;  // std dev = 0.000, 203.000 (wgt'ed) examples reached here.  /* #neg=203 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.06379
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.719 seconds
Total inference time: 0.847 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.065609
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.154 seconds
Refined model CLL: -0.065609


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.06379
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 5.207 seconds
Total inference time: 0.847 seconds
AUC ROC: 1.0
Total revision time: 5.207
Best scored revision CLL: -0.065609


Dataset: 4_cora_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 00:05:49
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.06379, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 5.207, 'Inference time': 0.847, 'parameter_0.4': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.123935, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 1.161, 'Inference time': 0.862}}


Amount of data: 0.6
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;haswordauthor(E, C).;true;true
7;true,true,true;author(F, E), title(F, D).;false;false
7;true,true,false;title(G, D), venue(G, B).;false;false
7;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
7;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
7;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, B).;false;true
8;true,true,false;title(F, D), venue(F, A).;false;false
8;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
8;true,false,false;haswordvenue(A, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
8;false,true;haswordauthor(M, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;true,true;author(F, E), venue(F, B).;true;true
9;true,true,true;samebib(F, G), venue(G, A).;false;false
9;true,true,false;author(H, E), venue(H, A).;false;false
9;true,false;haswordtitle(I, C).;true;true
9;true,false,true;title(J, I), venue(J, A).;false;false
9;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995096;  // std dev = 1.07e-06, 170.000 (wgt'ed) examples reached here.  /* #pos=170 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.1081489350995111;  // std dev = 4.899, 128.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=32 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.141851064900488;  // std dev = 0.000, 280.000 (wgt'ed) examples reached here.  /* #neg=280 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7096487837139874;  // std dev = 1.188, 172.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=170 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.10046743783575632;  // std dev = 4.879, 125.000 (wgt'ed) examples reached here.  /* #neg=93 #pos=32 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839205;  // std dev = 0.000, 319.000 (wgt'ed) examples reached here.  /* #neg=319 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12852778237555346;  // std dev = 0.105, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( movie(E, A) )
%   | | then return 0.35291362646787056;  // std dev = 0.369, 298.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=202 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360674;  // std dev = 0.000, 312.000 (wgt'ed) examples reached here.  /* #neg=312 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4620217726579077;  // std dev = 0.948, 172.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=170 */
%   | else if ( genre(A, E) )
%   | | then return -0.1001261689269071;  // std dev = 6.45e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.033362099578053035;  // std dev = 4.873, 124.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=32 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.1015963294878366;  // std dev = 0.000, 279.000 (wgt'ed) examples reached here.  /* #neg=279 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.0914589648504769;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( genre(B, E) )
%   | | then return 0.3583039460320932;  // std dev = 0.000, 170.000 (wgt'ed) examples reached here.  /* #pos=170 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.023400458072658545;  // std dev = 4.886, 126.000 (wgt'ed) examples reached here.  /* #neg=94 #pos=32 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926044;  // std dev = 1.26e-07, 271.000 (wgt'ed) examples reached here.  /* #neg=271 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.264931766647004;  // std dev = 1.216, 175.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=170 */
%   | else if ( movie(E, A) )
%   | | then return 1.5232148319575654E-4;  // std dev = 0.414, 142.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=32 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 1.01e-07, 288.000 (wgt'ed) examples reached here.  /* #neg=288 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1501745961774402;  // std dev = 0.358, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( genre(B, E) )
%   | | then return 0.23041509700142856;  // std dev = 0.000, 170.000 (wgt'ed) examples reached here.  /* #pos=170 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.017195807460925937;  // std dev = 4.893, 127.000 (wgt'ed) examples reached here.  /* #neg=95 #pos=32 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109141;  // std dev = 3.65e-08, 309.000 (wgt'ed) examples reached here.  /* #neg=309 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18367410864774078;  // std dev = 0.835, 173.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=170 */
%   | else if ( movie(E, B) )
%   | | then return 0.03346268337345693;  // std dev = 4.811, 124.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=32 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.07324622576333704;  // std dev = 8.56e-08, 322.000 (wgt'ed) examples reached here.  /* #neg=322 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.16519686643557302;  // std dev = 1.03e-07, 170.000 (wgt'ed) examples reached here.  /* #pos=170 */
%   | else if ( genre(A, E) )
%   | | then return -0.07558046147705742;  // std dev = 1.86e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.03670608552710335;  // std dev = 4.798, 114.000 (wgt'ed) examples reached here.  /* #neg=82 #pos=32 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420308;  // std dev = 0.000, 320.000 (wgt'ed) examples reached here.  /* #neg=320 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return -0.37132444671458714;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0.1436554721424844;  // std dev = 1.33e-07, 170.000 (wgt'ed) examples reached here.  /* #pos=170 */
%   | | else if ( genre(A, G) )
%   | | | then return -0.07046628747805703;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return -0.013792956033516178;  // std dev = 4.941, 135.000 (wgt'ed) examples reached here.  /* #neg=103 #pos=32 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.06419184008202584;  // std dev = 1.40e-07, 324.000 (wgt'ed) examples reached here.  /* #neg=324 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.122589
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.507 seconds
Total inference time: 0.868 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.980655
   AUC PR    = 0.878065
   CLL	      = -0.121874
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.841584
   F1        = 0.913978


Total scoring time: 1.39 seconds
Parameter learned model CLL: -0.121874


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 5, 0], 'true,false,true': [1.07e-06, 0, 170], 'true,false,false,true': [4.899, 96, 32], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 280, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.188, 2, 170], 'true,false,true': [0.0, 6, 0], 'true,false,false,true': [4.879, 93, 32], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 319, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.105, 7, 0], 'true,false,true': [0.369, 96, 202], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 312, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.948, 2, 170], 'true,false,true': [6.45e-09, 10, 0], 'true,false,false,true': [4.873, 92, 32], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 279, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 7, 0], 'true,false,true': [0.0, 0, 170], 'true,false,false,true': [4.886, 94, 32], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.26e-07, 271, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [1.216, 5, 170], 'true,false,true': [0.414, 110, 32], 'true,false,false': [0.0, 0, 0], 'false,true': [1.01e-07, 288, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.358, 11, 0], 'true,false,true': [0.0, 0, 170], 'true,false,false,true': [4.893, 95, 32], 'true,false,false,false': [0.0, 0, 0], 'false,true': [3.65e-08, 309, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.835, 3, 170], 'true,false,true': [4.811, 92, 32], 'true,false,false': [0.0, 0, 0], 'false,true': [8.56e-08, 322, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [1.03e-07, 0, 170], 'true,false,true': [1.86e-09, 3, 0], 'true,false,false,true': [4.798, 82, 32], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 320, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true,true,false': 'genre(A, G)'}, {'true,true,true,true': [0.0, 1, 0], 'true,true,true,false': [1.33e-07, 0, 170], 'true,true,false,true': [0.0, 11, 0], 'true,true,false,false': [4.941, 103, 32], 'true,false': [0.0, 0, 0], 'false': [1.4e-07, 324, 0]}]]
[{'': [0.2222222222222269, -2.5376526277146434e-17], 'true': [-2.7755575615628915e-18, 0.21836854195757424], 'true,false': [6.687461042448002e-15, 0.18750000000000122], 'true,false,false': [0.18750000000000122, nan], 'false': [-2.5376526277146434e-17, nan]}, {'': [0.17839290641259103, -8.909626780690911e-17], 'true': [0.008204482633790915, 0.18397093407641685], 'true,false': [-2.3129646346357427e-18, 0.19046400000000108], 'true,false,false': [0.19046400000000108, nan], 'false': [-8.909626780690911e-17, nan]}, {'': [0.13839061612342538, -5.978123978750843e-17], 'true': [0.001576857753302699, 0.13628468733509996], 'true,false': [0.13628468733509996, nan], 'false': [-5.978123978750843e-17, nan]}, {'': [0.12841679508511794, -5.889355112706924e-17], 'true': [0.005220554009269439, 0.17840917024649014], 'true,false': [4.163336342344337e-18, 0.19146722164411994], 'true,false,false': [0.19146722164411994, nan], 'false': [-5.889355112706924e-17, nan]}, {'': [0.10770573168811114, 5.899340057048802e-17], 'true': [0.0, 0.10807258166353026], 'true,false': [-5.224578939412502e-16, 0.18946837994457108], 'true,false,false': [0.18946837994457108, nan], 'false': [5.899340057048802e-17, nan]}, {'': [0.09887245503583239, 3.5465457731081387e-17], 'true': [0.008443918337989952, 0.1716128342949237], 'true,false': [0.1716128342949237, nan], 'false': [3.5465457731081387e-17, nan]}, {'': [0.09174732777120156, 4.311545726699637e-18], 'true': [0.011624784926344866, 0.09172336119061576], 'true,false': [-1.3583905242472505e-16, 0.1884803769607546], 'true,false,false': [0.1884803769607546, nan], 'false': [4.311545726699637e-18, nan]}, {'': [0.08575144831804657, 2.2756124107223705e-17], 'true': [0.004028763496851512, 0.18662474204522125], 'true,false': [0.18662474204522125, nan], 'false': [2.2756124107223705e-17, nan]}, {'': [0.08449629354629709, -7.355227538141662e-17], 'true': [6.269494727295002e-17, 0.19704614357901754], 'true,false': [1.1564823173178713e-18, 0.2019082794706054], 'true,false,false': [0.2019082794706054, nan], 'false': [-7.355227538141662e-17, nan]}, {'': [0.08421090745815264, 6.030841121420603e-17], 'true': [0.08421090745815264, nan], 'true,true': [0.0015418328326811364, 0.16744851682825404], 'true,true,false': [-1.261617073437678e-18, 0.18085048010974036], 'true,true,true': [0.0, 1.0449157878825003e-16]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, E).;true;true
9;true,true;genre(A, F).;true;true
9;true,false;genre(A, G).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995096;  // std dev = 1.07e-06, 170.000 (wgt'ed) examples reached here.  /* #pos=170 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.8581489350995116;  // std dev = 2.15e-07, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | | else return -0.14185106490048763;  // std dev = 8.56e-08, 97.000 (wgt'ed) examples reached here.  /* #neg=97 */
%   else return -0.14185106490048793;  // std dev = 0.000, 285.000 (wgt'ed) examples reached here.  /* #neg=285 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.7194734122109542;  // std dev = 2.38e-07, 81.000 (wgt'ed) examples reached here.  /* #pos=81 */
%   | | else return 0.7009037847221771;  // std dev = 0.124, 91.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=89 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.7194734122109547;  // std dev = 0.000, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | | else return -0.12544463852839144;  // std dev = 0.000, 91.000 (wgt'ed) examples reached here.  /* #neg=91 */
%   else return -0.125444638528392;  // std dev = 0.000, 294.000 (wgt'ed) examples reached here.  /* #neg=294 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.13470733074442998;  // std dev = 0.200, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else if ( actor(A), director(B) )
%   | | then return 0.5573846402271229;  // std dev = 0.032, 202.000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | | else return -0.11231637819360621;  // std dev = 7.45e-08, 98.000 (wgt'ed) examples reached here.  /* #neg=98 */
%   else return -0.11231637819360697;  // std dev = 0.000, 284.000 (wgt'ed) examples reached here.  /* #neg=284 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.4170228470240682;  // std dev = 0.000, 81.000 (wgt'ed) examples reached here.  /* #pos=81 */
%   | | else if ( actor(A) )
%   | | | then return 0.4215442350270748;  // std dev = 0.000, 89.000 (wgt'ed) examples reached here.  /* #pos=89 */
%   | | | else return -0.20170779507465914;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(A, E) )
%   | | then return -0.09957076014307263;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.4170228470240675;  // std dev = 0.000, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | | else return -0.10159632948783624;  // std dev = 4.71e-08, 97.000 (wgt'ed) examples reached here.  /* #neg=97 */
%   else return -0.1015963294878366;  // std dev = 0.000, 276.000 (wgt'ed) examples reached here.  /* #neg=276 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.10435547892589918;  // std dev = 0.104, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else if ( genre(B, E) )
%   | | then return 0.3219845739007663;  // std dev = 0.020, 170.000 (wgt'ed) examples reached here.  /* #pos=170 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.3203791709912618;  // std dev = 3.65e-08, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | | else return -0.092691276189261;  // std dev = 3.65e-08, 98.000 (wgt'ed) examples reached here.  /* #neg=98 */
%   else return -0.09269127618926042;  // std dev = 1.63e-07, 309.000 (wgt'ed) examples reached here.  /* #neg=309 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2558675095913217;  // std dev = 0.018, 202.000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.08564605157573905;  // std dev = 0.072, 102.000 (wgt'ed) examples reached here.  /* #neg=102 */
%   else return -0.08518475138839678;  // std dev = 9.88e-08, 279.000 (wgt'ed) examples reached here.  /* #neg=279 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08339285148933981;  // std dev = 0.066, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( genre(B, E) )
%   | | then return 0.21040050046111833;  // std dev = 0.015, 170.000 (wgt'ed) examples reached here.  /* #pos=170 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.20944459271870944;  // std dev = 4.21e-08, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | | else return -0.07874328422976715;  // std dev = 4.21e-08, 81.000 (wgt'ed) examples reached here.  /* #neg=81 */
%   else return -0.07877675473109141;  // std dev = 3.65e-08, 314.000 (wgt'ed) examples reached here.  /* #neg=314 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.1774569549896317;  // std dev = 0.014, 202.000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.07296371171277102;  // std dev = 0.008, 116.000 (wgt'ed) examples reached here.  /* #neg=116 */
%   else return -0.07324622576333699;  // std dev = 9.42e-08, 304.000 (wgt'ed) examples reached here.  /* #neg=304 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1514753173375076;  // std dev = 0.280, 171.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=170 */
%   | else if ( genre(A, E) )
%   | | then return -0.06611659092605661;  // std dev = 4.56e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.15249330275530049;  // std dev = 0.000, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | | else return -0.06841771531966685;  // std dev = 3.87e-08, 83.000 (wgt'ed) examples reached here.  /* #neg=83 */
%   else return -0.06842697784420292;  // std dev = 0.000, 283.000 (wgt'ed) examples reached here.  /* #neg=283 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( genre(A, E) )
%   | | then return -0.14526334074052882;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0.13448849254031808;  // std dev = 0.011, 170.000 (wgt'ed) examples reached here.  /* #pos=170 */
%   | else if ( genre(A, F) )
%   | | then return -0.06214945936365503;  // std dev = 3.73e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.13381139493431427;  // std dev = 0.000, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | | else return -0.06418366768647223;  // std dev = 0.000, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
%   else return -0.06419184008202596;  // std dev = 1.17e-07, 301.000 (wgt'ed) examples reached here.  /* #neg=301 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063974
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.145 seconds
Total inference time: 0.864 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064409
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.36 seconds
Refined model CLL: -0.064409


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063974
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 6.402 seconds
Total inference time: 0.864 seconds
AUC ROC: 1.0
Total revision time: 6.402
Best scored revision CLL: -0.064409


Dataset: 4_cora_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 00:05:58
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063974, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 6.402, 'Inference time': 0.864, 'parameter_0.6': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.122589, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 1.507, 'Inference time': 0.868}}


Amount of data: 0.8
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;haswordauthor(E, C).;true;true
7;true,true,true;author(F, E), title(F, D).;false;false
7;true,true,false;title(G, D), venue(G, B).;false;false
7;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
7;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
7;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, B).;false;true
8;true,true,false;title(F, D), venue(F, A).;false;false
8;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
8;true,false,false;haswordvenue(A, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
8;false,true;haswordauthor(M, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;true,true;author(F, E), venue(F, B).;true;true
9;true,true,true;samebib(F, G), venue(G, A).;false;false
9;true,true,false;author(H, E), venue(H, A).;false;false
9;true,false;haswordtitle(I, C).;true;true
9;true,false,true;title(J, I), venue(J, A).;false;false
9;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else if ( genre(B, E) )
%   | | then return 0.858148935099509;  // std dev = 1.08e-06, 225.000 (wgt'ed) examples reached here.  /* #pos=225 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.14573063444591716;  // std dev = 5.599, 153.000 (wgt'ed) examples reached here.  /* #neg=109 #pos=44 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.1418510649004874;  // std dev = 2.83e-07, 385.000 (wgt'ed) examples reached here.  /* #neg=385 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.70471501831158;  // std dev = 1.675, 229.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=225 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.12333820058844208;  // std dev = 5.613, 155.000 (wgt'ed) examples reached here.  /* #neg=111 #pos=44 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.1254446385283922;  // std dev = 0.000, 356.000 (wgt'ed) examples reached here.  /* #neg=356 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.13644891679609925;  // std dev = 0.173, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else if ( movie(E, A) )
%   | | then return 0.3363451578693637;  // std dev = 0.378, 408.000 (wgt'ed) examples reached here.  /* #neg=139 #pos=269 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360633;  // std dev = 0.000, 377.000 (wgt'ed) examples reached here.  /* #neg=377 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4663067384699317;  // std dev = 1.165, 228.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=225 */
%   | else if ( genre(A, E) )
%   | | then return -0.09941472462162257;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.026383793818013333;  // std dev = 5.711, 170.000 (wgt'ed) examples reached here.  /* #neg=126 #pos=44 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783592;  // std dev = 1.09e-08, 400.000 (wgt'ed) examples reached here.  /* #neg=400 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12774204499936365;  // std dev = 0.307, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else if ( genre(B, E) )
%   | | then return 0.3622721616073218;  // std dev = 0.000, 225.000 (wgt'ed) examples reached here.  /* #pos=225 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.06418976662372144;  // std dev = 5.544, 146.000 (wgt'ed) examples reached here.  /* #neg=102 #pos=44 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926071;  // std dev = 1.72e-07, 377.000 (wgt'ed) examples reached here.  /* #neg=377 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.27384556042676483;  // std dev = 1.081, 229.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=225 */
%   | else if ( movie(E, A) )
%   | | then return 0.02664892932811949;  // std dev = 0.431, 170.000 (wgt'ed) examples reached here.  /* #neg=126 #pos=44 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 1.28e-07, 385.000 (wgt'ed) examples reached here.  /* #neg=385 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12567486829246818;  // std dev = 0.426, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | else if ( genre(B, E) )
%   | | then return 0.23118474064526834;  // std dev = 0.000, 225.000 (wgt'ed) examples reached here.  /* #pos=225 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.0094677831959613;  // std dev = 5.693, 167.000 (wgt'ed) examples reached here.  /* #neg=123 #pos=44 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.0787767547310915;  // std dev = 2.20e-07, 416.000 (wgt'ed) examples reached here.  /* #neg=416 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18628598658599868;  // std dev = 0.834, 228.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=225 */
%   | else if ( movie(E, B) )
%   | | then return -0.0040442956811109505;  // std dev = 5.727, 182.000 (wgt'ed) examples reached here.  /* #neg=138 #pos=44 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.07324622576333771;  // std dev = 0.000, 395.000 (wgt'ed) examples reached here.  /* #neg=395 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.15664693806309882;  // std dev = 0.985, 229.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=225 */
%   | else if ( genre(A, E) )
%   | | then return -0.07351069308531212;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.03443936495999961;  // std dev = 5.591, 152.000 (wgt'ed) examples reached here.  /* #neg=108 #pos=44 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420337;  // std dev = 0.000, 410.000 (wgt'ed) examples reached here.  /* #neg=410 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return -0.3672769402191006;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.14482856350573292;  // std dev = 0.000, 225.000 (wgt'ed) examples reached here.  /* #pos=225 */
%   | | else if ( genre(A, G) )
%   | | | then return -0.06865842079288656;  // std dev = 3.73e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | | else return 0.020418751925978553;  // std dev = 5.620, 156.000 (wgt'ed) examples reached here.  /* #neg=112 #pos=44 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.06419184008202565;  // std dev = 1.83e-07, 379.000 (wgt'ed) examples reached here.  /* #neg=379 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.12862
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.57 seconds
Total inference time: 0.862 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.980266
   AUC PR    = 0.874191
   CLL	      = -0.126297
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.836431
   F1        = 0.910931


Total scoring time: 1.581 seconds
Parameter learned model CLL: -0.126297


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 17, 0], 'true,false,true': [1.08e-06, 0, 225], 'true,false,false,true': [5.599, 109, 44], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.83e-07, 385, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.675, 4, 225], 'true,false,true': [0.0, 8, 0], 'true,false,false,true': [5.613, 111, 44], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 356, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.173, 14, 0], 'true,false,true': [0.378, 139, 269], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 377, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.165, 3, 225], 'true,false,true': [0.0, 16, 0], 'true,false,false,true': [5.711, 126, 44], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.09e-08, 400, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.307, 16, 0], 'true,false,true': [0.0, 0, 225], 'true,false,false,true': [5.544, 102, 44], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.72e-07, 377, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [1.081, 4, 225], 'true,false,true': [0.431, 126, 44], 'true,false,false': [0.0, 0, 0], 'false,true': [1.28e-07, 385, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.426, 22, 0], 'true,false,true': [0.0, 0, 225], 'true,false,false,true': [5.693, 123, 44], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.2e-07, 416, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.834, 3, 225], 'true,false,true': [5.727, 138, 44], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 395, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.985, 4, 225], 'true,false,true': [0.0, 15, 0], 'true,false,false,true': [5.591, 108, 44], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 410, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true,true,false': 'genre(A, G)'}, {'true,true,true,true': [0.0, 4, 0], 'true,true,true,false': [0.0, 0, 225], 'true,true,false,true': [3.73e-09, 13, 0], 'true,true,false,false': [5.62, 112, 44], 'true,false': [0.0, 0, 0], 'false': [1.83e-07, 379, 0]}]]
[{'': [0.21723441756129175, 2.0762612408574356e-16], 'true': [-3.2653618371328133e-18, 0.20520842081689003], 'true,false': [5.179067051762508e-15, 0.20487846554744016], 'true,false,false': [0.20487846554744016, nan], 'false': [2.0762612408574356e-16, nan]}, {'': [0.1743296246871484, -1.197543936674326e-16], 'true': [0.012251823215012059, 0.19619950380681503], 'true,false': [0.0, 0.2032882414151936], 'true,false,false': [0.2032882414151936, nan], 'false': [-1.197543936674326e-16, nan]}, {'': [0.14537182524645129, -2.591502020345193e-17], 'true': [0.00213539120446965, 0.14287097315530378], 'true,false': [0.14287097315530378, nan], 'false': [-2.591502020345193e-17, nan]}, {'': [0.13288126320462357, 1.2212453270876723e-16], 'true': [0.005955853944976859, 0.17657627940199036], 'true,false': [-5.204170427930421e-18, 0.19183391003460115], 'true,false,false': [0.19183391003460115, nan], 'false': [1.2212453270876723e-16, nan]}, {'': [0.10550953779030978, 7.892301607414906e-17], 'true': [0.0058940441514906995, 0.10406247526250585], 'true,false': [-1.2789769243681803e-15, 0.21054606868080417], 'true,false,false': [0.21054606868080417, nan], 'false': [7.892301607414906e-17, nan]}, {'': [0.09698286577452876, 4.2678703284291734e-17], 'true': [0.005106675260887128, 0.18567453661335456], 'true,false': [0.18567453661335456, nan], 'false': [4.2678703284291734e-17, nan]}, {'': [0.0935631482216543, 1.1635991315782891e-16], 'true': [0.00825324771818674, 0.09469195122429656], 'true,false': [-1.8158314358313672e-16, 0.19405500376492582], 'true,false,false': [0.19405500376492582, nan], 'false': [1.1635991315782891e-16, nan]}, {'': [0.09062625805855881, -6.858086531861726e-17], 'true': [0.0030470445290369397, 0.1801959003095393], 'true,false': [0.1801959003095393, nan], 'false': [-6.858086531861726e-17, nan]}, {'': [0.08604376808421133, -1.1860431336239478e-16], 'true': [0.00423947222555412, 0.1881572196455237], 'true,false': [-1.8503717077085942e-18, 0.20567867036011184], 'true,false,false': [0.20567867036011184, nan], 'false': [-1.1860431336239478e-16, nan]}, {'': [0.08585545980541005, 8.788045049803349e-17], 'true': [0.08585545980541005, nan], 'true,true': [0.0045008074264550465, 0.1874849733854364], 'true,true,false': [1.0675221390626506e-18, 0.202498356344511], 'true,true,true': [0.0, -1.7763568394002506e-16]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, E).;true;true
9;true,true;genre(A, F).;true;true
9;true,false;genre(A, G).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else if ( genre(B, E) )
%   | | then return 0.858148935099509;  // std dev = 1.08e-06, 225.000 (wgt'ed) examples reached here.  /* #pos=225 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.858148935099512;  // std dev = 2.38e-07, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 126.000 (wgt'ed) examples reached here.  /* #neg=126 */
%   else return -0.14185106490048746;  // std dev = 2.62e-07, 370.000 (wgt'ed) examples reached here.  /* #neg=370 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.7194734122109545;  // std dev = 1.19e-07, 98.000 (wgt'ed) examples reached here.  /* #pos=98 */
%   | | else return 0.7128724899395544;  // std dev = 0.074, 128.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=127 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.7194734122109551;  // std dev = 0.000, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | | | else return -0.12544463852839105;  // std dev = 8.02e-08, 119.000 (wgt'ed) examples reached here.  /* #neg=119 */
%   else return -0.12544463852839227;  // std dev = 0.000, 407.000 (wgt'ed) examples reached here.  /* #neg=407 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( actor(B) )
%   | | then return -0.11231637819360636;  // std dev = 1.05e-08, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else return -0.22636024900053034;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( actor(A), director(B) )
%   | | then return 0.5561357047395796;  // std dev = 0.013, 269.000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | | else return -0.11231637819360622;  // std dev = 8.02e-08, 112.000 (wgt'ed) examples reached here.  /* #neg=112 */
%   else return -0.11231637819360621;  // std dev = 0.000, 402.000 (wgt'ed) examples reached here.  /* #neg=402 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.4173265131458405;  // std dev = 1.69e-07, 98.000 (wgt'ed) examples reached here.  /* #pos=98 */
%   | | else return 0.40489910286124686;  // std dev = 0.091, 130.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=127 */
%   | else if ( genre(A, E) )
%   | | then return -0.1015963294878363;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.41732651314584;  // std dev = 0.000, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | | | else return -0.10159632948783631;  // std dev = 0.000, 108.000 (wgt'ed) examples reached here.  /* #neg=108 */
%   else return -0.10159632948783588;  // std dev = 2.31e-07, 407.000 (wgt'ed) examples reached here.  /* #neg=407 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( actor(B) )
%   | | then return -0.09269127618926093;  // std dev = 1.05e-08, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else return -0.2591406712374144;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(B, E) )
%   | | then return 0.3229323456490008;  // std dev = 0.031, 225.000 (wgt'ed) examples reached here.  /* #pos=225 */
%   | | else if ( actor(B) )
%   | | | then return -0.09269127618926083;  // std dev = 7.30e-08, 122.000 (wgt'ed) examples reached here.  /* #neg=122 */
%   | | | else return 0.30261649058349654;  // std dev = 0.572, 46.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=44 */
%   else return -0.092691276189261;  // std dev = 1.32e-07, 416.000 (wgt'ed) examples reached here.  /* #neg=416 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2569868013176656;  // std dev = 0.029, 269.000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.08715116288936868;  // std dev = 0.182, 148.000 (wgt'ed) examples reached here.  /* #neg=148 */
%   else return -0.08518475138839678;  // std dev = 1.26e-07, 410.000 (wgt'ed) examples reached here.  /* #neg=410 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( female(B) )
%   | | then return -0.07863416847590272;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return -0.09573432677470779;  // std dev = 0.042, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( genre(B, E) )
%   | | then return 0.21077877731690592;  // std dev = 0.024, 225.000 (wgt'ed) examples reached here.  /* #pos=225 */
%   | | else if ( actor(B) )
%   | | | then return -0.07863416847590267;  // std dev = 1.83e-08, 120.000 (wgt'ed) examples reached here.  /* #neg=120 */
%   | | | else return 0.21237176350375542;  // std dev = 0.000, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   else return -0.07877675473109143;  // std dev = 1.13e-07, 392.000 (wgt'ed) examples reached here.  /* #neg=392 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.17803617782805656;  // std dev = 0.022, 269.000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.07581393188579544;  // std dev = 0.187, 149.000 (wgt'ed) examples reached here.  /* #neg=149 */
%   else return -0.07324622576333721;  // std dev = 2.98e-08, 393.000 (wgt'ed) examples reached here.  /* #neg=393 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.15189452192673705;  // std dev = 1.17e-07, 98.000 (wgt'ed) examples reached here.  /* #pos=98 */
%   | | else if ( actor(A) )
%   | | | then return 0.15436207100940535;  // std dev = 0.000, 127.000 (wgt'ed) examples reached here.  /* #pos=127 */
%   | | | else return -0.17246175615219905;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(A, E) )
%   | | then return -0.06736361958751148;  // std dev = 0.002, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.15432220169453384;  // std dev = 4.21e-08, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | | | else return -0.06952319315047042;  // std dev = 0.100, 128.000 (wgt'ed) examples reached here.  /* #neg=128 */
%   else return -0.06842697784420335;  // std dev = 0.000, 399.000 (wgt'ed) examples reached here.  /* #neg=399 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( genre(A, E) )
%   | | then return -0.14921876584959412;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0.13443043361009185;  // std dev = 0.014, 225.000 (wgt'ed) examples reached here.  /* #pos=225 */
%   | else if ( genre(A, F) )
%   | | then return -0.0632966017969809;  // std dev = 0.002, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.13523801581548478;  // std dev = 0.000, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | | | else return -0.06436729547775777;  // std dev = 0.055, 110.000 (wgt'ed) examples reached here.  /* #neg=110 */
%   else return -0.06419184008202554;  // std dev = 2.08e-07, 419.000 (wgt'ed) examples reached here.  /* #neg=419 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063917
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.409 seconds
Total inference time: 0.868 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064599
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.65 seconds
Refined model CLL: -0.064599


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063917
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 7.209999999999999 seconds
Total inference time: 0.868 seconds
AUC ROC: 1.0
Total revision time: 7.209999999999999
Best scored revision CLL: -0.064599


Dataset: 4_cora_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 00:06:07
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063917, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 7.209999999999999, 'Inference time': 0.868, 'parameter_0.8': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.12862, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 1.57, 'Inference time': 0.862}}


Amount of data: 1.0
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;haswordauthor(E, C).;true;true
7;true,true,true;author(F, E), title(F, D).;false;false
7;true,true,false;title(G, D), venue(G, B).;false;false
7;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
7;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
7;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, B).;false;true
8;true,true,false;title(F, D), venue(F, A).;false;false
8;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
8;true,false,false;haswordvenue(A, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
8;false,true;haswordauthor(M, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;true,true;author(F, E), venue(F, B).;true;true
9;true,true,true;samebib(F, G), venue(G, A).;false;false
9;true,true,false;author(H, E), venue(H, A).;false;false
9;true,false;haswordtitle(I, C).;true;true
9;true,false,true;title(J, I), venue(J, A).;false;false
9;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048774;  // std dev = 1.49e-08, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995086;  // std dev = 1.07e-06, 278.000 (wgt'ed) examples reached here.  /* #pos=278 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.15463134715981502;  // std dev = 6.443, 199.000 (wgt'ed) examples reached here.  /* #neg=140 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048768;  // std dev = 0.000, 497.000 (wgt'ed) examples reached here.  /* #neg=497 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7016230308573094;  // std dev = 2.048, 284.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=278 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 7.45e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.11921650873192682;  // std dev = 6.513, 210.000 (wgt'ed) examples reached here.  /* #neg=151 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839233;  // std dev = 0.000, 471.000 (wgt'ed) examples reached here.  /* #neg=471 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12693549785522606;  // std dev = 0.181, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | else if ( movie(E, A) )
%   | | then return 0.366298228578631;  // std dev = 0.370, 485.000 (wgt'ed) examples reached here.  /* #neg=148 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360582;  // std dev = 0.000, 498.000 (wgt'ed) examples reached here.  /* #neg=498 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4589978507843248;  // std dev = 1.334, 282.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=278 */
%   | else if ( genre(A, E) )
%   | | then return -0.10026972660054635;  // std dev = 7.45e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.03194837135472677;  // std dev = 6.560, 218.000 (wgt'ed) examples reached here.  /* #neg=159 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783531;  // std dev = 1.62e-08, 519.000 (wgt'ed) examples reached here.  /* #neg=519 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11022664793132703;  // std dev = 0.263, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else if ( genre(B, E) )
%   | | then return 0.35776727212825643;  // std dev = 0.000, 278.000 (wgt'ed) examples reached here.  /* #pos=278 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.03640454855773398;  // std dev = 6.513, 210.000 (wgt'ed) examples reached here.  /* #neg=151 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926125;  // std dev = 3.65e-08, 458.000 (wgt'ed) examples reached here.  /* #neg=458 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.278372176000345;  // std dev = 0.545, 279.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=278 */
%   | else if ( movie(E, A) )
%   | | then return 0.018374745955324862;  // std dev = 0.431, 230.000 (wgt'ed) examples reached here.  /* #neg=171 #pos=59 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 1.48e-07, 481.000 (wgt'ed) examples reached here.  /* #neg=481 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.13448886471335447;  // std dev = 0.424, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else if ( genre(B, E) )
%   | | then return 0.22772402396653083;  // std dev = 3.95e-07, 278.000 (wgt'ed) examples reached here.  /* #pos=278 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.024811840395972957;  // std dev = 6.519, 211.000 (wgt'ed) examples reached here.  /* #neg=152 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109227;  // std dev = 4.21e-08, 538.000 (wgt'ed) examples reached here.  /* #neg=538 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18670546815542943;  // std dev = 0.683, 280.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=278 */
%   | else if ( movie(E, B) )
%   | | then return 0.003332298211873584;  // std dev = 6.578, 235.000 (wgt'ed) examples reached here.  /* #neg=176 #pos=59 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.07324622576333698;  // std dev = 1.38e-07, 488.000 (wgt'ed) examples reached here.  /* #neg=488 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1577473555627106;  // std dev = 0.857, 281.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=278 */
%   | else if ( genre(A, E) )
%   | | then return -0.0746397857545813;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.05531818461219795;  // std dev = 6.355, 187.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420358;  // std dev = 0.000, 520.000 (wgt'ed) examples reached here.  /* #neg=520 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return -0.3705037817602304;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return 0.14265829438819128;  // std dev = 1.03e-07, 278.000 (wgt'ed) examples reached here.  /* #pos=278 */
%   | | else if ( genre(A, G) )
%   | | | then return -0.06964539793589045;  // std dev = 5.27e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | else return 0.0034401410696843714;  // std dev = 6.543, 215.000 (wgt'ed) examples reached here.  /* #neg=156 #pos=59 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.06419184008202539;  // std dev = 2.45e-07, 492.000 (wgt'ed) examples reached here.  /* #neg=492 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.130752
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.915 seconds
Total inference time: 0.848 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.978805
   AUC PR    = 0.865091
   CLL	      = -0.128634
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.824926
   F1        = 0.904065


Total scoring time: 1.792 seconds
Parameter learned model CLL: -0.128634


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [1.49e-08, 23, 0], 'true,false,true': [1.07e-06, 0, 278], 'true,false,false,true': [6.443, 140, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 497, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [2.048, 6, 278], 'true,false,true': [7.45e-09, 13, 0], 'true,false,false,true': [6.513, 151, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 471, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.181, 23, 0], 'true,false,true': [0.37, 148, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 498, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.334, 4, 278], 'true,false,true': [7.45e-09, 14, 0], 'true,false,false,true': [6.56, 159, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.62e-08, 519, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.263, 21, 0], 'true,false,true': [0.0, 0, 278], 'true,false,false,true': [6.513, 151, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [3.65e-08, 458, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.545, 1, 278], 'true,false,true': [0.431, 171, 59], 'true,false,false': [0.0, 0, 0], 'false,true': [1.48e-07, 481, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.424, 19, 0], 'true,false,true': [3.95e-07, 0, 278], 'true,false,false,true': [6.519, 152, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [4.21e-08, 538, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.683, 2, 278], 'true,false,true': [6.578, 176, 59], 'true,false,false': [0.0, 0, 0], 'false,true': [1.38e-07, 488, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.857, 3, 278], 'true,false,true': [0.0, 13, 0], 'true,false,false,true': [6.355, 128, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 520, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true,true,false': 'genre(A, G)'}, {'true,true,true,true': [0.0, 2, 0], 'true,true,true,false': [1.03e-07, 0, 278], 'true,true,false,true': [5.27e-09, 14, 0], 'true,true,false,false': [6.543, 156, 59], 'true,false': [0.0, 0, 0], 'false': [2.45e-07, 492, 0]}]]
[{'': [0.2197240000000026, -1.429663452233602e-17], 'true': [9.654113257610057e-18, 0.20735818291295013], 'true,false': [4.089454594302735e-15, 0.20858059139920754], 'true,false,false': [0.20858059139920754, nan], 'false': [-1.429663452233602e-17, nan]}, {'': [0.18110655628977065, -1.3577249727900003e-16], 'true': [0.01476347330380339, 0.19352741466672282], 'true,false': [4.270088556250602e-18, 0.20201814058956885], 'true,false,false': [0.20201814058956885, nan], 'false': [-1.3577249727900003e-16, nan]}, {'': [0.14161297630486044, -8.917454013053466e-18], 'true': [0.0014247910645383483, 0.13724645237702315], 'true,false': [0.13724645237702315, nan], 'false': [-8.917454013053466e-18, nan]}, {'': [0.134492480045051, 2.6354427097075005e-16], 'true': [0.0063071237938536135, 0.1864744995185668], 'true,false': [3.96508223080413e-18, 0.19739500042083988], 'true,false,false': [0.19739500042083988, nan], 'false': [2.6354427097075005e-16, nan]}, {'': [0.11205611953939466, 2.9088812872274842e-18], 'true': [0.0033033326204363798, 0.11225122267827663], 'true,false': [-1.073481831004468e-15, 0.20201814058957093], 'true,false,false': [0.20201814058957093, nan], 'false': [2.9088812872274842e-18, nan]}, {'': [0.1013733546630998, 4.523985713649287e-17], 'true': [0.0010633944706569232, 0.18600059914718017], 'true,false': [0.18600059914718017, nan], 'false': [4.523985713649287e-17, nan]}, {'': [0.09645878637464043, 3.301778511896376e-18], 'true': [0.00947635971144278, 0.09701701390033803], 'true,false': [5.62300006716626e-16, 0.20143303160306464], 'true,false,false': [0.20143303160306464, nan], 'false': [3.301778511896376e-18, nan]}, {'': [0.09327468570148581, 3.913081152367355e-17], 'true': [0.0016646226867418473, 0.18414515665027525], 'true,false': [0.18414515665027525, nan], 'false': [3.913081152367355e-17, nan]}, {'': [0.08890130349903488, -1.1956247957501685e-16], 'true': [0.002615060968840789, 0.20295156716594717], 'true,false': [0.0, 0.21596270982870375], 'true,false,false': [0.21596270982870375, nan], 'false': [-1.1956247957501685e-16, nan]}, {'': [0.09012223101808947, 1.2185374660520012e-16], 'true': [0.09012223101808947, nan], 'true,true': [0.001867531070366216, 0.18724677514832944], 'true,true,false': [1.982541115402065e-18, 0.19911303407247308], 'true,true,true': [0.0, 3.833863682158814e-17]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, E).;true;true
9;true,true;genre(A, F).;true;true
9;true,false;genre(A, G).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995086;  // std dev = 1.07e-06, 278.000 (wgt'ed) examples reached here.  /* #pos=278 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.8581489350995125;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.14185106490048807;  // std dev = 0.000, 150.000 (wgt'ed) examples reached here.  /* #neg=150 */
%   else return -0.14185106490048766;  // std dev = 4.21e-08, 492.000 (wgt'ed) examples reached here.  /* #neg=492 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.7194734122109551;  // std dev = 0.000, 111.000 (wgt'ed) examples reached here.  /* #pos=111 */
%   | | else return 0.709474382024692;  // std dev = 0.091, 169.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=167 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.7194734122109543;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.12544463852839136;  // std dev = 3.65e-08, 159.000 (wgt'ed) examples reached here.  /* #neg=159 */
%   else return -0.12544463852839233;  // std dev = 0.000, 480.000 (wgt'ed) examples reached here.  /* #neg=480 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( actor(B) )
%   | | then return -0.11231637819360638;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else return -0.2257657213682376;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( director(B), actor(A) )
%   | | then return 0.5565893125222311;  // std dev = 0.023, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | | else return -0.11231637819360657;  // std dev = 0.000, 192.000 (wgt'ed) examples reached here.  /* #neg=192 */
%   else return -0.11231637819360582;  // std dev = 0.000, 500.000 (wgt'ed) examples reached here.  /* #neg=500 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.4172162157046675;  // std dev = 0.000, 111.000 (wgt'ed) examples reached here.  /* #pos=111 */
%   | | else return 0.41244942981491256;  // std dev = 0.066, 169.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=167 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783635;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.4172162157046663;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.1015963294878365;  // std dev = 0.000, 178.000 (wgt'ed) examples reached here.  /* #neg=178 */
%   else return -0.10159632948783545;  // std dev = 3.35e-07, 485.000 (wgt'ed) examples reached here.  /* #neg=485 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926093;  // std dev = 1.18e-08, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else if ( genre(B, E) )
%   | | then return 0.32244711516426533;  // std dev = 0.026, 278.000 (wgt'ed) examples reached here.  /* #pos=278 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.32051025352600726;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.09269127618926075;  // std dev = 6.83e-08, 144.000 (wgt'ed) examples reached here.  /* #neg=144 */
%   else return -0.09269127618926151;  // std dev = 0.000, 513.000 (wgt'ed) examples reached here.  /* #neg=513 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.2546668668053219;  // std dev = 0.000, 111.000 (wgt'ed) examples reached here.  /* #pos=111 */
%   | | else if ( director(A) )
%   | | | then return -0.24261713802482543;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.2574797293849969;  // std dev = 0.000, 167.000 (wgt'ed) examples reached here.  /* #pos=167 */
%   | else if ( actor(A), director(B) )
%   | | then return 0.25503468037729604;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | else return -0.08518475138839679;  // std dev = 5.58e-08, 149.000 (wgt'ed) examples reached here.  /* #neg=149 */
%   else return -0.08518475138839678;  // std dev = 1.40e-07, 472.000 (wgt'ed) examples reached here.  /* #neg=472 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07877675473109179;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | else if ( genre(B, E) )
%   | | then return 0.21059351557940859;  // std dev = 0.016, 278.000 (wgt'ed) examples reached here.  /* #pos=278 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.2096605388914896;  // std dev = 6.32e-08, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.07877675473109151;  // std dev = 7.88e-08, 147.000 (wgt'ed) examples reached here.  /* #neg=147 */
%   else return -0.07877675473109214;  // std dev = 0.000, 511.000 (wgt'ed) examples reached here.  /* #neg=511 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1763968562670957;  // std dev = 0.366, 279.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=278 */
%   | else if ( actor(B) )
%   | | then return -0.0732462257633367;  // std dev = 1.11e-07, 184.000 (wgt'ed) examples reached here.  /* #neg=184 */
%   | | else return 0.177025219940351;  // std dev = 8.56e-08, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   else return -0.07324622576333677;  // std dev = 1.90e-07, 529.000 (wgt'ed) examples reached here.  /* #neg=529 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.15244753623032117;  // std dev = 0.000, 111.000 (wgt'ed) examples reached here.  /* #pos=111 */
%   | | else return 0.14745177657043013;  // std dev = 0.049, 170.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=167 */
%   | else if ( genre(A, E) )
%   | | then return -0.06842697784420274;  // std dev = 2.63e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.15268978457163057;  // std dev = 5.37e-08, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.06884049735234739;  // std dev = 0.035, 172.000 (wgt'ed) examples reached here.  /* #neg=172 */
%   else return -0.06842697784420358;  // std dev = 0.000, 524.000 (wgt'ed) examples reached here.  /* #neg=524 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( genre(A, E) )
%   | | then return -0.24306849142892137;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.13496281423926615;  // std dev = 0.016, 278.000 (wgt'ed) examples reached here.  /* #pos=278 */
%   | else if ( genre(A, F) )
%   | | then return -0.06419184008202622;  // std dev = 3.73e-09, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | else if ( actor(B) )
%   | | | then return -0.06416700392540987;  // std dev = 0.000, 169.000 (wgt'ed) examples reached here.  /* #neg=169 */
%   | | | else return 0.13396481423171652;  // std dev = 5.58e-08, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   else return -0.06419184008202543;  // std dev = 2.37e-07, 471.000 (wgt'ed) examples reached here.  /* #neg=471 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064203
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.925 seconds
Total inference time: 0.874 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.065052
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.842 seconds
Refined model CLL: -0.065052


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064203
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 8.474 seconds
Total inference time: 0.874 seconds
AUC ROC: 1.0
Total revision time: 8.474
Best scored revision CLL: -0.065052


Dataset: 4_cora_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 00:06:18
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.064203, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 8.474, 'Inference time': 0.874, 'parameter_1.0': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.130752, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 1.915, 'Inference time': 0.848}}


Starting fold 5

Target train facts examples: 915
Target train pos examples: 337
Target train neg examples: 12165

Target test facts examples: 163
Target test pos	 examples: 45
Target test neg examples: 2071

Amount of data: 0.2
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;haswordauthor(E, C).;true;true
7;true,true,true;author(F, E), title(F, D).;false;false
7;true,true,false;title(G, D), venue(G, B).;false;false
7;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
7;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
7;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, B).;false;true
8;true,true,false;title(F, D), venue(F, A).;false;false
8;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
8;true,false,false;haswordvenue(A, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
8;false,true;haswordauthor(M, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;true,true;author(F, E), venue(F, B).;true;true
9;true,true,true;samebib(F, G), venue(G, A).;false;false
9;true,true,false;author(H, E), venue(H, A).;false;false
9;true,false;haswordtitle(I, C).;true;true
9;true,false,true;title(J, I), venue(J, A).;false;false
9;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995124;  // std dev = 0.000, 57.000 (wgt'ed) examples reached here.  /* #pos=57 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.1020513741239026;  // std dev = 2.750, 41.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048763;  // std dev = 8.16e-08, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7049058596120001;  // std dev = 0.838, 58.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=57 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.08916906274226533;  // std dev = 2.750, 41.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.1254446385283914;  // std dev = 0.000, 91.000 (wgt'ed) examples reached here.  /* #neg=91 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( movie(E, A) )
%   | | then return 0.3088527401126345;  // std dev = 0.380, 108.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=67 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360621;  // std dev = 7.30e-08, 89.000 (wgt'ed) examples reached here.  /* #neg=89 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4820308583705382;  // std dev = 0.000, 57.000 (wgt'ed) examples reached here.  /* #pos=57 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.018098901408194;  // std dev = 2.835, 51.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783619;  // std dev = 5.89e-09, 85.000 (wgt'ed) examples reached here.  /* #neg=85 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14347617140182345;  // std dev = 0.176, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.36495115529893274;  // std dev = 1.40e-07, 57.000 (wgt'ed) examples reached here.  /* #pos=57 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.02141119051989226;  // std dev = 2.770, 43.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.092691276189261;  // std dev = 3.65e-08, 94.000 (wgt'ed) examples reached here.  /* #neg=94 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.26647147340845967;  // std dev = 0.767, 59.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=57 */
%   | else if ( movie(E, A) )
%   | | then return -0.025251929786814703;  // std dev = 0.376, 57.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=10 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839682;  // std dev = 5.77e-08, 107.000 (wgt'ed) examples reached here.  /* #neg=107 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07944319204074073;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(B, E) )
%   | | then return 0.23408963974298305;  // std dev = 6.32e-08, 57.000 (wgt'ed) examples reached here.  /* #pos=57 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.059762340104873496;  // std dev = 2.701, 37.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109158;  // std dev = 5.96e-08, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18613166407416826;  // std dev = 0.495, 58.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=57 */
%   | else if ( movie(E, B) )
%   | | then return 0.007769793826201779;  // std dev = 2.767, 47.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=10 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.07324622576333707;  // std dev = 0.000, 106.000 (wgt'ed) examples reached here.  /* #neg=106 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1583579546753141;  // std dev = 0.509, 58.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=57 */
%   | else if ( genre(A, E) )
%   | | then return -0.0743570621428802;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.004559443120162191;  // std dev = 2.798, 46.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420265;  // std dev = 4.75e-09, 96.000 (wgt'ed) examples reached here.  /* #neg=96 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return -0.38244365020092735;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0.14629753401397338;  // std dev = 6.66e-08, 57.000 (wgt'ed) examples reached here.  /* #pos=57 */
%   | | else if ( genre(A, G) )
%   | | | then return -0.06939843058497779;  // std dev = 1.32e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.02883561816412783;  // std dev = 2.739, 40.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=10 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.06419184008202626;  // std dev = 0.000, 116.000 (wgt'ed) examples reached here.  /* #neg=116 */


Results
   AUC ROC   = 0.971565
   AUC PR    = 0.823063
   CLL	      = -0.118923
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.777778
   F1        = 0.875


Total learning time: 0.924 seconds
Total inference time: 0.832 seconds
AUC ROC: 0.971565


Results scoring model
   AUC ROC   = 0.981351
   AUC PR    = 0.885526
   CLL	      = -0.116542
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.850746
   F1        = 0.919355


Total scoring time: 0.943 seconds
Parameter learned model CLL: -0.116542


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 4, 0], 'true,false,true': [0.0, 0, 57], 'true,false,false,true': [2.75, 31, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [8.16e-08, 88, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.838, 1, 57], 'true,false,true': [0.0, 6, 0], 'true,false,false,true': [2.75, 31, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 91, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [2.63e-09, 3, 0], 'true,false,true': [0.38, 41, 67], 'true,false,false': [0.0, 0, 0], 'false,true': [7.3e-08, 89, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 57], 'true,false,true': [0.0, 2, 0], 'true,false,false,true': [2.835, 41, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.89e-09, 85, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.176, 4, 0], 'true,false,true': [1.4e-07, 0, 57], 'true,false,false,true': [2.77, 33, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [3.65e-08, 94, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.767, 2, 57], 'true,false,true': [0.376, 47, 10], 'true,false,false': [0.0, 0, 0], 'false,true': [5.77e-08, 107, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 5, 0], 'true,false,true': [6.32e-08, 0, 57], 'true,false,false,true': [2.701, 27, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.96e-08, 103, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.495, 1, 57], 'true,false,true': [2.767, 37, 10], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 106, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.509, 1, 57], 'true,false,true': [0.0, 2, 0], 'true,false,false,true': [2.798, 36, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [4.75e-09, 96, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true,true,false': 'genre(A, G)'}, {'true,true,true,true': [0.0, 1, 0], 'true,true,true,false': [6.66e-08, 0, 57], 'true,true,false,true': [1.32e-09, 3, 0], 'true,true,false,false': [2.739, 30, 10], 'true,false': [0.0, 0, 0], 'false': [0.0, 116, 0]}]]
[{'': [0.22539407920030682, 7.569702440626067e-17], 'true': [0.0, 0.2162640566430646], 'true,false': [-3.739698609263685e-16, 0.18441403926234398], 'true,false,false': [0.18441403926234398, nan], 'false': [7.569702440626067e-17, nan]}, {'': [0.18325748863541114, -1.4640303621430636e-17], 'true': [0.012096174557227859, 0.16600107636428996], 'true,false': [-2.3129646346357427e-18, 0.18441403926234365], 'true,false,false': [0.18441403926234365, nan], 'false': [-1.4640303621430636e-17, nan]}, {'': [0.14511368162402002, 5.98771968337163e-17], 'true': [2.3129646346357427e-18, 0.14435047057023173], 'true,false': [0.14435047057023173, nan], 'false': [5.98771968337163e-17, nan]}, {'': [0.13644486536916622, 3.657205257588751e-17], 'true': [0.0, 0.15193647456857678], 'true,false': [0.0, 0.15763168012302956], 'true,false,false': [0.15763168012302956, nan], 'false': [3.657205257588751e-17, nan]}, {'': [0.10671583703247188, 1.4173059888831785e-17], 'true': [0.007737316745252857, 0.10567081633034622], 'true,false': [3.428057058491711e-16, 0.17847485127095733], 'true,false,false': [0.17847485127095733, nan], 'false': [1.4173059888831785e-17, nan]}, {'': [0.09583046420228628, 3.112774835397635e-17], 'true': [0.009979746054518124, 0.14140857364361312], 'true,false': [0.14140857364361312, nan], 'false': [3.112774835397635e-17, nan]}, {'': [0.0834737506176165, 3.4492365813597093e-17], 'true': [0.0, 0.08488439017096891], 'true,false': [7.011934892369409e-17, 0.19722425127830534], 'true,false,false': [0.19722425127830534, nan], 'false': [3.4492365813597093e-17, nan]}, {'': [0.08312046293395087, -3.142140635731575e-18], 'true': [0.0042314729380394395, 0.16289996221497088], 'true,false': [0.16289996221497088, nan], 'false': [-3.142140635731575e-18, nan]}, {'': [0.08317240996953916, 2.1973164029039556e-17], 'true': [0.004459237167420796, 0.1632380082526901], 'true,false': [0.0, 0.17013232514177715], 'true,false,false': [0.17013232514177715, nan], 'false': [2.1973164029039556e-17, nan]}, {'': [0.08048886593358144, -1.7706143065142584e-17], 'true': [0.08048886593358144, nan], 'true,true': [0.004737019225161668, 0.17504488447811625], 'true,true,false': [5.782411586589357e-19, 0.18749999999999997], 'true,true,true': [0.0, 7.791038769299344e-17]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, E).;true;true
9;true,true;genre(A, F).;true;true
9;true,false;genre(A, G).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995124;  // std dev = 0.000, 57.000 (wgt'ed) examples reached here.  /* #pos=57 */
%   | | else if ( actor(B) )
%   | | | then return -0.1418510649004877;  // std dev = 2.79e-08, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.14185106490048763;  // std dev = 8.69e-08, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.7194734122109542;  // std dev = 5.96e-08, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else return 0.6738021662250441;  // std dev = 0.191, 37.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=35 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.7194734122109544;  // std dev = 2.98e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.13873737703644745;  // std dev = 0.257, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   else return -0.12544463852839136;  // std dev = 0.000, 101.000 (wgt'ed) examples reached here.  /* #neg=101 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( director(B), actor(A) )
%   | | then return 0.5612419510677875;  // std dev = 0.046, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | | else return -0.11531294170906865;  // std dev = 0.140, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   else return -0.1123163781936062;  // std dev = 8.30e-08, 104.000 (wgt'ed) examples reached here.  /* #neg=104 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.4160853789175773;  // std dev = 4.21e-08, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else return 0.4097730942933036;  // std dev = 0.103, 36.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=35 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.41608537891757746;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.10350597071951778;  // std dev = 0.130, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.10159632948783627;  // std dev = 4.21e-08, 98.000 (wgt'ed) examples reached here.  /* #neg=98 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.13820907799154;  // std dev = 0.158, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.32675061033765607;  // std dev = 0.042, 57.000 (wgt'ed) examples reached here.  /* #pos=57 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.3197437487768941;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.09527514621741244;  // std dev = 0.121, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   else return -0.09269127618926104;  // std dev = 2.79e-08, 91.000 (wgt'ed) examples reached here.  /* #neg=91 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.25858265286858284;  // std dev = 0.039, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.09436070692365023;  // std dev = 0.155, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   else return -0.08518475138839682;  // std dev = 5.58e-08, 101.000 (wgt'ed) examples reached here.  /* #neg=101 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07489790422845866;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.21279167473540175;  // std dev = 0.032, 57.000 (wgt'ed) examples reached here.  /* #pos=57 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.20861797966912649;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.08130097952220786;  // std dev = 0.105, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   else return -0.0787767547310916;  // std dev = 5.58e-08, 96.000 (wgt'ed) examples reached here.  /* #neg=96 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.1788647590496208;  // std dev = 0.029, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.07735016303303403;  // std dev = 0.144, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   else return -0.07324622576333709;  // std dev = 0.000, 112.000 (wgt'ed) examples reached here.  /* #neg=112 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1482936504846801;  // std dev = 0.357, 58.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=57 */
%   | else if ( genre(A, E) )
%   | | then return -0.06500808330597896;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( actor(B) )
%   | | | then return -0.06613125926349551;  // std dev = 1.49e-08, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | | else return 0.1517734489690128;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.06842697784420265;  // std dev = 5.16e-08, 108.000 (wgt'ed) examples reached here.  /* #neg=108 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.13609840936532494;  // std dev = 0.022, 57.000 (wgt'ed) examples reached here.  /* #pos=57 */
%   | else if ( genre(A, F) )
%   | | then return -0.06116673811797902;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.13324898999169185;  // std dev = 5.27e-09, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.06663920079718269;  // std dev = 0.119, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   else return -0.06419184008202626;  // std dev = 0.000, 102.000 (wgt'ed) examples reached here.  /* #neg=102 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063397
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.33 seconds
Total inference time: 0.862 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.065173
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.919 seconds
Refined model CLL: -0.065173


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063397
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 4.116 seconds
Total inference time: 0.862 seconds
AUC ROC: 1.0
Total revision time: 4.116
Best scored revision CLL: -0.065173


Dataset: 4_cora_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 00:06:25
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063397, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 4.116, 'Inference time': 0.862, 'parameter_0.2': {'AUC ROC': 0.971565, 'AUC PR': 0.823063, 'CLL': -0.118923, 'Precision': [1.0, 0.5], 'Recall': 0.777778, 'F1': 0.875, 'Learning time': 0.924, 'Inference time': 0.832}}


Amount of data: 0.4
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;haswordauthor(E, C).;true;true
7;true,true,true;author(F, E), title(F, D).;false;false
7;true,true,false;title(G, D), venue(G, B).;false;false
7;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
7;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
7;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, B).;false;true
8;true,true,false;title(F, D), venue(F, A).;false;false
8;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
8;true,false,false;haswordvenue(A, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
8;false,true;haswordauthor(M, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;true,true;author(F, E), venue(F, B).;true;true
9;true,true,true;samebib(F, G), venue(G, A).;false;false
9;true,true,false;author(H, E), venue(H, A).;false;false
9;true,false;haswordtitle(I, C).;true;true
9;true,false,true;title(J, I), venue(J, A).;false;false
9;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995107;  // std dev = 6.19e-07, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.10490218185275908;  // std dev = 3.783, 77.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=19 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048838;  // std dev = 0.000, 197.000 (wgt'ed) examples reached here.  /* #neg=197 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7121896359114779;  // std dev = 0.841, 116.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=115 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.06328420132973199;  // std dev = 3.854, 87.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=19 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.1254446385283916;  // std dev = 0.000, 194.000 (wgt'ed) examples reached here.  /* #neg=194 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12859127974732845;  // std dev = 0.105, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( movie(E, A) )
%   | | then return 0.3643238118299386;  // std dev = 0.360, 193.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=134 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360658;  // std dev = 0.000, 197.000 (wgt'ed) examples reached here.  /* #neg=197 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.46060148282331864;  // std dev = 0.668, 116.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=115 */
%   | else if ( genre(A, E) )
%   | | then return -0.10012044790060606;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.051741312540765985;  // std dev = 3.721, 70.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=19 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783652;  // std dev = 0.000, 194.000 (wgt'ed) examples reached here.  /* #neg=194 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.20464230473276893;  // std dev = 0.259, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( genre(B, E) )
%   | | then return 0.35542799264531544;  // std dev = 5.96e-08, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.03520338667279926;  // std dev = 3.740, 72.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=19 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926057;  // std dev = 9.19e-08, 198.000 (wgt'ed) examples reached here.  /* #neg=198 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2697191048413647;  // std dev = 0.740, 117.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=115 */
%   | else if ( movie(E, A) )
%   | | then return -0.01217252373654829;  // std dev = 0.402, 91.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=19 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 7.30e-08, 184.000 (wgt'ed) examples reached here.  /* #neg=184 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12761112714494846;  // std dev = 0.347, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( genre(B, E) )
%   | | then return 0.2278641367785494;  // std dev = 0.000, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.019290096207319658;  // std dev = 3.866, 89.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=19 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109147;  // std dev = 7.74e-08, 186.000 (wgt'ed) examples reached here.  /* #neg=186 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18624037679128908;  // std dev = 0.465, 116.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=115 */
%   | else if ( movie(E, B) )
%   | | then return 0.006331192946008018;  // std dev = 3.808, 82.000 (wgt'ed) examples reached here.  /* #neg=63 #pos=19 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.07324622576333667;  // std dev = 1.14e-07, 193.000 (wgt'ed) examples reached here.  /* #neg=193 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1550274422424473;  // std dev = 0.671, 117.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=115 */
%   | else if ( genre(A, E) )
%   | | then return -0.06697564905458564;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.009536699945019935;  // std dev = 3.847, 86.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=19 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420262;  // std dev = 5.74e-09, 205.000 (wgt'ed) examples reached here.  /* #neg=205 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return -0.3500276359501341;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.14312877209259478;  // std dev = 0.000, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   | | else if ( genre(A, G) )
%   | | | then return -0.06290978497003352;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.031494043045296426;  // std dev = 3.749, 73.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=19 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.06419184008202626;  // std dev = 0.000, 213.000 (wgt'ed) examples reached here.  /* #neg=213 */


Results
   AUC ROC   = 0.971565
   AUC PR    = 0.823063
   CLL	      = -0.121229
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.777778
   F1        = 0.875


Total learning time: 1.139 seconds
Total inference time: 0.889 seconds
AUC ROC: 0.971565


Results scoring model
   AUC ROC   = 0.982313
   AUC PR    = 0.890703
   CLL	      = -0.118045
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.858209
   F1        = 0.923695


Total scoring time: 1.157 seconds
Parameter learned model CLL: -0.118045


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 11, 0], 'true,false,true': [6.19e-07, 0, 115], 'true,false,false,true': [3.783, 58, 19], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 197, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.841, 1, 115], 'true,false,true': [0.0, 8, 0], 'true,false,false,true': [3.854, 68, 19], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 194, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.105, 7, 0], 'true,false,true': [0.36, 59, 134], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 197, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.668, 1, 115], 'true,false,true': [0.0, 4, 0], 'true,false,false,true': [3.721, 51, 19], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 194, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.259, 7, 0], 'true,false,true': [5.96e-08, 0, 115], 'true,false,false,true': [3.74, 53, 19], 'true,false,false,false': [0.0, 0, 0], 'false,true': [9.19e-08, 198, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.74, 2, 115], 'true,false,true': [0.402, 72, 19], 'true,false,false': [0.0, 0, 0], 'false,true': [7.3e-08, 184, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.347, 13, 0], 'true,false,true': [0.0, 0, 115], 'true,false,false,true': [3.866, 70, 19], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.74e-08, 186, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.465, 1, 115], 'true,false,true': [3.808, 63, 19], 'true,false,false': [0.0, 0, 0], 'false,true': [1.14e-07, 193, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.671, 2, 115], 'true,false,true': [0.0, 5, 0], 'true,false,false,true': [3.847, 67, 19], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.74e-09, 205, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true,true,false': 'genre(A, G)'}, {'true,true,true,true': [0.0, 4, 0], 'true,true,true,false': [0.0, 0, 115], 'true,true,false,true': [0.0, 4, 0], 'true,true,false,false': [3.749, 54, 19], 'true,false': [0.0, 0, 0], 'false': [0.0, 213, 0]}]]
[{'': [0.22436846319979092, -2.366972945901349e-16], 'true': [-1.0092936587501423e-17, 0.21082899305556013], 'true,false': [3.3364615418300357e-15, 0.18586608196997756], 'true,false,false': [0.18586608196997756, nan], 'false': [-2.366972945901349e-16, nan]}, {'': [0.18436757654053507, -2.9758555299231e-17], 'true': [0.006101140675793815, 0.15906871201076028], 'true,false': [0.0, 0.17069626106487037], 'true,false,false': [0.17069626106487037, nan], 'false': [-2.9758555299231e-17, nan]}, {'': [0.1330294494207371, -3.8322419124117076e-17], 'true': [0.0015892345235000676, 0.1292929260382857], 'true,false': [0.1292929260382857, nan], 'false': [-3.8322419124117076e-17, nan]}, {'': [0.11702672072433945, -9.385390517449777e-17], 'true': [0.0038468911256444105, 0.18824484787637774], 'true,false': [0.0, 0.19775510204081573], 'true,false,false': [0.19775510204081573, nan], 'false': [-9.385390517449777e-17, nan]}, {'': [0.10247957381091564, 4.261462114722823e-17], 'true': [0.009608666387765696, 0.09907247640640114], 'true,false': [3.089316242435218e-17, 0.1942515432098766], 'true,false,false': [0.1942515432098766, nan], 'false': [4.261462114722823e-17, nan]}, {'': [0.09279704792393025, 2.896233977283017e-17], 'true': [0.004685071818168855, 0.16138599857307726], 'true,false': [0.16138599857307726, nan], 'false': [2.896233977283017e-17, nan]}, {'': [0.08699626629983917, 3.223228136008519e-17], 'true': [0.009239008295738763, 0.0882772611536064], 'true,false': [-1.7763568394002506e-16, 0.1679080924125736], 'true,false,false': [0.1679080924125736, nan], 'false': [3.223228136008519e-17, nan]}, {'': [0.08216993037729908, 6.787892067656397e-17], 'true': [0.0018647339459502488, 0.1768097343166467], 'true,false': [0.1768097343166467, nan], 'false': [6.787892067656397e-17, nan]}, {'': [0.08032959916534722, 3.411904904945603e-17], 'true': [0.00385243389290437, 0.1628342347594669], 'true,false': [-6.938893903907229e-19, 0.1721200648999459], 'true,false,false': [0.1721200648999459, nan], 'false': [3.411904904945603e-17, nan]}, {'': [0.07906046134298783, -5.212314669601674e-19], 'true': [0.07906046134298783, nan], 'true,true': [0.007900112399199074, 0.18296871415810861], 'true,true,false': [0.0, 0.19253143178832832], 'true,true,true': [0.0, -6.178632484870436e-17]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, E).;true;true
9;true,true;genre(A, F).;true;true
9;true,false;genre(A, G).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995107;  // std dev = 6.19e-07, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   | | else if ( actor(B) )
%   | | | then return -0.14185106490048766;  // std dev = 6.32e-08, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
%   | | | else return 0.762910839861417;  // std dev = 1.345, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   else return -0.14185106490048835;  // std dev = 0.000, 191.000 (wgt'ed) examples reached here.  /* #neg=191 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.7194734122109551;  // std dev = 0.000, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | else return 0.697808846807381;  // std dev = 0.134, 78.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=76 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( actor(B) )
%   | | | then return -0.1254446385283916;  // std dev = 0.000, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
%   | | | else return 0.7382879672063557;  // std dev = 8.43e-08, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   else return -0.12544463852839155;  // std dev = 0.000, 184.000 (wgt'ed) examples reached here.  /* #neg=184 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14017057439237793;  // std dev = 0.136, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( director(B), actor(A) )
%   | | then return 0.5610601189814725;  // std dev = 0.067, 134.000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | | else if ( female(B) )
%   | | | then return -0.11231637819360638;  // std dev = 1.29e-08, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | | else return -0.12926417221884814;  // std dev = 0.431, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   else return -0.11231637819360656;  // std dev = 0.000, 193.000 (wgt'ed) examples reached here.  /* #neg=193 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.41612955721273426;  // std dev = 0.000, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | else return 0.4054607325308751;  // std dev = 0.098, 78.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=76 */
%   | else if ( genre(A, E) )
%   | | then return -0.09908201566869487;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( actor(B) )
%   | | | then return -0.1006289095887091;  // std dev = 0.005, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
%   | | | else return 0.4348084954412785;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   else return -0.10159632948783653;  // std dev = 0.000, 203.000 (wgt'ed) examples reached here.  /* #neg=203 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09058208428492631;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.3244484928182977;  // std dev = 0.036, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.33246273862056064;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return -0.10507231646110564;  // std dev = 0.570, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
%   else return -0.09269127618926057;  // std dev = 9.06e-08, 195.000 (wgt'ed) examples reached here.  /* #neg=195 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.25849633421889484;  // std dev = 0.038, 134.000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else if ( actor(A) )
%   | | then return -0.08347676408294515;  // std dev = 0.005, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   | | else return -0.13934240522254257;  // std dev = 0.137, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else return -0.08518475138839678;  // std dev = 7.45e-08, 193.000 (wgt'ed) examples reached here.  /* #neg=193 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11248922246911379;  // std dev = 0.136, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.21143102042530026;  // std dev = 0.027, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.21618703444485288;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return -0.08302464301122532;  // std dev = 0.361, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
%   else return -0.07877675473109147;  // std dev = 7.74e-08, 182.000 (wgt'ed) examples reached here.  /* #neg=182 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.17520359577969294;  // std dev = 2.58e-08, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | else return 0.1748531076604633;  // std dev = 0.044, 77.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=76 */
%   | else if ( director(B), actor(A) )
%   | | then return 0.18179793165423558;  // std dev = 2.11e-08, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else if ( actor(A) )
%   | | | then return -0.07169856872358597;  // std dev = 0.004, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
%   | | | else return -0.130636944647194;  // std dev = 0.453, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return -0.07324622576333668;  // std dev = 1.10e-07, 186.000 (wgt'ed) examples reached here.  /* #neg=186 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.15130637936273109;  // std dev = 0.000, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | else return 0.15039926938728906;  // std dev = 0.045, 77.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=76 */
%   | else if ( genre(A, E) )
%   | | then return -0.05843661811358512;  // std dev = 2.63e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( actor(B) )
%   | | | then return -0.06682492464629888;  // std dev = 0.007, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
%   | | | else return 0.15630109232643757;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   else return -0.06842697784420262;  // std dev = 8.56e-08, 214.000 (wgt'ed) examples reached here.  /* #neg=214 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( genre(A, E) )
%   | | then return -0.26974565497680736;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0.13547342645371926;  // std dev = 0.020, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   | else if ( genre(A, F) )
%   | | then return -0.055303079219900755;  // std dev = 3.23e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.13677802053032748;  // std dev = 1.29e-08, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return -0.07096333178440738;  // std dev = 0.360, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
%   else return -0.06419184008202626;  // std dev = 0.000, 196.000 (wgt'ed) examples reached here.  /* #neg=196 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063581
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.98 seconds
Total inference time: 0.896 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.066902
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.163 seconds
Refined model CLL: -0.066902


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063581
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 5.439 seconds
Total inference time: 0.896 seconds
AUC ROC: 1.0
Total revision time: 5.439
Best scored revision CLL: -0.066902


Dataset: 4_cora_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 00:06:32
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063581, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 5.439, 'Inference time': 0.896, 'parameter_0.4': {'AUC ROC': 0.971565, 'AUC PR': 0.823063, 'CLL': -0.121229, 'Precision': [1.0, 0.5], 'Recall': 0.777778, 'F1': 0.875, 'Learning time': 1.139, 'Inference time': 0.889}}


Amount of data: 0.6
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;haswordauthor(E, C).;true;true
7;true,true,true;author(F, E), title(F, D).;false;false
7;true,true,false;title(G, D), venue(G, B).;false;false
7;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
7;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
7;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, B).;false;true
8;true,true,false;title(F, D), venue(F, A).;false;false
8;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
8;true,false,false;haswordvenue(A, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
8;false,true;haswordauthor(M, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;true,true;author(F, E), venue(F, B).;true;true
9;true,true,true;samebib(F, G), venue(G, A).;false;false
9;true,true,false;author(H, E), venue(H, A).;false;false
9;true,false;haswordtitle(I, C).;true;true
9;true,false,true;title(J, I), venue(J, A).;false;false
9;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995096;  // std dev = 1.06e-06, 169.000 (wgt'ed) examples reached here.  /* #pos=169 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.09902484750827022;  // std dev = 5.005, 137.000 (wgt'ed) examples reached here.  /* #neg=104 #pos=33 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048782;  // std dev = 1.03e-07, 302.000 (wgt'ed) examples reached here.  /* #neg=302 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7145033060301368;  // std dev = 0.842, 170.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=169 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 5.27e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.09193070924283271;  // std dev = 4.987, 134.000 (wgt'ed) examples reached here.  /* #neg=101 #pos=33 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.125444638528392;  // std dev = 0.000, 290.000 (wgt'ed) examples reached here.  /* #neg=290 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12864917660205438;  // std dev = 0.150, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else if ( movie(E, A) )
%   | | then return 0.3685896637792398;  // std dev = 0.363, 290.000 (wgt'ed) examples reached here.  /* #neg=88 #pos=202 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360699;  // std dev = 0.000, 279.000 (wgt'ed) examples reached here.  /* #neg=279 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4569160641825352;  // std dev = 0.941, 171.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=169 */
%   | else if ( genre(A, E) )
%   | | then return -0.10011523172644209;  // std dev = 3.73e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.027551562244189136;  // std dev = 4.969, 131.000 (wgt'ed) examples reached here.  /* #neg=98 #pos=33 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783649;  // std dev = 0.000, 328.000 (wgt'ed) examples reached here.  /* #neg=328 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1161734904613681;  // std dev = 0.185, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( genre(B, E) )
%   | | then return 0.35476523439811736;  // std dev = 2.15e-07, 169.000 (wgt'ed) examples reached here.  /* #pos=169 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.003206602925241896;  // std dev = 5.033, 142.000 (wgt'ed) examples reached here.  /* #neg=109 #pos=33 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926043;  // std dev = 1.52e-07, 296.000 (wgt'ed) examples reached here.  /* #neg=296 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2688045871972747;  // std dev = 0.934, 172.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=169 */
%   | else if ( movie(E, A) )
%   | | then return 0.00760694006326099;  // std dev = 0.417, 144.000 (wgt'ed) examples reached here.  /* #neg=111 #pos=33 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 1.12e-07, 333.000 (wgt'ed) examples reached here.  /* #neg=333 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.13398659837496282;  // std dev = 0.367, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else if ( genre(B, E) )
%   | | then return 0.22763253444303905;  // std dev = 1.03e-07, 169.000 (wgt'ed) examples reached here.  /* #pos=169 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.04620724068512867;  // std dev = 4.884, 119.000 (wgt'ed) examples reached here.  /* #neg=86 #pos=33 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109144;  // std dev = 4.71e-08, 272.000 (wgt'ed) examples reached here.  /* #neg=272 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17621533694885985;  // std dev = 1.065, 174.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=169 */
%   | else if ( movie(E, B) )
%   | | then return 0.005301579734077348;  // std dev = 4.977, 143.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=33 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.07324622576333693;  // std dev = 1.02e-07, 289.000 (wgt'ed) examples reached here.  /* #neg=289 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.16152373891814556;  // std dev = 0.494, 170.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=169 */
%   | else if ( genre(A, E) )
%   | | then return -0.07355565243805581;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.01346315012411755;  // std dev = 4.962, 130.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=33 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420324;  // std dev = 0.000, 361.000 (wgt'ed) examples reached here.  /* #neg=361 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return -0.3675603456088288;  // std dev = 7.45e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.14342871369362345;  // std dev = 1.01e-07, 169.000 (wgt'ed) examples reached here.  /* #pos=169 */
%   | | else if ( genre(A, G) )
%   | | | then return -0.06869775605668295;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return -0.00880739383762529;  // std dev = 5.028, 141.000 (wgt'ed) examples reached here.  /* #neg=108 #pos=33 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.06419184008202598;  // std dev = 1.04e-07, 293.000 (wgt'ed) examples reached here.  /* #neg=293 */


Results
   AUC ROC   = 0.971565
   AUC PR    = 0.823063
   CLL	      = -0.123438
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.777778
   F1        = 0.875


Total learning time: 1.446 seconds
Total inference time: 0.882 seconds
AUC ROC: 0.971565


Results scoring model
   AUC ROC   = 0.979778
   AUC PR    = 0.874016
   CLL	      = -0.120693
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.836634
   F1        = 0.911051


Total scoring time: 1.393 seconds
Parameter learned model CLL: -0.120693


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 12, 0], 'true,false,true': [1.06e-06, 0, 169], 'true,false,false,true': [5.005, 104, 33], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.03e-07, 302, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.842, 1, 169], 'true,false,true': [5.27e-09, 11, 0], 'true,false,false,true': [4.987, 101, 33], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 290, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.15, 14, 0], 'true,false,true': [0.363, 88, 202], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 279, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.941, 2, 169], 'true,false,true': [3.73e-09, 11, 0], 'true,false,false,true': [4.969, 98, 33], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 328, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.185, 8, 0], 'true,false,true': [2.15e-07, 0, 169], 'true,false,false,true': [5.033, 109, 33], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.52e-07, 296, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.934, 3, 169], 'true,false,true': [0.417, 111, 33], 'true,false,false': [0.0, 0, 0], 'false,true': [1.12e-07, 333, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.367, 14, 0], 'true,false,true': [1.03e-07, 0, 169], 'true,false,false,true': [4.884, 86, 33], 'true,false,false,false': [0.0, 0, 0], 'false,true': [4.71e-08, 272, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [1.065, 5, 169], 'true,false,true': [4.977, 110, 33], 'true,false,false': [0.0, 0, 0], 'false,true': [1.02e-07, 289, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.494, 1, 169], 'true,false,true': [0.0, 13, 0], 'true,false,false,true': [4.962, 97, 33], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 361, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true,true,false': 'genre(A, G)'}, {'true,true,true,true': [7.45e-09, 3, 0], 'true,true,true,false': [1.01e-07, 0, 169], 'true,true,false,true': [0.0, 10, 0], 'true,true,false,false': [5.028, 108, 33], 'true,false': [0.0, 0, 0], 'false': [1.04e-07, 293, 0]}]]
[{'': [0.23171551758237866, 3.529185773642882e-17], 'true': [-1.1564823173178714e-17, 0.22435815284720015], 'true,false': [6.6429439201240136e-15, 0.18285470723000816], 'true,false,false': [0.18285470723000816, nan], 'false': [3.529185773642882e-17, nan]}, {'': [0.18419751244423932, -8.269247355828753e-17], 'true': [0.004174630470814122, 0.17485155706314526], 'true,false': [2.523234146875356e-18, 0.18562040543550806], 'true,false,false': [0.18562040543550806, nan], 'false': [-8.269247355828753e-17, nan]}, {'': [0.13697630618224146, -1.0186992627384949e-16], 'true': [0.001600561823106032, 0.13212533661094522], 'true,false': [0.13212533661094522, nan], 'false': [-1.0186992627384949e-16, nan]}, {'': [0.13005446657813435, -1.624716621402668e-17], 'true': [0.005183307506165385, 0.17501705204948603], 'true,false': [1.261617073437678e-18, 0.18845055649437753], 'true,false,false': [0.18845055649437753, nan], 'false': [-1.624716621402668e-17, nan]}, {'': [0.11176719010025055, 7.801567200068668e-17], 'true': [0.004278830616245637, 0.11211559791037604], 'true,false': [2.7328566760003855e-16, 0.17838722475699215], 'true,false,false': [0.17838722475699215, nan], 'false': [7.801567200068668e-17, nan]}, {'': [0.09899226068140807, 3.734083446186713e-17], 'true': [0.005076310443745783, 0.17403494863258256], 'true,false': [0.17403494863258256, nan], 'false': [3.734083446186713e-17, nan]}, {'': [0.09065779789067323, 8.163404592832034e-18], 'true': [0.009599195653072299, 0.09078888526383712], 'true,false': [6.306592329231659e-17, 0.20040957559494318], 'true,false,false': [0.20040957559494318, nan], 'false': [8.163404592832034e-18, nan]}, {'': [0.08894137574216195, 3.611106031652758e-17], 'true': [0.0065161248889747045, 0.1732009582550589], 'true,false': [0.1732009582550589, nan], 'false': [3.611106031652758e-17, nan]}, {'': [0.08576961427583413, -9.964328531261793e-17], 'true': [0.0014346658122870249, 0.17281515671567738], 'true,false': [-3.2025664171879517e-18, 0.1894082840236676], 'true,false,false': [0.1894082840236676, nan], 'false': [-9.964328531261793e-17, nan]}, {'': [0.08614292012207235, 3.7133739390192947e-17], 'true': [0.08614292012207235, nan], 'true,true': [0.004474806587834369, 0.16761648277194288], 'true,true,false': [-6.938893903907229e-19, 0.1792666364870969], 'true,true,true': [1.850371707708594e-17, 6.043817648847006e-17]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, E).;true;true
9;true,true;genre(A, F).;true;true
9;true,false;genre(A, G).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995096;  // std dev = 1.06e-06, 169.000 (wgt'ed) examples reached here.  /* #pos=169 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.8581489350995116;  // std dev = 2.23e-07, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | | else return -0.14185106490048763;  // std dev = 8.56e-08, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
%   else return -0.14185106490048785;  // std dev = 9.42e-08, 299.000 (wgt'ed) examples reached here.  /* #neg=299 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.7194734122109548;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | else if ( actor(A) )
%   | | | then return 0.719473412210955;  // std dev = 0.000, 110.000 (wgt'ed) examples reached here.  /* #pos=110 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 5.27e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( actor(B) )
%   | | | then return -0.12544463852839147;  // std dev = 0.000, 83.000 (wgt'ed) examples reached here.  /* #neg=83 */
%   | | | else return 0.7194734122109547;  // std dev = 0.000, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   else return -0.125444638528392;  // std dev = 0.000, 294.000 (wgt'ed) examples reached here.  /* #neg=294 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360638;  // std dev = 7.45e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( director(B), actor(A) )
%   | | then return 0.5553664367462836;  // std dev = 5.65e-07, 202.000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | | else return -0.11505928105929829;  // std dev = 0.161, 84.000 (wgt'ed) examples reached here.  /* #neg=84 */
%   else return -0.11231637819360696;  // std dev = 0.000, 285.000 (wgt'ed) examples reached here.  /* #neg=285 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4144599964309823;  // std dev = 0.518, 170.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=169 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783627;  // std dev = 3.73e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.41751358415831047;  // std dev = 0.000, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | | else return -0.1038249812451881;  // std dev = 0.149, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */
%   else return -0.10159632948783653;  // std dev = 0.000, 323.000 (wgt'ed) examples reached here.  /* #neg=323 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.10338227115970669;  // std dev = 0.068, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( genre(B, E) )
%   | | then return 0.32137745271314894;  // std dev = 0.000, 169.000 (wgt'ed) examples reached here.  /* #pos=169 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.3207118471601495;  // std dev = 2.98e-08, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | | else return -0.09557654933138851;  // std dev = 0.169, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
%   else return -0.09269127618926044;  // std dev = 1.25e-07, 270.000 (wgt'ed) examples reached here.  /* #neg=270 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.25555217771974326;  // std dev = 0.002, 202.000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.08756755782256394;  // std dev = 0.182, 123.000 (wgt'ed) examples reached here.  /* #neg=123 */
%   else return -0.08518475138839678;  // std dev = 1.01e-07, 293.000 (wgt'ed) examples reached here.  /* #neg=293 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08137598150486905;  // std dev = 0.044, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( genre(B, E) )
%   | | then return 0.21009076232969828;  // std dev = 0.000, 169.000 (wgt'ed) examples reached here.  /* #pos=169 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.20969474474853442;  // std dev = 0.000, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | | else return -0.07991861898924295;  // std dev = 0.121, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */
%   else return -0.07877675473109141;  // std dev = 2.98e-08, 321.000 (wgt'ed) examples reached here.  /* #neg=321 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.17729328782631953;  // std dev = 0.002, 202.000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.07499979519826334;  // std dev = 0.145, 112.000 (wgt'ed) examples reached here.  /* #neg=112 */
%   else return -0.07324622576333699;  // std dev = 9.54e-08, 303.000 (wgt'ed) examples reached here.  /* #neg=303 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14988466888390053;  // std dev = 0.367, 171.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=169 */
%   | else if ( genre(A, E) )
%   | | then return -0.06732444403730312;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( actor(B) )
%   | | | then return -0.06759441806900288;  // std dev = 0.000, 97.000 (wgt'ed) examples reached here.  /* #neg=97 */
%   | | | else return 0.15267738337484715;  // std dev = 0.000, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   else return -0.06842697784420299;  // std dev = 0.000, 298.000 (wgt'ed) examples reached here.  /* #neg=298 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.13451118103839238;  // std dev = 1.01e-07, 169.000 (wgt'ed) examples reached here.  /* #pos=169 */
%   | else if ( genre(A, F) )
%   | | then return -0.06321818158459512;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.1339551320857586;  // std dev = 0.000, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | | else return -0.0686013265266099;  // std dev = 0.220, 98.000 (wgt'ed) examples reached here.  /* #neg=98 */
%   else return -0.06419184008202597;  // std dev = 1.13e-07, 296.000 (wgt'ed) examples reached here.  /* #neg=296 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063578
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.058 seconds
Total inference time: 0.88 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064653
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.308 seconds
Refined model CLL: -0.064653


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063578
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 6.205 seconds
Total inference time: 0.88 seconds
AUC ROC: 1.0
Total revision time: 6.205
Best scored revision CLL: -0.064653


Dataset: 4_cora_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 00:06:41
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063578, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 6.205, 'Inference time': 0.88, 'parameter_0.6': {'AUC ROC': 0.971565, 'AUC PR': 0.823063, 'CLL': -0.123438, 'Precision': [1.0, 0.5], 'Recall': 0.777778, 'F1': 0.875, 'Learning time': 1.446, 'Inference time': 0.882}}


Amount of data: 0.8
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;haswordauthor(E, C).;true;true
7;true,true,true;author(F, E), title(F, D).;false;false
7;true,true,false;title(G, D), venue(G, B).;false;false
7;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
7;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
7;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, B).;false;true
8;true,true,false;title(F, D), venue(F, A).;false;false
8;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
8;true,false,false;haswordvenue(A, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
8;false,true;haswordauthor(M, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;true,true;author(F, E), venue(F, B).;true;true
9;true,true,true;samebib(F, G), venue(G, A).;false;false
9;true,true,false;author(H, E), venue(H, A).;false;false
9;true,false;haswordtitle(I, C).;true;true
9;true,false,true;title(J, I), venue(J, A).;false;false
9;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else if ( genre(B, E) )
%   | | then return 0.858148935099509;  // std dev = 1.08e-06, 229.000 (wgt'ed) examples reached here.  /* #pos=229 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.08803399257077561;  // std dev = 5.550, 174.000 (wgt'ed) examples reached here.  /* #neg=134 #pos=40 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.1418510649004873;  // std dev = 2.98e-07, 414.000 (wgt'ed) examples reached here.  /* #neg=414 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.6909529716796712;  // std dev = 2.349, 237.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=229 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.10350136699276433;  // std dev = 5.454, 156.000 (wgt'ed) examples reached here.  /* #neg=116 #pos=40 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839224;  // std dev = 0.000, 392.000 (wgt'ed) examples reached here.  /* #neg=392 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.13235789366884387;  // std dev = 0.141, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( movie(E, A) )
%   | | then return 0.3468126755857964;  // std dev = 0.371, 403.000 (wgt'ed) examples reached here.  /* #neg=134 #pos=269 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360613;  // std dev = 0.000, 418.000 (wgt'ed) examples reached here.  /* #neg=418 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.46442553489035915;  // std dev = 1.341, 233.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=229 */
%   | else if ( genre(A, E) )
%   | | then return -0.09978160052750075;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.018669444735566164;  // std dev = 5.650, 198.000 (wgt'ed) examples reached here.  /* #neg=158 #pos=40 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783578;  // std dev = 1.24e-08, 423.000 (wgt'ed) examples reached here.  /* #neg=423 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.139676375801762;  // std dev = 0.336, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else if ( genre(B, E) )
%   | | then return 0.3634687668012519;  // std dev = 3.86e-07, 229.000 (wgt'ed) examples reached here.  /* #pos=229 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.05096085831761557;  // std dev = 5.409, 149.000 (wgt'ed) examples reached here.  /* #neg=109 #pos=40 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926075;  // std dev = 1.71e-07, 383.000 (wgt'ed) examples reached here.  /* #neg=383 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2794917310242028;  // std dev = 0.763, 231.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=229 */
%   | else if ( movie(E, A) )
%   | | then return 0.010830245264594869;  // std dev = 0.419, 173.000 (wgt'ed) examples reached here.  /* #neg=133 #pos=40 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 1.30e-07, 395.000 (wgt'ed) examples reached here.  /* #neg=395 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.13598038810070498;  // std dev = 0.408, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else if ( genre(B, E) )
%   | | then return 0.23088857589774603;  // std dev = 2.89e-07, 229.000 (wgt'ed) examples reached here.  /* #pos=229 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.033242715668120947;  // std dev = 5.435, 153.000 (wgt'ed) examples reached here.  /* #neg=113 #pos=40 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109143;  // std dev = 2.13e-07, 372.000 (wgt'ed) examples reached here.  /* #neg=372 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.19036668797615627;  // std dev = 0.477, 230.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=229 */
%   | else if ( movie(E, B) )
%   | | then return -0.00433758519508883;  // std dev = 5.537, 184.000 (wgt'ed) examples reached here.  /* #neg=144 #pos=40 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.0732462257633377;  // std dev = 0.000, 384.000 (wgt'ed) examples reached here.  /* #neg=384 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.15614915588022363;  // std dev = 0.973, 233.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=229 */
%   | else if ( genre(A, E) )
%   | | then return -0.07118686167200249;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.004754550960519151;  // std dev = 5.555, 175.000 (wgt'ed) examples reached here.  /* #neg=135 #pos=40 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420335;  // std dev = 0.000, 400.000 (wgt'ed) examples reached here.  /* #neg=400 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return -0.361587713710481;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.1442160984030068;  // std dev = 1.55e-07, 229.000 (wgt'ed) examples reached here.  /* #pos=229 */
%   | | else if ( genre(A, G) )
%   | | | then return -0.06662133134590177;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.020688016503920277;  // std dev = 5.466, 158.000 (wgt'ed) examples reached here.  /* #neg=118 #pos=40 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.06419184008202564;  // std dev = 1.86e-07, 385.000 (wgt'ed) examples reached here.  /* #neg=385 */


Results
   AUC ROC   = 0.971565
   AUC PR    = 0.823063
   CLL	      = -0.121864
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.777778
   F1        = 0.875


Total learning time: 1.562 seconds
Total inference time: 0.896 seconds
AUC ROC: 0.971565


Results scoring model
   AUC ROC   = 0.981558
   AUC PR    = 0.885381
   CLL	      = -0.118735
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.851301
   F1        = 0.919679


Total scoring time: 1.624 seconds
Parameter learned model CLL: -0.118735


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 18, 0], 'true,false,true': [1.08e-06, 0, 229], 'true,false,false,true': [5.55, 134, 40], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.98e-07, 414, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [2.349, 8, 229], 'true,false,true': [5.27e-09, 12, 0], 'true,false,false,true': [5.454, 116, 40], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 392, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.141, 11, 0], 'true,false,true': [0.371, 134, 269], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 418, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.341, 4, 229], 'true,false,true': [0.0, 17, 0], 'true,false,false,true': [5.65, 158, 40], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.24e-08, 423, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.336, 16, 0], 'true,false,true': [3.86e-07, 0, 229], 'true,false,false,true': [5.409, 109, 40], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.71e-07, 383, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.763, 2, 229], 'true,false,true': [0.419, 133, 40], 'true,false,false': [0.0, 0, 0], 'false,true': [1.3e-07, 395, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.408, 17, 0], 'true,false,true': [2.89e-07, 0, 229], 'true,false,false,true': [5.435, 113, 40], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.13e-07, 372, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.477, 1, 229], 'true,false,true': [5.537, 144, 40], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 384, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.973, 4, 229], 'true,false,true': [0.0, 15, 0], 'true,false,false,true': [5.555, 135, 40], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 400, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true,true,false': 'genre(A, G)'}, {'true,true,true,true': [1.05e-08, 3, 0], 'true,true,true,false': [1.55e-07, 0, 229], 'true,true,false,true': [0.0, 12, 0], 'true,true,false,false': [5.466, 118, 40], 'true,false': [0.0, 0, 0], 'false': [1.86e-07, 385, 0]}]]
[{'': [0.23069154428151833, 2.1453585016911237e-16], 'true': [-3.0839528461809902e-18, 0.22194582812529204], 'true,false': [5.088602998456613e-15, 0.17703791782269906], 'true,false,false': [0.17703791782269906, nan], 'false': [2.1453585016911237e-16, nan]}, {'': [0.1770080699487529, -1.2688263138573217e-16], 'true': [0.02328401949181899, 0.18052176661034677], 'true,false': [2.3129646346357427e-18, 0.19066403681788321], 'true,false,false': [0.19066403681788321, nan], 'false': [-1.2688263138573217e-16, nan]}, {'': [0.13993632916789492, -1.4873801286844203e-17], 'true': [0.001807480541448838, 0.13760599459250708], 'true,false': [0.13760599459250708, nan], 'false': [-1.4873801286844203e-17, nan]}, {'': [0.1353023940156195, 1.5537873063311884e-16], 'true': [0.007722412655997312, 0.14894043891017944], 'true,false': [0.0, 0.16120803999591957], 'true,false,false': [0.16120803999591957, nan], 'false': [1.5537873063311884e-16, nan]}, {'': [0.10255432816216302, 7.652712232403168e-17], 'true': [0.007058678674660167, 0.1007337221736222], 'true,false': [6.515894083389565e-16, 0.19638755011035647], 'true,false,false': [0.19638755011035647, nan], 'false': [7.652712232403168e-17, nan]}, {'': [0.09441518752698252, 4.2722506264056656e-17], 'true': [0.0025193192562933072, 0.17584941284671546], 'true,false': [0.17584941284671546, nan], 'false': [4.2722506264056656e-17, nan]}, {'': [0.08681555562851928, 1.217663962492107e-16], 'true': [0.009809460742501483, 0.08671575706711165], 'true,false': [3.6457978799917805e-16, 0.19308812849758752], 'true,false,false': [0.19308812849758752, nan], 'false': [1.217663962492107e-16, nan]}, {'': [0.08396050624345626, -6.129356281784719e-17], 'true': [0.0009908511967712957, 0.16661160061229124], 'true,false': [0.16661160061229124, nan], 'false': [-6.129356281784719e-17, nan]}, {'': [0.08216262583553337, -1.1379786002407854e-16], 'true': [0.004066883565426285, 0.1627269232440885], 'true,false': [-2.7755575615628915e-18, 0.17632653061224426], 'true,false,false': [0.17632653061224426, nan], 'false': [-1.1379786002407854e-16, nan]}, {'': [0.08010934478220942, 8.997132043715555e-17], 'true': [0.08010934478220942, nan], 'true,true': [0.0032654644766544607, 0.17622609249796017], 'true,true,false': [0.0, 0.18907226406024621], 'true,true,true': [3.700743415417188e-17, 1.0471972634018944e-16]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, E).;true;true
9;true,true;genre(A, F).;true;true
9;true,false;genre(A, G).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( genre(B, E) )
%   | | then return 0.858148935099509;  // std dev = 1.08e-06, 229.000 (wgt'ed) examples reached here.  /* #pos=229 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.8581489350995117;  // std dev = 2.46e-07, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | | else return -0.14185106490048804;  // std dev = 0.000, 149.000 (wgt'ed) examples reached here.  /* #neg=149 */
%   else return -0.1418510649004872;  // std dev = 2.98e-07, 439.000 (wgt'ed) examples reached here.  /* #neg=439 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( actor(A) )
%   | | then return 0.7194734122109573;  // std dev = 0.000, 229.000 (wgt'ed) examples reached here.  /* #pos=229 */
%   | | else return -0.12544463852839138;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | else if ( actor(B) )
%   | | | then return -0.12544463852839105;  // std dev = 8.16e-08, 126.000 (wgt'ed) examples reached here.  /* #neg=126 */
%   | | | else return 0.719473412210955;  // std dev = 0.000, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   else return -0.12544463852839224;  // std dev = 0.000, 389.000 (wgt'ed) examples reached here.  /* #neg=389 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360635;  // std dev = 1.49e-08, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else if ( actor(A), director(B) )
%   | | then return 0.5553664367462832;  // std dev = 3.58e-07, 269.000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | | else return -0.11422054216648331;  // std dev = 0.162, 121.000 (wgt'ed) examples reached here.  /* #neg=121 */
%   else return -0.11231637819360632;  // std dev = 0.000, 379.000 (wgt'ed) examples reached here.  /* #neg=379 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.41301912603150415;  // std dev = 0.731, 231.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=229 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783631;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.4175135841583105;  // std dev = 0.000, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | | else return -0.10230404296243001;  // std dev = 0.106, 121.000 (wgt'ed) examples reached here.  /* #neg=121 */
%   else return -0.10159632948783597;  // std dev = 2.06e-07, 393.000 (wgt'ed) examples reached here.  /* #neg=393 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.10030202816929534;  // std dev = 0.085, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else if ( genre(B, E) )
%   | | then return 0.32169177872562066;  // std dev = 0.000, 229.000 (wgt'ed) examples reached here.  /* #pos=229 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.32071184716014944;  // std dev = 2.98e-08, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | | else return -0.09608070821594204;  // std dev = 0.195, 110.000 (wgt'ed) examples reached here.  /* #neg=110 */
%   else return -0.09269127618926101;  // std dev = 1.26e-07, 419.000 (wgt'ed) examples reached here.  /* #neg=419 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2557413741953813;  // std dev = 0.004, 269.000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.08729678588683816;  // std dev = 0.172, 145.000 (wgt'ed) examples reached here.  /* #neg=145 */
%   else return -0.08518475138839678;  // std dev = 1.21e-07, 385.000 (wgt'ed) examples reached here.  /* #neg=385 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08421044088920222;  // std dev = 0.061, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else if ( genre(B, E) )
%   | | then return 0.2102463599560944;  // std dev = 0.000, 229.000 (wgt'ed) examples reached here.  /* #pos=229 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.2096633922898406;  // std dev = 4.21e-08, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | | else return -0.07955533594015815;  // std dev = 0.122, 127.000 (wgt'ed) examples reached here.  /* #neg=127 */
%   else return -0.07877675473109143;  // std dev = 1.07e-07, 383.000 (wgt'ed) examples reached here.  /* #neg=383 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1687734970425862;  // std dev = 0.763, 236.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=229 */
%   | else if ( actor(A), director(B) )
%   | | then return 0.17702731296241603;  // std dev = 4.94e-08, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | else return -0.07375323514142099;  // std dev = 0.115, 140.000 (wgt'ed) examples reached here.  /* #neg=140 */
%   else return -0.07324622576333771;  // std dev = 0.000, 417.000 (wgt'ed) examples reached here.  /* #neg=417 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14920457751095037;  // std dev = 0.570, 233.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=229 */
%   | else if ( genre(A, E) )
%   | | then return -0.0674352378420377;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.15269137246348838;  // std dev = 0.000, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | | else return -0.06977191237720064;  // std dev = 0.132, 119.000 (wgt'ed) examples reached here.  /* #neg=119 */
%   else return -0.06842697784420326;  // std dev = 0.000, 371.000 (wgt'ed) examples reached here.  /* #neg=371 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( genre(A, E) )
%   | | then return -0.1518165403305464;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.13567746708984885;  // std dev = 0.000, 229.000 (wgt'ed) examples reached here.  /* #pos=229 */
%   | else if ( genre(A, F) )
%   | | then return -0.06331610544593826;  // std dev = 6.45e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( actor(B) )
%   | | | then return -0.06354945645011933;  // std dev = 0.000, 121.000 (wgt'ed) examples reached here.  /* #neg=121 */
%   | | | else return 0.1273713067425854;  // std dev = 0.267, 41.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=40 */
%   else return -0.06419184008202561;  // std dev = 1.91e-07, 392.000 (wgt'ed) examples reached here.  /* #neg=392 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063708
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.303 seconds
Total inference time: 0.918 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.06488
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.518 seconds
Refined model CLL: -0.06488


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063708
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 7.007 seconds
Total inference time: 0.918 seconds
AUC ROC: 1.0
Total revision time: 7.007
Best scored revision CLL: -0.06488


Dataset: 4_cora_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 00:06:50
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063708, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 7.007, 'Inference time': 0.918, 'parameter_0.8': {'AUC ROC': 0.971565, 'AUC PR': 0.823063, 'CLL': -0.121864, 'Precision': [1.0, 0.5], 'Recall': 0.777778, 'F1': 0.875, 'Learning time': 1.562, 'Inference time': 0.896}}


Amount of data: 1.0
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;haswordauthor(E, C).;true;true
7;true,true,true;author(F, E), title(F, D).;false;false
7;true,true,false;title(G, D), venue(G, B).;false;false
7;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
7;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
7;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, B).;false;true
8;true,true,false;title(F, D), venue(F, A).;false;false
8;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
8;true,false,false;haswordvenue(A, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
8;false,true;haswordauthor(M, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;true,true;author(F, E), venue(F, B).;true;true
9;true,true,true;samebib(F, G), venue(G, A).;false;false
9;true,true,false;author(H, E), venue(H, A).;false;false
9;true,false;haswordtitle(I, C).;true;true
9;true,false,true;title(J, I), venue(J, A).;false;false
9;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995085;  // std dev = 1.08e-06, 288.000 (wgt'ed) examples reached here.  /* #pos=288 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.08087620782678483;  // std dev = 6.171, 220.000 (wgt'ed) examples reached here.  /* #neg=171 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048804;  // std dev = 0.000, 533.000 (wgt'ed) examples reached here.  /* #neg=533 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7165498203398873;  // std dev = 0.843, 289.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=288 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 7.45e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.07382239242672192;  // std dev = 6.159, 217.000 (wgt'ed) examples reached here.  /* #neg=168 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839227;  // std dev = 0.000, 476.000 (wgt'ed) examples reached here.  /* #neg=476 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.13226220385904827;  // std dev = 0.208, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | else if ( movie(E, A) )
%   | | then return 0.36123246306457285;  // std dev = 0.361, 489.000 (wgt'ed) examples reached here.  /* #neg=152 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.1123163781936058;  // std dev = 0.000, 503.000 (wgt'ed) examples reached here.  /* #neg=503 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.45238154685758397;  // std dev = 1.626, 294.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=288 */
%   | else if ( genre(A, E) )
%   | | then return -0.0997901962161159;  // std dev = 5.27e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.018718526492943515;  // std dev = 6.120, 208.000 (wgt'ed) examples reached here.  /* #neg=159 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783533;  // std dev = 1.61e-08, 515.000 (wgt'ed) examples reached here.  /* #neg=515 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12807880549966083;  // std dev = 0.435, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | else if ( genre(B, E) )
%   | | then return 0.35702207785229123;  // std dev = 0.000, 288.000 (wgt'ed) examples reached here.  /* #pos=288 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.0022764462941759875;  // std dev = 6.191, 225.000 (wgt'ed) examples reached here.  /* #neg=176 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926146;  // std dev = 0.000, 499.000 (wgt'ed) examples reached here.  /* #neg=499 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2723955455779802;  // std dev = 1.077, 292.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=288 */
%   | else if ( movie(E, A) )
%   | | then return 0.01913048732884359;  // std dev = 0.420, 211.000 (wgt'ed) examples reached here.  /* #neg=162 #pos=49 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 1.43e-07, 500.000 (wgt'ed) examples reached here.  /* #neg=500 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09326570140730019;  // std dev = 0.230, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | else if ( genre(B, E) )
%   | | then return 0.2283361065954296;  // std dev = 0.000, 288.000 (wgt'ed) examples reached here.  /* #pos=288 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.025770431420402206;  // std dev = 6.067, 197.000 (wgt'ed) examples reached here.  /* #neg=148 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109205;  // std dev = 0.000, 496.000 (wgt'ed) examples reached here.  /* #neg=496 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18891502844171496;  // std dev = 0.488, 289.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=288 */
%   | else if ( movie(E, B) )
%   | | then return 0.021307325335109994;  // std dev = 6.039, 211.000 (wgt'ed) examples reached here.  /* #neg=162 #pos=49 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.07324622576333678;  // std dev = 1.87e-07, 526.000 (wgt'ed) examples reached here.  /* #neg=526 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.15968206396893023;  // std dev = 0.708, 290.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=288 */
%   | else if ( genre(A, E) )
%   | | then return -0.07725403670596512;  // std dev = 7.45e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.003315972636691811;  // std dev = 6.151, 215.000 (wgt'ed) examples reached here.  /* #neg=166 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420354;  // std dev = 0.000, 497.000 (wgt'ed) examples reached here.  /* #neg=497 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return -0.37624109617989876;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0.14250190519856448;  // std dev = 2.70e-07, 288.000 (wgt'ed) examples reached here.  /* #pos=288 */
%   | | else if ( genre(A, G) )
%   | | | then return -0.07192365193216001;  // std dev = 5.89e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return 0.018096933307388405;  // std dev = 6.067, 197.000 (wgt'ed) examples reached here.  /* #neg=148 #pos=49 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.06419184008202537;  // std dev = 2.46e-07, 497.000 (wgt'ed) examples reached here.  /* #neg=497 */


Results
   AUC ROC   = 0.971565
   AUC PR    = 0.823063
   CLL	      = -0.121225
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.777778
   F1        = 0.875


Total learning time: 1.96 seconds
Total inference time: 0.887 seconds
AUC ROC: 0.971565


Results scoring model
   AUC ROC   = 0.982257
   AUC PR    = 0.888508
   CLL	      = -0.117412
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.854599
   F1        = 0.9216


Total scoring time: 1.947 seconds
Parameter learned model CLL: -0.117412


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 17, 0], 'true,false,true': [1.08e-06, 0, 288], 'true,false,false,true': [6.171, 171, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 533, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.843, 1, 288], 'true,false,true': [7.45e-09, 16, 0], 'true,false,false,true': [6.159, 168, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 476, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.208, 23, 0], 'true,false,true': [0.361, 152, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 503, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.626, 6, 288], 'true,false,true': [5.27e-09, 16, 0], 'true,false,false,true': [6.12, 159, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.61e-08, 515, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.435, 32, 0], 'true,false,true': [0.0, 0, 288], 'true,false,false,true': [6.191, 176, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 499, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [1.077, 4, 288], 'true,false,true': [0.42, 162, 49], 'true,false,false': [0.0, 0, 0], 'false,true': [1.43e-07, 500, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.23, 22, 0], 'true,false,true': [0.0, 0, 288], 'true,false,false,true': [6.067, 148, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 496, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.488, 1, 288], 'true,false,true': [6.039, 162, 49], 'true,false,false': [0.0, 0, 0], 'false,true': [1.87e-07, 526, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.708, 2, 288], 'true,false,true': [7.45e-09, 15, 0], 'true,false,false,true': [6.151, 166, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 497, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true,true,false': 'genre(A, G)'}, {'true,true,true,true': [0.0, 1, 0], 'true,true,true,false': [2.7e-07, 0, 288], 'true,true,false,true': [5.89e-09, 11, 0], 'true,true,false,false': [6.067, 148, 49], 'true,false': [0.0, 0, 0], 'false': [2.46e-07, 497, 0]}]]
[{'': [0.22986303854875542, -1.5663934606343672e-16], 'true': [-3.2653618371328133e-18, 0.22330507161014587], 'true,false': [4.046146134189459e-15, 0.17311983471074482], 'true,false,false': [0.17311983471074482, nan], 'false': [-1.5663934606343672e-16, nan]}, {'': [0.18164883573627832, -1.2315078928615182e-16], 'true': [0.0024616481554289157, 0.16535268028211597], 'true,false': [3.469446951953614e-18, 0.1748178980228927], 'true,false,false': [0.1748178980228927, nan], 'false': [-1.2315078928615182e-16, nan]}, {'': [0.1348652304746938, -8.82881132902709e-18], 'true': [0.0018897208170119346, 0.1301795642434446], 'true,false': [0.1301795642434446, nan], 'false': [-8.82881132902709e-18, nan]}, {'': [0.12579419605363373, 2.604173618926581e-16], 'true': [0.008993184034528976, 0.16814905892210372], 'true,false': [1.734723475976807e-18, 0.18008043639053092], 'true,false,false': [0.18008043639053092, nan], 'false': [2.604173618926581e-16, nan]}, {'': [0.10652377533203913, -2.847866676393187e-17], 'true': [0.005900898544735512, 0.1065023001516458], 'true,false': [-1.603655480014115e-15, 0.17035061728394985], 'true,false,false': [0.17035061728394985, nan], 'false': [-2.847866676393187e-17, nan]}, {'': [0.09180353423295586, 4.085620730620576e-17], 'true': [0.003973088389755893, 0.1761146755181831], 'true,false': [0.1761146755181831, nan], 'false': [4.085620730620576e-17, nan]}, {'': [0.08455773368311043, -3.6708987104541464e-17], 'true': [0.002414846591329491, 0.08579848470010741], 'true,false': [-1.4186183092432555e-16, 0.18686387178231947], 'true,false,false': [0.18686387178231947, nan], 'false': [-3.6708987104541464e-17, nan]}, {'': [0.08027287269211564, 6.669780908394477e-17], 'true': [0.000825134585282678, 0.17285254307165393], 'true,false': [0.17285254307165393, nan], 'false': [6.669780908394477e-17, nan]}, {'': [0.08081480472438655, -1.1973431412456416e-16], 'true': [0.0017309135194380767, 0.1648226639403523], 'true,false': [3.7007434154171884e-18, 0.17596538669551223], 'true,false,false': [0.17596538669551223, nan], 'false': [-1.1973431412456416e-16, nan]}, {'': [0.07872630926844922, 1.2152139343985618e-16], 'true': [0.07872630926844922, nan], 'true,true': [0.000927900274493983, 0.17738754485366723], 'true,true,false': [3.1540426835941946e-18, 0.18686387178231773], 'true,true,true': [0.0, 2.528841333868412e-16]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, E).;true;true
9;true,true;genre(A, F).;true;true
9;true,false;genre(A, G).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048774;  // std dev = 1.05e-08, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995085;  // std dev = 1.08e-06, 288.000 (wgt'ed) examples reached here.  /* #pos=288 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.8581489350995122;  // std dev = 1.69e-07, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.14185106490048818;  // std dev = 0.000, 166.000 (wgt'ed) examples reached here.  /* #neg=166 */
%   else return -0.14185106490048774;  // std dev = 0.000, 502.000 (wgt'ed) examples reached here.  /* #neg=502 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7165498203398873;  // std dev = 0.843, 289.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=288 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 7.45e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.7194734122109547;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.1254446385283915;  // std dev = 0.000, 177.000 (wgt'ed) examples reached here.  /* #neg=177 */
%   else return -0.1254446385283923;  // std dev = 0.000, 518.000 (wgt'ed) examples reached here.  /* #neg=518 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( actor(B) )
%   | | then return -0.11231637819360636;  // std dev = 1.49e-08, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | else return -0.2270048757698972;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( actor(A), director(B) )
%   | | then return 0.5559833024177842;  // std dev = 0.005, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | | else return -0.11231637819360636;  // std dev = 6.66e-08, 168.000 (wgt'ed) examples reached here.  /* #neg=168 */
%   else return -0.11231637819360576;  // std dev = 0.000, 519.000 (wgt'ed) examples reached here.  /* #neg=519 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.4180746772352343;  // std dev = 8.43e-08, 105.000 (wgt'ed) examples reached here.  /* #pos=105 */
%   | | else if ( actor(A) )
%   | | | then return 0.41807467723523456;  // std dev = 2.53e-07, 183.000 (wgt'ed) examples reached here.  /* #pos=183 */
%   | | | else return -0.18964690555907676;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783635;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.41736357253769535;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.10159632948783644;  // std dev = 0.000, 149.000 (wgt'ed) examples reached here.  /* #neg=149 */
%   else return -0.10159632948783542;  // std dev = 3.44e-07, 493.000 (wgt'ed) examples reached here.  /* #neg=493 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( actor(B) )
%   | | then return -0.09269127618926103;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else return -0.16219948917790297;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.32109226235016286;  // std dev = 0.000, 288.000 (wgt'ed) examples reached here.  /* #pos=288 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.32061014883104066;  // std dev = 1.12e-07, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.0926912761892607;  // std dev = 7.60e-08, 157.000 (wgt'ed) examples reached here.  /* #neg=157 */
%   else return -0.0926912761892616;  // std dev = 0.000, 533.000 (wgt'ed) examples reached here.  /* #neg=533 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2553839716030072;  // std dev = 0.002, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.08582659803941324;  // std dev = 0.079, 175.000 (wgt'ed) examples reached here.  /* #neg=175 */
%   else return -0.08518475138839678;  // std dev = 1.30e-07, 429.000 (wgt'ed) examples reached here.  /* #neg=429 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( actor(B) )
%   | | then return -0.07873018788357473;  // std dev = 9.86e-09, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | else return -0.1312468509670233;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.20994898129210027;  // std dev = 0.000, 288.000 (wgt'ed) examples reached here.  /* #pos=288 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.20966210756310558;  // std dev = 4.71e-08, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.07873018788357501;  // std dev = 0.000, 170.000 (wgt'ed) examples reached here.  /* #neg=170 */
%   else return -0.07877675473109207;  // std dev = 0.000, 499.000 (wgt'ed) examples reached here.  /* #neg=499 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.1772367693127691;  // std dev = 0.000, 105.000 (wgt'ed) examples reached here.  /* #pos=105 */
%   | | else return 0.1709430997431266;  // std dev = 0.043, 187.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=183 */
%   | else if ( actor(A), director(B) )
%   | | then return 0.17702637059157492;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | else return -0.07320582771014077;  // std dev = 2.36e-08, 184.000 (wgt'ed) examples reached here.  /* #neg=184 */
%   else return -0.07324622576333674;  // std dev = 1.99e-07, 537.000 (wgt'ed) examples reached here.  /* #neg=537 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.15285025983072675;  // std dev = 8.16e-08, 105.000 (wgt'ed) examples reached here.  /* #pos=105 */
%   | | else if ( actor(A) )
%   | | | then return 0.15366699032093484;  // std dev = 0.000, 183.000 (wgt'ed) examples reached here.  /* #pos=183 */
%   | | | else return -0.13583968891765946;  // std dev = 5.27e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(A, E) )
%   | | then return -0.06839161552795527;  // std dev = 3.73e-09, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.1526906575250032;  // std dev = 5.77e-08, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.06839161552795518;  // std dev = 0.000, 134.000 (wgt'ed) examples reached here.  /* #neg=134 */
%   else return -0.06842697784420358;  // std dev = 0.000, 520.000 (wgt'ed) examples reached here.  /* #neg=520 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( genre(A, E) )
%   | | then return -0.12066768191622981;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return 0.13449497977991362;  // std dev = 0.005, 288.000 (wgt'ed) examples reached here.  /* #pos=288 */
%   | else if ( genre(A, F) )
%   | | then return -0.06416063896636424;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.13396549577822628;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.06416063896636413;  // std dev = 3.49e-08, 166.000 (wgt'ed) examples reached here.  /* #neg=166 */
%   else return -0.06419184008202536;  // std dev = 2.46e-07, 513.000 (wgt'ed) examples reached here.  /* #neg=513 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063767
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.854 seconds
Total inference time: 0.906 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064374
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.84 seconds
Refined model CLL: -0.064374


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063767
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 8.601 seconds
Total inference time: 0.906 seconds
AUC ROC: 1.0
Total revision time: 8.601
Best scored revision CLL: -0.064374


Dataset: 4_cora_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 00:07:01
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063767, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 8.601, 'Inference time': 0.906, 'parameter_1.0': {'AUC ROC': 0.971565, 'AUC PR': 0.823063, 'CLL': -0.121225, 'Precision': [1.0, 0.5], 'Recall': 0.777778, 'F1': 0.875, 'Learning time': 1.96, 'Inference time': 0.887}}


Starting fold 1

Target train facts examples: 863
Target train pos examples: 326
Target train neg examples: 10928

Target test facts examples: 215
Target test pos	 examples: 56
Target test neg examples: 3308

Amount of data: 0.2
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;haswordauthor(E, C).;true;true
7;true,true,true;author(F, E), title(F, D).;false;false
7;true,true,false;title(G, D), venue(G, B).;false;false
7;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
7;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
7;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, B).;false;true
8;true,true,false;title(F, D), venue(F, A).;false;false
8;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
8;true,false,false;haswordvenue(A, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
8;false,true;haswordauthor(M, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;true,true;author(F, E), venue(F, B).;true;true
9;true,true,true;samebib(F, G), venue(G, A).;false;false
9;true,true,false;author(H, E), venue(H, A).;false;false
9;true,false;haswordtitle(I, C).;true;true
9;true,false,true;title(J, I), venue(J, A).;false;false
9;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995122;  // std dev = 1.46e-07, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.2152917922423695;  // std dev = 3.105, 42.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=15 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048763;  // std dev = 8.16e-08, 87.000 (wgt'ed) examples reached here.  /* #neg=87 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7029063916082224;  // std dev = 0.837, 51.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=50 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.14901921803816337;  // std dev = 3.196, 47.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=15 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839144;  // std dev = 0.000, 87.000 (wgt'ed) examples reached here.  /* #neg=87 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14975083014175491;  // std dev = 0.130, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( movie(E, A) )
%   | | then return 0.39204583742944266;  // std dev = 0.373, 90.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=65 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360621;  // std dev = 7.45e-08, 93.000 (wgt'ed) examples reached here.  /* #neg=93 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4617992984279755;  // std dev = 0.000, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | else if ( genre(A, E) )
%   | | then return -0.09823011492279393;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.13428918495446435;  // std dev = 3.013, 38.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=15 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783621;  // std dev = 5.43e-09, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1382879330613761;  // std dev = 0.168, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.3509421482307998;  // std dev = 0.000, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.08786794629786066;  // std dev = 3.062, 40.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=15 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926101;  // std dev = 3.49e-08, 93.000 (wgt'ed) examples reached here.  /* #neg=93 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.26527797354533866;  // std dev = 0.527, 51.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=50 */
%   | else if ( movie(E, A) )
%   | | then return 0.09077066652278572;  // std dev = 0.480, 39.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=15 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839682;  // std dev = 5.05e-08, 85.000 (wgt'ed) examples reached here.  /* #neg=85 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1109421341129909;  // std dev = 0.211, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( genre(B, E) )
%   | | then return 0.22598535744364603;  // std dev = 5.16e-08, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.1161387031606453;  // std dev = 2.895, 34.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=15 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.0787767547310916;  // std dev = 5.77e-08, 99.000 (wgt'ed) examples reached here.  /* #neg=99 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18891036300252695;  // std dev = 4.47e-08, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | else if ( movie(E, B) )
%   | | then return -0.027128581062094148;  // std dev = 3.180, 48.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=15 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.07324622576333709;  // std dev = 0.000, 112.000 (wgt'ed) examples reached here.  /* #neg=112 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.16164808450175708;  // std dev = 0.000, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | else if ( genre(A, E) )
%   | | then return -0.07579758845455578;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.032361171064348555;  // std dev = 3.211, 48.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=15 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420265;  // std dev = 4.84e-09, 102.000 (wgt'ed) examples reached here.  /* #neg=102 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return -0.363480396412549;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0.14092064240634813;  // std dev = 5.05e-08, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | | else if ( genre(A, G) )
%   | | | then return -0.07065558704402289;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0.04702848074371987;  // std dev = 3.038, 39.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=15 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.06419184008202626;  // std dev = 0.000, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.159846
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 0.988 seconds
Total inference time: 1.029 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.97423
   AUC PR    = 0.830395
   CLL	      = -0.151429
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.769231
   F1        = 0.869565


Total scoring time: 0.908 seconds
Parameter learned model CLL: -0.151429


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 5, 0], 'true,false,true': [1.46e-07, 0, 50], 'true,false,false,true': [3.105, 27, 15], 'true,false,false,false': [0.0, 0, 0], 'false,true': [8.16e-08, 87, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.837, 1, 50], 'true,false,true': [0.0, 3, 0], 'true,false,false,true': [3.196, 32, 15], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 87, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.13, 6, 0], 'true,false,true': [0.373, 25, 65], 'true,false,false': [0.0, 0, 0], 'false,true': [7.45e-08, 93, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 50], 'true,false,true': [0.0, 4, 0], 'true,false,false,true': [3.013, 23, 15], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.43e-09, 90, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.168, 4, 0], 'true,false,true': [0.0, 0, 50], 'true,false,false,true': [3.062, 25, 15], 'true,false,false,false': [0.0, 0, 0], 'false,true': [3.49e-08, 93, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.527, 1, 50], 'true,false,true': [0.48, 24, 15], 'true,false,false': [0.0, 0, 0], 'false,true': [5.05e-08, 85, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.211, 9, 0], 'true,false,true': [5.16e-08, 0, 50], 'true,false,false,true': [2.895, 19, 15], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.77e-08, 99, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [4.47e-08, 0, 50], 'true,false,true': [3.18, 33, 15], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 112, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 50], 'true,false,true': [0.0, 3, 0], 'true,false,false,true': [3.211, 33, 15], 'true,false,false,false': [0.0, 0, 0], 'false,true': [4.84e-09, 102, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true,true,false': 'genre(A, G)'}, {'true,true,true,true': [0.0, 1, 0], 'true,true,true,false': [5.05e-08, 0, 50], 'true,true,false,true': [0.0, 1, 0], 'true,true,false,false': [3.038, 24, 15], 'true,false': [0.0, 0, 0], 'false': [0.0, 92, 0]}]]
[{'': [0.22106493782548553, 7.656710514656253e-17], 'true': [-2.7755575615628915e-18, 0.2073487712665399], 'true,false': [4.263256414560601e-16, 0.22959183673469336], 'true,false,false': [0.22959183673469336, nan], 'false': [7.656710514656253e-17, nan]}, {'': [0.19146760631120766, -1.7865657867531254e-17], 'true': [0.013723308582567293, 0.20850395419179807], 'true,false': [0.0, 0.21729289271163396], 'true,false,false': [0.21729289271163396, nan], 'false': [-1.7865657867531254e-17, nan]}, {'': [0.14787344278979161, 5.968940992608368e-17], 'true': [0.0028026763853164862, 0.13919835040480336], 'true,false': [0.13919835040480336, nan], 'false': [5.968940992608368e-17, nan]}, {'': [0.13114450877155015, 2.837236618486511e-17], 'true': [-4.263256414560601e-16, 0.22082409503720285], 'true,false': [0.0, 0.2389196675900272], 'true,false,false': [0.2389196675900272, nan], 'false': [2.837236618486511e-17, nan]}, {'': [0.12204205139631984, 1.3131670183738411e-17], 'true': [0.0070341572376286, 0.12125507054880295], 'true,false': [-1.7763568394002506e-16, 0.23437500000000017], 'true,false,false': [0.23437500000000017, nan], 'false': [1.3131670183738411e-17, nan]}, {'': [0.11033688082017111, 3.004132890162188e-17], 'true': [0.005441289050723582, 0.23025145250549378], 'true,false': [0.23025145250549378, nan], 'false': [3.004132890162188e-17, nan]}, {'': [0.10071479278398306, 3.364312195833808e-17], 'true': [0.004955273345361603, 0.10269704304648705], 'true,false': [5.329070518200751e-17, 0.24653979238754337], 'true,false,false': [0.24653979238754337, nan], 'false': [3.364312195833808e-17, nan]}, {'': [0.11486780786451625, -4.956352788505163e-18], 'true': [3.9968028886505634e-17, 0.2107091083938514], 'true,false': [0.2107091083938514, nan], 'false': [-4.956352788505163e-18, nan]}, {'': [0.11181514303978288, 2.3401759832785162e-17], 'true': [-3.1086244689504386e-17, 0.20231033756986547], 'true,false': [0.0, 0.21484374999999992], 'true,false,false': [0.21484374999999992, nan], 'false': [2.3401759832785162e-17, nan]}, {'': [0.10618862419950884, -1.3274405729213829e-17], 'true': [0.10618862419950884, nan], 'true,true': [0.004890819068850156, 0.23110681330212568], 'true,true,false': [0.0, 0.23668639053254445], 'true,true,true': [0.0, 5.10702591327572e-17]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, E).;true;true
9;true,true;genre(A, F).;true;true
9;true,false;genre(A, G).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995122;  // std dev = 1.46e-07, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.14185106490048774;  // std dev = 1.49e-08, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   else return -0.14185106490048763;  // std dev = 8.94e-08, 100.000 (wgt'ed) examples reached here.  /* #neg=100 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109547;  // std dev = 0.000, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.7194734122109542;  // std dev = 5.16e-08, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   else return -0.12544463852839138;  // std dev = 0.000, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5553664367462837;  // std dev = 2.06e-07, 65.000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else return -0.11793598406478038;  // std dev = 0.159, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
%   else return -0.1123163781936062;  // std dev = 7.74e-08, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.4175135841583098;  // std dev = 5.16e-08, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else return 0.39965723930116964;  // std dev = 0.104, 35.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=34 */
%   | else if ( genre(A, E) )
%   | | then return -0.10108454984139215;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( actor(B) )
%   | | | then return -0.10108454984139215;  // std dev = 0.000, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | | | else return 0.4175135841583103;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return -0.10159632948783631;  // std dev = 0.000, 106.000 (wgt'ed) examples reached here.  /* #neg=106 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09226260279975304;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( genre(B, E) )
%   | | then return 0.32336554541478996;  // std dev = 0.013, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | | else if ( actor(B) )
%   | | | then return -0.09226260279975305;  // std dev = 0.000, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | | else return 0.32071184716014967;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return -0.092691276189261;  // std dev = 3.65e-08, 94.000 (wgt'ed) examples reached here.  /* #neg=94 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.25656517143741264;  // std dev = 0.013, 65.000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else return -0.09660814100198653;  // std dev = 0.222, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   else return -0.08518475138839682;  // std dev = 5.87e-08, 106.000 (wgt'ed) examples reached here.  /* #neg=106 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07761607517932298;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.2111061433513731;  // std dev = 0.010, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | | else if ( actor(B) )
%   | | | then return -0.07761607517932297;  // std dev = 1.18e-08, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | | else return 0.20952691790215655;  // std dev = 2.11e-08, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return -0.07877675473109158;  // std dev = 5.96e-08, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17007948148485125;  // std dev = 0.057, 51.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=50 */
%   | else if ( actor(B) )
%   | | then return -0.07223839909158265;  // std dev = 1.29e-08, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | | else return 0.1769272000558253;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return -0.07324622576333707;  // std dev = 0.000, 94.000 (wgt'ed) examples reached here.  /* #neg=94 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.15295387951121353;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else return 0.14336744625713074;  // std dev = 0.069, 35.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=34 */
%   | else if ( genre(A, E) )
%   | | then return -0.06754408015341597;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.1526154166609604;  // std dev = 1.83e-08, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.07898671881552252;  // std dev = 0.235, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   else return -0.06842697784420264;  // std dev = 5.48e-08, 117.000 (wgt'ed) examples reached here.  /* #neg=117 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.13636065708919237;  // std dev = 0.011, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | else if ( genre(A, F) )
%   | | then return -0.06341228690776517;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( actor(B) )
%   | | | then return -0.06273608073553082;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | | else return 0.1339067497839252;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return -0.06419184008202626;  // std dev = 0.000, 99.000 (wgt'ed) examples reached here.  /* #neg=99 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063324
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.443 seconds
Total inference time: 0.967 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.066343
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.901 seconds
Refined model CLL: -0.066343


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063324
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 4.24 seconds
Total inference time: 0.967 seconds
AUC ROC: 1.0
Total revision time: 4.24
Best scored revision CLL: -0.066343


Dataset: 4_cora_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 00:07:08
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063324, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 4.24, 'Inference time': 0.967, 'parameter_0.2': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.159846, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 0.988, 'Inference time': 1.029}}


Amount of data: 0.4
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;haswordauthor(E, C).;true;true
7;true,true,true;author(F, E), title(F, D).;false;false
7;true,true,false;title(G, D), venue(G, B).;false;false
7;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
7;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
7;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, B).;false;true
8;true,true,false;title(F, D), venue(F, A).;false;false
8;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
8;true,false,false;haswordvenue(A, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
8;false,true;haswordauthor(M, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;true,true;author(F, E), venue(F, B).;true;true
9;true,true,true;samebib(F, G), venue(G, A).;false;false
9;true,true,false;author(H, E), venue(H, A).;false;false
9;true,false;haswordtitle(I, C).;true;true
9;true,false,true;title(J, I), venue(J, A).;false;false
9;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995112;  // std dev = 4.62e-07, 104.000 (wgt'ed) examples reached here.  /* #pos=104 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.14703782398840026;  // std dev = 4.300, 90.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=26 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.1418510649004882;  // std dev = 0.000, 168.000 (wgt'ed) examples reached here.  /* #neg=168 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7035315621970046;  // std dev = 1.184, 106.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=104 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.15636416592392144;  // std dev = 4.214, 82.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=26 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839152;  // std dev = 0.000, 177.000 (wgt'ed) examples reached here.  /* #neg=177 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12253567436345617;  // std dev = 0.107, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( movie(E, A) )
%   | | then return 0.35174127938948524;  // std dev = 0.382, 193.000 (wgt'ed) examples reached here.  /* #neg=63 #pos=130 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360663;  // std dev = 0.000, 197.000 (wgt'ed) examples reached here.  /* #neg=197 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4527279169408378;  // std dev = 1.154, 107.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=104 */
%   | else if ( genre(A, E) )
%   | | then return -0.10066735848494641;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.04745911319373243;  // std dev = 4.300, 90.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=26 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783656;  // std dev = 0.000, 217.000 (wgt'ed) examples reached here.  /* #neg=217 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.13535075804580587;  // std dev = 0.244, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( genre(B, E) )
%   | | then return 0.36212573678323;  // std dev = 0.000, 104.000 (wgt'ed) examples reached here.  /* #pos=104 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.04522672545777705;  // std dev = 4.280, 88.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=26 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.0926912761892606;  // std dev = 8.56e-08, 182.000 (wgt'ed) examples reached here.  /* #neg=182 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2680292786834455;  // std dev = 0.929, 107.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=104 */
%   | else if ( movie(E, A) )
%   | | then return 0.02312399697975039;  // std dev = 0.440, 96.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=26 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 7.60e-08, 199.000 (wgt'ed) examples reached here.  /* #neg=199 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.23785610978779212;  // std dev = 0.190, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.2321332404031426;  // std dev = 0.000, 104.000 (wgt'ed) examples reached here.  /* #pos=104 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.08339774150901794;  // std dev = 4.121, 75.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=26 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109147;  // std dev = 7.45e-08, 196.000 (wgt'ed) examples reached here.  /* #neg=196 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.19334218647823354;  // std dev = 9.88e-08, 104.000 (wgt'ed) examples reached here.  /* #pos=104 */
%   | else if ( movie(E, B) )
%   | | then return 0.0362430404474432;  // std dev = 4.199, 87.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=26 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.07324622576333664;  // std dev = 1.21e-07, 202.000 (wgt'ed) examples reached here.  /* #neg=202 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.156077795116971;  // std dev = 0.659, 106.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=104 */
%   | else if ( genre(A, E) )
%   | | then return -0.06885971899037947;  // std dev = 2.63e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.046211953087325584;  // std dev = 4.163, 78.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=26 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420262;  // std dev = 5.02e-09, 232.000 (wgt'ed) examples reached here.  /* #neg=232 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return -0.3398674706076521;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return 0.1445678377851922;  // std dev = 0.000, 104.000 (wgt'ed) examples reached here.  /* #pos=104 */
%   | | else if ( genre(A, G) )
%   | | | then return -0.06457351083850078;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.0409899112936487;  // std dev = 4.150, 77.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=26 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.06419184008202626;  // std dev = 0.000, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.143059
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.183 seconds
Total inference time: 1.022 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.977419
   AUC PR    = 0.852857
   CLL	      = -0.138323
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.8
   F1        = 0.888889


Total scoring time: 1.115 seconds
Parameter learned model CLL: -0.138323


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 5, 0], 'true,false,true': [4.62e-07, 0, 104], 'true,false,false,true': [4.3, 64, 26], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 168, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.184, 2, 104], 'true,false,true': [0.0, 5, 0], 'true,false,false,true': [4.214, 56, 26], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 177, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.107, 11, 0], 'true,false,true': [0.382, 63, 130], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 197, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.154, 3, 104], 'true,false,true': [0.0, 4, 0], 'true,false,false,true': [4.3, 64, 26], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 217, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.244, 9, 0], 'true,false,true': [0.0, 0, 104], 'true,false,false,true': [4.28, 62, 26], 'true,false,false,false': [0.0, 0, 0], 'false,true': [8.56e-08, 182, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.929, 3, 104], 'true,false,true': [0.44, 70, 26], 'true,false,false': [0.0, 0, 0], 'false,true': [7.6e-08, 199, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.19, 3, 0], 'true,false,true': [0.0, 0, 104], 'true,false,false,true': [4.121, 49, 26], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.45e-08, 196, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [9.88e-08, 0, 104], 'true,false,true': [4.199, 61, 26], 'true,false,false': [0.0, 0, 0], 'false,true': [1.21e-07, 202, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.659, 2, 104], 'true,false,true': [2.63e-09, 8, 0], 'true,false,false,true': [4.163, 52, 26], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.02e-09, 232, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true,true,false': 'genre(A, G)'}, {'true,true,true,true': [0.0, 2, 0], 'true,true,true,false': [0.0, 0, 104], 'true,true,false,true': [0.0, 8, 0], 'true,true,false,false': [4.15, 51, 26], 'true,false': [0.0, 0, 0], 'false': [0.0, 206, 0]}]]
[{'': [0.2265094315800149, -1.691768418476429e-16], 'true': [-2.7755575615628915e-18, 0.22106493782549058], 'true,false': [2.049642507000289e-15, 0.20543209876543322], 'true,false,false': [0.20543209876543322, nan], 'false': [-1.691768418476429e-16, nan]}, {'': [0.17977346733479263, -1.2544892933617588e-17], 'true': [0.013215414257097964, 0.20839491752335737], 'true,false': [0.0, 0.21653777513385006], 'true,false,false': [0.21653777513385006, nan], 'false': [-1.2544892933617588e-17, nan]}, {'': [0.1493761224278998, -2.4796859433252228e-17], 'true': [0.0010443401420710643, 0.14570122174663203], 'true,false': [0.14570122174663203, nan], 'false': [-2.4796859433252228e-17, nan]}, {'': [0.14119825251064602, -7.981326812973476e-17], 'true': [0.012444942815708881, 0.1975842551081781], 'true,false': [0.0, 0.20543209876543153], 'true,false,false': [0.20543209876543153, nan], 'false': [-7.981326812973476e-17, nan]}, {'': [0.12055296245885708, 4.0260834958934247e-17], 'true': [0.006603961891077392, 0.12033909388498198], 'true,false': [0.0, 0.20816115702479362], 'true,false,false': [0.20816115702479362, nan], 'false': [4.0260834958934247e-17, nan]}, {'': [0.11061914366220685, 2.901085290477796e-17], 'true': [0.008057350755322795, 0.19331847429033824], 'true,false': [0.19331847429033824, nan], 'false': [2.901085290477796e-17, nan]}, {'': [0.1015220100852862, 2.832201593431522e-17], 'true': [0.011995612507979758, 0.1002829772059969], 'true,false': [-2.562053133750361e-16, 0.22648888888888943], 'true,false,false': [0.22648888888888943, nan], 'false': [2.832201593431522e-17, nan]}, {'': [0.09842728794320933, 7.25492273517429e-17], 'true': [9.394194823751324e-17, 0.20264909246572593], 'true,false': [0.20264909246572593, nan], 'false': [7.25492273517429e-17, nan]}, {'': [0.09663769547433287, 2.584139798696485e-17], 'true': [0.004102016355185977, 0.2026675711531468], 'true,false': [8.673617379884035e-19, 0.22222222222222185], 'true,false,false': [0.22222222222222185, nan], 'false': [2.584139798696485e-17, nan]}, {'': [0.09568546867653235, -1.616829647512364e-18], 'true': [0.09568546867653235, nan], 'true,true': [0.004344333761807938, 0.20354750361232615], 'true,true,false': [0.0, 0.22364648338674248], 'true,true,true': [0.0, -1.2383256813126746e-16]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, E).;true;true
9;true,true;genre(A, F).;true;true
9;true,false;genre(A, G).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995112;  // std dev = 4.62e-07, 104.000 (wgt'ed) examples reached here.  /* #pos=104 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.8581489350995118;  // std dev = 1.46e-07, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | | else return -0.14185106490048766;  // std dev = 6.50e-08, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
%   else return -0.14185106490048843;  // std dev = 0.000, 231.000 (wgt'ed) examples reached here.  /* #neg=231 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.719473412210955;  // std dev = 0.000, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | else return 0.7070481467589049;  // std dev = 0.102, 68.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=67 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | | else return -0.1254446385283916;  // std dev = 0.000, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   else return -0.12544463852839136;  // std dev = 0.000, 158.000 (wgt'ed) examples reached here.  /* #neg=158 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360638;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( director(B) )
%   | | then return 0.5569466465353805;  // std dev = 0.017, 130.000 (wgt'ed) examples reached here.  /* #pos=130 */
%   | | else return -0.1123163781936063;  // std dev = 3.33e-08, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   else return -0.11231637819360657;  // std dev = 0.000, 190.000 (wgt'ed) examples reached here.  /* #neg=190 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( actor(A) )
%   | | then return 0.41907752626831196;  // std dev = 0.015, 104.000 (wgt'ed) examples reached here.  /* #pos=104 */
%   | | else return -0.20634173065209346;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 3.73e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( actor(B) )
%   | | | then return -0.1015963294878362;  // std dev = 4.08e-08, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
%   | | | else return 0.4171293336377601;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   else return -0.10159632948783653;  // std dev = 0.000, 190.000 (wgt'ed) examples reached here.  /* #neg=190 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.13363911326598799;  // std dev = 0.116, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( genre(B, E) )
%   | | then return 0.32177305314193244;  // std dev = 0.013, 104.000 (wgt'ed) examples reached here.  /* #pos=104 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.32045135643267925;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | | else return -0.09866566080521204;  // std dev = 0.220, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
%   else return -0.0926912761892606;  // std dev = 8.82e-08, 186.000 (wgt'ed) examples reached here.  /* #neg=186 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.25571623147978917;  // std dev = 0.012, 130.000 (wgt'ed) examples reached here.  /* #pos=130 */
%   | else return -0.08617822920321008;  // std dev = 0.101, 76.000 (wgt'ed) examples reached here.  /* #neg=76 */
%   else return -0.08518475138839678;  // std dev = 7.88e-08, 199.000 (wgt'ed) examples reached here.  /* #neg=199 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07578630216090267;  // std dev = 2.63e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( genre(B, E) )
%   | | then return 0.2102995397083711;  // std dev = 0.010, 104.000 (wgt'ed) examples reached here.  /* #pos=104 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.20951258693210603;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | | else return -0.08042037885992048;  // std dev = 0.139, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
%   else return -0.07877675473109147;  // std dev = 7.74e-08, 197.000 (wgt'ed) examples reached here.  /* #neg=197 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1715793120729746;  // std dev = 0.439, 106.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=104 */
%   | else if ( director(B), actor(A) )
%   | | then return 0.1769166865982622;  // std dev = 3.49e-08, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | else return -0.0745388227800039;  // std dev = 0.131, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
%   else return -0.07324622576333668;  // std dev = 1.08e-07, 185.000 (wgt'ed) examples reached here.  /* #neg=185 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.15084945349107556;  // std dev = 0.310, 105.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=104 */
%   | else if ( genre(A, E) )
%   | | then return -0.06590579762237835;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.1526074395931333;  // std dev = 2.98e-08, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | | else return -0.07612032321551604;  // std dev = 0.241, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   else return -0.06842697784420262;  // std dev = 8.02e-08, 195.000 (wgt'ed) examples reached here.  /* #neg=195 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( genre(A, E) )
%   | | then return -0.17848642617742275;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return 0.13518791475985367;  // std dev = 0.007, 104.000 (wgt'ed) examples reached here.  /* #pos=104 */
%   | else if ( genre(A, F) )
%   | | then return -0.061962725948059176;  // std dev = 1.86e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.13390052118753856;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | | else return -0.06532657203433158;  // std dev = 0.117, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
%   else return -0.06419184008202626;  // std dev = 0.000, 202.000 (wgt'ed) examples reached here.  /* #neg=202 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063199
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.641 seconds
Total inference time: 0.977 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.065208
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.056 seconds
Refined model CLL: -0.065208


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063199
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 4.995 seconds
Total inference time: 0.977 seconds
AUC ROC: 1.0
Total revision time: 4.995
Best scored revision CLL: -0.065208


Dataset: 4_cora_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 00:07:16
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063199, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 4.995, 'Inference time': 0.977, 'parameter_0.4': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.143059, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 1.183, 'Inference time': 1.022}}


Amount of data: 0.6
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;haswordauthor(E, C).;true;true
7;true,true,true;author(F, E), title(F, D).;false;false
7;true,true,false;title(G, D), venue(G, B).;false;false
7;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
7;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
7;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, B).;false;true
8;true,true,false;title(F, D), venue(F, A).;false;false
8;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
8;true,false,false;haswordvenue(A, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
8;false,true;haswordauthor(M, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;true,true;author(F, E), venue(F, B).;true;true
9;true,true,true;samebib(F, G), venue(G, A).;false;false
9;true,true,false;author(H, E), venue(H, A).;false;false
9;true,false;haswordtitle(I, C).;true;true
9;true,false,true;title(J, I), venue(J, A).;false;false
9;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995097;  // std dev = 9.83e-07, 158.000 (wgt'ed) examples reached here.  /* #pos=158 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.18271033860828284;  // std dev = 4.999, 114.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=37 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.1418510649004879;  // std dev = 5.16e-08, 291.000 (wgt'ed) examples reached here.  /* #neg=291 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7089119365767145;  // std dev = 1.187, 160.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=158 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 7.45e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.11686374982586273;  // std dev = 5.153, 131.000 (wgt'ed) examples reached here.  /* #neg=94 #pos=37 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839194;  // std dev = 0.000, 276.000 (wgt'ed) examples reached here.  /* #neg=276 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14632169180507676;  // std dev = 0.164, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( movie(E, A) )
%   | | then return 0.3431428125200394;  // std dev = 0.382, 293.000 (wgt'ed) examples reached here.  /* #neg=98 #pos=195 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.1123163781936067;  // std dev = 0.000, 317.000 (wgt'ed) examples reached here.  /* #neg=317 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4724769286166576;  // std dev = 0.000, 158.000 (wgt'ed) examples reached here.  /* #pos=158 */
%   | else if ( genre(A, E) )
%   | | then return -0.09853429005820179;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.10663308184030189;  // std dev = 4.920, 107.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=37 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783662;  // std dev = 0.000, 296.000 (wgt'ed) examples reached here.  /* #neg=296 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.13950576445137636;  // std dev = 0.296, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else if ( genre(B, E) )
%   | | then return 0.3583160182175508;  // std dev = 3.04e-07, 158.000 (wgt'ed) examples reached here.  /* #pos=158 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.05445902282431031;  // std dev = 5.040, 118.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=37 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926046;  // std dev = 1.58e-07, 283.000 (wgt'ed) examples reached here.  /* #neg=283 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.27062508483113557;  // std dev = 0.928, 161.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=158 */
%   | else if ( movie(E, A) )
%   | | then return 0.029142628166196245;  // std dev = 0.451, 127.000 (wgt'ed) examples reached here.  /* #neg=90 #pos=37 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 1.03e-07, 295.000 (wgt'ed) examples reached here.  /* #neg=295 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14381403833633213;  // std dev = 0.400, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else if ( genre(B, E) )
%   | | then return 0.22941423280591103;  // std dev = 0.000, 158.000 (wgt'ed) examples reached here.  /* #pos=158 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.004833814114739925;  // std dev = 5.160, 132.000 (wgt'ed) examples reached here.  /* #neg=95 #pos=37 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109144;  // std dev = 4.71e-08, 276.000 (wgt'ed) examples reached here.  /* #neg=276 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18250704331653436;  // std dev = 0.818, 161.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=158 */
%   | else if ( movie(E, B) )
%   | | then return 0.011636866187717646;  // std dev = 5.124, 132.000 (wgt'ed) examples reached here.  /* #neg=95 #pos=37 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.07324622576333693;  // std dev = 1.03e-07, 287.000 (wgt'ed) examples reached here.  /* #neg=287 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.15861203319657513;  // std dev = 0.686, 160.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=158 */
%   | else if ( genre(A, E) )
%   | | then return -0.07211190472915939;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.0015343707882239006;  // std dev = 5.160, 132.000 (wgt'ed) examples reached here.  /* #neg=95 #pos=37 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420296;  // std dev = 0.000, 292.000 (wgt'ed) examples reached here.  /* #neg=292 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return -0.35931015239917014;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return 0.1440372360656567;  // std dev = 0.000, 158.000 (wgt'ed) examples reached here.  /* #pos=158 */
%   | | else if ( genre(A, G) )
%   | | | then return -0.06743316274911691;  // std dev = 3.73e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.034482062306984446;  // std dev = 5.040, 118.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=37 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.06419184008202594;  // std dev = 1.18e-07, 302.000 (wgt'ed) examples reached here.  /* #neg=302 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.135946
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.414 seconds
Total inference time: 1.03 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.978626
   AUC PR    = 0.860573
   CLL	      = -0.132331
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.810256
   F1        = 0.895184


Total scoring time: 1.343 seconds
Parameter learned model CLL: -0.132331


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 8, 0], 'true,false,true': [9.83e-07, 0, 158], 'true,false,false,true': [4.999, 77, 37], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.16e-08, 291, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.187, 2, 158], 'true,false,true': [7.45e-09, 14, 0], 'true,false,false,true': [5.153, 94, 37], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 276, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.164, 10, 0], 'true,false,true': [0.382, 98, 195], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 317, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 158], 'true,false,true': [0.0, 11, 0], 'true,false,false,true': [4.92, 70, 37], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 296, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.296, 12, 0], 'true,false,true': [3.04e-07, 0, 158], 'true,false,false,true': [5.04, 81, 37], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.58e-07, 283, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.928, 3, 158], 'true,false,true': [0.451, 90, 37], 'true,false,false': [0.0, 0, 0], 'false,true': [1.03e-07, 295, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.4, 15, 0], 'true,false,true': [0.0, 0, 158], 'true,false,false,true': [5.16, 95, 37], 'true,false,false,false': [0.0, 0, 0], 'false,true': [4.71e-08, 276, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.818, 3, 158], 'true,false,true': [5.124, 95, 37], 'true,false,false': [0.0, 0, 0], 'false,true': [1.03e-07, 287, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.686, 2, 158], 'true,false,true': [0.0, 10, 0], 'true,false,false,true': [5.16, 95, 37], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 292, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true,true,false': 'genre(A, G)'}, {'true,true,true,true': [0.0, 6, 0], 'true,true,true,false': [0.0, 0, 158], 'true,true,false,true': [3.73e-09, 12, 0], 'true,true,false,false': [5.04, 81, 37], 'true,false': [0.0, 0, 0], 'false': [1.18e-07, 302, 0]}]]
[{'': [0.21141581632653564, 9.156478553609538e-18], 'true': [-6.938893903907228e-18, 0.202949286332185], 'true,false': [6.1160640546439006e-15, 0.2192212988611895], 'true,false,false': [0.2192212988611895, nan], 'false': [9.156478553609538e-18, nan]}, {'': [0.188569100718572, -7.401486830834377e-17], 'true': [0.008812036638239373, 0.18822235194678286], 'true,false': [3.96508223080413e-18, 0.20266884214206526], 'true,false,false': [0.20266884214206526, nan], 'false': [-7.401486830834377e-17, nan]}, {'': [0.14861151647391968, -5.04328440208273e-17], 'true': [0.002698176492233734, 0.1456847117366667], 'true,false': [0.1456847117366667, nan], 'false': [-5.04328440208273e-17, nan]}, {'': [0.12549492671299142, -5.401084984662924e-17], 'true': [-4.0473953302790516e-16, 0.20869045596608551], 'true,false': [-3.784851220313033e-18, 0.22622063062276251], 'true,false,false': [0.22622063062276251, nan], 'false': [-5.401084984662924e-17, nan]}, {'': [0.1155542646157044, 8.787631007633747e-17], 'true': [0.007316401445342902, 0.11462029316988884], 'true,false': [5.846237699291963e-16, 0.21523987359954014], 'true,false,false': [0.21523987359954014, nan], 'false': [8.787631007633747e-17, nan]}, {'': [0.10708513761780525, 3.612929164881865e-17], 'true': [0.005344887829900837, 0.2034639134916783], 'true,false': [0.2034639134916783, nan], 'false': [3.612929164881865e-17, nan]}, {'': [0.10316010345483151, 8.045094381341714e-18], 'true': [0.010688003902053751, 0.10433114508936896], 'true,false': [-1.911270017076219e-16, 0.2017332415059695], 'true,false,false': [0.2017332415059695, nan], 'false': [8.045094381341714e-18, nan]}, {'': [0.09912038964298271, 3.7136379917775274e-17], 'true': [0.004151066095999073, 0.1989109932735609], 'true,false': [0.1989109932735609, nan], 'false': [3.7136379917775274e-17, nan]}, {'': [0.09646060894759258, -5.0188164126890635e-17], 'true': [0.002944212769906729, 0.18788173280761317], 'true,false': [-2.0816681711721684e-18, 0.20173324150597002], 'true,false,false': [0.20173324150597002, nan], 'false': [-5.0188164126890635e-17, nan]}, {'': [0.09424867439283827, 4.6320563279062825e-17], 'true': [0.09424867439283827, nan], 'true,true': [0.0089300991453634, 0.19624184892095], 'true,true,false': [1.1564823173178713e-18, 0.2152398735995407], 'true,true,true': [0.0, -2.5296220814244072e-17]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, E).;true;true
9;true,true;genre(A, F).;true;true
9;true,false;genre(A, G).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995097;  // std dev = 9.83e-07, 158.000 (wgt'ed) examples reached here.  /* #pos=158 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.8581489350995115;  // std dev = 2.60e-07, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | | else return -0.14185106490048766;  // std dev = 8.02e-08, 93.000 (wgt'ed) examples reached here.  /* #neg=93 */
%   else return -0.14185106490048777;  // std dev = 1.33e-07, 309.000 (wgt'ed) examples reached here.  /* #neg=309 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.7194734122109548;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | else if ( actor(A) )
%   | | | then return 0.7194734122109545;  // std dev = 8.43e-08, 99.000 (wgt'ed) examples reached here.  /* #pos=99 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 5.27e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.7194734122109548;  // std dev = 0.000, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 105.000 (wgt'ed) examples reached here.  /* #neg=105 */
%   else return -0.12544463852839194;  // std dev = 0.000, 271.000 (wgt'ed) examples reached here.  /* #neg=271 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.5553664367462836;  // std dev = 5.65e-07, 195.000 (wgt'ed) examples reached here.  /* #pos=195 */
%   | else return -0.11231637819360621;  // std dev = 8.30e-08, 122.000 (wgt'ed) examples reached here.  /* #neg=122 */
%   else return -0.11231637819360671;  // std dev = 0.000, 317.000 (wgt'ed) examples reached here.  /* #neg=317 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.41751358415831064;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | else if ( actor(A) )
%   | | | then return 0.41751358415831147;  // std dev = 0.000, 99.000 (wgt'ed) examples reached here.  /* #pos=99 */
%   | | | else return -0.10159632948783633;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783633;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( actor(B) )
%   | | | then return -0.1015963294878362;  // std dev = 5.37e-08, 87.000 (wgt'ed) examples reached here.  /* #neg=87 */
%   | | | else return 0.41751358415831047;  // std dev = 0.000, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   else return -0.10159632948783662;  // std dev = 0.000, 284.000 (wgt'ed) examples reached here.  /* #neg=284 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.092691276189261;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( genre(B, E) )
%   | | then return 0.32071184716014933;  // std dev = 2.92e-07, 158.000 (wgt'ed) examples reached here.  /* #pos=158 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.3207118471601495;  // std dev = 2.98e-08, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | | else return -0.09334781809641757;  // std dev = 0.054, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */
%   else return -0.09269127618926044;  // std dev = 1.72e-07, 301.000 (wgt'ed) examples reached here.  /* #neg=301 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.2551722425694885;  // std dev = 4.00e-07, 195.000 (wgt'ed) examples reached here.  /* #pos=195 */
%   | else return -0.08513881176721909;  // std dev = 0.000161, 108.000 (wgt'ed) examples reached here.  /* #neg=108 */
%   else return -0.08518475138839678;  // std dev = 1.05e-07, 291.000 (wgt'ed) examples reached here.  /* #neg=291 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07878008867882737;  // std dev = 5.27e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( genre(B, E) )
%   | | then return 0.20975771563253517;  // std dev = 2.72e-07, 158.000 (wgt'ed) examples reached here.  /* #pos=158 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.209757715632536;  // std dev = 0.000, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | | else return -0.0793742504793802;  // std dev = 0.047, 73.000 (wgt'ed) examples reached here.  /* #neg=73 */
%   else return -0.07877675473109144;  // std dev = 4.94e-08, 277.000 (wgt'ed) examples reached here.  /* #neg=277 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.17709649774527794;  // std dev = 0.000, 195.000 (wgt'ed) examples reached here.  /* #pos=195 */
%   | else return -0.07442831193610375;  // std dev = 0.075, 105.000 (wgt'ed) examples reached here.  /* #neg=105 */
%   else return -0.07324622576333688;  // std dev = 1.10e-07, 271.000 (wgt'ed) examples reached here.  /* #neg=271 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14728464239551345;  // std dev = 0.437, 162.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=158 */
%   | else if ( genre(A, E) )
%   | | then return -0.06835437768173512;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( actor(B) )
%   | | | then return -0.06827477328293365;  // std dev = 1.67e-08, 87.000 (wgt'ed) examples reached here.  /* #neg=87 */
%   | | | else return 0.1527438580936709;  // std dev = 3.65e-08, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   else return -0.06842697784420293;  // std dev = 0.000, 283.000 (wgt'ed) examples reached here.  /* #neg=283 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( genre(A, E) )
%   | | then return -0.078351250409063;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.13464183411110756;  // std dev = 0.000, 158.000 (wgt'ed) examples reached here.  /* #pos=158 */
%   | else if ( genre(A, F) )
%   | | then return -0.06412778103965068;  // std dev = 2.63e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.13400703000801112;  // std dev = 1.05e-08, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | | else return -0.06479741052374333;  // std dev = 0.061, 83.000 (wgt'ed) examples reached here.  /* #neg=83 */
%   else return -0.0641918400820259;  // std dev = 1.31e-07, 315.000 (wgt'ed) examples reached here.  /* #neg=315 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063396
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.025 seconds
Total inference time: 1.021 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064568
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.268 seconds
Refined model CLL: -0.064568


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063396
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 6.05 seconds
Total inference time: 1.021 seconds
AUC ROC: 1.0
Total revision time: 6.05
Best scored revision CLL: -0.064568


Dataset: 4_cora_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 00:07:24
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063396, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 6.05, 'Inference time': 1.021, 'parameter_0.6': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.135946, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 1.414, 'Inference time': 1.03}}


Amount of data: 0.8
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;haswordauthor(E, C).;true;true
7;true,true,true;author(F, E), title(F, D).;false;false
7;true,true,false;title(G, D), venue(G, B).;false;false
7;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
7;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
7;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, B).;false;true
8;true,true,false;title(F, D), venue(F, A).;false;false
8;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
8;true,false,false;haswordvenue(A, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
8;false,true;haswordauthor(M, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;true,true;author(F, E), venue(F, B).;true;true
9;true,true,true;samebib(F, G), venue(G, A).;false;false
9;true,true,false;author(H, E), venue(H, A).;false;false
9;true,false;haswordtitle(I, C).;true;true
9;true,false,true;title(J, I), venue(J, A).;false;false
9;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995091;  // std dev = 1.08e-06, 218.000 (wgt'ed) examples reached here.  /* #pos=218 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.16926004621062285;  // std dev = 5.379, 135.000 (wgt'ed) examples reached here.  /* #neg=93 #pos=42 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.1418510649004874;  // std dev = 2.76e-07, 380.000 (wgt'ed) examples reached here.  /* #neg=380 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7005290612975188;  // std dev = 1.868, 223.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=218 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 5.27e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.0939396914702175;  // std dev = 5.584, 163.000 (wgt'ed) examples reached here.  /* #neg=121 #pos=42 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839222;  // std dev = 0.000, 366.000 (wgt'ed) examples reached here.  /* #neg=366 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.129530159348707;  // std dev = 0.146, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( movie(E, A) )
%   | | then return 0.3678237964366359;  // std dev = 0.367, 372.000 (wgt'ed) examples reached here.  /* #neg=112 #pos=260 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360629;  // std dev = 0.000, 385.000 (wgt'ed) examples reached here.  /* #neg=385 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4593094344507457;  // std dev = 1.154, 221.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=218 */
%   | else if ( genre(A, E) )
%   | | then return -0.10003589003375307;  // std dev = 1.18e-08, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.012959957296703855;  // std dev = 5.612, 168.000 (wgt'ed) examples reached here.  /* #neg=126 #pos=42 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783602;  // std dev = 9.86e-09, 385.000 (wgt'ed) examples reached here.  /* #neg=385 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.0913832030059354;  // std dev = 5.27e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( genre(B, E) )
%   | | then return 0.3575965293750723;  // std dev = 0.000, 218.000 (wgt'ed) examples reached here.  /* #pos=218 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.012105146342463305;  // std dev = 5.607, 167.000 (wgt'ed) examples reached here.  /* #neg=125 #pos=42 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926089;  // std dev = 1.46e-07, 400.000 (wgt'ed) examples reached here.  /* #neg=400 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2752254236378061;  // std dev = 0.772, 220.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=218 */
%   | else if ( movie(E, A) )
%   | | then return -0.012340753703147562;  // std dev = 0.402, 199.000 (wgt'ed) examples reached here.  /* #neg=157 #pos=42 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 1.21e-07, 370.000 (wgt'ed) examples reached here.  /* #neg=370 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1437709175458999;  // std dev = 0.364, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else if ( genre(B, E) )
%   | | then return 0.2281770748938551;  // std dev = 0.000, 218.000 (wgt'ed) examples reached here.  /* #pos=218 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.018319749565356137;  // std dev = 5.584, 163.000 (wgt'ed) examples reached here.  /* #neg=121 #pos=42 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109158;  // std dev = 9.19e-08, 426.000 (wgt'ed) examples reached here.  /* #neg=426 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17960862498079808;  // std dev = 1.073, 223.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=218 */
%   | else if ( movie(E, B) )
%   | | then return -0.0053965811290706284;  // std dev = 5.653, 182.000 (wgt'ed) examples reached here.  /* #neg=140 #pos=42 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.07324622576333718;  // std dev = 4.71e-08, 379.000 (wgt'ed) examples reached here.  /* #neg=379 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.15756215835557977;  // std dev = 0.857, 221.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=218 */
%   | else if ( genre(A, E) )
%   | | then return -0.07244306680410904;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.04596154624851493;  // std dev = 5.470, 146.000 (wgt'ed) examples reached here.  /* #neg=104 #pos=42 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420329;  // std dev = 0.000, 379.000 (wgt'ed) examples reached here.  /* #neg=379 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return -0.36951439134196357;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.14381225224795388;  // std dev = 0.000, 218.000 (wgt'ed) examples reached here.  /* #pos=218 */
%   | | else if ( genre(A, G) )
%   | | | then return -0.06772349559147095;  // std dev = 3.73e-09, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | | else return -0.0031746654960216544;  // std dev = 5.623, 170.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=42 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.06419184008202568;  // std dev = 1.75e-07, 369.000 (wgt'ed) examples reached here.  /* #neg=369 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.122893
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.56 seconds
Total inference time: 0.974 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.980893
   AUC PR    = 0.87834
   CLL	      = -0.121052
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.838462
   F1        = 0.912134


Total scoring time: 1.656 seconds
Parameter learned model CLL: -0.121052


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 15, 0], 'true,false,true': [1.08e-06, 0, 218], 'true,false,false,true': [5.379, 93, 42], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.76e-07, 380, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.868, 5, 218], 'true,false,true': [5.27e-09, 11, 0], 'true,false,false,true': [5.584, 121, 42], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 366, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.146, 13, 0], 'true,false,true': [0.367, 112, 260], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 385, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.154, 3, 218], 'true,false,true': [1.18e-08, 17, 0], 'true,false,false,true': [5.612, 126, 42], 'true,false,false,false': [0.0, 0, 0], 'false,true': [9.86e-09, 385, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [5.27e-09, 9, 0], 'true,false,true': [0.0, 0, 218], 'true,false,false,true': [5.607, 125, 42], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.46e-07, 400, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.772, 2, 218], 'true,false,true': [0.402, 157, 42], 'true,false,false': [0.0, 0, 0], 'false,true': [1.21e-07, 370, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.364, 12, 0], 'true,false,true': [0.0, 0, 218], 'true,false,false,true': [5.584, 121, 42], 'true,false,false,false': [0.0, 0, 0], 'false,true': [9.19e-08, 426, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [1.073, 5, 218], 'true,false,true': [5.653, 140, 42], 'true,false,false': [0.0, 0, 0], 'false,true': [4.71e-08, 379, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.857, 3, 218], 'true,false,true': [0.0, 11, 0], 'true,false,false,true': [5.47, 104, 42], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 379, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true,true,false': 'genre(A, G)'}, {'true,true,true,true': [1.05e-08, 3, 0], 'true,true,true,false': [0.0, 0, 218], 'true,true,false,true': [3.73e-09, 17, 0], 'true,true,false,false': [5.623, 128, 42], 'true,false': [0.0, 0, 0], 'false': [1.75e-07, 369, 0]}]]
[{'': [0.20734877126654433, 2.0100880024792309e-16], 'true': [-1.4802973661668754e-17, 0.1940469789501599], 'true,false': [5.345367369938369e-15, 0.21432098765432217], 'true,false,false': [0.21432098765432217, nan], 'false': [2.0100880024792309e-16, nan]}, {'': [0.1833485090659777, -1.2376256667952564e-16], 'true': [0.01564753561476905, 0.1820337303630949], 'true,false': [2.523234146875356e-18, 0.1912755466897509], 'true,false,false': [0.1912755466897509, nan], 'false': [-1.2376256667952564e-16, nan]}, {'': [0.13799964369775677, -2.3069569342860397e-17], 'true': [0.001629728439106355, 0.13441281110591136], 'true,false': [0.13441281110591136, nan], 'false': [-2.3069569342860397e-17, nan]}, {'': [0.1330936547385861, 9.573871277287064e-17], 'true': [0.006027084901580092, 0.1713357365575968], 'true,false': [8.163404592832034e-18, 0.18749999999999906], 'true,false,false': [0.18749999999999906, nan], 'false': [9.573871277287064e-17, nan]}, {'': [0.11043447677692747, 5.329070518200751e-17], 'true': [3.0839528461809902e-18, 0.11097230537520995], 'true,false': [-5.214992556037433e-16, 0.1882462619670827], 'true,false,false': [0.1882462619670827, nan], 'false': [5.329070518200751e-17, nan]}, {'': [0.0986824892457459, 3.9607956554194776e-17], 'true': [0.0027109377989975028, 0.16136224698835772], 'true,false': [0.16136224698835772, nan], 'false': [3.9607956554194776e-17, nan]}, {'': [0.09247824985801287, 1.980679574448636e-17], 'true': [0.011032674292888527, 0.09261238268308658], 'true,false': [-3.0964018301472258e-16, 0.1912755466897514], 'true,false,false': [0.1912755466897514, nan], 'false': [1.980679574448636e-17, nan]}, {'': [0.09020960196286698, 5.8586966998689e-18], 'true': [0.005165233951884328, 0.17556637942314463], 'true,false': [0.17556637942314463, nan], 'false': [5.8586966998689e-18, nan]}, {'': [0.08495890677211093, -1.0311306191769264e-16], 'true': [0.003320074484120972, 0.1914727352895747], 'true,false': [-1.8924256101565167e-18, 0.2049164946519042], 'true,false,false': [0.2049164946519042, nan], 'false': [-1.0311306191769264e-16, nan]}, {'': [0.08486149130543386, 8.304107176058081e-17], 'true': [0.08486149130543386, nan], 'true,true': [0.0035284243757214002, 0.16945412604703503], 'true,true,false': [8.163404592832033e-19, 0.18602076124567576], 'true,true,true': [3.700743415417188e-17, -1.385232397697443e-16]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, E).;true;true
9;true,true;genre(A, F).;true;true
9;true,false;genre(A, G).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995091;  // std dev = 1.08e-06, 218.000 (wgt'ed) examples reached here.  /* #pos=218 */
%   | | else if ( actor(B) )
%   | | | then return -0.14185106490048774;  // std dev = 4.71e-08, 119.000 (wgt'ed) examples reached here.  /* #neg=119 */
%   | | | else return 0.8126943896449664;  // std dev = 1.382, 44.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=42 */
%   else return -0.14185106490048746;  // std dev = 2.56e-07, 368.000 (wgt'ed) examples reached here.  /* #neg=368 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.7194734122109542;  // std dev = 2.38e-07, 81.000 (wgt'ed) examples reached here.  /* #pos=81 */
%   | | else return 0.7013680254093984;  // std dev = 0.122, 140.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=137 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 7.45e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.7285554015677003;  // std dev = 2.06e-07, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   | | | else return -0.1280752684365696;  // std dev = 0.205, 111.000 (wgt'ed) examples reached here.  /* #neg=111 */
%   else return -0.12544463852839216;  // std dev = 0.000, 335.000 (wgt'ed) examples reached here.  /* #neg=335 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12832145515278578;  // std dev = 0.147, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else if ( actor(A), director(B) )
%   | | then return 0.5591676103811749;  // std dev = 0.048, 260.000 (wgt'ed) examples reached here.  /* #pos=260 */
%   | | else return -0.11590621718729131;  // std dev = 0.230, 105.000 (wgt'ed) examples reached here.  /* #neg=105 */
%   else return -0.11231637819360638;  // std dev = 0.000, 369.000 (wgt'ed) examples reached here.  /* #neg=369 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.4165894448406152;  // std dev = 2.49e-07, 81.000 (wgt'ed) examples reached here.  /* #pos=81 */
%   | | else return 0.41202068618517407;  // std dev = 0.074, 139.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=137 */
%   | else if ( genre(A, E) )
%   | | then return -0.10014476073318755;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.4254554490713427;  // std dev = 0.000, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   | | | else return -0.10587206806210489;  // std dev = 0.274, 129.000 (wgt'ed) examples reached here.  /* #neg=129 */
%   else return -0.10159632948783606;  // std dev = 1.83e-07, 380.000 (wgt'ed) examples reached here.  /* #neg=380 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( actor(B) )
%   | | then return -0.0914745657754722;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else return -0.2775225918695857;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.3231990568797571;  // std dev = 0.035, 218.000 (wgt'ed) examples reached here.  /* #pos=218 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.3261010545116126;  // std dev = 5.96e-08, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   | | | else return -0.0941590889637008;  // std dev = 0.163, 99.000 (wgt'ed) examples reached here.  /* #neg=99 */
%   else return -0.09269127618926089;  // std dev = 1.44e-07, 401.000 (wgt'ed) examples reached here.  /* #neg=401 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2571893932891591;  // std dev = 0.033, 260.000 (wgt'ed) examples reached here.  /* #pos=260 */
%   | else return -0.0922398741030033;  // std dev = 0.345, 125.000 (wgt'ed) examples reached here.  /* #neg=125 */
%   else return -0.08518475138839678;  // std dev = 1.21e-07, 367.000 (wgt'ed) examples reached here.  /* #neg=367 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( actor(B) )
%   | | then return -0.07730954662484225;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else return -0.20973122577379474;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.21090418863530339;  // std dev = 0.027, 218.000 (wgt'ed) examples reached here.  /* #pos=218 */
%   | | else if ( actor(B) )
%   | | | then return -0.07740752750295604;  // std dev = 4.83e-08, 104.000 (wgt'ed) examples reached here.  /* #neg=104 */
%   | | | else return 0.21262688824661757;  // std dev = 0.000, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   else return -0.07877675473109141;  // std dev = 1.23e-07, 402.000 (wgt'ed) examples reached here.  /* #neg=402 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.17814113040768031;  // std dev = 0.025, 260.000 (wgt'ed) examples reached here.  /* #pos=260 */
%   | else return -0.07482994663426686;  // std dev = 0.202, 126.000 (wgt'ed) examples reached here.  /* #neg=126 */
%   else return -0.07324622576333721;  // std dev = 2.11e-08, 397.000 (wgt'ed) examples reached here.  /* #neg=397 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.1515091641371901;  // std dev = 4.47e-08, 81.000 (wgt'ed) examples reached here.  /* #pos=81 */
%   | | else return 0.14983010078071615;  // std dev = 0.038, 139.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=137 */
%   | else if ( genre(A, E) )
%   | | then return -0.06713118768185652;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.15447423567523713;  // std dev = 3.33e-08, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   | | | else return -0.06946317140937759;  // std dev = 0.186, 118.000 (wgt'ed) examples reached here.  /* #neg=118 */
%   else return -0.06842697784420326;  // std dev = 0.000, 368.000 (wgt'ed) examples reached here.  /* #neg=368 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( genre(A, E) )
%   | | then return -0.1882720362036711;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return 0.13482347064195388;  // std dev = 0.020, 218.000 (wgt'ed) examples reached here.  /* #pos=218 */
%   | else if ( genre(A, F) )
%   | | then return -0.06304733084971179;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.135356463942179;  // std dev = 2.98e-08, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   | | | else return -0.06516101130826144;  // std dev = 0.177, 116.000 (wgt'ed) examples reached here.  /* #neg=116 */
%   else return -0.06419184008202565;  // std dev = 1.83e-07, 381.000 (wgt'ed) examples reached here.  /* #neg=381 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063177
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.268 seconds
Total inference time: 0.979 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.065193
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.504 seconds
Refined model CLL: -0.065193


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063177
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 6.9879999999999995 seconds
Total inference time: 0.979 seconds
AUC ROC: 1.0
Total revision time: 6.9879999999999995
Best scored revision CLL: -0.065193


Dataset: 4_cora_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 00:07:34
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063177, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 6.9879999999999995, 'Inference time': 0.979, 'parameter_0.8': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.122893, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 1.56, 'Inference time': 0.974}}


Amount of data: 1.0
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;haswordauthor(E, C).;true;true
7;true,true,true;author(F, E), title(F, D).;false;false
7;true,true,false;title(G, D), venue(G, B).;false;false
7;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
7;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
7;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, B).;false;true
8;true,true,false;title(F, D), venue(F, A).;false;false
8;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
8;true,false,false;haswordvenue(A, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
8;false,true;haswordauthor(M, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;true,true;author(F, E), venue(F, B).;true;true
9;true,true,true;samebib(F, G), venue(G, A).;false;false
9;true,true,false;author(H, E), venue(H, A).;false;false
9;true,false;haswordtitle(I, C).;true;true
9;true,false,true;title(J, I), venue(J, A).;false;false
9;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995086;  // std dev = 1.08e-06, 267.000 (wgt'ed) examples reached here.  /* #pos=267 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.16071303766361614;  // std dev = 6.415, 195.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048754;  // std dev = 1.52e-07, 482.000 (wgt'ed) examples reached here.  /* #neg=482 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7100854338694093;  // std dev = 1.455, 270.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=267 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.1224620455028413;  // std dev = 6.495, 207.000 (wgt'ed) examples reached here.  /* #neg=148 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839233;  // std dev = 0.000, 486.000 (wgt'ed) examples reached here.  /* #neg=486 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12712805257040286;  // std dev = 0.183, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | else if ( movie(E, A) )
%   | | then return 0.34887761475843404;  // std dev = 0.377, 484.000 (wgt'ed) examples reached here.  /* #neg=158 #pos=326 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360582;  // std dev = 0.000, 497.000 (wgt'ed) examples reached here.  /* #neg=497 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4657355282304987;  // std dev = 0.951, 269.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=267 */
%   | else if ( genre(A, E) )
%   | | then return -0.10025235647751746;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.04107566732524963;  // std dev = 6.525, 212.000 (wgt'ed) examples reached here.  /* #neg=153 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783548;  // std dev = 1.50e-08, 480.000 (wgt'ed) examples reached here.  /* #neg=480 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.13134358019045914;  // std dev = 0.356, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else if ( genre(B, E) )
%   | | then return 0.35827764473079043;  // std dev = 1.19e-07, 267.000 (wgt'ed) examples reached here.  /* #pos=267 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.04028526299092678;  // std dev = 6.495, 207.000 (wgt'ed) examples reached here.  /* #neg=148 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926139;  // std dev = 0.000, 484.000 (wgt'ed) examples reached here.  /* #neg=484 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.26482368025691333;  // std dev = 1.518, 275.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=267 */
%   | else if ( movie(E, A) )
%   | | then return 0.011235035086580454;  // std dev = 0.431, 233.000 (wgt'ed) examples reached here.  /* #neg=174 #pos=59 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 1.44e-07, 504.000 (wgt'ed) examples reached here.  /* #neg=504 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.10989503561694869;  // std dev = 0.314, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else if ( genre(B, E) )
%   | | then return 0.2304186423781775;  // std dev = 2.46e-07, 267.000 (wgt'ed) examples reached here.  /* #pos=267 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.05944304658732469;  // std dev = 6.363, 188.000 (wgt'ed) examples reached here.  /* #neg=129 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109168;  // std dev = 5.96e-08, 439.000 (wgt'ed) examples reached here.  /* #neg=439 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18139527278992493;  // std dev = 1.181, 273.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=267 */
%   | else if ( movie(E, B) )
%   | | then return 0.012028456974614585;  // std dev = 6.510, 222.000 (wgt'ed) examples reached here.  /* #neg=163 #pos=59 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.07324622576333685;  // std dev = 1.71e-07, 512.000 (wgt'ed) examples reached here.  /* #neg=512 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.16551364516541867;  // std dev = 1.43e-07, 267.000 (wgt'ed) examples reached here.  /* #pos=267 */
%   | else if ( genre(A, E) )
%   | | then return -0.0749760266719373;  // std dev = 3.73e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.05422508751489932;  // std dev = 6.323, 183.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420357;  // std dev = 0.000, 515.000 (wgt'ed) examples reached here.  /* #neg=515 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return -0.372229472267493;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return 0.14389903670602894;  // std dev = 0.000, 267.000 (wgt'ed) examples reached here.  /* #pos=267 */
%   | | else if ( genre(A, G) )
%   | | | then return -0.06993896610606874;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | | else return -0.001958955562875087;  // std dev = 6.531, 213.000 (wgt'ed) examples reached here.  /* #neg=154 #pos=59 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.0641918400820253;  // std dev = 2.48e-07, 550.000 (wgt'ed) examples reached here.  /* #neg=550 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.133249
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.896 seconds
Total inference time: 0.942 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.978388
   AUC PR    = 0.863056
   CLL	      = -0.13038
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.819018
   F1        = 0.900506


Total scoring time: 1.735 seconds
Parameter learned model CLL: -0.13038


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 19, 0], 'true,false,true': [1.08e-06, 0, 267], 'true,false,false,true': [6.415, 136, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.52e-07, 482, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.455, 3, 267], 'true,false,true': [0.0, 24, 0], 'true,false,false,true': [6.495, 148, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 486, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.183, 23, 0], 'true,false,true': [0.377, 158, 326], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 497, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.951, 2, 267], 'true,false,true': [0.0, 18, 0], 'true,false,false,true': [6.525, 153, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.5e-08, 480, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.356, 20, 0], 'true,false,true': [1.19e-07, 0, 267], 'true,false,false,true': [6.495, 148, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 484, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [1.518, 8, 267], 'true,false,true': [0.431, 174, 59], 'true,false,false': [0.0, 0, 0], 'false,true': [1.44e-07, 504, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.314, 17, 0], 'true,false,true': [2.46e-07, 0, 267], 'true,false,false,true': [6.363, 129, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.96e-08, 439, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [1.181, 6, 267], 'true,false,true': [6.51, 163, 59], 'true,false,false': [0.0, 0, 0], 'false,true': [1.71e-07, 512, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [1.43e-07, 0, 267], 'true,false,true': [3.73e-09, 11, 0], 'true,false,false,true': [6.323, 124, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 515, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true,true,false': 'genre(A, G)'}, {'true,true,true,true': [0.0, 5, 0], 'true,true,true,false': [0.0, 0, 267], 'true,true,false,true': [0.0, 17, 0], 'true,true,false,false': [6.531, 154, 59], 'true,false': [0.0, 0, 0], 'false': [2.48e-07, 550, 0]}]]
[{'': [0.2184032745363334, 4.791003923693622e-17], 'true': [0.0, 0.20771724667828845], 'true,false': [4.364382346990877e-15, 0.21101906640368218], 'true,false,false': [0.21101906640368218, nan], 'false': [4.791003923693622e-17, nan]}, {'': [0.18455299075664822, -1.3706457094137734e-16], 'true': [0.007843938223378451, 0.1883346970609744], 'true,false': [-4.625929269271485e-18, 0.2037853858899854], 'true,false,false': [0.2037853858899854, nan], 'false': [-1.3706457094137734e-16, nan]}, {'': [0.14582199110714128, -8.935396576460012e-18], 'true': [0.0014625713189616513, 0.1424032057604479], 'true,false': [0.1424032057604479, nan], 'false': [-8.935396576460012e-18, nan]}, {'': [0.13498178673089029, 2.238949766327399e-16], 'true': [0.0033641097768230058, 0.1865720735950261], 'true,false': [-9.25185853854297e-18, 0.20084994660021155], 'true,false,false': [0.20084994660021155, nan], 'false': [2.238949766327399e-16, nan]}, {'': [0.11429492882537508, -1.8350793795457133e-17], 'true': [0.00632939143454298, 0.11386961251695739], 'true,false': [5.3224174963303385e-17, 0.20378538588998538], 'true,false,false': [0.20378538588998538, nan], 'false': [-1.8350793795457133e-17, nan]}, {'': [0.10560845353330356, 4.1413081077287586e-17], 'true': [0.008383960545752507, 0.18554642258548396], 'true,false': [0.18554642258548396, nan], 'false': [4.1413081077287586e-17, nan]}, {'': [0.09533811605332693, 8.092741865149204e-18], 'true': [0.005814168708934555, 0.09606376852920093], 'true,false': [2.262027435940394e-16, 0.21534065187867668], 'true,false,false': [0.21534065187867668, nan], 'false': [8.092741865149204e-18, nan]}, {'': [0.09551880491136834, 5.724587470723463e-17], 'true': [0.0051074048283916845, 0.1908801141347617], 'true,false': [0.1908801141347617, nan], 'false': [5.724587470723463e-17, nan]}, {'': [0.09052535542553652, -1.1986097120224992e-16], 'true': [7.650975150974862e-17, 0.20696573564455567], 'true,false': [1.261617073437678e-18, 0.21845979276777244], 'true,false,false': [0.21845979276777244, nan], 'false': [-1.1986097120224992e-16, nan]}, {'': [0.09268723189442185, 1.1223345485301583e-16], 'true': [0.09268723189442185, nan], 'true,true': [0.004806834334855217, 0.18578274802342495], 'true,true,false': [-2.44902137784961e-18, 0.20026890608124626], 'true,true,true': [0.0, -6.653021870412923e-17]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, E).;true;true
9;true,true;genre(A, F).;true;true
9;true,false;genre(A, G).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995086;  // std dev = 1.08e-06, 267.000 (wgt'ed) examples reached here.  /* #pos=267 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.8581489350995125;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.14185106490048785;  // std dev = 0.000, 131.000 (wgt'ed) examples reached here.  /* #neg=131 */
%   else return -0.14185106490048766;  // std dev = 0.000, 494.000 (wgt'ed) examples reached here.  /* #neg=494 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( actor(A) )
%   | | then return 0.7194734122109576;  // std dev = 0.000, 267.000 (wgt'ed) examples reached here.  /* #pos=267 */
%   | | else return -0.12544463852839138;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 7.45e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.7194734122109543;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.1254446385283911;  // std dev = 8.16e-08, 137.000 (wgt'ed) examples reached here.  /* #neg=137 */
%   else return -0.12544463852839233;  // std dev = 0.000, 483.000 (wgt'ed) examples reached here.  /* #neg=483 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360642;  // std dev = 0.000, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | else if ( actor(A), director(B) )
%   | | then return 0.5553664367462832;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | | else return -0.11231637819360618;  // std dev = 1.02e-07, 147.000 (wgt'ed) examples reached here.  /* #neg=147 */
%   else return -0.11231637819360582;  // std dev = 0.000, 496.000 (wgt'ed) examples reached here.  /* #neg=496 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.4175135841583099;  // std dev = 2.15e-07, 95.000 (wgt'ed) examples reached here.  /* #pos=95 */
%   | | else return 0.4057156315754425;  // std dev = 0.077, 176.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=172 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783633;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.4175135841583105;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.10159632948783645;  // std dev = 0.000, 155.000 (wgt'ed) examples reached here.  /* #neg=155 */
%   else return -0.10159632948783531;  // std dev = 3.69e-07, 518.000 (wgt'ed) examples reached here.  /* #neg=518 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1039128104935093;  // std dev = 0.114, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | else if ( genre(B, E) )
%   | | then return 0.3223710803800194;  // std dev = 0.020, 267.000 (wgt'ed) examples reached here.  /* #pos=267 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.3207118471601497;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.09269127618926079;  // std dev = 7.74e-08, 137.000 (wgt'ed) examples reached here.  /* #neg=137 */
%   else return -0.09269127618926146;  // std dev = 0.000, 501.000 (wgt'ed) examples reached here.  /* #neg=501 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.25609958132475036;  // std dev = 0.019, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.08651941551039821;  // std dev = 0.105, 168.000 (wgt'ed) examples reached here.  /* #neg=168 */
%   else return -0.08518475138839678;  // std dev = 1.32e-07, 430.000 (wgt'ed) examples reached here.  /* #neg=430 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08052499227922004;  // std dev = 0.044, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else if ( genre(B, E) )
%   | | then return 0.21059151251591918;  // std dev = 0.015, 267.000 (wgt'ed) examples reached here.  /* #pos=267 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.20960404187444404;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.07867995128737867;  // std dev = 0.000, 164.000 (wgt'ed) examples reached here.  /* #neg=164 */
%   else return -0.07877675473109211;  // std dev = 0.000, 507.000 (wgt'ed) examples reached here.  /* #neg=507 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.17757689621482414;  // std dev = 0.014, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.07405915710808204;  // std dev = 0.082, 167.000 (wgt'ed) examples reached here.  /* #neg=167 */
%   else return -0.07324622576333692;  // std dev = 1.55e-07, 499.000 (wgt'ed) examples reached here.  /* #neg=499 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.15033025201951072;  // std dev = 0.449, 270.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=267 */
%   | else if ( genre(A, E) )
%   | | then return -0.0674695898677947;  // std dev = 7.45e-09, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.15258163642842076;  // std dev = 6.32e-08, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.06829636631315773;  // std dev = 3.33e-08, 138.000 (wgt'ed) examples reached here.  /* #neg=138 */
%   else return -0.06842697784420346;  // std dev = 0.000, 448.000 (wgt'ed) examples reached here.  /* #neg=448 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( genre(A, E) )
%   | | then return -0.12254121390100346;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0.13471938688590857;  // std dev = 0.011, 267.000 (wgt'ed) examples reached here.  /* #pos=267 */
%   | else if ( genre(A, F) )
%   | | then return -0.0633464634284814;  // std dev = 4.56e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.13388037332488167;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.06407658892504463;  // std dev = 0.000, 148.000 (wgt'ed) examples reached here.  /* #neg=148 */
%   else return -0.0641918400820254;  // std dev = 2.43e-07, 482.000 (wgt'ed) examples reached here.  /* #neg=482 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063435
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.671 seconds
Total inference time: 0.971 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064511
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.655 seconds
Refined model CLL: -0.064511


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063435
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 7.957 seconds
Total inference time: 0.971 seconds
AUC ROC: 1.0
Total revision time: 7.957
Best scored revision CLL: -0.064511


Dataset: 4_cora_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 00:07:44
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063435, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 7.957, 'Inference time': 0.971, 'parameter_1.0': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.133249, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 1.896, 'Inference time': 0.942}}


Starting fold 2

Target train facts examples: 870
Target train pos examples: 324
Target train neg examples: 10813

Target test facts examples: 208
Target test pos	 examples: 58
Target test neg examples: 3423

Amount of data: 0.2
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;haswordauthor(E, C).;true;true
7;true,true,true;author(F, E), title(F, D).;false;false
7;true,true,false;title(G, D), venue(G, B).;false;false
7;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
7;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
7;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, B).;false;true
8;true,true,false;title(F, D), venue(F, A).;false;false
8;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
8;true,false,false;haswordvenue(A, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
8;false,true;haswordauthor(M, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;true,true;author(F, E), venue(F, B).;true;true
9;true,true,true;samebib(F, G), venue(G, A).;false;false
9;true,true,false;author(H, E), venue(H, A).;false;false
9;true,false;haswordtitle(I, C).;true;true
9;true,false,true;title(J, I), venue(J, A).;false;false
9;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.12130682983635446;  // std dev = 2.714, 38.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048763;  // std dev = 8.69e-08, 105.000 (wgt'ed) examples reached here.  /* #neg=105 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7041112658338755;  // std dev = 0.837, 55.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=54 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.0927314077493016;  // std dev = 2.739, 40.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.1254446385283914;  // std dev = 0.000, 93.000 (wgt'ed) examples reached here.  /* #neg=93 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14982080260802508;  // std dev = 0.092, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( movie(E, A) )
%   | | then return 0.34975147783690314;  // std dev = 0.371, 95.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=64 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360621;  // std dev = 6.99e-08, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.47202632210985157;  // std dev = 1.69e-07, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | else if ( genre(A, E) )
%   | | then return -0.09822391686884434;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.060617956348959126;  // std dev = 2.673, 35.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783631;  // std dev = 0.000, 106.000 (wgt'ed) examples reached here.  /* #neg=106 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.220532598405337;  // std dev = 0.160, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.35800397994399236;  // std dev = 9.88e-08, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.008572905370916121;  // std dev = 2.780, 44.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926104;  // std dev = 2.36e-08, 89.000 (wgt'ed) examples reached here.  /* #neg=89 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2709693061136097;  // std dev = 0.519, 55.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=54 */
%   | else if ( movie(E, A) )
%   | | then return 0.06135398641073617;  // std dev = 0.440, 36.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=10 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 4.21e-08, 98.000 (wgt'ed) examples reached here.  /* #neg=98 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.13231678567588656;  // std dev = 0.189, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.22916867215616674;  // std dev = 0.000, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.12488017189570609;  // std dev = 2.509, 27.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109158;  // std dev = 5.77e-08, 101.000 (wgt'ed) examples reached here.  /* #neg=101 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.19120799638440697;  // std dev = 3.65e-08, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | else if ( movie(E, B) )
%   | | then return -0.005870477026247527;  // std dev = 2.705, 41.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=10 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.07324622576333707;  // std dev = 0.000, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1633667737266943;  // std dev = 4.94e-08, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | else if ( genre(A, E) )
%   | | then return -0.06832512807790873;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.050803343322758196;  // std dev = 2.798, 46.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420265;  // std dev = 4.84e-09, 104.000 (wgt'ed) examples reached here.  /* #neg=104 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return -0.3446049291547443;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return 0.1422465689167749;  // std dev = 0.000, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | | else if ( genre(A, G) )
%   | | | then return -0.06410197035222831;  // std dev = 1.32e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return -0.020246577262191853;  // std dev = 2.760, 42.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=10 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.06419184008202626;  // std dev = 0.000, 89.000 (wgt'ed) examples reached here.  /* #neg=89 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.119726
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 0.891 seconds
Total inference time: 0.993 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.980631
   AUC PR    = 0.881876
   CLL	      = -0.124444
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.84375
   F1        = 0.915254


Total scoring time: 0.892 seconds
Parameter learned model CLL: -0.124444


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 3, 0], 'true,false,true': [0.0, 0, 54], 'true,false,false,true': [2.714, 28, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [8.69e-08, 105, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.837, 1, 54], 'true,false,true': [0.0, 5, 0], 'true,false,false,true': [2.739, 30, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 93, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.092, 3, 0], 'true,false,true': [0.371, 31, 64], 'true,false,false': [0.0, 0, 0], 'false,true': [6.99e-08, 86, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.69e-07, 0, 54], 'true,false,true': [2.63e-09, 6, 0], 'true,false,false,true': [2.673, 25, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 106, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.16, 3, 0], 'true,false,true': [9.88e-08, 0, 54], 'true,false,false,true': [2.78, 34, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.36e-08, 89, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.519, 1, 54], 'true,false,true': [0.44, 26, 10], 'true,false,false': [0.0, 0, 0], 'false,true': [4.21e-08, 98, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.189, 4, 0], 'true,false,true': [0.0, 0, 54], 'true,false,false,true': [2.509, 17, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.77e-08, 101, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [3.65e-08, 0, 54], 'true,false,true': [2.705, 31, 10], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 86, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [4.94e-08, 0, 54], 'true,false,true': [0.0, 4, 0], 'true,false,false,true': [2.798, 36, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [4.84e-09, 104, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true,true,false': 'genre(A, G)'}, {'true,true,true,true': [0.0, 2, 0], 'true,true,true,false': [0.0, 0, 54], 'true,true,false,true': [1.32e-09, 3, 0], 'true,true,false,false': [2.76, 32, 10], 'true,false': [0.0, 0, 0], 'false': [0.0, 89, 0]}]]
[{'': [0.21983379501384973, 7.190015778524824e-17], 'true': [0.0, 0.21172022684309946], 'true,false': [0.0, 0.19390581717451538], 'true,false,false': [0.19390581717451538, nan], 'false': [7.190015778524824e-17, nan]}, {'': [0.18411833856976387, -1.4325458382260084e-17], 'true': [0.012743759230783072, 0.17136797897969053], 'true,false': [0.0, 0.18750000000000006], 'true,false,false': [0.18750000000000006, nan], 'false': [-1.4325458382260084e-17, nan]}, {'': [0.14063135171919972, 5.680210823663592e-17], 'true': [0.002813163701313681, 0.1373435316559784], 'true,false': [0.1373435316559784, nan], 'false': [5.680210823663592e-17, nan]}, {'': [0.12289477747742822, 0.0], 'true': [5.26327952414889e-16, 0.17736799428999694], 'true,false': [1.1564823173178713e-18, 0.20408163265306148], 'true,false,false': [0.20408163265306148, nan], 'false': [0.0, nan]}, {'': [0.11395721187005618, 6.237208003512115e-18], 'true': [0.008537609405012414, 0.11209457636376734], 'true,false': [1.809252336426181e-16, 0.17561983471074383], 'true,false,false': [0.17561983471074383, nan], 'false': [6.237208003512115e-18, nan]}, {'': [0.0899101001745168, 1.8126090197961738e-17], 'true': [0.004892756955029447, 0.1932414218931797], 'true,false': [0.1932414218931797, nan], 'false': [1.8126090197961738e-17, nan]}, {'': [0.08158595526158274, 3.29769215235195e-17], 'true': [0.008960811062491018, 0.08014896221548966], 'true,false': [-4.9343245538895844e-17, 0.23319615912208538], 'true,false,false': [0.23319615912208538, nan], 'false': [3.29769215235195e-17, nan]}, {'': [0.08652599031784908, -7.10026352957949e-18], 'true': [2.4671622769447922e-17, 0.17840961986467743], 'true,false': [0.17840961986467743, nan], 'false': [-7.10026352957949e-18, nan]}, {'': [0.08686232023829622, 2.4019248128909638e-17], 'true': [4.5231308410654523e-17, 0.1565443352828931], 'true,false': [0.0, 0.17013232514177723], 'true,false,false': [0.17013232514177723, nan], 'false': [2.4019248128909638e-17, nan]}, {'': [0.08542854697777791, -1.1850695206673019e-17], 'true': [0.08542854697777791, nan], 'true,true': [0.008162829453713038, 0.16943184103236128], 'true,true,false': [5.782411586589357e-19, 0.18140589569161022], 'true,true,true': [0.0, -1.2335811384723961e-17]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, E).;true;true
9;true,true;genre(A, F).;true;true
9;true,false;genre(A, G).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | | else if ( actor(B) )
%   | | | then return -0.1418510649004877;  // std dev = 2.11e-08, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.14185106490048763;  // std dev = 8.94e-08, 100.000 (wgt'ed) examples reached here.  /* #neg=100 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109545;  // std dev = 0.000, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( actor(B) )
%   | | | then return -0.12544463852839133;  // std dev = 1.83e-08, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | | | else return 0.7194734122109544;  // std dev = 2.98e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.12544463852839144;  // std dev = 0.000, 84.000 (wgt'ed) examples reached here.  /* #neg=84 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5553664367462837;  // std dev = 1.98e-07, 64.000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | else return -0.1167472212843397;  // std dev = 0.113, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   else return -0.11231637819360624;  // std dev = 6.05e-08, 75.000 (wgt'ed) examples reached here.  /* #neg=75 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.4175135841583098;  // std dev = 4.71e-08, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return 0.4018843943155579;  // std dev = 0.098, 40.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=39 */
%   | else if ( genre(A, E) )
%   | | then return -0.10119261974707397;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.4175135841583102;  // std dev = 2.11e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.11243652873071479;  // std dev = 0.309, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   else return -0.10159632948783626;  // std dev = 4.71e-08, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.13962938563766225;  // std dev = 0.164, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.32317780784963035;  // std dev = 0.011, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.3207118471601497;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.11267028270860914;  // std dev = 0.406, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   else return -0.09269127618926107;  // std dev = 0.000, 72.000 (wgt'ed) examples reached here.  /* #neg=72 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.2565919004977233;  // std dev = 0.011, 64.000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | else return -0.0907917713350105;  // std dev = 0.237, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
%   else return -0.08518475138839678;  // std dev = 3.65e-08, 91.000 (wgt'ed) examples reached here.  /* #neg=91 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07476784984876318;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.21098968212997743;  // std dev = 0.009, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.209522490925528;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.08694545261149371;  // std dev = 0.260, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   else return -0.07877675473109161;  // std dev = 5.05e-08, 89.000 (wgt'ed) examples reached here.  /* #neg=89 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.1763519270517056;  // std dev = 1.29e-08, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return 0.16856741765233016;  // std dev = 0.063, 40.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=39 */
%   | else if ( actor(B) )
%   | | then return -0.06997128056238465;  // std dev = 0.000314, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | else return 0.17692395236135114;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.07324622576333707;  // std dev = 0.000, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.15437832484060607;  // std dev = 0.010, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | else if ( genre(A, E) )
%   | | then return -0.06535115170654454;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( actor(B) )
%   | | | then return -0.06556756164396788;  // std dev = 0.000, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | | | else return 0.15261295248837037;  // std dev = 5.27e-09, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.06842697784420265;  // std dev = 4.28e-08, 89.000 (wgt'ed) examples reached here.  /* #neg=89 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.13528198723354065;  // std dev = 0.009, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | else if ( genre(A, F) )
%   | | then return -0.0614710723165839;  // std dev = 1.86e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( actor(B) )
%   | | | then return -0.061662958458787394;  // std dev = 6.45e-09, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | | else return 0.13390482573309237;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.06419184008202626;  // std dev = 0.000, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063131
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.323 seconds
Total inference time: 0.995 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.066785
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.929 seconds
Refined model CLL: -0.066785


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063131
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 4.035 seconds
Total inference time: 0.995 seconds
AUC ROC: 1.0
Total revision time: 4.035
Best scored revision CLL: -0.066785


Dataset: 4_cora_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 00:07:51
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063131, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 4.035, 'Inference time': 0.995, 'parameter_0.2': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.119726, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 0.891, 'Inference time': 0.993}}


Amount of data: 0.4
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;haswordauthor(E, C).;true;true
7;true,true,true;author(F, E), title(F, D).;false;false
7;true,true,false;title(G, D), venue(G, B).;false;false
7;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
7;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
7;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, B).;false;true
8;true,true,false;title(F, D), venue(F, A).;false;false
8;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
8;true,false,false;haswordvenue(A, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
8;false,true;haswordauthor(M, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;true,true;author(F, E), venue(F, B).;true;true
9;true,true,true;samebib(F, G), venue(G, A).;false;false
9;true,true,false;author(H, E), venue(H, A).;false;false
9;true,false;haswordtitle(I, C).;true;true
9;true,false,true;title(J, I), venue(J, A).;false;false
9;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995111;  // std dev = 4.92e-07, 106.000 (wgt'ed) examples reached here.  /* #pos=106 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.10546076305650105;  // std dev = 4.161, 93.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=23 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.1418510649004883;  // std dev = 0.000, 181.000 (wgt'ed) examples reached here.  /* #neg=181 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.6887491194567966;  // std dev = 1.659, 110.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=106 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.11862970518449435;  // std dev = 4.087, 84.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=23 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.1254446385283916;  // std dev = 0.000, 191.000 (wgt'ed) examples reached here.  /* #neg=191 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.13062425501644373;  // std dev = 0.100, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( movie(E, A) )
%   | | then return 0.3649937601160498;  // std dev = 0.372, 188.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=129 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360649;  // std dev = 0.000, 182.000 (wgt'ed) examples reached here.  /* #neg=182 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4596030941275635;  // std dev = 0.942, 108.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=106 */
%   | else if ( genre(A, E) )
%   | | then return -0.09993743310583639;  // std dev = 5.27e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.04104917947123323;  // std dev = 4.096, 85.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=23 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783652;  // std dev = 0.000, 179.000 (wgt'ed) examples reached here.  /* #neg=179 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.0913005664444906;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.36089195405080693;  // std dev = 1.03e-07, 106.000 (wgt'ed) examples reached here.  /* #pos=106 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.027488716880204295;  // std dev = 4.113, 87.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=23 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.0926912761892606;  // std dev = 8.69e-08, 180.000 (wgt'ed) examples reached here.  /* #neg=180 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2722858988103038;  // std dev = 0.768, 108.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=106 */
%   | else if ( movie(E, A) )
%   | | then return 0.06513242757408261;  // std dev = 0.450, 78.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=23 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 7.74e-08, 201.000 (wgt'ed) examples reached here.  /* #neg=201 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12801358616245875;  // std dev = 0.213, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(B, E) )
%   | | then return 0.2306450014039558;  // std dev = 0.000, 106.000 (wgt'ed) examples reached here.  /* #pos=106 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.04467365474728787;  // std dev = 4.016, 77.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=23 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109147;  // std dev = 7.30e-08, 198.000 (wgt'ed) examples reached here.  /* #neg=198 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18324764767351773;  // std dev = 0.683, 108.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=106 */
%   | else if ( movie(E, B) )
%   | | then return 0.015372618459156728;  // std dev = 4.052, 90.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=23 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.07324622576333668;  // std dev = 1.10e-07, 186.000 (wgt'ed) examples reached here.  /* #neg=186 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.15614536118149946;  // std dev = 0.700, 108.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=106 */
%   | else if ( genre(A, E) )
%   | | then return -0.08041908628103886;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.010017770756465452;  // std dev = 4.138, 90.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=23 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420262;  // std dev = 5.67e-09, 181.000 (wgt'ed) examples reached here.  /* #neg=181 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return -0.3701068739703112;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return 0.14495747612508392;  // std dev = 0.000, 106.000 (wgt'ed) examples reached here.  /* #pos=106 */
%   | | else if ( genre(A, G) )
%   | | | then return -0.07466906316789611;  // std dev = 2.63e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return 0.013484420718296317;  // std dev = 4.078, 83.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=23 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.06419184008202626;  // std dev = 0.000, 196.000 (wgt'ed) examples reached here.  /* #neg=196 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.123804
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.156 seconds
Total inference time: 1.039 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.978502
   AUC PR    = 0.865058
   CLL	      = -0.127507
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.821705
   F1        = 0.902128


Total scoring time: 1.141 seconds
Parameter learned model CLL: -0.127507


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 11, 0], 'true,false,true': [4.92e-07, 0, 106], 'true,false,false,true': [4.161, 70, 23], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 181, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.659, 4, 106], 'true,false,true': [0.0, 7, 0], 'true,false,false,true': [4.087, 61, 23], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 191, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.1, 6, 0], 'true,false,true': [0.372, 59, 129], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 182, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.942, 2, 106], 'true,false,true': [5.27e-09, 11, 0], 'true,false,false,true': [4.096, 62, 23], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 179, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 4, 0], 'true,false,true': [1.03e-07, 0, 106], 'true,false,false,true': [4.113, 64, 23], 'true,false,false,false': [0.0, 0, 0], 'false,true': [8.69e-08, 180, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.768, 2, 106], 'true,false,true': [0.45, 55, 23], 'true,false,false': [0.0, 0, 0], 'false,true': [7.74e-08, 201, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.213, 6, 0], 'true,false,true': [0.0, 0, 106], 'true,false,false,true': [4.016, 54, 23], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.3e-08, 198, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.683, 2, 106], 'true,false,true': [4.052, 67, 23], 'true,false,false': [0.0, 0, 0], 'false,true': [1.1e-07, 186, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.7, 2, 106], 'true,false,true': [0.0, 5, 0], 'true,false,false,true': [4.138, 67, 23], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.67e-09, 181, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true,true,false': 'genre(A, G)'}, {'true,true,true,true': [0.0, 2, 0], 'true,true,true,false': [0.0, 0, 106], 'true,true,false,true': [2.63e-09, 7, 0], 'true,true,false,false': [4.078, 60, 23], 'true,false': [0.0, 0, 0], 'false': [0.0, 196, 0]}]]
[{'': [0.23693877551020825, -2.011895867829013e-16], 'true': [-1.0092936587501423e-17, 0.22802454483473067], 'true,false': [2.2790993411173024e-15, 0.18614868770956275], 'true,false,false': [0.18614868770956275, nan], 'false': [-2.011895867829013e-16, nan]}, {'': [0.18462602944519968, -2.790089276544896e-17], 'true': [0.02501552737894457, 0.18777263258047258], 'true,false': [-1.982541115402065e-18, 0.19883786848072652], 'true,false,false': [0.19883786848072652, nan], 'false': [-2.790089276544896e-17, nan]}, {'': [0.14180112091689537, -1.9520404828574182e-17], 'true': [0.0016758917688009176, 0.13867617537067492], 'true,false': [0.13867617537067492, nan], 'false': [-1.9520404828574182e-17, nan]}, {'': [0.1346173826780998, -8.311166776523518e-17], 'true': [0.00821922448860281, 0.17677152580038602], 'true,false': [2.523234146875356e-18, 0.19737024221453284], 'true,false,false': [0.19737024221453284, nan], 'false': [-8.311166776523518e-17, nan]}, {'': [0.11466039323131391, 4.194175870806147e-17], 'true': [0.0, 0.11518611895325374], 'true,false': [1.005485003434104e-16, 0.19447747390672473], 'true,false,false': [0.19447747390672473, nan], 'false': [4.194175870806147e-17, nan]}, {'': [0.09855447462555861, 2.982688722873555e-17], 'true': [0.005465383843070961, 0.20253009116562806], 'true,false': [0.20253009116562806, nan], 'false': [2.982688722873555e-17, nan]}, {'': [0.09616145780525961, 2.6914497566670462e-17], 'true': [0.007550870613108988, 0.09657056924221417], 'true,false': [-1.8433891729625242e-16, 0.20947883285545565], 'true,false,false': [0.20947883285545565, nan], 'false': [2.6914497566670462e-17, nan]}, {'': [0.09225088539073793, 6.446456272017038e-17], 'true': [0.0043157538477482035, 0.18240102936938685], 'true,false': [0.18240102936938685, nan], 'false': [6.446456272017038e-17, nan]}, {'': [0.0940623123658315, 3.250929298626149e-17], 'true': [0.004542121576730351, 0.18048104891562633], 'true,false': [-1.3877787807814458e-18, 0.190246913580247], 'true,false,false': [0.190246913580247, nan], 'false': [3.250929298626149e-17, nan]}, {'': [0.09096822662760183, -2.2657612747452172e-18], 'true': [0.09096822662760183, nan], 'true,true': [0.004821823762406419, 0.18529635981527595], 'true,true,false': [9.912705577010326e-19, 0.20031934968790843], 'true,true,true': [0.0, -1.67580833905684e-17]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, E).;true;true
9;true,true;genre(A, F).;true;true
9;true,false;genre(A, G).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995111;  // std dev = 4.92e-07, 106.000 (wgt'ed) examples reached here.  /* #pos=106 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.8581489350995121;  // std dev = 8.43e-08, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return -0.14185106490048766;  // std dev = 5.96e-08, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
%   else return -0.14185106490048832;  // std dev = 0.000, 187.000 (wgt'ed) examples reached here.  /* #neg=187 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.7194734122109548;  // std dev = 0.000, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | else return 0.708207838201096;  // std dev = 0.097, 75.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=74 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 7.45e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( actor(B) )
%   | | | then return -0.1254446385283916;  // std dev = 0.000, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
%   | | | else return 0.7194734122109543;  // std dev = 5.96e-08, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   else return -0.12544463852839174;  // std dev = 0.000, 219.000 (wgt'ed) examples reached here.  /* #neg=219 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( director(B) )
%   | | then return 0.5569612205500113;  // std dev = 0.016, 129.000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | | else return -0.11231637819360626;  // std dev = 5.16e-08, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
%   else return -0.11231637819360672;  // std dev = 0.000, 220.000 (wgt'ed) examples reached here.  /* #neg=220 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( actor(A) )
%   | | then return 0.41903970291621523;  // std dev = 0.013, 106.000 (wgt'ed) examples reached here.  /* #pos=106 */
%   | | else return -0.20653171199077724;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783627;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.4171257902261176;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return -0.10569852961464504;  // std dev = 0.236, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
%   else return -0.10159632948783652;  // std dev = 0.000, 193.000 (wgt'ed) examples reached here.  /* #neg=193 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926094;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.3217472185264761;  // std dev = 0.012, 106.000 (wgt'ed) examples reached here.  /* #pos=106 */
%   | | else if ( actor(B) )
%   | | | then return -0.0923468587420662;  // std dev = 1.49e-08, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   | | | else return 0.3204489543881293;  // std dev = 4.21e-08, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   else return -0.09269127618926053;  // std dev = 5.77e-08, 199.000 (wgt'ed) examples reached here.  /* #neg=199 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.2557209523306832;  // std dev = 0.011, 129.000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | else return -0.09069881618871188;  // std dev = 0.310, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
%   else return -0.08518475138839678;  // std dev = 7.74e-08, 202.000 (wgt'ed) examples reached here.  /* #neg=202 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07837752194821622;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(B, E) )
%   | | then return 0.21028322655509402;  // std dev = 0.009, 106.000 (wgt'ed) examples reached here.  /* #pos=106 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.2095103760507149;  // std dev = 2.98e-08, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return -0.08301775822529228;  // std dev = 0.287, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   else return -0.07877675473109146;  // std dev = 8.30e-08, 176.000 (wgt'ed) examples reached here.  /* #neg=176 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.17738089131212745;  // std dev = 0.008, 129.000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | else return -0.08086010492231255;  // std dev = 0.390, 73.000 (wgt'ed) examples reached here.  /* #neg=73 */
%   else return -0.07324622576333663;  // std dev = 1.26e-07, 209.000 (wgt'ed) examples reached here.  /* #neg=209 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14779548527789607;  // std dev = 0.398, 108.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=106 */
%   | else if ( genre(A, E) )
%   | | then return -0.06762003336927348;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.15254597911155637;  // std dev = 2.36e-08, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return -0.07148511755395627;  // std dev = 0.261, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   else return -0.06842697784420261;  // std dev = 5.96e-08, 182.000 (wgt'ed) examples reached here.  /* #neg=182 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( genre(A, E) )
%   | | then return -0.14838509458003768;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0.13485737511546833;  // std dev = 0.006, 106.000 (wgt'ed) examples reached here.  /* #pos=106 */
%   | else if ( genre(A, F) )
%   | | then return -0.0634793947026102;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( actor(B) )
%   | | | then return -0.06275424702341324;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
%   | | | else return 0.1338525299913438;  // std dev = 2.47e-08, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   else return -0.06419184008202626;  // std dev = 0.000, 194.000 (wgt'ed) examples reached here.  /* #neg=194 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063183
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.639 seconds
Total inference time: 1.028 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.06591
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.134 seconds
Refined model CLL: -0.06591


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063183
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 5.07 seconds
Total inference time: 1.028 seconds
AUC ROC: 1.0
Total revision time: 5.07
Best scored revision CLL: -0.06591


Dataset: 4_cora_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 00:07:58
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063183, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 5.07, 'Inference time': 1.028, 'parameter_0.4': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.123804, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 1.156, 'Inference time': 1.039}}


Amount of data: 0.6
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;haswordauthor(E, C).;true;true
7;true,true,true;author(F, E), title(F, D).;false;false
7;true,true,false;title(G, D), venue(G, B).;false;false
7;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
7;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
7;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, B).;false;true
8;true,true,false;title(F, D), venue(F, A).;false;false
8;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
8;true,false,false;haswordvenue(A, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
8;false,true;haswordauthor(M, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;true,true;author(F, E), venue(F, B).;true;true
9;true,true,true;samebib(F, G), venue(G, A).;false;false
9;true,true,false;author(H, E), venue(H, A).;false;false
9;true,false;haswordtitle(I, C).;true;true
9;true,false,true;title(J, I), venue(J, A).;false;false
9;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995097;  // std dev = 9.90e-07, 159.000 (wgt'ed) examples reached here.  /* #pos=159 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.1547591045910363;  // std dev = 4.962, 118.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=35 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.141851064900488;  // std dev = 0.000, 280.000 (wgt'ed) examples reached here.  /* #neg=280 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.6887491194567982;  // std dev = 2.032, 165.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=159 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.12279965154166896;  // std dev = 5.004, 123.000 (wgt'ed) examples reached here.  /* #neg=88 #pos=35 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839197;  // std dev = 0.000, 286.000 (wgt'ed) examples reached here.  /* #neg=286 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1367268806240562;  // std dev = 0.137, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( movie(E, A) )
%   | | then return 0.34843114648781753;  // std dev = 0.380, 290.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=194 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360688;  // std dev = 0.000, 294.000 (wgt'ed) examples reached here.  /* #neg=294 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.46779292648726;  // std dev = 0.950, 161.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=159 */
%   | else if ( genre(A, E) )
%   | | then return -0.099389840891549;  // std dev = 5.27e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.0708866384928311;  // std dev = 4.925, 114.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=35 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783663;  // std dev = 0.000, 304.000 (wgt'ed) examples reached here.  /* #neg=304 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12605937730514435;  // std dev = 0.248, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( genre(B, E) )
%   | | then return 0.3628253678652054;  // std dev = 0.000, 159.000 (wgt'ed) examples reached here.  /* #pos=159 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.040101088469455405;  // std dev = 4.988, 121.000 (wgt'ed) examples reached here.  /* #neg=86 #pos=35 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926042;  // std dev = 1.59e-07, 303.000 (wgt'ed) examples reached here.  /* #neg=303 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2736857761157959;  // std dev = 0.932, 162.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=159 */
%   | else if ( movie(E, A) )
%   | | then return 0.019836072983791503;  // std dev = 0.439, 131.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=35 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 9.54e-08, 266.000 (wgt'ed) examples reached here.  /* #neg=266 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08244086896795656;  // std dev = 5.27e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( genre(B, E) )
%   | | then return 0.2315404618845073;  // std dev = 2.80e-07, 159.000 (wgt'ed) examples reached here.  /* #pos=159 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.05477965158480297;  // std dev = 4.895, 111.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=35 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109143;  // std dev = 5.16e-08, 275.000 (wgt'ed) examples reached here.  /* #neg=275 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1898476583358281;  // std dev = 0.489, 160.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=159 */
%   | else if ( movie(E, B) )
%   | | then return -0.015068803592210378;  // std dev = 5.089, 145.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=35 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.07324622576333688;  // std dev = 1.10e-07, 273.000 (wgt'ed) examples reached here.  /* #neg=273 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1650640559528398;  // std dev = 0.000, 159.000 (wgt'ed) examples reached here.  /* #pos=159 */
%   | else if ( genre(A, E) )
%   | | then return -0.07535877644616244;  // std dev = 3.73e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.016294190021539288;  // std dev = 5.004, 123.000 (wgt'ed) examples reached here.  /* #neg=88 #pos=35 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420292;  // std dev = 0.000, 284.000 (wgt'ed) examples reached here.  /* #neg=284 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return -0.37708518584816847;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0.1435533299161236;  // std dev = 1.19e-07, 159.000 (wgt'ed) examples reached here.  /* #pos=159 */
%   | | else if ( genre(A, G) )
%   | | | then return -0.07027294509466556;  // std dev = 7.45e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | else return -0.008311296337407391;  // std dev = 5.078, 133.000 (wgt'ed) examples reached here.  /* #neg=98 #pos=35 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.0641918400820261;  // std dev = 8.43e-08, 274.000 (wgt'ed) examples reached here.  /* #neg=274 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.124903
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.341 seconds
Total inference time: 1.168 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.978112
   AUC PR    = 0.863231
   CLL	      = -0.128882
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.819588
   F1        = 0.90085


Total scoring time: 1.313 seconds
Parameter learned model CLL: -0.128882


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 18, 0], 'true,false,true': [9.9e-07, 0, 159], 'true,false,false,true': [4.962, 83, 35], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 280, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [2.032, 6, 159], 'true,false,true': [0.0, 5, 0], 'true,false,false,true': [5.004, 88, 35], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 286, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.137, 9, 0], 'true,false,true': [0.38, 96, 194], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 294, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.95, 2, 159], 'true,false,true': [5.27e-09, 14, 0], 'true,false,false,true': [4.925, 79, 35], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 304, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.248, 11, 0], 'true,false,true': [0.0, 0, 159], 'true,false,false,true': [4.988, 86, 35], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.59e-07, 303, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.932, 3, 159], 'true,false,true': [0.439, 96, 35], 'true,false,false': [0.0, 0, 0], 'false,true': [9.54e-08, 266, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [5.27e-09, 10, 0], 'true,false,true': [2.8e-07, 0, 159], 'true,false,false,true': [4.895, 76, 35], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.16e-08, 275, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.489, 1, 159], 'true,false,true': [5.089, 110, 35], 'true,false,false': [0.0, 0, 0], 'false,true': [1.1e-07, 273, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 159], 'true,false,true': [3.73e-09, 9, 0], 'true,false,false,true': [5.004, 88, 35], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 284, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true,true,false': 'genre(A, G)'}, {'true,true,true,true': [0.0, 1, 0], 'true,true,true,false': [1.19e-07, 0, 159], 'true,true,false,true': [7.45e-09, 14, 0], 'true,true,false,false': [5.078, 98, 35], 'true,false': [0.0, 0, 0], 'false': [8.43e-08, 274, 0]}]]
[{'': [0.22515369146797382, -2.5376526277146434e-17], 'true': [-3.0839528461809902e-18, 0.20985546533905547], 'true,false': [6.166974687729172e-15, 0.20863257684573536], 'true,false,false': [0.20863257684573536, nan], 'false': [-2.5376526277146434e-17, nan]}, {'': [0.1820819330830259, -8.074349270001139e-17], 'true': [0.025015527378942373, 0.19794328411726334], 'true,false': [0.0, 0.2035825236301145], 'true,false,false': [0.2035825236301145, nan], 'false': [-8.074349270001139e-17, nan]}, {'': [0.14688456357991916, -9.516197353929913e-17], 'true': [0.002085554201174502, 0.14429336004884633], 'true,false': [0.14429336004884633, nan], 'false': [-9.516197353929913e-17, nan]}, {'': [0.13089934318971413, -5.40503314620142e-17], 'true': [0.005599914711665792, 0.19231176478769074], 'true,false': [1.982541115402065e-18, 0.2127577716220387], 'true,false,false': [0.2127577716220387, nan], 'false': [-5.40503314620142e-17, nan]}, {'': [0.11472852341239735, 8.35415345262494e-17], 'true': [0.00558158601810182, 0.11440114267192786], 'true,false': [-3.5750577899879257e-16, 0.20558705006488573], 'true,false,false': [0.20558705006488573, nan], 'false': [8.35415345262494e-17, nan]}, {'': [0.10488978822802081, 3.4224920307993546e-17], 'true': [0.005365738668445259, 0.1923365699250034], 'true,false': [0.1923365699250034, nan], 'false': [3.4224920307993546e-17, nan]}, {'': [0.09488509893217666, 9.689219124001367e-18], 'true': [2.7755575615628915e-18, 0.09631964889583784], 'true,false': [4.915704461233397e-16, 0.2158915672429195], 'true,false,false': [0.2158915672429195, nan], 'false': [9.689219124001367e-18, nan]}, {'': [0.09618539626667881, 4.3920910864291905e-17], 'true': [0.0014968126058785502, 0.1786414128836098], 'true,false': [0.1786414128836098, nan], 'false': [4.3920910864291905e-17, nan]}, {'': [0.09224843150941911, -4.300159602421381e-17], 'true': [-7.820438915598586e-17, 0.19023559162138068], 'true,false': [1.5419764230904951e-18, 0.20358252363011448], 'true,false,false': [0.20358252363011448, nan], 'false': [-4.300159602421381e-17, nan]}, {'': [0.09099840100041845, 2.5932216633580298e-17], 'true': [0.09099840100041845, nan], 'true,true': [0.0016835644449790742, 0.1757694158672719], 'true,true,false': [3.96508223080413e-18, 0.19390581717451555], 'true,true,true': [0.0, 8.937644474969814e-17]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, E).;true;true
9;true,true;genre(A, F).;true;true
9;true,false;genre(A, G).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995097;  // std dev = 9.90e-07, 159.000 (wgt'ed) examples reached here.  /* #pos=159 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.8581489350995115;  // std dev = 2.38e-07, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | | else return -0.14185106490048766;  // std dev = 7.45e-08, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */
%   else return -0.1418510649004879;  // std dev = 5.96e-08, 292.000 (wgt'ed) examples reached here.  /* #neg=292 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( actor(A) )
%   | | then return 0.7194734122109564;  // std dev = 0.000, 159.000 (wgt'ed) examples reached here.  /* #pos=159 */
%   | | else return -0.12544463852839138;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( actor(B) )
%   | | | then return -0.12544463852839152;  // std dev = 0.000, 74.000 (wgt'ed) examples reached here.  /* #neg=74 */
%   | | | else return 0.7194734122109548;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   else return -0.125444638528392;  // std dev = 0.000, 296.000 (wgt'ed) examples reached here.  /* #neg=296 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( actor(A), director(B) )
%   | | then return 0.5553664367462833;  // std dev = 6.19e-07, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | | else return -0.11350402685710174;  // std dev = 0.115, 97.000 (wgt'ed) examples reached here.  /* #neg=97 */
%   else return -0.11231637819360689;  // std dev = 0.000, 293.000 (wgt'ed) examples reached here.  /* #neg=293 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.4175135841583106;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | else if ( actor(A) )
%   | | | then return 0.4175135841583097;  // std dev = 2.60e-07, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   | | | else return -0.1015963294878363;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.4175135841583105;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | | else return -0.10272867815352851;  // std dev = 0.106, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */
%   else return -0.10159632948783645;  // std dev = 0.000, 331.000 (wgt'ed) examples reached here.  /* #neg=331 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926097;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( genre(B, E) )
%   | | then return 0.32071184716014933;  // std dev = 2.98e-07, 159.000 (wgt'ed) examples reached here.  /* #pos=159 */
%   | | else if ( actor(B) )
%   | | | then return -0.09249634961803586;  // std dev = 6.23e-08, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
%   | | | else return 0.3064765004368812;  // std dev = 0.505, 36.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=35 */
%   else return -0.09269127618926049;  // std dev = 1.28e-07, 252.000 (wgt'ed) examples reached here.  /* #neg=252 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.25566205808550513;  // std dev = 0.015, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else return -0.09028768060091524;  // std dev = 0.312, 121.000 (wgt'ed) examples reached here.  /* #neg=121 */
%   else return -0.08518475138839678;  // std dev = 1.01e-07, 284.000 (wgt'ed) examples reached here.  /* #neg=284 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.078407225264551;  // std dev = 3.73e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else if ( genre(B, E) )
%   | | then return 0.20967653564106556;  // std dev = 0.000, 159.000 (wgt'ed) examples reached here.  /* #pos=159 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.21204525707113228;  // std dev = 3.65e-08, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | | else return -0.0851959819447254;  // std dev = 0.291, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */
%   else return -0.07877675473109144;  // std dev = 5.16e-08, 264.000 (wgt'ed) examples reached here.  /* #neg=264 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17090290424306895;  // std dev = 0.494, 163.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=159 */
%   | else if ( actor(A), director(B) )
%   | | then return 0.17877249127581243;  // std dev = 4.21e-08, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | else return -0.0762599471833523;  // std dev = 0.240, 109.000 (wgt'ed) examples reached here.  /* #neg=109 */
%   else return -0.07324622576333695;  // std dev = 1.01e-07, 292.000 (wgt'ed) examples reached here.  /* #neg=292 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1505269197094494;  // std dev = 0.336, 161.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=159 */
%   | else if ( genre(A, E) )
%   | | then return -0.06793478779769904;  // std dev = 4.56e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.15401408189598373;  // std dev = 1.05e-08, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | | else return -0.07000648593969169;  // std dev = 0.186, 101.000 (wgt'ed) examples reached here.  /* #neg=101 */
%   else return -0.06842697784420296;  // std dev = 0.000, 291.000 (wgt'ed) examples reached here.  /* #neg=291 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( genre(A, E) )
%   | | then return -0.09786592076262558;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return 0.13493836582232988;  // std dev = 5.16e-08, 159.000 (wgt'ed) examples reached here.  /* #pos=159 */
%   | else if ( genre(A, F) )
%   | | then return -0.06375740280846365;  // std dev = 2.63e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.13499789473729287;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | | else return -0.06462646841943953;  // std dev = 0.126, 83.000 (wgt'ed) examples reached here.  /* #neg=83 */
%   else return -0.06419184008202594;  // std dev = 1.18e-07, 302.000 (wgt'ed) examples reached here.  /* #neg=302 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063195
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.1 seconds
Total inference time: 1.0 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064845
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.366 seconds
Refined model CLL: -0.064845


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063195
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 6.119999999999999 seconds
Total inference time: 1.0 seconds
AUC ROC: 1.0
Total revision time: 6.119999999999999
Best scored revision CLL: -0.064845


Dataset: 4_cora_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 00:08:07
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063195, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 6.119999999999999, 'Inference time': 1.0, 'parameter_0.6': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.124903, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 1.341, 'Inference time': 1.168}}


Amount of data: 0.8
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;haswordauthor(E, C).;true;true
7;true,true,true;author(F, E), title(F, D).;false;false
7;true,true,false;title(G, D), venue(G, B).;false;false
7;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
7;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
7;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, B).;false;true
8;true,true,false;title(F, D), venue(F, A).;false;false
8;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
8;true,false,false;haswordvenue(A, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
8;false,true;haswordauthor(M, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;true,true;author(F, E), venue(F, B).;true;true
9;true,true,true;samebib(F, G), venue(G, A).;false;false
9;true,true,false;author(H, E), venue(H, A).;false;false
9;true,false;haswordtitle(I, C).;true;true
9;true,false,true;title(J, I), venue(J, A).;false;false
9;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995091;  // std dev = 1.08e-06, 211.000 (wgt'ed) examples reached here.  /* #pos=211 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.1781489350995126;  // std dev = 5.713, 150.000 (wgt'ed) examples reached here.  /* #neg=102 #pos=48 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.1418510649004876;  // std dev = 2.09e-07, 341.000 (wgt'ed) examples reached here.  /* #neg=341 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.699915123999398;  // std dev = 1.867, 216.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=211 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.11250690349834377;  // std dev = 5.889, 173.000 (wgt'ed) examples reached here.  /* #neg=125 #pos=48 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839222;  // std dev = 0.000, 375.000 (wgt'ed) examples reached here.  /* #neg=375 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.13204275621391043;  // std dev = 0.176, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else if ( movie(E, A) )
%   | | then return 0.34576510084186124;  // std dev = 0.381, 388.000 (wgt'ed) examples reached here.  /* #neg=129 #pos=259 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360625;  // std dev = 0.000, 391.000 (wgt'ed) examples reached here.  /* #neg=391 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4708771184558473;  // std dev = 0.674, 212.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=211 */
%   | else if ( genre(A, E) )
%   | | then return -0.09980991139316996;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.06198244040280325;  // std dev = 5.797, 160.000 (wgt'ed) examples reached here.  /* #neg=112 #pos=48 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783627;  // std dev = 6.18e-09, 354.000 (wgt'ed) examples reached here.  /* #neg=354 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1334549504375525;  // std dev = 0.303, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else if ( genre(B, E) )
%   | | then return 0.36015158639904027;  // std dev = 0.000, 211.000 (wgt'ed) examples reached here.  /* #pos=211 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.012854226538293281;  // std dev = 5.951, 183.000 (wgt'ed) examples reached here.  /* #neg=135 #pos=48 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.0926912761892609;  // std dev = 1.43e-07, 403.000 (wgt'ed) examples reached here.  /* #neg=403 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2768345169381396;  // std dev = 0.765, 213.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=211 */
%   | else if ( movie(E, A) )
%   | | then return 0.04229483744878962;  // std dev = 0.446, 169.000 (wgt'ed) examples reached here.  /* #neg=121 #pos=48 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 1.19e-07, 376.000 (wgt'ed) examples reached here.  /* #neg=376 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08391471475016364;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( genre(B, E) )
%   | | then return 0.22940174049569084;  // std dev = 3.07e-07, 211.000 (wgt'ed) examples reached here.  /* #pos=211 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.0382287951575128;  // std dev = 5.804, 161.000 (wgt'ed) examples reached here.  /* #neg=113 #pos=48 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109141;  // std dev = 6.99e-08, 348.000 (wgt'ed) examples reached here.  /* #neg=348 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1733980613964705;  // std dev = 1.366, 219.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=211 */
%   | else if ( movie(E, B) )
%   | | then return 0.03852211202795426;  // std dev = 5.747, 165.000 (wgt'ed) examples reached here.  /* #neg=117 #pos=48 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.07324622576333717;  // std dev = 5.58e-08, 373.000 (wgt'ed) examples reached here.  /* #neg=373 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1565815082446707;  // std dev = 0.999, 215.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=211 */
%   | else if ( genre(A, E) )
%   | | then return -0.08049050917064762;  // std dev = 9.13e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.04505902936898541;  // std dev = 5.713, 150.000 (wgt'ed) examples reached here.  /* #neg=102 #pos=48 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420329;  // std dev = 0.000, 379.000 (wgt'ed) examples reached here.  /* #neg=379 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return -0.37433659458563723;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return 0.14540885568408773;  // std dev = 0.000, 211.000 (wgt'ed) examples reached here.  /* #pos=211 */
%   | | else if ( genre(A, G) )
%   | | | then return -0.0747308555375791;  // std dev = 3.73e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else return 0.021718593608878307;  // std dev = 5.773, 157.000 (wgt'ed) examples reached here.  /* #neg=109 #pos=48 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.06419184008202562;  // std dev = 1.90e-07, 389.000 (wgt'ed) examples reached here.  /* #neg=389 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.131239
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.511 seconds
Total inference time: 1.083 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.977364
   AUC PR    = 0.85914
   CLL	      = -0.134992
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.814672
   F1        = 0.897872


Total scoring time: 1.513 seconds
Parameter learned model CLL: -0.134992


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 18, 0], 'true,false,true': [1.08e-06, 0, 211], 'true,false,false,true': [5.713, 102, 48], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.09e-07, 341, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.867, 5, 211], 'true,false,true': [0.0, 9, 0], 'true,false,false,true': [5.889, 125, 48], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 375, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.176, 17, 0], 'true,false,true': [0.381, 129, 259], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 391, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.674, 1, 211], 'true,false,true': [0.0, 11, 0], 'true,false,false,true': [5.797, 112, 48], 'true,false,false,false': [0.0, 0, 0], 'false,true': [6.18e-09, 354, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.303, 14, 0], 'true,false,true': [0.0, 0, 211], 'true,false,false,true': [5.951, 135, 48], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.43e-07, 403, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.765, 2, 211], 'true,false,true': [0.446, 121, 48], 'true,false,false': [0.0, 0, 0], 'false,true': [1.19e-07, 376, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 7, 0], 'true,false,true': [3.07e-07, 0, 211], 'true,false,false,true': [5.804, 113, 48], 'true,false,false,false': [0.0, 0, 0], 'false,true': [6.99e-08, 348, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [1.366, 8, 211], 'true,false,true': [5.747, 117, 48], 'true,false,false': [0.0, 0, 0], 'false,true': [5.58e-08, 373, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.999, 4, 211], 'true,false,true': [9.13e-09, 14, 0], 'true,false,false,true': [5.713, 102, 48], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 379, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true,true,false': 'genre(A, G)'}, {'true,true,true,true': [0.0, 2, 0], 'true,true,true,false': [0.0, 0, 211], 'true,true,false,true': [3.73e-09, 15, 0], 'true,true,false,false': [5.773, 109, 48], 'true,false': [0.0, 0, 0], 'false': [1.9e-07, 389, 0]}]]
[{'': [0.21637276265133581, 1.276268110419535e-16], 'true': [-3.0839528461809902e-18, 0.2027148349076549], 'true,false': [5.522701832448172e-15, 0.21760000000000082], 'true,false,false': [0.21760000000000082, nan], 'false': [1.276268110419535e-16, nan]}, {'': [0.1862164756401012, -1.2552921665095104e-16], 'true': [0.016142624113738527, 0.1932223622215064], 'true,false': [0.0, 0.2004744562130378], 'true,false,false': [0.2004744562130378, nan], 'false': [-1.2552921665095104e-16, nan]}, {'': [0.1481444993480509, -2.271556060614131e-17], 'true': [0.0018159399523997098, 0.1449728246267082], 'true,false': [0.1449728246267082, nan], 'false': [-2.271556060614131e-17, nan]}, {'': [0.13306951332953884, 3.888916809421452e-17], 'true': [0.0021456574688007153, 0.19806679342619712], 'true,false': [-2.523234146875356e-18, 0.21000000000000033], 'true,false,false': [0.21000000000000033, nan], 'false': [3.888916809421452e-17, nan]}, {'': [0.11964461926787441, 5.069008350645876e-17], 'true': [0.006548772068529716, 0.11987425609255017], 'true,false': [-8.923877960968082e-16, 0.19349637194302685], 'true,false,false': [0.19349637194302685, nan], 'false': [5.069008350645876e-17, nan]}, {'': [0.10324532482486558, 3.7794826370218094e-17], 'true': [0.0027501730732814988, 0.19923241455540788], 'true,false': [0.19923241455540788, nan], 'false': [3.7794826370218094e-17, nan]}, {'': [0.09866017510783498, 1.403730261020313e-17], 'true': [-2.9738116731030977e-18, 0.099534725220611], 'true,false': [4.461938980484041e-16, 0.20925118629682476], 'true,false,false': [0.20925118629682476, nan], 'false': [1.403730261020313e-17, nan]}, {'': [0.09534218341295612, 8.334113857775973e-18], 'true': [0.008524541496326575, 0.20019801954519567], 'true,false': [0.20019801954519567, nan], 'false': [8.334113857775973e-18, nan]}, {'': [0.09295725238824347, -1.0311306191769264e-16], 'true': [0.004645491211797404, 0.2002551175608927], 'true,false': [5.9476233462061954e-18, 0.2175999999999995], 'true,false,false': [0.2175999999999995, nan], 'false': [-1.0311306191769264e-16, nan]}, {'': [0.09227940593087745, 9.247101798934466e-17], 'true': [0.09227940593087745, nan], 'true,true': [0.002512665268313081, 0.19448958863276536], 'true,true,false': [9.251858538542971e-19, 0.2122601322568874], 'true,true,true': [0.0, -2.104688198341529e-16]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, E).;true;true
9;true,true;genre(A, F).;true;true
9;true,false;genre(A, G).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995091;  // std dev = 1.08e-06, 211.000 (wgt'ed) examples reached here.  /* #pos=211 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.8581489350995121;  // std dev = 1.69e-07, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | | | else return -0.14185106490048763;  // std dev = 8.69e-08, 104.000 (wgt'ed) examples reached here.  /* #neg=104 */
%   else return -0.14185106490048746;  // std dev = 2.58e-07, 369.000 (wgt'ed) examples reached here.  /* #neg=369 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.7194734122109542;  // std dev = 2.23e-07, 78.000 (wgt'ed) examples reached here.  /* #pos=78 */
%   | | else return 0.7008355140328819;  // std dev = 0.124, 136.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=133 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.7194734122109548;  // std dev = 0.000, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | | | else return -0.12544463852839133;  // std dev = 0.000, 118.000 (wgt'ed) examples reached here.  /* #neg=118 */
%   else return -0.12544463852839224;  // std dev = 0.000, 395.000 (wgt'ed) examples reached here.  /* #neg=395 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1309735258069999;  // std dev = 0.145, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else if ( director(B), actor(A) )
%   | | then return 0.5577272965717014;  // std dev = 0.037, 259.000 (wgt'ed) examples reached here.  /* #pos=259 */
%   | | else return -0.11231637819360617;  // std dev = 9.31e-08, 122.000 (wgt'ed) examples reached here.  /* #neg=122 */
%   else return -0.11231637819360632;  // std dev = 0.000, 379.000 (wgt'ed) examples reached here.  /* #neg=379 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.4169395445674236;  // std dev = 2.15e-07, 78.000 (wgt'ed) examples reached here.  /* #pos=78 */
%   | | else if ( actor(A) )
%   | | | then return 0.4214773289819292;  // std dev = 2.06e-07, 133.000 (wgt'ed) examples reached here.  /* #pos=133 */
%   | | | else return -0.20229867125499404;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(A, E) )
%   | | then return -0.09990602060787747;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.4169395445674233;  // std dev = 0.000, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | | | else return -0.1015963294878364;  // std dev = 0.000, 134.000 (wgt'ed) examples reached here.  /* #neg=134 */
%   else return -0.10159632948783621;  // std dev = 1.35e-07, 360.000 (wgt'ed) examples reached here.  /* #neg=360 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.10019995431264385;  // std dev = 0.107, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else if ( genre(B, E) )
%   | | then return 0.32226259122939177;  // std dev = 0.022, 211.000 (wgt'ed) examples reached here.  /* #pos=211 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.3203227028512305;  // std dev = 0.000, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | | | else return -0.09269127618926096;  // std dev = 4.83e-08, 106.000 (wgt'ed) examples reached here.  /* #neg=106 */
%   else return -0.09269127618926101;  // std dev = 1.21e-07, 418.000 (wgt'ed) examples reached here.  /* #neg=418 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.25598531815864556;  // std dev = 0.021, 259.000 (wgt'ed) examples reached here.  /* #pos=259 */
%   | else return -0.08718245246640009;  // std dev = 0.144, 136.000 (wgt'ed) examples reached here.  /* #neg=136 */
%   else return -0.08518475138839678;  // std dev = 1.25e-07, 390.000 (wgt'ed) examples reached here.  /* #neg=390 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08849426827847913;  // std dev = 0.090, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else if ( genre(B, E) )
%   | | then return 0.21054624458790022;  // std dev = 0.016, 211.000 (wgt'ed) examples reached here.  /* #pos=211 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.20939149788579867;  // std dev = 5.96e-08, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | | | else return -0.07863190154977612;  // std dev = 1.05e-08, 123.000 (wgt'ed) examples reached here.  /* #neg=123 */
%   else return -0.07877675473109141;  // std dev = 1.10e-07, 386.000 (wgt'ed) examples reached here.  /* #neg=386 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.17751787870631264;  // std dev = 0.015, 259.000 (wgt'ed) examples reached here.  /* #pos=259 */
%   | else return -0.07534315388325392;  // std dev = 0.151, 158.000 (wgt'ed) examples reached here.  /* #neg=158 */
%   else return -0.07324622576333717;  // std dev = 5.16e-08, 376.000 (wgt'ed) examples reached here.  /* #neg=376 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1467110311506172;  // std dev = 0.620, 216.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=211 */
%   | else if ( genre(A, E) )
%   | | then return -0.06602630327381175;  // std dev = 3.73e-09, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.15245084956126245;  // std dev = 5.16e-08, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | | | else return -0.06817562923192975;  // std dev = 2.11e-08, 113.000 (wgt'ed) examples reached here.  /* #neg=113 */
%   else return -0.06842697784420328;  // std dev = 0.000, 374.000 (wgt'ed) examples reached here.  /* #neg=374 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( genre(A, E) )
%   | | then return -0.14445179993233015;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0.1351223242386205;  // std dev = 0.012, 211.000 (wgt'ed) examples reached here.  /* #pos=211 */
%   | else if ( genre(A, F) )
%   | | then return -0.06206948517882003;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.13377824120461143;  // std dev = 4.34e-08, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | | | else return -0.0639700287026291;  // std dev = 4.59e-08, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
%   else return -0.06419184008202572;  // std dev = 1.68e-07, 359.000 (wgt'ed) examples reached here.  /* #neg=359 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.06344
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.151 seconds
Total inference time: 0.932 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064599
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.487 seconds
Refined model CLL: -0.064599


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.06344
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 6.662 seconds
Total inference time: 0.932 seconds
AUC ROC: 1.0
Total revision time: 6.662
Best scored revision CLL: -0.064599


Dataset: 4_cora_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 00:08:16
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.06344, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 6.662, 'Inference time': 0.932, 'parameter_0.8': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.131239, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 1.511, 'Inference time': 1.083}}


Amount of data: 1.0
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;haswordauthor(E, C).;true;true
7;true,true,true;author(F, E), title(F, D).;false;false
7;true,true,false;title(G, D), venue(G, B).;false;false
7;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
7;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
7;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, B).;false;true
8;true,true,false;title(F, D), venue(F, A).;false;false
8;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
8;true,false,false;haswordvenue(A, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
8;false,true;haswordauthor(M, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;true,true;author(F, E), venue(F, B).;true;true
9;true,true,true;samebib(F, G), venue(G, A).;false;false
9;true,true,false;author(H, E), venue(H, A).;false;false
9;true,false;haswordtitle(I, C).;true;true
9;true,false,true;title(J, I), venue(J, A).;false;false
9;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995086;  // std dev = 1.08e-06, 265.000 (wgt'ed) examples reached here.  /* #pos=265 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.14736462137402326;  // std dev = 6.476, 204.000 (wgt'ed) examples reached here.  /* #neg=145 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048788;  // std dev = 0.000, 514.000 (wgt'ed) examples reached here.  /* #neg=514 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7069095750252423;  // std dev = 1.677, 269.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=265 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 7.45e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.12565467833393332;  // std dev = 6.489, 206.000 (wgt'ed) examples reached here.  /* #neg=147 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.1254446385283923;  // std dev = 0.000, 503.000 (wgt'ed) examples reached here.  /* #neg=503 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.15751691485313796;  // std dev = 0.175, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( movie(E, A) )
%   | | then return 0.3415624448447606;  // std dev = 0.380, 489.000 (wgt'ed) examples reached here.  /* #neg=165 #pos=324 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360583;  // std dev = 0.000, 493.000 (wgt'ed) examples reached here.  /* #neg=493 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.46337168574437065;  // std dev = 1.335, 269.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=265 */
%   | else if ( genre(A, E) )
%   | | then return -0.09754433090354855;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.021331877010590986;  // std dev = 6.628, 231.000 (wgt'ed) examples reached here.  /* #neg=172 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783545;  // std dev = 1.52e-08, 487.000 (wgt'ed) examples reached here.  /* #neg=487 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.13985043027225963;  // std dev = 0.408, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | else if ( genre(B, E) )
%   | | then return 0.36123852296975667;  // std dev = 5.53e-07, 265.000 (wgt'ed) examples reached here.  /* #pos=265 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.041695291062735104;  // std dev = 6.519, 211.000 (wgt'ed) examples reached here.  /* #neg=152 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.0926912761892614;  // std dev = 0.000, 487.000 (wgt'ed) examples reached here.  /* #neg=487 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.27270685177316456;  // std dev = 1.192, 270.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=265 */
%   | else if ( movie(E, A) )
%   | | then return 0.0167667145491701;  // std dev = 0.427, 237.000 (wgt'ed) examples reached here.  /* #neg=178 #pos=59 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 1.43e-07, 498.000 (wgt'ed) examples reached here.  /* #neg=498 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.15329165317105256;  // std dev = 0.505, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | else if ( genre(B, E) )
%   | | then return 0.23077540636597146;  // std dev = 1.33e-07, 265.000 (wgt'ed) examples reached here.  /* #pos=265 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.06851676070757153;  // std dev = 6.347, 186.000 (wgt'ed) examples reached here.  /* #neg=127 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109161;  // std dev = 7.88e-08, 430.000 (wgt'ed) examples reached here.  /* #neg=430 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18023510471878057;  // std dev = 1.231, 272.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=265 */
%   | else if ( movie(E, B) )
%   | | then return 0.02166308672897249;  // std dev = 6.489, 215.000 (wgt'ed) examples reached here.  /* #neg=156 #pos=59 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.07324622576333706;  // std dev = 1.10e-07, 471.000 (wgt'ed) examples reached here.  /* #neg=471 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1552192526265061;  // std dev = 1.169, 271.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=265 */
%   | else if ( genre(A, E) )
%   | | then return -0.07062886588701879;  // std dev = 3.73e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.008273779677840501;  // std dev = 6.618, 229.000 (wgt'ed) examples reached here.  /* #neg=170 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420355;  // std dev = 0.000, 502.000 (wgt'ed) examples reached here.  /* #neg=502 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return -0.35113188419713803;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.14552146520081594;  // std dev = 1.81e-07, 265.000 (wgt'ed) examples reached here.  /* #pos=265 */
%   | | else if ( genre(A, G) )
%   | | | then return -0.06613102784609629;  // std dev = 9.13e-09, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | | else return -9.108957234821961E-4;  // std dev = 6.592, 224.000 (wgt'ed) examples reached here.  /* #neg=165 #pos=59 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.06419184008202547;  // std dev = 2.27e-07, 452.000 (wgt'ed) examples reached here.  /* #neg=452 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.12296
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.838 seconds
Total inference time: 0.959 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.977686
   AUC PR    = 0.861626
   CLL	      = -0.127686
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.817901
   F1        = 0.89983


Total scoring time: 1.697 seconds
Parameter learned model CLL: -0.127686


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 17, 0], 'true,false,true': [1.08e-06, 0, 265], 'true,false,false,true': [6.476, 145, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 514, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.677, 4, 265], 'true,false,true': [7.45e-09, 13, 0], 'true,false,false,true': [6.489, 147, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 503, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.175, 10, 0], 'true,false,true': [0.38, 165, 324], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 493, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.335, 4, 265], 'true,false,true': [0.0, 14, 0], 'true,false,false,true': [6.628, 172, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.52e-08, 487, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.408, 23, 0], 'true,false,true': [5.53e-07, 0, 265], 'true,false,false,true': [6.519, 152, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 487, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [1.192, 5, 265], 'true,false,true': [0.427, 178, 59], 'true,false,false': [0.0, 0, 0], 'false,true': [1.43e-07, 498, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.505, 22, 0], 'true,false,true': [1.33e-07, 0, 265], 'true,false,false,true': [6.347, 127, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.88e-08, 430, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [1.231, 7, 265], 'true,false,true': [6.489, 156, 59], 'true,false,false': [0.0, 0, 0], 'false,true': [1.1e-07, 471, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [1.169, 6, 265], 'true,false,true': [3.73e-09, 15, 0], 'true,false,false,true': [6.618, 170, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 502, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true,true,false': 'genre(A, G)'}, {'true,true,true,true': [0.0, 4, 0], 'true,true,true,false': [1.81e-07, 0, 265], 'true,true,false,true': [9.13e-09, 18, 0], 'true,true,false,false': [6.592, 165, 59], 'true,false': [0.0, 0, 0], 'false': [2.27e-07, 452, 0]}]]
[{'': [0.22222222222222496, -8.29427318007899e-17], 'true': [-3.2653618371328133e-18, 0.21358331704256947], 'true,false': [4.397321081685148e-15, 0.2055699730872746], 'true,false,false': [0.2055699730872746, nan], 'false': [-8.29427318007899e-17, nan]}, {'': [0.18153795117142557, -1.2536912087218467e-16], 'true': [0.010457562819927529, 0.1957668827662784], 'true,false': [4.270088556250602e-18, 0.20437835799792406], 'true,false,false': [0.20437835799792406, nan], 'false': [-1.2536912087218467e-16, nan]}, {'': [0.14659020732780553, -1.0809473667750003e-17], 'true': [0.003064632771464493, 0.1445337033318965], 'true,false': [0.1445337033318965, nan], 'false': [-1.0809473667750003e-17, nan]}, {'': [0.1395501638893098, 2.316194236178971e-16], 'true': [0.006622745437699106, 0.18007049970531316], 'true,false': [0.0, 0.19017634602049988], 'true,false,false': [0.19017634602049988, nan], 'false': [2.316194236178971e-16, nan]}, {'': [0.1152265332792925, -2.0061524880290305e-17], 'true': [0.007243522827203602, 0.11448913348174539], 'true,false': [1.152956137271106e-15, 0.20143303160306442], 'true,false,false': [0.20143303160306442, nan], 'false': [-2.0061524880290305e-17, nan]}, {'': [0.10435760390290302, 4.102028846004594e-17], 'true': [0.00526629602016976, 0.18236192770472254], 'true,false': [0.18236192770472254, nan], 'false': [4.102028846004594e-17, nan]}, {'': [0.09625169758821753, 1.4458718460234597e-17], 'true': [0.011582251106473863, 0.09570361684991113], 'true,false': [6.70323335622736e-17, 0.21658573245461993], 'true,false,false': [0.21658573245461993, nan], 'false': [1.4458718460234597e-17, nan]}, {'': [0.09577158707758508, 2.5457343239812507e-17], 'true': [0.0055703993737496816, 0.19584250597993996], 'true,false': [0.19584250597993996, nan], 'false': [2.5457343239812507e-17, nan]}, {'': [0.094786071700512, -1.2031102099523608e-16], 'true': [0.0050410171021561916, 0.17972894917511056], 'true,false': [9.251858538542971e-19, 0.1912625617360458], 'true,false,false': [0.1912625617360458, nan], 'false': [-1.2031102099523608e-16, nan]}, {'': [0.09225161701133475, 1.1396979721815767e-16], 'true': [0.09225161701133475, nan], 'true,true': [0.0036133334591327833, 0.17987889429600107], 'true,true,false': [4.625929269271485e-18, 0.1940170599489808], 'true,true,true': [0.0, 1.2400981709020616e-16]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, E).;true;true
9;true,true;genre(A, F).;true;true
9;true,false;genre(A, G).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995086;  // std dev = 1.08e-06, 265.000 (wgt'ed) examples reached here.  /* #pos=265 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.8581489350995125;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.1418510649004881;  // std dev = 0.000, 164.000 (wgt'ed) examples reached here.  /* #neg=164 */
%   else return -0.14185106490048735;  // std dev = 2.42e-07, 465.000 (wgt'ed) examples reached here.  /* #neg=465 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.7194734122109546;  // std dev = 0.000, 102.000 (wgt'ed) examples reached here.  /* #pos=102 */
%   | | else return 0.6992358541094151;  // std dev = 0.129, 167.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=163 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.7194734122109543;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.12544463852839136;  // std dev = 4.21e-08, 156.000 (wgt'ed) examples reached here.  /* #neg=156 */
%   else return -0.12544463852839233;  // std dev = 0.000, 480.000 (wgt'ed) examples reached here.  /* #neg=480 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5578776374425014;  // std dev = 0.045, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.1141774568656703;  // std dev = 0.192, 180.000 (wgt'ed) examples reached here.  /* #neg=180 */
%   else return -0.11231637819360586;  // std dev = 0.000, 490.000 (wgt'ed) examples reached here.  /* #neg=490 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.4169029970137455;  // std dev = 2.31e-07, 102.000 (wgt'ed) examples reached here.  /* #pos=102 */
%   | | else if ( actor(A) )
%   | | | then return 0.4218307626798308;  // std dev = 0.000, 163.000 (wgt'ed) examples reached here.  /* #pos=163 */
%   | | | else return -0.20476207232944263;  // std dev = 7.45e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(A, E) )
%   | | then return -0.10142658634091163;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.4169029970137442;  // std dev = 1.74e-07, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.10142658634091178;  // std dev = 0.000, 161.000 (wgt'ed) examples reached here.  /* #neg=161 */
%   else return -0.10159632948783544;  // std dev = 3.38e-07, 489.000 (wgt'ed) examples reached here.  /* #neg=489 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.10872403982578377;  // std dev = 0.125, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else if ( genre(B, E) )
%   | | then return 0.32235368549278753;  // std dev = 0.026, 265.000 (wgt'ed) examples reached here.  /* #pos=265 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.3202979287241213;  // std dev = 2.98e-08, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.09254913349757393;  // std dev = 5.58e-08, 138.000 (wgt'ed) examples reached here.  /* #neg=138 */
%   else return -0.09269127618926143;  // std dev = 0.000, 494.000 (wgt'ed) examples reached here.  /* #neg=494 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.2560374212390839;  // std dev = 0.025, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.08883533668590705;  // std dev = 0.214, 172.000 (wgt'ed) examples reached here.  /* #neg=172 */
%   else return -0.08518475138839678;  // std dev = 1.50e-07, 505.000 (wgt'ed) examples reached here.  /* #neg=505 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09013981555010141;  // std dev = 0.141, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | else if ( genre(B, E) )
%   | | then return 0.21059193736659162;  // std dev = 0.020, 265.000 (wgt'ed) examples reached here.  /* #pos=265 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.2093681365179609;  // std dev = 2.98e-08, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.07840022729273957;  // std dev = 1.49e-08, 165.000 (wgt'ed) examples reached here.  /* #neg=165 */
%   else return -0.07877675473109202;  // std dev = 1.38e-07, 492.000 (wgt'ed) examples reached here.  /* #neg=492 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.17754491851683935;  // std dev = 0.019, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.07567349909365637;  // std dev = 0.175, 175.000 (wgt'ed) examples reached here.  /* #neg=175 */
%   else return -0.07324622576333686;  // std dev = 1.67e-07, 509.000 (wgt'ed) examples reached here.  /* #neg=509 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14600942135732342;  // std dev = 0.733, 272.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=265 */
%   | else if ( genre(A, E) )
%   | | then return -0.06621912779515314;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.15243214086232648;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.06796623890375977;  // std dev = 0.000, 148.000 (wgt'ed) examples reached here.  /* #neg=148 */
%   else return -0.06842697784420354;  // std dev = 0.000, 497.000 (wgt'ed) examples reached here.  /* #neg=497 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( genre(A, E) )
%   | | then return -0.14443678938619103;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.1352280560005612;  // std dev = 0.014, 265.000 (wgt'ed) examples reached here.  /* #pos=265 */
%   | else if ( genre(A, F) )
%   | | then return -0.06224026890941559;  // std dev = 7.45e-09, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.13376363013203396;  // std dev = 4.21e-08, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.06378517412484427;  // std dev = 2.36e-08, 151.000 (wgt'ed) examples reached here.  /* #neg=151 */
%   else return -0.06419184008202537;  // std dev = 2.46e-07, 504.000 (wgt'ed) examples reached here.  /* #neg=504 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063403
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.582 seconds
Total inference time: 1.001 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064558
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.614 seconds
Refined model CLL: -0.064558


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063403
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 7.731 seconds
Total inference time: 1.001 seconds
AUC ROC: 1.0
Total revision time: 7.731
Best scored revision CLL: -0.064558


Dataset: 4_cora_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 00:08:27
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063403, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 7.731, 'Inference time': 1.001, 'parameter_1.0': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.12296, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 1.838, 'Inference time': 0.959}}


Starting fold 3

Target train facts examples: 737
Target train pos examples: 204
Target train neg examples: 10693

Target test facts examples: 341
Target test pos	 examples: 178
Target test neg examples: 3543

Amount of data: 0.2
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;haswordauthor(E, C).;true;true
7;true,true,true;author(F, E), title(F, D).;false;false
7;true,true,false;title(G, D), venue(G, B).;false;false
7;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
7;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
7;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, B).;false;true
8;true,true,false;title(F, D), venue(F, A).;false;false
8;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
8;true,false,false;haswordvenue(A, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
8;false,true;haswordauthor(M, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;true,true;author(F, E), venue(F, B).;true;true
9;true,true,true;samebib(F, G), venue(G, A).;false;false
9;true,true,false;author(H, E), venue(H, A).;false;false
9;true,false;haswordtitle(I, C).;true;true
9;true,false,true;title(J, I), venue(J, A).;false;false
9;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995117;  // std dev = 2.46e-07, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.14185106490048774;  // std dev = 1.49e-08, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048768;  // std dev = 4.59e-08, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.719473412210955;  // std dev = 0.000, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.12544463852839138;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839158;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( movie(E, A) )
%   | | then return 0.3915951802515937;  // std dev = 0.287, 53.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=40 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.1123163781936063;  // std dev = 3.49e-08, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.45779627720743254;  // std dev = 1.12e-07, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return -0.15766563019934862;  // std dev = 1.05e-08, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.1015963294878362;  // std dev = 5.10e-09, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.10159632948783628;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.3481879564776516;  // std dev = 0.000, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.13783775663354902;  // std dev = 2.11e-08, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926107;  // std dev = 0.000, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.27384489590399147;  // std dev = 3.65e-08, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | else if ( movie(E, A) )
%   | | then return -0.12225963380810491;  // std dev = 5.10e-09, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839679;  // std dev = 1.83e-08, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.3307822503981778;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.22286521066228454;  // std dev = 0.000, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.1097337553008999;  // std dev = 5.27e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109165;  // std dev = 4.15e-08, 76.000 (wgt'ed) examples reached here.  /* #neg=76 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1866521933923284;  // std dev = 0.000, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | else if ( movie(E, B) )
%   | | then return -0.09579884101987898;  // std dev = 0.052, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.07324622576333704;  // std dev = 0.000, 77.000 (wgt'ed) examples reached here.  /* #neg=77 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1487440232079208;  // std dev = 0.454, 41.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=40 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return -0.09120613438581986;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420267;  // std dev = 3.73e-09, 76.000 (wgt'ed) examples reached here.  /* #neg=76 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.1409637829115334;  // std dev = 1.05e-08, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | else if ( genre(A, G) )
%   | | | then return -0.055721812470910646;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return -0.08392287975762618;  // std dev = 1.58e-08, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.06419184008202625;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */


Results
   AUC ROC   = 0.97199
   AUC PR    = 0.81824
   CLL	      = -0.105593
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.840391


Total learning time: 0.804 seconds
Total inference time: 1.088 seconds
AUC ROC: 0.97199


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.068601
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.907 seconds
Parameter learned model CLL: -0.068601


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 2, 0], 'true,false,true': [2.46e-07, 0, 40], 'true,false,false,true': [1.49e-08, 23, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [4.59e-08, 44, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 40], 'true,false,true': [0.0, 2, 0], 'true,false,false,true': [0.0, 20, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 56, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.287, 13, 40], 'true,false,false': [0.0, 0, 0], 'false,true': [3.49e-08, 53, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.12e-07, 0, 40], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.05e-08, 13, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.1e-09, 61, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.0, 0, 40], 'true,false,false,true': [2.11e-08, 27, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 53, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [3.65e-08, 0, 40], 'true,false,true': [5.1e-09, 30, 0], 'true,false,false': [0.0, 0, 0], 'false,true': [1.83e-08, 62, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.0, 0, 40], 'true,false,false,true': [5.27e-09, 16, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [4.15e-08, 76, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 40], 'true,false,true': [0.052, 21, 0], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 77, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.454, 1, 40], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 16, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [3.73e-09, 76, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true,true,false': 'genre(A, G)'}, {'true,true,true,true': [0.0, 0, 0], 'true,true,true,false': [1.05e-08, 0, 40], 'true,true,false,true': [0.0, 1, 0], 'true,true,false,false': [1.58e-08, 23, 0], 'true,false': [0.0, 0, 0], 'false': [0.0, 59, 0]}]]
[{'': [0.23668639053254525, 4.794144879063176e-17], 'true': [0.0, 0.2317964222726136], 'true,false': [1.5099033134902129e-15, 9.654113257610057e-18], 'false': [4.794144879063176e-17, nan], 'true,false,false': [9.654113257610057e-18, nan]}, {'': [0.16342875415435903, -3.766828119263924e-17], 'true': [-8.881784197001252e-16, -2.523234146875356e-18], 'true,false': [0.0, 0.0], 'true,false,false': [0.0, nan], 'false': [-3.766828119263924e-17, nan]}, {'': [0.08561323428154793, 2.3042364662031552e-17], 'true': [0.0, 0.08252622908876875], 'true,false': [0.08252622908876875, nan], 'false': [2.3042364662031552e-17, nan]}, {'': [0.07012194621707842, 2.7300566179307128e-17], 'true': [3.108624468950438e-16, 8.540177112501205e-18], 'false': [2.7300566179307128e-17, nan], 'true,false': [nan, 8.540177112501205e-18], 'true,false,false': [8.540177112501205e-18, nan]}, {'': [0.0569304438524768, -3.142140635731575e-18], 'true': [0.0, 0.05683196108480092], 'true,false': [-6.661338147750939e-17, 1.644774851296528e-17], 'true,false,false': [1.644774851296528e-17, nan], 'false': [-3.142140635731575e-18, nan]}, {'': [0.03842419554084263, 5.3720468933475315e-18], 'true': [3.3306690738754695e-17, 2.590520390792032e-17], 'true,false': [2.590520390792032e-17, nan], 'false': [5.3720468933475315e-18, nan]}, {'': [0.025805154085184027, 2.2642706423276218e-17], 'true': [0.0, 0.022575933093832493], 'true,false': [-6.661338147750939e-17, 1.734723475976807e-18], 'false': [2.2642706423276218e-17, nan], 'true,false,false': [1.734723475976807e-18, nan]}, {'': [0.01805360580539777, -4.325544251786324e-18], 'true': [0.0, 0.00012759895069720475], 'true,false': [0.00012759895069720475, nan], 'false': [-4.325544251786324e-18, nan]}, {'': [0.0152412181398353, 1.460819769243627e-17], 'true': [0.0050273044431021685, 0.0], 'false': [1.460819769243627e-17, nan], 'true,false': [nan, 0.0], 'true,false,false': [0.0, nan]}, {'': [0.011741648194458745, -3.293034395074617e-18], 'true': [0.011741648194458745, nan], 'true,true': [2.7755575615628915e-18, 3.175677866412013e-05], 'true,true,false': [0.0, 1.0860877414811314e-17], 'true,true,true': [nan, 2.7755575615628915e-18]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, E).;true;true
9;true,false;genre(A, G).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995117;  // std dev = 2.46e-07, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   else return -0.14185106490048766;  // std dev = 5.96e-08, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.719473412210955;  // std dev = 0.000, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | else if ( genre(A, E) )
%   | | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.12544463852839138;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   else return -0.12544463852839152;  // std dev = 0.000, 74.000 (wgt'ed) examples reached here.  /* #neg=74 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.11231637819360636;  // std dev = 1.18e-08, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else return 0.5553664367462842;  // std dev = 1.40e-07, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   else return -0.11231637819360628;  // std dev = 4.59e-08, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.4175135841583098;  // std dev = 4.21e-08, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.39514958542811596;  // std dev = 0.120, 30.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */
%   | else return -0.10159632948783635;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   else return -0.10159632948783621;  // std dev = 4.08e-08, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then if ( female(A) )
%   | | | then return 0.3207118471601497;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.3256033822876317;  // std dev = 0.000, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | else return -0.09269127618926098;  // std dev = 0.000, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   else return -0.09269127618926107;  // std dev = 0.000, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.2551722425694894;  // std dev = 2.11e-08, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.25850722935645654;  // std dev = 3.33e-08, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | else if ( female(B) )
%   | | then return -0.08518475138839687;  // std dev = 3.73e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return -0.08703046454642702;  // std dev = 0.007, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else return -0.08518475138839679;  // std dev = 1.67e-08, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.10616963545315462;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then if ( female(A) )
%   | | | then return 0.20975771563253567;  // std dev = 1.97e-08, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.21211075154420644;  // std dev = 2.58e-08, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | else return -0.07870468643862288;  // std dev = 0.000340, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   else return -0.07877675473109169;  // std dev = 3.33e-08, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.17709649774527736;  // std dev = 7.45e-09, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.17882042353567087;  // std dev = 2.11e-08, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | else if ( female(B) )
%   | | then if ( female(A) )
%   | | | then return -0.07325111799713803;  // std dev = 3.73e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return -0.08261807830126155;  // std dev = 0.026, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return -0.07312591968516943;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   else return -0.07324622576333704;  // std dev = 0.000, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.15274385809367094;  // std dev = 7.45e-09, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.1540503746602538;  // std dev = 3.33e-08, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | else if ( female(B), actor(A) )
%   | | then return -0.06820823992023237;  // std dev = 0.001, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else if ( female(A) )
%   | | | then return -0.06832166138642864;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return -0.07069597621798993;  // std dev = 0.020, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else return -0.06842697784420268;  // std dev = 1.67e-08, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.13400703000801117;  // std dev = 5.27e-09, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.1350261828200714;  // std dev = 1.83e-08, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | else if ( genre(A, E) )
%   | | then return -0.08467417879568412;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.06399420597118968;  // std dev = 0.000906, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   else return -0.06419184008202625;  // std dev = 0.000, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */


Results
   AUC ROC   = 0.995299
   AUC PR    = 0.922374
   CLL	      = -0.103224
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.840391


Total learning time: 1.169 seconds
Total inference time: 0.993 seconds
AUC ROC: 0.995299


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064295
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.846 seconds
Refined model CLL: -0.064295


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.995299
   AUC PR    = 0.922374
   CLL	      = -0.103224
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.840391


Total learning time: 3.726 seconds
Total inference time: 0.993 seconds
AUC ROC: 0.995299
Total revision time: 3.726
Best scored revision CLL: -0.064295


Dataset: 4_cora_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 00:08:33
{'AUC ROC': 0.995299, 'AUC PR': 0.922374, 'CLL': -0.103224, 'Precision': [1.0, 0.5], 'Recall': 0.724719, 'F1': 0.840391, 'Learning time': 3.726, 'Inference time': 0.993, 'parameter_0.2': {'AUC ROC': 0.97199, 'AUC PR': 0.81824, 'CLL': -0.105593, 'Precision': [1.0, 0.5], 'Recall': 0.724719, 'F1': 0.840391, 'Learning time': 0.804, 'Inference time': 1.088}}


Amount of data: 0.4
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;haswordauthor(E, C).;true;true
7;true,true,true;author(F, E), title(F, D).;false;false
7;true,true,false;title(G, D), venue(G, B).;false;false
7;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
7;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
7;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, B).;false;true
8;true,true,false;title(F, D), venue(F, A).;false;false
8;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
8;true,false,false;haswordvenue(A, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
8;false,true;haswordauthor(M, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;true,true;author(F, E), venue(F, B).;true;true
9;true,true,true;samebib(F, G), venue(G, A).;false;false
9;true,true,false;author(H, E), venue(H, A).;false;false
9;true,false;haswordtitle(I, C).;true;true
9;true,false,true;title(J, I), venue(J, A).;false;false
9;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995125;  // std dev = 0.000, 78.000 (wgt'ed) examples reached here.  /* #pos=78 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.07042249347191633;  // std dev = 1.669, 42.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048763;  // std dev = 8.69e-08, 96.000 (wgt'ed) examples reached here.  /* #neg=96 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109538;  // std dev = 2.23e-07, 78.000 (wgt'ed) examples reached here.  /* #pos=78 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.07992141551573503;  // std dev = 1.685, 56.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839127;  // std dev = 0.000, 125.000 (wgt'ed) examples reached here.  /* #neg=125 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360638;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( movie(E, A) )
%   | | then return 0.3201731796028243;  // std dev = 0.335, 126.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=81 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360621;  // std dev = 8.16e-08, 111.000 (wgt'ed) examples reached here.  /* #neg=111 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4755705853412521;  // std dev = 0.000, 78.000 (wgt'ed) examples reached here.  /* #pos=78 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783633;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.09714030768503354;  // std dev = 1.673, 45.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783634;  // std dev = 0.000, 114.000 (wgt'ed) examples reached here.  /* #neg=114 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926098;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.36046047537542136;  // std dev = 0.000, 78.000 (wgt'ed) examples reached here.  /* #pos=78 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.08970736103614889;  // std dev = 1.678, 49.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926076;  // std dev = 7.88e-08, 136.000 (wgt'ed) examples reached here.  /* #neg=136 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.28214902811200654;  // std dev = 0.000, 78.000 (wgt'ed) examples reached here.  /* #pos=78 */
%   | else if ( movie(E, A) )
%   | | then return -0.06146876285206409;  // std dev = 0.266, 39.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=3 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.0851847513883968;  // std dev = 6.50e-08, 121.000 (wgt'ed) examples reached here.  /* #neg=121 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.0805151316352162;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.22864544276032966;  // std dev = 0.000, 78.000 (wgt'ed) examples reached here.  /* #pos=78 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.07006273800963245;  // std dev = 1.677, 48.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.0787767547310916;  // std dev = 5.77e-08, 100.000 (wgt'ed) examples reached here.  /* #neg=100 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1908307710040904;  // std dev = 0.000, 78.000 (wgt'ed) examples reached here.  /* #pos=78 */
%   | else if ( movie(E, B) )
%   | | then return -0.033537480297768256;  // std dev = 1.650, 34.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=3 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.07324622576333713;  // std dev = 3.94e-08, 118.000 (wgt'ed) examples reached here.  /* #neg=118 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.16308488335444737;  // std dev = 6.32e-08, 78.000 (wgt'ed) examples reached here.  /* #pos=78 */
%   | else if ( genre(A, E) )
%   | | then return -0.07246538855463582;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.0644927243014008;  // std dev = 1.682, 53.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420265;  // std dev = 5.27e-09, 131.000 (wgt'ed) examples reached here.  /* #neg=131 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.14202928324652025;  // std dev = 0.000, 78.000 (wgt'ed) examples reached here.  /* #pos=78 */
%   | | else if ( genre(A, G) )
%   | | | then return -0.0677430595995042;  // std dev = 1.32e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return -0.044630957296294474;  // std dev = 1.671, 43.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=3 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.06419184008202626;  // std dev = 3.49e-08, 123.000 (wgt'ed) examples reached here.  /* #neg=123 */


Results
   AUC ROC   = 0.97199
   AUC PR    = 0.81824
   CLL	      = -0.108962
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.840391


Total learning time: 1.002 seconds
Total inference time: 0.976 seconds
AUC ROC: 0.97199


Results scoring model
   AUC ROC   = 0.995246
   AUC PR    = 0.972737
   CLL	      = -0.079038
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.962963
   F1        = 0.981132


Total scoring time: 1.091 seconds
Parameter learned model CLL: -0.079038


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 5, 0], 'true,false,true': [0.0, 0, 78], 'true,false,false,true': [1.669, 39, 3], 'true,false,false,false': [0.0, 0, 0], 'false,true': [8.69e-08, 96, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [2.23e-07, 0, 78], 'true,false,true': [0.0, 5, 0], 'true,false,false,true': [1.685, 53, 3], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 125, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 5, 0], 'true,false,true': [0.335, 45, 81], 'true,false,false': [0.0, 0, 0], 'false,true': [8.16e-08, 111, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 78], 'true,false,true': [0.0, 3, 0], 'true,false,false,true': [1.673, 42, 3], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 114, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 4, 0], 'true,false,true': [0.0, 0, 78], 'true,false,false,true': [1.678, 46, 3], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.88e-08, 136, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 78], 'true,false,true': [0.266, 36, 3], 'true,false,false': [0.0, 0, 0], 'false,true': [6.5e-08, 121, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 4, 0], 'true,false,true': [0.0, 0, 78], 'true,false,false,true': [1.677, 45, 3], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.77e-08, 100, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 78], 'true,false,true': [1.65, 31, 3], 'true,false,false': [0.0, 0, 0], 'false,true': [3.94e-08, 118, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [6.32e-08, 0, 78], 'true,false,true': [0.0, 3, 0], 'true,false,false,true': [1.682, 50, 3], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.27e-09, 131, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true,true,false': 'genre(A, G)'}, {'true,true,true,true': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 78], 'true,true,false,true': [1.32e-09, 3, 0], 'true,true,false,false': [1.671, 40, 3], 'true,false': [0.0, 0, 0], 'false': [3.49e-08, 123, 0]}]]
[{'': [0.2280960000000015, 7.864079757761526e-17], 'true': [-2.7755575615628915e-18, 0.21937500000000168], 'true,false': [-1.002047447866808e-15, 0.06632653061224475], 'true,false,false': [0.06632653061224475, nan], 'false': [7.864079757761526e-17, nan]}, {'': [0.17933589812870093, -1.7763568394002505e-18], 'true': [6.376665577334232e-16, 0.04670160990185373], 'true,false': [0.0, 0.05070153061224498], 'true,false,false': [0.05070153061224498, nan], 'false': [-1.7763568394002505e-18, nan]}, {'': [0.11479361884922426, 6.00120553851436e-17], 'true': [0.0, 0.1122097144057724], 'true,false': [0.1122097144057724, nan], 'false': [6.00120553851436e-17, nan]}, {'': [0.09964886043386481, -1.1686558153949016e-17], 'true': [-2.7328566760003855e-16, 0.058334496778468685], 'true,false': [-1.1564823173178713e-18, 0.062222222222222394], 'true,false,false': [0.062222222222222394, nan], 'false': [-1.1686558153949016e-17, nan]}, {'': [0.07036542527236114, 4.5715065719859385e-17], 'true': [0.0, 0.07019690623959429], 'true,false': [-6.148927521000867e-16, 0.05747605164514775], 'true,false,false': [0.05747605164514775, nan], 'false': [4.5715065719859385e-17, nan]}, {'': [0.04986015373553793, 3.4866508211368553e-17], 'true': [-6.832141690000964e-17, 0.07086500369526161], 'true,false': [0.07086500369526161, nan], 'false': [3.4866508211368553e-17, nan]}, {'': [0.043167533911293784, 3.3306690738754695e-17], 'true': [0.0, 0.043363523888720196], 'true,false': [-3.416070845000482e-17, 0.05859374999999987], 'true,false,false': [0.05859374999999987, nan], 'false': [3.3306690738754695e-17, nan]}, {'': [0.03494968974167177, 1.3172137580298468e-17], 'true': [-1.3094938239168513e-16, 0.0800694008890955], 'true,false': [0.0800694008890955, nan], 'false': [1.3172137580298468e-17, nan]}, {'': [0.03376837655526819, 2.796745023864898e-17], 'true': [5.124106267500723e-17, 0.05054230631836975], 'true,false': [-1.1564823173178713e-18, 0.053399786400854334], 'true,false,false': [0.053399786400854334, nan], 'false': [2.796745023864898e-17, nan]}, {'': [0.03077996082964639, 9.92882379746075e-18], 'true': [0.03077996082964639, nan], 'true,true': [-5.408778837917429e-17, 0.060699905888211884], 'true,true,false': [5.782411586589357e-19, 0.06489994591671164], 'true,true,true': [nan, -5.408778837917429e-17]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, E).;true;true
9;true,false;genre(A, G).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995125;  // std dev = 0.000, 78.000 (wgt'ed) examples reached here.  /* #pos=78 */
%   | | else if ( actor(B) )
%   | | | then return -0.1418510649004877;  // std dev = 3.65e-08, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | | | else return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return -0.14185106490048763;  // std dev = 8.16e-08, 109.000 (wgt'ed) examples reached here.  /* #neg=109 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109538;  // std dev = 2.23e-07, 78.000 (wgt'ed) examples reached here.  /* #pos=78 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( actor(B) )
%   | | | then return -0.12544463852839136;  // std dev = 1.05e-08, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | | | else return 0.7194734122109545;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return -0.12544463852839133;  // std dev = 0.000, 112.000 (wgt'ed) examples reached here.  /* #neg=112 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( actor(B) )
%   | | then return -0.11231637819360638;  // std dev = 0.000, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
%   | | else return 0.5553664367462836;  // std dev = 3.42e-07, 81.000 (wgt'ed) examples reached here.  /* #pos=81 */
%   else return -0.1123163781936062;  // std dev = 7.74e-08, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.41751358415831047;  // std dev = 0.000, 78.000 (wgt'ed) examples reached here.  /* #pos=78 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( actor(B) )
%   | | | then return -0.10159632948783635;  // std dev = 0.000, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | | | else return 0.4175135841583102;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return -0.1015963294878363;  // std dev = 2.58e-08, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926097;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( genre(B, E) )
%   | | then return 0.32071184716015005;  // std dev = 0.000, 78.000 (wgt'ed) examples reached here.  /* #pos=78 */
%   | | else if ( actor(B) )
%   | | | then return -0.09269127618926103;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
%   | | | else return 0.32071184716014967;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return -0.09269127618926076;  // std dev = 8.02e-08, 136.000 (wgt'ed) examples reached here.  /* #neg=136 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2551722425694895;  // std dev = 0.000, 78.000 (wgt'ed) examples reached here.  /* #pos=78 */
%   | else if ( actor(B) )
%   | | then return -0.0851847513883968;  // std dev = 2.24e-08, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | | else return 0.25517224256948945;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return -0.0851847513883968;  // std dev = 6.50e-08, 121.000 (wgt'ed) examples reached here.  /* #neg=121 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07877675473109177;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.20975771563253573;  // std dev = 0.000, 78.000 (wgt'ed) examples reached here.  /* #pos=78 */
%   | | else if ( actor(B) )
%   | | | then return -0.07877675473109179;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | | | else return 0.20975771563253576;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return -0.07877675473109157;  // std dev = 6.32e-08, 109.000 (wgt'ed) examples reached here.  /* #neg=109 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17709649774527716;  // std dev = 3.65e-08, 78.000 (wgt'ed) examples reached here.  /* #pos=78 */
%   | else if ( actor(B) )
%   | | then return -0.07324622576333704;  // std dev = 1.18e-08, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else return 0.17709649774527736;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return -0.07324622576333716;  // std dev = 3.33e-08, 122.000 (wgt'ed) examples reached here.  /* #neg=122 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.15274385809367055;  // std dev = 8.16e-08, 78.000 (wgt'ed) examples reached here.  /* #pos=78 */
%   | else if ( genre(A, E) )
%   | | then return -0.06842697784420272;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( actor(B) )
%   | | | then return -0.06842697784420274;  // std dev = 0.000, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | | | else return 0.15274385809367097;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return -0.06842697784420264;  // std dev = 5.77e-08, 122.000 (wgt'ed) examples reached here.  /* #neg=122 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13400703000801092;  // std dev = 5.37e-08, 78.000 (wgt'ed) examples reached here.  /* #pos=78 */
%   | else if ( genre(A, E) )
%   | | then return -0.0641918400820262;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( actor(B) )
%   | | | then return -0.06419184008202625;  // std dev = 0.000, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | | else return 0.13400703000801117;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return -0.06419184008202626;  // std dev = 0.000, 128.000 (wgt'ed) examples reached here.  /* #neg=128 */


Results
   AUC ROC   = 0.993085
   AUC PR    = 0.784141
   CLL	      = -0.099714
   Precision = 0.784141 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.879012


Total learning time: 1.279 seconds
Total inference time: 0.998 seconds
AUC ROC: 0.993085


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063865
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.053 seconds
Refined model CLL: -0.063865


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.993085
   AUC PR    = 0.784141
   CLL	      = -0.099714
   Precision = 0.784141 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.879012


Total learning time: 4.425 seconds
Total inference time: 0.998 seconds
AUC ROC: 0.993085
Total revision time: 4.425
Best scored revision CLL: -0.063865


Dataset: 4_cora_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 00:08:40
{'AUC ROC': 0.993085, 'AUC PR': 0.784141, 'CLL': -0.099714, 'Precision': [0.784141, 0.5], 'Recall': 1.0, 'F1': 0.879012, 'Learning time': 4.425, 'Inference time': 0.998, 'parameter_0.4': {'AUC ROC': 0.97199, 'AUC PR': 0.81824, 'CLL': -0.108962, 'Precision': [1.0, 0.5], 'Recall': 0.724719, 'F1': 0.840391, 'Learning time': 1.002, 'Inference time': 0.976}}


Amount of data: 0.6
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;haswordauthor(E, C).;true;true
7;true,true,true;author(F, E), title(F, D).;false;false
7;true,true,false;title(G, D), venue(G, B).;false;false
7;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
7;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
7;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, B).;false;true
8;true,true,false;title(F, D), venue(F, A).;false;false
8;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
8;true,false,false;haswordvenue(A, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
8;false,true;haswordauthor(M, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;true,true;author(F, E), venue(F, B).;true;true
9;true,true,true;samebib(F, G), venue(G, A).;false;false
9;true,true,false;author(H, E), venue(H, A).;false;false
9;true,false;haswordtitle(I, C).;true;true
9;true,false,true;title(J, I), venue(J, A).;false;false
9;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995107;  // std dev = 6.31e-07, 117.000 (wgt'ed) examples reached here.  /* #pos=117 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.07042249347191627;  // std dev = 2.155, 70.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=5 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048835;  // std dev = 0.000, 191.000 (wgt'ed) examples reached here.  /* #neg=191 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109552;  // std dev = 0.000, 117.000 (wgt'ed) examples reached here.  /* #pos=117 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.04874708137529923;  // std dev = 2.139, 59.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=5 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.1254446385283914;  // std dev = 0.000, 164.000 (wgt'ed) examples reached here.  /* #neg=164 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( movie(E, A) )
%   | | then return 0.3215088403918163;  // std dev = 0.337, 189.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=122 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360654;  // std dev = 0.000, 185.000 (wgt'ed) examples reached here.  /* #neg=185 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4752374781800341;  // std dev = 0.000, 117.000 (wgt'ed) examples reached here.  /* #pos=117 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.09368194779641668;  // std dev = 2.151, 67.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=5 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783648;  // std dev = 0.000, 162.000 (wgt'ed) examples reached here.  /* #neg=162 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.36022939031700674;  // std dev = 0.000, 117.000 (wgt'ed) examples reached here.  /* #pos=117 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.08803177837802097;  // std dev = 2.159, 74.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=5 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926062;  // std dev = 8.16e-08, 170.000 (wgt'ed) examples reached here.  /* #neg=170 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.27724325902461416;  // std dev = 0.558, 118.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=117 */
%   | else if ( movie(E, A) )
%   | | then return -0.06710297594085832;  // std dev = 0.262, 67.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=5 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 7.15e-08, 173.000 (wgt'ed) examples reached here.  /* #neg=173 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08009900167370433;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(B, E) )
%   | | then return 0.22937541360341768;  // std dev = 1.15e-07, 117.000 (wgt'ed) examples reached here.  /* #pos=117 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.06382324893053437;  // std dev = 2.154, 69.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=5 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109148;  // std dev = 8.56e-08, 163.000 (wgt'ed) examples reached here.  /* #neg=163 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.19135700184394755;  // std dev = 1.40e-07, 117.000 (wgt'ed) examples reached here.  /* #pos=117 */
%   | else if ( movie(E, B) )
%   | | then return -0.05391425651979334;  // std dev = 2.149, 71.000 (wgt'ed) examples reached here.  /* #neg=66 #pos=5 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.07324622576333671;  // std dev = 1.03e-07, 179.000 (wgt'ed) examples reached here.  /* #neg=179 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.16347809090799917;  // std dev = 0.000, 117.000 (wgt'ed) examples reached here.  /* #pos=117 */
%   | else if ( genre(A, E) )
%   | | then return -0.07076376491512401;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.03210252672763751;  // std dev = 2.132, 55.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=5 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420262;  // std dev = 5.59e-09, 164.000 (wgt'ed) examples reached here.  /* #neg=164 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.14233235398982555;  // std dev = 0.000, 117.000 (wgt'ed) examples reached here.  /* #pos=117 */
%   | | else if ( genre(A, G) )
%   | | | then return -0.06624960317751906;  // std dev = 1.86e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return -0.04816153526338789;  // std dev = 2.155, 70.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=5 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.06419184008202626;  // std dev = 0.000, 174.000 (wgt'ed) examples reached here.  /* #neg=174 */


Results
   AUC ROC   = 0.97199
   AUC PR    = 0.81824
   CLL	      = -0.109208
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.840391


Total learning time: 1.177 seconds
Total inference time: 1.046 seconds
AUC ROC: 0.97199


Results scoring model
   AUC ROC   = 0.994697
   AUC PR    = 0.968175
   CLL	      = -0.080615
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.959016
   F1        = 0.979079


Total scoring time: 1.341 seconds
Parameter learned model CLL: -0.080615


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 7, 0], 'true,false,true': [6.31e-07, 0, 117], 'true,false,false,true': [2.155, 65, 5], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 191, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 117], 'true,false,true': [0.0, 6, 0], 'true,false,false,true': [2.139, 54, 5], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 164, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 6, 0], 'true,false,true': [0.337, 67, 122], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 185, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 117], 'true,false,true': [0.0, 5, 0], 'true,false,false,true': [2.151, 62, 5], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 162, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 4, 0], 'true,false,true': [0.0, 0, 117], 'true,false,false,true': [2.159, 69, 5], 'true,false,false,false': [0.0, 0, 0], 'false,true': [8.16e-08, 170, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.558, 1, 117], 'true,false,true': [0.262, 62, 5], 'true,false,false': [0.0, 0, 0], 'false,true': [7.15e-08, 173, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [2.63e-09, 6, 0], 'true,false,true': [1.15e-07, 0, 117], 'true,false,false,true': [2.154, 64, 5], 'true,false,false,false': [0.0, 0, 0], 'false,true': [8.56e-08, 163, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [1.4e-07, 0, 117], 'true,false,true': [2.149, 66, 5], 'true,false,false': [0.0, 0, 0], 'false,true': [1.03e-07, 179, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 117], 'true,false,true': [0.0, 4, 0], 'true,false,false,true': [2.132, 50, 5], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.59e-09, 164, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true,true,false': 'genre(A, G)'}, {'true,true,true,true': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 117], 'true,true,false,true': [1.86e-09, 5, 0], 'true,true,false,false': [2.155, 65, 5], 'true,false': [0.0, 0, 0], 'false': [0.0, 174, 0]}]]
[{'': [0.23339355935806536, -2.2320714212359167e-16], 'true': [-7.93016446160826e-18, 0.2267722840229958], 'true,false': [3.4008883079115908e-15, 0.06632653061224505], 'true,false,false': [0.06632653061224505, nan], 'false': [-2.2320714212359167e-16, nan]}, {'': [0.16332584835631342, 0.0], 'true': [-1.1538728187557183e-15, 0.07089705030186401], 'true,false': [-2.3129646346357427e-18, 0.07756391841424883], 'true,false,false': [0.07756391841424883, nan], 'false': [0.0, nan]}, {'': [0.11560888562986826, -7.201446646217232e-18], 'true': [0.0, 0.1134881068207145], 'true,false': [0.1134881068207145, nan], 'false': [-7.201446646217232e-18, nan]}, {'': [0.10096004110890518, -6.990293118010245e-17], 'true': [-3.9474596431116675e-16, 0.06426607096832382], 'true,false': [0.0, 0.06905769659166851], 'true,false,false': [0.06905769659166851, nan], 'false': [-6.990293118010245e-17, nan]}, {'': [0.07218551167465598, 3.918434204559376e-17], 'true': [0.0, 0.07209766260350264], 'true,false': [-6.376665577334232e-16, 0.0630021913805699], 'true,false,false': [0.0630021913805699, nan], 'false': [3.918434204559376e-17, nan]}, {'': [0.05399529487048344, 2.9520381001593755e-17], 'true': [0.0026393027590589624, 0.06881196760057595], 'true,false': [0.06881196760057595, nan], 'false': [2.9520381001593755e-17, nan]}, {'': [0.04480732458895347, 4.495381572101861e-17], 'true': [1.1564823173178713e-18, 0.044993866909837206], 'true,false': [1.138690281666827e-16, 0.06721277042638128], 'true,false,false': [0.06721277042638128, nan], 'false': [4.495381572101861e-17, nan]}, {'': [0.03870363882695146, 5.954268735419834e-17], 'true': [1.6700790797780132e-16, 0.06504412543302633], 'true,false': [0.06504412543302633, nan], 'false': [5.954268735419834e-17, nan]}, {'': [0.03461253328692013, 3.114040191021781e-17], 'true': [-2.6569439905559303e-17, 0.07713606730141317], 'true,false': [0.0, 0.08264462809917339], 'true,false,false': [0.08264462809917339, nan], 'false': [3.114040191021781e-17, nan]}, {'': [0.032937077552955586, -5.742532885992189e-18], 'true': [0.032937077552955586, nan], 'true,true': [-7.211705117223239e-17, 0.06192511965948266], 'true,true,false': [6.938893903907229e-19, 0.06632653061224512], 'true,true,true': [nan, -7.211705117223239e-17]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, E).;true;true
9;true,false;genre(A, G).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995107;  // std dev = 6.31e-07, 117.000 (wgt'ed) examples reached here.  /* #pos=117 */
%   | | else if ( actor(B) )
%   | | | then return -0.14185106490048766;  // std dev = 6.14e-08, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.14185106490048824;  // std dev = 0.000, 170.000 (wgt'ed) examples reached here.  /* #neg=170 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.7194734122109551;  // std dev = 0.000, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | | else return 0.7077384392840187;  // std dev = 0.099, 72.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=71 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( actor(B) )
%   | | | then return -0.1254446385283916;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   | | | else return 0.7194734122109545;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.12544463852839155;  // std dev = 0.000, 184.000 (wgt'ed) examples reached here.  /* #neg=184 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( actor(B) )
%   | | then return -0.11231637819360628;  // std dev = 4.21e-08, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
%   | | else return 0.5570517297658617;  // std dev = 0.016, 122.000 (wgt'ed) examples reached here.  /* #pos=122 */
%   else return -0.11231637819360633;  // std dev = 7.60e-08, 160.000 (wgt'ed) examples reached here.  /* #neg=160 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.41883682092708524;  // std dev = 0.015, 117.000 (wgt'ed) examples reached here.  /* #pos=117 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( actor(B) )
%   | | | then return -0.10159632948783617;  // std dev = 4.47e-08, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
%   | | | else return 0.4171037847167117;  // std dev = 1.49e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.1015963294878365;  // std dev = 0.000, 175.000 (wgt'ed) examples reached here.  /* #neg=175 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.32160976059327584;  // std dev = 0.014, 117.000 (wgt'ed) examples reached here.  /* #pos=117 */
%   | | else if ( actor(B) )
%   | | | then return -0.09269127618926107;  // std dev = 1.49e-08, 87.000 (wgt'ed) examples reached here.  /* #neg=87 */
%   | | | else return 0.3204340371070876;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.09269127618926061;  // std dev = 8.82e-08, 187.000 (wgt'ed) examples reached here.  /* #neg=187 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.08518475138839679;  // std dev = 2.11e-08, 74.000 (wgt'ed) examples reached here.  /* #neg=74 */
%   | else return 0.2557523574527891;  // std dev = 0.012, 122.000 (wgt'ed) examples reached here.  /* #pos=122 */
%   else return -0.08518475138839678;  // std dev = 7.15e-08, 168.000 (wgt'ed) examples reached here.  /* #neg=168 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07877675473109177;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.21019635080063145;  // std dev = 0.010, 117.000 (wgt'ed) examples reached here.  /* #pos=117 */
%   | | else if ( actor(B) )
%   | | | then return -0.0787767547310917;  // std dev = 3.07e-08, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
%   | | | else return 0.2094963004569419;  // std dev = 5.27e-09, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.07877675473109147;  // std dev = 7.60e-08, 200.000 (wgt'ed) examples reached here.  /* #neg=200 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17741830593470684;  // std dev = 0.009, 117.000 (wgt'ed) examples reached here.  /* #pos=117 */
%   | else if ( actor(B) )
%   | | then return -0.07324622576333704;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   | | else return 0.1769047383734006;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.07324622576333671;  // std dev = 1.04e-07, 175.000 (wgt'ed) examples reached here.  /* #neg=175 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.15206606352441399;  // std dev = 5.16e-08, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | | else return 0.14673811297224637;  // std dev = 0.058, 72.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=71 */
%   | else if ( genre(A, E) )
%   | | then return -0.06842697784420272;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( actor(B) )
%   | | | then return -0.06842697784420268;  // std dev = 1.49e-08, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   | | | else return 0.15259837378433894;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.06842697784420262;  // std dev = 7.30e-08, 168.000 (wgt'ed) examples reached here.  /* #neg=168 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13468277800426;  // std dev = 0.010, 117.000 (wgt'ed) examples reached here.  /* #pos=117 */
%   | else if ( genre(A, E) )
%   | | then return -0.0641918400820262;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( actor(B) )
%   | | | then return -0.06419184008202625;  // std dev = 0.000, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
%   | | | else return 0.13389344241345635;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.06419184008202626;  // std dev = 0.000, 165.000 (wgt'ed) examples reached here.  /* #neg=165 */


Results
   AUC ROC   = 0.991725
   AUC PR    = 0.81335
   CLL	      = -0.099654
   Precision = 0.784141 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.879012


Total learning time: 1.629 seconds
Total inference time: 1.014 seconds
AUC ROC: 0.991725


Results scoring model
   AUC ROC   = 0.999906
   AUC PR    = 0.992533
   CLL	      = -0.064227
   Precision = 0.99187 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.995918


Total scoring time: 1.188 seconds
Refined model CLL: -0.064227


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.991725
   AUC PR    = 0.81335
   CLL	      = -0.099654
   Precision = 0.784141 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.879012


Total learning time: 5.335 seconds
Total inference time: 1.014 seconds
AUC ROC: 0.991725
Total revision time: 5.335
Best scored revision CLL: -0.064227


Dataset: 4_cora_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 00:08:48
{'AUC ROC': 0.991725, 'AUC PR': 0.81335, 'CLL': -0.099654, 'Precision': [0.784141, 0.5], 'Recall': 1.0, 'F1': 0.879012, 'Learning time': 5.335, 'Inference time': 1.014, 'parameter_0.6': {'AUC ROC': 0.97199, 'AUC PR': 0.81824, 'CLL': -0.109208, 'Precision': [1.0, 0.5], 'Recall': 0.724719, 'F1': 0.840391, 'Learning time': 1.177, 'Inference time': 1.046}}


Amount of data: 0.8
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;haswordauthor(E, C).;true;true
7;true,true,true;author(F, E), title(F, D).;false;false
7;true,true,false;title(G, D), venue(G, B).;false;false
7;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
7;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
7;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, B).;false;true
8;true,true,false;title(F, D), venue(F, A).;false;false
8;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
8;true,false,false;haswordvenue(A, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
8;false,true;haswordauthor(M, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;true,true;author(F, E), venue(F, B).;true;true
9;true,true,true;samebib(F, G), venue(G, A).;false;false
9;true,true,false;author(H, E), venue(H, A).;false;false
9;true,false;haswordtitle(I, C).;true;true
9;true,false,true;title(J, I), venue(J, A).;false;false
9;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995098;  // std dev = 9.68e-07, 156.000 (wgt'ed) examples reached here.  /* #pos=156 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.07185106490048768;  // std dev = 2.551, 100.000 (wgt'ed) examples reached here.  /* #neg=93 #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.1418510649004884;  // std dev = 0.000, 201.000 (wgt'ed) examples reached here.  /* #neg=201 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109563;  // std dev = 0.000, 156.000 (wgt'ed) examples reached here.  /* #pos=156 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.050974742978256396;  // std dev = 2.534, 85.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839186;  // std dev = 0.000, 248.000 (wgt'ed) examples reached here.  /* #neg=248 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.125116591566836;  // std dev = 0.109, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( movie(E, A) )
%   | | then return 0.30579085917966425;  // std dev = 0.342, 262.000 (wgt'ed) examples reached here.  /* #neg=99 #pos=163 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360685;  // std dev = 0.000, 248.000 (wgt'ed) examples reached here.  /* #neg=248 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4747929267617937;  // std dev = 0.683, 157.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=156 */
%   | else if ( genre(A, E) )
%   | | then return -0.10043393986968054;  // std dev = 3.73e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.08869111610664546;  // std dev = 2.542, 91.000 (wgt'ed) examples reached here.  /* #neg=84 #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783656;  // std dev = 0.000, 224.000 (wgt'ed) examples reached here.  /* #neg=224 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.13231223963351085;  // std dev = 0.182, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(B, E) )
%   | | then return 0.363962627382378;  // std dev = 0.000, 156.000 (wgt'ed) examples reached here.  /* #pos=156 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.06729913381507788;  // std dev = 2.529, 81.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926049;  // std dev = 7.15e-08, 227.000 (wgt'ed) examples reached here.  /* #neg=227 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2845162005389804;  // std dev = 0.000, 156.000 (wgt'ed) examples reached here.  /* #pos=156 */
%   | else if ( movie(E, A) )
%   | | then return -0.07746428364729928;  // std dev = 0.244, 110.000 (wgt'ed) examples reached here.  /* #neg=103 #pos=7 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 9.19e-08, 252.000 (wgt'ed) examples reached here.  /* #neg=252 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07567451934095047;  // std dev = 2.63e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( genre(B, E) )
%   | | then return 0.23028813439774906;  // std dev = 0.000, 156.000 (wgt'ed) examples reached here.  /* #pos=156 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.06650850573433695;  // std dev = 2.552, 101.000 (wgt'ed) examples reached here.  /* #neg=94 #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109143;  // std dev = 6.32e-08, 245.000 (wgt'ed) examples reached here.  /* #neg=245 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18564920953195374;  // std dev = 0.707, 158.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=156 */
%   | else if ( movie(E, B) )
%   | | then return -0.04273247203024895;  // std dev = 2.526, 90.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=7 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.07324622576333661;  // std dev = 1.30e-07, 216.000 (wgt'ed) examples reached here.  /* #neg=216 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.16155192492697418;  // std dev = 0.515, 157.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=156 */
%   | else if ( genre(A, E) )
%   | | then return -0.06779718368824147;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.03258713002334059;  // std dev = 2.523, 77.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420267;  // std dev = 1.86e-09, 242.000 (wgt'ed) examples reached here.  /* #neg=242 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.14378846615940363;  // std dev = 1.21e-07, 156.000 (wgt'ed) examples reached here.  /* #pos=156 */
%   | | else if ( genre(A, G) )
%   | | | then return -0.06363588134082866;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return -0.046327677863606594;  // std dev = 2.546, 95.000 (wgt'ed) examples reached here.  /* #neg=88 #pos=7 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.06419184008202625;  // std dev = 1.05e-08, 215.000 (wgt'ed) examples reached here.  /* #neg=215 */


Results
   AUC ROC   = 0.97199
   AUC PR    = 0.81824
   CLL	      = -0.108914
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.840391


Total learning time: 1.223 seconds
Total inference time: 1.071 seconds
AUC ROC: 0.97199


Results scoring model
   AUC ROC   = 0.994387
   AUC PR    = 0.965927
   CLL	      = -0.081133
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.957055
   F1        = 0.978056


Total scoring time: 1.503 seconds
Parameter learned model CLL: -0.081133


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 7, 0], 'true,false,true': [9.68e-07, 0, 156], 'true,false,false,true': [2.551, 93, 7], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 201, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 156], 'true,false,true': [0.0, 2, 0], 'true,false,false,true': [2.534, 78, 7], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 248, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.109, 9, 0], 'true,false,true': [0.342, 99, 163], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 248, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.683, 1, 156], 'true,false,true': [3.73e-09, 7, 0], 'true,false,false,true': [2.542, 84, 7], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 224, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.182, 5, 0], 'true,false,true': [0.0, 0, 156], 'true,false,false,true': [2.529, 74, 7], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.15e-08, 227, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 156], 'true,false,true': [0.244, 103, 7], 'true,false,false': [0.0, 0, 0], 'false,true': [9.19e-08, 252, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [2.63e-09, 7, 0], 'true,false,true': [0.0, 0, 156], 'true,false,false,true': [2.552, 94, 7], 'true,false,false,false': [0.0, 0, 0], 'false,true': [6.32e-08, 245, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.707, 2, 156], 'true,false,true': [2.526, 83, 7], 'true,false,false': [0.0, 0, 0], 'false,true': [1.3e-07, 216, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.515, 1, 156], 'true,false,true': [0.0, 14, 0], 'true,false,false,true': [2.523, 70, 7], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.86e-09, 242, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true,true,false': 'genre(A, G)'}, {'true,true,true,true': [0.0, 0, 0], 'true,true,true,false': [1.21e-07, 0, 156], 'true,true,false,true': [2.63e-09, 6, 0], 'true,true,false,false': [2.546, 88, 7], 'true,false': [0.0, 0, 0], 'false': [1.05e-08, 215, 0]}]]
[{'': [0.2356547008052791, -2.386150978298844e-16], 'true': [-7.93016446160826e-18, 0.23130798339844266], 'true,false': [6.012284687200848e-15, 0.06510000000000027], 'true,false,false': [0.06510000000000027, nan], 'false': [-2.386150978298844e-16, nan]}, {'': [0.16351845400364348, -7.699933880464796e-17], 'true': [-2.6417614534670392e-15, 0.07395822947970467], 'true,false': [0.0, 0.07557093425605578], 'true,false,false': [0.07557093425605578, nan], 'false': [-7.699933880464796e-17, nan]}, {'': [0.11875448562024811, -8.953411488912552e-17], 'true': [0.001310763699201652, 0.11662227659530178], 'true,false': [0.11662227659530178, nan], 'false': [-8.953411488912552e-17, nan]}, {'': [0.10252661075133215, -7.930164461608261e-17], 'true': [0.0029734665814543045, 0.06594321195870391], 'true,false': [1.982541115402065e-18, 0.07100591715976305], 'true,false,false': [0.07100591715976305, nan], 'false': [-7.930164461608261e-17, nan]}, {'': [0.07000078758988587, 2.249791151222784e-17], 'true': [0.006591839274766706, 0.06882368664434209], 'true,false': [-3.188332788667116e-16, 0.07895137936290182], 'true,false,false': [0.07895137936290182, nan], 'false': [2.249791151222784e-17, nan]}, {'': [0.05630558201697067, 3.348291661567932e-17], 'true': [-2.049642507000289e-16, 0.05931254873561929], 'true,false': [0.05931254873561929, nan], 'false': [3.348291661567932e-17, nan]}, {'': [0.04605894375136524, 1.6313481178165567e-17], 'true': [9.912705577010326e-19, 0.04636308239727202], 'true,false': [-1.1386902816668272e-17, 0.06450348005097532], 'true,false,false': [0.06450348005097532, nan], 'false': [1.6313481178165567e-17, nan]}, {'': [0.039808568667263365, 7.812680543658509e-17], 'true': [0.0031603395753388055, 0.0709167546784364], 'true,false': [0.0709167546784364, nan], 'false': [7.812680543658509e-17, nan]}, {'': [0.03603960204114544, 3.670158759091427e-18], 'true': [0.0016902175403273433, 0.07009145722793875], 'true,false': [-2.9738116731030977e-18, 0.08264462809917321], 'true,false,false': [0.08264462809917321, nan], 'false': [3.670158759091427e-18, nan]}, {'': [0.033952677676935036, 5.163828021512356e-19], 'true': [0.033952677676935036, nan], 'true,true': [9.394194823751324e-17, 0.06421684347468207], 'true,true,false': [1.1564823173178713e-18, 0.06825484764542938], 'true,true,true': [nan, 9.394194823751324e-17]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, E).;true;true
9;true,false;genre(A, G).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995098;  // std dev = 9.68e-07, 156.000 (wgt'ed) examples reached here.  /* #pos=156 */
%   | | else if ( actor(B) )
%   | | | then return -0.14185106490048766;  // std dev = 7.74e-08, 81.000 (wgt'ed) examples reached here.  /* #neg=81 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.14185106490048827;  // std dev = 0.000, 247.000 (wgt'ed) examples reached here.  /* #neg=247 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.7194734122109547;  // std dev = 8.43e-08, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   | | else return 0.7105795379926454;  // std dev = 0.086, 95.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=94 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( actor(B) )
%   | | | then return -0.1254446385283914;  // std dev = 0.000, 93.000 (wgt'ed) examples reached here.  /* #neg=93 */
%   | | | else return 0.7194734122109543;  // std dev = 2.11e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.1254446385283918;  // std dev = 0.000, 233.000 (wgt'ed) examples reached here.  /* #neg=233 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1350448938087579;  // std dev = 0.102, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( actor(B) )
%   | | then return -0.11231637819360622;  // std dev = 6.50e-08, 80.000 (wgt'ed) examples reached here.  /* #neg=80 */
%   | | else return 0.5566323281178994;  // std dev = 0.014, 163.000 (wgt'ed) examples reached here.  /* #pos=163 */
%   else return -0.1123163781936067;  // std dev = 0.000, 217.000 (wgt'ed) examples reached here.  /* #neg=217 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4185097543633287;  // std dev = 0.013, 156.000 (wgt'ed) examples reached here.  /* #pos=156 */
%   | else if ( genre(A, E) )
%   | | then return -0.0995404995365124;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( actor(B) )
%   | | | then return -0.10159632948783624;  // std dev = 4.71e-08, 94.000 (wgt'ed) examples reached here.  /* #neg=94 */
%   | | | else return 0.4172057566355374;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.10159632948783658;  // std dev = 0.000, 239.000 (wgt'ed) examples reached here.  /* #neg=239 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09096728917347396;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.32138767383722394;  // std dev = 0.012, 156.000 (wgt'ed) examples reached here.  /* #pos=156 */
%   | | else if ( actor(B) )
%   | | | then return -0.09269127618926107;  // std dev = 0.000, 80.000 (wgt'ed) examples reached here.  /* #neg=80 */
%   | | | else return 0.32050316329539186;  // std dev = 1.05e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.09269127618926053;  // std dev = 5.58e-08, 197.000 (wgt'ed) examples reached here.  /* #neg=197 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.2546142711183687;  // std dev = 0.000, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   | | else return 0.24552062254060045;  // std dev = 0.074, 96.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=94 */
%   | else if ( actor(B) )
%   | | then return -0.08497329648840737;  // std dev = 0.005, 97.000 (wgt'ed) examples reached here.  /* #neg=97 */
%   | | else return 0.25502984201518375;  // std dev = 7.45e-09, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.08518475138839678;  // std dev = 8.56e-08, 226.000 (wgt'ed) examples reached here.  /* #neg=226 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07742766190375115;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(B, E) )
%   | | then return 0.21116699820271706;  // std dev = 0.018, 156.000 (wgt'ed) examples reached here.  /* #pos=156 */
%   | | else if ( actor(B) )
%   | | | then return -0.0787921015867949;  // std dev = 0.000, 80.000 (wgt'ed) examples reached here.  /* #neg=80 */
%   | | | else return 0.2096571208014999;  // std dev = 7.45e-09, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.07877675473109143;  // std dev = 6.32e-08, 245.000 (wgt'ed) examples reached here.  /* #neg=245 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07323098667390661;  // std dev = 0.002, 83.000 (wgt'ed) examples reached here.  /* #neg=83 */
%   | else return 0.1780822806957041;  // std dev = 0.016, 163.000 (wgt'ed) examples reached here.  /* #pos=163 */
%   else return -0.07324622576333663;  // std dev = 1.24e-07, 207.000 (wgt'ed) examples reached here.  /* #neg=207 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.15212693660099427;  // std dev = 0.000, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   | | else if ( actor(A) )
%   | | | then return 0.15446159106861806;  // std dev = 1.07e-07, 94.000 (wgt'ed) examples reached here.  /* #pos=94 */
%   | | | else return -0.3334552258872172;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(A, E) )
%   | | then return -0.0673278151458935;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( actor(B) )
%   | | | then return -0.06844045133833836;  // std dev = 3.57e-08, 97.000 (wgt'ed) examples reached here.  /* #neg=97 */
%   | | | else return 0.15255085200280072;  // std dev = 5.27e-09, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.06842697784420261;  // std dev = 6.50e-08, 225.000 (wgt'ed) examples reached here.  /* #neg=225 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.13352522451587245;  // std dev = 3.94e-08, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   | | else return 0.1311445455184773;  // std dev = 0.041, 95.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=94 */
%   | else if ( genre(A, E) )
%   | | then return -0.06322116136771337;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( actor(B) )
%   | | | then return -0.06420372762353511;  // std dev = 3.33e-08, 78.000 (wgt'ed) examples reached here.  /* #neg=78 */
%   | | | else return 0.13385633510457295;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.06419184008202626;  // std dev = 1.49e-08, 243.000 (wgt'ed) examples reached here.  /* #neg=243 */


Results
   AUC ROC   = 0.991725
   AUC PR    = 0.81335
   CLL	      = -0.09693
   Precision = 0.784141 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.879012


Total learning time: 1.851 seconds
Total inference time: 0.994 seconds
AUC ROC: 0.991725


Results scoring model
   AUC ROC   = 0.99993
   AUC PR    = 0.994458
   CLL	      = -0.064146
   Precision = 0.993902 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.996942


Total scoring time: 1.4 seconds
Refined model CLL: -0.064146


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.991725
   AUC PR    = 0.81335
   CLL	      = -0.09693
   Precision = 0.784141 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.879012


Total learning time: 5.977 seconds
Total inference time: 0.994 seconds
AUC ROC: 0.991725
Total revision time: 5.977
Best scored revision CLL: -0.064146


Dataset: 4_cora_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 00:08:56
{'AUC ROC': 0.991725, 'AUC PR': 0.81335, 'CLL': -0.09693, 'Precision': [0.784141, 0.5], 'Recall': 1.0, 'F1': 0.879012, 'Learning time': 5.977, 'Inference time': 0.994, 'parameter_0.8': {'AUC ROC': 0.97199, 'AUC PR': 0.81824, 'CLL': -0.108914, 'Precision': [1.0, 0.5], 'Recall': 0.724719, 'F1': 0.840391, 'Learning time': 1.223, 'Inference time': 1.071}}


Amount of data: 1.0
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;haswordauthor(E, C).;true;true
7;true,true,true;author(F, E), title(F, D).;false;false
7;true,true,false;title(G, D), venue(G, B).;false;false
7;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
7;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
7;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, B).;false;true
8;true,true,false;title(F, D), venue(F, A).;false;false
8;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
8;true,false,false;haswordvenue(A, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
8;false,true;haswordauthor(M, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;true,true;author(F, E), venue(F, B).;true;true
9;true,true,true;samebib(F, G), venue(G, A).;false;false
9;true,true,false;author(H, E), venue(H, A).;false;false
9;true,false;haswordtitle(I, C).;true;true
9;true,false,true;title(J, I), venue(J, A).;false;false
9;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995093;  // std dev = 1.09e-06, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.050941973991396765;  // std dev = 3.015, 110.000 (wgt'ed) examples reached here.  /* #neg=100 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.1418510649004878;  // std dev = 1.23e-07, 306.000 (wgt'ed) examples reached here.  /* #neg=306 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.719473412210957;  // std dev = 0.000, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.05639725703939183;  // std dev = 3.034, 126.000 (wgt'ed) examples reached here.  /* #neg=116 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.125444638528392;  // std dev = 0.000, 299.000 (wgt'ed) examples reached here.  /* #neg=299 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12511659156683602;  // std dev = 0.109, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( movie(E, A) )
%   | | then return 0.3226864559486341;  // std dev = 0.339, 316.000 (wgt'ed) examples reached here.  /* #neg=112 #pos=204 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360697;  // std dev = 0.000, 287.000 (wgt'ed) examples reached here.  /* #neg=287 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4749438049817296;  // std dev = 0.000, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else if ( genre(A, E) )
%   | | then return -0.10043393986968052;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.07209832888427273;  // std dev = 3.003, 102.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783653;  // std dev = 0.000, 323.000 (wgt'ed) examples reached here.  /* #neg=323 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09171716827390267;  // std dev = 5.27e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( genre(B, E) )
%   | | then return 0.3600256984483524;  // std dev = 0.000, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.06496050958174837;  // std dev = 3.008, 105.000 (wgt'ed) examples reached here.  /* #neg=95 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926042;  // std dev = 1.66e-07, 311.000 (wgt'ed) examples reached here.  /* #neg=311 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.28185508856122204;  // std dev = 0.000, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else if ( movie(E, A) )
%   | | then return -0.07232466243344733;  // std dev = 0.264, 132.000 (wgt'ed) examples reached here.  /* #neg=122 #pos=10 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 1.05e-07, 303.000 (wgt'ed) examples reached here.  /* #neg=303 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07893629521221757;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( genre(B, E) )
%   | | then return 0.22844131315810504;  // std dev = 0.000, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.0662426989658307;  // std dev = 3.039, 131.000 (wgt'ed) examples reached here.  /* #neg=121 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109143;  // std dev = 3.33e-08, 296.000 (wgt'ed) examples reached here.  /* #neg=296 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18807311072824237;  // std dev = 0.508, 195.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=194 */
%   | else if ( movie(E, B) )
%   | | then return -0.04980505688672999;  // std dev = 3.024, 120.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=10 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.07324622576333699;  // std dev = 9.42e-08, 304.000 (wgt'ed) examples reached here.  /* #neg=304 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.16333125917011393;  // std dev = 0.000, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else if ( genre(A, E) )
%   | | then return -0.07006903266679151;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.05204833497856031;  // std dev = 3.038, 130.000 (wgt'ed) examples reached here.  /* #neg=120 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420305;  // std dev = 0.000, 312.000 (wgt'ed) examples reached here.  /* #neg=312 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return -0.3989254424408332;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0.14221919772287273;  // std dev = 0.000, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | | else if ( genre(A, G) )
%   | | | then return -0.06563865601989348;  // std dev = 2.63e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return -0.0339507475091365;  // std dev = 3.018, 112.000 (wgt'ed) examples reached here.  /* #neg=102 #pos=10 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.06419184008202602;  // std dev = 1.00e-07, 286.000 (wgt'ed) examples reached here.  /* #neg=286 */


Results
   AUC ROC   = 0.97199
   AUC PR    = 0.81824
   CLL	      = -0.107331
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.840391


Total learning time: 1.464 seconds
Total inference time: 1.133 seconds
AUC ROC: 0.97199


Results scoring model
   AUC ROC   = 0.993632
   AUC PR    = 0.960741
   CLL	      = -0.082337
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.95098
   F1        = 0.974874


Total scoring time: 1.824 seconds
Parameter learned model CLL: -0.082337


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 8, 0], 'true,false,true': [1.09e-06, 0, 194], 'true,false,false,true': [3.015, 100, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.23e-07, 306, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 194], 'true,false,true': [0.0, 8, 0], 'true,false,false,true': [3.034, 116, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 299, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.109, 9, 0], 'true,false,true': [0.339, 112, 204], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 287, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 194], 'true,false,true': [0.0, 4, 0], 'true,false,false,true': [3.003, 92, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 323, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [5.27e-09, 8, 0], 'true,false,true': [0.0, 0, 194], 'true,false,false,true': [3.008, 95, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.66e-07, 311, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 194], 'true,false,true': [0.264, 122, 10], 'true,false,false': [0.0, 0, 0], 'false,true': [1.05e-07, 303, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 8, 0], 'true,false,true': [0.0, 0, 194], 'true,false,false,true': [3.039, 121, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [3.33e-08, 296, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.508, 1, 194], 'true,false,true': [3.024, 110, 10], 'true,false,false': [0.0, 0, 0], 'false,true': [9.42e-08, 304, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 194], 'true,false,true': [0.0, 2, 0], 'true,false,false,true': [3.038, 120, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 312, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true,true,false': 'genre(A, G)'}, {'true,true,true,true': [0.0, 1, 0], 'true,true,true,false': [0.0, 0, 194], 'true,true,false,true': [2.63e-09, 10, 0], 'true,true,false,false': [3.018, 102, 10], 'true,false': [0.0, 0, 0], 'false': [1e-07, 286, 0]}]]
[{'': [0.22633136094675016, 4.9343245538895844e-17], 'true': [-6.938893903907228e-18, 0.22074099722992158], 'true,false': [6.15315358802561e-15, 0.08264462809917324], 'true,false,false': [0.08264462809917324, nan], 'false': [4.9343245538895844e-17, nan]}, {'': [0.17518519676788658, -8.614439522175128e-17], 'true': [-3.516087764586063e-15, 0.06897173506729784], 'true,false': [0.0, 0.07306626354245375], 'true,false,false': [0.07306626354245375, nan], 'false': [-8.614439522175128e-17, nan]}, {'': [0.11739011729674102, -1.0057769561064136e-16], 'true': [0.0013107636992016553, 0.11514310368428912], 'true,false': [0.11514310368428912, nan], 'false': [-1.0057769561064136e-16, nan]}, {'': [0.09871968881403859, -2.7497783891644744e-17], 'true': [-5.127627990021341e-16, 0.08511979506651104], 'true,false': [0.0, 0.08842752787389499], 'true,false,false': [0.08842752787389499, nan], 'false': [-2.7497783891644744e-17, nan]}, {'': [0.07187378139586106, 8.853225405371024e-17], 'true': [3.469446951953614e-18, 0.07141229458339435], 'true,false': [-2.5638139950106705e-16, 0.0861678004535151], 'true,false,false': [0.0861678004535151, nan], 'false': [8.853225405371024e-17, nan]}, {'': [0.058450645782104876, 3.664102391502167e-17], 'true': [-2.655378780546766e-16, 0.06970507777458577], 'true,false': [0.06970507777458577, nan], 'false': [3.664102391502167e-17, nan]}, {'': [0.048963583171267346, 3.750753461571475e-18], 'true': [0.0, 0.04931433164612241], 'true,false': [-1.0072126408970492e-16, 0.07050871161354257], 'true,false,false': [0.07050871161354257, nan], 'false': [3.750753461571475e-18, nan]}, {'': [0.043201056878360726, 2.921639538487254e-17], 'true': [0.0013219995242681494, 0.0762250824996125], 'true,false': [0.0762250824996125, nan], 'false': [2.921639538487254e-17, nan]}, {'': [0.03952318918577501, -6.618637262188433e-17], 'true': [-8.698654625929061e-17, 0.06993491576579929], 'true,false': [0.0, 0.07100591715976354], 'true,false,false': [0.07100591715976354, nan], 'false': [-6.618637262188433e-17, nan]}, {'': [0.03700995867089354, 3.4937088187504926e-17], 'true': [0.03700995867089354, nan], 'true,true': [0.00149402969588723, 0.07472427082388536], 'true,true,false': [6.938893903907229e-19, 0.0813137755102041], 'true,true,true': [0.0, -5.2649751683254844e-17]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, E).;true;true
9;true,true;genre(A, F).;true;true
9;true,false;genre(A, G).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995093;  // std dev = 1.09e-06, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | | else if ( actor(B) )
%   | | | then return -0.14185106490048768;  // std dev = 6.32e-08, 116.000 (wgt'ed) examples reached here.  /* #neg=116 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.1418510649004879;  // std dev = 0.000, 289.000 (wgt'ed) examples reached here.  /* #neg=289 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.7194734122109543;  // std dev = 2.06e-07, 75.000 (wgt'ed) examples reached here.  /* #pos=75 */
%   | | else return 0.7124324284547942;  // std dev = 0.077, 120.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=119 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( actor(B) )
%   | | | then return -0.12544463852839133;  // std dev = 0.000, 108.000 (wgt'ed) examples reached here.  /* #neg=108 */
%   | | | else return 0.7194734122109544;  // std dev = 2.98e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.12544463852839194;  // std dev = 0.000, 275.000 (wgt'ed) examples reached here.  /* #neg=275 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( female(B) )
%   | | then return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.14080808218199553;  // std dev = 0.049, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( actor(B) )
%   | | then return -0.1123163781936062;  // std dev = 7.88e-08, 98.000 (wgt'ed) examples reached here.  /* #neg=98 */
%   | | else return 0.5563802569583239;  // std dev = 0.012, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.11231637819360679;  // std dev = 0.000, 304.000 (wgt'ed) examples reached here.  /* #neg=304 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.4172670477850077;  // std dev = 2.35e-07, 75.000 (wgt'ed) examples reached here.  /* #pos=75 */
%   | | else return 0.4138003965689904;  // std dev = 0.057, 120.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=119 */
%   | else if ( genre(A, E) )
%   | | then return -0.10082496760915202;  // std dev = 0.004, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( actor(B) )
%   | | | then return -0.10159632948783634;  // std dev = 0.000, 113.000 (wgt'ed) examples reached here.  /* #neg=113 */
%   | | | else return 0.41726704778500767;  // std dev = 1.49e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.10159632948783662;  // std dev = 0.000, 303.000 (wgt'ed) examples reached here.  /* #neg=303 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( female(B) )
%   | | then return -0.09275616780200581;  // std dev = 2.63e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return -0.12158752936344715;  // std dev = 0.171, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(B, E) )
%   | | then return 0.3219511341651262;  // std dev = 0.016, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | | else if ( actor(B) )
%   | | | then return -0.09269127618926083;  // std dev = 7.45e-08, 119.000 (wgt'ed) examples reached here.  /* #neg=119 */
%   | | | else return 0.3205447129576675;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.09269127618926042;  // std dev = 1.70e-07, 316.000 (wgt'ed) examples reached here.  /* #neg=316 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.2547910623687933;  // std dev = 5.96e-08, 75.000 (wgt'ed) examples reached here.  /* #pos=75 */
%   | | else return 0.24835042730942045;  // std dev = 0.065, 121.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=119 */
%   | else if ( actor(B) )
%   | | then return -0.08499333880285542;  // std dev = 0.009, 112.000 (wgt'ed) examples reached here.  /* #neg=112 */
%   | | else return 0.25505819526897033;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.08518475138839678;  // std dev = 1.03e-07, 300.000 (wgt'ed) examples reached here.  /* #neg=300 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( female(B) )
%   | | then return -0.07884193961657394;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.14018894426052741;  // std dev = 0.103, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( genre(B, E) )
%   | | then return 0.2112185221677541;  // std dev = 0.019, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | | else if ( actor(B) )
%   | | | then return -0.07879064684960134;  // std dev = 5.27e-08, 111.000 (wgt'ed) examples reached here.  /* #neg=111 */
%   | | | else return 0.20967715096132095;  // std dev = 1.97e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.07877675473109143;  // std dev = 2.98e-08, 304.000 (wgt'ed) examples reached here.  /* #neg=304 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17816751960419472;  // std dev = 0.017, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else if ( actor(B) )
%   | | then return -0.07297689248806355;  // std dev = 0.015, 108.000 (wgt'ed) examples reached here.  /* #neg=108 */
%   | | else return 0.1770374051306635;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.07324622576333693;  // std dev = 1.02e-07, 289.000 (wgt'ed) examples reached here.  /* #neg=289 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1535560683349904;  // std dev = 0.015, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else if ( genre(A, E) )
%   | | then return -0.06370064562221003;  // std dev = 0.010, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( actor(B) )
%   | | | then return -0.06845546790764788;  // std dev = 0.000, 108.000 (wgt'ed) examples reached here.  /* #neg=108 */
%   | | | else return 0.1526990289344984;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.06842697784420307;  // std dev = 0.000, 315.000 (wgt'ed) examples reached here.  /* #neg=315 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.1346409407749077;  // std dev = 0.013, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else if ( genre(A, F) )
%   | | then return -0.06076212675732281;  // std dev = 0.010, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.1339720316052108;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.07107006169543455;  // std dev = 0.798, 117.000 (wgt'ed) examples reached here.  /* #neg=117 */
%   else return -0.06419184008202601;  // std dev = 1.03e-07, 289.000 (wgt'ed) examples reached here.  /* #neg=289 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.095651
   Precision = 0.784141 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.879012


Total learning time: 2.162 seconds
Total inference time: 1.026 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064007
   Precision = 0.995122 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.997555


Total scoring time: 1.624 seconds
Refined model CLL: -0.064007


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.095651
   Precision = 0.784141 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.879012


Total learning time: 7.074 seconds
Total inference time: 1.026 seconds
AUC ROC: 1.0
Total revision time: 7.074
Best scored revision CLL: -0.064007


Dataset: 4_cora_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 00:09:06
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.095651, 'Precision': [0.784141, 0.5], 'Recall': 1.0, 'F1': 0.879012, 'Learning time': 7.074, 'Inference time': 1.026, 'parameter_1.0': {'AUC ROC': 0.97199, 'AUC PR': 0.81824, 'CLL': -0.107331, 'Precision': [1.0, 0.5], 'Recall': 0.724719, 'F1': 0.840391, 'Learning time': 1.464, 'Inference time': 1.133}}


Starting fold 4

Target train facts examples: 927
Target train pos examples: 337
Target train neg examples: 12345

Target test facts examples: 151
Target test pos	 examples: 45
Target test neg examples: 1891

Amount of data: 0.2
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;haswordauthor(E, C).;true;true
7;true,true,true;author(F, E), title(F, D).;false;false
7;true,true,false;title(G, D), venue(G, B).;false;false
7;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
7;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
7;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, B).;false;true
8;true,true,false;title(F, D), venue(F, A).;false;false
8;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
8;true,false,false;haswordvenue(A, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
8;false,true;haswordauthor(M, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;true,true;author(F, E), venue(F, B).;true;true
9;true,true,true;samebib(F, G), venue(G, A).;false;false
9;true,true,false;author(H, E), venue(H, A).;false;false
9;true,false;haswordtitle(I, C).;true;true
9;true,false,true;title(J, I), venue(J, A).;false;false
9;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995123;  // std dev = 8.43e-08, 53.000 (wgt'ed) examples reached here.  /* #pos=53 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.13814893509951237;  // std dev = 3.175, 50.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=14 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048763;  // std dev = 8.94e-08, 101.000 (wgt'ed) examples reached here.  /* #neg=101 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7038267816417074;  // std dev = 0.837, 54.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=53 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.1738196633593612;  // std dev = 3.055, 42.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=14 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.1254446385283914;  // std dev = 0.000, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( movie(E, A) )
%   | | then return 0.34980798309380456;  // std dev = 0.384, 100.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=67 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360622;  // std dev = 6.66e-08, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.472083138806173;  // std dev = 0.000, 53.000 (wgt'ed) examples reached here.  /* #pos=53 */
%   | else if ( genre(A, E) )
%   | | then return -0.1015963294878363;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.09881672182116015;  // std dev = 3.036, 41.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=14 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783633;  // std dev = 0.000, 111.000 (wgt'ed) examples reached here.  /* #neg=111 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926094;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.35804332033785247;  // std dev = 0.000, 53.000 (wgt'ed) examples reached here.  /* #pos=53 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.02444979729059713;  // std dev = 3.162, 49.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=14 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926086;  // std dev = 7.07e-08, 115.000 (wgt'ed) examples reached here.  /* #neg=115 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2805146609018671;  // std dev = 2.98e-08, 53.000 (wgt'ed) examples reached here.  /* #pos=53 */
%   | else if ( movie(E, A) )
%   | | then return -0.017224475121432287;  // std dev = 0.429, 57.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=14 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.0851847513883968;  // std dev = 6.23e-08, 116.000 (wgt'ed) examples reached here.  /* #neg=116 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.22751000884975528;  // std dev = 0.000, 53.000 (wgt'ed) examples reached here.  /* #pos=53 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.03521092258433962;  // std dev = 3.135, 47.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=14 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109161;  // std dev = 5.27e-08, 91.000 (wgt'ed) examples reached here.  /* #neg=91 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.19001159613957408;  // std dev = 4.21e-08, 53.000 (wgt'ed) examples reached here.  /* #pos=53 */
%   | else if ( movie(E, B) )
%   | | then return -0.01740816939917916;  // std dev = 3.232, 57.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=14 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.07324622576333707;  // std dev = 0.000, 100.000 (wgt'ed) examples reached here.  /* #neg=100 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.15247395032383124;  // std dev = 0.535, 54.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=53 */
%   | else if ( genre(A, E) )
%   | | then return -0.08252437323965806;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.019590463406356784;  // std dev = 3.162, 49.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=14 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420267;  // std dev = 4.27e-09, 83.000 (wgt'ed) examples reached here.  /* #neg=83 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.14277623469633033;  // std dev = 0.000, 53.000 (wgt'ed) examples reached here.  /* #pos=53 */
%   | | else if ( genre(A, G) )
%   | | | then return -0.07648752127323832;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.027904975536972257;  // std dev = 3.135, 47.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.06419184008202626;  // std dev = 0.000, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.132675
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 0.93 seconds
Total inference time: 0.871 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.974822
   AUC PR    = 0.839357
   CLL	      = -0.131663
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.791045
   F1        = 0.883333


Total scoring time: 0.969 seconds
Parameter learned model CLL: -0.131663


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 2, 0], 'true,false,true': [8.43e-08, 0, 53], 'true,false,false,true': [3.175, 36, 14], 'true,false,false,false': [0.0, 0, 0], 'false,true': [8.94e-08, 101, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.837, 1, 53], 'true,false,true': [0.0, 3, 0], 'true,false,false,true': [3.055, 28, 14], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 92, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [2.63e-09, 3, 0], 'true,false,true': [0.384, 33, 67], 'true,false,false': [0.0, 0, 0], 'false,true': [6.66e-08, 82, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 53], 'true,false,true': [0.0, 3, 0], 'true,false,false,true': [3.036, 27, 14], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 111, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [2.63e-09, 3, 0], 'true,false,true': [0.0, 0, 53], 'true,false,false,true': [3.162, 35, 14], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.07e-08, 115, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [2.98e-08, 0, 53], 'true,false,true': [0.429, 43, 14], 'true,false,false': [0.0, 0, 0], 'false,true': [6.23e-08, 116, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 53], 'true,false,false,true': [3.135, 33, 14], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.27e-08, 91, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [4.21e-08, 0, 53], 'true,false,true': [3.232, 43, 14], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 100, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.535, 1, 53], 'true,false,true': [0.0, 4, 0], 'true,false,false,true': [3.162, 35, 14], 'true,false,false,false': [0.0, 0, 0], 'false,true': [4.27e-09, 83, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true,true,false': 'genre(A, G)'}, {'true,true,true,true': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 53], 'true,true,false,true': [0.0, 3, 0], 'true,true,false,false': [3.135, 33, 14], 'true,false': [0.0, 0, 0], 'false': [0.0, 95, 0]}]]
[{'': [0.23092970521541878, 7.91446116564468e-17], 'true': [0.0, 0.2273541332830608], 'true,false': [1.340646671245472e-16, 0.20159999999999947], 'true,false,false': [0.20159999999999947, nan], 'false': [7.91446116564468e-17, nan]}, {'': [0.17887508331358906, -1.68946982008176e-17], 'true': [0.012975303553036197, 0.21297997502243401], 'true,false': [0.0, 0.22222222222222177], 'true,false,false': [0.22222222222222177, nan], 'false': [-1.68946982008176e-17, nan]}, {'': [0.14948825389839182, 5.415722071342227e-17], 'true': [2.3129646346357427e-18, 0.1477527386426651], 'true,false': [0.1477527386426651, nan], 'false': [5.415722071342227e-17, nan]}, {'': [0.13331072034211136, -8.001607384685813e-18], 'true': [-3.3516166781136804e-16, 0.21208619818954969], 'true,false': [-1.1564823173178713e-18, 0.22486615110053512], 'true,false,false': [0.22486615110053512, nan], 'false': [-8.001607384685813e-18, nan]}, {'': [0.12456472123622554, 4.344350965924526e-17], 'true': [2.3129646346357427e-18, 0.12581759001285525], 'true,false': [-2.51371250858526e-16, 0.2040816326530614], 'true,false,false': [0.2040816326530614, nan], 'false': [4.344350965924526e-17, nan]}, {'': [0.11763012545207271, 3.34981085016211e-17], 'true': [1.67580833905684e-17, 0.1842930013006157], 'true,false': [0.1842930013006157, nan], 'false': [3.34981085016211e-17, nan]}, {'': [0.1075093259403333, 3.050063254464716e-17], 'true': [nan, 0.1075093259403333], 'true,false': [0.0, 0.20914440923494793], 'true,false,false': [0.20914440923494793, nan], 'false': [3.050063254464716e-17, nan]}, {'': [0.10570073809661537, -5.551115123125783e-18], 'true': [3.35161667811368e-17, 0.1832546365899095], 'true,false': [0.1832546365899095, nan], 'false': [-5.551115123125783e-18, nan]}, {'': [0.10143322103430792, 1.8726653427412278e-17], 'true': [0.005298306642702477, 0.18940682741658807], 'true,false': [0.0, 0.20408163265306145], 'true,false,false': [0.20408163265306145, nan], 'false': [1.8726653427412278e-17, nan]}, {'': [0.09939849272554872, -1.460819769243627e-17], 'true': [0.09939849272554872, nan], 'true,true': [-3.77056876287789e-17, 0.19721038022806264], 'true,true,false': [-1.1564823173178713e-18, 0.20914440923494837], 'true,true,true': [nan, -3.77056876287789e-17]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, E).;true;true
9;true,false;genre(A, G).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995123;  // std dev = 8.43e-08, 53.000 (wgt'ed) examples reached here.  /* #pos=53 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.1418510649004877;  // std dev = 2.36e-08, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   else return -0.14185106490048763;  // std dev = 8.16e-08, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.7194734122109542;  // std dev = 7.30e-08, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else return 0.69306972312535;  // std dev = 0.147, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( actor(B) )
%   | | | then return -0.12544463852839133;  // std dev = 1.83e-08, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | | | else return 0.7194734122109542;  // std dev = 5.16e-08, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else return -0.1254446385283914;  // std dev = 0.000, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( director(B), actor(A) )
%   | | then return 0.5583785670716374;  // std dev = 0.027, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | | else return -0.11603256917293113;  // std dev = 0.113, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   else return -0.11231637819360621;  // std dev = 6.99e-08, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.41678122865285244;  // std dev = 6.32e-08, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else return 0.403610710691371;  // std dev = 0.109, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.4167812286528525;  // std dev = 2.98e-08, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.10469357265856077;  // std dev = 0.105, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   else return -0.10159632948783626;  // std dev = 4.59e-08, 96.000 (wgt'ed) examples reached here.  /* #neg=96 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.16656741351022658;  // std dev = 0.202, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(B, E) )
%   | | then return 0.32528944672985666;  // std dev = 0.031, 53.000 (wgt'ed) examples reached here.  /* #pos=53 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.32021538822408846;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.09607766952420552;  // std dev = 0.097, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   else return -0.09269127618926093;  // std dev = 5.48e-08, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2582982192926139;  // std dev = 0.027, 53.000 (wgt'ed) examples reached here.  /* #pos=53 */
%   | else if ( actor(B) )
%   | | then return -0.08414104650351498;  // std dev = 0.007, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | | else return 0.2548334546838857;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else return -0.08518475138839682;  // std dev = 5.37e-08, 96.000 (wgt'ed) examples reached here.  /* #neg=96 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.20810767602259872;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else return 0.18374462885425197;  // std dev = 0.122, 33.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=31 */
%   | else if ( actor(B) )
%   | | then return -0.0773270637525473;  // std dev = 0.010, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | | else return 0.20951837190423991;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else return -0.07877675473109158;  // std dev = 6.14e-08, 106.000 (wgt'ed) examples reached here.  /* #neg=106 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.17588532263103615;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else return 0.15376048160460862;  // std dev = 0.124, 33.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=31 */
%   | else if ( director(B), actor(A) )
%   | | then return 0.1769209305751454;  // std dev = 7.45e-09, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return -0.0784700384038792;  // std dev = 0.179, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   else return -0.07324622576333707;  // std dev = 0.000, 97.000 (wgt'ed) examples reached here.  /* #neg=97 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.15182443763514628;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else return 0.14654934121322577;  // std dev = 0.093, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   | else if ( genre(A, E) )
%   | | then return -0.06370223078322476;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( actor(B) )
%   | | | then return -0.06760732830621087;  // std dev = 1.18e-08, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | | | else return 0.15261065971456467;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else return -0.06842697784420264;  // std dev = 5.48e-08, 114.000 (wgt'ed) examples reached here.  /* #neg=114 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1396697884135023;  // std dev = 0.039, 53.000 (wgt'ed) examples reached here.  /* #pos=53 */
%   | else if ( genre(A, E) )
%   | | then return -0.060006718098446245;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( actor(B) )
%   | | | then return -0.06346816984703431;  // std dev = 9.13e-09, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | | else return 0.1339030355068775;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else return -0.06419184008202626;  // std dev = 0.000, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.06481
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.496 seconds
Total inference time: 0.987 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.067446
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.953 seconds
Refined model CLL: -0.067446


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.06481
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 4.348 seconds
Total inference time: 0.987 seconds
AUC ROC: 1.0
Total revision time: 4.348
Best scored revision CLL: -0.067446


Dataset: 4_cora_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 00:09:13
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.06481, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 4.348, 'Inference time': 0.987, 'parameter_0.2': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.132675, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 0.93, 'Inference time': 0.871}}


Amount of data: 0.4
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;haswordauthor(E, C).;true;true
7;true,true,true;author(F, E), title(F, D).;false;false
7;true,true,false;title(G, D), venue(G, B).;false;false
7;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
7;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
7;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, B).;false;true
8;true,true,false;title(F, D), venue(F, A).;false;false
8;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
8;true,false,false;haswordvenue(A, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
8;false,true;haswordauthor(M, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;true,true;author(F, E), venue(F, B).;true;true
9;true,true,true;samebib(F, G), venue(G, A).;false;false
9;true,true,false;author(H, E), venue(H, A).;false;false
9;true,false;haswordtitle(I, C).;true;true
9;true,false,true;title(J, I), venue(J, A).;false;false
9;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995112;  // std dev = 4.77e-07, 105.000 (wgt'ed) examples reached here.  /* #pos=105 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.22523754269444773;  // std dev = 4.284, 79.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=29 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048835;  // std dev = 0.000, 191.000 (wgt'ed) examples reached here.  /* #neg=191 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7036805514494715;  // std dev = 1.184, 107.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=105 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.1736995699774657;  // std dev = 4.358, 84.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=29 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.1254446385283915;  // std dev = 0.000, 173.000 (wgt'ed) examples reached here.  /* #neg=173 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14298134638074958;  // std dev = 0.166, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( movie(E, A) )
%   | | then return 0.35298994324887156;  // std dev = 0.386, 197.000 (wgt'ed) examples reached here.  /* #neg=63 #pos=134 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360658;  // std dev = 0.000, 196.000 (wgt'ed) examples reached here.  /* #neg=196 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.46498559250591376;  // std dev = 0.669, 106.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=105 */
%   | else if ( genre(A, E) )
%   | | then return -0.09883139534038299;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.0662473765186361;  // std dev = 4.422, 89.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=29 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783653;  // std dev = 0.000, 202.000 (wgt'ed) examples reached here.  /* #neg=202 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1554941675653583;  // std dev = 0.226, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(B, E) )
%   | | then return 0.3589774592644119;  // std dev = 1.03e-07, 105.000 (wgt'ed) examples reached here.  /* #pos=105 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.020399591557445775;  // std dev = 4.528, 99.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=29 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926054;  // std dev = 9.77e-08, 217.000 (wgt'ed) examples reached here.  /* #neg=217 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2760875319339055;  // std dev = 0.534, 106.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=105 */
%   | else if ( movie(E, A) )
%   | | then return 0.06813225040024413;  // std dev = 0.466, 87.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=29 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 7.74e-08, 202.000 (wgt'ed) examples reached here.  /* #neg=202 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14549617297832385;  // std dev = 0.336, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( genre(B, E) )
%   | | then return 0.2288404926807045;  // std dev = 1.84e-07, 105.000 (wgt'ed) examples reached here.  /* #pos=105 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.01165274728988063;  // std dev = 4.499, 96.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=29 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109147;  // std dev = 7.30e-08, 201.000 (wgt'ed) examples reached here.  /* #neg=201 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18652182940217882;  // std dev = 0.469, 106.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=105 */
%   | else if ( movie(E, B) )
%   | | then return 0.021682990581235205;  // std dev = 4.449, 95.000 (wgt'ed) examples reached here.  /* #neg=66 #pos=29 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.07324622576333663;  // std dev = 1.25e-07, 208.000 (wgt'ed) examples reached here.  /* #neg=208 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.15923599056370544;  // std dev = 0.481, 106.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=105 */
%   | else if ( genre(A, E) )
%   | | then return -0.07444840492182453;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.05631041328849387;  // std dev = 4.329, 82.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=29 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420262;  // std dev = 5.74e-09, 208.000 (wgt'ed) examples reached here.  /* #neg=208 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return -0.35541713565119776;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0.14313792061720898;  // std dev = 9.42e-08, 105.000 (wgt'ed) examples reached here.  /* #pos=105 */
%   | | else if ( genre(A, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.044412728093446506;  // std dev = 4.329, 82.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=29 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.06419184008202626;  // std dev = 0.000, 195.000 (wgt'ed) examples reached here.  /* #neg=195 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.148193
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.16 seconds
Total inference time: 0.843 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.975545
   AUC PR    = 0.837199
   CLL	      = -0.142291
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.783582
   F1        = 0.878661


Total scoring time: 1.165 seconds
Parameter learned model CLL: -0.142291


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 7, 0], 'true,false,true': [4.77e-07, 0, 105], 'true,false,false,true': [4.284, 50, 29], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 191, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.184, 2, 105], 'true,false,true': [0.0, 4, 0], 'true,false,false,true': [4.358, 55, 29], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 173, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.166, 11, 0], 'true,false,true': [0.386, 63, 134], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 196, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.669, 1, 105], 'true,false,true': [0.0, 7, 0], 'true,false,false,true': [4.422, 60, 29], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 202, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.226, 6, 0], 'true,false,true': [1.03e-07, 0, 105], 'true,false,false,true': [4.528, 70, 29], 'true,false,false,false': [0.0, 0, 0], 'false,true': [9.77e-08, 217, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.534, 1, 105], 'true,false,true': [0.466, 58, 29], 'true,false,false': [0.0, 0, 0], 'false,true': [7.74e-08, 202, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.336, 11, 0], 'true,false,true': [1.84e-07, 0, 105], 'true,false,false,true': [4.499, 67, 29], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.3e-08, 201, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.469, 1, 105], 'true,false,true': [4.449, 66, 29], 'true,false,false': [0.0, 0, 0], 'false,true': [1.25e-07, 208, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.481, 1, 105], 'true,false,true': [0.0, 2, 0], 'true,false,false,true': [4.329, 53, 29], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.74e-09, 208, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true,true,false': 'genre(A, G)'}, {'true,true,true,true': [0.0, 1, 0], 'true,true,true,false': [9.42e-08, 0, 105], 'true,true,false,true': [0.0, 0, 0], 'true,true,false,false': [4.329, 53, 29], 'true,false': [0.0, 0, 0], 'false': [0.0, 195, 0]}]]
[{'': [0.20936926071105963, -2.2320714212359167e-16], 'true': [-7.93016446160826e-18, 0.19789697542533544], 'true,false': [2.1654635756498293e-15, 0.23233456176894865], 'true,false,false': [0.23233456176894865, nan], 'false': [-2.2320714212359167e-16, nan]}, {'': [0.1794801840424347, -1.0267958609250002e-17], 'true': [0.013094258679158217, 0.2196565211087974], 'true,false': [0.0, 0.2260487528344662], 'true,false,false': [0.2260487528344662, nan], 'false': [-1.0267958609250002e-17, nan]}, {'': [0.15392073095624118, -3.8517941670668696e-17], 'true': [0.0025075740637827064, 0.14936631731980374], 'true,false': [0.14936631731980374, nan], 'false': [-3.8517941670668696e-17, nan]}, {'': [0.14195659631923702, -9.013691883095331e-17], 'true': [0.004221928631605626, 0.205493848324272], 'true,false': [-1.982541115402065e-18, 0.2196692336826167], 'true,false,false': [0.2196692336826167, nan], 'false': [-9.013691883095331e-17, nan]}, {'': [0.12910442178831658, 4.3999622174084545e-17], 'true': [0.00848194770807364, 0.12914890528109751], 'true,false': [1.0150610510858574e-16, 0.20712172227323727], 'true,false,false': [0.20712172227323727, nan], 'false': [4.3999622174084545e-17, nan]}, {'': [0.10989105697324786, 2.967922937116755e-17], 'true': [0.0026871129016272518, 0.21675599754578018], 'true,false': [0.21675599754578018, nan], 'false': [2.967922937116755e-17, nan]}, {'': [0.11076324202331309, 2.6512788647764932e-17], 'true': [0.01026850650552899, 0.11246343057892946], 'true,false': [3.214359995105215e-16, 0.2108289930555549], 'true,false,false': [0.2108289930555549, nan], 'false': [2.6512788647764932e-17, nan]}, {'': [0.10635476907888464, 7.472654973438554e-17], 'true': [0.0020788733587648205, 0.20837528635459182], 'true,false': [0.20837528635459182, nan], 'false': [7.472654973438554e-17, nan]}, {'': [0.10282061065460946, 3.416070845000482e-17], 'true': [0.0021857662509043693, 0.22353909514152015], 'true,false': [0.0, 0.22858417608566284], 'true,false,false': [0.22858417608566284, nan], 'false': [3.416070845000482e-17, nan]}, {'': [0.10318525843243898, -2.2773805633336544e-18], 'true': [0.10318525843243898, nan], 'true,true': [0.002322757220873474, 0.22858417608566384], 'true,true,false': [nan, 0.22858417608566384], 'true,true,true': [0.0, 8.458842092382145e-17]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, E).;true;true
9;true,true;genre(A, F).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995112;  // std dev = 4.77e-07, 105.000 (wgt'ed) examples reached here.  /* #pos=105 */
%   | | else if ( actor(B) )
%   | | | then return -0.14185106490048766;  // std dev = 6.14e-08, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   | | | else return 0.8581489350995117;  // std dev = 1.79e-07, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   else return -0.1418510649004884;  // std dev = 0.000, 202.000 (wgt'ed) examples reached here.  /* #neg=202 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.7194734122109551;  // std dev = 0.000, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | | else return 0.705391444698632;  // std dev = 0.108, 60.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=59 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( actor(B) )
%   | | | then return -0.1254446385283916;  // std dev = 0.000, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   | | | else return 0.7194734122109546;  // std dev = 0.000, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   else return -0.1254446385283916;  // std dev = 0.000, 190.000 (wgt'ed) examples reached here.  /* #neg=190 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.5568962794471576;  // std dev = 0.020, 134.000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else if ( actor(B) )
%   | | then return -0.11231637819360625;  // std dev = 5.48e-08, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
%   | | else return -0.31288513004493923;  // std dev = 0.241, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.11231637819360646;  // std dev = 0.000, 180.000 (wgt'ed) examples reached here.  /* #neg=180 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.41714157956256415;  // std dev = 0.000, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | | else return 0.41064016331683184;  // std dev = 0.076, 60.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=59 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783634;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.41714157956256415;  // std dev = 2.98e-08, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | | else return -0.10637657835797044;  // std dev = 0.265, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   else return -0.10159632948783652;  // std dev = 0.000, 197.000 (wgt'ed) examples reached here.  /* #neg=197 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926098;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(B, E) )
%   | | then return 0.3229875621605627;  // std dev = 0.023, 105.000 (wgt'ed) examples reached here.  /* #pos=105 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.3204596578411358;  // std dev = 0.000, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | | else return -0.10182158878023266;  // std dev = 0.350, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
%   else return -0.0926912761892606;  // std dev = 8.56e-08, 182.000 (wgt'ed) examples reached here.  /* #neg=182 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2563523307845812;  // std dev = 0.022, 134.000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else if ( actor(A) )
%   | | then return -0.0841069614144197;  // std dev = 3.80e-08, 73.000 (wgt'ed) examples reached here.  /* #neg=73 */
%   | | else if ( female(B) )
%   | | | then return -0.08451113265466124;  // std dev = 0.001, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return -0.14431578814216933;  // std dev = 0.291, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else return -0.08518475138839678;  // std dev = 8.30e-08, 218.000 (wgt'ed) examples reached here.  /* #neg=218 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11211737512408251;  // std dev = 0.057, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( genre(B, E) )
%   | | then return 0.21091746144092;  // std dev = 0.017, 105.000 (wgt'ed) examples reached here.  /* #pos=105 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.20941219437766626;  // std dev = 0.000, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | | else return -0.08135359159861419;  // std dev = 0.212, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
%   else return -0.07877675473109146;  // std dev = 7.15e-08, 209.000 (wgt'ed) examples reached here.  /* #neg=209 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( actor(A) )
%   | | then return 0.17794715220040996;  // std dev = 0.015, 105.000 (wgt'ed) examples reached here.  /* #pos=105 */
%   | | else return -0.18424780229799823;  // std dev = 5.27e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( director(B), actor(A) )
%   | | then return 0.17684303280415334;  // std dev = 0.000, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | else if ( actor(B) )
%   | | | then return -0.07211856458191286;  // std dev = 0.005, 83.000 (wgt'ed) examples reached here.  /* #neg=83 */
%   | | | else return -0.27505387989832947;  // std dev = 5.27e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.07324622576333661;  // std dev = 1.28e-07, 213.000 (wgt'ed) examples reached here.  /* #neg=213 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( actor(A) )
%   | | then return 0.15338919104295515;  // std dev = 0.014, 105.000 (wgt'ed) examples reached here.  /* #pos=105 */
%   | | else return -0.15814748005833656;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(A, E) )
%   | | then return -0.06403379617058833;  // std dev = 0.007, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( actor(B) )
%   | | | then return -0.06752217136528318;  // std dev = 2.11e-08, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   | | | else return 0.1525515522758459;  // std dev = 1.49e-08, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   else return -0.06842697784420262;  // std dev = 8.09e-08, 196.000 (wgt'ed) examples reached here.  /* #neg=196 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( genre(A, E) )
%   | | then return -0.13821155378737884;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return 0.13451085886386163;  // std dev = 0.012, 105.000 (wgt'ed) examples reached here.  /* #pos=105 */
%   | else if ( director(B), actor(A) )
%   | | then return 0.1338568819275738;  // std dev = 0.000, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | else if ( actor(A) )
%   | | | then return -0.0633929280139651;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   | | | else return -0.08594154840280918;  // std dev = 0.177, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else return -0.06419184008202626;  // std dev = 0.000, 218.000 (wgt'ed) examples reached here.  /* #neg=218 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063688
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.793 seconds
Total inference time: 0.92 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064986
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.185 seconds
Refined model CLL: -0.064986


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063688
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 5.303000000000001 seconds
Total inference time: 0.92 seconds
AUC ROC: 1.0
Total revision time: 5.303000000000001
Best scored revision CLL: -0.064986


Dataset: 4_cora_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 00:09:21
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063688, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 5.303000000000001, 'Inference time': 0.92, 'parameter_0.4': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.148193, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 1.16, 'Inference time': 0.843}}


Amount of data: 0.6
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;haswordauthor(E, C).;true;true
7;true,true,true;author(F, E), title(F, D).;false;false
7;true,true,false;title(G, D), venue(G, B).;false;false
7;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
7;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
7;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, B).;false;true
8;true,true,false;title(F, D), venue(F, A).;false;false
8;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
8;true,false,false;haswordvenue(A, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
8;false,true;haswordauthor(M, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;true,true;author(F, E), venue(F, B).;true;true
9;true,true,true;samebib(F, G), venue(G, A).;false;false
9;true,true,false;author(H, E), venue(H, A).;false;false
9;true,false;haswordtitle(I, C).;true;true
9;true,false,true;title(J, I), venue(J, A).;false;false
9;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995097;  // std dev = 1.02e-06, 163.000 (wgt'ed) examples reached here.  /* #pos=163 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.1449136409818641;  // std dev = 5.274, 136.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=39 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048785;  // std dev = 8.43e-08, 297.000 (wgt'ed) examples reached here.  /* #neg=297 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7042038088843416;  // std dev = 1.450, 166.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=163 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.13957730198495674;  // std dev = 5.225, 130.000 (wgt'ed) examples reached here.  /* #neg=91 #pos=39 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839205;  // std dev = 0.000, 322.000 (wgt'ed) examples reached here.  /* #neg=322 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12254632384589657;  // std dev = 0.107, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( movie(E, A) )
%   | | then return 0.36987270318169924;  // std dev = 0.373, 290.000 (wgt'ed) examples reached here.  /* #neg=88 #pos=202 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.1123163781936068;  // std dev = 0.000, 303.000 (wgt'ed) examples reached here.  /* #neg=303 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.458855951740711;  // std dev = 0.943, 165.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=163 */
%   | else if ( genre(A, E) )
%   | | then return -0.10066639435475191;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.06823678635057327;  // std dev = 5.189, 126.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=39 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783663;  // std dev = 0.000, 308.000 (wgt'ed) examples reached here.  /* #neg=308 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1083174049086567;  // std dev = 0.188, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else if ( genre(B, E) )
%   | | then return 0.35638676966770066;  // std dev = 0.000, 163.000 (wgt'ed) examples reached here.  /* #pos=163 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.0710015602679128;  // std dev = 5.131, 120.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=39 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926042;  // std dev = 1.67e-07, 313.000 (wgt'ed) examples reached here.  /* #neg=313 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2695188272406296;  // std dev = 0.938, 166.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=163 */
%   | else if ( movie(E, A) )
%   | | then return 0.030447713666673152;  // std dev = 0.445, 137.000 (wgt'ed) examples reached here.  /* #neg=98 #pos=39 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 1.10e-07, 317.000 (wgt'ed) examples reached here.  /* #neg=317 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1597905047342681;  // std dev = 0.440, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else if ( genre(B, E) )
%   | | then return 0.22846711794528635;  // std dev = 1.40e-07, 163.000 (wgt'ed) examples reached here.  /* #pos=163 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.0433770981749538;  // std dev = 5.161, 123.000 (wgt'ed) examples reached here.  /* #neg=84 #pos=39 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109143;  // std dev = 1.49e-08, 322.000 (wgt'ed) examples reached here.  /* #neg=322 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1820316673251629;  // std dev = 0.823, 166.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=163 */
%   | else if ( movie(E, B) )
%   | | then return 0.0039911837462387875;  // std dev = 5.263, 142.000 (wgt'ed) examples reached here.  /* #neg=103 #pos=39 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.07324622576333695;  // std dev = 1.01e-07, 291.000 (wgt'ed) examples reached here.  /* #neg=291 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.16117488156781248;  // std dev = 0.491, 164.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=163 */
%   | else if ( genre(A, E) )
%   | | then return -0.07418053742803465;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.03480483882034927;  // std dev = 5.414, 157.000 (wgt'ed) examples reached here.  /* #neg=118 #pos=39 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420315;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #neg=337 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.14323700866005615;  // std dev = 1.38e-07, 163.000 (wgt'ed) examples reached here.  /* #pos=163 */
%   | | else if ( genre(A, G) )
%   | | | then return -0.06924417331357545;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.035799396322818665;  // std dev = 5.180, 125.000 (wgt'ed) examples reached here.  /* #neg=86 #pos=39 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.06419184008202591;  // std dev = 1.26e-07, 310.000 (wgt'ed) examples reached here.  /* #neg=310 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.135206
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.41 seconds
Total inference time: 0.852 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.977218
   AUC PR    = 0.851455
   CLL	      = -0.131563
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.806931
   F1        = 0.893151


Total scoring time: 1.342 seconds
Parameter learned model CLL: -0.131563


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 9, 0], 'true,false,true': [1.02e-06, 0, 163], 'true,false,false,true': [5.274, 97, 39], 'true,false,false,false': [0.0, 0, 0], 'false,true': [8.43e-08, 297, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.45, 3, 163], 'true,false,true': [5.27e-09, 12, 0], 'true,false,false,true': [5.225, 91, 39], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 322, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.107, 11, 0], 'true,false,true': [0.373, 88, 202], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 303, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.943, 2, 163], 'true,false,true': [0.0, 10, 0], 'true,false,false,true': [5.189, 87, 39], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 308, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.188, 12, 0], 'true,false,true': [0.0, 0, 163], 'true,false,false,true': [5.131, 81, 39], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.67e-07, 313, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.938, 3, 163], 'true,false,true': [0.445, 98, 39], 'true,false,false': [0.0, 0, 0], 'false,true': [1.1e-07, 317, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.44, 16, 0], 'true,false,true': [1.4e-07, 0, 163], 'true,false,false,true': [5.161, 84, 39], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.49e-08, 322, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.823, 3, 163], 'true,false,true': [5.263, 103, 39], 'true,false,false': [0.0, 0, 0], 'false,true': [1.01e-07, 291, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.491, 1, 163], 'true,false,true': [0.0, 9, 0], 'true,false,false,true': [5.414, 118, 39], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 337, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true,true,false': 'genre(A, G)'}, {'true,true,true,true': [0.0, 0, 0], 'true,true,true,false': [1.38e-07, 0, 163], 'true,true,false,true': [0.0, 4, 0], 'true,true,false,false': [5.18, 86, 39], 'true,false': [0.0, 0, 0], 'false': [1.26e-07, 310, 0]}]]
[{'': [0.22571259908922714, 2.392399783704041e-17], 'true': [-9.25185853854297e-18, 0.21916980794398744], 'true,false': [6.3643705166242106e-15, 0.20453070934256187], 'true,false,false': [0.20453070934256187, nan], 'false': [2.392399783704041e-17, nan]}, {'': [0.18359521552898167, -9.102449642889482e-17], 'true': [0.012668402692531337, 0.19768742021262625], 'true,false': [2.3129646346357427e-18, 0.20999999999999971], 'true,false,false': [0.20999999999999971, nan], 'false': [-9.102449642889482e-17, nan]}, {'': [0.1426484457431598, -7.621332974324507e-17], 'true': [0.0010465178804881263, 0.1391582859764388], 'true,false': [0.1391582859764388, nan], 'false': [-7.621332974324507e-17, nan]}, {'': [0.13353197608562217, -5.0464682937507114e-17], 'true': [0.005394538908927009, 0.199947629362873], 'true,false': [-1.3877787807814458e-18, 0.2137188208616775], 'true,false,false': [0.2137188208616775, nan], 'false': [-5.0464682937507114e-17, nan]}, {'': [0.11304930204988259, 8.938536811678577e-17], 'true': [0.0029604721244096293, 0.11291230604796915], 'true,false': [-7.846484198577794e-16, 0.21937500000000038], 'true,false,false': [0.21937500000000038, nan], 'false': [8.938536811678577e-17, nan]}, {'': [0.10670805477899467, 3.7824633015620474e-17], 'true': [0.005298833384629992, 0.1982708229142506], 'true,false': [0.1982708229142506, nan], 'false': [3.7824633015620474e-17, nan]}, {'': [0.10156591433476055, 6.895795184007183e-19], 'true': [0.012104077557765575, 0.10152343414697208], 'true,false': [1.1987684192271629e-16, 0.21653777513384911], 'true,false,false': [0.21653777513384911, nan], 'false': [6.895795184007183e-19, nan]}, {'': [0.10001528046129282, 3.509983445550323e-17], 'true': [0.004084649011492666, 0.19507532973046082], 'true,false': [0.19507532973046082, nan], 'false': [3.509983445550323e-17, nan]}, {'': [0.09940567528118574, -8.433741670743029e-17], 'true': [0.001467189357959631, 0.176658429993031], 'true,false': [-7.709882115452476e-19, 0.18670128605622943], 'true,false,false': [0.18670128605622943, nan], 'false': [-8.433741670743029e-17, nan]}, {'': [0.09505867790175956, 5.1571650176136306e-17], 'true': [0.09505867790175956, nan], 'true,true': [1.1715236824265454e-16, 0.2083315351097285], 'true,true,false': [0.0, 0.21465600000000085], 'true,true,true': [nan, 1.1715236824265454e-16]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, E).;true;true
9;true,false;genre(A, G).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995097;  // std dev = 1.02e-06, 163.000 (wgt'ed) examples reached here.  /* #pos=163 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.8581489350995116;  // std dev = 2.46e-07, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | | else return -0.14185106490048763;  // std dev = 8.16e-08, 89.000 (wgt'ed) examples reached here.  /* #neg=89 */
%   else return -0.1418510649004878;  // std dev = 1.26e-07, 308.000 (wgt'ed) examples reached here.  /* #neg=308 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.71432147287718;  // std dev = 0.066, 164.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=163 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 5.27e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.719473412210955;  // std dev = 0.000, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 100.000 (wgt'ed) examples reached here.  /* #neg=100 */
%   else return -0.12544463852839194;  // std dev = 0.000, 272.000 (wgt'ed) examples reached here.  /* #neg=272 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( female(B) )
%   | | then return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.1885148576400197;  // std dev = 0.093, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( actor(A), director(B) )
%   | | then return 0.5563927123965665;  // std dev = 0.007, 202.000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | | else return -0.11231637819360622;  // std dev = 7.45e-08, 96.000 (wgt'ed) examples reached here.  /* #neg=96 */
%   else return -0.11231637819360676;  // std dev = 0.000, 310.000 (wgt'ed) examples reached here.  /* #neg=310 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.41851726916879145;  // std dev = 0.000, 71.000 (wgt'ed) examples reached here.  /* #pos=71 */
%   | | else return 0.40545770092818556;  // std dev = 0.089, 94.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=92 */
%   | else if ( genre(A, E) )
%   | | then return -0.09822288221684712;  // std dev = 0.012, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.41726401918282174;  // std dev = 2.98e-08, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | | else return -0.10159632948783619;  // std dev = 5.58e-08, 89.000 (wgt'ed) examples reached here.  /* #neg=89 */
%   else return -0.10159632948783662;  // std dev = 0.000, 299.000 (wgt'ed) examples reached here.  /* #neg=299 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08986053913446648;  // std dev = 0.010, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( genre(B, E) )
%   | | then return 0.3230037239780869;  // std dev = 0.018, 163.000 (wgt'ed) examples reached here.  /* #pos=163 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.32054265983584074;  // std dev = 0.000, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | | else return -0.09269127618926089;  // std dev = 6.83e-08, 116.000 (wgt'ed) examples reached here.  /* #neg=116 */
%   else return -0.09269127618926043;  // std dev = 1.87e-07, 319.000 (wgt'ed) examples reached here.  /* #neg=319 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2564118140474203;  // std dev = 0.018, 202.000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.08646515262651924;  // std dev = 0.165, 101.000 (wgt'ed) examples reached here.  /* #neg=101 */
%   else return -0.08518475138839678;  // std dev = 1.07e-07, 314.000 (wgt'ed) examples reached here.  /* #neg=314 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( female(B) )
%   | | then return -0.07913482039251456;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return -0.13777890391310132;  // std dev = 0.175, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(B, E) )
%   | | then return 0.21091601124590798;  // std dev = 0.014, 163.000 (wgt'ed) examples reached here.  /* #pos=163 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.20945170641188882;  // std dev = 5.58e-08, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | | else return -0.0786838848620999;  // std dev = 1.83e-08, 89.000 (wgt'ed) examples reached here.  /* #neg=89 */
%   else return -0.07877675473109143;  // std dev = 3.33e-08, 296.000 (wgt'ed) examples reached here.  /* #neg=296 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.17773847795621334;  // std dev = 0.014, 202.000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.07652345902224889;  // std dev = 0.235, 113.000 (wgt'ed) examples reached here.  /* #neg=113 */
%   else return -0.073246225763337;  // std dev = 9.19e-08, 309.000 (wgt'ed) examples reached here.  /* #neg=309 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.15245810731271806;  // std dev = 0.000, 71.000 (wgt'ed) examples reached here.  /* #pos=71 */
%   | | else return 0.1466686543038424;  // std dev = 0.051, 94.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=92 */
%   | else if ( genre(A, E) )
%   | | then return -0.06363697767883902;  // std dev = 0.009, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( actor(B) )
%   | | | then return -0.0681429204579731;  // std dev = 3.41e-08, 87.000 (wgt'ed) examples reached here.  /* #neg=87 */
%   | | | else return 0.15246155474307868;  // std dev = 0.000, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   else return -0.06842697784420312;  // std dev = 0.000, 329.000 (wgt'ed) examples reached here.  /* #neg=329 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.13378390925368963;  // std dev = 1.49e-08, 71.000 (wgt'ed) examples reached here.  /* #pos=71 */
%   | | else if ( actor(A) )
%   | | | then return 0.13598335996895902;  // std dev = 0.000, 92.000 (wgt'ed) examples reached here.  /* #pos=92 */
%   | | | else return -0.22191417083041634;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(A, E) )
%   | | then return -0.0598314493042041;  // std dev = 0.013, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.13378660155787436;  // std dev = 0.000, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | | else return -0.06425732880863838;  // std dev = 0.020, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */
%   else return -0.06419184008202612;  // std dev = 7.45e-08, 269.000 (wgt'ed) examples reached here.  /* #neg=269 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063986
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.236 seconds
Total inference time: 0.94 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064791
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.548 seconds
Refined model CLL: -0.064791


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063986
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 6.536 seconds
Total inference time: 0.94 seconds
AUC ROC: 1.0
Total revision time: 6.536
Best scored revision CLL: -0.064791


Dataset: 4_cora_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 00:09:29
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063986, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 6.536, 'Inference time': 0.94, 'parameter_0.6': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.135206, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 1.41, 'Inference time': 0.852}}


Amount of data: 0.8
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;haswordauthor(E, C).;true;true
7;true,true,true;author(F, E), title(F, D).;false;false
7;true,true,false;title(G, D), venue(G, B).;false;false
7;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
7;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
7;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, B).;false;true
8;true,true,false;title(F, D), venue(F, A).;false;false
8;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
8;true,false,false;haswordvenue(A, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
8;false,true;haswordauthor(M, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;true,true;author(F, E), venue(F, B).;true;true
9;true,true,true;samebib(F, G), venue(G, A).;false;false
9;true,true,false;author(H, E), venue(H, A).;false;false
9;true,false;haswordtitle(I, C).;true;true
9;true,false,true;title(J, I), venue(J, A).;false;false
9;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( genre(B, E) )
%   | | then return 0.858148935099509;  // std dev = 1.07e-06, 224.000 (wgt'ed) examples reached here.  /* #pos=224 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.12761001294382335;  // std dev = 5.734, 167.000 (wgt'ed) examples reached here.  /* #neg=122 #pos=45 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048738;  // std dev = 2.87e-07, 389.000 (wgt'ed) examples reached here.  /* #neg=389 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7119962613194586;  // std dev = 1.190, 226.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=224 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.12670433498142267;  // std dev = 5.673, 158.000 (wgt'ed) examples reached here.  /* #neg=113 #pos=45 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839224;  // std dev = 0.000, 388.000 (wgt'ed) examples reached here.  /* #neg=388 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.13129812174635846;  // std dev = 0.180, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else if ( movie(E, A) )
%   | | then return 0.3407702135455899;  // std dev = 0.376, 405.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=269 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360618;  // std dev = 0.000, 407.000 (wgt'ed) examples reached here.  /* #neg=407 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4604337060239654;  // std dev = 1.341, 228.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=224 */
%   | else if ( genre(A, E) )
%   | | then return -0.09987683517100157;  // std dev = 5.27e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.026540915420964324;  // std dev = 5.782, 175.000 (wgt'ed) examples reached here.  /* #neg=130 #pos=45 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783597;  // std dev = 1.05e-08, 393.000 (wgt'ed) examples reached here.  /* #neg=393 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14066295462037262;  // std dev = 0.296, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else if ( genre(B, E) )
%   | | then return 0.3609255816918406;  // std dev = 1.33e-07, 224.000 (wgt'ed) examples reached here.  /* #pos=224 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.04415851842422139;  // std dev = 5.694, 161.000 (wgt'ed) examples reached here.  /* #neg=116 #pos=45 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926103;  // std dev = 1.25e-07, 420.000 (wgt'ed) examples reached here.  /* #neg=420 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2752826602974804;  // std dev = 0.935, 227.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=224 */
%   | else if ( movie(E, A) )
%   | | then return 0.043984123279406095;  // std dev = 0.447, 160.000 (wgt'ed) examples reached here.  /* #neg=115 #pos=45 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 1.23e-07, 374.000 (wgt'ed) examples reached here.  /* #neg=374 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11694048382818581;  // std dev = 0.375, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else if ( genre(B, E) )
%   | | then return 0.23013353364433273;  // std dev = 0.000, 224.000 (wgt'ed) examples reached here.  /* #pos=224 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.01005329084931358;  // std dev = 5.764, 172.000 (wgt'ed) examples reached here.  /* #neg=127 #pos=45 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109143;  // std dev = 1.07e-07, 383.000 (wgt'ed) examples reached here.  /* #neg=383 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18340403464948568;  // std dev = 0.960, 228.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=224 */
%   | else if ( movie(E, B) )
%   | | then return 0.005546938425586032;  // std dev = 5.759, 182.000 (wgt'ed) examples reached here.  /* #neg=137 #pos=45 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.07324622576333722;  // std dev = 0.000, 406.000 (wgt'ed) examples reached here.  /* #neg=406 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.16065616194668667;  // std dev = 0.700, 226.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=224 */
%   | else if ( genre(A, E) )
%   | | then return -0.0754007598569579;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.008621630967327716;  // std dev = 5.825, 183.000 (wgt'ed) examples reached here.  /* #neg=138 #pos=45 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420339;  // std dev = 0.000, 412.000 (wgt'ed) examples reached here.  /* #neg=412 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return -0.36842493848345853;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return 0.14408704482117338;  // std dev = 1.49e-07, 224.000 (wgt'ed) examples reached here.  /* #pos=224 */
%   | | else if ( genre(A, G) )
%   | | | then return -0.07030956623488427;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | else return 0.004252000255491433;  // std dev = 5.782, 175.000 (wgt'ed) examples reached here.  /* #neg=130 #pos=45 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.06419184008202554;  // std dev = 2.10e-07, 422.000 (wgt'ed) examples reached here.  /* #neg=422 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.124475
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.667 seconds
Total inference time: 0.884 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.979758
   AUC PR    = 0.871127
   CLL	      = -0.123158
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.832714
   F1        = 0.908722


Total scoring time: 1.698 seconds
Parameter learned model CLL: -0.123158


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 9, 0], 'true,false,true': [1.07e-06, 0, 224], 'true,false,false,true': [5.734, 122, 45], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.87e-07, 389, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.19, 2, 224], 'true,false,true': [0.0, 8, 0], 'true,false,false,true': [5.673, 113, 45], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 388, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.18, 18, 0], 'true,false,true': [0.376, 136, 269], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 407, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.341, 4, 224], 'true,false,true': [5.27e-09, 9, 0], 'true,false,false,true': [5.782, 130, 45], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.05e-08, 393, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.296, 12, 0], 'true,false,true': [1.33e-07, 0, 224], 'true,false,false,true': [5.694, 116, 45], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.25e-07, 420, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.935, 3, 224], 'true,false,true': [0.447, 115, 45], 'true,false,false': [0.0, 0, 0], 'false,true': [1.23e-07, 374, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.375, 21, 0], 'true,false,true': [0.0, 0, 224], 'true,false,false,true': [5.764, 127, 45], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.07e-07, 383, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.96, 4, 224], 'true,false,true': [5.759, 137, 45], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 406, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.7, 2, 224], 'true,false,true': [0.0, 20, 0], 'true,false,false,true': [5.825, 138, 45], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 412, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true,true,false': 'genre(A, G)'}, {'true,true,true,true': [0.0, 5, 0], 'true,true,true,false': [1.49e-07, 0, 224], 'true,true,false,true': [0.0, 14, 0], 'true,true,false,false': [5.782, 130, 45], 'true,false': [0.0, 0, 0], 'false': [2.1e-07, 422, 0]}]]
[{'': [0.2202437500000035, 2.1234085612368033e-16], 'true': [-9.25185853854297e-18, 0.21466369267600646], 'true,false': [5.075305255429287e-15, 0.19685180537129443], 'true,false,false': [0.19685180537129443, nan], 'false': [2.1234085612368033e-16, nan]}, {'': [0.1740900957477505, -1.2590158011213115e-16], 'true': [0.0062616719708707145, 0.19679316094319582], 'true,false': [0.0, 0.20369331837846374], 'true,false,false': [0.20369331837846374, nan], 'false': [-1.2590158011213115e-16, nan]}, {'': [0.14459960853203102, -1.7458052475678137e-17], 'true': [0.00180153294151223, 0.14146327421469335], 'true,false': [0.14146327421469335, nan], 'false': [-1.7458052475678137e-17, nan]}, {'': [0.13369728102382827, 1.0847980698627483e-16], 'true': [0.007884688631264618, 0.1824204844910532], 'true,false': [3.0839528461809902e-18, 0.19102040816326524], 'true,false,false': [0.19102040816326524, nan], 'false': [1.0847980698627483e-16, nan]}, {'': [0.10955945744446009, 3.700743415417188e-17], 'true': [0.0073250093479950915, 0.10862755910842736], 'true,false': [7.930164461608261e-17, 0.20138111955557292], 'true,false,false': [0.20138111955557292, nan], 'false': [3.700743415417188e-17, nan]}, {'': [0.0977821791471384, 4.0371746350005693e-17], 'true': [0.0038500986711865292, 0.19966776017649884], 'true,false': [0.19966776017649884, nan], 'false': [4.0371746350005693e-17, nan]}, {'': [0.09434276870159221, 3.0147048188254906e-17], 'true': [0.006692223065768531, 0.09580595377570718], 'true,false': [-3.251367429259387e-16, 0.19317874526771273], 'true,false,false': [0.19317874526771273, nan], 'false': [3.0147048188254906e-17, nan]}, {'': [0.09096463783132905, 0.0], 'true': [0.004045188251814985, 0.18226162378919392], 'true,false': [0.18226162378919392, nan], 'false': [0.0, nan]}, {'': [0.08813896582439427, -1.2018433713175238e-16], 'true': [0.002166112698810473, 0.16756072991609564], 'true,false': [-4.8572257327350596e-18, 0.18543402311206608], 'true,false,false': [0.18543402311206608, nan], 'false': [-1.2018433713175238e-16, nan]}, {'': [0.08767747986962483, 1.0418206581790569e-16], 'true': [0.08767747986962483, nan], 'true,true': [0.0056098998301816055, 0.17725205331972435], 'true,true,false': [0.0, 0.19102040816326527], 'true,true,true': [0.0, 9.912705577010327e-17]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, E).;true;true
9;true,true;genre(A, F).;true;true
9;true,false;genre(A, G).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else if ( genre(B, E) )
%   | | then return 0.858148935099509;  // std dev = 1.07e-06, 224.000 (wgt'ed) examples reached here.  /* #pos=224 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.858148935099512;  // std dev = 2.23e-07, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 125.000 (wgt'ed) examples reached here.  /* #neg=125 */
%   else return -0.1418510649004875;  // std dev = 2.48e-07, 363.000 (wgt'ed) examples reached here.  /* #neg=363 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.7194734122109543;  // std dev = 2.06e-07, 94.000 (wgt'ed) examples reached here.  /* #pos=94 */
%   | | else return 0.7066716235633898;  // std dev = 0.103, 132.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=130 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 5.27e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.719473412210955;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.12544463852839108;  // std dev = 7.74e-08, 113.000 (wgt'ed) examples reached here.  /* #neg=113 */
%   else return -0.12544463852839224;  // std dev = 0.000, 399.000 (wgt'ed) examples reached here.  /* #neg=399 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( actor(B) )
%   | | then return -0.11231637819360638;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else return -0.22527618821399634;  // std dev = 7.45e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( actor(A), director(B) )
%   | | then return 0.5568930532610042;  // std dev = 0.026, 269.000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | | else return -0.11231637819360622;  // std dev = 8.30e-08, 114.000 (wgt'ed) examples reached here.  /* #neg=114 */
%   else return -0.1123163781936062;  // std dev = 0.000, 404.000 (wgt'ed) examples reached here.  /* #neg=404 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4189506525825951;  // std dev = 0.023, 224.000 (wgt'ed) examples reached here.  /* #pos=224 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783631;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.4171423639598736;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.10159632948783631;  // std dev = 0.000, 111.000 (wgt'ed) examples reached here.  /* #neg=111 */
%   else return -0.10159632948783591;  // std dev = 2.23e-07, 402.000 (wgt'ed) examples reached here.  /* #neg=402 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( female(B) )
%   | | then return -0.09269127618926097;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return -0.10950811976983996;  // std dev = 0.050, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( genre(B, E) )
%   | | then return 0.32168710644663034;  // std dev = 0.021, 224.000 (wgt'ed) examples reached here.  /* #pos=224 */
%   | | else if ( actor(B) )
%   | | | then return -0.09269127618926074;  // std dev = 8.16e-08, 143.000 (wgt'ed) examples reached here.  /* #neg=143 */
%   | | | else return 0.3028792761412532;  // std dev = 0.572, 47.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=45 */
%   else return -0.09269127618926103;  // std dev = 1.15e-07, 421.000 (wgt'ed) examples reached here.  /* #neg=421 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2562591110144208;  // std dev = 0.024, 269.000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else if ( actor(B) )
%   | | then return -0.08514756855658628;  // std dev = 0.003, 140.000 (wgt'ed) examples reached here.  /* #neg=140 */
%   | | else return -0.24030408544764068;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.08518475138839678;  // std dev = 1.17e-07, 350.000 (wgt'ed) examples reached here.  /* #neg=350 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( actor(B) )
%   | | then return -0.07840657924235753;  // std dev = 0.002, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else return -0.19919755947102935;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(B, E) )
%   | | then return 0.2101583658454856;  // std dev = 0.016, 224.000 (wgt'ed) examples reached here.  /* #pos=224 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.21235364963219353;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.07892040354067702;  // std dev = 0.019, 137.000 (wgt'ed) examples reached here.  /* #neg=137 */
%   else return -0.07877675473109169;  // std dev = 5.58e-08, 441.000 (wgt'ed) examples reached here.  /* #neg=441 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.17765943207002916;  // std dev = 0.017, 269.000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else if ( actor(B) )
%   | | then return -0.0731387026699873;  // std dev = 0.004, 140.000 (wgt'ed) examples reached here.  /* #neg=140 */
%   | | else return -0.15956327407275292;  // std dev = 0.026, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else return -0.07324622576333724;  // std dev = 0.000, 413.000 (wgt'ed) examples reached here.  /* #neg=413 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.15197036227456276;  // std dev = 7.88e-08, 94.000 (wgt'ed) examples reached here.  /* #pos=94 */
%   | | else if ( actor(A) )
%   | | | then return 0.15362755838148334;  // std dev = 0.000, 130.000 (wgt'ed) examples reached here.  /* #pos=130 */
%   | | | else return -0.1480373582383268;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(A, E) )
%   | | then return -0.06792745123889006;  // std dev = 0.001, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.15435960410276703;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.06866021443511071;  // std dev = 0.018, 135.000 (wgt'ed) examples reached here.  /* #neg=135 */
%   else return -0.06842697784420329;  // std dev = 0.000, 377.000 (wgt'ed) examples reached here.  /* #neg=377 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( genre(A, E) )
%   | | then return -0.1303219255610897;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0.1341536685442669;  // std dev = 0.010, 224.000 (wgt'ed) examples reached here.  /* #pos=224 */
%   | else if ( genre(A, F) )
%   | | then return -0.06391822929086056;  // std dev = 0.001, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.1352671577084533;  // std dev = 4.08e-08, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.06440619085172958;  // std dev = 0.017, 130.000 (wgt'ed) examples reached here.  /* #neg=130 */
%   else return -0.06419184008202548;  // std dev = 2.21e-07, 441.000 (wgt'ed) examples reached here.  /* #neg=441 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063959
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.501 seconds
Total inference time: 0.862 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064422
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.662 seconds
Refined model CLL: -0.064422


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063959
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 7.528 seconds
Total inference time: 0.862 seconds
AUC ROC: 1.0
Total revision time: 7.528
Best scored revision CLL: -0.064422


Dataset: 4_cora_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 00:09:39
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063959, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 7.528, 'Inference time': 0.862, 'parameter_0.8': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.124475, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 1.667, 'Inference time': 0.884}}


Amount of data: 1.0
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;haswordauthor(E, C).;true;true
7;true,true,true;author(F, E), title(F, D).;false;false
7;true,true,false;title(G, D), venue(G, B).;false;false
7;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
7;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
7;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, B).;false;true
8;true,true,false;title(F, D), venue(F, A).;false;false
8;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
8;true,false,false;haswordvenue(A, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
8;false,true;haswordauthor(M, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;true,true;author(F, E), venue(F, B).;true;true
9;true,true,true;samebib(F, G), venue(G, A).;false;false
9;true,true,false;author(H, E), venue(H, A).;false;false
9;true,false;haswordtitle(I, C).;true;true
9;true,false,true;title(J, I), venue(J, A).;false;false
9;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995086;  // std dev = 1.07e-06, 278.000 (wgt'ed) examples reached here.  /* #pos=278 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.15022814302030554;  // std dev = 6.463, 202.000 (wgt'ed) examples reached here.  /* #neg=143 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048735;  // std dev = 2.38e-07, 466.000 (wgt'ed) examples reached here.  /* #neg=466 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7134382832771051;  // std dev = 1.191, 280.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=278 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.1058285396504988;  // std dev = 6.576, 221.000 (wgt'ed) examples reached here.  /* #neg=162 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839235;  // std dev = 0.000, 502.000 (wgt'ed) examples reached here.  /* #neg=502 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1265842492691333;  // std dev = 0.151, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else if ( movie(E, A) )
%   | | then return 0.34325398826717424;  // std dev = 0.377, 506.000 (wgt'ed) examples reached here.  /* #neg=169 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360576;  // std dev = 0.000, 520.000 (wgt'ed) examples reached here.  /* #neg=520 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4570315803996136;  // std dev = 1.639, 284.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=278 */
%   | else if ( genre(A, E) )
%   | | then return -0.10030141919007264;  // std dev = 9.13e-09, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.04306599325879332;  // std dev = 6.543, 215.000 (wgt'ed) examples reached here.  /* #neg=156 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783522;  // std dev = 1.69e-08, 545.000 (wgt'ed) examples reached here.  /* #neg=545 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11139228234216943;  // std dev = 0.265, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else if ( genre(B, E) )
%   | | then return 0.360804801412428;  // std dev = 0.000, 278.000 (wgt'ed) examples reached here.  /* #pos=278 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.027868920176016082;  // std dev = 6.576, 221.000 (wgt'ed) examples reached here.  /* #neg=162 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926139;  // std dev = 0.000, 486.000 (wgt'ed) examples reached here.  /* #neg=486 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.27458765867775975;  // std dev = 1.091, 282.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=278 */
%   | else if ( movie(E, A) )
%   | | then return 0.020291197476869915;  // std dev = 0.432, 231.000 (wgt'ed) examples reached here.  /* #neg=172 #pos=59 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 1.53e-07, 516.000 (wgt'ed) examples reached here.  /* #neg=516 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.13479598474014332;  // std dev = 0.426, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else if ( genre(B, E) )
%   | | then return 0.23018529161297785;  // std dev = 3.70e-07, 278.000 (wgt'ed) examples reached here.  /* #pos=278 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.029024330331454358;  // std dev = 6.531, 213.000 (wgt'ed) examples reached here.  /* #neg=154 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109214;  // std dev = 1.12e-07, 511.000 (wgt'ed) examples reached here.  /* #neg=511 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18845985015220104;  // std dev = 0.687, 280.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=278 */
%   | else if ( movie(E, B) )
%   | | then return 0.03500875232015725;  // std dev = 6.461, 212.000 (wgt'ed) examples reached here.  /* #neg=153 #pos=59 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.07324622576333738;  // std dev = 0.000, 488.000 (wgt'ed) examples reached here.  /* #neg=488 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.15555027519898254;  // std dev = 1.109, 283.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=278 */
%   | else if ( genre(A, E) )
%   | | then return -0.07691150096050024;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.02492054925672618;  // std dev = 6.495, 207.000 (wgt'ed) examples reached here.  /* #neg=148 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.0684269778442035;  // std dev = 0.000, 470.000 (wgt'ed) examples reached here.  /* #neg=470 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return -0.37155399105260084;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.14412286535943777;  // std dev = 1.93e-07, 278.000 (wgt'ed) examples reached here.  /* #pos=278 */
%   | | else if ( genre(A, G) )
%   | | | then return -0.0716256902742813;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | | else return 0.004478241496921889;  // std dev = 6.565, 219.000 (wgt'ed) examples reached here.  /* #neg=160 #pos=59 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.06419184008202533;  // std dev = 2.46e-07, 528.000 (wgt'ed) examples reached here.  /* #neg=528 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.128751
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.895 seconds
Total inference time: 0.847 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.978805
   AUC PR    = 0.865091
   CLL	      = -0.127006
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.824926
   F1        = 0.904065


Total scoring time: 1.94 seconds
Parameter learned model CLL: -0.127006


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 19, 0], 'true,false,true': [1.07e-06, 0, 278], 'true,false,false,true': [6.463, 143, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.38e-07, 466, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.191, 2, 278], 'true,false,true': [0.0, 17, 0], 'true,false,false,true': [6.576, 162, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 502, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.151, 16, 0], 'true,false,true': [0.377, 169, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 520, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.639, 6, 278], 'true,false,true': [9.13e-09, 18, 0], 'true,false,false,true': [6.543, 156, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.69e-08, 545, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.265, 20, 0], 'true,false,true': [0.0, 0, 278], 'true,false,false,true': [6.576, 162, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 486, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [1.091, 4, 278], 'true,false,true': [0.432, 172, 59], 'true,false,false': [0.0, 0, 0], 'false,true': [1.53e-07, 516, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.426, 19, 0], 'true,false,true': [3.7e-07, 0, 278], 'true,false,false,true': [6.531, 154, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.12e-07, 511, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.687, 2, 278], 'true,false,true': [6.461, 153, 59], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 488, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [1.109, 5, 278], 'true,false,true': [0.0, 13, 0], 'true,false,false,true': [6.495, 148, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 470, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true,true,false': 'genre(A, G)'}, {'true,true,true,true': [0.0, 4, 0], 'true,true,true,false': [1.93e-07, 0, 278], 'true,true,false,true': [0.0, 28, 0], 'true,true,false,false': [6.565, 160, 59], 'true,false': [0.0, 0, 0], 'false': [2.46e-07, 528, 0]}]]
[{'': [0.21925213151754677, 1.2198158553821462e-16], 'true': [0.0, 0.20916232638889157], 'true,false': [4.089454594302735e-15, 0.20676894422115524], 'true,false,false': [0.20676894422115524, nan], 'false': [1.2198158553821462e-16, nan]}, {'': [0.18460275930164152, -1.3977309792093604e-16], 'true': [0.005062766593498529, 0.18526556195280838], 'true,false': [0.0, 0.1956962388157466], 'true,false,false': [0.1956962388157466, nan], 'false': [-1.3977309792093604e-16, nan]}, {'': [0.14430756873582562, 0.0], 'true': [0.0014250050151950328, 0.1420593731802608], 'true,false': [0.1420593731802608, nan], 'false': [0.0, nan]}, {'': [0.13338625524570283, 2.868245905820588e-16], 'true': [0.009460966953983565, 0.18519612175073524], 'true,false': [4.625929269271485e-18, 0.19911303407246903], 'true,false,false': [0.19911303407246903, nan], 'false': [2.868245905820588e-16, nan]}, {'': [0.11367029866968967, -1.827527612551698e-17], 'true': [0.0035234708951674713, 0.11402107044590594], 'true,false': [-5.111818242878419e-17, 0.1956962388157476], 'true,false,false': [0.1956962388157476, nan], 'false': [-1.827527612551698e-17, nan]}, {'': [0.10249612887803539, 4.561381419002581e-17], 'true': [0.00422203662793541, 0.18691932742822556], 'true,false': [0.18691932742822556, nan], 'false': [4.561381419002581e-17, nan]}, {'': [0.09633306099208427, 2.4333655334250005e-17], 'true': [0.009561201169181188, 0.09681750482076583], 'true,false': [4.920125058770478e-16, 0.20026890608124281], 'true,false,false': [0.20026890608124281, nan], 'false': [2.4333655334250005e-17, nan]}, {'': [0.09158520608305615, -1.911039632551499e-17], 'true': [0.0016839334531922783, 0.19692186800561967], 'true,false': [0.19692186800561967, nan], 'false': [-1.911039632551499e-17, nan]}, {'': [0.0911561590448066, -1.2188831504395336e-16], 'true': [0.0043459691009226165, 0.19232007262295064], 'true,false': [-2.135044278125301e-18, 0.20378538588998613], 'true,false,false': [0.20378538588998613, nan], 'false': [-1.2188831504395336e-16, nan]}, {'': [0.08868351051665345, 1.1438661465834946e-16], 'true': [0.08868351051665345, nan], 'true,true': [0.0037184491940267283, 0.1750963957542103], 'true,true,false': [-5.9476233462061954e-18, 0.1968265882696376], 'true,true,true': [0.0, 1.341852288755585e-16]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, E).;true;true
9;true,true;genre(A, F).;true;true
9;true,false;genre(A, G).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995086;  // std dev = 1.07e-06, 278.000 (wgt'ed) examples reached here.  /* #pos=278 */
%   | | else if ( actor(B) )
%   | | | then return -0.14185106490048804;  // std dev = 0.000, 146.000 (wgt'ed) examples reached here.  /* #neg=146 */
%   | | | else return 0.8581489350995125;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   else return -0.1418510649004874;  // std dev = 2.15e-07, 471.000 (wgt'ed) examples reached here.  /* #neg=471 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.7194734122109551;  // std dev = 0.000, 111.000 (wgt'ed) examples reached here.  /* #pos=111 */
%   | | else return 0.709474382024692;  // std dev = 0.091, 169.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=167 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.7194734122109543;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.12952574245630324;  // std dev = 0.306, 152.000 (wgt'ed) examples reached here.  /* #neg=152 */
%   else return -0.12544463852839235;  // std dev = 0.000, 504.000 (wgt'ed) examples reached here.  /* #neg=504 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( actor(B) )
%   | | then return -0.11231637819360636;  // std dev = 9.13e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return -0.2257657213682376;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( director(B), actor(A) )
%   | | then return 0.556589312522231;  // std dev = 0.023, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | | else return -0.11461260539862052;  // std dev = 0.246, 159.000 (wgt'ed) examples reached here.  /* #neg=159 */
%   else return -0.11231637819360576;  // std dev = 0.000, 523.000 (wgt'ed) examples reached here.  /* #neg=523 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.4172162157046675;  // std dev = 0.000, 111.000 (wgt'ed) examples reached here.  /* #pos=111 */
%   | | else return 0.41244942981491256;  // std dev = 0.066, 169.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=167 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783635;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.4172162157046663;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.10416273124896432;  // std dev = 0.263, 169.000 (wgt'ed) examples reached here.  /* #neg=169 */
%   else return -0.1015963294878354;  // std dev = 3.50e-07, 500.000 (wgt'ed) examples reached here.  /* #neg=500 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( actor(B) )
%   | | then return -0.09269127618926094;  // std dev = 9.13e-09, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else return -0.2600530252437075;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.3224471151642654;  // std dev = 0.026, 278.000 (wgt'ed) examples reached here.  /* #pos=278 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.32051025352600726;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.09338237259501966;  // std dev = 0.174, 172.000 (wgt'ed) examples reached here.  /* #neg=172 */
%   else return -0.09269127618926151;  // std dev = 0.000, 512.000 (wgt'ed) examples reached here.  /* #neg=512 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.2561251725962778;  // std dev = 0.025, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else if ( actor(B) )
%   | | then return -0.0845171957319853;  // std dev = 0.003, 177.000 (wgt'ed) examples reached here.  /* #neg=177 */
%   | | else return -0.21160486017243754;  // std dev = 0.012, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else return -0.08518475138839678;  // std dev = 1.48e-07, 483.000 (wgt'ed) examples reached here.  /* #neg=483 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( actor(B) )
%   | | then return -0.07882521352203599;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else return -0.17985195006564805;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(B, E) )
%   | | then return 0.21063285994526973;  // std dev = 0.020, 278.000 (wgt'ed) examples reached here.  /* #pos=278 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.20947989827330224;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.07875281377620617;  // std dev = 0.090, 145.000 (wgt'ed) examples reached here.  /* #neg=145 */
%   else return -0.07877675473109215;  // std dev = 1.03e-07, 515.000 (wgt'ed) examples reached here.  /* #neg=515 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.17644327067035687;  // std dev = 0.000, 111.000 (wgt'ed) examples reached here.  /* #pos=111 */
%   | | else return 0.17271510674861815;  // std dev = 0.044, 170.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=167 */
%   | else if ( director(B), actor(A) )
%   | | then return 0.1768927050748577;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | else return -0.07445015392252527;  // std dev = 0.146, 145.000 (wgt'ed) examples reached here.  /* #neg=145 */
%   else return -0.07324622576333695;  // std dev = 1.46e-07, 493.000 (wgt'ed) examples reached here.  /* #neg=493 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.1522481388856535;  // std dev = 8.43e-08, 111.000 (wgt'ed) examples reached here.  /* #pos=111 */
%   | | else return 0.14685046354021164;  // std dev = 0.050, 171.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=167 */
%   | else if ( genre(A, E) )
%   | | then return -0.06838970734134883;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.15258924330290646;  // std dev = 3.94e-08, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.06991471577654193;  // std dev = 0.159, 151.000 (wgt'ed) examples reached here.  /* #neg=151 */
%   else return -0.0684269778442035;  // std dev = 0.000, 465.000 (wgt'ed) examples reached here.  /* #neg=465 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( genre(A, E) )
%   | | then return -0.20138873750712669;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.1352959916955565;  // std dev = 0.023, 278.000 (wgt'ed) examples reached here.  /* #pos=278 */
%   | else if ( genre(A, F) )
%   | | then return -0.06415895527027272;  // std dev = 2.63e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.13388631306112947;  // std dev = 4.47e-08, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.06440838162726299;  // std dev = 0.107, 167.000 (wgt'ed) examples reached here.  /* #neg=167 */
%   else return -0.06419184008202534;  // std dev = 2.46e-07, 523.000 (wgt'ed) examples reached here.  /* #neg=523 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063957
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.83 seconds
Total inference time: 0.825 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064892
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 2.034 seconds
Refined model CLL: -0.064892


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063957
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 8.699 seconds
Total inference time: 0.825 seconds
AUC ROC: 1.0
Total revision time: 8.699
Best scored revision CLL: -0.064892


Dataset: 4_cora_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 00:09:50
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063957, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 8.699, 'Inference time': 0.825, 'parameter_1.0': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.128751, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 1.895, 'Inference time': 0.847}}


Starting fold 5

Target train facts examples: 915
Target train pos examples: 337
Target train neg examples: 12165

Target test facts examples: 163
Target test pos	 examples: 45
Target test neg examples: 2071

Amount of data: 0.2
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;haswordauthor(E, C).;true;true
7;true,true,true;author(F, E), title(F, D).;false;false
7;true,true,false;title(G, D), venue(G, B).;false;false
7;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
7;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
7;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, B).;false;true
8;true,true,false;title(F, D), venue(F, A).;false;false
8;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
8;true,false,false;haswordvenue(A, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
8;false,true;haswordauthor(M, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;true,true;author(F, E), venue(F, B).;true;true
9;true,true,true;samebib(F, G), venue(G, A).;false;false
9;true,true,false;author(H, E), venue(H, A).;false;false
9;true,false;haswordtitle(I, C).;true;true
9;true,false,true;title(J, I), venue(J, A).;false;false
9;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995125;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.1308762078267851;  // std dev = 2.558, 33.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=9 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048763;  // std dev = 8.69e-08, 105.000 (wgt'ed) examples reached here.  /* #neg=105 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7051527672831688;  // std dev = 0.838, 59.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=58 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.09145896494019376;  // std dev = 2.598, 36.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=9 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839133;  // std dev = 0.000, 108.000 (wgt'ed) examples reached here.  /* #neg=108 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.19683750779378978;  // std dev = 0.098, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( movie(E, A) )
%   | | then return 0.3087008813895819;  // std dev = 0.378, 107.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=67 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360621;  // std dev = 7.60e-08, 94.000 (wgt'ed) examples reached here.  /* #neg=94 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.47057398297606573;  // std dev = 0.669, 59.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=58 */
%   | else if ( genre(A, E) )
%   | | then return -0.09413731562322976;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.019434659059973353;  // std dev = 2.683, 45.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=9 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783627;  // std dev = 3.95e-09, 98.000 (wgt'ed) examples reached here.  /* #neg=98 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.0864106281092667;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.36758841099460554;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.014645243876517848;  // std dev = 2.631, 39.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=9 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926096;  // std dev = 4.94e-08, 101.000 (wgt'ed) examples reached here.  /* #neg=101 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2869660788849976;  // std dev = 2.98e-08, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else if ( movie(E, A) )
%   | | then return 0.05438881732447276;  // std dev = 0.430, 35.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=9 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839682;  // std dev = 5.58e-08, 98.000 (wgt'ed) examples reached here.  /* #neg=98 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08391595598082235;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.23198597870928542;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.013762584125315;  // std dev = 2.659, 42.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=9 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.0787767547310916;  // std dev = 5.58e-08, 97.000 (wgt'ed) examples reached here.  /* #neg=97 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1932362976364654;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else if ( movie(E, B) )
%   | | then return 0.02288766848280972;  // std dev = 2.592, 38.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=9 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.07324622576333707;  // std dev = 0.000, 85.000 (wgt'ed) examples reached here.  /* #neg=85 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.16488057247211726;  // std dev = 3.94e-08, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else if ( genre(A, E) )
%   | | then return -0.07934202804454658;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.020341315876249537;  // std dev = 2.598, 36.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=9 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420265;  // std dev = 4.84e-09, 104.000 (wgt'ed) examples reached here.  /* #neg=104 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.14341218968412225;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else if ( genre(A, G) )
%   | | | then return -0.0737363750540105;  // std dev = 2.63e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return -0.023974827644617856;  // std dev = 2.668, 43.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=9 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.06419184008202626;  // std dev = 0.000, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */


Results
   AUC ROC   = 0.971565
   AUC PR    = 0.823063
   CLL	      = -0.119924
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.777778
   F1        = 0.875


Total learning time: 0.985 seconds
Total inference time: 0.892 seconds
AUC ROC: 0.971565


Results scoring model
   AUC ROC   = 0.983906
   AUC PR    = 0.898803
   CLL	      = -0.115531
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.865672
   F1        = 0.928


Total scoring time: 0.942 seconds
Parameter learned model CLL: -0.115531


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 3, 0], 'true,false,true': [0.0, 0, 58], 'true,false,false,true': [2.558, 24, 9], 'true,false,false,false': [0.0, 0, 0], 'false,true': [8.69e-08, 105, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.838, 1, 58], 'true,false,true': [0.0, 3, 0], 'true,false,false,true': [2.598, 27, 9], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 108, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.098, 4, 0], 'true,false,true': [0.378, 40, 67], 'true,false,false': [0.0, 0, 0], 'false,true': [7.6e-08, 94, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.669, 1, 58], 'true,false,true': [0.0, 2, 0], 'true,false,false,true': [2.683, 36, 9], 'true,false,false,false': [0.0, 0, 0], 'false,true': [3.95e-09, 98, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 4, 0], 'true,false,true': [0.0, 0, 58], 'true,false,false,true': [2.631, 30, 9], 'true,false,false,false': [0.0, 0, 0], 'false,true': [4.94e-08, 101, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [2.98e-08, 0, 58], 'true,false,true': [0.43, 26, 9], 'true,false,false': [0.0, 0, 0], 'false,true': [5.58e-08, 98, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 3, 0], 'true,false,true': [0.0, 0, 58], 'true,false,false,true': [2.659, 33, 9], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.58e-08, 97, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 58], 'true,false,true': [2.592, 29, 9], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 85, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [3.94e-08, 0, 58], 'true,false,true': [0.0, 3, 0], 'true,false,false,true': [2.598, 27, 9], 'true,false,false,false': [0.0, 0, 0], 'false,true': [4.84e-09, 104, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true,true,false': 'genre(A, G)'}, {'true,true,true,true': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 58], 'true,true,false,true': [2.63e-09, 5, 0], 'true,true,false,false': [2.668, 34, 9], 'true,false': [0.0, 0, 0], 'false': [0.0, 67, 0]}]]
[{'': [0.204730647351742, 7.190015778524824e-17], 'true': [0.0, 0.19417944692669875], 'true,false': [-3.675221047035001e-16, 0.19834710743801665], 'true,false,false': [0.19834710743801665, nan], 'false': [7.190015778524824e-17, nan]}, {'': [0.17257477557687345, -6.1679056923619804e-18], 'true': [0.011894690526567029, 0.17641755075959678], 'true,false': [0.0, 0.18749999999999978], 'true,false,false': [0.18749999999999978, nan], 'false': [-6.1679056923619804e-18, nan]}, {'': [0.14657947604651403, 6.141659285160441e-17], 'true': [0.0023812737829636693, 0.1427603670852867], 'true,false': [0.1427603670852867, nan], 'false': [6.141659285160441e-17, nan]}, {'': [0.13227442620732702, 1.8126090197961738e-17], 'true': [0.007581573191963016, 0.15341885188808738], 'true,false': [0.0, 0.16000000000000017], 'true,false,false': [0.16000000000000017, nan], 'false': [1.8126090197961738e-17, nan]}, {'': [0.10101141071684705, 2.41830757839143e-17], 'true': [0.0, 0.10131929709039977], 'true,false': [-1.0719394720518753e-16, 0.17751479289940805], 'true,false,false': [0.17751479289940805, nan], 'false': [2.41830757839143e-17, nan]}, {'': [0.08224917538301983, 3.172065784643304e-17], 'true': [1.5313421029312504e-17, 0.18481289929950925], 'true,false': [0.18481289929950925, nan], 'false': [3.172065784643304e-17, nan]}, {'': [0.08421690946115608, 3.204767493763338e-17], 'true': [-1.1564823173178713e-18, 0.08542586366883738], 'true,false': [-7.656710514656253e-17, 0.16836734693877556], 'true,false,false': [0.16836734693877556, nan], 'false': [3.204767493763338e-17, nan]}, {'': [0.07692583923476624, -7.836868409118752e-18], 'true': [-3.828355257328126e-17, 0.17680685794019305], 'true,false': [0.17680685794019305, nan], 'false': [-7.836868409118752e-18, nan]}, {'': [0.07544085439885641, 2.4019248128909638e-17], 'true': [2.6798486801296883e-17, 0.17378249247729433], 'true,false': [0.0, 0.18749999999999972], 'true,false,false': [0.18749999999999972, nan], 'false': [2.4019248128909638e-17, nan]}, {'': [0.07461822758030007, -6.628197161941233e-18], 'true': [0.07461822758030007, nan], 'true,true': [-1.5313421029312504e-17, 0.14848688404642424], 'true,true,false': [1.3877787807814458e-18, 0.16549486208761496], 'true,true,true': [nan, -1.5313421029312504e-17]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, E).;true;true
9;true,false;genre(A, G).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995125;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else if ( actor(B) )
%   | | | then return -0.1418510649004877;  // std dev = 2.79e-08, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.14185106490048763;  // std dev = 8.16e-08, 109.000 (wgt'ed) examples reached here.  /* #neg=109 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109544;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( actor(B) )
%   | | | then return -0.12544463852839138;  // std dev = 0.000, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | | else return 0.7194734122109543;  // std dev = 2.98e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.12544463852839138;  // std dev = 0.000, 98.000 (wgt'ed) examples reached here.  /* #neg=98 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( director(B), actor(A) )
%   | | then return 0.5553664367462837;  // std dev = 2.15e-07, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | | else if ( female(A) )
%   | | | then return -0.11231637819360636;  // std dev = 1.05e-08, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | | else return -0.14252703138088899;  // std dev = 0.317, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return -0.11231637819360618;  // std dev = 8.43e-08, 106.000 (wgt'ed) examples reached here.  /* #neg=106 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4175135841583103;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( actor(B) )
%   | | | then return -0.09978002030497866;  // std dev = 0.006, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | | else return 0.4175135841583102;  // std dev = 1.49e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.10159632948783631;  // std dev = 0.000, 106.000 (wgt'ed) examples reached here.  /* #neg=106 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14090164361146756;  // std dev = 0.167, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.3207118471601497;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.3207118471601497;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.10692159617921976;  // std dev = 0.414, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   else return -0.09269127618926107;  // std dev = 1.05e-08, 83.000 (wgt'ed) examples reached here.  /* #neg=83 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.2551722425694895;  // std dev = 1.49e-08, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else return 0.22887232549975287;  // std dev = 0.113, 39.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=37 */
%   | else if ( actor(B) )
%   | | then return -0.08264172326831914;  // std dev = 0.007, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | | else return 0.2551722425694894;  // std dev = 1.83e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.08518475138839682;  // std dev = 5.48e-08, 99.000 (wgt'ed) examples reached here.  /* #neg=99 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.0755257333716843;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(B, E) )
%   | | then return 0.21255997888965153;  // std dev = 0.016, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else if ( actor(B) )
%   | | | then return -0.07683668389698708;  // std dev = 0.006, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | | else return 0.2097577156325357;  // std dev = 1.67e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.07877675473109155;  // std dev = 6.83e-08, 117.000 (wgt'ed) examples reached here.  /* #neg=117 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1791498938381617;  // std dev = 0.014, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else if ( actor(B) )
%   | | then return -0.07167129382073087;  // std dev = 0.006, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | else return 0.17709649774527736;  // std dev = 7.45e-09, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.07324622576333713;  // std dev = 0.000, 118.000 (wgt'ed) examples reached here.  /* #neg=118 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.15430030239794318;  // std dev = 0.013, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else if ( genre(A, E) )
%   | | then return -0.06586899748040466;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( actor(B) )
%   | | | then return -0.06662262029099215;  // std dev = 0.004, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | | else return 0.15274385809367097;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.06842697784420265;  // std dev = 4.89e-08, 102.000 (wgt'ed) examples reached here.  /* #neg=102 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.13326465559200834;  // std dev = 1.49e-08, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else return 0.1232457300141828;  // std dev = 0.080, 38.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=37 */
%   | else if ( genre(A, E) )
%   | | then return -0.0619301194122338;  // std dev = 1.32e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.13400703000801117;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.08486244130697505;  // std dev = 0.603, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   else return -0.06419184008202626;  // std dev = 0.000, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063994
   Precision = 0.978261 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.989011


Total learning time: 1.301 seconds
Total inference time: 0.865 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.069515
   Precision = 0.858974 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.924138


Total scoring time: 0.885 seconds
Refined model CLL: -0.069515


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063994
   Precision = 0.978261 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.989011


Total learning time: 4.1129999999999995 seconds
Total inference time: 0.865 seconds
AUC ROC: 1.0
Total revision time: 4.1129999999999995
Best scored revision CLL: -0.069515


Dataset: 4_cora_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 00:09:57
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063994, 'Precision': [0.978261, 0.5], 'Recall': 1.0, 'F1': 0.989011, 'Learning time': 4.1129999999999995, 'Inference time': 0.865, 'parameter_0.2': {'AUC ROC': 0.971565, 'AUC PR': 0.823063, 'CLL': -0.119924, 'Precision': [1.0, 0.5], 'Recall': 0.777778, 'F1': 0.875, 'Learning time': 0.985, 'Inference time': 0.892}}


Amount of data: 0.4
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;haswordauthor(E, C).;true;true
7;true,true,true;author(F, E), title(F, D).;false;false
7;true,true,false;title(G, D), venue(G, B).;false;false
7;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
7;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
7;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, B).;false;true
8;true,true,false;title(F, D), venue(F, A).;false;false
8;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
8;true,false,false;haswordvenue(A, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
8;false,true;haswordauthor(M, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;true,true;author(F, E), venue(F, B).;true;true
9;true,true,true;samebib(F, G), venue(G, A).;false;false
9;true,true,false;author(H, E), venue(H, A).;false;false
9;true,false;haswordtitle(I, C).;true;true
9;true,false,true;title(J, I), venue(J, A).;false;false
9;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995107;  // std dev = 6.19e-07, 116.000 (wgt'ed) examples reached here.  /* #pos=116 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.10139217834275562;  // std dev = 3.691, 74.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=18 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048843;  // std dev = 0.000, 208.000 (wgt'ed) examples reached here.  /* #neg=208 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.6981729571502993;  // std dev = 1.445, 119.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=116 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.06757504316671899;  // std dev = 3.742, 81.000 (wgt'ed) examples reached here.  /* #neg=63 #pos=18 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.1254446385283916;  // std dev = 0.000, 191.000 (wgt'ed) examples reached here.  /* #neg=191 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( movie(E, A) )
%   | | then return 0.3489734808444937;  // std dev = 0.365, 199.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=134 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360663;  // std dev = 0.000, 203.000 (wgt'ed) examples reached here.  /* #neg=203 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.456593076487158;  // std dev = 1.160, 119.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=116 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783627;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.021547715540007097;  // std dev = 3.805, 92.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=18 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783652;  // std dev = 0.000, 197.000 (wgt'ed) examples reached here.  /* #neg=197 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12543831739884256;  // std dev = 0.179, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(B, E) )
%   | | then return 0.3631106216202318;  // std dev = 0.000, 116.000 (wgt'ed) examples reached here.  /* #pos=116 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.0017938825541754645;  // std dev = 3.767, 85.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=18 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926057;  // std dev = 9.06e-08, 195.000 (wgt'ed) examples reached here.  /* #neg=195 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.27925641085392905;  // std dev = 0.546, 117.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=116 */
%   | else if ( movie(E, A) )
%   | | then return -0.04212946721634406;  // std dev = 0.370, 109.000 (wgt'ed) examples reached here.  /* #neg=91 #pos=18 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 8.02e-08, 210.000 (wgt'ed) examples reached here.  /* #neg=210 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11990414721352176;  // std dev = 0.221, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(B, E) )
%   | | then return 0.23071905510956753;  // std dev = 1.43e-07, 116.000 (wgt'ed) examples reached here.  /* #pos=116 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.04724670623391078;  // std dev = 3.666, 71.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=18 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109147;  // std dev = 7.45e-08, 196.000 (wgt'ed) examples reached here.  /* #neg=196 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1840447953041315;  // std dev = 0.685, 118.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=116 */
%   | else if ( movie(E, B) )
%   | | then return 0.007737008374788902;  // std dev = 3.733, 85.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=18 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.07324622576333664;  // std dev = 1.20e-07, 201.000 (wgt'ed) examples reached here.  /* #neg=201 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.16534016063597115;  // std dev = 1.03e-07, 116.000 (wgt'ed) examples reached here.  /* #pos=116 */
%   | else if ( genre(A, E) )
%   | | then return -0.07169473363805227;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.03457792390920078;  // std dev = 3.674, 72.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=18 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420262;  // std dev = 5.74e-09, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.14376565930799007;  // std dev = 8.94e-08, 116.000 (wgt'ed) examples reached here.  /* #pos=116 */
%   | | else if ( genre(A, G) )
%   | | | then return -0.06706720015739048;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return -0.014427211451301455;  // std dev = 3.778, 87.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=18 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.06419184008202626;  // std dev = 0.000, 190.000 (wgt'ed) examples reached here.  /* #neg=190 */


Results
   AUC ROC   = 0.971565
   AUC PR    = 0.823063
   CLL	      = -0.116772
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.777778
   F1        = 0.875


Total learning time: 1.148 seconds
Total inference time: 0.882 seconds
AUC ROC: 0.971565


Results scoring model
   AUC ROC   = 0.98392
   AUC PR    = 0.898074
   CLL	      = -0.112511
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.865672
   F1        = 0.928


Total scoring time: 1.114 seconds
Parameter learned model CLL: -0.112511


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 9, 0], 'true,false,true': [6.19e-07, 0, 116], 'true,false,false,true': [3.691, 56, 18], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 208, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.445, 3, 116], 'true,false,true': [0.0, 7, 0], 'true,false,false,true': [3.742, 63, 18], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 191, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 7, 0], 'true,false,true': [0.365, 65, 134], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 203, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.16, 3, 116], 'true,false,true': [0.0, 7, 0], 'true,false,false,true': [3.805, 74, 18], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 197, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.179, 6, 0], 'true,false,true': [0.0, 0, 116], 'true,false,false,true': [3.767, 67, 18], 'true,false,false,false': [0.0, 0, 0], 'false,true': [9.06e-08, 195, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.546, 1, 116], 'true,false,true': [0.37, 91, 18], 'true,false,false': [0.0, 0, 0], 'false,true': [8.02e-08, 210, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.221, 6, 0], 'true,false,true': [1.43e-07, 0, 116], 'true,false,false,true': [3.666, 53, 18], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.45e-08, 196, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.685, 2, 116], 'true,false,true': [3.733, 67, 18], 'true,false,false': [0.0, 0, 0], 'false,true': [1.2e-07, 201, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [1.03e-07, 0, 116], 'true,false,true': [0.0, 7, 0], 'true,false,false,true': [3.674, 54, 18], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.74e-09, 206, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true,true,false': 'genre(A, G)'}, {'true,true,true,true': [0.0, 0, 0], 'true,true,true,false': [8.94e-08, 0, 116], 'true,true,false,true': [0.0, 7, 0], 'true,true,false,false': [3.778, 69, 18], 'true,false': [0.0, 0, 0], 'false': [0.0, 190, 0]}]]
[{'': [0.21994394080958, -2.391249591500337e-16], 'true': [-9.25185853854297e-18, 0.2078670360110849], 'true,false': [3.3076989423315008e-15, 0.1840759678597511], 'true,false,false': [0.1840759678597511, nan], 'false': [-2.391249591500337e-16, nan]}, {'': [0.1808517878598263, -4.6501487942414933e-17], 'true': [0.01754342958391836, 0.16181876172453477], 'true,false': [-1.982541115402065e-18, 0.1728395061728401], 'true,false,false': [0.1728395061728401, nan], 'false': [-4.6501487942414933e-17, nan]}, {'': [0.13589063572994578, -4.594026308793751e-17], 'true': [-1.982541115402065e-18, 0.1334400367981262], 'true,false': [0.1334400367981262, nan], 'false': [-4.594026308793751e-17, nan]}, {'': [0.1308057656178377, -9.242465788757649e-17], 'true': [0.011316274267691308, 0.14666609905010944], 'true,false': [0.0, 0.15737240075614434], 'true,false,false': [0.15737240075614434, nan], 'false': [-9.242465788757649e-17, nan]}, {'': [0.10339689430391237, 4.2131540421672605e-17], 'true': [0.00536184353991017, 0.10308523363733475], 'true,false': [-5.359697360259376e-16, 0.16692041522491374], 'true,false,false': [0.16692041522491374, nan], 'false': [4.2131540421672605e-17, nan]}, {'': [0.09300664630907099, 3.066330258488528e-17], 'true': [0.0025450060958947525, 0.1366351098320736], 'true,false': [0.1366351098320736, nan], 'false': [3.066330258488528e-17, nan]}, {'': [0.07993271699054534, 2.832201593431522e-17], 'true': [0.008151130102557585, 0.07978177717409216], 'true,false': [1.761043418370938e-16, 0.18924816504661737], 'true,false,false': [0.18924816504661737, nan], 'false': [2.832201593431522e-17, nan]}, {'': [0.07854186921077917, 7.180546925436336e-17], 'true': [0.003976369465639151, 0.1639875423782028], 'true,false': [0.1639875423782028, nan], 'false': [7.180546925436336e-17, nan]}, {'': [0.07433592737954858, 3.395342259775964e-17], 'true': [9.188052617587502e-17, 0.1717981276048787], 'true,false': [-9.912705577010326e-19, 0.18750000000000033], 'true,false,false': [0.18750000000000033, nan], 'false': [3.395342259775964e-17, nan]}, {'': [0.07456382081715605, -3.505967446184705e-18], 'true': [0.07456382081715605, nan], 'true,true': [6.891039463190627e-17, 0.1520618553921503], 'true,true,false': [0.0, 0.16409036860879866], 'true,true,true': [nan, 6.891039463190627e-17]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, E).;true;true
9;true,false;genre(A, G).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995107;  // std dev = 6.19e-07, 116.000 (wgt'ed) examples reached here.  /* #pos=116 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return -0.14185106490048766;  // std dev = 5.58e-08, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   else return -0.1418510649004885;  // std dev = 0.000, 218.000 (wgt'ed) examples reached here.  /* #neg=218 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109551;  // std dev = 0.000, 116.000 (wgt'ed) examples reached here.  /* #pos=116 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( actor(B) )
%   | | | then return -0.1254446385283916;  // std dev = 0.000, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
%   | | | else return 0.7194734122109542;  // std dev = 7.30e-08, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else return -0.12544463852839152;  // std dev = 0.000, 178.000 (wgt'ed) examples reached here.  /* #neg=178 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12511659156683597;  // std dev = 0.109, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( director(B), actor(A) )
%   | | then return 0.5553664367462834;  // std dev = 5.06e-07, 134.000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | | else return -0.11575524148790675;  // std dev = 0.160, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
%   else return -0.11231637819360656;  // std dev = 0.000, 192.000 (wgt'ed) examples reached here.  /* #neg=192 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.4175135841583106;  // std dev = 0.000, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | | else return 0.4008790796705201;  // std dev = 0.100, 75.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=73 */
%   | else if ( genre(A, E) )
%   | | then return -0.10043393986968056;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( actor(B) )
%   | | | then return -0.10128287866139885;  // std dev = 0.000, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
%   | | | else return 0.4175135841583104;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else return -0.10159632948783653;  // std dev = 0.000, 209.000 (wgt'ed) examples reached here.  /* #neg=209 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09171716827390274;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( genre(B, E) )
%   | | then return 0.32299918808652955;  // std dev = 0.019, 116.000 (wgt'ed) examples reached here.  /* #pos=116 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.3207118471601496;  // std dev = 2.98e-08, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return -0.09506442158885814;  // std dev = 0.191, 73.000 (wgt'ed) examples reached here.  /* #neg=73 */
%   else return -0.09269127618926055;  // std dev = 9.42e-08, 208.000 (wgt'ed) examples reached here.  /* #neg=208 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2565235308249417;  // std dev = 0.018, 134.000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.09039198844908028;  // std dev = 0.252, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
%   else return -0.08518475138839678;  // std dev = 8.56e-08, 229.000 (wgt'ed) examples reached here.  /* #neg=229 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07763265671852622;  // std dev = 2.63e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( genre(B, E) )
%   | | then return 0.21089514191372508;  // std dev = 0.014, 116.000 (wgt'ed) examples reached here.  /* #pos=116 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.20953381472819718;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return -0.08388607509107676;  // std dev = 0.237, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
%   else return -0.07877675473109147;  // std dev = 7.15e-08, 204.000 (wgt'ed) examples reached here.  /* #neg=204 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.17779650136723316;  // std dev = 0.013, 134.000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.07925441429941535;  // std dev = 0.271, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
%   else return -0.07324622576333661;  // std dev = 1.31e-07, 218.000 (wgt'ed) examples reached here.  /* #neg=218 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1502316282014464;  // std dev = 0.369, 117.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=116 */
%   | else if ( genre(A, E) )
%   | | then return -0.06711699770557066;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.15250751967121756;  // std dev = 7.45e-09, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return -0.07454114846651341;  // std dev = 0.257, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
%   else return -0.06842697784420262;  // std dev = 8.16e-08, 201.000 (wgt'ed) examples reached here.  /* #neg=201 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13488305639770393;  // std dev = 0.010, 116.000 (wgt'ed) examples reached here.  /* #pos=116 */
%   | else if ( genre(A, E) )
%   | | then return -0.06303478385209278;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.13382249721337056;  // std dev = 1.05e-08, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return -0.06502284242840956;  // std dev = 0.143, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
%   else return -0.06419184008202626;  // std dev = 0.000, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063595
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.639 seconds
Total inference time: 0.845 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.065365
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.092 seconds
Refined model CLL: -0.065365


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063595
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 4.993 seconds
Total inference time: 0.845 seconds
AUC ROC: 1.0
Total revision time: 4.993
Best scored revision CLL: -0.065365


Dataset: 4_cora_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 00:10:04
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063595, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 4.993, 'Inference time': 0.845, 'parameter_0.4': {'AUC ROC': 0.971565, 'AUC PR': 0.823063, 'CLL': -0.116772, 'Precision': [1.0, 0.5], 'Recall': 0.777778, 'F1': 0.875, 'Learning time': 1.148, 'Inference time': 0.882}}


Amount of data: 0.6
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;haswordauthor(E, C).;true;true
7;true,true,true;author(F, E), title(F, D).;false;false
7;true,true,false;title(G, D), venue(G, B).;false;false
7;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
7;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
7;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, B).;false;true
8;true,true,false;title(F, D), venue(F, A).;false;false
8;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
8;true,false,false;haswordvenue(A, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
8;false,true;haswordauthor(M, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;true,true;author(F, E), venue(F, B).;true;true
9;true,true,true;samebib(F, G), venue(G, A).;false;false
9;true,true,false;author(H, E), venue(H, A).;false;false
9;true,false;haswordtitle(I, C).;true;true
9;true,false,true;title(J, I), venue(J, A).;false;false
9;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995095;  // std dev = 1.09e-06, 174.000 (wgt'ed) examples reached here.  /* #pos=174 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.08579121152227567;  // std dev = 4.650, 123.000 (wgt'ed) examples reached here.  /* #neg=95 #pos=28 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048777;  // std dev = 1.40e-07, 312.000 (wgt'ed) examples reached here.  /* #neg=312 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7146453090638746;  // std dev = 0.843, 175.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=174 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.0908596477725038;  // std dev = 4.602, 115.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=28 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839197;  // std dev = 0.000, 280.000 (wgt'ed) examples reached here.  /* #neg=280 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1250224315016456;  // std dev = 0.108, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( movie(E, A) )
%   | | then return 0.3701224245087909;  // std dev = 0.356, 287.000 (wgt'ed) examples reached here.  /* #neg=85 #pos=202 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360664;  // std dev = 0.000, 328.000 (wgt'ed) examples reached here.  /* #neg=328 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.45671972963257246;  // std dev = 0.942, 176.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=174 */
%   | else if ( genre(A, E) )
%   | | then return -0.100442447265731;  // std dev = 2.63e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.003392078624020911;  // std dev = 4.677, 128.000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783648;  // std dev = 0.000, 331.000 (wgt'ed) examples reached here.  /* #neg=331 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12004574392813275;  // std dev = 0.184, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( genre(B, E) )
%   | | then return 0.3544268845168194;  // std dev = 2.53e-07, 174.000 (wgt'ed) examples reached here.  /* #pos=174 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.05028816323146235;  // std dev = 4.515, 103.000 (wgt'ed) examples reached here.  /* #neg=75 #pos=28 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926043;  // std dev = 1.83e-07, 312.000 (wgt'ed) examples reached here.  /* #neg=312 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.27806839762093266;  // std dev = 0.000, 174.000 (wgt'ed) examples reached here.  /* #pos=174 */
%   | else if ( movie(E, A) )
%   | | then return -0.01916091049304831;  // std dev = 0.395, 141.000 (wgt'ed) examples reached here.  /* #neg=113 #pos=28 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 1.05e-07, 296.000 (wgt'ed) examples reached here.  /* #neg=296 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08076729131750411;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else if ( genre(B, E) )
%   | | then return 0.22580854958320137;  // std dev = 0.000, 174.000 (wgt'ed) examples reached here.  /* #pos=174 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.006499044356776709;  // std dev = 4.672, 127.000 (wgt'ed) examples reached here.  /* #neg=99 #pos=28 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109143;  // std dev = 4.21e-08, 301.000 (wgt'ed) examples reached here.  /* #neg=301 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18878256383326517;  // std dev = 2.04e-07, 174.000 (wgt'ed) examples reached here.  /* #pos=174 */
%   | else if ( movie(E, B) )
%   | | then return 0.009559582183578273;  // std dev = 4.612, 126.000 (wgt'ed) examples reached here.  /* #neg=98 #pos=28 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.07324622576333696;  // std dev = 1.03e-07, 294.000 (wgt'ed) examples reached here.  /* #neg=294 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1557661953196698;  // std dev = 0.716, 176.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=174 */
%   | else if ( genre(A, E) )
%   | | then return -0.0756359040338668;  // std dev = 6.45e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.011807317363520437;  // std dev = 4.615, 117.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=28 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420303;  // std dev = 0.000, 304.000 (wgt'ed) examples reached here.  /* #neg=304 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.14154835189316756;  // std dev = 9.66e-08, 174.000 (wgt'ed) examples reached here.  /* #pos=174 */
%   | | else if ( genre(A, G) )
%   | | | then return -0.07051463075947394;  // std dev = 2.63e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return -0.005590715348103347;  // std dev = 4.661, 125.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=28 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.064191840082026;  // std dev = 1.08e-07, 294.000 (wgt'ed) examples reached here.  /* #neg=294 */


Results
   AUC ROC   = 0.971565
   AUC PR    = 0.823063
   CLL	      = -0.119726
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.777778
   F1        = 0.875


Total learning time: 1.38 seconds
Total inference time: 0.909 seconds
AUC ROC: 0.971565


Results scoring model
   AUC ROC   = 0.983469
   AUC PR    = 0.894659
   CLL	      = -0.115302
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.861386
   F1        = 0.925532


Total scoring time: 1.466 seconds
Parameter learned model CLL: -0.115302


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 16, 0], 'true,false,true': [1.09e-06, 0, 174], 'true,false,false,true': [4.65, 95, 28], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.4e-07, 312, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.843, 1, 174], 'true,false,true': [0.0, 8, 0], 'true,false,false,true': [4.602, 87, 28], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 280, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.108, 9, 0], 'true,false,true': [0.356, 85, 202], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 328, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.942, 2, 174], 'true,false,true': [2.63e-09, 5, 0], 'true,false,false,true': [4.677, 100, 28], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 331, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.184, 7, 0], 'true,false,true': [2.53e-07, 0, 174], 'true,false,false,true': [4.515, 75, 28], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.83e-07, 312, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 174], 'true,false,true': [0.395, 113, 28], 'true,false,false': [0.0, 0, 0], 'false,true': [1.05e-07, 296, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 12, 0], 'true,false,true': [0.0, 0, 174], 'true,false,false,true': [4.672, 99, 28], 'true,false,false,false': [0.0, 0, 0], 'false,true': [4.21e-08, 301, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [2.04e-07, 0, 174], 'true,false,true': [4.612, 98, 28], 'true,false,false': [0.0, 0, 0], 'false,true': [1.03e-07, 294, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.716, 2, 174], 'true,false,true': [6.45e-09, 12, 0], 'true,false,false,true': [4.615, 89, 28], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 304, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true,true,false': 'genre(A, G)'}, {'true,true,true,true': [0.0, 0, 0], 'true,true,true,false': [9.66e-08, 0, 174], 'true,true,false,true': [2.63e-09, 8, 0], 'true,true,false,false': [4.661, 97, 28], 'true,false': [0.0, 0, 0], 'false': [1.08e-07, 294, 0]}]]
[{'': [0.2288683154875568, 6.26279654916755e-17], 'true': [-6.938893903907228e-18, 0.21755149701278126], 'true,false': [6.860412621132002e-15, 0.1758212704078271], 'true,false,false': [0.1758212704078271, nan], 'false': [6.26279654916755e-17, nan]}, {'': [0.17325622300373997, -7.612957883143931e-17], 'true': [0.004056040919799021, 0.17506149846622981], 'true,false': [0.0, 0.18419659735349744], 'true,false,false': [0.18419659735349744, nan], 'false': [-7.612957883143931e-17, nan]}, {'': [0.13031664564961218, -3.791005449939559e-17], 'true': [0.0012915503253338764, 0.12690828331911852], 'true,false': [0.12690828331911852, nan], 'false': [-3.791005449939559e-17, nan]}, {'': [0.12653782950188477, -9.391614709820056e-18], 'true': [0.00504072819499343, 0.16481446183471204], 'true,false': [1.3877787807814458e-18, 0.17089843749999922], 'true,false,false': [0.17089843749999922, nan], 'false': [-9.391614709820056e-18, nan]}, {'': [0.09612143478112373, 1.0675221390626505e-16], 'true': [0.004812623815354833, 0.09520995059816297], 'true,false': [3.675221047035001e-16, 0.19794514091808812], 'true,false,false': [0.19794514091808812, nan], 'false': [1.0675221390626505e-16, nan]}, {'': [0.09160457075147344, 3.750753461571475e-17], 'true': [0.0, 0.15584826938362278], 'true,false': [0.15584826938362278, nan], 'false': [3.750753461571475e-17, nan]}, {'': [0.083995884571718, 5.901517738871264e-18], 'true': [-3.469446951953614e-18, 0.08567694635101575], 'true,false': [-2.0417894705750005e-17, 0.17186434372868756], 'true,false,false': [0.17186434372868756, nan], 'false': [5.901517738871264e-18, nan]}, {'': [0.07872039568842105, 3.6252180395923476e-17], 'true': [2.3991026279256257e-16, 0.1687994047960441], 'true,false': [0.1687994047960441, nan], 'false': [3.6252180395923476e-17, nan]}, {'': [0.07743266427082555, -5.258951169277057e-17], 'true': [0.002912739499212341, 0.16575477270676695], 'true,false': [3.469446951953614e-18, 0.18204397691577176], 'true,false,false': [0.18204397691577176, nan], 'false': [-5.258951169277057e-17, nan]}, {'': [0.07648034225606971, 4.002844918716551e-17], 'true': [0.07648034225606971, nan], 'true,true': [5.3596973602593766e-17, 0.16360671122122963], 'true,true,false': [8.673617379884035e-19, 0.17382399999999923], 'true,true,true': [nan, 5.3596973602593766e-17]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, E).;true;true
9;true,false;genre(A, G).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995095;  // std dev = 1.09e-06, 174.000 (wgt'ed) examples reached here.  /* #pos=174 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.8581489350995117;  // std dev = 1.69e-07, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | | else return -0.14185106490048768;  // std dev = 6.66e-08, 115.000 (wgt'ed) examples reached here.  /* #neg=115 */
%   else return -0.14185106490048785;  // std dev = 8.94e-08, 298.000 (wgt'ed) examples reached here.  /* #neg=298 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.7194734122109547;  // std dev = 0.000, 60.000 (wgt'ed) examples reached here.  /* #pos=60 */
%   | | else return 0.7049058596120009;  // std dev = 0.110, 116.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=114 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.7194734122109546;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | | else return -0.12544463852839147;  // std dev = 0.000, 85.000 (wgt'ed) examples reached here.  /* #neg=85 */
%   else return -0.125444638528392;  // std dev = 0.000, 297.000 (wgt'ed) examples reached here.  /* #neg=297 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11935711483997026;  // std dev = 0.109, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else if ( actor(A), director(B) )
%   | | then return 0.5573948859402219;  // std dev = 0.025, 202.000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | | else return -0.11231637819360626;  // std dev = 5.58e-08, 75.000 (wgt'ed) examples reached here.  /* #neg=75 */
%   else return -0.11231637819360693;  // std dev = 0.000, 288.000 (wgt'ed) examples reached here.  /* #neg=288 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.4170203561417762;  // std dev = 0.000, 60.000 (wgt'ed) examples reached here.  /* #pos=60 */
%   | | else return 0.4097832630283273;  // std dev = 0.081, 116.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=114 */
%   | else if ( genre(A, E) )
%   | | then return -0.10095548990072624;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.41702035614177485;  // std dev = 7.88e-08, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | | else return -0.10159632948783624;  // std dev = 4.71e-08, 97.000 (wgt'ed) examples reached here.  /* #neg=97 */
%   else return -0.10159632948783662;  // std dev = 0.000, 292.000 (wgt'ed) examples reached here.  /* #neg=292 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( actor(B) )
%   | | then return -0.0921544485831206;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return -0.27958540623832756;  // std dev = 5.27e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.323500118809703;  // std dev = 0.030, 174.000 (wgt'ed) examples reached here.  /* #pos=174 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.3203774824849985;  // std dev = 5.16e-08, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | | else return -0.09269127618926101;  // std dev = 3.33e-08, 97.000 (wgt'ed) examples reached here.  /* #neg=97 */
%   else return -0.09269127618926043;  // std dev = 1.52e-07, 296.000 (wgt'ed) examples reached here.  /* #neg=296 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.25435139240771454;  // std dev = 0.000, 60.000 (wgt'ed) examples reached here.  /* #pos=60 */
%   | | else if ( actor(A) )
%   | | | then return 0.258508894932457;  // std dev = 0.000, 114.000 (wgt'ed) examples reached here.  /* #pos=114 */
%   | | | else return -0.22686396293565259;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( actor(B) )
%   | | then return -0.0851421542608626;  // std dev = 0.001, 107.000 (wgt'ed) examples reached here.  /* #neg=107 */
%   | | else return 0.2549440756493609;  // std dev = 5.58e-08, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   else return -0.08518475138839678;  // std dev = 1.01e-07, 293.000 (wgt'ed) examples reached here.  /* #neg=293 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09857170999030421;  // std dev = 0.043, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( genre(B, E) )
%   | | then return 0.2111001269045863;  // std dev = 0.018, 174.000 (wgt'ed) examples reached here.  /* #pos=174 */
%   | | else if ( actor(B) )
%   | | | then return -0.07877984610174948;  // std dev = 3.33e-08, 104.000 (wgt'ed) examples reached here.  /* #neg=104 */
%   | | | else return 0.16158674528810837;  // std dev = 0.653, 33.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=28 */
%   else return -0.07877675473109141;  // std dev = 3.65e-08, 311.000 (wgt'ed) examples reached here.  /* #neg=311 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( actor(A) )
%   | | then return 0.17808080713064367;  // std dev = 0.016, 174.000 (wgt'ed) examples reached here.  /* #pos=174 */
%   | | else return -0.1748639359417852;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( director(B), actor(A) )
%   | | then return 0.1840799958546636;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | else return -0.07387780858589277;  // std dev = 0.071, 125.000 (wgt'ed) examples reached here.  /* #neg=125 */
%   else return -0.07324622576333693;  // std dev = 1.04e-07, 286.000 (wgt'ed) examples reached here.  /* #neg=286 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.15349037008967334;  // std dev = 0.014, 174.000 (wgt'ed) examples reached here.  /* #pos=174 */
%   | else if ( genre(A, E) )
%   | | then return -0.06677270311161951;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.1580211661875186;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | | else return -0.06890077057165227;  // std dev = 0.047, 93.000 (wgt'ed) examples reached here.  /* #neg=93 */
%   else return -0.06842697784420301;  // std dev = 0.000, 302.000 (wgt'ed) examples reached here.  /* #neg=302 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.13324574025138242;  // std dev = 0.000, 60.000 (wgt'ed) examples reached here.  /* #pos=60 */
%   | | else if ( actor(A) )
%   | | | then return 0.1352970552016971;  // std dev = 6.99e-08, 114.000 (wgt'ed) examples reached here.  /* #pos=114 */
%   | | | else return -0.17180141708184307;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(A, E) )
%   | | then return -0.0627302622025785;  // std dev = 5.89e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.13811358638795393;  // std dev = 1.83e-08, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | | else return -0.06461647918145876;  // std dev = 0.045, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */
%   else return -0.06419184008202602;  // std dev = 1.00e-07, 286.000 (wgt'ed) examples reached here.  /* #neg=286 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063811
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.215 seconds
Total inference time: 0.866 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064672
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.421 seconds
Refined model CLL: -0.064672


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063811
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 6.482 seconds
Total inference time: 0.866 seconds
AUC ROC: 1.0
Total revision time: 6.482
Best scored revision CLL: -0.064672


Dataset: 4_cora_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 00:10:13
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063811, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 6.482, 'Inference time': 0.866, 'parameter_0.6': {'AUC ROC': 0.971565, 'AUC PR': 0.823063, 'CLL': -0.119726, 'Precision': [1.0, 0.5], 'Recall': 0.777778, 'F1': 0.875, 'Learning time': 1.38, 'Inference time': 0.909}}


Amount of data: 0.8
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;haswordauthor(E, C).;true;true
7;true,true,true;author(F, E), title(F, D).;false;false
7;true,true,false;title(G, D), venue(G, B).;false;false
7;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
7;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
7;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, B).;false;true
8;true,true,false;title(F, D), venue(F, A).;false;false
8;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
8;true,false,false;haswordvenue(A, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
8;false,true;haswordauthor(M, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;true,true;author(F, E), venue(F, B).;true;true
9;true,true,true;samebib(F, G), venue(G, A).;false;false
9;true,true,false;author(H, E), venue(H, A).;false;false
9;true,false;haswordtitle(I, C).;true;true
9;true,false,true;title(J, I), venue(J, A).;false;false
9;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995088;  // std dev = 1.08e-06, 235.000 (wgt'ed) examples reached here.  /* #pos=235 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.07892815587873193;  // std dev = 5.147, 154.000 (wgt'ed) examples reached here.  /* #neg=120 #pos=34 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048735;  // std dev = 3.01e-07, 399.000 (wgt'ed) examples reached here.  /* #neg=399 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.6916571800878512;  // std dev = 2.350, 243.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=235 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.04594126372790322;  // std dev = 5.223, 172.000 (wgt'ed) examples reached here.  /* #neg=138 #pos=34 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839224;  // std dev = 0.000, 397.000 (wgt'ed) examples reached here.  /* #neg=397 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12151222819752085;  // std dev = 0.106, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else if ( movie(E, A) )
%   | | then return 0.3673023484985031;  // std dev = 0.356, 387.000 (wgt'ed) examples reached here.  /* #neg=118 #pos=269 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360625;  // std dev = 0.000, 392.000 (wgt'ed) examples reached here.  /* #neg=392 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4679041767354887;  // std dev = 0.672, 236.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=235 */
%   | else if ( genre(A, E) )
%   | | then return -0.10076005246397478;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( movie(F, B) )
%   | | | then return -3.504864320429065E-4;  // std dev = 5.174, 160.000 (wgt'ed) examples reached here.  /* #neg=126 #pos=34 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783563;  // std dev = 1.38e-08, 449.000 (wgt'ed) examples reached here.  /* #neg=449 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.10601057173454943;  // std dev = 0.189, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else if ( genre(B, E) )
%   | | then return 0.35778000260383314;  // std dev = 4.81e-07, 235.000 (wgt'ed) examples reached here.  /* #pos=235 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.00798745074147393;  // std dev = 5.147, 154.000 (wgt'ed) examples reached here.  /* #neg=120 #pos=34 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926087;  // std dev = 1.52e-07, 399.000 (wgt'ed) examples reached here.  /* #neg=399 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2757175732447898;  // std dev = 0.771, 237.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=235 */
%   | else if ( movie(E, A) )
%   | | then return -0.006449160871703751;  // std dev = 0.397, 170.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=34 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 1.25e-07, 367.000 (wgt'ed) examples reached here.  /* #neg=367 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1255967734629646;  // std dev = 0.379, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else if ( genre(B, E) )
%   | | then return 0.22819873109501995;  // std dev = 0.000, 235.000 (wgt'ed) examples reached here.  /* #pos=235 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.013617101643575366;  // std dev = 5.128, 150.000 (wgt'ed) examples reached here.  /* #neg=116 #pos=34 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109143;  // std dev = 2.16e-07, 380.000 (wgt'ed) examples reached here.  /* #neg=380 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1863911753085647;  // std dev = 0.687, 237.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=235 */
%   | else if ( movie(E, B) )
%   | | then return 0.005881724931124913;  // std dev = 5.131, 162.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=34 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.0732462257633377;  // std dev = 0.000, 377.000 (wgt'ed) examples reached here.  /* #neg=377 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1591768832991248;  // std dev = 0.706, 237.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=235 */
%   | else if ( genre(A, E) )
%   | | then return -0.0743479185237471;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.020934718454510632;  // std dev = 5.230, 174.000 (wgt'ed) examples reached here.  /* #neg=140 #pos=34 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.0684269778442034;  // std dev = 0.000, 418.000 (wgt'ed) examples reached here.  /* #neg=418 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return -0.3742273444206417;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return 0.1427937827234186;  // std dev = 0.000, 235.000 (wgt'ed) examples reached here.  /* #pos=235 */
%   | | else if ( genre(A, G) )
%   | | | then return -0.06939044146489824;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | | else return 0.002380950041520085;  // std dev = 5.166, 158.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=34 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.06419184008202555;  // std dev = 2.07e-07, 417.000 (wgt'ed) examples reached here.  /* #neg=417 */


Results
   AUC ROC   = 0.971565
   AUC PR    = 0.823063
   CLL	      = -0.115013
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.777778
   F1        = 0.875


Total learning time: 1.637 seconds
Total inference time: 0.849 seconds
AUC ROC: 0.971565


Results scoring model
   AUC ROC   = 0.984603
   AUC PR    = 0.903485
   CLL	      = -0.110915
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.873606
   F1        = 0.93254


Total scoring time: 1.615 seconds
Parameter learned model CLL: -0.110915


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 14, 0], 'true,false,true': [1.08e-06, 0, 235], 'true,false,false,true': [5.147, 120, 34], 'true,false,false,false': [0.0, 0, 0], 'false,true': [3.01e-07, 399, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [2.35, 8, 235], 'true,false,true': [5.27e-09, 12, 0], 'true,false,false,true': [5.223, 138, 34], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 397, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.106, 12, 0], 'true,false,true': [0.356, 118, 269], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 392, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.672, 1, 235], 'true,false,true': [0.0, 8, 0], 'true,false,false,true': [5.174, 126, 34], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.38e-08, 449, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.189, 14, 0], 'true,false,true': [4.81e-07, 0, 235], 'true,false,false,true': [5.147, 120, 34], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.52e-07, 399, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.771, 2, 235], 'true,false,true': [0.397, 136, 34], 'true,false,false': [0.0, 0, 0], 'false,true': [1.25e-07, 367, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.379, 17, 0], 'true,false,true': [0.0, 0, 235], 'true,false,false,true': [5.128, 116, 34], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.16e-07, 380, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.687, 2, 235], 'true,false,true': [5.131, 128, 34], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 377, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.706, 2, 235], 'true,false,true': [0.0, 11, 0], 'true,false,false,true': [5.23, 140, 34], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 418, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true,true,false': 'genre(A, G)'}, {'true,true,true,true': [0.0, 2, 0], 'true,true,true,false': [0.0, 0, 235], 'true,true,false,true': [0.0, 13, 0], 'true,true,false,false': [5.166, 124, 34], 'true,false': [0.0, 0, 0], 'false': [2.07e-07, 417, 0]}]]
[{'': [0.22194582812529204, 2.270531298481523e-16], 'true': [-1.1895246692412391e-17, 0.21332134997786517], 'true,false': [4.958681219772614e-15, 0.17203575645134206], 'true,false,false': [0.17203575645134206, nan], 'false': [2.270531298481523e-16, nan]}, {'': [0.18340925630361898, -1.2752183859674342e-16], 'true': [0.02272869385483736, 0.1500465197410569], 'true,false': [2.3129646346357427e-18, 0.15859924283396457], 'true,false,false': [0.15859924283396457, nan], 'false': [-1.2752183859674342e-16, nan]}, {'': [0.13012511999104462, -2.2657612747452175e-17], 'true': [0.0009302002302394539, 0.1269450079126652], 'true,false': [0.1269450079126652, nan], 'false': [-2.2657612747452175e-17, nan]}, {'': [0.12193753324724275, 1.899000630093809e-16], 'true': [0.001911630091838426, 0.15983223723132542], 'true,false': [0.0, 0.1673437500000003], 'true,false,false': [0.1673437500000003, nan], 'false': [1.899000630093809e-16, nan]}, {'': [0.09762404902561236, 5.787628800050941e-17], 'true': [0.0025552642715410906, 0.09736913779138492], 'true,false': [9.826654856256705e-16, 0.17203575645134153], 'true,false,false': [0.17203575645134153, nan], 'false': [5.787628800050941e-17, nan]}, {'': [0.08676617219392767, 4.235183200204957e-17], 'true': [0.0025068963654700143, 0.15787115289004686], 'true,false': [0.15787115289004686, nan], 'false': [4.235183200204957e-17, nan]}, {'': [0.07920790043319906, 1.2270886061646468e-16], 'true': [0.00846036152439384, 0.07924458965551852], 'true,false': [-1.4362034020682877e-16, 0.1752888888888894], 'true,false,false': [0.1752888888888894, nan], 'false': [1.2270886061646468e-16, nan]}, {'': [0.07503548045413079, -6.125368411725002e-17], 'true': [0.0019919790644647626, 0.16254121261693394], 'true,false': [0.16254121261693394, nan], 'false': [-6.125368411725002e-17, nan]}, {'': [0.07434672148273007, -1.221776534276488e-16], 'true': [0.002101655044563118, 0.14803155952368605], 'true,false': [0.0, 0.15722024045448468], 'true,false,false': [0.15722024045448468, nan], 'false': [-1.221776534276488e-16, nan]}, {'': [0.0717267823784488, 1.0276884592453488e-16], 'true': [0.0717267823784488, nan], 'true,true': [0.002236751545857103, 0.15640595405045535], 'true,true,false': [0.0, 0.16888319179618536], 'true,true,true': [0.0, -1.7385620130300324e-16]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, E).;true;true
9;true,true;genre(A, F).;true;true
9;true,false;genre(A, G).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995088;  // std dev = 1.08e-06, 235.000 (wgt'ed) examples reached here.  /* #pos=235 */
%   | | else if ( actor(B) )
%   | | | then return -0.14185106490048763;  // std dev = 8.69e-08, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
%   | | | else return 0.8025933795439559;  // std dev = 1.374, 36.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=34 */
%   else return -0.14185106490048727;  // std dev = 3.01e-07, 415.000 (wgt'ed) examples reached here.  /* #neg=415 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.7194734122109541;  // std dev = 2.67e-07, 83.000 (wgt'ed) examples reached here.  /* #pos=83 */
%   | | else if ( actor(A) )
%   | | | then return 0.7194734122109562;  // std dev = 0.000, 152.000 (wgt'ed) examples reached here.  /* #pos=152 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 7.45e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.730548383829937;  // std dev = 0.000, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | | else return -0.1277304635703226;  // std dev = 0.202, 126.000 (wgt'ed) examples reached here.  /* #neg=126 */
%   else return -0.12544463852839222;  // std dev = 0.000, 378.000 (wgt'ed) examples reached here.  /* #neg=378 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360636;  // std dev = 1.05e-08, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( actor(A), director(B) )
%   | | then return 0.5567510845861676;  // std dev = 0.060, 269.000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | | else return -0.11387352534175338;  // std dev = 0.187, 149.000 (wgt'ed) examples reached here.  /* #neg=149 */
%   else return -0.11231637819360618;  // std dev = 0.000, 407.000 (wgt'ed) examples reached here.  /* #neg=407 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.41717688186455143;  // std dev = 0.000, 83.000 (wgt'ed) examples reached here.  /* #pos=83 */
%   | | else if ( actor(A) )
%   | | | then return 0.4171768818645494;  // std dev = 2.92e-07, 152.000 (wgt'ed) examples reached here.  /* #pos=152 */
%   | | | else return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(A, E) )
%   | | then return -0.1015963294878363;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.4280300998643067;  // std dev = 0.000, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | | else return -0.10610287826245067;  // std dev = 0.270, 127.000 (wgt'ed) examples reached here.  /* #neg=127 */
%   else return -0.10159632948783592;  // std dev = 2.19e-07, 399.000 (wgt'ed) examples reached here.  /* #neg=399 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926094;  // std dev = 9.13e-09, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else if ( genre(B, E) )
%   | | then return 0.32048358909557234;  // std dev = 0.000, 235.000 (wgt'ed) examples reached here.  /* #pos=235 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.3278505278536136;  // std dev = 4.71e-08, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | | else return -0.09356241311249615;  // std dev = 0.161, 146.000 (wgt'ed) examples reached here.  /* #neg=146 */
%   else return -0.09269127618926086;  // std dev = 1.56e-07, 397.000 (wgt'ed) examples reached here.  /* #neg=397 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.25565111546906666;  // std dev = 0.027, 269.000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.08690177262657311;  // std dev = 0.184, 137.000 (wgt'ed) examples reached here.  /* #neg=137 */
%   else return -0.08518475138839678;  // std dev = 1.32e-07, 390.000 (wgt'ed) examples reached here.  /* #neg=390 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07865223890776776;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else if ( genre(B, E) )
%   | | then return 0.20954254814788886;  // std dev = 3.04e-07, 235.000 (wgt'ed) examples reached here.  /* #pos=235 */
%   | | else if ( actor(B) )
%   | | | then return -0.07798664473911644;  // std dev = 0.000, 130.000 (wgt'ed) examples reached here.  /* #neg=130 */
%   | | | else return 0.21392535822928851;  // std dev = 0.000, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   else return -0.07877675473109143;  // std dev = 2.19e-07, 387.000 (wgt'ed) examples reached here.  /* #neg=387 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17275327966853662;  // std dev = 0.496, 239.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=235 */
%   | else if ( actor(B) )
%   | | then return -0.0726154034200483;  // std dev = 0.002, 147.000 (wgt'ed) examples reached here.  /* #neg=147 */
%   | | else if ( female(A) )
%   | | | then return 0.18014728390547674;  // std dev = 0.000, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | | else return 0.049361361483093114;  // std dev = 0.453, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   else return -0.07324622576333772;  // std dev = 0.000, 419.000 (wgt'ed) examples reached here.  /* #neg=419 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.15115005112640442;  // std dev = 0.336, 237.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=235 */
%   | else if ( genre(A, E) )
%   | | then return -0.06836570105660487;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.15716219429203648;  // std dev = 0.034, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | | else return -0.06899787480291088;  // std dev = 0.152, 130.000 (wgt'ed) examples reached here.  /* #neg=130 */
%   else return -0.06842697784420339;  // std dev = 0.000, 415.000 (wgt'ed) examples reached here.  /* #neg=415 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( genre(A, E) )
%   | | then return -0.09836272639098227;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return 0.1345712911163482;  // std dev = 1.76e-07, 235.000 (wgt'ed) examples reached here.  /* #pos=235 */
%   | else if ( genre(A, F) )
%   | | then return -0.06413777277297052;  // std dev = 4.56e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( actor(B) )
%   | | | then return -0.06358852021285852;  // std dev = 0.000, 111.000 (wgt'ed) examples reached here.  /* #neg=111 */
%   | | | else return 0.1275543517026877;  // std dev = 0.343, 35.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=34 */
%   else return -0.06419184008202561;  // std dev = 1.94e-07, 396.000 (wgt'ed) examples reached here.  /* #neg=396 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063753
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.285 seconds
Total inference time: 0.899 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064998
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.643 seconds
Refined model CLL: -0.064998


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063753
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 7.18 seconds
Total inference time: 0.899 seconds
AUC ROC: 1.0
Total revision time: 7.18
Best scored revision CLL: -0.064998


Dataset: 4_cora_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 00:10:22
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063753, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 7.18, 'Inference time': 0.899, 'parameter_0.8': {'AUC ROC': 0.971565, 'AUC PR': 0.823063, 'CLL': -0.115013, 'Precision': [1.0, 0.5], 'Recall': 0.777778, 'F1': 0.875, 'Learning time': 1.637, 'Inference time': 0.849}}


Amount of data: 1.0
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;haswordauthor(E, C).;true;true
7;true,true,true;author(F, E), title(F, D).;false;false
7;true,true,false;title(G, D), venue(G, B).;false;false
7;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
7;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
7;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, B).;false;true
8;true,true,false;title(F, D), venue(F, A).;false;false
8;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
8;true,false,false;haswordvenue(A, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
8;false,true;haswordauthor(M, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;true,true;author(F, E), venue(F, B).;true;true
9;true,true,true;samebib(F, G), venue(G, A).;false;false
9;true,true,false;author(H, E), venue(H, A).;false;false
9;true,false;haswordtitle(I, C).;true;true
9;true,false,true;title(J, I), venue(J, A).;false;false
9;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995085;  // std dev = 1.08e-06, 288.000 (wgt'ed) examples reached here.  /* #pos=288 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.10814893509951228;  // std dev = 6.062, 196.000 (wgt'ed) examples reached here.  /* #neg=147 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048738;  // std dev = 2.23e-07, 469.000 (wgt'ed) examples reached here.  /* #neg=469 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.707899192337816;  // std dev = 1.678, 292.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=288 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 7.45e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.09574948911780669;  // std dev = 6.057, 195.000 (wgt'ed) examples reached here.  /* #neg=146 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839233;  // std dev = 0.000, 488.000 (wgt'ed) examples reached here.  /* #neg=488 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1264631439377698;  // std dev = 0.183, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | else if ( movie(E, A) )
%   | | then return 0.3543553121015131;  // std dev = 0.366, 494.000 (wgt'ed) examples reached here.  /* #neg=157 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360579;  // std dev = 0.000, 510.000 (wgt'ed) examples reached here.  /* #neg=510 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4584318969925215;  // std dev = 1.494, 293.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=288 */
%   | else if ( genre(A, E) )
%   | | then return -0.10031234839069073;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.01489222070635782;  // std dev = 6.106, 205.000 (wgt'ed) examples reached here.  /* #neg=156 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.1015963294878354;  // std dev = 1.56e-08, 500.000 (wgt'ed) examples reached here.  /* #neg=500 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.13309474482077652;  // std dev = 0.350, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else if ( genre(B, E) )
%   | | then return 0.3592006267205035;  // std dev = 0.000, 288.000 (wgt'ed) examples reached here.  /* #pos=288 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.015841741370411347;  // std dev = 6.092, 202.000 (wgt'ed) examples reached here.  /* #neg=153 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926157;  // std dev = 0.000, 524.000 (wgt'ed) examples reached here.  /* #neg=524 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.27569519747033355;  // std dev = 0.936, 291.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=288 */
%   | else if ( movie(E, A) )
%   | | then return -0.003267676724792821;  // std dev = 0.404, 231.000 (wgt'ed) examples reached here.  /* #neg=182 #pos=49 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 1.46e-07, 477.000 (wgt'ed) examples reached here.  /* #neg=477 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.13374768969148082;  // std dev = 0.420, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else if ( genre(B, E) )
%   | | then return 0.22904153096354862;  // std dev = 1.26e-07, 288.000 (wgt'ed) examples reached here.  /* #pos=288 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.0032828538171839864;  // std dev = 6.134, 211.000 (wgt'ed) examples reached here.  /* #neg=162 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109204;  // std dev = 1.35e-07, 495.000 (wgt'ed) examples reached here.  /* #neg=495 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17810065657733307;  // std dev = 1.344, 296.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=288 */
%   | else if ( movie(E, B) )
%   | | then return 0.006845616580638618;  // std dev = 6.101, 218.000 (wgt'ed) examples reached here.  /* #neg=169 #pos=49 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.0732462257633368;  // std dev = 1.87e-07, 525.000 (wgt'ed) examples reached here.  /* #neg=525 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.16337659538926058;  // std dev = 0.493, 289.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=288 */
%   | else if ( genre(A, E) )
%   | | then return -0.0719352102642937;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.015493646016910613;  // std dev = 6.077, 199.000 (wgt'ed) examples reached here.  /* #neg=150 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420361;  // std dev = 0.000, 539.000 (wgt'ed) examples reached here.  /* #neg=539 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return -0.36548096120393203;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.1437791450536259;  // std dev = 0.000, 288.000 (wgt'ed) examples reached here.  /* #pos=288 */
%   | | else if ( genre(A, G) )
%   | | | then return -0.0672781884751468;  // std dev = 9.86e-09, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | | else return -0.005592085286364206;  // std dev = 6.151, 215.000 (wgt'ed) examples reached here.  /* #neg=166 #pos=49 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.0641918400820254;  // std dev = 2.43e-07, 481.000 (wgt'ed) examples reached here.  /* #neg=481 */


Results
   AUC ROC   = 0.971565
   AUC PR    = 0.823063
   CLL	      = -0.120748
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.777778
   F1        = 0.875


Total learning time: 1.825 seconds
Total inference time: 0.91 seconds
AUC ROC: 0.971565


Results scoring model
   AUC ROC   = 0.982257
   AUC PR    = 0.888508
   CLL	      = -0.116903
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.854599
   F1        = 0.9216


Total scoring time: 1.844 seconds
Parameter learned model CLL: -0.116903


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 19, 0], 'true,false,true': [1.08e-06, 0, 288], 'true,false,false,true': [6.062, 147, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.23e-07, 469, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.678, 4, 288], 'true,false,true': [7.45e-09, 16, 0], 'true,false,false,true': [6.057, 146, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 488, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.183, 24, 0], 'true,false,true': [0.366, 157, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 510, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.494, 5, 288], 'true,false,true': [0.0, 20, 0], 'true,false,false,true': [6.106, 156, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.56e-08, 500, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.35, 19, 0], 'true,false,true': [0.0, 0, 288], 'true,false,false,true': [6.092, 153, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 524, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.936, 3, 288], 'true,false,true': [0.404, 182, 49], 'true,false,false': [0.0, 0, 0], 'false,true': [1.46e-07, 477, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.42, 18, 0], 'true,false,true': [1.26e-07, 0, 288], 'true,false,false,true': [6.134, 162, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.35e-07, 495, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [1.344, 8, 288], 'true,false,true': [6.101, 169, 49], 'true,false,false': [0.0, 0, 0], 'false,true': [1.87e-07, 525, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.493, 1, 288], 'true,false,true': [0.0, 14, 0], 'true,false,false,true': [6.077, 150, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 539, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true,true,false': 'genre(A, G)'}, {'true,true,true,true': [0.0, 3, 0], 'true,true,true,false': [0.0, 0, 288], 'true,true,false,true': [9.86e-09, 17, 0], 'true,true,false,false': [6.151, 166, 49], 'true,false': [0.0, 0, 0], 'false': [2.43e-07, 481, 0]}]]
[{'': [0.22110675904809976, 1.0605115459105973e-16], 'true': [0.0, 0.2114737722833167], 'true,false': [4.046146134189459e-15, 0.18750000000000097], 'true,false,false': [0.18750000000000097, nan], 'false': [1.0605115459105973e-16, nan]}, {'': [0.1762959544071002, -1.3650283089653564e-16], 'true': [0.009645304728367167, 0.17730164684447863], 'true,false': [3.469446951953614e-18, 0.18813938198553704], 'true,false,false': [0.18813938198553704, nan], 'false': [-1.3650283089653564e-16, nan]}, {'': [0.13778768380618914, -1.7415263131375004e-18], 'true': [0.0014009168671416498, 0.13370242312744363], 'true,false': [0.13370242312744363, nan], 'false': [-1.7415263131375004e-18, nan]}, {'': [0.12735448348518613, 2.451372438372346e-16], 'true': [0.007622310127385516, 0.16679845289478476], 'true,false': [0.0, 0.1818917311124345], 'true,false,false': [0.1818917311124345, nan], 'false': [2.451372438372346e-16, nan]}, {'': [0.10507652743191166, -4.57649185723347e-17], 'true': [0.006452080554056003, 0.1043084983627295], 'true,false': [-1.7516852166308026e-15, 0.18373198706009242], 'true,false,false': [0.18373198706009242, nan], 'false': [-4.57649185723347e-17, nan]}, {'': [0.0930219206872352, 4.468822237484907e-17], 'true': [0.0030127560116692638, 0.16302751640232288], 'true,false': [0.16302751640232288, nan], 'false': [4.468822237484907e-17, nan]}, {'': [0.08751496647357582, 3.6783146674449633e-17], 'true': [0.00978202026252464, 0.08783084062510435], 'true,false': [5.551115123125783e-17, 0.1782978818984281], 'true,false,false': [0.1782978818984281, nan], 'false': [3.6783146674449633e-17, nan]}, {'': [0.0830873660074414, 6.682485252981895e-17], 'true': [0.00609869654993877, 0.17073299759940458], 'true,false': [0.17073299759940458, nan], 'false': [6.682485252981895e-17, nan]}, {'': [0.08002307762901008, -1.1699567309593486e-16], 'true': [0.0008400388467499448, 0.17387160985732025], 'true,false': [-1.982541115402065e-18, 0.18560137370268526], 'true,false,false': [0.18560137370268526, nan], 'false': [-1.1699567309593486e-16, nan]}, {'': [0.07937777697530912, 1.2233226674663886e-16], 'true': [0.07937777697530912, nan], 'true,true': [0.0026461050227699853, 0.16332976746787364], 'true,true,false': [5.714383214982423e-18, 0.17596538669551015], 'true,true,true': [0.0, -1.2335811384723962e-16]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, E).;true;true
9;true,true;genre(A, F).;true;true
9;true,false;genre(A, G).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995085;  // std dev = 1.08e-06, 288.000 (wgt'ed) examples reached here.  /* #pos=288 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.8581489350995122;  // std dev = 1.69e-07, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.1418510649004881;  // std dev = 0.000, 161.000 (wgt'ed) examples reached here.  /* #neg=161 */
%   else return -0.14185106490048743;  // std dev = 1.98e-07, 474.000 (wgt'ed) examples reached here.  /* #neg=474 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.7194734122109548;  // std dev = 0.000, 105.000 (wgt'ed) examples reached here.  /* #pos=105 */
%   | | else if ( actor(A) )
%   | | | then return 0.7194734122109567;  // std dev = 0.000, 183.000 (wgt'ed) examples reached here.  /* #pos=183 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.7194734122109547;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.12544463852839113;  // std dev = 7.60e-08, 136.000 (wgt'ed) examples reached here.  /* #neg=136 */
%   else return -0.12544463852839235;  // std dev = 0.000, 495.000 (wgt'ed) examples reached here.  /* #neg=495 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 7.45e-09, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | else if ( director(B) )
%   | | then return 0.5553664367462833;  // std dev = 6.08e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | | else return -0.11231637819360629;  // std dev = 8.69e-08, 156.000 (wgt'ed) examples reached here.  /* #neg=156 */
%   else return -0.11231637819360586;  // std dev = 0.000, 489.000 (wgt'ed) examples reached here.  /* #neg=489 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.4175135841583117;  // std dev = 0.000, 105.000 (wgt'ed) examples reached here.  /* #pos=105 */
%   | | else if ( director(A) )
%   | | | then return -0.1015963294878363;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.4175135841583127;  // std dev = 0.000, 183.000 (wgt'ed) examples reached here.  /* #pos=183 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783631;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.41751358415831047;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.10205596159494937;  // std dev = 0.079, 172.000 (wgt'ed) examples reached here.  /* #neg=172 */
%   else return -0.10159632948783548;  // std dev = 3.28e-07, 480.000 (wgt'ed) examples reached here.  /* #neg=480 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926094;  // std dev = 9.13e-09, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else if ( genre(B, E) )
%   | | then return 0.3207118471601507;  // std dev = 0.000, 288.000 (wgt'ed) examples reached here.  /* #pos=288 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.32071184716014944;  // std dev = 2.98e-08, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.09553040985823083;  // std dev = 0.176, 153.000 (wgt'ed) examples reached here.  /* #neg=153 */
%   else return -0.09269127618926136;  // std dev = 0.000, 480.000 (wgt'ed) examples reached here.  /* #neg=480 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.2551722425694875;  // std dev = 4.13e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.08534268652973244;  // std dev = 0.068, 174.000 (wgt'ed) examples reached here.  /* #neg=174 */
%   else return -0.08518475138839678;  // std dev = 1.50e-07, 502.000 (wgt'ed) examples reached here.  /* #neg=502 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07876529398594134;  // std dev = 5.27e-09, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | else if ( genre(B, E) )
%   | | then return 0.2097577156325351;  // std dev = 1.84e-07, 288.000 (wgt'ed) examples reached here.  /* #pos=288 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.20975771563253606;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.07932069642860685;  // std dev = 0.090, 161.000 (wgt'ed) examples reached here.  /* #neg=161 */
%   else return -0.07877675473109229;  // std dev = 2.11e-08, 542.000 (wgt'ed) examples reached here.  /* #neg=542 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.17709649774527655;  // std dev = 2.92e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.0747974942563959;  // std dev = 0.132, 167.000 (wgt'ed) examples reached here.  /* #neg=167 */
%   else return -0.07324622576333688;  // std dev = 1.62e-07, 505.000 (wgt'ed) examples reached here.  /* #neg=505 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.15046486125816724;  // std dev = 0.381, 291.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=288 */
%   | else if ( genre(A, E) )
%   | | then return -0.06831883495025706;  // std dev = 7.45e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.15274385809367094;  // std dev = 3.94e-08, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.0691484338580853;  // std dev = 0.097, 158.000 (wgt'ed) examples reached here.  /* #neg=158 */
%   else return -0.0684269778442035;  // std dev = 0.000, 464.000 (wgt'ed) examples reached here.  /* #neg=464 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( genre(A, E) )
%   | | then return -0.07854079744440387;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return 0.13427172631209794;  // std dev = 0.000, 288.000 (wgt'ed) examples reached here.  /* #pos=288 */
%   | else if ( genre(A, F) )
%   | | then return -0.06409641695236931;  // std dev = 6.45e-09, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.1340070300080116;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.06450187871531524;  // std dev = 0.075, 156.000 (wgt'ed) examples reached here.  /* #neg=156 */
%   else return -0.06419184008202536;  // std dev = 2.45e-07, 511.000 (wgt'ed) examples reached here.  /* #neg=511 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063662
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.86 seconds
Total inference time: 0.872 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064291
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.883 seconds
Refined model CLL: -0.064291


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063662
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 8.411999999999999 seconds
Total inference time: 0.872 seconds
AUC ROC: 1.0
Total revision time: 8.411999999999999
Best scored revision CLL: -0.064291


Dataset: 4_cora_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 00:10:33
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063662, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 8.411999999999999, 'Inference time': 0.872, 'parameter_1.0': {'AUC ROC': 0.971565, 'AUC PR': 0.823063, 'CLL': -0.120748, 'Precision': [1.0, 0.5], 'Recall': 0.777778, 'F1': 0.875, 'Learning time': 1.825, 'Inference time': 0.91}}


Starting fold 1

Target train facts examples: 863
Target train pos examples: 326
Target train neg examples: 10928

Target test facts examples: 215
Target test pos	 examples: 56
Target test neg examples: 3308

Amount of data: 0.2
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;haswordauthor(E, C).;true;true
7;true,true,true;author(F, E), title(F, D).;false;false
7;true,true,false;title(G, D), venue(G, B).;false;false
7;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
7;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
7;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, B).;false;true
8;true,true,false;title(F, D), venue(F, A).;false;false
8;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
8;true,false,false;haswordvenue(A, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
8;false,true;haswordauthor(M, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;true,true;author(F, E), venue(F, B).;true;true
9;true,true,true;samebib(F, G), venue(G, A).;false;false
9;true,true,false;author(H, E), venue(H, A).;false;false
9;true,false;haswordtitle(I, C).;true;true
9;true,false,true;title(J, I), venue(J, A).;false;false
9;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995125;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.03314893509951235;  // std dev = 2.403, 40.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048766;  // std dev = 7.60e-08, 80.000 (wgt'ed) examples reached here.  /* #neg=80 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7051527672831688;  // std dev = 0.838, 59.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=58 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.013156542087616881;  // std dev = 2.426, 44.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.1254446385283914;  // std dev = 0.000, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.168663797927062;  // std dev = 0.113, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( movie(E, A) )
%   | | then return 0.368288462008807;  // std dev = 0.347, 93.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=65 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.1123163781936062;  // std dev = 7.74e-08, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4558936368286127;  // std dev = 0.658, 59.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=58 */
%   | else if ( genre(A, E) )
%   | | then return -0.09656746952939006;  // std dev = 1.86e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.054308832593661975;  // std dev = 2.445, 48.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783621;  // std dev = 5.43e-09, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.2789917317860019;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.35721239518001;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.008410497165341858;  // std dev = 2.366, 35.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926097;  // std dev = 4.59e-08, 98.000 (wgt'ed) examples reached here.  /* #neg=98 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2630725845348964;  // std dev = 0.704, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else if ( movie(E, A) )
%   | | then return 0.03363539696319776;  // std dev = 0.410, 32.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=7 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.0851847513883968;  // std dev = 6.05e-08, 110.000 (wgt'ed) examples reached here.  /* #neg=110 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.13898390029166105;  // std dev = 0.168, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.23009607753430042;  // std dev = 4.71e-08, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.007696086321405759;  // std dev = 2.358, 34.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109164;  // std dev = 4.83e-08, 84.000 (wgt'ed) examples reached here.  /* #neg=84 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17718294165048917;  // std dev = 0.613, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else if ( movie(E, B) )
%   | | then return -0.038275556347527134;  // std dev = 2.421, 46.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=7 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.07324622576333707;  // std dev = 0.000, 104.000 (wgt'ed) examples reached here.  /* #neg=104 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.158272286922067;  // std dev = 0.446, 59.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=58 */
%   | else if ( genre(A, E) )
%   | | then return -0.059796862515072886;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.018371739714270828;  // std dev = 2.403, 40.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420267;  // std dev = 4.17e-09, 78.000 (wgt'ed) examples reached here.  /* #neg=78 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.14512992941425554;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else if ( genre(A, G) )
%   | | | then return -0.0565221855442248;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return -0.04766512132851513;  // std dev = 2.449, 49.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=7 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.06419184008202626;  // std dev = 0.000, 98.000 (wgt'ed) examples reached here.  /* #neg=98 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.100529
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 0.888 seconds
Total inference time: 0.976 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.986421
   AUC PR    = 0.918651
   CLL	      = -0.103855
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.892308
   F1        = 0.943089


Total scoring time: 0.891 seconds
Parameter learned model CLL: -0.103855


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 2, 0], 'true,false,true': [0.0, 0, 58], 'true,false,false,true': [2.403, 33, 7], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.6e-08, 80, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.838, 1, 58], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [2.426, 37, 7], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 90, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.113, 4, 0], 'true,false,true': [0.347, 28, 65], 'true,false,false': [0.0, 0, 0], 'false,true': [7.74e-08, 95, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.658, 1, 58], 'true,false,true': [1.86e-09, 3, 0], 'true,false,false,true': [2.445, 41, 7], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.43e-09, 90, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 3, 0], 'true,false,true': [0.0, 0, 58], 'true,false,false,true': [2.366, 28, 7], 'true,false,false,false': [0.0, 0, 0], 'false,true': [4.59e-08, 98, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.704, 2, 58], 'true,false,true': [0.41, 25, 7], 'true,false,false': [0.0, 0, 0], 'false,true': [6.05e-08, 110, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.168, 3, 0], 'true,false,true': [4.71e-08, 0, 58], 'true,false,false,true': [2.358, 27, 7], 'true,false,false,false': [0.0, 0, 0], 'false,true': [4.83e-08, 84, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.613, 2, 58], 'true,false,true': [2.421, 39, 7], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 104, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.446, 1, 58], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [2.403, 33, 7], 'true,false,false,false': [0.0, 0, 0], 'false,true': [4.17e-09, 78, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true,true,false': 'genre(A, G)'}, {'true,true,true,true': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 58], 'true,true,false,true': [0.0, 1, 0], 'true,true,false,false': [2.449, 42, 7], 'true,false': [0.0, 0, 0], 'false': [0.0, 98, 0]}]]
[{'': [0.22749999999999931, 7.216449660063518e-17], 'true': [0.0, 0.22334443981674235], 'true,false': [-3.675221047035001e-16, 0.1443750000000002], 'true,false,false': [0.1443750000000002, nan], 'false': [7.216449660063518e-17, nan]}, {'': [0.18212221750670657, -1.7270135938613546e-17], 'true': [0.011894690526567029, 0.1312254895190927], 'true,false': [0.0, 0.1337809917355374], 'true,false,false': [0.1337809917355374, nan], 'false': [-1.7270135938613546e-17, nan]}, {'': [0.1269876392812695, 6.310741403132469e-17], 'true': [0.0031750317106182223, 0.1204235218200042], 'true,false': [0.1204235218200042, nan], 'false': [6.310741403132469e-17, nan]}, {'': [0.1237082388095673, 2.837236618486511e-17], 'true': [0.007348732709721439, 0.11733742949057135], 'true,false': [1.1564823173178713e-18, 0.12456597222222233], 'true,false,false': [0.12456597222222233, nan], 'false': [2.837236618486511e-17, nan]}, {'': [0.09371483351009284, 2.1524732110079565e-17], 'true': [0.0, 0.08877042560284783], 'true,false': [-6.125368411725002e-17, 0.15999999999999967], 'true,false,false': [0.15999999999999967, nan], 'false': [2.1524732110079565e-17, nan]}, {'': [0.07590515674541332, 3.3306690738754695e-17], 'true': [0.008263220033318896, 0.16840242522788865], 'true,false': [0.16840242522788865, nan], 'false': [3.3306690738754695e-17, nan]}, {'': [0.07248654556277023, 2.7755575615628914e-17], 'true': [0.009359432588276283, 0.07194592955084009], 'true,false': [3.828355257328126e-17, 0.16349480968858143], 'true,false,false': [0.16349480968858143, nan], 'false': [2.7755575615628914e-17, nan]}, {'': [0.07025145824024129, -4.270088556250602e-18], 'true': [0.006260867845797199, 0.12744063569640926], 'true,false': [0.12744063569640926, nan], 'false': [-4.270088556250602e-18, nan]}, {'': [0.0673866034549721, 1.708035422500241e-17], 'true': [0.003364805622076949, 0.14089449234501042], 'true,false': [0.0, 0.144375], 'true,false,false': [0.144375, nan], 'false': [1.708035422500241e-17, nan]}, {'': [0.06481475281980431, -1.4727448285843914e-17], 'true': [0.06481475281980431, nan], 'true,true': [-4.594026308793751e-17, 0.12000153757269577], 'true,true,false': [0.0, 0.1224489795918367], 'true,true,true': [nan, -4.594026308793751e-17]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, E).;true;true
9;true,false;genre(A, G).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995125;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else if ( actor(B) )
%   | | | then return -0.14185106490048774;  // std dev = 1.49e-08, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.14185106490048763;  // std dev = 8.16e-08, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.7194734122109544;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | else return 0.6922179912193627;  // std dev = 0.149, 31.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=30 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( actor(B) )
%   | | | then return -0.12544463852839138;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | | else return 0.7194734122109543;  // std dev = 2.11e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.12544463852839127;  // std dev = 0.000, 124.000 (wgt'ed) examples reached here.  /* #neg=124 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5584678593649598;  // std dev = 0.027, 65.000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else if ( actor(A) )
%   | | then return -0.11231637819360639;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | else return -0.18611045633640036;  // std dev = 0.300, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.11231637819360626;  // std dev = 5.96e-08, 81.000 (wgt'ed) examples reached here.  /* #neg=81 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.41675952412244344;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | else return 0.3849238966168099;  // std dev = 0.149, 32.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=30 */
%   | else if ( genre(A, E) )
%   | | then return -0.09505606124252655;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( actor(B) )
%   | | | then return -0.10159632948783635;  // std dev = 0.000, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | | else return 0.4167595241224435;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.1015963294878362;  // std dev = 5.37e-08, 87.000 (wgt'ed) examples reached here.  /* #neg=87 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.20177452016190797;  // std dev = 0.140, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.3269231494345072;  // std dev = 0.049, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else if ( actor(B) )
%   | | | then return -0.09230274020722572;  // std dev = 0.008, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | | else return 0.3202006760680514;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.09269127618926101;  // std dev = 3.80e-08, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.25892267936680646;  // std dev = 0.045, 65.000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else if ( actor(B) )
%   | | then return -0.08395810412367562;  // std dev = 0.022, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | else return -0.31203544278787443;  // std dev = 0.311, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.0851847513883968;  // std dev = 5.37e-08, 93.000 (wgt'ed) examples reached here.  /* #neg=93 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.06696985949981524;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.2128416707926728;  // std dev = 0.038, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else if ( actor(B) )
%   | | | then return -0.07862043464854336;  // std dev = 0.007, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | | | else return 0.20883318090330377;  // std dev = 1.05e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.0787767547310916;  // std dev = 5.58e-08, 96.000 (wgt'ed) examples reached here.  /* #neg=96 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.17904268020908476;  // std dev = 0.034, 65.000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else if ( actor(B) )
%   | | then return -0.07319892891893905;  // std dev = 0.005, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | else return -0.26172865226627134;  // std dev = 0.340, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.0732462257633371;  // std dev = 0.000, 114.000 (wgt'ed) examples reached here.  /* #neg=114 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.1505134178531833;  // std dev = 2.79e-08, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | else return 0.14890025187941805;  // std dev = 0.051, 31.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=30 */
%   | else if ( genre(A, E) )
%   | | then return -0.05872534132862978;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.15189062121540386;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.1037382824716261;  // std dev = 0.572, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   else return -0.06842697784420265;  // std dev = 4.34e-08, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13594809043129977;  // std dev = 0.027, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.13334056824105311;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.07441506055870552;  // std dev = 0.397, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   else return -0.06419184008202626;  // std dev = 0.000, 104.000 (wgt'ed) examples reached here.  /* #neg=104 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.062792
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.317 seconds
Total inference time: 0.946 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.067201
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.897 seconds
Refined model CLL: -0.067201


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.062792
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.9930000000000003 seconds
Total inference time: 0.946 seconds
AUC ROC: 1.0
Total revision time: 3.9930000000000003
Best scored revision CLL: -0.067201


Dataset: 4_cora_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 00:10:39
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.062792, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 3.9930000000000003, 'Inference time': 0.946, 'parameter_0.2': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.100529, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 0.888, 'Inference time': 0.976}}


Amount of data: 0.4
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;haswordauthor(E, C).;true;true
7;true,true,true;author(F, E), title(F, D).;false;false
7;true,true,false;title(G, D), venue(G, B).;false;false
7;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
7;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
7;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, B).;false;true
8;true,true,false;title(F, D), venue(F, A).;false;false
8;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
8;true,false,false;haswordvenue(A, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
8;false,true;haswordauthor(M, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;true,true;author(F, E), venue(F, B).;true;true
9;true,true,true;samebib(F, G), venue(G, A).;false;false
9;true,true,false;author(H, E), venue(H, A).;false;false
9;true,false;haswordtitle(I, C).;true;true
9;true,false,true;title(J, I), venue(J, A).;false;false
9;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995111;  // std dev = 5.20e-07, 108.000 (wgt'ed) examples reached here.  /* #pos=108 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.1366299477577397;  // std dev = 3.984, 79.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=22 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048838;  // std dev = 0.000, 194.000 (wgt'ed) examples reached here.  /* #neg=194 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.6820876577534616;  // std dev = 1.847, 113.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=108 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.17402320725210166;  // std dev = 3.830, 66.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=22 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.1254446385283916;  // std dev = 0.000, 190.000 (wgt'ed) examples reached here.  /* #neg=190 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.13043275233649917;  // std dev = 0.099, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( movie(E, A) )
%   | | then return 0.3630471040008554;  // std dev = 0.374, 188.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=130 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360661;  // std dev = 0.000, 202.000 (wgt'ed) examples reached here.  /* #neg=202 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.46195512422646845;  // std dev = 0.944, 110.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=108 */
%   | else if ( genre(A, E) )
%   | | then return -0.0999546600806579;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.017060145022211065;  // std dev = 4.030, 84.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=22 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783648;  // std dev = 0.000, 174.000 (wgt'ed) examples reached here.  /* #neg=174 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11873883769276096;  // std dev = 0.178, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( genre(B, E) )
%   | | then return 0.3623361662714429;  // std dev = 1.79e-07, 108.000 (wgt'ed) examples reached here.  /* #pos=108 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.026987321445717517;  // std dev = 3.994, 80.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=22 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926061;  // std dev = 8.30e-08, 174.000 (wgt'ed) examples reached here.  /* #neg=174 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.26401615496648684;  // std dev = 1.067, 112.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=108 */
%   | else if ( movie(E, A) )
%   | | then return -0.028886131810925624;  // std dev = 0.402, 105.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=22 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 7.45e-08, 186.000 (wgt'ed) examples reached here.  /* #neg=186 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11576682237228084;  // std dev = 0.304, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( genre(B, E) )
%   | | then return 0.23297448202207616;  // std dev = 1.33e-07, 108.000 (wgt'ed) examples reached here.  /* #pos=108 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.030822297305595724;  // std dev = 3.984, 79.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=22 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109146;  // std dev = 7.15e-08, 208.000 (wgt'ed) examples reached here.  /* #neg=208 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18088580086562273;  // std dev = 0.826, 111.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=108 */
%   | else if ( movie(E, B) )
%   | | then return 0.033866411264417424;  // std dev = 3.943, 81.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=22 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.07324622576333666;  // std dev = 1.19e-07, 200.000 (wgt'ed) examples reached here.  /* #neg=200 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.15821946609354748;  // std dev = 0.694, 110.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=108 */
%   | else if ( genre(A, E) )
%   | | then return -0.07397263925203;  // std dev = 1.86e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.030740772191229424;  // std dev = 4.118, 96.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=22 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420262;  // std dev = 5.67e-09, 174.000 (wgt'ed) examples reached here.  /* #neg=174 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return -0.3636341686564877;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return 0.14633118245390808;  // std dev = 1.03e-07, 108.000 (wgt'ed) examples reached here.  /* #pos=108 */
%   | | else if ( genre(A, G) )
%   | | | then return -0.06906244313207151;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return -0.0068470510132595955;  // std dev = 4.070, 89.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=22 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.06419184008202626;  // std dev = 0.000, 194.000 (wgt'ed) examples reached here.  /* #neg=194 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.124035
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.136 seconds
Total inference time: 0.987 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.979345
   AUC PR    = 0.871288
   CLL	      = -0.123659
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.830769
   F1        = 0.907563


Total scoring time: 1.097 seconds
Parameter learned model CLL: -0.123659


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 10, 0], 'true,false,true': [5.2e-07, 0, 108], 'true,false,false,true': [3.984, 57, 22], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 194, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.847, 5, 108], 'true,false,true': [0.0, 4, 0], 'true,false,false,true': [3.83, 44, 22], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 190, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.099, 6, 0], 'true,false,true': [0.374, 58, 130], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 202, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.944, 2, 108], 'true,false,true': [0.0, 4, 0], 'true,false,false,true': [4.03, 62, 22], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 174, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.178, 7, 0], 'true,false,true': [1.79e-07, 0, 108], 'true,false,false,true': [3.994, 58, 22], 'true,false,false,false': [0.0, 0, 0], 'false,true': [8.3e-08, 174, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [1.067, 4, 108], 'true,false,true': [0.402, 83, 22], 'true,false,false': [0.0, 0, 0], 'false,true': [7.45e-08, 186, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.304, 13, 0], 'true,false,true': [1.33e-07, 0, 108], 'true,false,false,true': [3.984, 57, 22], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.15e-08, 208, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.826, 3, 108], 'true,false,true': [3.943, 59, 22], 'true,false,false': [0.0, 0, 0], 'false,true': [1.19e-07, 200, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.694, 2, 108], 'true,false,true': [1.86e-09, 3, 0], 'true,false,false,true': [4.118, 74, 22], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.67e-09, 174, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true,true,false': 'genre(A, G)'}, {'true,true,true,true': [0.0, 2, 0], 'true,true,true,false': [1.03e-07, 0, 108], 'true,true,false,true': [0.0, 2, 0], 'true,true,false,false': [4.07, 67, 22], 'true,false': [0.0, 0, 0], 'false': [0.0, 194, 0]}]]
[{'': [0.22443247700276142, -2.3120108347864086e-16], 'true': [-1.1102230246251566e-17, 0.21190197031657051], 'true,false': [2.500057773970723e-15, 0.2009293382470767], 'true,false,false': [0.2009293382470767, nan], 'false': [-2.3120108347864086e-16, nan]}, {'': [0.1657816512805128, -2.5710427938687835e-17], 'true': [0.030190204145288484, 0.21435560167346066], 'true,false': [0.0, 0.22222222222222182], 'true,false,false': [0.22222222222222182, nan], 'false': [-2.5710427938687835e-17, nan]}, {'': [0.14270007927183725, -4.3969228698026004e-17], 'true': [0.0016410150604263703, 0.13967034465210615], 'true,false': [0.13967034465210615, nan], 'false': [-4.3969228698026004e-17, nan]}, {'': [0.13682173671463374, -8.29476972421094e-17], 'true': [0.00809924892121378, 0.18511790406281461], 'true,false': [0.0, 0.19331065759637175], 'true,false,false': [0.19331065759637175, nan], 'false': [-8.29476972421094e-17, nan]}, {'': [0.11242365686635604, 3.9559670992390636e-17], 'true': [0.004512392614592882, 0.11233149740697719], 'true,false': [2.9605947323337506e-16, 0.19937499999999944], 'true,false,false': [0.19937499999999944, nan], 'false': [3.9559670992390636e-17, nan]}, {'': [0.10494744287374984, 2.984470496304184e-17], 'true': [0.01016255905414043, 0.16177170625151663], 'true,false': [0.16177170625151663, nan], 'false': [2.984470496304184e-17, nan]}, {'': [0.09336721507479545, 2.455300919844096e-17], 'true': [0.007121857303935367, 0.09485526063905689], 'true,false': [1.644774851296528e-16, 0.20092933824707626], 'true,false,false': [0.20092933824707626, nan], 'false': [2.455300919844096e-17, nan]}, {'': [0.08978480209609707, 7.105427357601002e-17], 'true': [0.006141262410835831, 0.19191143158504675], 'true,false': [0.19191143158504675, nan], 'false': [7.105427357601002e-17, nan]}, {'': [0.0924949223960477, 3.190296047773438e-17], 'true': [0.004375570254341943, 0.1713512162398643], 'true,false': [1.1564823173178713e-18, 0.1766493055555551], 'true,false,false': [0.1766493055555551, nan], 'false': [3.190296047773438e-17, nan]}, {'': [0.09020428487948023, -2.8613995480029806e-18], 'true': [0.09020428487948023, nan], 'true,true': [0.004642476563302597, 0.18208097933806966], 'true,true,false': [0.0, 0.18608761520010103], 'true,true,true': [0.0, 9.868649107779169e-17]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, E).;true;true
9;true,true;genre(A, F).;true;true
9;true,false;genre(A, G).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995111;  // std dev = 5.20e-07, 108.000 (wgt'ed) examples reached here.  /* #pos=108 */
%   | | else if ( actor(B) )
%   | | | then return -0.14185106490048766;  // std dev = 5.77e-08, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   | | | else return 0.8581489350995121;  // std dev = 5.96e-08, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   else return -0.14185106490048838;  // std dev = 0.000, 193.000 (wgt'ed) examples reached here.  /* #neg=193 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7041112658338757;  // std dev = 0.113, 110.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=108 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 5.27e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.7194734122109542;  // std dev = 7.30e-08, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | | else return -0.13029094944278705;  // std dev = 0.216, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
%   else return -0.12544463852839155;  // std dev = 0.000, 184.000 (wgt'ed) examples reached here.  /* #neg=184 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.13731932780321884;  // std dev = 0.140, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( actor(B) )
%   | | then return -0.11183410122807769;  // std dev = 5.05e-08, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
%   | | else return 0.5585151739082583;  // std dev = 0.016, 130.000 (wgt'ed) examples reached here.  /* #pos=130 */
%   else return -0.1123163781936067;  // std dev = 0.000, 216.000 (wgt'ed) examples reached here.  /* #neg=216 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.4204867946918536;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else return 0.4013393949167988;  // std dev = 0.107, 65.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=63 */
%   | else if ( genre(A, E) )
%   | | then return -0.09933682264054454;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.4167480233732903;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | | else return -0.10510076778903932;  // std dev = 0.271, 70.000 (wgt'ed) examples reached here.  /* #neg=70 */
%   else return -0.1015963294878365;  // std dev = 0.000, 185.000 (wgt'ed) examples reached here.  /* #neg=185 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1824679502611143;  // std dev = 0.225, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(B, E) )
%   | | then return 0.32517777356415645;  // std dev = 0.022, 108.000 (wgt'ed) examples reached here.  /* #pos=108 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.32019288045077743;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | | else return -0.10049196096303965;  // std dev = 0.359, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
%   else return -0.0926912761892606;  // std dev = 8.69e-08, 184.000 (wgt'ed) examples reached here.  /* #neg=184 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.25764297110595247;  // std dev = 0.024, 130.000 (wgt'ed) examples reached here.  /* #pos=130 */
%   | else if ( actor(B) )
%   | | then return -0.08324387319380064;  // std dev = 0.017, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   | | else return -0.32756486226272075;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.08518475138839678;  // std dev = 7.15e-08, 177.000 (wgt'ed) examples reached here.  /* #neg=177 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07111651800545649;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( genre(B, E) )
%   | | then return 0.21200398946779356;  // std dev = 0.016, 108.000 (wgt'ed) examples reached here.  /* #pos=108 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.2090400628677336;  // std dev = 1.05e-08, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | | else return -0.08050348974427197;  // std dev = 0.181, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
%   else return -0.07877675473109148;  // std dev = 8.30e-08, 164.000 (wgt'ed) examples reached here.  /* #neg=164 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.17837502303187483;  // std dev = 0.017, 130.000 (wgt'ed) examples reached here.  /* #pos=130 */
%   | else if ( actor(B) )
%   | | then return -0.07162296696473243;  // std dev = 0.014, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
%   | | else return -0.2245825765960209;  // std dev = 0.032, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else return -0.07324622576333673;  // std dev = 9.71e-08, 171.000 (wgt'ed) examples reached here.  /* #neg=171 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.15258587857805644;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else return 0.1458643886421973;  // std dev = 0.052, 65.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=63 */
%   | else if ( genre(A, E) )
%   | | then return -0.062245428892364396;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( actor(B) )
%   | | | then return -0.06755052229918992;  // std dev = 2.47e-08, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   | | | else return 0.1521113522852948;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   else return -0.06842697784420262;  // std dev = 7.96e-08, 192.000 (wgt'ed) examples reached here.  /* #neg=192 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( genre(A, E) )
%   | | then return -0.1633395363037345;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return 0.13565015804514613;  // std dev = 0.016, 108.000 (wgt'ed) examples reached here.  /* #pos=108 */
%   | else if ( genre(A, F) )
%   | | then return -0.058709591807078784;  // std dev = 2.63e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( actor(B) )
%   | | | then return -0.06341797913827973;  // std dev = 2.30e-08, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
%   | | | else return 0.08970931488987931;  // std dev = 0.593, 25.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=22 */
%   else return -0.06419184008202626;  // std dev = 0.000, 182.000 (wgt'ed) examples reached here.  /* #neg=182 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063245
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.594 seconds
Total inference time: 1.035 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.065668
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.063 seconds
Refined model CLL: -0.065668


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063245
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 4.89 seconds
Total inference time: 1.035 seconds
AUC ROC: 1.0
Total revision time: 4.89
Best scored revision CLL: -0.065668


Dataset: 4_cora_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 00:10:47
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063245, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 4.89, 'Inference time': 1.035, 'parameter_0.4': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.124035, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 1.136, 'Inference time': 0.987}}


Amount of data: 0.6
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;haswordauthor(E, C).;true;true
7;true,true,true;author(F, E), title(F, D).;false;false
7;true,true,false;title(G, D), venue(G, B).;false;false
7;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
7;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
7;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, B).;false;true
8;true,true,false;title(F, D), venue(F, A).;false;false
8;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
8;true,false,false;haswordvenue(A, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
8;false,true;haswordauthor(M, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;true,true;author(F, E), venue(F, B).;true;true
9;true,true,true;samebib(F, G), venue(G, A).;false;false
9;true,true,false;author(H, E), venue(H, A).;false;false
9;true,false;haswordtitle(I, C).;true;true
9;true,false,true;title(J, I), venue(J, A).;false;false
9;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995096;  // std dev = 1.02e-06, 164.000 (wgt'ed) examples reached here.  /* #pos=164 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.0894922186816008;  // std dev = 4.881, 134.000 (wgt'ed) examples reached here.  /* #neg=103 #pos=31 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048793;  // std dev = 0.000, 287.000 (wgt'ed) examples reached here.  /* #neg=287 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.6896527751260383;  // std dev = 2.033, 170.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=164 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 5.27e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.09490213420489678;  // std dev = 4.828, 125.000 (wgt'ed) examples reached here.  /* #neg=94 #pos=31 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.1254446385283919;  // std dev = 0.000, 267.000 (wgt'ed) examples reached here.  /* #neg=267 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.13770179160789198;  // std dev = 0.167, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( movie(E, A) )
%   | | then return 0.364043149553242;  // std dev = 0.367, 284.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=195 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360696;  // std dev = 0.000, 285.000 (wgt'ed) examples reached here.  /* #neg=285 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4560800011475902;  // std dev = 1.327, 168.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=164 */
%   | else if ( genre(A, E) )
%   | | then return -0.09930260922265462;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.04028208419273622;  // std dev = 4.781, 118.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=31 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783662;  // std dev = 0.000, 287.000 (wgt'ed) examples reached here.  /* #neg=287 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.13861317691761835;  // std dev = 0.234, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( genre(B, E) )
%   | | then return 0.36171579011026;  // std dev = 0.000, 164.000 (wgt'ed) examples reached here.  /* #pos=164 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.04486170821208083;  // std dev = 4.743, 113.000 (wgt'ed) examples reached here.  /* #neg=82 #pos=31 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926043;  // std dev = 1.48e-07, 291.000 (wgt'ed) examples reached here.  /* #neg=291 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.27651644062434827;  // std dev = 0.756, 166.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=164 */
%   | else if ( movie(E, A) )
%   | | then return 0.007948824771048734;  // std dev = 0.416, 134.000 (wgt'ed) examples reached here.  /* #neg=103 #pos=31 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 1.01e-07, 290.000 (wgt'ed) examples reached here.  /* #neg=290 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14336902250184266;  // std dev = 0.340, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( genre(B, E) )
%   | | then return 0.23038171549834635;  // std dev = 0.000, 164.000 (wgt'ed) examples reached here.  /* #pos=164 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.02601183792439077;  // std dev = 4.774, 117.000 (wgt'ed) examples reached here.  /* #neg=86 #pos=31 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109141;  // std dev = 4.71e-08, 293.000 (wgt'ed) examples reached here.  /* #neg=293 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17808408010913448;  // std dev = 1.042, 169.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=164 */
%   | else if ( movie(E, B) )
%   | | then return 0.03367883325082094;  // std dev = 4.714, 118.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=31 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.07324622576333693;  // std dev = 1.03e-07, 287.000 (wgt'ed) examples reached here.  /* #neg=287 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.15724717924898457;  // std dev = 0.831, 167.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=164 */
%   | else if ( genre(A, E) )
%   | | then return -0.07278641279002197;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.013327482330574644;  // std dev = 4.865, 131.000 (wgt'ed) examples reached here.  /* #neg=100 #pos=31 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420294;  // std dev = 0.000, 289.000 (wgt'ed) examples reached here.  /* #neg=289 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return -0.3534394702873747;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.14530992203558193;  // std dev = 0.000, 164.000 (wgt'ed) examples reached here.  /* #pos=164 */
%   | | else if ( genre(A, G) )
%   | | | then return -0.06802434365869216;  // std dev = 3.73e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else return 0.04224128138304254;  // std dev = 4.692, 107.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=31 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.06419184008202605;  // std dev = 9.42e-08, 281.000 (wgt'ed) examples reached here.  /* #neg=281 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.12494
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.376 seconds
Total inference time: 0.999 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.981038
   AUC PR    = 0.879963
   CLL	      = -0.122831
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.841026
   F1        = 0.913649


Total scoring time: 1.424 seconds
Parameter learned model CLL: -0.122831


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 11, 0], 'true,false,true': [1.02e-06, 0, 164], 'true,false,false,true': [4.881, 103, 31], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 287, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [2.033, 6, 164], 'true,false,true': [5.27e-09, 11, 0], 'true,false,false,true': [4.828, 94, 31], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 267, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.167, 13, 0], 'true,false,true': [0.367, 89, 195], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 285, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.327, 4, 164], 'true,false,true': [0.0, 3, 0], 'true,false,false,true': [4.781, 87, 31], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 287, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.234, 8, 0], 'true,false,true': [0.0, 0, 164], 'true,false,false,true': [4.743, 82, 31], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.48e-07, 291, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.756, 2, 164], 'true,false,true': [0.416, 103, 31], 'true,false,false': [0.0, 0, 0], 'false,true': [1.01e-07, 290, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.34, 11, 0], 'true,false,true': [0.0, 0, 164], 'true,false,false,true': [4.774, 86, 31], 'true,false,false,false': [0.0, 0, 0], 'false,true': [4.71e-08, 293, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [1.042, 5, 164], 'true,false,true': [4.714, 87, 31], 'true,false,false': [0.0, 0, 0], 'false,true': [1.03e-07, 287, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.831, 3, 164], 'true,false,true': [0.0, 8, 0], 'true,false,false,true': [4.865, 100, 31], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 289, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true,true,false': 'genre(A, G)'}, {'true,true,true,true': [0.0, 3, 0], 'true,true,true,false': [0.0, 0, 164], 'true,true,false,true': [3.73e-09, 15, 0], 'true,true,false,false': [4.692, 76, 31], 'true,false': [0.0, 0, 0], 'false': [9.42e-08, 281, 0]}]]
[{'': [0.232821189556042, -3.0946983264812726e-18], 'true': [-1.0092936587501423e-17, 0.2261722444934961], 'true,false': [6.325563379327721e-15, 0.1778235687235476], 'true,false,false': [0.1778235687235476, nan], 'false': [-3.0946983264812726e-18, nan]}, {'': [0.18394412781035008, -6.985672963933569e-17], 'true': [0.024306724161441196, 0.17502119176304157], 'true,false': [2.523234146875356e-18, 0.18649599999999994], 'true,false,false': [0.18649599999999994, nan], 'false': [-6.985672963933569e-17, nan]}, {'': [0.1396271676869029, -1.1530737378563028e-16], 'true': [0.0021480640473806665, 0.13490095313422978], 'true,false': [0.13490095313422978, nan], 'false': [-1.1530737378563028e-16, nan]}, {'': [0.12815796413743866, -5.879926820314418e-17], 'true': [0.010480124724642013, 0.1893630962693293], 'true,false': [-2.3129646346357427e-18, 0.19369434070669228], 'true,false,false': [0.19369434070669228, nan], 'false': [-5.879926820314418e-17, nan]}, {'': [0.10644885680785263, 7.477790818781124e-17], 'true': [0.0068676396483012825, 0.10545976677743203], 'true,false': [-5.848979837049605e-16, 0.1990758869136193], 'true,false,false': [0.1990758869136193, nan], 'false': [7.477790818781124e-17, nan]}, {'': [0.09714892932653452, 3.522086836741876e-17], 'true': [0.0034444708389280306, 0.1733194330261487], 'true,false': [0.1733194330261487, nan], 'false': [3.522086836741876e-17, nan]}, {'': [0.09121977588244383, 7.578314161263867e-18], 'true': [0.010524938947433648, 0.09123976849456276], 'true,false': [-5.415722071342227e-17, 0.1947549127036317], 'true,false,false': [0.1947549127036317, nan], 'false': [7.578314161263867e-18, nan]}, {'': [0.08625650077493384, 3.7136379917775274e-17], 'true': [0.0064268038235935614, 0.188309644092574], 'true,false': [0.188309644092574, nan], 'false': [3.7136379917775274e-17, nan]}, {'': [0.08718466387942182, -4.763586680052575e-17], 'true': [0.004138287041491532, 0.17043724646769545], 'true,false': [0.0, 0.1806421537206446], 'true,false,false': [0.1806421537206446, nan], 'false': [-4.763586680052575e-17, nan]}, {'': [0.08210626772121406, 3.160777294306496e-17], 'true': [0.08210626772121406, nan], 'true,true': [0.0043883061608705, 0.18179217812936324], 'true,true,false': [9.251858538542971e-19, 0.20578216438116753], 'true,true,true': [0.0, -5.95729427847645e-17]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, E).;true;true
9;true,true;genre(A, F).;true;true
9;true,false;genre(A, G).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995096;  // std dev = 1.02e-06, 164.000 (wgt'ed) examples reached here.  /* #pos=164 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.8581489350995116;  // std dev = 2.06e-07, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | | else return -0.14185106490048766;  // std dev = 7.60e-08, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */
%   else return -0.1418510649004879;  // std dev = 4.21e-08, 290.000 (wgt'ed) examples reached here.  /* #neg=290 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.7194734122109546;  // std dev = 1.19e-07, 64.000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | | else return 0.7029063916082222;  // std dev = 0.117, 102.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=100 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 7.45e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.7194734122109547;  // std dev = 0.000, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | | else return -0.12544463852839144;  // std dev = 0.000, 85.000 (wgt'ed) examples reached here.  /* #neg=85 */
%   else return -0.12544463852839197;  // std dev = 0.000, 283.000 (wgt'ed) examples reached here.  /* #neg=283 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1216749911806435;  // std dev = 0.108, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else if ( actor(A), director(B) )
%   | | then return 0.5574623995553496;  // std dev = 0.029, 195.000 (wgt'ed) examples reached here.  /* #pos=195 */
%   | | else return -0.11231637819360622;  // std dev = 7.45e-08, 96.000 (wgt'ed) examples reached here.  /* #neg=96 */
%   else return -0.11231637819360692;  // std dev = 0.000, 267.000 (wgt'ed) examples reached here.  /* #neg=267 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.4170039427031388;  // std dev = 0.000, 64.000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | | else if ( actor(A) )
%   | | | then return 0.42103703173333434;  // std dev = 1.69e-07, 100.000 (wgt'ed) examples reached here.  /* #pos=100 */
%   | | | else return -0.20413960902874084;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(A, E) )
%   | | then return -0.10074530588108097;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( actor(B) )
%   | | | then return -0.10159632948783623;  // std dev = 4.83e-08, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */
%   | | | else return 0.40079768419717;  // std dev = 0.510, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   else return -0.10159632948783659;  // std dev = 0.000, 262.000 (wgt'ed) examples reached here.  /* #neg=262 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11357467067352948;  // std dev = 0.139, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else if ( genre(B, E) )
%   | | then return 0.32203413512294776;  // std dev = 0.017, 164.000 (wgt'ed) examples reached here.  /* #pos=164 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.3239051981271815;  // std dev = 2.11e-08, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | | else return -0.09329311709095314;  // std dev = 0.051, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */
%   else return -0.09269127618926044;  // std dev = 1.32e-07, 275.000 (wgt'ed) examples reached here.  /* #neg=275 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.25627750505598673;  // std dev = 0.016, 195.000 (wgt'ed) examples reached here.  /* #pos=195 */
%   | else return -0.08718871729407579;  // std dev = 0.109, 97.000 (wgt'ed) examples reached here.  /* #neg=97 */
%   else return -0.08518475138839678;  // std dev = 9.77e-08, 269.000 (wgt'ed) examples reached here.  /* #neg=269 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08723165011553083;  // std dev = 0.091, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( genre(B, E) )
%   | | then return 0.21036165036696422;  // std dev = 0.013, 164.000 (wgt'ed) examples reached here.  /* #pos=164 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.21147369753185438;  // std dev = 4.71e-08, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | | else return -0.0797866662405138;  // std dev = 0.063, 75.000 (wgt'ed) examples reached here.  /* #neg=75 */
%   else return -0.07877675473109141;  // std dev = 4.71e-08, 291.000 (wgt'ed) examples reached here.  /* #neg=291 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.17766900193729535;  // std dev = 0.012, 195.000 (wgt'ed) examples reached here.  /* #pos=195 */
%   | else return -0.07565848382732597;  // std dev = 0.120, 96.000 (wgt'ed) examples reached here.  /* #neg=96 */
%   else return -0.0732462257633369;  // std dev = 1.06e-07, 280.000 (wgt'ed) examples reached here.  /* #neg=280 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14968980515105376;  // std dev = 0.394, 166.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=164 */
%   | else if ( genre(A, E) )
%   | | then return -0.06578163426094062;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.1537863153670727;  // std dev = 0.000, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | | else return -0.06892435872161641;  // std dev = 0.055, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
%   else return -0.06842697784420293;  // std dev = 0.000, 286.000 (wgt'ed) examples reached here.  /* #neg=286 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( genre(A, E) )
%   | | then return -0.1444608905565498;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0.13464892064014555;  // std dev = 0.009, 164.000 (wgt'ed) examples reached here.  /* #pos=164 */
%   | else if ( genre(A, F) )
%   | | then return -0.061852703735504694;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.1348203351478262;  // std dev = 0.000, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | | else return -0.06419492420091866;  // std dev = 0.037, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
%   else return -0.064191840082026;  // std dev = 1.06e-07, 291.000 (wgt'ed) examples reached here.  /* #neg=291 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063354
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.923 seconds
Total inference time: 0.907 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064718
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.281 seconds
Refined model CLL: -0.064718


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063354
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 6.004 seconds
Total inference time: 0.907 seconds
AUC ROC: 1.0
Total revision time: 6.004
Best scored revision CLL: -0.064718


Dataset: 4_cora_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 00:10:55
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063354, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 6.004, 'Inference time': 0.907, 'parameter_0.6': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.12494, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 1.376, 'Inference time': 0.999}}


Amount of data: 0.8
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;haswordauthor(E, C).;true;true
7;true,true,true;author(F, E), title(F, D).;false;false
7;true,true,false;title(G, D), venue(G, B).;false;false
7;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
7;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
7;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, B).;false;true
8;true,true,false;title(F, D), venue(F, A).;false;false
8;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
8;true,false,false;haswordvenue(A, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
8;false,true;haswordauthor(M, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;true,true;author(F, E), venue(F, B).;true;true
9;true,true,true;samebib(F, G), venue(G, A).;false;false
9;true,true,false;author(H, E), venue(H, A).;false;false
9;true,false;haswordtitle(I, C).;true;true
9;true,false,true;title(J, I), venue(J, A).;false;false
9;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 7.45e-09, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else if ( genre(B, E) )
%   | | then return 0.858148935099509;  // std dev = 1.08e-06, 220.000 (wgt'ed) examples reached here.  /* #pos=220 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.09206706375448198;  // std dev = 5.536, 171.000 (wgt'ed) examples reached here.  /* #neg=131 #pos=40 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.1418510649004874;  // std dev = 2.76e-07, 380.000 (wgt'ed) examples reached here.  /* #neg=380 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7006974555278606;  // std dev = 1.868, 225.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=220 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 5.27e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.09973254127869664;  // std dev = 5.466, 158.000 (wgt'ed) examples reached here.  /* #neg=118 #pos=40 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839222;  // std dev = 0.000, 380.000 (wgt'ed) examples reached here.  /* #neg=380 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1272388940555159;  // std dev = 0.147, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else if ( movie(E, A) )
%   | | then return 0.347053511942516;  // std dev = 0.371, 389.000 (wgt'ed) examples reached here.  /* #neg=129 #pos=260 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360638;  // std dev = 0.000, 368.000 (wgt'ed) examples reached here.  /* #neg=368 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.46745578046235026;  // std dev = 0.952, 222.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=220 */
%   | else if ( genre(A, E) )
%   | | then return -0.10024235881665546;  // std dev = 1.05e-08, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.03238803108678447;  // std dev = 5.466, 158.000 (wgt'ed) examples reached here.  /* #neg=118 #pos=40 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783576;  // std dev = 1.27e-08, 427.000 (wgt'ed) examples reached here.  /* #neg=427 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.17611427710436303;  // std dev = 0.365, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else if ( genre(B, E) )
%   | | then return 0.3604628796141994;  // std dev = 4.34e-07, 220.000 (wgt'ed) examples reached here.  /* #pos=220 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.03850193275907154;  // std dev = 5.423, 151.000 (wgt'ed) examples reached here.  /* #neg=111 #pos=40 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926072;  // std dev = 1.76e-07, 379.000 (wgt'ed) examples reached here.  /* #neg=379 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.27972434062220924;  // std dev = 0.535, 221.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=220 */
%   | else if ( movie(E, A) )
%   | | then return -0.0010651736881891064;  // std dev = 0.411, 181.000 (wgt'ed) examples reached here.  /* #neg=141 #pos=40 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 1.30e-07, 393.000 (wgt'ed) examples reached here.  /* #neg=393 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.16736690017599604;  // std dev = 0.408, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( genre(B, E) )
%   | | then return 0.2290747754443011;  // std dev = 0.000, 220.000 (wgt'ed) examples reached here.  /* #pos=220 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.006498394177557682;  // std dev = 5.515, 167.000 (wgt'ed) examples reached here.  /* #neg=127 #pos=40 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109143;  // std dev = 2.01e-07, 346.000 (wgt'ed) examples reached here.  /* #neg=346 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18693238748660862;  // std dev = 0.658, 222.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=220 */
%   | else if ( movie(E, B) )
%   | | then return 0.05091943634464337;  // std dev = 5.333, 145.000 (wgt'ed) examples reached here.  /* #neg=105 #pos=40 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.07324622576333768;  // std dev = 0.000, 362.000 (wgt'ed) examples reached here.  /* #neg=362 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1491304991021835;  // std dev = 1.247, 227.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=220 */
%   | else if ( genre(A, E) )
%   | | then return -0.06988846655852679;  // std dev = 7.45e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.03401721924316417;  // std dev = 5.623, 191.000 (wgt'ed) examples reached here.  /* #neg=151 #pos=40 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420326;  // std dev = 0.000, 369.000 (wgt'ed) examples reached here.  /* #neg=369 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return -0.3478210933370815;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.1444661340187379;  // std dev = 0.000, 220.000 (wgt'ed) examples reached here.  /* #pos=220 */
%   | | else if ( genre(A, G) )
%   | | | then return -0.0654797514675891;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return 0.04054688606320257;  // std dev = 5.375, 144.000 (wgt'ed) examples reached here.  /* #neg=104 #pos=40 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.06419184008202562;  // std dev = 1.90e-07, 391.000 (wgt'ed) examples reached here.  /* #neg=391 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.121109
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.506 seconds
Total inference time: 1.063 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.981618
   AUC PR    = 0.88386
   CLL	      = -0.119671
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.846154
   F1        = 0.916667


Total scoring time: 1.49 seconds
Parameter learned model CLL: -0.119671


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [7.45e-09, 20, 0], 'true,false,true': [1.08e-06, 0, 220], 'true,false,false,true': [5.536, 131, 40], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.76e-07, 380, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.868, 5, 220], 'true,false,true': [5.27e-09, 11, 0], 'true,false,false,true': [5.466, 118, 40], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 380, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.147, 15, 0], 'true,false,true': [0.371, 129, 260], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 368, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.952, 2, 220], 'true,false,true': [1.05e-08, 15, 0], 'true,false,false,true': [5.466, 118, 40], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.27e-08, 427, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.365, 14, 0], 'true,false,true': [4.34e-07, 0, 220], 'true,false,false,true': [5.423, 111, 40], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.76e-07, 379, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.535, 1, 220], 'true,false,true': [0.411, 141, 40], 'true,false,false': [0.0, 0, 0], 'false,true': [1.3e-07, 393, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.408, 13, 0], 'true,false,true': [0.0, 0, 220], 'true,false,false,true': [5.515, 127, 40], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.01e-07, 346, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.658, 2, 220], 'true,false,true': [5.333, 105, 40], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 362, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [1.247, 7, 220], 'true,false,true': [7.45e-09, 16, 0], 'true,false,false,true': [5.623, 151, 40], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 369, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true,true,false': 'genre(A, G)'}, {'true,true,true,true': [0.0, 4, 0], 'true,true,true,false': [0.0, 0, 220], 'true,true,false,true': [0.0, 11, 0], 'true,true,false,false': [5.375, 104, 40], 'true,false': [0.0, 0, 0], 'false': [1.9e-07, 391, 0]}]]
[{'': [0.23241633663073616, 2.0100880024792309e-16], 'true': [2.7755575615628915e-18, 0.22278765837481798], 'true,false': [5.296773121120747e-15, 0.17920043774152852], 'true,false,false': [0.17920043774152852, nan], 'false': [2.0100880024792309e-16, nan]}, {'': [0.17883587566412443, -1.2387751643185956e-16], 'true': [0.015511608172078898, 0.179851282231865], 'true,false': [2.523234146875356e-18, 0.1890722640602459], 'true,false,false': [0.1890722640602459, nan], 'false': [-1.2387751643185956e-16, nan]}, {'': [0.14050918966992193, -2.6548811458427657e-17], 'true': [0.0014474296177181434, 0.1375192423554438], 'true,false': [0.1375192423554438, nan], 'false': [-2.6548811458427657e-17, nan]}, {'': [0.12762328879808701, 1.601633215852685e-16], 'true': [0.004084996703514263, 0.17407168665826736], 'true,false': [7.401486830834377e-18, 0.18907226406024769], 'true,false,false': [0.18907226406024769, nan], 'false': [1.601633215852685e-16, nan]}, {'': [0.10659208039151358, 8.20217537981646e-17], 'true': [0.009533366810679369, 0.10427431660890692], 'true,false': [8.558810226201207e-16, 0.1947283013902892], 'true,false,false': [0.1947283013902892, nan], 'false': [8.20217537981646e-17, nan]}, {'': [0.09624477510253125, 4.293992359873379e-17], 'true': [0.0012951387226538577, 0.16883385592277902], 'true,false': [0.16883385592277902, nan], 'false': [4.293992359873379e-17, nan]}, {'': [0.09105980898351694, 1.1679802918021878e-16], 'true': [0.012821907060057433, 0.09075525768651159], 'true,false': [-1.6148698540002277e-16, 0.18215066872243554], 'true,false,false': [0.18215066872243554, nan], 'false': [1.1679802918021878e-16, nan]}, {'': [0.08308778453361101, -6.747211751865592e-17], 'true': [0.0019477303520734628, 0.19612555833672035], 'true,false': [0.19612555833672035, nan], 'false': [-6.747211751865592e-17, nan]}, {'': [0.08511312778616427, -9.748299728416009e-17], 'true': [0.00684835216737299, 0.15286006402335722], 'true,false': [3.469446951953614e-18, 0.16556563690688353], 'true,false,false': [0.16556563690688353, nan], 'false': [-9.748299728416009e-17, nan]}, {'': [0.0815862614460198, 9.256590947002584e-17], 'true': [0.0815862614460198, nan], 'true,true': [0.004250340970016543, 0.1871211050155121], 'true,true,false': [-1.8924256101565167e-18, 0.20061728395061812], 'true,true,true': [0.0, -1.6956133467002392e-16]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, E).;true;true
9;true,true;genre(A, F).;true;true
9;true,false;genre(A, G).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( genre(B, E) )
%   | | then return 0.858148935099509;  // std dev = 1.08e-06, 220.000 (wgt'ed) examples reached here.  /* #pos=220 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.8581489350995117;  // std dev = 2.46e-07, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | | else return -0.14185106490048768;  // std dev = 6.66e-08, 115.000 (wgt'ed) examples reached here.  /* #neg=115 */
%   else return -0.14185106490048735;  // std dev = 2.98e-07, 395.000 (wgt'ed) examples reached here.  /* #neg=395 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.7194734122109542;  // std dev = 2.38e-07, 79.000 (wgt'ed) examples reached here.  /* #pos=79 */
%   | | else return 0.7135232850930733;  // std dev = 0.071, 142.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=141 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.719473412210955;  // std dev = 0.000, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | | else return -0.1254446385283913;  // std dev = 0.000, 126.000 (wgt'ed) examples reached here.  /* #neg=126 */
%   else return -0.12544463852839227;  // std dev = 0.000, 420.000 (wgt'ed) examples reached here.  /* #neg=420 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( actor(B) )
%   | | then return -0.11231637819360635;  // std dev = 1.39e-08, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else return -0.2264742373805929;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( director(B), actor(A) )
%   | | then return 0.5561629803432017;  // std dev = 0.012, 260.000 (wgt'ed) examples reached here.  /* #pos=260 */
%   | | else return -0.11231637819360618;  // std dev = 8.94e-08, 121.000 (wgt'ed) examples reached here.  /* #neg=121 */
%   else return -0.11231637819360628;  // std dev = 0.000, 386.000 (wgt'ed) examples reached here.  /* #neg=386 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.4173198806860628;  // std dev = 1.63e-07, 79.000 (wgt'ed) examples reached here.  /* #pos=79 */
%   | | else if ( actor(A) )
%   | | | then return 0.4187674452529255;  // std dev = 3.95e-07, 141.000 (wgt'ed) examples reached here.  /* #pos=141 */
%   | | | else return -0.18926363082915584;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(A, E) )
%   | | then return -0.1015963294878363;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.41731988068606196;  // std dev = 8.43e-08, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | | else return -0.10159632948783634;  // std dev = 0.000, 116.000 (wgt'ed) examples reached here.  /* #neg=116 */
%   else return -0.10159632948783617;  // std dev = 1.49e-07, 365.000 (wgt'ed) examples reached here.  /* #neg=365 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( actor(B) )
%   | | then return -0.09269127618926096;  // std dev = 5.27e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else return -0.16191260807335195;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.32120957395240174;  // std dev = 0.007, 220.000 (wgt'ed) examples reached here.  /* #pos=220 */
%   | | else if ( actor(B) )
%   | | | then return -0.09269127618926089;  // std dev = 6.50e-08, 110.000 (wgt'ed) examples reached here.  /* #neg=110 */
%   | | | else return 0.32058052916478624;  // std dev = 0.000, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   else return -0.09269127618926083;  // std dev = 1.53e-07, 394.000 (wgt'ed) examples reached here.  /* #neg=394 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.254963125882966;  // std dev = 0.000, 79.000 (wgt'ed) examples reached here.  /* #pos=79 */
%   | | else if ( actor(A) )
%   | | | then return 0.2558193620773298;  // std dev = 1.19e-07, 141.000 (wgt'ed) examples reached here.  /* #pos=141 */
%   | | | else return -0.14112489270495926;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( actor(B) )
%   | | then return -0.08518475138839679;  // std dev = 6.50e-08, 122.000 (wgt'ed) examples reached here.  /* #neg=122 */
%   | | else if ( actor(A) )
%   | | | then return 0.2550826357170617;  // std dev = 2.11e-08, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | | else return -0.12339911240112982;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.08518475138839678;  // std dev = 1.26e-07, 408.000 (wgt'ed) examples reached here.  /* #neg=408 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( actor(B) )
%   | | then return -0.07877675473109179;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return -0.12486957401819981;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.20999757084684004;  // std dev = 0.004, 220.000 (wgt'ed) examples reached here.  /* #pos=220 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.20969441659647797;  // std dev = 0.000, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | | else return -0.07976535253315663;  // std dev = 0.063, 129.000 (wgt'ed) examples reached here.  /* #neg=129 */
%   else return -0.07877675473109141;  // std dev = 7.60e-08, 352.000 (wgt'ed) examples reached here.  /* #neg=352 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.17693168906017562;  // std dev = 0.000, 79.000 (wgt'ed) examples reached here.  /* #pos=79 */
%   | | else if ( actor(A) )
%   | | | then return 0.1774633178178986;  // std dev = 0.000, 141.000 (wgt'ed) examples reached here.  /* #pos=141 */
%   | | | else return -0.11185091759264401;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( actor(A), director(B) )
%   | | then return 0.17705006951710955;  // std dev = 0.000, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | else return -0.07429538998733369;  // std dev = 0.066, 135.000 (wgt'ed) examples reached here.  /* #neg=135 */
%   else return -0.0732462257633371;  // std dev = 7.88e-08, 342.000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.15261882265674087;  // std dev = 0.000, 79.000 (wgt'ed) examples reached here.  /* #pos=79 */
%   | | else return 0.14772551607390588;  // std dev = 0.036, 144.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=141 */
%   | else if ( genre(A, E) )
%   | | then return -0.06836012943213042;  // std dev = 6.45e-09, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.15270863670890392;  // std dev = 4.59e-08, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | | else return -0.06938575208968217;  // std dev = 0.062, 129.000 (wgt'ed) examples reached here.  /* #neg=129 */
%   else return -0.06842697784420328;  // std dev = 0.000, 375.000 (wgt'ed) examples reached here.  /* #neg=375 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( genre(A, E) )
%   | | then return -0.11546464305924023;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.13450640034408948;  // std dev = 0.007, 220.000 (wgt'ed) examples reached here.  /* #pos=220 */
%   | else if ( genre(A, F) )
%   | | then return -0.06413285640125066;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.13397953261815979;  // std dev = 2.11e-08, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | | else return -0.06491784124213111;  // std dev = 0.052, 117.000 (wgt'ed) examples reached here.  /* #neg=117 */
%   else return -0.06419184008202562;  // std dev = 1.92e-07, 394.000 (wgt'ed) examples reached here.  /* #neg=394 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063409
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.487 seconds
Total inference time: 1.035 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064593
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.625 seconds
Refined model CLL: -0.064593


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063409
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 7.1080000000000005 seconds
Total inference time: 1.035 seconds
AUC ROC: 1.0
Total revision time: 7.1080000000000005
Best scored revision CLL: -0.064593


Dataset: 4_cora_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 00:11:05
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063409, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 7.1080000000000005, 'Inference time': 1.035, 'parameter_0.8': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.121109, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 1.506, 'Inference time': 1.063}}


Amount of data: 1.0
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;haswordauthor(E, C).;true;true
7;true,true,true;author(F, E), title(F, D).;false;false
7;true,true,false;title(G, D), venue(G, B).;false;false
7;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
7;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
7;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, B).;false;true
8;true,true,false;title(F, D), venue(F, A).;false;false
8;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
8;true,false,false;haswordvenue(A, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
8;false,true;haswordauthor(M, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;true,true;author(F, E), venue(F, B).;true;true
9;true,true,true;samebib(F, G), venue(G, A).;false;false
9;true,true,false;author(H, E), venue(H, A).;false;false
9;true,false;haswordtitle(I, C).;true;true
9;true,false,true;title(J, I), venue(J, A).;false;false
9;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995086;  // std dev = 1.08e-06, 267.000 (wgt'ed) examples reached here.  /* #pos=267 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.14180278125335954;  // std dev = 6.501, 208.000 (wgt'ed) examples reached here.  /* #neg=149 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048796;  // std dev = 0.000, 523.000 (wgt'ed) examples reached here.  /* #neg=523 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.703941830395896;  // std dev = 1.872, 272.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=267 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 5.27e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.16960479120800778;  // std dev = 6.289, 179.000 (wgt'ed) examples reached here.  /* #neg=120 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.1254446385283923;  // std dev = 0.000, 510.000 (wgt'ed) examples reached here.  /* #neg=510 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.13642003787828053;  // std dev = 0.244, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | else if ( movie(E, A) )
%   | | then return 0.3478286746567774;  // std dev = 0.379, 484.000 (wgt'ed) examples reached here.  /* #neg=158 #pos=326 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.112316378193606;  // std dev = 0.000, 447.000 (wgt'ed) examples reached here.  /* #neg=447 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.460149446503497;  // std dev = 1.494, 272.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=267 */
%   | else if ( genre(A, E) )
%   | | then return -0.0994173102225495;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.04703552362825975;  // std dev = 6.476, 204.000 (wgt'ed) examples reached here.  /* #neg=145 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783559;  // std dev = 1.42e-08, 458.000 (wgt'ed) examples reached here.  /* #neg=458 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12532524977467982;  // std dev = 0.307, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else if ( genre(B, E) )
%   | | then return 0.3612209297668114;  // std dev = 0.000, 267.000 (wgt'ed) examples reached here.  /* #pos=267 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.04706291913949779;  // std dev = 6.436, 198.000 (wgt'ed) examples reached here.  /* #neg=139 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.0926912761892613;  // std dev = 0.000, 469.000 (wgt'ed) examples reached here.  /* #neg=469 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2786191817896235;  // std dev = 0.766, 269.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=267 */
%   | else if ( movie(E, A) )
%   | | then return 0.00910285372035036;  // std dev = 0.434, 228.000 (wgt'ed) examples reached here.  /* #neg=169 #pos=59 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 1.33e-07, 444.000 (wgt'ed) examples reached here.  /* #neg=444 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.17048811291513244;  // std dev = 0.458, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else if ( genre(B, E) )
%   | | then return 0.22971715306731932;  // std dev = 0.000, 267.000 (wgt'ed) examples reached here.  /* #pos=267 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.03191174495611017;  // std dev = 6.456, 201.000 (wgt'ed) examples reached here.  /* #neg=142 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109197;  // std dev = 0.000, 484.000 (wgt'ed) examples reached here.  /* #neg=484 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18633381130510024;  // std dev = 0.817, 270.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=267 */
%   | else if ( movie(E, B) )
%   | | then return 0.008126654955154591;  // std dev = 6.516, 226.000 (wgt'ed) examples reached here.  /* #neg=167 #pos=59 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.07324622576333706;  // std dev = 1.12e-07, 473.000 (wgt'ed) examples reached here.  /* #neg=473 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.15544544868025567;  // std dev = 1.077, 272.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=267 */
%   | else if ( genre(A, E) )
%   | | then return -0.07032439869406694;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.01152388113790927;  // std dev = 6.513, 210.000 (wgt'ed) examples reached here.  /* #neg=151 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420355;  // std dev = 0.000, 501.000 (wgt'ed) examples reached here.  /* #neg=501 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return -0.35672784361026966;  // std dev = 7.45e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.14412968101134754;  // std dev = 0.000, 267.000 (wgt'ed) examples reached here.  /* #pos=267 */
%   | | else if ( genre(A, G) )
%   | | | then return -0.06586330621684257;  // std dev = 5.89e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | | else return 0.017512844830603565;  // std dev = 6.476, 204.000 (wgt'ed) examples reached here.  /* #neg=145 #pos=59 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.0641918400820254;  // std dev = 2.43e-07, 486.000 (wgt'ed) examples reached here.  /* #neg=486 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.131949
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.963 seconds
Total inference time: 0.981 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.978388
   AUC PR    = 0.863056
   CLL	      = -0.129243
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.819018
   F1        = 0.900506


Total scoring time: 1.833 seconds
Parameter learned model CLL: -0.129243


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 17, 0], 'true,false,true': [1.08e-06, 0, 267], 'true,false,false,true': [6.501, 149, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 523, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.872, 5, 267], 'true,false,true': [5.27e-09, 11, 0], 'true,false,false,true': [6.289, 120, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 510, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.244, 28, 0], 'true,false,true': [0.379, 158, 326], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 447, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.494, 5, 267], 'true,false,true': [0.0, 15, 0], 'true,false,false,true': [6.476, 145, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.42e-08, 458, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.307, 17, 0], 'true,false,true': [0.0, 0, 267], 'true,false,false,true': [6.436, 139, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 469, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.766, 2, 267], 'true,false,true': [0.434, 169, 59], 'true,false,false': [0.0, 0, 0], 'false,true': [1.33e-07, 444, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.458, 16, 0], 'true,false,true': [0.0, 0, 267], 'true,false,false,true': [6.456, 142, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 484, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.817, 3, 267], 'true,false,true': [6.516, 167, 59], 'true,false,false': [0.0, 0, 0], 'false,true': [1.12e-07, 473, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [1.077, 5, 267], 'true,false,true': [0.0, 20, 0], 'true,false,false,true': [6.513, 151, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 501, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true,true,false': 'genre(A, G)'}, {'true,true,true,true': [7.45e-09, 3, 0], 'true,true,true,false': [0.0, 0, 267], 'true,true,false,true': [5.89e-09, 13, 0], 'true,true,false,false': [6.476, 145, 59], 'true,false': [0.0, 0, 0], 'false': [2.43e-07, 486, 0]}]]
[{'': [0.223560711216871, -1.1548017693997805e-16], 'true': [-3.2653618371328133e-18, 0.21528642659280056], 'true,false': [4.364382346990877e-15, 0.20319434171597683], 'true,false,false': [0.20319434171597683, nan], 'false': [-1.1548017693997805e-16, nan]}, {'': [0.1687704610792321, -1.2887294717217504e-16], 'true': [0.012881683798398335, 0.21292225628012568], 'true,false': [2.523234146875356e-18, 0.2209668861770834], 'true,false,false': [0.2209668861770834, nan], 'false': [-1.2887294717217504e-16, nan]}, {'': [0.1481077611837247, -1.7882786973828024e-17], 'true': [0.002130283504046795, 0.14372869462862964], 'true,false': [0.14372869462862964, nan], 'false': [-1.7882786973828024e-17, nan]}, {'': [0.1348089555926764, 1.9974318172295393e-16], 'true': [0.008208570359703134, 0.19285828738408958], 'true,false': [-3.7007434154171884e-18, 0.20556997308727148], 'true,false,false': [0.20556997308727148, nan], 'false': [1.9974318172295393e-16, nan]}, {'': [0.11364138087917645, -1.1362623706184971e-17], 'true': [0.005542088864079015, 0.11320405886071144], 'true,false': [-7.717505369678991e-16, 0.20918783797571633], 'true,false,false': [0.20918783797571633, nan], 'false': [-1.1362623706184971e-17, nan]}, {'': [0.10557856997167318, 4.000803692342906e-17], 'true': [0.0021831751005921287, 0.1882512926647003], 'true,false': [0.1882512926647003, nan], 'false': [4.000803692342906e-17, nan]}, {'': [0.09900029595982973, -2.9361270072731413e-17], 'true': [0.013136335137383121, 0.0986504341180644], 'true,false': [-5.3224174963303385e-17, 0.2073711046756264], 'true,false,false': [0.2073711046756264, nan], 'false': [-2.9361270072731413e-17, nan]}, {'': [0.09481921439091076, 2.6288579018608357e-17], 'true': [0.002471259576621171, 0.18785891007928493], 'true,false': [0.18785891007928493, nan], 'false': [2.6288579018608357e-17, nan]}, {'': [0.0927285668252711, -1.2586959640460856e-16], 'true': [0.00426706964387731, 0.18498322461822955], 'true,false': [0.0, 0.20201814058957024], 'true,false,false': [0.20201814058957024, nan], 'false': [-1.2586959640460856e-16, nan]}, {'': [0.09173894896217444, 1.215305862346879e-16], 'true': [0.09173894896217444, nan], 'true,true': [0.0027563438441158155, 0.1936462266258758], 'true,true,false': [2.6688053476566264e-18, 0.20556997308727523], 'true,true,true': [1.850371707708594e-17, -3.991813122247754e-17]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, E).;true;true
9;true,true;genre(A, F).;true;true
9;true,false;genre(A, G).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995086;  // std dev = 1.08e-06, 267.000 (wgt'ed) examples reached here.  /* #pos=267 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.8581489350995125;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.1418510649004881;  // std dev = 0.000, 153.000 (wgt'ed) examples reached here.  /* #neg=153 */
%   else return -0.1418510649004872;  // std dev = 2.98e-07, 433.000 (wgt'ed) examples reached here.  /* #neg=433 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.7194734122109543;  // std dev = 2.23e-07, 95.000 (wgt'ed) examples reached here.  /* #pos=95 */
%   | | else return 0.7002707292396078;  // std dev = 0.126, 176.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=172 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 7.45e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.7194734122109543;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.12544463852839124;  // std dev = 5.96e-08, 144.000 (wgt'ed) examples reached here.  /* #neg=144 */
%   else return -0.12544463852839235;  // std dev = 0.000, 496.000 (wgt'ed) examples reached here.  /* #neg=496 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( actor(B) )
%   | | then return -0.11231637819360638;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else return -0.22416102523333215;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( director(B), actor(A) )
%   | | then return 0.5578655147417858;  // std dev = 0.043, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | | else return -0.11231637819360629;  // std dev = 8.82e-08, 155.000 (wgt'ed) examples reached here.  /* #neg=155 */
%   else return -0.11231637819360588;  // std dev = 0.000, 483.000 (wgt'ed) examples reached here.  /* #neg=483 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.416905943983288;  // std dev = 5.96e-08, 95.000 (wgt'ed) examples reached here.  /* #pos=95 */
%   | | else return 0.41113839347839987;  // std dev = 0.079, 175.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=172 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783634;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.41690594398328773;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.10159632948783642;  // std dev = 0.000, 140.000 (wgt'ed) examples reached here.  /* #neg=140 */
%   else return -0.1015963294878355;  // std dev = 3.24e-07, 476.000 (wgt'ed) examples reached here.  /* #neg=476 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( actor(B) )
%   | | then return -0.09269127618926093;  // std dev = 1.05e-08, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else return -0.25834218480828086;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.32381750979630763;  // std dev = 0.043, 267.000 (wgt'ed) examples reached here.  /* #pos=267 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.3202999263498402;  // std dev = 1.60e-07, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.09269127618926076;  // std dev = 6.83e-08, 140.000 (wgt'ed) examples reached here.  /* #neg=140 */
%   else return -0.09269127618926148;  // std dev = 0.000, 506.000 (wgt'ed) examples reached here.  /* #neg=506 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.25422365930701335;  // std dev = 1.66e-07, 95.000 (wgt'ed) examples reached here.  /* #pos=95 */
%   | | else return 0.2482827301411863;  // std dev = 0.070, 176.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=172 */
%   | else if ( actor(A), director(B) )
%   | | then return 0.25489114837096455;  // std dev = 8.43e-08, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | else return -0.08518475138839678;  // std dev = 6.83e-08, 176.000 (wgt'ed) examples reached here.  /* #neg=176 */
%   else return -0.08518475138839678;  // std dev = 1.49e-07, 492.000 (wgt'ed) examples reached here.  /* #neg=492 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( actor(B) )
%   | | then return -0.07877675473109179;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else return -0.25641946843435887;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.21241001668617696;  // std dev = 0.040, 267.000 (wgt'ed) examples reached here.  /* #pos=267 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.20955913486342567;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.07877675473109154;  // std dev = 7.74e-08, 149.000 (wgt'ed) examples reached here.  /* #neg=149 */
%   else return -0.07877675473109193;  // std dev = 1.59e-07, 476.000 (wgt'ed) examples reached here.  /* #neg=476 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.1761220772171073;  // std dev = 9.66e-08, 95.000 (wgt'ed) examples reached here.  /* #pos=95 */
%   | | else return 0.17394453553102318;  // std dev = 0.051, 175.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=172 */
%   | else if ( actor(A), director(B) )
%   | | then return 0.1769508344765977;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | else return -0.07324622576333695;  // std dev = 5.16e-08, 150.000 (wgt'ed) examples reached here.  /* #neg=150 */
%   else return -0.07324622576333732;  // std dev = 0.000, 498.000 (wgt'ed) examples reached here.  /* #neg=498 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( director(A) )
%   | | then return -0.2410123452213108;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0.15478356377278632;  // std dev = 0.034, 267.000 (wgt'ed) examples reached here.  /* #pos=267 */
%   | else if ( genre(A, E) )
%   | | then return -0.06842697784420272;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.15263334889499725;  // std dev = 3.33e-08, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.06842697784420264;  // std dev = 6.58e-08, 157.000 (wgt'ed) examples reached here.  /* #neg=157 */
%   else return -0.06842697784420351;  // std dev = 0.000, 476.000 (wgt'ed) examples reached here.  /* #neg=476 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( genre(A, E) )
%   | | then return -0.19970331096870822;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.13559795035945435;  // std dev = 0.030, 267.000 (wgt'ed) examples reached here.  /* #pos=267 */
%   | else if ( genre(A, F) )
%   | | then return -0.06419184008202619;  // std dev = 7.90e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.13392075127610223;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.06419184008202626;  // std dev = 0.000, 148.000 (wgt'ed) examples reached here.  /* #neg=148 */
%   else return -0.06419184008202544;  // std dev = 2.31e-07, 460.000 (wgt'ed) examples reached here.  /* #neg=460 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063547
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.774 seconds
Total inference time: 1.096 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064986
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.833 seconds
Refined model CLL: -0.064986


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063547
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 8.403 seconds
Total inference time: 1.096 seconds
AUC ROC: 1.0
Total revision time: 8.403
Best scored revision CLL: -0.064986


Dataset: 4_cora_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 00:11:16
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063547, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 8.403, 'Inference time': 1.096, 'parameter_1.0': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.131949, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 1.963, 'Inference time': 0.981}}


Starting fold 2

Target train facts examples: 870
Target train pos examples: 324
Target train neg examples: 10813

Target test facts examples: 208
Target test pos	 examples: 58
Target test neg examples: 3423

Amount of data: 0.2
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;haswordauthor(E, C).;true;true
7;true,true,true;author(F, E), title(F, D).;false;false
7;true,true,false;title(G, D), venue(G, B).;false;false
7;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
7;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
7;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, B).;false;true
8;true,true,false;title(F, D), venue(F, A).;false;false
8;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
8;true,false,false;haswordvenue(A, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
8;false,true;haswordauthor(M, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;true,true;author(F, E), venue(F, B).;true;true
9;true,true,true;samebib(F, G), venue(G, A).;false;false
9;true,true,false;author(H, E), venue(H, A).;false;false
9;true,false;haswordtitle(I, C).;true;true
9;true,false,true;title(J, I), venue(J, A).;false;false
9;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995123;  // std dev = 8.43e-08, 53.000 (wgt'ed) examples reached here.  /* #pos=53 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.12005369700427426;  // std dev = 2.849, 42.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=11 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048763;  // std dev = 8.94e-08, 101.000 (wgt'ed) examples reached here.  /* #neg=101 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7038267816417074;  // std dev = 0.837, 54.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=53 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.09871137410356695;  // std dev = 2.861, 43.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=11 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.140432302407498;  // std dev = 0.097, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( movie(E, A) )
%   | | then return 0.3312168210080593;  // std dev = 0.380, 99.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=64 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.1123163781936062;  // std dev = 7.74e-08, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4641636069981854;  // std dev = 0.672, 54.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=53 */
%   | else if ( genre(A, E) )
%   | | then return -0.09905865502906418;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.09158871000608586;  // std dev = 2.746, 35.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=11 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783626;  // std dev = 4.56e-09, 97.000 (wgt'ed) examples reached here.  /* #neg=97 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09056245021893544;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.3641594172224959;  // std dev = 1.23e-07, 53.000 (wgt'ed) examples reached here.  /* #pos=53 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.0054916555693412285;  // std dev = 2.883, 45.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=11 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926098;  // std dev = 4.59e-08, 99.000 (wgt'ed) examples reached here.  /* #neg=99 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2846491887703984;  // std dev = 9.88e-08, 53.000 (wgt'ed) examples reached here.  /* #pos=53 */
%   | else if ( movie(E, A) )
%   | | then return -0.028565422446280436;  // std dev = 0.396, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839682;  // std dev = 5.16e-08, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.0812178096287364;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.23038035750057206;  // std dev = 5.58e-08, 53.000 (wgt'ed) examples reached here.  /* #pos=53 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.04021796914006165;  // std dev = 2.824, 40.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=11 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109162;  // std dev = 4.94e-08, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.19208092856278486;  // std dev = 8.69e-08, 53.000 (wgt'ed) examples reached here.  /* #pos=53 */
%   | else if ( movie(E, B) )
%   | | then return 0.05971889699920262;  // std dev = 2.767, 37.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=11 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.07324622576333707;  // std dev = 0.000, 100.000 (wgt'ed) examples reached here.  /* #neg=100 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1544588947081007;  // std dev = 0.511, 54.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=53 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.03626396056564446;  // std dev = 2.796, 38.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420265;  // std dev = 4.84e-09, 105.000 (wgt'ed) examples reached here.  /* #neg=105 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.14392262538496142;  // std dev = 0.000, 53.000 (wgt'ed) examples reached here.  /* #pos=53 */
%   | | else if ( genre(A, G) )
%   | | | then return -0.07962790474043498;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return -0.010128200669854804;  // std dev = 2.872, 44.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=11 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.06419184008202626;  // std dev = 0.000, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.121398
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 0.891 seconds
Total inference time: 0.979 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.97941
   AUC PR    = 0.870501
   CLL	      = -0.125548
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.828125
   F1        = 0.905983


Total scoring time: 0.861 seconds
Parameter learned model CLL: -0.125548


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [8.43e-08, 0, 53], 'true,false,false,true': [2.849, 31, 11], 'true,false,false,false': [0.0, 0, 0], 'false,true': [8.94e-08, 101, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.837, 1, 53], 'true,false,true': [0.0, 2, 0], 'true,false,false,true': [2.861, 32, 11], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 95, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.097, 4, 0], 'true,false,true': [0.38, 35, 64], 'true,false,false': [0.0, 0, 0], 'false,true': [7.74e-08, 95, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.672, 1, 53], 'true,false,true': [0.0, 6, 0], 'true,false,false,true': [2.746, 24, 11], 'true,false,false,false': [0.0, 0, 0], 'false,true': [4.56e-09, 97, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [1.23e-07, 0, 53], 'true,false,false,true': [2.883, 34, 11], 'true,false,false,false': [0.0, 0, 0], 'false,true': [4.59e-08, 99, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [9.88e-08, 0, 53], 'true,false,true': [0.396, 44, 11], 'true,false,false': [0.0, 0, 0], 'false,true': [5.16e-08, 88, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 2, 0], 'true,false,true': [5.58e-08, 0, 53], 'true,false,false,true': [2.824, 29, 11], 'true,false,false,false': [0.0, 0, 0], 'false,true': [4.94e-08, 86, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [8.69e-08, 0, 53], 'true,false,true': [2.767, 26, 11], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 100, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.511, 1, 53], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [2.796, 27, 11], 'true,false,false,false': [0.0, 0, 0], 'false,true': [4.84e-09, 105, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true,true,false': 'genre(A, G)'}, {'true,true,true,true': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 53], 'true,true,false,true': [0.0, 3, 0], 'true,true,false,false': [2.872, 33, 11], 'true,false': [0.0, 0, 0], 'false': [0.0, 90, 0]}]]
[{'': [0.22222222222222154, 7.91446116564468e-17], 'true': [0.0, 0.21983379501384973], 'true,false': [1.340646671245472e-16, 0.19331065759637137], 'true,false,false': [0.19331065759637137, nan], 'false': [7.91446116564468e-17, nan]}, {'': [0.18453328192888407, -1.402386978473882e-17], 'true': [0.012975303553036197, 0.1840460454178643], 'true,false': [0.0, 0.19037317468902132], 'true,false,false': [0.19037317468902132, nan], 'false': [-1.402386978473882e-17, nan]}, {'': [0.14722706393737478, 6.310741403132469e-17], 'true': [0.002371515583203889, 0.14444086596315966], 'true,false': [0.14444086596315966, nan], 'false': [6.310741403132469e-17, nan]}, {'': [0.12545110490411632, 1.8312957107219077e-17], 'true': [0.008354425947748198, 0.18851272492210622], 'true,false': [-1.1564823173178713e-18, 0.2155102040816327], 'true,false,false': [0.2155102040816327, nan], 'false': [1.8312957107219077e-17, nan]}, {'': [0.11641532657095705, 2.1307310573614114e-17], 'true': [0.0, 0.11675358207397271], 'true,false': [2.848874176396628e-16, 0.18469135802469136], 'true,false,false': [0.18469135802469136, nan], 'false': [2.1307310573614114e-17, nan]}, {'': [0.10452123209942504, 3.027880976250427e-17], 'true': [1.8433891729625242e-16, 0.1570983605297336], 'true,false': [0.1570983605297336, nan], 'false': [3.027880976250427e-17, nan]}, {'': [0.09371296511015867, 2.840105411831796e-17], 'true': [0.0, 0.09461647311453152], 'true,false': [5.86532918669894e-17, 0.1993750000000001], 'true,false,false': [0.1993750000000001, nan], 'false': [2.840105411831796e-17, nan]}, {'': [0.0893264101113245, -5.551115123125783e-18], 'true': [1.424437088198314e-16, 0.20696329600331437], 'true,false': [0.20696329600331437, nan], 'false': [-5.551115123125783e-18, nan]}, {'': [0.0911841108900075, 2.4319171015598667e-17], 'true': [0.004843630409105605, 0.20567867036011067], 'true,false': [nan, 0.20567867036011067], 'true,false,false': [0.20567867036011067, nan], 'false': [2.4319171015598667e-17, nan]}, {'': [0.08889258111969285, -1.295260195396016e-17], 'true': [0.08889258111969285, nan], 'true,true': [-7.54113752575578e-17, 0.1758205466592569], 'true,true,false': [-1.1564823173178713e-18, 0.18749999999999992], 'true,true,true': [nan, -7.54113752575578e-17]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, E).;true;true
9;true,false;genre(A, G).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995123;  // std dev = 8.43e-08, 53.000 (wgt'ed) examples reached here.  /* #pos=53 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   else return -0.14185106490048763;  // std dev = 8.43e-08, 106.000 (wgt'ed) examples reached here.  /* #neg=106 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109546;  // std dev = 0.000, 53.000 (wgt'ed) examples reached here.  /* #pos=53 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( actor(B) )
%   | | | then return -0.12544463852839138;  // std dev = 0.000, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | | | else return 0.7194734122109542;  // std dev = 4.21e-08, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.1254446385283914;  // std dev = 0.000, 89.000 (wgt'ed) examples reached here.  /* #neg=89 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.13535676226541965;  // std dev = 0.103, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( director(B), actor(A) )
%   | | then return 0.5553664367462837;  // std dev = 1.98e-07, 64.000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | | else return -0.11643073249214449;  // std dev = 0.113, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   else return -0.11231637819360621;  // std dev = 7.45e-08, 91.000 (wgt'ed) examples reached here.  /* #neg=91 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.41751358415830986;  // std dev = 4.71e-08, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else return 0.3986613917306838;  // std dev = 0.107, 33.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   | else if ( genre(A, E) )
%   | | then return -0.09951254957513767;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( actor(B) )
%   | | | then return -0.10122140888231168;  // std dev = 0.000, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | | | else return 0.41751358415831014;  // std dev = 2.58e-08, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.10159632948783619;  // std dev = 5.58e-08, 85.000 (wgt'ed) examples reached here.  /* #neg=85 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.18400382174698054;  // std dev = 0.132, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.3231999166234109;  // std dev = 0.015, 53.000 (wgt'ed) examples reached here.  /* #pos=53 */
%   | | else if ( actor(B) )
%   | | | then return -0.09237726992842156;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | | else return 0.27026134796842166;  // std dev = 0.580, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   else return -0.09269127618926092;  // std dev = 5.77e-08, 105.000 (wgt'ed) examples reached here.  /* #neg=105 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.25687032953008365;  // std dev = 0.013, 53.000 (wgt'ed) examples reached here.  /* #pos=53 */
%   | else if ( actor(B) )
%   | | then return -0.08410972357520059;  // std dev = 0.013, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | else return 0.2648786645773385;  // std dev = 2.58e-08, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.08518475138839682;  // std dev = 5.37e-08, 96.000 (wgt'ed) examples reached here.  /* #neg=96 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14468170323562832;  // std dev = 0.180, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.21095715220342803;  // std dev = 0.011, 53.000 (wgt'ed) examples reached here.  /* #pos=53 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.2165912963165735;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.0989836618458913;  // std dev = 0.446, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   else return -0.07877675473109161;  // std dev = 5.27e-08, 91.000 (wgt'ed) examples reached here.  /* #neg=91 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1779761381213717;  // std dev = 0.010, 53.000 (wgt'ed) examples reached here.  /* #pos=53 */
%   | else if ( director(B), actor(A) )
%   | | then return 0.18209261508534766;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( actor(A) )
%   | | | then return -0.07172967163462968;  // std dev = 1.05e-08, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | | else return -0.22156791341649906;  // std dev = 0.319, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.07324622576333707;  // std dev = 0.000, 109.000 (wgt'ed) examples reached here.  /* #neg=109 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06513071137324718;  // std dev = 0.031, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | else return 0.15394603206672122;  // std dev = 0.013, 64.000 (wgt'ed) examples reached here.  /* #pos=64 */
%   else return -0.06842697784420267;  // std dev = 3.94e-08, 83.000 (wgt'ed) examples reached here.  /* #neg=83 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.13314280970958164;  // std dev = 1.29e-08, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else return 0.12117085207350203;  // std dev = 0.080, 33.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   | else if ( genre(A, E) )
%   | | then return -0.047350986370931776;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( actor(B) )
%   | | | then return -0.06313411401133882;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | | else return 0.13725574989651745;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.06419184008202626;  // std dev = 0.000, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.06338
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.326 seconds
Total inference time: 0.926 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.067868
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.897 seconds
Refined model CLL: -0.067868


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.06338
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.9750000000000005 seconds
Total inference time: 0.926 seconds
AUC ROC: 1.0
Total revision time: 3.9750000000000005
Best scored revision CLL: -0.067868


Dataset: 4_cora_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 00:11:22
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.06338, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 3.9750000000000005, 'Inference time': 0.926, 'parameter_0.2': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.121398, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 0.891, 'Inference time': 0.979}}


Amount of data: 0.4
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;haswordauthor(E, C).;true;true
7;true,true,true;author(F, E), title(F, D).;false;false
7;true,true,false;title(G, D), venue(G, B).;false;false
7;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
7;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
7;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, B).;false;true
8;true,true,false;title(F, D), venue(F, A).;false;false
8;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
8;true,false,false;haswordvenue(A, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
8;false,true;haswordauthor(M, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;true,true;author(F, E), venue(F, B).;true;true
9;true,true,true;samebib(F, G), venue(G, A).;false;false
9;true,true,false;author(H, E), venue(H, A).;false;false
9;true,false;haswordtitle(I, C).;true;true
9;true,false,true;title(J, I), venue(J, A).;false;false
9;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995112;  // std dev = 4.77e-07, 105.000 (wgt'ed) examples reached here.  /* #pos=105 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.09814893509951172;  // std dev = 4.271, 100.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=24 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048838;  // std dev = 0.000, 197.000 (wgt'ed) examples reached here.  /* #neg=197 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109546;  // std dev = 0.000, 105.000 (wgt'ed) examples reached here.  /* #pos=105 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.18380450904319945;  // std dev = 3.986, 71.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=24 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.1254446385283916;  // std dev = 0.000, 190.000 (wgt'ed) examples reached here.  /* #neg=190 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14523121258191102;  // std dev = 0.138, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( movie(E, A) )
%   | | then return 0.38554203158245565;  // std dev = 0.363, 179.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=129 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360658;  // std dev = 0.000, 198.000 (wgt'ed) examples reached here.  /* #neg=198 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.45305099602527116;  // std dev = 0.659, 106.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=105 */
%   | else if ( genre(A, E) )
%   | | then return -0.09863119459885059;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.05259710026508092;  // std dev = 4.110, 81.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=24 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783652;  // std dev = 0.000, 192.000 (wgt'ed) examples reached here.  /* #neg=192 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.22077972746515714;  // std dev = 0.226, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(B, E) )
%   | | then return 0.35064269392054803;  // std dev = 0.000, 105.000 (wgt'ed) examples reached here.  /* #pos=105 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.05027393214562375;  // std dev = 4.088, 79.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=24 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926058;  // std dev = 8.82e-08, 188.000 (wgt'ed) examples reached here.  /* #neg=188 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.26581215904157746;  // std dev = 0.727, 107.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=105 */
%   | else if ( movie(E, A) )
%   | | then return 0.011933982748778094;  // std dev = 0.439, 90.000 (wgt'ed) examples reached here.  /* #neg=66 #pos=24 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 7.15e-08, 177.000 (wgt'ed) examples reached here.  /* #neg=177 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.13757778764713108;  // std dev = 0.264, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( genre(B, E) )
%   | | then return 0.22571441513518775;  // std dev = 9.42e-08, 105.000 (wgt'ed) examples reached here.  /* #pos=105 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.004187170919359317;  // std dev = 4.187, 89.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=24 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109147;  // std dev = 7.60e-08, 189.000 (wgt'ed) examples reached here.  /* #neg=189 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18018625903545285;  // std dev = 0.639, 107.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=105 */
%   | else if ( movie(E, B) )
%   | | then return 0.006112896191421406;  // std dev = 4.165, 94.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=24 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.0732462257633367;  // std dev = 1.07e-07, 184.000 (wgt'ed) examples reached here.  /* #neg=184 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.15825435955665418;  // std dev = 0.465, 106.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=105 */
%   | else if ( genre(A, E) )
%   | | then return -0.06589854176139819;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.02166753405363798;  // std dev = 4.130, 83.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=24 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420262;  // std dev = 5.59e-09, 162.000 (wgt'ed) examples reached here.  /* #neg=162 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return -0.33879637017705666;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0.1422379633003845;  // std dev = 0.000, 105.000 (wgt'ed) examples reached here.  /* #pos=105 */
%   | | else if ( genre(A, G) )
%   | | | then return -0.06195629709668301;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.05256839476822754;  // std dev = 4.027, 74.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=24 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.06419184008202626;  // std dev = 0.000, 192.000 (wgt'ed) examples reached here.  /* #neg=192 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.128867
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.164 seconds
Total inference time: 0.959 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.978986
   AUC PR    = 0.863507
   CLL	      = -0.130949
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.813953
   F1        = 0.897436


Total scoring time: 1.178 seconds
Parameter learned model CLL: -0.130949


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 8, 0], 'true,false,true': [4.77e-07, 0, 105], 'true,false,false,true': [4.271, 76, 24], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 197, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 105], 'true,false,true': [0.0, 8, 0], 'true,false,false,true': [3.986, 47, 24], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 190, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.138, 7, 0], 'true,false,true': [0.363, 50, 129], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 198, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.659, 1, 105], 'true,false,true': [0.0, 5, 0], 'true,false,false,true': [4.11, 57, 24], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 192, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.226, 6, 0], 'true,false,true': [0.0, 0, 105], 'true,false,false,true': [4.088, 55, 24], 'true,false,false,false': [0.0, 0, 0], 'false,true': [8.82e-08, 188, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.727, 2, 105], 'true,false,true': [0.439, 66, 24], 'true,false,false': [0.0, 0, 0], 'false,true': [7.15e-08, 177, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.264, 7, 0], 'true,false,true': [9.42e-08, 0, 105], 'true,false,false,true': [4.187, 65, 24], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.6e-08, 189, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.639, 2, 105], 'true,false,true': [4.165, 70, 24], 'true,false,false': [0.0, 0, 0], 'false,true': [1.07e-07, 184, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.465, 1, 105], 'true,false,true': [0.0, 8, 0], 'true,false,false,true': [4.13, 59, 24], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.59e-09, 162, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true,true,false': 'genre(A, G)'}, {'true,true,true,true': [0.0, 1, 0], 'true,true,true,false': [0.0, 0, 105], 'true,true,false,true': [0.0, 4, 0], 'true,true,false,false': [4.027, 50, 24], 'true,false': [0.0, 0, 0], 'false': [0.0, 192, 0]}]]
[{'': [0.23884149970244412, -2.366972945901349e-16], 'true': [-6.938893903907228e-18, 0.23328970850684533], 'true,false': [2.1654635756498293e-15, 0.18240000000000098], 'true,false,false': [0.18240000000000098, nan], 'false': [-2.366972945901349e-16, nan]}, {'': [0.16884450103305673, -2.5710427938687835e-17], 'true': [-5.413658939124573e-16, 0.20980921191873034], 'true,false': [0.0, 0.22376512596707115], 'true,false,false': [0.22376512596707115, nan], 'false': [-2.5710427938687835e-17, nan]}, {'': [0.13687125935434416, -4.0371746350005693e-17], 'true': [0.002708465807023814, 0.13151547454589482], 'true,false': [0.13151547454589482, nan], 'false': [-4.0371746350005693e-17, nan]}, {'': [0.13220328072627593, -9.483155002006545e-17], 'true': [0.004099155865149323, 0.19763477464808865], 'true,false': [-1.3877787807814458e-18, 0.20850480109739383], 'true,false,false': [0.20850480109739383, nan], 'false': [-9.483155002006545e-17, nan]}, {'': [0.11560452438630947, 4.133809134242604e-17], 'true': [0.008525133364215084, 0.11291401332402691], 'true,false': [-2.8760063114099295e-16, 0.21150456657586947], 'true,false,false': [0.21150456657586947, nan], 'false': [4.133809134242604e-17, nan]}, {'': [0.10665849541611244, 2.885325374732045e-17], 'true': [0.00493467396941688, 0.19258873657823766], 'true,false': [0.19258873657823766, nan], 'false': [2.885325374732045e-17, nan]}, {'': [0.10161338105391975, 3.054581866693552e-17], 'true': [0.009957214392305815, 0.10253610792716482], 'true,false': [8.458842092382145e-17, 0.196944830198207], 'true,false,false': [0.196944830198207, nan], 'false': [3.054581866693552e-17, nan]}, {'': [0.09588083792873855, 6.214835409586475e-17], 'true': [0.0038183846420341006, 0.18454466439486894], 'true,false': [0.18454466439486894, nan], 'false': [6.214835409586475e-17, nan]}, {'': [0.0931549840159613, 3.0839528461809905e-17], 'true': [0.0020376579940953646, 0.18809000828638853], 'true,false': [0.0, 0.20554507185367976], 'true,false,false': [0.20554507185367976, nan], 'false': [3.0839528461809905e-17, nan]}, {'': [0.09167034114548116, -2.8912057932946786e-18], 'true': [0.09167034114548116, nan], 'true,true': [0.002162368560726933, 0.20853832556849133], 'true,true,false': [0.0, 0.21913805697589445], 'true,true,true': [0.0, -1.0996494720096789e-16]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, E).;true;true
9;true,true;genre(A, F).;true;true
9;true,false;genre(A, G).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995112;  // std dev = 4.77e-07, 105.000 (wgt'ed) examples reached here.  /* #pos=105 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.858148935099512;  // std dev = 1.03e-07, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | | else return -0.14185106490048766;  // std dev = 5.77e-08, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   else return -0.1418510649004884;  // std dev = 0.000, 199.000 (wgt'ed) examples reached here.  /* #neg=199 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.7194734122109551;  // std dev = 0.000, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | | else return 0.706062014580171;  // std dev = 0.106, 63.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=62 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.7194734122109544;  // std dev = 4.21e-08, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | | else return -0.1254446385283916;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   else return -0.1254446385283915;  // std dev = 0.000, 174.000 (wgt'ed) examples reached here.  /* #neg=174 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.5569569197184494;  // std dev = 0.019, 129.000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | else return -0.11497175312812617;  // std dev = 0.158, 85.000 (wgt'ed) examples reached here.  /* #neg=85 */
%   else return -0.11231637819360638;  // std dev = 2.11e-08, 169.000 (wgt'ed) examples reached here.  /* #neg=169 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.41712683589569016;  // std dev = 4.21e-08, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | | else return 0.40082436886697925;  // std dev = 0.109, 64.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=62 */
%   | else if ( genre(A, E) )
%   | | then return -0.10135421770269971;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.41712683589569016;  // std dev = 4.21e-08, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | | else return -0.1013542177026998;  // std dev = 0.000, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
%   else return -0.10159632948783649;  // std dev = 0.000, 169.000 (wgt'ed) examples reached here.  /* #neg=169 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09248852111035186;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.3242905728023387;  // std dev = 0.033, 105.000 (wgt'ed) examples reached here.  /* #pos=105 */
%   | | else if ( actor(B) )
%   | | | then return -0.09248852111035175;  // std dev = 3.94e-08, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   | | | else return 0.3204496632372474;  // std dev = 2.98e-08, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   else return -0.09269127618926061;  // std dev = 8.56e-08, 179.000 (wgt'ed) examples reached here.  /* #neg=179 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.2571275882996674;  // std dev = 0.031, 129.000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | else return -0.09370681249727938;  // std dev = 0.299, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
%   else return -0.08518475138839678;  // std dev = 7.60e-08, 184.000 (wgt'ed) examples reached here.  /* #neg=184 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09450438302622816;  // std dev = 0.157, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( genre(B, E) )
%   | | then return 0.2115650558553201;  // std dev = 0.025, 105.000 (wgt'ed) examples reached here.  /* #pos=105 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.2092779314955626;  // std dev = 0.000, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | | else return -0.07860067851271098;  // std dev = 0.035, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   else return -0.07877675473109147;  // std dev = 7.74e-08, 196.000 (wgt'ed) examples reached here.  /* #neg=196 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.17810990973169635;  // std dev = 0.023, 129.000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | else return -0.07484886041734881;  // std dev = 0.152, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
%   else return -0.07324622576333668;  // std dev = 1.10e-07, 187.000 (wgt'ed) examples reached here.  /* #neg=187 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1537899341323484;  // std dev = 0.019, 105.000 (wgt'ed) examples reached here.  /* #pos=105 */
%   | else if ( genre(A, E) )
%   | | then return -0.06665964077162966;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( actor(B) )
%   | | | then return -0.06765595307078388;  // std dev = 2.04e-08, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
%   | | | else return 0.1523004317298106;  // std dev = 2.58e-08, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   else return -0.06842697784420262;  // std dev = 7.81e-08, 188.000 (wgt'ed) examples reached here.  /* #neg=188 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.13482362711738743;  // std dev = 0.017, 105.000 (wgt'ed) examples reached here.  /* #pos=105 */
%   | else if ( genre(A, F) )
%   | | then return -0.06263022267450198;  // std dev = 1.86e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.13366075865707083;  // std dev = 0.000, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | | else return -0.06595699312708218;  // std dev = 0.084, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
%   else return -0.06419184008202626;  // std dev = 1.05e-08, 220.000 (wgt'ed) examples reached here.  /* #neg=220 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063466
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.546 seconds
Total inference time: 1.082 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.065492
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.033 seconds
Refined model CLL: -0.065492


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063466
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 4.920999999999999 seconds
Total inference time: 1.082 seconds
AUC ROC: 1.0
Total revision time: 4.920999999999999
Best scored revision CLL: -0.065492


Dataset: 4_cora_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 00:11:30
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063466, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 4.920999999999999, 'Inference time': 1.082, 'parameter_0.4': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.128867, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 1.164, 'Inference time': 0.959}}


Amount of data: 0.6
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;haswordauthor(E, C).;true;true
7;true,true,true;author(F, E), title(F, D).;false;false
7;true,true,false;title(G, D), venue(G, B).;false;false
7;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
7;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
7;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, B).;false;true
8;true,true,false;title(F, D), venue(F, A).;false;false
8;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
8;true,false,false;haswordvenue(A, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
8;false,true;haswordauthor(M, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;true,true;author(F, E), venue(F, B).;true;true
9;true,true,true;samebib(F, G), venue(G, A).;false;false
9;true,true,false;author(H, E), venue(H, A).;false;false
9;true,false;haswordtitle(I, C).;true;true
9;true,false,true;title(J, I), venue(J, A).;false;false
9;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995097;  // std dev = 9.83e-07, 157.000 (wgt'ed) examples reached here.  /* #pos=157 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.14059168319111393;  // std dev = 5.153, 131.000 (wgt'ed) examples reached here.  /* #neg=94 #pos=37 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048785;  // std dev = 8.43e-08, 297.000 (wgt'ed) examples reached here.  /* #neg=297 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.6933956945955443;  // std dev = 1.860, 162.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=157 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.14849189397104826;  // std dev = 5.059, 120.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=37 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.125444638528392;  // std dev = 0.000, 293.000 (wgt'ed) examples reached here.  /* #neg=293 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.16764200716801217;  // std dev = 0.156, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( movie(E, A) )
%   | | then return 0.3469911036482213;  // std dev = 0.382, 291.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=194 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360689;  // std dev = 0.000, 259.000 (wgt'ed) examples reached here.  /* #neg=259 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.47114129465785254;  // std dev = 0.669, 158.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=157 */
%   | else if ( genre(A, E) )
%   | | then return -0.09665664955071575;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.04024072269362312;  // std dev = 5.168, 133.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=37 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.1015963294878366;  // std dev = 0.000, 272.000 (wgt'ed) examples reached here.  /* #neg=272 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.10767595419314809;  // std dev = 0.182, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( genre(B, E) )
%   | | then return 0.3613113522937981;  // std dev = 3.53e-07, 157.000 (wgt'ed) examples reached here.  /* #pos=157 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.03928691609841563;  // std dev = 5.145, 130.000 (wgt'ed) examples reached here.  /* #neg=93 #pos=37 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926043;  // std dev = 1.52e-07, 297.000 (wgt'ed) examples reached here.  /* #neg=297 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2725721572061607;  // std dev = 0.929, 160.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=157 */
%   | else if ( movie(E, A) )
%   | | then return 0.02668784911784548;  // std dev = 0.438, 138.000 (wgt'ed) examples reached here.  /* #neg=101 #pos=37 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 9.54e-08, 264.000 (wgt'ed) examples reached here.  /* #neg=264 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14024042448659055;  // std dev = 0.348, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else if ( genre(B, E) )
%   | | then return 0.23084242235211933;  // std dev = 1.69e-07, 157.000 (wgt'ed) examples reached here.  /* #pos=157 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.0480377718587566;  // std dev = 5.068, 121.000 (wgt'ed) examples reached here.  /* #neg=84 #pos=37 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109143;  // std dev = 5.37e-08, 270.000 (wgt'ed) examples reached here.  /* #neg=270 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18939262777238464;  // std dev = 0.476, 158.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=157 */
%   | else if ( movie(E, B) )
%   | | then return 0.04840093927159458;  // std dev = 5.019, 121.000 (wgt'ed) examples reached here.  /* #neg=84 #pos=37 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.07324622576333688;  // std dev = 1.10e-07, 272.000 (wgt'ed) examples reached here.  /* #neg=272 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.15852260990264422;  // std dev = 0.688, 159.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=157 */
%   | else if ( genre(A, E) )
%   | | then return -0.07554876568249481;  // std dev = 5.27e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.01937623236171483;  // std dev = 5.104, 125.000 (wgt'ed) examples reached here.  /* #neg=88 #pos=37 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420283;  // std dev = 0.000, 267.000 (wgt'ed) examples reached here.  /* #neg=267 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return -0.3606866655184015;  // std dev = 7.45e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.14401711963206182;  // std dev = 1.74e-07, 157.000 (wgt'ed) examples reached here.  /* #pos=157 */
%   | | else if ( genre(A, G) )
%   | | | then return -0.07043864829060331;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return 0.05281559029482455;  // std dev = 4.967, 111.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=37 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.06419184008202594;  // std dev = 1.18e-07, 302.000 (wgt'ed) examples reached here.  /* #neg=302 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.132106
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.377 seconds
Total inference time: 1.061 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.977773
   AUC PR    = 0.858959
   CLL	      = -0.136198
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.809278
   F1        = 0.894587


Total scoring time: 1.296 seconds
Parameter learned model CLL: -0.136198


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 15, 0], 'true,false,true': [9.83e-07, 0, 157], 'true,false,false,true': [5.153, 94, 37], 'true,false,false,false': [0.0, 0, 0], 'false,true': [8.43e-08, 297, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.86, 5, 157], 'true,false,true': [0.0, 9, 0], 'true,false,false,true': [5.059, 83, 37], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 293, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.156, 8, 0], 'true,false,true': [0.382, 97, 194], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 259, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.669, 1, 157], 'true,false,true': [0.0, 13, 0], 'true,false,false,true': [5.168, 96, 37], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 272, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.182, 10, 0], 'true,false,true': [3.53e-07, 0, 157], 'true,false,false,true': [5.145, 93, 37], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.52e-07, 297, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.929, 3, 157], 'true,false,true': [0.438, 101, 37], 'true,false,false': [0.0, 0, 0], 'false,true': [9.54e-08, 264, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.348, 12, 0], 'true,false,true': [1.69e-07, 0, 157], 'true,false,false,true': [5.068, 84, 37], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.37e-08, 270, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.476, 1, 157], 'true,false,true': [5.019, 84, 37], 'true,false,false': [0.0, 0, 0], 'false,true': [1.1e-07, 272, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.688, 2, 157], 'true,false,true': [5.27e-09, 11, 0], 'true,false,false,true': [5.104, 88, 37], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 267, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true,true,false': 'genre(A, G)'}, {'true,true,true,true': [7.45e-09, 3, 0], 'true,true,true,false': [1.74e-07, 0, 157], 'true,true,false,true': [0.0, 6, 0], 'true,true,false,false': [4.967, 74, 37], 'true,false': [0.0, 0, 0], 'false': [1.18e-07, 302, 0]}]]
[{'': [0.2303260028973242, 2.392399783704041e-17], 'true': [-1.4802973661668754e-17, 0.21985918209877037], 'true,false': [6.155019876648002e-15, 0.2026688421420677], 'true,false,false': [0.2026688421420677, nan], 'false': [2.392399783704041e-17, nan]}, {'': [0.18049599811808884, -8.184579294164976e-17], 'true': [0.02135348697931312, 0.2032551842884942], 'true,false': [0.0, 0.21326388888888814], 'true,false,false': [0.21326388888888814, nan], 'false': [-8.184579294164976e-17, nan]}, {'': [0.1491702944771223, -9.7733918770091e-17], 'true': [0.003060925221413626, 0.14610083315074687], 'true,false': [0.14610083315074687, nan], 'false': [-9.7733918770091e-17, nan]}, {'': [0.13905718159096814, -6.040919398695704e-17], 'true': [0.002828722968036421, 0.18444318679145807], 'true,false': [-3.2025664171879517e-18, 0.20080275877664203], 'true,false,false': [0.20080275877664203, nan], 'false': [-6.040919398695704e-17, nan]}, {'': [0.11746033824207161, 7.775299297038134e-17], 'true': [0.0032956926513981353, 0.11792277280635034], 'true,false': [7.920062341275002e-16, 0.20360946745562217], 'true,false,false': [0.20360946745562217, nan], 'false': [7.775299297038134e-17, nan]}, {'': [0.10684664335298107, 3.448420000729653e-17], 'true': [0.005393720140752978, 0.19201196302306417], 'true,false': [0.19201196302306417, nan], 'false': [3.448420000729653e-17, nan]}, {'': [0.10023553647384423, 1.0691036533427433e-17], 'true': [0.010099722001616586, 0.1006097928012701], 'true,false': [1.8102999637200006e-16, 0.21228058192746507], 'true,false,false': [0.21228058192746507, nan], 'false': [1.0691036533427433e-17, nan]}, {'': [0.09597155373200378, 4.408238480129298e-17], 'true': [0.0014328049372521786, 0.20816139865145547], 'true,false': [0.20816139865145547, nan], 'false': [4.408238480129298e-17, nan]}, {'': [0.095568901896997, -2.5780459747850078e-17], 'true': [0.002978214468484204, 0.19219927489586006], 'true,false': [2.523234146875356e-18, 0.20838400000000004], 'true,false,false': [0.20838400000000004, nan], 'false': [-2.5780459747850078e-17, nan]}, {'': [0.09396044458502718, 4.6320563279062825e-17], 'true': [0.09396044458502718, nan], 'true,true': [0.004686558748476418, 0.21156531598226966], 'true,true,false': [0.0, 0.22222222222222163], 'true,true,true': [1.850371707708594e-17, 1.9234437114525006e-16]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, E).;true;true
9;true,true;genre(A, F).;true;true
9;true,false;genre(A, G).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995097;  // std dev = 9.83e-07, 157.000 (wgt'ed) examples reached here.  /* #pos=157 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.8581489350995115;  // std dev = 2.60e-07, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | | else return -0.14185106490048763;  // std dev = 8.02e-08, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
%   else return -0.14185106490048777;  // std dev = 1.37e-07, 311.000 (wgt'ed) examples reached here.  /* #neg=311 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.7194734122109546;  // std dev = 1.19e-07, 65.000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | | else return 0.7014964324079893;  // std dev = 0.122, 94.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=92 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.7194734122109548;  // std dev = 0.000, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | | else return -0.1254446385283914;  // std dev = 0.000, 97.000 (wgt'ed) examples reached here.  /* #neg=97 */
%   else return -0.12544463852839188;  // std dev = 0.000, 257.000 (wgt'ed) examples reached here.  /* #neg=257 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.5574694449579068;  // std dev = 0.031, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else return -0.11449225944897493;  // std dev = 0.157, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
%   else return -0.11231637819360699;  // std dev = 0.000, 282.000 (wgt'ed) examples reached here.  /* #neg=282 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( actor(A) )
%   | | then return 0.41956699108952805;  // std dev = 0.027, 157.000 (wgt'ed) examples reached here.  /* #pos=157 */
%   | | else return -0.20507909389203594;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(A, E) )
%   | | then return -0.1013978990743158;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( actor(B) )
%   | | | then return -0.10139789907431586;  // std dev = 3.65e-08, 100.000 (wgt'ed) examples reached here.  /* #neg=100 */
%   | | | else return 0.41700222988466745;  // std dev = 0.000, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   else return -0.10159632948783663;  // std dev = 0.000, 308.000 (wgt'ed) examples reached here.  /* #neg=308 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11686475542267671;  // std dev = 0.118, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( genre(B, E) )
%   | | then return 0.32210593613084443;  // std dev = 0.024, 157.000 (wgt'ed) examples reached here.  /* #pos=157 */
%   | | else if ( actor(B) )
%   | | | then return -0.09252510724959762;  // std dev = 0.000, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
%   | | | else return 0.32036519518003653;  // std dev = 8.69e-08, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   else return -0.09269127618926049;  // std dev = 7.60e-08, 234.000 (wgt'ed) examples reached here.  /* #neg=234 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.25589757028493243;  // std dev = 0.022, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else return -0.08699303844688679;  // std dev = 0.124, 100.000 (wgt'ed) examples reached here.  /* #neg=100 */
%   else return -0.08518475138839678;  // std dev = 1.05e-07, 302.000 (wgt'ed) examples reached here.  /* #neg=302 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09282046025297343;  // std dev = 0.106, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( genre(B, E) )
%   | | then return 0.21046823826234687;  // std dev = 0.018, 157.000 (wgt'ed) examples reached here.  /* #pos=157 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.20943130170874635;  // std dev = 0.000, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | | else return -0.07952746370212119;  // std dev = 0.099, 98.000 (wgt'ed) examples reached here.  /* #neg=98 */
%   else return -0.07877675473109143;  // std dev = 4.47e-08, 280.000 (wgt'ed) examples reached here.  /* #neg=280 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17368428324969395;  // std dev = 0.440, 159.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=157 */
%   | else if ( actor(B) )
%   | | then return -0.07279217787718255;  // std dev = 0.006, 111.000 (wgt'ed) examples reached here.  /* #neg=111 */
%   | | else if ( female(A) )
%   | | | then return 0.17685705158997325;  // std dev = 3.49e-08, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | | else return 0.09102828780677519;  // std dev = 0.420, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   else return -0.07324622576333702;  // std dev = 9.19e-08, 312.000 (wgt'ed) examples reached here.  /* #neg=312 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1516860001119303;  // std dev = 0.310, 158.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=157 */
%   | else if ( genre(A, E) )
%   | | then return -0.06582547887177079;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.15441576505236512;  // std dev = 0.026, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | | else return -0.07245839909598412;  // std dev = 0.189, 78.000 (wgt'ed) examples reached here.  /* #neg=78 */
%   else return -0.06842697784420285;  // std dev = 0.000, 271.000 (wgt'ed) examples reached here.  /* #neg=271 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( genre(A, E) )
%   | | then return -0.1778132149424422;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0.13494358517255875;  // std dev = 0.013, 157.000 (wgt'ed) examples reached here.  /* #pos=157 */
%   | else if ( genre(A, F) )
%   | | then return -0.061891557429764675;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.1353132427302074;  // std dev = 0.023, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | | else return -0.0662240291954105;  // std dev = 0.147, 84.000 (wgt'ed) examples reached here.  /* #neg=84 */
%   else return -0.064191840082026;  // std dev = 1.06e-07, 291.000 (wgt'ed) examples reached here.  /* #neg=291 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063377
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.005 seconds
Total inference time: 1.015 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.065308
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.289 seconds
Refined model CLL: -0.065308


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063377
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 5.967 seconds
Total inference time: 1.015 seconds
AUC ROC: 1.0
Total revision time: 5.967
Best scored revision CLL: -0.065308


Dataset: 4_cora_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 00:11:38
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063377, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 5.967, 'Inference time': 1.015, 'parameter_0.6': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.132106, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 1.377, 'Inference time': 1.061}}


Amount of data: 0.8
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;haswordauthor(E, C).;true;true
7;true,true,true;author(F, E), title(F, D).;false;false
7;true,true,false;title(G, D), venue(G, B).;false;false
7;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
7;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
7;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, B).;false;true
8;true,true,false;title(F, D), venue(F, A).;false;false
8;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
8;true,false,false;haswordvenue(A, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
8;false,true;haswordauthor(M, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;true,true;author(F, E), venue(F, B).;true;true
9;true,true,true;samebib(F, G), venue(G, A).;false;false
9;true,true,false;author(H, E), venue(H, A).;false;false
9;true,false;haswordtitle(I, C).;true;true
9;true,false,true;title(J, I), venue(J, A).;false;false
9;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995091;  // std dev = 1.08e-06, 212.000 (wgt'ed) examples reached here.  /* #pos=212 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.1298252356775469;  // std dev = 5.851, 173.000 (wgt'ed) examples reached here.  /* #neg=126 #pos=47 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048743;  // std dev = 2.68e-07, 375.000 (wgt'ed) examples reached here.  /* #neg=375 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7038267816417099;  // std dev = 1.674, 216.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=212 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.1570353619956559;  // std dev = 5.672, 149.000 (wgt'ed) examples reached here.  /* #neg=102 #pos=47 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839224;  // std dev = 0.000, 397.000 (wgt'ed) examples reached here.  /* #neg=397 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12481234451089157;  // std dev = 0.150, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else if ( movie(E, A) )
%   | | then return 0.3544775749269831;  // std dev = 0.376, 381.000 (wgt'ed) examples reached here.  /* #neg=122 #pos=259 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.1123163781936062;  // std dev = 0.000, 404.000 (wgt'ed) examples reached here.  /* #neg=404 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.46775193203985216;  // std dev = 0.673, 213.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=212 */
%   | else if ( genre(A, E) )
%   | | then return -0.1004614310091646;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.03594327805025437;  // std dev = 5.838, 171.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=47 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783577;  // std dev = 1.25e-08, 424.000 (wgt'ed) examples reached here.  /* #neg=424 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14132057962800662;  // std dev = 0.344, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else if ( genre(B, E) )
%   | | then return 0.35796554684178855;  // std dev = 3.15e-07, 212.000 (wgt'ed) examples reached here.  /* #pos=212 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.04283618946738044;  // std dev = 5.783, 163.000 (wgt'ed) examples reached here.  /* #neg=116 #pos=47 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926082;  // std dev = 1.62e-07, 392.000 (wgt'ed) examples reached here.  /* #neg=392 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2779160268946549;  // std dev = 0.541, 213.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=212 */
%   | else if ( movie(E, A) )
%   | | then return 0.013263658195161145;  // std dev = 0.434, 182.000 (wgt'ed) examples reached here.  /* #neg=135 #pos=47 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 1.26e-07, 370.000 (wgt'ed) examples reached here.  /* #neg=370 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11326143466873001;  // std dev = 0.313, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else if ( genre(B, E) )
%   | | then return 0.22792117619594685;  // std dev = 0.000, 212.000 (wgt'ed) examples reached here.  /* #pos=212 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.030538720591726253;  // std dev = 5.791, 164.000 (wgt'ed) examples reached here.  /* #neg=117 #pos=47 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109143;  // std dev = 2.23e-07, 395.000 (wgt'ed) examples reached here.  /* #neg=395 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1791286416134953;  // std dev = 1.072, 217.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=212 */
%   | else if ( movie(E, B) )
%   | | then return -0.0037419939407169287;  // std dev = 5.888, 193.000 (wgt'ed) examples reached here.  /* #neg=146 #pos=47 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.07324622576333768;  // std dev = 0.000, 363.000 (wgt'ed) examples reached here.  /* #neg=363 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.15727871899135606;  // std dev = 0.856, 215.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=212 */
%   | else if ( genre(A, E) )
%   | | then return -0.07326193261283445;  // std dev = 3.73e-09, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.023664139435258448;  // std dev = 5.798, 165.000 (wgt'ed) examples reached here.  /* #neg=118 #pos=47 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420333;  // std dev = 0.000, 392.000 (wgt'ed) examples reached here.  /* #neg=392 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return -0.3692715074898338;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.1437587855626392;  // std dev = 2.00e-07, 212.000 (wgt'ed) examples reached here.  /* #pos=212 */
%   | | else if ( genre(A, G) )
%   | | | then return -0.06844072615709186;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else return 0.026148982904096348;  // std dev = 5.769, 161.000 (wgt'ed) examples reached here.  /* #neg=114 #pos=47 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.06419184008202565;  // std dev = 1.84e-07, 381.000 (wgt'ed) examples reached here.  /* #neg=381 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.125227
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.669 seconds
Total inference time: 0.935 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.977815
   AUC PR    = 0.862087
   CLL	      = -0.129536
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.818533
   F1        = 0.900212


Total scoring time: 1.498 seconds
Parameter learned model CLL: -0.129536


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 17, 0], 'true,false,true': [1.08e-06, 0, 212], 'true,false,false,true': [5.851, 126, 47], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.68e-07, 375, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.674, 4, 212], 'true,false,true': [5.27e-09, 12, 0], 'true,false,false,true': [5.672, 102, 47], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 397, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.15, 18, 0], 'true,false,true': [0.376, 122, 259], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 404, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.673, 1, 212], 'true,false,true': [0.0, 9, 0], 'true,false,false,true': [5.838, 124, 47], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.25e-08, 424, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.344, 16, 0], 'true,false,true': [3.15e-07, 0, 212], 'true,false,false,true': [5.783, 116, 47], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.62e-07, 392, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.541, 1, 212], 'true,false,true': [0.434, 135, 47], 'true,false,false': [0.0, 0, 0], 'false,true': [1.26e-07, 370, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.313, 15, 0], 'true,false,true': [0.0, 0, 212], 'true,false,false,true': [5.791, 117, 47], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.23e-07, 395, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [1.072, 5, 212], 'true,false,true': [5.888, 146, 47], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 363, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.856, 3, 212], 'true,false,true': [3.73e-09, 17, 0], 'true,false,false,true': [5.798, 118, 47], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 392, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true,true,false': 'genre(A, G)'}, {'true,true,true,true': [0.0, 3, 0], 'true,true,true,false': [2e-07, 0, 212], 'true,true,false,true': [0.0, 15, 0], 'true,true,false,false': [5.769, 114, 47], 'true,false': [0.0, 0, 0], 'false': [1.84e-07, 381, 0]}]]
[{'': [0.22918368357219232, 1.9184653865522705e-16], 'true': [-3.2653618371328133e-18, 0.22016528925620196], 'true,false': [5.496651352106436e-15, 0.19786828828226902], 'true,false,false': [0.19786828828226902, nan], 'false': [1.9184653865522705e-16, nan]}, {'': [0.17402471497965752, -1.2752183859674342e-16], 'true': [0.012975303553032645, 0.20534575562579152], 'true,false': [2.3129646346357427e-18, 0.2159362190892314], 'true,false,false': [0.2159362190892314, nan], 'false': [-1.2752183859674342e-16, nan]}, {'': [0.14520354476214933, -1.75876914792104e-17], 'true': [0.0012491933936218207, 0.14164128239245627], 'true,false': [0.14164128239245627, nan], 'false': [-1.75876914792104e-17, nan]}, {'': [0.1360396782984054, 1.5710703178657875e-16], 'true': [0.0021271447299741936, 0.19022752631565196], 'true,false': [-1.5419764230904951e-18, 0.19930918915221763], 'true,false,false': [0.19930918915221763, nan], 'false': [1.5710703178657875e-16, nan]}, {'': [0.11440211148873336, 6.683995760498391e-17], 'true': [0.0073746343778300395, 0.11359701766950538], 'true,false': [4.692263349359152e-16, 0.20520155067936377], 'true,false,false': [0.20520155067936377, nan], 'false': [6.683995760498391e-17, nan]}, {'': [0.10501601854747536, 4.320867987730339e-17], 'true': [0.001374250451855778, 0.1885421772579713], 'true,false': [0.1885421772579713, nan], 'false': [4.320867987730339e-17, nan]}, {'': [0.09761970887220674, 1.2591896583090384e-16], 'true': [0.0065104317274503, 0.09875805593247443], 'true,false': [-5.362586684981888e-16, 0.20445419393218267], 'true,false,false': [0.20445419393218267, nan], 'false': [1.2591896583090384e-16, nan]}, {'': [0.09569526915866754, -5.933423327197806e-17], 'true': [0.005299382466596585, 0.17963247988822414], 'true,false': [0.17963247988822414, nan], 'false': [-5.933423327197806e-17, nan]}, {'': [0.0919289047168195, -1.0988942182514304e-16], 'true': [0.0034077554149626317, 0.18547754170881403], 'true,false': [8.163404592832033e-19, 0.20370982552800734], 'true,false,false': [0.20370982552800734, nan], 'false': [-1.0988942182514304e-16, nan]}, {'': [0.09089545903578838, 8.858472427455317e-17], 'true': [0.09089545903578838, nan], 'true,true': [0.0036213142648120014, 0.18978564263056621], 'true,true,false': [-1.8503717077085942e-18, 0.20670498823347835], 'true,true,true': [-1.850371707708594e-17, 1.8852843814389451e-16]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, E).;true;true
9;true,true;genre(A, F).;true;true
9;true,false;genre(A, G).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995091;  // std dev = 1.08e-06, 212.000 (wgt'ed) examples reached here.  /* #pos=212 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.8581489350995121;  // std dev = 2.06e-07, 47.000 (wgt'ed) examples reached here.  /* #pos=47 */
%   | | | else return -0.14185106490048768;  // std dev = 6.66e-08, 117.000 (wgt'ed) examples reached here.  /* #neg=117 */
%   else return -0.1418510649004873;  // std dev = 3.01e-07, 407.000 (wgt'ed) examples reached here.  /* #neg=407 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.7194734122109541;  // std dev = 2.53e-07, 83.000 (wgt'ed) examples reached here.  /* #pos=83 */
%   | | else return 0.7002707292396069;  // std dev = 0.126, 132.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=129 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( actor(B) )
%   | | | then return -0.12544463852839136;  // std dev = 0.000, 101.000 (wgt'ed) examples reached here.  /* #neg=101 */
%   | | | else return 0.7194734122109548;  // std dev = 0.000, 47.000 (wgt'ed) examples reached here.  /* #pos=47 */
%   else return -0.12544463852839224;  // std dev = 0.000, 401.000 (wgt'ed) examples reached here.  /* #neg=401 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14027753995353778;  // std dev = 0.217, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else if ( actor(A), director(B) )
%   | | then return 0.5577256049698369;  // std dev = 0.038, 259.000 (wgt'ed) examples reached here.  /* #pos=259 */
%   | | else return -0.1142689531149463;  // std dev = 0.162, 118.000 (wgt'ed) examples reached here.  /* #neg=118 */
%   else return -0.11231637819360632;  // std dev = 0.000, 380.000 (wgt'ed) examples reached here.  /* #neg=380 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.41693995579752013;  // std dev = 1.98e-07, 83.000 (wgt'ed) examples reached here.  /* #pos=83 */
%   | | else if ( actor(A) )
%   | | | then return 0.42161546143557865;  // std dev = 1.03e-07, 129.000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | | | else return -0.200710782527965;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(A, E) )
%   | | then return -0.09907246782196012;  // std dev = 3.73e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( actor(B) )
%   | | | then return -0.10141824774694318;  // std dev = 0.000, 117.000 (wgt'ed) examples reached here.  /* #neg=117 */
%   | | | else return 0.4169399557975193;  // std dev = 0.000, 47.000 (wgt'ed) examples reached here.  /* #pos=47 */
%   else return -0.1015963294878361;  // std dev = 1.70e-07, 374.000 (wgt'ed) examples reached here.  /* #neg=374 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.10768647648398522;  // std dev = 0.123, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else if ( genre(B, E) )
%   | | then return 0.3222525189650964;  // std dev = 0.023, 212.000 (wgt'ed) examples reached here.  /* #pos=212 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.32032298160880235;  // std dev = 7.88e-08, 47.000 (wgt'ed) examples reached here.  /* #pos=47 */
%   | | | else return -0.0940227307645157;  // std dev = 0.192, 130.000 (wgt'ed) examples reached here.  /* #neg=130 */
%   else return -0.09269127618926075;  // std dev = 1.66e-07, 383.000 (wgt'ed) examples reached here.  /* #neg=383 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.252373722296303;  // std dev = 0.580, 214.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=212 */
%   | else if ( actor(A), director(B) )
%   | | then return 0.25490688231254977;  // std dev = 0.000, 47.000 (wgt'ed) examples reached here.  /* #pos=47 */
%   | | else return -0.0875785464838504;  // std dev = 0.255, 130.000 (wgt'ed) examples reached here.  /* #neg=130 */
%   else return -0.08518475138839678;  // std dev = 1.23e-07, 386.000 (wgt'ed) examples reached here.  /* #neg=386 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.0818374599863707;  // std dev = 0.113, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else if ( genre(B, E) )
%   | | then return 0.2111412439259186;  // std dev = 0.017, 212.000 (wgt'ed) examples reached here.  /* #pos=212 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.20957025125003456;  // std dev = 2.98e-08, 47.000 (wgt'ed) examples reached here.  /* #pos=47 */
%   | | | else return -0.08107330219331539;  // std dev = 0.240, 127.000 (wgt'ed) examples reached here.  /* #neg=127 */
%   else return -0.07877675473109143;  // std dev = 5.96e-08, 341.000 (wgt'ed) examples reached here.  /* #neg=341 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1779018082819243;  // std dev = 0.017, 259.000 (wgt'ed) examples reached here.  /* #pos=259 */
%   | else return -0.07503364888832428;  // std dev = 0.220, 136.000 (wgt'ed) examples reached here.  /* #neg=136 */
%   else return -0.07324622576333768;  // std dev = 0.000, 364.000 (wgt'ed) examples reached here.  /* #neg=364 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.15052847635011654;  // std dev = 0.454, 214.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=212 */
%   | else if ( genre(A, E) )
%   | | then return -0.0654498039383962;  // std dev = 8.33e-09, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.15251763119229594;  // std dev = 0.000, 47.000 (wgt'ed) examples reached here.  /* #pos=47 */
%   | | | else return -0.0704442396172351;  // std dev = 0.215, 117.000 (wgt'ed) examples reached here.  /* #neg=117 */
%   else return -0.06842697784420336;  // std dev = 0.000, 402.000 (wgt'ed) examples reached here.  /* #neg=402 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( genre(A, E) )
%   | | then return -0.19089208314837522;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.1349798044148682;  // std dev = 0.012, 212.000 (wgt'ed) examples reached here.  /* #pos=212 */
%   | else if ( genre(A, F) )
%   | | then return -0.06155855380527545;  // std dev = 2.63e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.13383039338678682;  // std dev = 3.16e-08, 47.000 (wgt'ed) examples reached here.  /* #pos=47 */
%   | | | else return -0.06492999035432331;  // std dev = 0.145, 102.000 (wgt'ed) examples reached here.  /* #neg=102 */
%   else return -0.06419184008202578;  // std dev = 1.55e-07, 342.000 (wgt'ed) examples reached here.  /* #neg=342 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.06335
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.238 seconds
Total inference time: 0.975 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.065489
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.558 seconds
Refined model CLL: -0.065489


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.06335
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 6.962999999999999 seconds
Total inference time: 0.975 seconds
AUC ROC: 1.0
Total revision time: 6.962999999999999
Best scored revision CLL: -0.065489


Dataset: 4_cora_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 00:11:48
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.06335, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 6.962999999999999, 'Inference time': 0.975, 'parameter_0.8': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.125227, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 1.669, 'Inference time': 0.935}}


Amount of data: 1.0
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;haswordauthor(E, C).;true;true
7;true,true,true;author(F, E), title(F, D).;false;false
7;true,true,false;title(G, D), venue(G, B).;false;false
7;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
7;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
7;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, B).;false;true
8;true,true,false;title(F, D), venue(F, A).;false;false
8;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
8;true,false,false;haswordvenue(A, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
8;false,true;haswordauthor(M, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;true,true;author(F, E), venue(F, B).;true;true
9;true,true,true;samebib(F, G), venue(G, A).;false;false
9;true,true,false;author(H, E), venue(H, A).;false;false
9;true,false;haswordtitle(I, C).;true;true
9;true,false,true;title(J, I), venue(J, A).;false;false
9;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995086;  // std dev = 1.08e-06, 265.000 (wgt'ed) examples reached here.  /* #pos=265 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.1325675397506761;  // std dev = 6.543, 215.000 (wgt'ed) examples reached here.  /* #neg=156 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048735;  // std dev = 2.38e-07, 466.000 (wgt'ed) examples reached here.  /* #neg=466 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7007667395008612;  // std dev = 2.047, 271.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=265 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 7.45e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.12085405424485345;  // std dev = 6.519, 211.000 (wgt'ed) examples reached here.  /* #neg=152 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839233;  // std dev = 0.000, 487.000 (wgt'ed) examples reached here.  /* #neg=487 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1254847218883181;  // std dev = 0.149, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else if ( movie(E, A) )
%   | | then return 0.36239334105649945;  // std dev = 0.373, 472.000 (wgt'ed) examples reached here.  /* #neg=148 #pos=324 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360583;  // std dev = 0.000, 499.000 (wgt'ed) examples reached here.  /* #neg=499 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.45724905621782946;  // std dev = 1.491, 270.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=265 */
%   | else if ( genre(A, E) )
%   | | then return -0.10040068530479719;  // std dev = 7.45e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.02909231217602643;  // std dev = 6.592, 224.000 (wgt'ed) examples reached here.  /* #neg=165 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783553;  // std dev = 1.45e-08, 468.000 (wgt'ed) examples reached here.  /* #neg=468 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.13679305976746917;  // std dev = 0.297, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( genre(B, E) )
%   | | then return 0.35926444875271485;  // std dev = 3.58e-07, 265.000 (wgt'ed) examples reached here.  /* #pos=265 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.05543989926757603;  // std dev = 6.449, 200.000 (wgt'ed) examples reached here.  /* #neg=141 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926125;  // std dev = 4.21e-08, 457.000 (wgt'ed) examples reached here.  /* #neg=457 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2772856170598683;  // std dev = 0.763, 267.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=265 */
%   | else if ( movie(E, A) )
%   | | then return 0.04384144337240729;  // std dev = 0.440, 213.000 (wgt'ed) examples reached here.  /* #neg=154 #pos=59 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 1.50e-07, 505.000 (wgt'ed) examples reached here.  /* #neg=505 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.10870959550770987;  // std dev = 0.311, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else if ( genre(B, E) )
%   | | then return 0.2287984730186849;  // std dev = 0.000, 265.000 (wgt'ed) examples reached here.  /* #pos=265 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.001588973865132215;  // std dev = 6.623, 230.000 (wgt'ed) examples reached here.  /* #neg=171 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109207;  // std dev = 1.26e-07, 500.000 (wgt'ed) examples reached here.  /* #neg=500 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1873109325479327;  // std dev = 0.683, 267.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=265 */
%   | else if ( movie(E, B) )
%   | | then return 0.021486610317859593;  // std dev = 6.500, 221.000 (wgt'ed) examples reached here.  /* #neg=162 #pos=59 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.07324622576333699;  // std dev = 1.33e-07, 484.000 (wgt'ed) examples reached here.  /* #neg=484 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.15444796387526638;  // std dev = 1.102, 270.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=265 */
%   | else if ( genre(A, E) )
%   | | then return -0.07774728050548374;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.03755318257958687;  // std dev = 6.429, 197.000 (wgt'ed) examples reached here.  /* #neg=138 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.0684269778442035;  // std dev = 0.000, 470.000 (wgt'ed) examples reached here.  /* #neg=470 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return -0.3691702415458011;  // std dev = 1.05e-08, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return 0.14360496756046118;  // std dev = 0.000, 265.000 (wgt'ed) examples reached here.  /* #pos=265 */
%   | | else if ( genre(A, G) )
%   | | | then return -0.07235242026728227;  // std dev = 5.27e-09, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | | else return 0.021376523293945574;  // std dev = 6.469, 203.000 (wgt'ed) examples reached here.  /* #neg=144 #pos=59 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.06419184008202539;  // std dev = 2.46e-07, 499.000 (wgt'ed) examples reached here.  /* #neg=499 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.126142
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.861 seconds
Total inference time: 1.035 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.977686
   AUC PR    = 0.861626
   CLL	      = -0.130596
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.817901
   F1        = 0.89983


Total scoring time: 1.648 seconds
Parameter learned model CLL: -0.130596


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 14, 0], 'true,false,true': [1.08e-06, 0, 265], 'true,false,false,true': [6.543, 156, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.38e-07, 466, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [2.047, 6, 265], 'true,false,true': [7.45e-09, 14, 0], 'true,false,false,true': [6.519, 152, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 487, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.149, 17, 0], 'true,false,true': [0.373, 148, 324], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 499, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.491, 5, 265], 'true,false,true': [7.45e-09, 14, 0], 'true,false,false,true': [6.592, 165, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.45e-08, 468, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.297, 13, 0], 'true,false,true': [3.58e-07, 0, 265], 'true,false,false,true': [6.449, 141, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [4.21e-08, 457, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.763, 2, 265], 'true,false,true': [0.44, 154, 59], 'true,false,false': [0.0, 0, 0], 'false,true': [1.5e-07, 505, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.311, 19, 0], 'true,false,true': [0.0, 0, 265], 'true,false,false,true': [6.623, 171, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.26e-07, 500, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.683, 2, 265], 'true,false,true': [6.5, 162, 59], 'true,false,false': [0.0, 0, 0], 'false,true': [1.33e-07, 484, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [1.102, 5, 265], 'true,false,true': [0.0, 19, 0], 'true,false,false,true': [6.429, 138, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 470, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true,true,false': 'genre(A, G)'}, {'true,true,true,true': [1.05e-08, 6, 0], 'true,true,true,false': [0.0, 0, 265], 'true,true,false,true': [5.27e-09, 21, 0], 'true,true,false,false': [6.469, 144, 59], 'true,false': [0.0, 0, 0], 'false': [2.46e-07, 499, 0]}]]
[{'': [0.22570440426822544, 1.2198158553821462e-16], 'true': [-1.1895246692412391e-17, 0.21937500000000282], 'true,false': [4.397321081685148e-15, 0.19911303407247216], 'true,false,false': [0.19911303407247216, nan], 'false': [1.2198158553821462e-16, nan]}, {'': [0.18355570446774483, -1.3860689917291483e-16], 'true': [0.015455665838146719, 0.19243914693179318], 'true,false': [3.96508223080413e-18, 0.20143303160306353], 'true,false,false': [0.20143303160306353, nan], 'false': [-1.3860689917291483e-16, nan]}, {'': [0.14253967276831767, -3.5598333454914836e-18], 'true': [0.0013005395674654105, 0.13935177754706496], 'true,false': [0.13935177754706496, nan], 'false': [-3.5598333454914836e-18, nan]}, {'': [0.13764603583996265, 2.1065770210836303e-16], 'true': [0.008229426090000684, 0.1835326480569827], 'true,false': [3.96508223080413e-18, 0.19401705994898105], 'true,false,false': [0.19401705994898105, nan], 'false': [2.1065770210836303e-16, nan]}, {'': [0.11274638444301414, 3.8869952722106136e-18], 'true': [0.006781171268467178, 0.11207802480796585], 'true,false': [4.826328016483699e-16, 0.20797499999999805], 'true,false,false': [0.20797499999999805, nan], 'false': [3.8869952722106136e-18, nan]}, {'': [0.1005641980921066, 4.4848613271986524e-17], 'true': [0.0021784600905057063, 0.19357929788437217], 'true,false': [0.19357929788437217, nan], 'false': [4.4848613271986524e-17, nan]}, {'': [0.10013496802340079, 3.1974423109204506e-17], 'true': [0.005091018582940479, 0.10181985351083335], 'true,false': [-3.552713678800501e-16, 0.19071833648393105], 'true,false,false': [0.19071833648393105, nan], 'false': [3.1974423109204506e-17, nan]}, {'': [0.09435798037881721, 3.6701587590914267e-17], 'true': [0.001746116103455545, 0.19120167093349555], 'true,false': [0.19120167093349555, nan], 'false': [3.6701587590914267e-17, nan]}, {'': [0.09200052660795333, -1.2188831504395336e-16], 'true': [0.004501218686436875, 0.19240889090597424], 'true,false': [-1.460819769243627e-18, 0.20979669664253223], 'true,false,false': [0.20979669664253223, nan], 'false': [-1.2188831504395336e-16, nan]}, {'': [0.09155177218792046, 1.2103433374671045e-16], 'true': [0.09155177218792046, nan], 'true,true': [0.005692625099979744, 0.1875866449373599], 'true,true,false': [1.32169407693471e-18, 0.20616855541265156], 'true,true,true': [1.850371707708594e-17, -4.021940013736416e-17]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, E).;true;true
9;true,true;genre(A, F).;true;true
9;true,false;genre(A, G).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004877;  // std dev = 3.16e-08, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995086;  // std dev = 1.08e-06, 265.000 (wgt'ed) examples reached here.  /* #pos=265 */
%   | | else if ( actor(B) )
%   | | | then return -0.141851064900488;  // std dev = 0.000, 142.000 (wgt'ed) examples reached here.  /* #neg=142 */
%   | | | else return 0.8414822684328459;  // std dev = 0.992, 60.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=59 */
%   else return -0.14185106490048735;  // std dev = 2.35e-07, 467.000 (wgt'ed) examples reached here.  /* #neg=467 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.7194734122109546;  // std dev = 0.000, 102.000 (wgt'ed) examples reached here.  /* #pos=102 */
%   | | else if ( actor(A) )
%   | | | then return 0.7194734122109564;  // std dev = 0.000, 163.000 (wgt'ed) examples reached here.  /* #pos=163 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 7.45e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.7228249321600521;  // std dev = 2.67e-07, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.12858388879000962;  // std dev = 0.260, 145.000 (wgt'ed) examples reached here.  /* #neg=145 */
%   else return -0.12544463852839233;  // std dev = 0.000, 487.000 (wgt'ed) examples reached here.  /* #neg=487 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360636;  // std dev = 9.13e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else if ( actor(A), director(B) )
%   | | then return 0.5559647220969349;  // std dev = 0.023, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | | else return -0.1176478256084266;  // std dev = 0.336, 149.000 (wgt'ed) examples reached here.  /* #neg=149 */
%   else return -0.11231637819360588;  // std dev = 0.000, 483.000 (wgt'ed) examples reached here.  /* #neg=483 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.41736809074393744;  // std dev = 2.67e-07, 102.000 (wgt'ed) examples reached here.  /* #pos=102 */
%   | | else if ( actor(A) )
%   | | | then return 0.4173680907439363;  // std dev = 3.72e-07, 163.000 (wgt'ed) examples reached here.  /* #pos=163 */
%   | | | else return -0.10159632948783633;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783635;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.42060947963780726;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.10488220128083074;  // std dev = 0.286, 160.000 (wgt'ed) examples reached here.  /* #neg=160 */
%   else return -0.10159632948783551;  // std dev = 3.22e-07, 475.000 (wgt'ed) examples reached here.  /* #neg=475 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926104;  // std dev = 0.000, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | else if ( genre(B, E) )
%   | | then return 0.32061321183846414;  // std dev = 5.93e-07, 265.000 (wgt'ed) examples reached here.  /* #pos=265 */
%   | | else if ( actor(B) )
%   | | | then return -0.0917072766263889;  // std dev = 0.000, 174.000 (wgt'ed) examples reached here.  /* #neg=174 */
%   | | | else return 0.25888786230426675;  // std dev = 1.421, 67.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=59 */
%   else return -0.09269127618926147;  // std dev = 0.000, 503.000 (wgt'ed) examples reached here.  /* #neg=503 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2525559511887204;  // std dev = 0.479, 267.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=265 */
%   | else if ( actor(A), director(B) )
%   | | then return 0.2689867891152903;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | else return -0.0865066782627668;  // std dev = 0.246, 167.000 (wgt'ed) examples reached here.  /* #neg=167 */
%   else return -0.08518475138839678;  // std dev = 1.48e-07, 488.000 (wgt'ed) examples reached here.  /* #neg=488 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08222571097392471;  // std dev = 0.038, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else if ( genre(B, E) )
%   | | then return 0.21013293196583246;  // std dev = 3.98e-07, 265.000 (wgt'ed) examples reached here.  /* #pos=265 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.21947026953742815;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.08401172809209813;  // std dev = 0.396, 162.000 (wgt'ed) examples reached here.  /* #neg=162 */
%   else return -0.07877675473109193;  // std dev = 1.59e-07, 476.000 (wgt'ed) examples reached here.  /* #neg=476 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17024806975296386;  // std dev = 0.723, 272.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=265 */
%   | else if ( actor(A), director(B) )
%   | | then return 0.18418809584648585;  // std dev = 4.21e-08, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | else return -0.07487659055857002;  // std dev = 0.267, 172.000 (wgt'ed) examples reached here.  /* #neg=172 */
%   else return -0.07324622576333692;  // std dev = 1.55e-07, 499.000 (wgt'ed) examples reached here.  /* #neg=499 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.15085955448198549;  // std dev = 0.464, 268.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=265 */
%   | else if ( genre(A, E) )
%   | | then return -0.06802005759623889;  // std dev = 7.45e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.15810253951483388;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.07001289980420944;  // std dev = 0.253, 159.000 (wgt'ed) examples reached here.  /* #neg=159 */
%   else return -0.06842697784420355;  // std dev = 0.000, 500.000 (wgt'ed) examples reached here.  /* #neg=500 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( genre(A, E) )
%   | | then return -0.13210635931511983;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0.1352442283375528;  // std dev = 2.13e-07, 265.000 (wgt'ed) examples reached here.  /* #pos=265 */
%   | else if ( genre(A, F) )
%   | | then return -0.06383269264368596;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.13817670020522851;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.0639294051888772;  // std dev = 0.140, 146.000 (wgt'ed) examples reached here.  /* #neg=146 */
%   else return -0.06419184008202541;  // std dev = 2.41e-07, 478.000 (wgt'ed) examples reached here.  /* #neg=478 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063214
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.763 seconds
Total inference time: 0.96 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.06505
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.7 seconds
Refined model CLL: -0.06505


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063214
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 7.972 seconds
Total inference time: 0.96 seconds
AUC ROC: 1.0
Total revision time: 7.972
Best scored revision CLL: -0.06505


Dataset: 4_cora_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 00:11:58
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063214, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 7.972, 'Inference time': 0.96, 'parameter_1.0': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.126142, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 1.861, 'Inference time': 1.035}}


Starting fold 3

Target train facts examples: 737
Target train pos examples: 204
Target train neg examples: 10693

Target test facts examples: 341
Target test pos	 examples: 178
Target test neg examples: 3543

Amount of data: 0.2
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;haswordauthor(E, C).;true;true
7;true,true,true;author(F, E), title(F, D).;false;false
7;true,true,false;title(G, D), venue(G, B).;false;false
7;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
7;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
7;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, B).;false;true
8;true,true,false;title(F, D), venue(F, A).;false;false
8;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
8;true,false,false;haswordvenue(A, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
8;false,true;haswordauthor(M, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;true,true;author(F, E), venue(F, B).;true;true
9;true,true,true;samebib(F, G), venue(G, A).;false;false
9;true,true,false;author(H, E), venue(H, A).;false;false
9;true,false;haswordtitle(I, C).;true;true
9;true,false,true;title(J, I), venue(J, A).;false;false
9;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995115;  // std dev = 2.53e-07, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.058148935099512286;  // std dev = 1.789, 20.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048766;  // std dev = 6.50e-08, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109548;  // std dev = 0.000, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.08621615016061304;  // std dev = 1.749, 17.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839158;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( movie(E, A) )
%   | | then return 0.2975857800278764;  // std dev = 0.368, 65.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=40 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360626;  // std dev = 4.71e-08, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4812068255909593;  // std dev = 4.21e-08, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | else if ( genre(A, E) )
%   | | then return -0.11231637819360639;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.02273937013865873;  // std dev = 1.809, 22.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.1015963294878362;  // std dev = 5.74e-09, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.10159632948783628;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.36437737553104904;  // std dev = 0.000, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.05273424412333295;  // std dev = 1.846, 27.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926107;  // std dev = 0.000, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.28479647942482456;  // std dev = 0.000, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | else if ( movie(E, A) )
%   | | then return -0.04773252239691532;  // std dev = 0.343, 29.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=4 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839679;  // std dev = 1.83e-08, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08875428003354573;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.23048249104859858;  // std dev = 4.47e-08, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.011324849354907286;  // std dev = 1.818, 23.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109173;  // std dev = 2.36e-08, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1784202938989174;  // std dev = 0.501, 37.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=36 */
%   | else if ( movie(E, B) )
%   | | then return 0.04433752539895149;  // std dev = 1.754, 18.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=4 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.07324622576333704;  // std dev = 0.000, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.16596594850452992;  // std dev = 0.000, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | else if ( genre(A, E) )
%   | | then return -0.08522699796376418;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.009727820340490783;  // std dev = 1.789, 20.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420268;  // std dev = 2.46e-09, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.14424664619951544;  // std dev = 0.000, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | else if ( genre(A, G) )
%   | | | then return -0.07881302990001272;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return -0.04891830667767272;  // std dev = 1.852, 28.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=4 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.06419184008202625;  // std dev = 0.000, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */


Results
   AUC ROC   = 0.97199
   AUC PR    = 0.81824
   CLL	      = -0.116628
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.840391


Total learning time: 0.825 seconds
Total inference time: 1.045 seconds
AUC ROC: 0.97199


Results scoring model
   AUC ROC   = 0.987184
   AUC PR    = 0.923197
   CLL	      = -0.102506
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.9
   F1        = 0.947368


Total scoring time: 0.913 seconds
Parameter learned model CLL: -0.102506


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [2.53e-07, 0, 36], 'true,false,false,true': [1.789, 16, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [6.5e-08, 64, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 36], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.749, 13, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 56, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.368, 25, 40], 'true,false,false': [0.0, 0, 0], 'false,true': [4.71e-08, 62, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [4.21e-08, 0, 36], 'true,false,true': [0.0, 2, 0], 'true,false,false,true': [1.809, 18, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.74e-09, 62, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.0, 0, 36], 'true,false,false,true': [1.846, 23, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 57, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 36], 'true,false,true': [0.343, 25, 4], 'true,false,false': [0.0, 0, 0], 'false,true': [1.83e-08, 57, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 3, 0], 'true,false,true': [4.47e-08, 0, 36], 'true,false,false,true': [1.818, 19, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.36e-08, 60, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.501, 1, 36], 'true,false,true': [1.754, 14, 4], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 67, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 36], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [1.789, 16, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.46e-09, 57, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true,true,false': 'genre(A, G)'}, {'true,true,true,true': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 36], 'true,true,false,true': [0.0, 3, 0], 'true,true,false,false': [1.852, 24, 4], 'true,false': [0.0, 0, 0], 'false': [0.0, 55, 0]}]]
[{'': [0.2092951677439218, 6.591949208711867e-17], 'true': [0.0, 0.20408163265306184], 'true,false': [1.7763568394002505e-15, 0.15999999999999986], 'true,false,false': [0.15999999999999986, nan], 'false': [6.591949208711867e-17, nan]}, {'': [0.1450831897977187, -3.766828119263924e-17], 'true': [-6.908054375445419e-16, 0.17993079584775082], 'true,false': [nan, 0.17993079584775082], 'true,false,false': [0.17993079584775082, nan], 'false': [-3.766828119263924e-17, nan]}, {'': [0.13615782884985592, 3.581364595565021e-17], 'true': [0.0, 0.1355411292991654], 'true,false': [0.1355411292991654, nan], 'false': [3.581364595565021e-17, nan]}, {'': [0.11756051102049368, 3.40229636578677e-17], 'true': [4.9343245538895844e-17, 0.1369765838920589], 'true,false': [0.0, 0.14876033057851246], 'true,false,false': [0.14876033057851246, nan], 'false': [3.40229636578677e-17, nan]}, {'': [0.09645162959005565, -1.947759692324836e-18], 'true': [0.0, 0.09669369388418972], 'true,false': [-4.9343245538895844e-17, 0.12620027434842251], 'true,false,false': [0.12620027434842251, nan], 'false': [-1.947759692324836e-18, nan]}, {'': [0.07981173350877135, 5.843279076974508e-18], 'true': [-1.2335811384723961e-17, 0.11764653230328043], 'true,false': [0.11764653230328043, nan], 'false': [5.843279076974508e-18, nan]}, {'': [0.0688614892341732, 9.25185853854297e-18], 'true': [-1.1564823173178713e-18, 0.06991391432174317], 'true,false': [5.551115123125783e-17, 0.14366729678638923], 'true,false,false': [0.14366729678638923, nan], 'false': [9.25185853854297e-18, nan]}, {'': [0.06444782561290435, -2.4855739357279623e-18], 'true': [0.006790591167276269, 0.17087105626978846], 'true,false': [0.17087105626978846, nan], 'false': [-2.4855739357279623e-18, nan]}, {'': [0.06230449570869963, 5.843279076974508e-18], 'true': [-3.0839528461809905e-17, 0.15278986020495214], 'true,false': [0.0, 0.16000000000000003], 'true,false,false': [0.16000000000000003, nan], 'false': [5.843279076974508e-18, nan]}, {'': [0.06076501749287083, -3.0278809762504268e-18], 'true': [0.06076501749287083, nan], 'true,true': [-3.0839528461809902e-18, 0.11067719523594549], 'true,true,false': [-1.1564823173178713e-18, 0.12244897959183669], 'true,true,true': [nan, -3.0839528461809902e-18]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, E).;true;true
9;true,false;genre(A, G).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995115;  // std dev = 2.53e-07, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | else if ( actor(B) )
%   | | | then return -0.14185106490048774;  // std dev = 1.05e-08, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.14185106490048768;  // std dev = 5.37e-08, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109548;  // std dev = 0.000, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | else if ( actor(B) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | else return 0.7194734122109545;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.1254446385283916;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( actor(B) )
%   | | then return -0.11231637819360639;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | else return 0.5553664367462842;  // std dev = 1.40e-07, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   else return -0.11231637819360629;  // std dev = 4.08e-08, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4175135841583102;  // std dev = 0.000, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( actor(B) )
%   | | | then return -0.10159632948783635;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | | else return 0.41751358415830997;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.10159632948783617;  // std dev = 4.71e-08, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.3207118471601495;  // std dev = 2.11e-08, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | else if ( actor(B) )
%   | | | then return -0.09269127618926094;  // std dev = 7.45e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else return 0.32071184716014967;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.09269127618926107;  // std dev = 0.000, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.25517224256948956;  // std dev = 0.000, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | else if ( actor(B) )
%   | | then return -0.08568518637512114;  // std dev = 0.007, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else return 0.25517224256948945;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.08518475138839679;  // std dev = 1.97e-08, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.20975771563253542;  // std dev = 5.37e-08, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | else if ( actor(B) )
%   | | | then return -0.07874044532944995;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | | else return 0.20975771563253554;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.07877675473109179;  // std dev = 0.000, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07446648525695831;  // std dev = 0.017, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else return 0.17709649774527753;  // std dev = 0.000, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   else return -0.07324622576333704;  // std dev = 0.000, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1527438580936709;  // std dev = 3.65e-08, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | else if ( genre(A, E) )
%   | | then return -0.08007266983053954;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( actor(B) )
%   | | | then return -0.06831968519812424;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | | else return 0.15274385809367075;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.06842697784420268;  // std dev = 1.97e-08, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13400703000801112;  // std dev = 1.05e-08, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | else if ( genre(A, E) )
%   | | then return -0.07436925650495663;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( actor(B) )
%   | | | then return -0.06409716726095877;  // std dev = 8.33e-09, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | | else return 0.13400703000801117;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.06419184008202625;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */


Results
   AUC ROC   = 0.988073
   AUC PR    = 0.631126
   CLL	      = -0.101162
   Precision = 0.784141 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.879012


Total learning time: 1.089 seconds
Total inference time: 0.934 seconds
AUC ROC: 0.988073


Results scoring model
   AUC ROC   = 0.999556
   AUC PR    = 0.927315
   CLL	      = -0.065113
   Precision = 0.97561 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.987654


Total scoring time: 0.85 seconds
Refined model CLL: -0.065113


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.988073
   AUC PR    = 0.631126
   CLL	      = -0.101162
   Precision = 0.784141 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.879012


Total learning time: 3.677 seconds
Total inference time: 0.934 seconds
AUC ROC: 0.988073
Total revision time: 3.677
Best scored revision CLL: -0.065113


Dataset: 4_cora_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 00:12:04
{'AUC ROC': 0.988073, 'AUC PR': 0.631126, 'CLL': -0.101162, 'Precision': [0.784141, 0.5], 'Recall': 1.0, 'F1': 0.879012, 'Learning time': 3.677, 'Inference time': 0.934, 'parameter_0.2': {'AUC ROC': 0.97199, 'AUC PR': 0.81824, 'CLL': -0.116628, 'Precision': [1.0, 0.5], 'Recall': 0.724719, 'F1': 0.840391, 'Learning time': 0.825, 'Inference time': 1.045}}


Amount of data: 0.4
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;haswordauthor(E, C).;true;true
7;true,true,true;author(F, E), title(F, D).;false;false
7;true,true,false;title(G, D), venue(G, B).;false;false
7;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
7;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
7;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, B).;false;true
8;true,true,false;title(F, D), venue(F, A).;false;false
8;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
8;true,false,false;haswordvenue(A, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
8;false,true;haswordauthor(M, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;true,true;author(F, E), venue(F, B).;true;true
9;true,true,true;samebib(F, G), venue(G, A).;false;false
9;true,true,false;author(H, E), venue(H, A).;false;false
9;true,false;haswordtitle(I, C).;true;true
9;true,false,true;title(J, I), venue(J, A).;false;false
9;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995127;  // std dev = 0.000, 76.000 (wgt'ed) examples reached here.  /* #pos=76 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.055644168348763574;  // std dev = 2.138, 58.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=5 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 122.000 (wgt'ed) examples reached here.  /* #neg=122 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109538;  // std dev = 2.06e-07, 76.000 (wgt'ed) examples reached here.  /* #pos=76 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.026515915744788315;  // std dev = 2.111, 46.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=5 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839105;  // std dev = 8.02e-08, 117.000 (wgt'ed) examples reached here.  /* #neg=117 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( movie(E, A) )
%   | | then return 0.308247980137973;  // std dev = 0.348, 130.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=81 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.1123163781936062;  // std dev = 9.31e-08, 127.000 (wgt'ed) examples reached here.  /* #neg=127 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4785455997341092;  // std dev = 0.000, 76.000 (wgt'ed) examples reached here.  /* #pos=76 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.07906681273987762;  // std dev = 2.130, 54.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=5 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783666;  // std dev = 0.000, 113.000 (wgt'ed) examples reached here.  /* #neg=113 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14405462623834941;  // std dev = 0.178, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.3625263163411387;  // std dev = 0.000, 76.000 (wgt'ed) examples reached here.  /* #pos=76 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.04442767704260158;  // std dev = 2.102, 43.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=5 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926089;  // std dev = 6.50e-08, 110.000 (wgt'ed) examples reached here.  /* #neg=110 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.28354547856198303;  // std dev = 0.000, 76.000 (wgt'ed) examples reached here.  /* #pos=76 */
%   | else if ( movie(E, A) )
%   | | then return -0.05582205768571798;  // std dev = 0.294, 52.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=5 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839682;  // std dev = 5.87e-08, 106.000 (wgt'ed) examples reached here.  /* #neg=106 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07719486902919322;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.22961476552658644;  // std dev = 1.15e-07, 76.000 (wgt'ed) examples reached here.  /* #pos=76 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.03400406966634681;  // std dev = 2.105, 44.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=5 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109154;  // std dev = 7.30e-08, 128.000 (wgt'ed) examples reached here.  /* #neg=128 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1849986788981538;  // std dev = 0.500, 77.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=76 */
%   | else if ( movie(E, B) )
%   | | then return -0.04175540135719762;  // std dev = 2.117, 52.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=5 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.0732462257633372;  // std dev = 0.000, 128.000 (wgt'ed) examples reached here.  /* #neg=128 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.16450255795108676;  // std dev = 0.000, 76.000 (wgt'ed) examples reached here.  /* #pos=76 */
%   | else if ( genre(A, E) )
%   | | then return -0.06913614431969717;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.03835886071178617;  // std dev = 2.121, 50.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=5 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420264;  // std dev = 5.10e-09, 111.000 (wgt'ed) examples reached here.  /* #neg=111 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.1431213148901473;  // std dev = 0.000, 76.000 (wgt'ed) examples reached here.  /* #pos=76 */
%   | | else if ( genre(A, G) )
%   | | | then return -0.06481717019056288;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return -0.04456328295632648;  // std dev = 2.134, 56.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=5 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.06419184008202626;  // std dev = 0.000, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */


Results
   AUC ROC   = 0.97199
   AUC PR    = 0.81824
   CLL	      = -0.110013
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.840391


Total learning time: 1.005 seconds
Total inference time: 1.025 seconds
AUC ROC: 0.97199


Results scoring model
   AUC ROC   = 0.991824
   AUC PR    = 0.951836
   CLL	      = -0.085728
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.938272
   F1        = 0.968153


Total scoring time: 1.112 seconds
Parameter learned model CLL: -0.085728


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 3, 0], 'true,false,true': [0.0, 0, 76], 'true,false,false,true': [2.138, 53, 5], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 122, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [2.06e-07, 0, 76], 'true,false,true': [0.0, 2, 0], 'true,false,false,true': [2.111, 41, 5], 'true,false,false,false': [0.0, 0, 0], 'false,true': [8.02e-08, 117, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [2.63e-09, 3, 0], 'true,false,true': [0.348, 49, 81], 'true,false,false': [0.0, 0, 0], 'false,true': [9.31e-08, 127, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 76], 'true,false,true': [0.0, 4, 0], 'true,false,false,true': [2.13, 49, 5], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 113, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.178, 4, 0], 'true,false,true': [0.0, 0, 76], 'true,false,false,true': [2.102, 38, 5], 'true,false,false,false': [0.0, 0, 0], 'false,true': [6.5e-08, 110, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 76], 'true,false,true': [0.294, 47, 5], 'true,false,false': [0.0, 0, 0], 'false,true': [5.87e-08, 106, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 2, 0], 'true,false,true': [1.15e-07, 0, 76], 'true,false,false,true': [2.105, 39, 5], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.3e-08, 128, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.5, 1, 76], 'true,false,true': [2.117, 47, 5], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 128, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 76], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [2.121, 45, 5], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.1e-09, 111, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true,true,false': 'genre(A, G)'}, {'true,true,true,true': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 76], 'true,true,false,true': [0.0, 2, 0], 'true,true,false,false': [2.134, 51, 5], 'true,false': [0.0, 0, 0], 'false': [0.0, 95, 0]}]]
[{'': [0.24167510256273755, 0.0], 'true': [0.0, 0.23908442860325363], 'true,false': [-1.3088945132422897e-15, 0.0787752675386446], 'true,false,false': [0.0787752675386446, nan], 'false': [0.0, nan]}, {'': [0.1695853349572279, 5.5036696947229984e-17], 'true': [5.609547913895527e-16, 0.09323499894092337], 'true,false': [0.0, 0.09688090737240067], 'true,false,false': [0.09688090737240067, nan], 'false': [5.5036696947229984e-17, nan]}, {'': [0.12202096055853612, 6.818692592186001e-17], 'true': [2.3129646346357427e-18, 0.1208471812212489], 'true,false': [0.1208471812212489, nan], 'false': [6.818692592186001e-17, nan]}, {'': [0.11062884567517485, -4.126492657898812e-17], 'true': [0.0, 0.07825736778808752], 'true,false': [0.0, 0.08401920438957494], 'true,false,false': [0.08401920438957494, nan], 'false': [-4.126492657898812e-17, nan]}, {'': [0.07722399786970396, 3.835315903250541e-17], 'true': [0.007914581184795575, 0.07535008176069376], 'true,false': [-5.142085587737567e-16, 0.10275824770146016], 'true,false,false': [0.10275824770146016, nan], 'false': [3.835315903250541e-17, nan]}, {'': [0.06294711250150758, 3.2468786569226275e-17], 'true': [-2.220446049250313e-16, 0.08656435819906659], 'true,false': [0.08656435819906659, nan], 'false': [3.2468786569226275e-17, nan]}, {'': [0.05291218607195171, 4.163336342344337e-17], 'true': [0.0, 0.05307007603305401], 'true,false': [1.7529837230923525e-16, 0.10072314049586799], 'true,false,false': [0.10072314049586799, nan], 'false': [4.163336342344337e-17, nan]}, {'': [0.049059112090758195, -1.5612511283791264e-17], 'true': [0.003241501872465523, 0.08621340562040146], 'true,false': [0.08621340562040146, nan], 'false': [-1.5612511283791264e-17, nan]}, {'': [0.045388830493749865, 2.5005023077143166e-17], 'true': [-8.764918615461762e-17, 0.08825350329077804], 'true,false': [0.0, 0.08999999999999984], 'true,false,false': [0.08999999999999984, nan], 'false': [2.5005023077143166e-17, nan]}, {'': [0.04269973925810574, -1.460819769243627e-17], 'true': [0.04269973925810574, nan], 'true,true': [-5.843279076974508e-18, 0.07852350995580562], 'true,true,false': [0.0, 0.0813137755102042], 'true,true,true': [nan, -5.843279076974508e-18]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, E).;true;true
9;true,false;genre(A, G).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995127;  // std dev = 0.000, 76.000 (wgt'ed) examples reached here.  /* #pos=76 */
%   | | else if ( actor(B) )
%   | | | then return -0.14185106490048768;  // std dev = 4.47e-08, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.14185106490048763;  // std dev = 8.16e-08, 110.000 (wgt'ed) examples reached here.  /* #neg=110 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.7194734122109546;  // std dev = 0.000, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | else return 0.7006974555278583;  // std dev = 0.125, 45.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=44 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( actor(B) )
%   | | | then return -0.1254446385283915;  // std dev = 0.000, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | | | else return 0.7194734122109545;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.12544463852839136;  // std dev = 0.000, 104.000 (wgt'ed) examples reached here.  /* #neg=104 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( actor(B) )
%   | | then return -0.11231637819360633;  // std dev = 2.36e-08, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
%   | | else return 0.5578823034043755;  // std dev = 0.021, 81.000 (wgt'ed) examples reached here.  /* #pos=81 */
%   else return -0.11231637819360618;  // std dev = 8.69e-08, 110.000 (wgt'ed) examples reached here.  /* #neg=110 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4195484243370599;  // std dev = 0.020, 76.000 (wgt'ed) examples reached here.  /* #pos=76 */
%   | else if ( genre(A, E) )
%   | | then return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( actor(B) )
%   | | | then return -0.10159632948783628;  // std dev = 1.83e-08, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
%   | | | else return 0.41690186274270513;  // std dev = 1.05e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.10159632948783633;  // std dev = 0.000, 110.000 (wgt'ed) examples reached here.  /* #neg=110 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1905374213145818;  // std dev = 0.126, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.3220935031370944;  // std dev = 0.018, 76.000 (wgt'ed) examples reached here.  /* #pos=76 */
%   | | else if ( actor(B) )
%   | | | then return -0.09269127618926101;  // std dev = 0.000, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | | | else return 0.320297159850208;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.0926912761892608;  // std dev = 7.60e-08, 126.000 (wgt'ed) examples reached here.  /* #neg=126 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2561158702773562;  // std dev = 0.015, 76.000 (wgt'ed) examples reached here.  /* #pos=76 */
%   | else if ( actor(B) )
%   | | then return -0.0851922565299223;  // std dev = 0.000289, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | | else return 0.2548892603791768;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.0851847513883968;  // std dev = 5.37e-08, 93.000 (wgt'ed) examples reached here.  /* #neg=93 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.2104247106083703;  // std dev = 0.013, 76.000 (wgt'ed) examples reached here.  /* #pos=76 */
%   | | else if ( actor(B) )
%   | | | then return -0.07877621007735582;  // std dev = 0.000, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   | | | else return 0.2095578009460748;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.07877675473109157;  // std dev = 6.32e-08, 108.000 (wgt'ed) examples reached here.  /* #neg=108 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.073683718553444;  // std dev = 0.011, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
%   | else return 0.17754669798052752;  // std dev = 0.012, 81.000 (wgt'ed) examples reached here.  /* #pos=81 */
%   else return -0.07324622576333707;  // std dev = 4.47e-08, 99.000 (wgt'ed) examples reached here.  /* #neg=99 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.15312042977731172;  // std dev = 0.010, 76.000 (wgt'ed) examples reached here.  /* #pos=76 */
%   | else if ( genre(A, E) )
%   | | then return -0.07384827107070181;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( actor(B) )
%   | | | then return -0.06839865172535387;  // std dev = 0.000, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | | | else return 0.1525554293479282;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.06842697784420265;  // std dev = 5.27e-08, 108.000 (wgt'ed) examples reached here.  /* #neg=108 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13430113271374267;  // std dev = 0.009, 76.000 (wgt'ed) examples reached here.  /* #pos=76 */
%   | else if ( genre(A, E) )
%   | | then return -0.06895369958574762;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( actor(B) )
%   | | | then return -0.06416684733719523;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | | | else return 0.13385990941261328;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.06419184008202626;  // std dev = 3.65e-08, 126.000 (wgt'ed) examples reached here.  /* #neg=126 */


Results
   AUC ROC   = 0.991725
   AUC PR    = 0.81335
   CLL	      = -0.099602
   Precision = 0.784141 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.879012


Total learning time: 1.309 seconds
Total inference time: 0.955 seconds
AUC ROC: 0.991725


Results scoring model
   AUC ROC   = 0.999866
   AUC PR    = 0.989647
   CLL	      = -0.06439
   Precision = 0.987805 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.993865


Total scoring time: 1.023 seconds
Refined model CLL: -0.06439


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.991725
   AUC PR    = 0.81335
   CLL	      = -0.099602
   Precision = 0.784141 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.879012


Total learning time: 4.449 seconds
Total inference time: 0.955 seconds
AUC ROC: 0.991725
Total revision time: 4.449
Best scored revision CLL: -0.06439


Dataset: 4_cora_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 00:12:11
{'AUC ROC': 0.991725, 'AUC PR': 0.81335, 'CLL': -0.099602, 'Precision': [0.784141, 0.5], 'Recall': 1.0, 'F1': 0.879012, 'Learning time': 4.449, 'Inference time': 0.955, 'parameter_0.4': {'AUC ROC': 0.97199, 'AUC PR': 0.81824, 'CLL': -0.110013, 'Precision': [1.0, 0.5], 'Recall': 0.724719, 'F1': 0.840391, 'Learning time': 1.005, 'Inference time': 1.025}}


Amount of data: 0.6
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;haswordauthor(E, C).;true;true
7;true,true,true;author(F, E), title(F, D).;false;false
7;true,true,false;title(G, D), venue(G, B).;false;false
7;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
7;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
7;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, B).;false;true
8;true,true,false;title(F, D), venue(F, A).;false;false
8;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
8;true,false,false;haswordvenue(A, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
8;false,true;haswordauthor(M, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;true,true;author(F, E), venue(F, B).;true;true
9;true,true,true;samebib(F, G), venue(G, A).;false;false
9;true,true,false;author(H, E), venue(H, A).;false;false
9;true,false;haswordtitle(I, C).;true;true
9;true,false,true;title(J, I), venue(J, A).;false;false
9;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995107;  // std dev = 6.19e-07, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.0472564703058931;  // std dev = 2.518, 74.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048832;  // std dev = 0.000, 185.000 (wgt'ed) examples reached here.  /* #neg=185 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109551;  // std dev = 0.000, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.036195340733403775;  // std dev = 2.510, 70.000 (wgt'ed) examples reached here.  /* #neg=63 #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839158;  // std dev = 0.000, 189.000 (wgt'ed) examples reached here.  /* #neg=189 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( movie(E, A) )
%   | | then return 0.36252620381303197;  // std dev = 0.329, 174.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=122 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360644;  // std dev = 0.000, 177.000 (wgt'ed) examples reached here.  /* #neg=177 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4650200986351315;  // std dev = 4.04e-07, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.09071766453924937;  // std dev = 2.526, 79.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783653;  // std dev = 0.000, 194.000 (wgt'ed) examples reached here.  /* #neg=194 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926097;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( genre(B, E) )
%   | | then return 0.35316208036898633;  // std dev = 0.000, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.07775299694849436;  // std dev = 2.526, 79.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926062;  // std dev = 8.16e-08, 170.000 (wgt'ed) examples reached here.  /* #neg=170 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.277212534961727;  // std dev = 1.26e-07, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   | else if ( movie(E, A) )
%   | | then return -0.0578105530436893;  // std dev = 0.290, 75.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=7 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 7.15e-08, 178.000 (wgt'ed) examples reached here.  /* #neg=178 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08078637378829202;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.22521269755550194;  // std dev = 0.000, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.0511776236641382;  // std dev = 2.514, 72.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109151;  // std dev = 7.38e-08, 141.000 (wgt'ed) examples reached here.  /* #neg=141 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18399216134303642;  // std dev = 0.504, 116.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=115 */
%   | else if ( movie(E, B) )
%   | | then return -0.02880780456722982;  // std dev = 2.490, 63.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=7 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.07324622576333671;  // std dev = 1.02e-07, 177.000 (wgt'ed) examples reached here.  /* #neg=177 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.16182001955642308;  // std dev = 1.03e-07, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   | else if ( genre(A, E) )
%   | | then return -0.07301283861563322;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.039981546663700344;  // std dev = 2.512, 71.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420262;  // std dev = 5.67e-09, 173.000 (wgt'ed) examples reached here.  /* #neg=173 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return -0.39648639252713846;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return 0.14105340837370406;  // std dev = 5.58e-08, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   | | else if ( genre(A, G) )
%   | | | then return -0.06822265081570154;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return -0.03797866566436074;  // std dev = 2.516, 73.000 (wgt'ed) examples reached here.  /* #neg=66 #pos=7 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.06419184008202626;  // std dev = 0.000, 173.000 (wgt'ed) examples reached here.  /* #neg=173 */


Results
   AUC ROC   = 0.97199
   AUC PR    = 0.81824
   CLL	      = -0.108141
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.840391


Total learning time: 1.181 seconds
Total inference time: 1.1 seconds
AUC ROC: 0.97199


Results scoring model
   AUC ROC   = 0.992442
   AUC PR    = 0.954364
   CLL	      = -0.08571
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.942623
   F1        = 0.970464


Total scoring time: 1.285 seconds
Parameter learned model CLL: -0.08571


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 4, 0], 'true,false,true': [6.19e-07, 0, 115], 'true,false,false,true': [2.518, 67, 7], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 185, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 115], 'true,false,true': [0.0, 6, 0], 'true,false,false,true': [2.51, 63, 7], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 189, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 4, 0], 'true,false,true': [0.329, 52, 122], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 177, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [4.04e-07, 0, 115], 'true,false,true': [0.0, 2, 0], 'true,false,false,true': [2.526, 72, 7], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 194, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 7, 0], 'true,false,true': [0.0, 0, 115], 'true,false,false,true': [2.526, 72, 7], 'true,false,false,false': [0.0, 0, 0], 'false,true': [8.16e-08, 170, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [1.26e-07, 0, 115], 'true,false,true': [0.29, 68, 7], 'true,false,false': [0.0, 0, 0], 'false,true': [7.15e-08, 178, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 4, 0], 'true,false,true': [0.0, 0, 115], 'true,false,false,true': [2.514, 65, 7], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.38e-08, 141, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.504, 1, 115], 'true,false,true': [2.49, 56, 7], 'true,false,false': [0.0, 0, 0], 'false,true': [1.02e-07, 177, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [1.03e-07, 0, 115], 'true,false,true': [0.0, 2, 0], 'true,false,false,true': [2.512, 64, 7], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.67e-09, 173, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true,true,false': 'genre(A, G)'}, {'true,true,true,true': [0.0, 2, 0], 'true,true,true,false': [5.58e-08, 0, 115], 'true,true,false,true': [0.0, 4, 0], 'true,true,false,false': [2.516, 66, 7], 'true,false': [0.0, 0, 0], 'false': [0.0, 173, 0]}]]
[{'': [0.23254315552095753, -2.1124243495570547e-16], 'true': [0.0, 0.22882898015173542], 'true,false': [3.3364615418300357e-15, 0.08564645726807912], 'true,false,false': [0.08564645726807912, nan], 'false': [-2.1124243495570547e-16, nan]}, {'': [0.17258466198370592, -2.5846461948945442e-17], 'true': [-1.0503675224279742e-15, 0.0834739410675033], 'true,false': [-2.3129646346357427e-18, 0.09000000000000032], 'true,false,false': [0.09000000000000032, nan], 'false': [-2.5846461948945442e-17, nan]}, {'': [0.11046804560864829, -1.003591434689407e-17], 'true': [0.0, 0.10794067624287892], 'true,false': [0.10794067624287892, nan], 'false': [-1.003591434689407e-17, nan]}, {'': [0.10751102329544394, -9.156478553609538e-17], 'true': [1.4210854715202005e-15, 0.07876515656704045], 'true,false': [0.0, 0.08075628905624072], 'true,false,false': [0.08075628905624072, nan], 'false': [-9.156478553609538e-17, nan]}, {'': [0.07745967460380403, 3.918434204559376e-17], 'true': [0.0, 0.07770869869645493], 'true,false': [-3.8616453030440226e-16, 0.0807562890562406], 'true,false,false': [0.0807562890562406, nan], 'false': [3.918434204559376e-17, nan]}, {'': [0.05999547859655464, 2.8691156816155733e-17], 'true': [1.3901923090958483e-16, 0.08405352476678674], 'true,false': [0.08405352476678674, nan], 'false': [2.8691156816155733e-17, nan]}, {'': [0.05161210489732212, 3.8582218586264306e-17], 'true': [0.0, 0.05188191367005522], 'true,false': [-2.6259188060699356e-16, 0.08777006172839506], 'true,false,false': [0.08777006172839506, nan], 'false': [3.8582218586264306e-17, nan]}, {'': [0.04638803583522581, 5.896099678800266e-17], 'true': [0.0021856713978475866, 0.09843057361003137], 'true,false': [0.09843057361003137, nan], 'false': [5.896099678800266e-17, nan]}, {'': [0.04333416016467216, 3.1445623240828136e-17], 'true': [9.267948727305654e-17, 0.08646550004073529], 'true,false': [0.0, 0.08887125570323372], 'true,false,false': [0.08887125570323372, nan], 'false': [3.1445623240828136e-17, nan]}, {'': [0.04260177175019252, -5.775726717703127e-18], 'true': [0.04260177175019252, nan], 'true,true': [0.004854867312227296, 0.08223682922843635], 'true,true,false': [0.0, 0.08669544004503672], 'true,true,true': [0.0, 2.703151712130816e-17]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, E).;true;true
9;true,true;genre(A, F).;true;true
9;true,false;genre(A, G).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995107;  // std dev = 6.19e-07, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   | | else if ( actor(B) )
%   | | | then return -0.14185106490048766;  // std dev = 5.58e-08, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.1418510649004884;  // std dev = 0.000, 203.000 (wgt'ed) examples reached here.  /* #neg=203 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109551;  // std dev = 0.000, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( actor(B) )
%   | | | then return -0.12544463852839158;  // std dev = 0.000, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
%   | | | else return 0.7194734122109543;  // std dev = 2.11e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.12544463852839138;  // std dev = 0.000, 161.000 (wgt'ed) examples reached here.  /* #neg=161 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( actor(B) )
%   | | then return -0.11231637819360626;  // std dev = 5.05e-08, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
%   | | else return 0.5553664367462834;  // std dev = 4.69e-07, 122.000 (wgt'ed) examples reached here.  /* #pos=122 */
%   else return -0.11231637819360647;  // std dev = 3.65e-08, 175.000 (wgt'ed) examples reached here.  /* #neg=175 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4175135841583094;  // std dev = 3.26e-07, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   | else if ( genre(A, E) )
%   | | then return -0.1015963294878363;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( actor(B) )
%   | | | then return -0.10159632948783615;  // std dev = 5.67e-08, 74.000 (wgt'ed) examples reached here.  /* #neg=74 */
%   | | | else return 0.41751358415831025;  // std dev = 1.49e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.10159632948783653;  // std dev = 0.000, 192.000 (wgt'ed) examples reached here.  /* #neg=192 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926097;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(B, E) )
%   | | then return 0.32071184716015005;  // std dev = 1.84e-07, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   | | else if ( actor(B) )
%   | | | then return -0.09269127618926107;  // std dev = 0.000, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   | | | else return 0.3207118471601498;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.09269127618926062;  // std dev = 8.16e-08, 170.000 (wgt'ed) examples reached here.  /* #neg=170 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2506707149995479;  // std dev = 0.520, 116.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=115 */
%   | else if ( actor(B) )
%   | | then return -0.08518475138839679;  // std dev = 1.83e-08, 71.000 (wgt'ed) examples reached here.  /* #neg=71 */
%   | | else return 0.25517224256948956;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.08518475138839678;  // std dev = 6.66e-08, 160.000 (wgt'ed) examples reached here.  /* #neg=160 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07877675473109177;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(B, E) )
%   | | then return 0.2105048611243407;  // std dev = 0.000, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   | | else if ( actor(B) )
%   | | | then return -0.07877675473109169;  // std dev = 3.16e-08, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
%   | | | else return 0.20975771563253587;  // std dev = 7.45e-09, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.07877675473109148;  // std dev = 8.30e-08, 171.000 (wgt'ed) examples reached here.  /* #neg=171 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17764429979966187;  // std dev = 0.000, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   | else if ( actor(B) )
%   | | then return -0.07324622576333704;  // std dev = 0.000, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
%   | | else return 0.17709649774527736;  // std dev = 5.27e-09, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.07324622576333668;  // std dev = 1.10e-07, 187.000 (wgt'ed) examples reached here.  /* #neg=187 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.15315929401937506;  // std dev = 1.19e-07, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   | else if ( genre(A, E) )
%   | | then return -0.06842697784420272;  // std dev = 1.86e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( actor(B) )
%   | | | then return -0.0684269778442027;  // std dev = 1.97e-08, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   | | | else return 0.152743858093671;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.06842697784420262;  // std dev = 7.81e-08, 187.000 (wgt'ed) examples reached here.  /* #neg=187 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.13433127091098598;  // std dev = 6.32e-08, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   | else if ( genre(A, F) )
%   | | then return -0.0641918400820262;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( actor(B) )
%   | | | then return -0.06419184008202625;  // std dev = 0.000, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
%   | | | else return 0.13400703000801117;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.06419184008202626;  // std dev = 0.000, 170.000 (wgt'ed) examples reached here.  /* #neg=170 */


Results
   AUC ROC   = 0.988073
   AUC PR    = 0.631126
   CLL	      = -0.098898
   Precision = 0.784141 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.879012


Total learning time: 1.336 seconds
Total inference time: 1.046 seconds
AUC ROC: 0.988073


Results scoring model
   AUC ROC   = 0.999849
   AUC PR    = 0.970418
   CLL	      = -0.064373
   Precision = 0.99187 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.995918


Total scoring time: 1.206 seconds
Refined model CLL: -0.064373


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.988073
   AUC PR    = 0.631126
   CLL	      = -0.098898
   Precision = 0.784141 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.879012


Total learning time: 5.008000000000001 seconds
Total inference time: 1.046 seconds
AUC ROC: 0.988073
Total revision time: 5.008000000000001
Best scored revision CLL: -0.064373


Dataset: 4_cora_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 00:12:19
{'AUC ROC': 0.988073, 'AUC PR': 0.631126, 'CLL': -0.098898, 'Precision': [0.784141, 0.5], 'Recall': 1.0, 'F1': 0.879012, 'Learning time': 5.008000000000001, 'Inference time': 1.046, 'parameter_0.6': {'AUC ROC': 0.97199, 'AUC PR': 0.81824, 'CLL': -0.108141, 'Precision': [1.0, 0.5], 'Recall': 0.724719, 'F1': 0.840391, 'Learning time': 1.181, 'Inference time': 1.1}}


Amount of data: 0.8
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;haswordauthor(E, C).;true;true
7;true,true,true;author(F, E), title(F, D).;false;false
7;true,true,false;title(G, D), venue(G, B).;false;false
7;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
7;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
7;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, B).;false;true
8;true,true,false;title(F, D), venue(F, A).;false;false
8;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
8;true,false,false;haswordvenue(A, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
8;false,true;haswordauthor(M, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;true,true;author(F, E), venue(F, B).;true;true
9;true,true,true;samebib(F, G), venue(G, A).;false;false
9;true,true,false;author(H, E), venue(H, A).;false;false
9;true,false;haswordtitle(I, C).;true;true
9;true,false,true;title(J, I), venue(J, A).;false;false
9;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995098;  // std dev = 9.54e-07, 154.000 (wgt'ed) examples reached here.  /* #pos=154 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.02792701426757629;  // std dev = 2.824, 79.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=9 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048843;  // std dev = 0.000, 231.000 (wgt'ed) examples reached here.  /* #neg=231 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109563;  // std dev = 0.000, 154.000 (wgt'ed) examples reached here.  /* #pos=154 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.04570190484731008;  // std dev = 2.857, 97.000 (wgt'ed) examples reached here.  /* #neg=88 #pos=9 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.1254446385283918;  // std dev = 0.000, 233.000 (wgt'ed) examples reached here.  /* #neg=233 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12877379538775877;  // std dev = 0.107, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( movie(E, A) )
%   | | then return 0.34219694803757755;  // std dev = 0.336, 242.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=163 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360679;  // std dev = 0.000, 236.000 (wgt'ed) examples reached here.  /* #neg=236 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4700809623973706;  // std dev = 3.77e-07, 154.000 (wgt'ed) examples reached here.  /* #pos=154 */
%   | else if ( genre(A, E) )
%   | | then return -0.10010400510882546;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.08101007437980988;  // std dev = 2.851, 93.000 (wgt'ed) examples reached here.  /* #neg=84 #pos=9 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783655;  // std dev = 0.000, 211.000 (wgt'ed) examples reached here.  /* #neg=211 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09144036597668584;  // std dev = 3.73e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( genre(B, E) )
%   | | then return 0.3566577401375709;  // std dev = 0.000, 154.000 (wgt'ed) examples reached here.  /* #pos=154 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.05781610873997857;  // std dev = 2.833, 83.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=9 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926051;  // std dev = 6.66e-08, 214.000 (wgt'ed) examples reached here.  /* #neg=214 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.27957756295414515;  // std dev = 0.000, 154.000 (wgt'ed) examples reached here.  /* #pos=154 */
%   | else if ( movie(E, A) )
%   | | then return -0.06524275950178625;  // std dev = 0.281, 103.000 (wgt'ed) examples reached here.  /* #neg=94 #pos=9 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 8.16e-08, 217.000 (wgt'ed) examples reached here.  /* #neg=217 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14276764179571533;  // std dev = 0.311, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( genre(B, E) )
%   | | then return 0.22685850858317275;  // std dev = 4.21e-08, 154.000 (wgt'ed) examples reached here.  /* #pos=154 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.05311111064821859;  // std dev = 2.851, 93.000 (wgt'ed) examples reached here.  /* #neg=84 #pos=9 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109144;  // std dev = 6.99e-08, 226.000 (wgt'ed) examples reached here.  /* #neg=226 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18954120345706735;  // std dev = 0.000, 154.000 (wgt'ed) examples reached here.  /* #pos=154 */
%   | else if ( movie(E, B) )
%   | | then return -0.054991253662680234;  // std dev = 2.863, 107.000 (wgt'ed) examples reached here.  /* #neg=98 #pos=9 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.07324622576333674;  // std dev = 1.22e-07, 242.000 (wgt'ed) examples reached here.  /* #neg=242 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.16212038272142146;  // std dev = 0.000, 154.000 (wgt'ed) examples reached here.  /* #pos=154 */
%   | else if ( genre(A, E) )
%   | | then return -0.0659510820819384;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.03662569629968154;  // std dev = 2.846, 90.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=9 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420274;  // std dev = 0.000, 252.000 (wgt'ed) examples reached here.  /* #neg=252 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.14128527943871558;  // std dev = 0.000, 154.000 (wgt'ed) examples reached here.  /* #pos=154 */
%   | | else if ( genre(A, G) )
%   | | | then return -0.06200284720532527;  // std dev = 1.86e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return -0.052005432437848685;  // std dev = 2.877, 112.000 (wgt'ed) examples reached here.  /* #neg=103 #pos=9 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.06419184008202612;  // std dev = 7.30e-08, 268.000 (wgt'ed) examples reached here.  /* #neg=268 */


Results
   AUC ROC   = 0.97199
   AUC PR    = 0.81824
   CLL	      = -0.109439
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.840391


Total learning time: 1.312 seconds
Total inference time: 1.04 seconds
AUC ROC: 0.97199


Results scoring model
   AUC ROC   = 0.992842
   AUC PR    = 0.955852
   CLL	      = -0.084531
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.944785
   F1        = 0.971609


Total scoring time: 1.511 seconds
Parameter learned model CLL: -0.084531


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 6, 0], 'true,false,true': [9.54e-07, 0, 154], 'true,false,false,true': [2.824, 70, 9], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 231, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 154], 'true,false,true': [0.0, 6, 0], 'true,false,false,true': [2.857, 88, 9], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 233, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.107, 7, 0], 'true,false,true': [0.336, 79, 163], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 236, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [3.77e-07, 0, 154], 'true,false,true': [0.0, 6, 0], 'true,false,false,true': [2.851, 84, 9], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 211, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [3.73e-09, 9, 0], 'true,false,true': [0.0, 0, 154], 'true,false,false,true': [2.833, 74, 9], 'true,false,false,false': [0.0, 0, 0], 'false,true': [6.66e-08, 214, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 154], 'true,false,true': [0.281, 94, 9], 'true,false,false': [0.0, 0, 0], 'false,true': [8.16e-08, 217, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.311, 8, 0], 'true,false,true': [4.21e-08, 0, 154], 'true,false,false,true': [2.851, 84, 9], 'true,false,false,false': [0.0, 0, 0], 'false,true': [6.99e-08, 226, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 154], 'true,false,true': [2.863, 98, 9], 'true,false,false': [0.0, 0, 0], 'false,true': [1.22e-07, 242, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 154], 'true,false,true': [0.0, 5, 0], 'true,false,false,true': [2.846, 81, 9], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 252, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true,true,false': 'genre(A, G)'}, {'true,true,true,true': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 154], 'true,true,false,true': [1.86e-09, 5, 0], 'true,true,false,false': [2.877, 103, 9], 'true,false': [0.0, 0, 0], 'false': [7.3e-08, 268, 0]}]]
[{'': [0.21687295390487404, -2.0762612408574356e-16], 'true': [-6.938893903907228e-18, 0.21017148962037055], 'true,false': [5.905809751772262e-15, 0.10094536132030146], 'true,false,false': [0.10094536132030146, nan], 'false': [-2.0762612408574356e-16, nan]}, {'': [0.17423158832112456, -7.052060413928032e-17], 'true': [-2.5837917664003644e-15, 0.0796201878218737], 'true,false': [-2.3129646346357427e-18, 0.08417472632585805], 'true,false,false': [0.08417472632585805, nan], 'false': [-7.052060413928032e-17, nan]}, {'': [0.11584066810254305, -8.091455942183344e-17], 'true': [0.0016250794842142871, 0.11290870556864334], 'true,false': [0.11290870556864334, nan], 'false': [-8.091455942183344e-17, nan]}, {'': [0.1047799766416407, -8.629221613200269e-17], 'true': [9.227827737144157e-16, 0.08213219346788975], 'true,false': [0.0, 0.0874089490114462], 'true,false,false': [0.0874089490114462, nan], 'false': [-8.629221613200269e-17, nan]}, {'': [0.07351562186466146, 2.0751832235984234e-17], 'true': [1.5419764230904951e-18, 0.07294971181704038], 'true,false': [-1.3841741605716237e-16, 0.09667586006677312], 'true,false,false': [0.09667586006677312, nan], 'false': [2.0751832235984234e-17, nan]}, {'': [0.06026853918177563, 3.0697410819128755e-17], 'true': [-2.9990440145718514e-16, 0.07913067936680862], 'true,false': [0.07913067936680862, nan], 'false': [3.0697410819128755e-17, nan]}, {'': [0.05220317908365023, 2.161496154137473e-17], 'true': [0.012111133817270546, 0.05131164447007684], 'true,false': [1.1534784671430199e-17, 0.08740894901144658], 'true,false,false': [0.08740894901144658, nan], 'false': [2.161496154137473e-17, nan]}, {'': [0.045879377793290294, 6.14751592147814e-17], 'true': [-1.4995220072859257e-16, 0.07662937611274966], 'true,false': [0.07662937611274966, nan], 'false': [6.14751592147814e-17, nan]}, {'': [0.04201238401453832, -9.69242323085454e-18], 'true': [-4.0371746350005693e-17, 0.08530603769673964], 'true,false': [0.0, 0.08999999999999998], 'true,false,false': [0.08999999999999998, nan], 'false': [-9.69242323085454e-18, nan]}, {'': [0.03975018937627022, 1.9884591485823698e-17], 'true': [0.03975018937627022, nan], 'true,true': [-9.227827737144159e-17, 0.07074584700274426], 'true,true,false': [6.938893903907229e-19, 0.07389987244897954], 'true,true,true': [nan, -9.227827737144159e-17]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, E).;true;true
9;true,false;genre(A, G).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995098;  // std dev = 9.54e-07, 154.000 (wgt'ed) examples reached here.  /* #pos=154 */
%   | | else if ( actor(B) )
%   | | | then return -0.14185106490048763;  // std dev = 8.30e-08, 91.000 (wgt'ed) examples reached here.  /* #neg=91 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.1418510649004885;  // std dev = 0.000, 226.000 (wgt'ed) examples reached here.  /* #neg=226 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109563;  // std dev = 0.000, 154.000 (wgt'ed) examples reached here.  /* #pos=154 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( actor(B) )
%   | | | then return -0.12544463852839152;  // std dev = 0.000, 73.000 (wgt'ed) examples reached here.  /* #neg=73 */
%   | | | else return 0.7194734122109543;  // std dev = 2.98e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.12544463852839177;  // std dev = 0.000, 226.000 (wgt'ed) examples reached here.  /* #neg=226 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1353567622654197;  // std dev = 0.103, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( actor(B) )
%   | | then return -0.11231637819360624;  // std dev = 5.77e-08, 72.000 (wgt'ed) examples reached here.  /* #neg=72 */
%   | | else return 0.5553664367462833;  // std dev = 5.53e-07, 163.000 (wgt'ed) examples reached here.  /* #pos=163 */
%   else return -0.11231637819360683;  // std dev = 0.000, 245.000 (wgt'ed) examples reached here.  /* #neg=245 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.41751358415830886;  // std dev = 4.66e-07, 154.000 (wgt'ed) examples reached here.  /* #pos=154 */
%   | else if ( genre(A, E) )
%   | | then return -0.09951254957513767;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( actor(B) )
%   | | | then return -0.10159632948783617;  // std dev = 5.58e-08, 84.000 (wgt'ed) examples reached here.  /* #neg=84 */
%   | | | else return 0.41751358415831025;  // std dev = 2.11e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.10159632948783659;  // std dev = 0.000, 252.000 (wgt'ed) examples reached here.  /* #neg=252 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09094381404307315;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( genre(B, E) )
%   | | then return 0.3207118471601497;  // std dev = 2.92e-07, 154.000 (wgt'ed) examples reached here.  /* #pos=154 */
%   | | else if ( actor(B) )
%   | | | then return -0.09269127618926104;  // std dev = 2.36e-08, 89.000 (wgt'ed) examples reached here.  /* #neg=89 */
%   | | | else return 0.3207118471601498;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.09269127618926046;  // std dev = 1.12e-07, 258.000 (wgt'ed) examples reached here.  /* #neg=258 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.25517224256948984;  // std dev = 2.98e-08, 60.000 (wgt'ed) examples reached here.  /* #pos=60 */
%   | | else return 0.2443799380205207;  // std dev = 0.074, 96.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=94 */
%   | else if ( actor(B) )
%   | | then return -0.08503208197695603;  // std dev = 0.005, 107.000 (wgt'ed) examples reached here.  /* #neg=107 */
%   | | else return 0.25517224256948956;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.08518475138839678;  // std dev = 8.82e-08, 236.000 (wgt'ed) examples reached here.  /* #neg=236 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12449578366418948;  // std dev = 0.211, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(B, E) )
%   | | then return 0.2108530780025986;  // std dev = 0.011, 154.000 (wgt'ed) examples reached here.  /* #pos=154 */
%   | | else if ( actor(B) )
%   | | | then return -0.07878783481205172;  // std dev = 2.58e-08, 76.000 (wgt'ed) examples reached here.  /* #neg=76 */
%   | | | else return 0.20975771563253587;  // std dev = 7.45e-09, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.07877675473109143;  // std dev = 6.66e-08, 236.000 (wgt'ed) examples reached here.  /* #neg=236 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17789961135882434;  // std dev = 0.010, 154.000 (wgt'ed) examples reached here.  /* #pos=154 */
%   | else if ( actor(B) )
%   | | then return -0.07302781005750239;  // std dev = 0.009, 94.000 (wgt'ed) examples reached here.  /* #neg=94 */
%   | | else return 0.17709649774527736;  // std dev = 7.45e-09, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.07324622576333677;  // std dev = 1.20e-07, 247.000 (wgt'ed) examples reached here.  /* #neg=247 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.15335291585453878;  // std dev = 0.008, 154.000 (wgt'ed) examples reached here.  /* #pos=154 */
%   | else if ( genre(A, E) )
%   | | then return -0.06442470176176492;  // std dev = 3.23e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( actor(B) )
%   | | | then return -0.06844992983256555;  // std dev = 1.67e-08, 75.000 (wgt'ed) examples reached here.  /* #neg=75 */
%   | | | else return 0.15274385809367097;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.06842697784420261;  // std dev = 5.58e-08, 234.000 (wgt'ed) examples reached here.  /* #neg=234 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1344823933196477;  // std dev = 0.008, 154.000 (wgt'ed) examples reached here.  /* #pos=154 */
%   | else if ( genre(A, E) )
%   | | then return -0.060648820958305545;  // std dev = 2.63e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( actor(B) )
%   | | | then return -0.0642120902535398;  // std dev = 0.000, 76.000 (wgt'ed) examples reached here.  /* #neg=76 */
%   | | | else return 0.13400703000801117;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.06419184008202625;  // std dev = 2.98e-08, 250.000 (wgt'ed) examples reached here.  /* #neg=250 */


Results
   AUC ROC   = 0.991725
   AUC PR    = 0.81335
   CLL	      = -0.099153
   Precision = 0.784141 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.879012


Total learning time: 1.627 seconds
Total inference time: 0.943 seconds
AUC ROC: 0.991725


Results scoring model
   AUC ROC   = 0.999929
   AUC PR    = 0.994362
   CLL	      = -0.06429
   Precision = 0.993902 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.996942


Total scoring time: 1.614 seconds
Refined model CLL: -0.06429


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.991725
   AUC PR    = 0.81335
   CLL	      = -0.099153
   Precision = 0.784141 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.879012


Total learning time: 6.064 seconds
Total inference time: 0.943 seconds
AUC ROC: 0.991725
Total revision time: 6.064
Best scored revision CLL: -0.06429


Dataset: 4_cora_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 00:12:28
{'AUC ROC': 0.991725, 'AUC PR': 0.81335, 'CLL': -0.099153, 'Precision': [0.784141, 0.5], 'Recall': 1.0, 'F1': 0.879012, 'Learning time': 6.064, 'Inference time': 0.943, 'parameter_0.8': {'AUC ROC': 0.97199, 'AUC PR': 0.81824, 'CLL': -0.109439, 'Precision': [1.0, 0.5], 'Recall': 0.724719, 'F1': 0.840391, 'Learning time': 1.312, 'Inference time': 1.04}}


Amount of data: 1.0
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;haswordauthor(E, C).;true;true
7;true,true,true;author(F, E), title(F, D).;false;false
7;true,true,false;title(G, D), venue(G, B).;false;false
7;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
7;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
7;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, B).;false;true
8;true,true,false;title(F, D), venue(F, A).;false;false
8;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
8;true,false,false;haswordvenue(A, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
8;false,true;haswordauthor(M, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;true,true;author(F, E), venue(F, B).;true;true
9;true,true,true;samebib(F, G), venue(G, A).;false;false
9;true,true,false;author(H, E), venue(H, A).;false;false
9;true,false;haswordtitle(I, C).;true;true
9;true,false,true;title(J, I), venue(J, A).;false;false
9;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995093;  // std dev = 1.09e-06, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.05781745145510952;  // std dev = 3.026, 119.000 (wgt'ed) examples reached here.  /* #neg=109 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048782;  // std dev = 1.03e-07, 301.000 (wgt'ed) examples reached here.  /* #neg=301 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7151404991302422;  // std dev = 0.843, 195.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=194 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.0440485577245874;  // std dev = 3.015, 110.000 (wgt'ed) examples reached here.  /* #neg=100 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839197;  // std dev = 0.000, 289.000 (wgt'ed) examples reached here.  /* #neg=289 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12866513447531852;  // std dev = 0.106, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( movie(E, A) )
%   | | then return 0.34726493707465605;  // std dev = 0.332, 300.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=204 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360694;  // std dev = 0.000, 289.000 (wgt'ed) examples reached here.  /* #neg=289 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4698978554459216;  // std dev = 0.000, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else if ( genre(A, E) )
%   | | then return -0.10011379405615184;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.08746620180967679;  // std dev = 3.022, 115.000 (wgt'ed) examples reached here.  /* #neg=105 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783662;  // std dev = 0.000, 285.000 (wgt'ed) examples reached here.  /* #neg=285 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09144858049501105;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(B, E) )
%   | | then return 0.3565310992185018;  // std dev = 4.17e-07, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.0869959945950155;  // std dev = 3.041, 133.000 (wgt'ed) examples reached here.  /* #neg=123 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926043;  // std dev = 1.52e-07, 295.000 (wgt'ed) examples reached here.  /* #neg=295 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.27949190397662743;  // std dev = 7.30e-08, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else if ( movie(E, A) )
%   | | then return -0.06672488901263458;  // std dev = 0.268, 127.000 (wgt'ed) examples reached here.  /* #neg=117 #pos=10 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 1.05e-07, 307.000 (wgt'ed) examples reached here.  /* #neg=307 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07912844822798865;  // std dev = 2.63e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( genre(B, E) )
%   | | then return 0.2267989382801398;  // std dev = 0.000, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.05307882922738296;  // std dev = 3.018, 112.000 (wgt'ed) examples reached here.  /* #neg=102 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109144;  // std dev = 4.94e-08, 266.000 (wgt'ed) examples reached here.  /* #neg=266 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1894981797266647;  // std dev = 0.000, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else if ( movie(E, B) )
%   | | then return -0.055652580373548144;  // std dev = 3.031, 133.000 (wgt'ed) examples reached here.  /* #neg=123 #pos=10 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.07324622576333702;  // std dev = 8.82e-08, 315.000 (wgt'ed) examples reached here.  /* #neg=315 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.16208818164767183;  // std dev = 0.000, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else if ( genre(A, E) )
%   | | then return -0.06984783309900211;  // std dev = 2.63e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.03868871225876347;  // std dev = 3.015, 110.000 (wgt'ed) examples reached here.  /* #neg=100 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420299;  // std dev = 0.000, 296.000 (wgt'ed) examples reached here.  /* #neg=296 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.1412604251834316;  // std dev = 0.000, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | | else if ( genre(A, G) )
%   | | | then return -0.06544398604943052;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return -0.04953824077962774;  // std dev = 3.040, 132.000 (wgt'ed) examples reached here.  /* #neg=122 #pos=10 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.0641918400820259;  // std dev = 1.28e-07, 312.000 (wgt'ed) examples reached here.  /* #neg=312 */


Results
   AUC ROC   = 0.97199
   AUC PR    = 0.81824
   CLL	      = -0.109385
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.840391


Total learning time: 1.452 seconds
Total inference time: 0.984 seconds
AUC ROC: 0.97199


Results scoring model
   AUC ROC   = 0.993632
   AUC PR    = 0.960741
   CLL	      = -0.082577
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.95098
   F1        = 0.974874


Total scoring time: 1.779 seconds
Parameter learned model CLL: -0.082577


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 7, 0], 'true,false,true': [1.09e-06, 0, 194], 'true,false,false,true': [3.026, 109, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.03e-07, 301, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.843, 1, 194], 'true,false,true': [0.0, 8, 0], 'true,false,false,true': [3.015, 100, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 289, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.106, 7, 0], 'true,false,true': [0.332, 96, 204], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 289, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 194], 'true,false,true': [0.0, 4, 0], 'true,false,false,true': [3.022, 105, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 285, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 6, 0], 'true,false,true': [4.17e-07, 0, 194], 'true,false,false,true': [3.041, 123, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.52e-07, 295, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [7.3e-08, 0, 194], 'true,false,true': [0.268, 117, 10], 'true,false,false': [0.0, 0, 0], 'false,true': [1.05e-07, 307, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [2.63e-09, 8, 0], 'true,false,true': [0.0, 0, 194], 'true,false,false,true': [3.018, 102, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [4.94e-08, 266, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 194], 'true,false,true': [3.031, 123, 10], 'true,false,false': [0.0, 0, 0], 'false,true': [8.82e-08, 315, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 194], 'true,false,true': [2.63e-09, 11, 0], 'true,false,false,true': [3.015, 100, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 296, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true,true,false': 'genre(A, G)'}, {'true,true,true,true': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 194], 'true,true,false,true': [0.0, 7, 0], 'true,true,false,false': [3.04, 122, 10], 'true,false': [0.0, 0, 0], 'false': [1.28e-07, 312, 0]}]]
[{'': [0.23109375000000448, 3.540910643322758e-17], 'true': [-7.93016446160826e-18, 0.22696975573906492], 'true,false': [6.15315358802561e-15, 0.07697196525669057], 'true,false,false': [0.07697196525669057, nan], 'false': [3.540910643322758e-17, nan]}, {'': [0.16881819357698227, -7.990532495572061e-17], 'true': [0.003642182338411897, 0.07746032433647358], 'true,false': [0.0, 0.08264462809917301], 'true,false,false': [0.08264462809917301, nan], 'false': [-7.990532495572061e-17, nan]}, {'': [0.11283351380211379, -9.37350927365184e-17], 'true': [0.0016036909917529327, 0.11026416613553162], 'true,false': [0.11026416613553162, nan], 'false': [-9.37350927365184e-17, nan]}, {'': [0.10248893589479358, -5.609547913895528e-17], 'true': [-7.32518284288763e-16, 0.07673153883635787], 'true,false': [0.0, 0.07939508506616243], 'true,false,false': [0.07939508506616243, nan], 'false': [-5.609547913895528e-17, nan]}, {'': [0.07565143230677583, 7.828013190577375e-17], 'true': [0.0, 0.07574941195499696], 'true,false': [8.973348982537347e-16, 0.0695347391033972], 'true,false,false': [0.0695347391033972, nan], 'false': [7.828013190577375e-17, nan]}, {'': [0.05716129147628499, 3.6163616437301514e-17], 'true': [2.7469435660828616e-17, 0.07203611886668909], 'true,false': [0.07203611886668909, nan], 'false': [3.6163616437301514e-17, nan]}, {'': [0.047745275833934085, 9.182295692388512e-18], 'true': [8.673617379884035e-19, 0.047938548774669944], 'true,false': [-1.648166139649717e-16, 0.08131377551020393], 'true,false,false': [0.08131377551020393, nan], 'false': [9.182295692388512e-18, nan]}, {'': [0.042588027076397035, 2.4671622769447922e-17], 'true': [-2.792725958850909e-16, 0.06905390664451752], 'true,false': [0.06905390664451752, nan], 'false': [2.4671622769447922e-17, nan]}, {'': [0.03869843946623405, -5.401084984662924e-17], 'true': [-3.6625914214438153e-17, 0.07521171900020228], 'true,false': [6.30808536718839e-19, 0.08264462809917368], 'true,false,false': [0.08264462809917368, nan], 'false': [-5.401084984662924e-17, nan]}, {'': [0.03668732606527132, 5.2664425527090757e-17], 'true': [0.03668732606527132, nan], 'true,true': [-1.602383746881669e-17, 0.06650435976304946], 'true,true,false': [-4.956352788505163e-19, 0.07001836547291083], 'true,true,true': [nan, -1.602383746881669e-17]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, E).;true;true
9;true,false;genre(A, G).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995093;  // std dev = 1.09e-06, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | | else if ( actor(B) )
%   | | | then return -0.14185106490048763;  // std dev = 7.88e-08, 112.000 (wgt'ed) examples reached here.  /* #neg=112 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.1418510649004879;  // std dev = 5.16e-08, 291.000 (wgt'ed) examples reached here.  /* #neg=291 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.719473412210957;  // std dev = 0.000, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( actor(B) )
%   | | | then return -0.12544463852839133;  // std dev = 0.000, 106.000 (wgt'ed) examples reached here.  /* #neg=106 */
%   | | | else return 0.7194734122109544;  // std dev = 2.98e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.125444638528392;  // std dev = 0.000, 297.000 (wgt'ed) examples reached here.  /* #neg=297 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14111685828337303;  // std dev = 0.141, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( actor(B) )
%   | | then return -0.11231637819360618;  // std dev = 8.82e-08, 114.000 (wgt'ed) examples reached here.  /* #neg=114 */
%   | | else return 0.5553664367462833;  // std dev = 6.36e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.11231637819360693;  // std dev = 0.000, 289.000 (wgt'ed) examples reached here.  /* #neg=289 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4175135841583099;  // std dev = 3.04e-07, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else if ( genre(A, E) )
%   | | then return -0.09899757789545373;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( actor(B) )
%   | | | then return -0.10159632948783635;  // std dev = 0.000, 115.000 (wgt'ed) examples reached here.  /* #neg=115 */
%   | | | else return 0.4175135841583103;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.1015963294878366;  // std dev = 0.000, 280.000 (wgt'ed) examples reached here.  /* #neg=280 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11415894991487974;  // std dev = 0.063, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( genre(B, E) )
%   | | then return 0.320711847160149;  // std dev = 3.95e-07, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | | else if ( actor(B) )
%   | | | then return -0.09269127618926092;  // std dev = 5.87e-08, 106.000 (wgt'ed) examples reached here.  /* #neg=106 */
%   | | | else return 0.3207118471601498;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.09269127618926046;  // std dev = 1.12e-07, 258.000 (wgt'ed) examples reached here.  /* #neg=258 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.25517224256949106;  // std dev = 0.000, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else if ( actor(B) )
%   | | then return -0.08492460227033385;  // std dev = 0.009, 98.000 (wgt'ed) examples reached here.  /* #neg=98 */
%   | | else return 0.2551722425694896;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.08518475138839678;  // std dev = 1.07e-07, 320.000 (wgt'ed) examples reached here.  /* #neg=320 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07540420006035443;  // std dev = 5.27e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( genre(B, E) )
%   | | then return 0.209757715632535;  // std dev = 2.92e-07, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | | else if ( actor(B) )
%   | | | then return -0.07879563607585043;  // std dev = 4.83e-08, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */
%   | | | else return 0.2097577156325357;  // std dev = 1.97e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.07877675473109143;  // std dev = 5.16e-08, 279.000 (wgt'ed) examples reached here.  /* #neg=279 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17709649774527758;  // std dev = 0.000, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else if ( actor(B) )
%   | | then return -0.07304608844418478;  // std dev = 0.008, 109.000 (wgt'ed) examples reached here.  /* #neg=109 */
%   | | else return 0.17709649774527736;  // std dev = 7.45e-09, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.07324622576333699;  // std dev = 9.42e-08, 304.000 (wgt'ed) examples reached here.  /* #neg=304 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1527438580936715;  // std dev = 0.000, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else if ( genre(A, E) )
%   | | then return -0.06568494300228032;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( actor(B) )
%   | | | then return -0.06845512045178642;  // std dev = 0.000, 121.000 (wgt'ed) examples reached here.  /* #neg=121 */
%   | | | else return 0.15274385809367094;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.06842697784420283;  // std dev = 0.000, 267.000 (wgt'ed) examples reached here.  /* #neg=267 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1340070300080108;  // std dev = 1.05e-07, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else if ( genre(A, E) )
%   | | then return -0.061767008950677216;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( actor(B) )
%   | | | then return -0.06421666974668816;  // std dev = 0.000, 98.000 (wgt'ed) examples reached here.  /* #neg=98 */
%   | | | else return 0.13400703000801117;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.06419184008202604;  // std dev = 9.77e-08, 284.000 (wgt'ed) examples reached here.  /* #neg=284 */


Results
   AUC ROC   = 0.993085
   AUC PR    = 0.784141
   CLL	      = -0.099349
   Precision = 0.784141 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.879012


Total learning time: 1.842 seconds
Total inference time: 0.951 seconds
AUC ROC: 0.993085


Results scoring model
   AUC ROC   = 0.999953
   AUC PR    = 0.995122
   CLL	      = -0.064239
   Precision = 0.995122 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.997555


Total scoring time: 1.566 seconds
Refined model CLL: -0.064239


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.993085
   AUC PR    = 0.784141
   CLL	      = -0.099349
   Precision = 0.784141 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.879012


Total learning time: 6.639 seconds
Total inference time: 0.951 seconds
AUC ROC: 0.993085
Total revision time: 6.639
Best scored revision CLL: -0.064239


Dataset: 4_cora_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 00:12:37
{'AUC ROC': 0.993085, 'AUC PR': 0.784141, 'CLL': -0.099349, 'Precision': [0.784141, 0.5], 'Recall': 1.0, 'F1': 0.879012, 'Learning time': 6.639, 'Inference time': 0.951, 'parameter_1.0': {'AUC ROC': 0.97199, 'AUC PR': 0.81824, 'CLL': -0.109385, 'Precision': [1.0, 0.5], 'Recall': 0.724719, 'F1': 0.840391, 'Learning time': 1.452, 'Inference time': 0.984}}


Starting fold 4

Target train facts examples: 927
Target train pos examples: 337
Target train neg examples: 12345

Target test facts examples: 151
Target test pos	 examples: 45
Target test neg examples: 1891

Amount of data: 0.2
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;haswordauthor(E, C).;true;true
7;true,true,true;author(F, E), title(F, D).;false;false
7;true,true,false;title(G, D), venue(G, B).;false;false
7;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
7;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
7;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, B).;false;true
8;true,true,false;title(F, D), venue(F, A).;false;false
8;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
8;true,false,false;haswordvenue(A, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
8;false,true;haswordauthor(M, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;true,true;author(F, E), venue(F, B).;true;true
9;true,true,true;samebib(F, G), venue(G, A).;false;false
9;true,true,false;author(H, E), venue(H, A).;false;false
9;true,false;haswordtitle(I, C).;true;true
9;true,false,true;title(J, I), venue(J, A).;false;false
9;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995124;  // std dev = 0.000, 57.000 (wgt'ed) examples reached here.  /* #pos=57 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.09070707463439608;  // std dev = 2.770, 43.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048768;  // std dev = 6.66e-08, 115.000 (wgt'ed) examples reached here.  /* #neg=115 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109544;  // std dev = 0.000, 57.000 (wgt'ed) examples reached here.  /* #pos=57 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.042822982287760374;  // std dev = 2.835, 51.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.1254446385283913;  // std dev = 0.000, 122.000 (wgt'ed) examples reached here.  /* #neg=122 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( movie(E, A) )
%   | | then return 0.41091274451869403;  // std dev = 0.338, 89.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=67 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360618;  // std dev = 8.43e-08, 106.000 (wgt'ed) examples reached here.  /* #neg=106 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4416020843589038;  // std dev = 0.656, 58.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=57 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.041418250979642184;  // std dev = 2.714, 38.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783628;  // std dev = 2.95e-09, 102.000 (wgt'ed) examples reached here.  /* #neg=102 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.19158172337844862;  // std dev = 0.242, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(B, E) )
%   | | then return 0.34747943417376204;  // std dev = 0.000, 57.000 (wgt'ed) examples reached here.  /* #pos=57 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.06514811575702716;  // std dev = 2.657, 34.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926092;  // std dev = 5.96e-08, 107.000 (wgt'ed) examples reached here.  /* #neg=107 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2733649561576894;  // std dev = 9.88e-08, 57.000 (wgt'ed) examples reached here.  /* #pos=57 */
%   | else if ( movie(E, A) )
%   | | then return -0.007592196695031996;  // std dev = 0.412, 45.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=10 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.0851847513883968;  // std dev = 6.05e-08, 111.000 (wgt'ed) examples reached here.  /* #neg=111 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.0772449458665948;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.22253027121163757;  // std dev = 6.99e-08, 57.000 (wgt'ed) examples reached here.  /* #pos=57 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.01706649877972231;  // std dev = 2.789, 45.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109162;  // std dev = 5.16e-08, 89.000 (wgt'ed) examples reached here.  /* #neg=89 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17021220477859988;  // std dev = 0.664, 59.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=57 */
%   | else if ( movie(E, B) )
%   | | then return -0.022056344464626575;  // std dev = 2.799, 49.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=10 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.07324622576333707;  // std dev = 4.28e-08, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.15351556688515935;  // std dev = 0.485, 58.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=57 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return -0.01001777649953649;  // std dev = 2.789, 45.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420268;  // std dev = 4.27e-09, 77.000 (wgt'ed) examples reached here.  /* #neg=77 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.14218741774303467;  // std dev = 2.58e-08, 57.000 (wgt'ed) examples reached here.  /* #pos=57 */
%   | | else if ( genre(A, G) )
%   | | | then return -0.0704574487154611;  // std dev = 1.32e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return -0.03438014521393492;  // std dev = 2.835, 51.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=10 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.06419184008202626;  // std dev = 0.000, 104.000 (wgt'ed) examples reached here.  /* #neg=104 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.11469
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 0.907 seconds
Total inference time: 0.84 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.982106
   AUC PR    = 0.886223
   CLL	      = -0.114516
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.850746
   F1        = 0.919355


Total scoring time: 1.092 seconds
Parameter learned model CLL: -0.114516


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 3, 0], 'true,false,true': [0.0, 0, 57], 'true,false,false,true': [2.77, 33, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [6.66e-08, 115, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 57], 'true,false,true': [0.0, 3, 0], 'true,false,false,true': [2.835, 41, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 122, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.338, 22, 67], 'true,false,false': [0.0, 0, 0], 'false,true': [8.43e-08, 106, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.656, 1, 57], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [2.714, 28, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.95e-09, 102, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.242, 6, 0], 'true,false,true': [0.0, 0, 57], 'true,false,false,true': [2.657, 24, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.96e-08, 107, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [9.88e-08, 0, 57], 'true,false,true': [0.412, 35, 10], 'true,false,false': [0.0, 0, 0], 'false,true': [6.05e-08, 111, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [6.99e-08, 0, 57], 'true,false,false,true': [2.789, 35, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.16e-08, 89, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.664, 2, 57], 'true,false,true': [2.799, 39, 10], 'true,false,false': [0.0, 0, 0], 'false,true': [4.28e-08, 92, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.485, 1, 57], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [2.789, 35, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [4.27e-09, 77, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true,true,false': 'genre(A, G)'}, {'true,true,true,true': [0.0, 0, 0], 'true,true,true,false': [2.58e-08, 0, 57], 'true,true,false,true': [1.32e-09, 3, 0], 'true,true,false,false': [2.835, 41, 10], 'true,false': [0.0, 0, 0], 'false': [0.0, 104, 0]}]]
[{'': [0.2273541332830608, 3.8616453030440226e-17], 'true': [0.0, 0.22109999999999919], 'true,false': [-3.739698609263685e-16, 0.17847485127095739], 'true,false,false': [0.17847485127095739, nan], 'false': [3.8616453030440226e-17, nan]}, {'': [0.19071068896691293, -3.640075490574284e-18], 'true': [-1.8698493046318425e-16, 0.1503599752632848], 'true,false': [0.0, 0.15763168012302975], 'true,false,false': [0.15763168012302975, nan], 'false': [-3.640075490574284e-18, nan]}, {'': [0.11615308553132588, 6.70323335622736e-17], 'true': [0.0, 0.11441630177050045], 'true,false': [0.11441630177050045, nan], 'false': [6.70323335622736e-17, nan]}, {'': [0.11980993908535045, 8.707631565687502e-18], 'true': [0.007411962816853558, 0.18944486622040158], 'true,false': [0.0, 0.19390581717451538], 'true,false,false': [0.19390581717451538, nan], 'false': [8.707631565687502e-18, nan]}, {'': [0.10178592058481213, 3.320293157757477e-17], 'true': [0.009779320545277517, 0.09622422503877272], 'true,false': [-1.5582077538598687e-17, 0.207612456747405], 'true,false,false': [0.207612456747405, nan], 'false': [3.320293157757477e-17, nan]}, {'': [0.09431291370113212, 3.300663046182898e-17], 'true': [1.7140285292458556e-16, 0.16966412851541687], 'true,false': [0.16966412851541687, nan], 'false': [3.300663046182898e-17, nan]}, {'': [0.08989012647097441, 2.993859841685815e-17], 'true': [0.0, 0.09040573756261383], 'true,false': [8.570142646229278e-17, 0.1728395061728396], 'true,false,false': [0.1728395061728396, nan], 'false': [2.993859841685815e-17, nan]}, {'': [0.08578453101244946, 1.991160859382074e-17], 'true': [0.007476967539662743, 0.15987818815953383], 'true,false': [0.15987818815953383, nan], 'false': [1.991160859382074e-17, nan]}, {'': [0.08437992476547529, 1.8023101049109684e-17], 'true': [0.004063588507788464, 0.1728395061728398], 'true,false': [nan, 0.1728395061728398], 'true,false,false': [0.1728395061728398, nan], 'false': [1.8023101049109684e-17, nan]}, {'': [0.08042474371735463, -1.6012832085939756e-17], 'true': [0.08042474371735463, nan], 'true,true': [1.1686558153949016e-17, 0.14894265690963598], 'true,true,false': [5.782411586589357e-19, 0.15763168012302964], 'true,true,true': [nan, 1.1686558153949016e-17]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, E).;true;true
9;true,false;genre(A, G).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995124;  // std dev = 0.000, 57.000 (wgt'ed) examples reached here.  /* #pos=57 */
%   | | else if ( actor(B) )
%   | | | then return -0.1418510649004877;  // std dev = 2.98e-08, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.14185106490048763;  // std dev = 8.56e-08, 94.000 (wgt'ed) examples reached here.  /* #neg=94 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.7194734122109543;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | else return 0.6938698349158229;  // std dev = 0.145, 33.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( actor(B) )
%   | | | then return -0.12544463852839138;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | | else return 0.7194734122109544;  // std dev = 2.98e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.1254446385283914;  // std dev = 0.000, 89.000 (wgt'ed) examples reached here.  /* #neg=89 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.16768308569589968;  // std dev = 0.078, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( actor(B) )
%   | | then return -0.11231637819360642;  // std dev = 0.000, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | else return 0.5583816552896028;  // std dev = 0.026, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   else return -0.1123163781936062;  // std dev = 8.16e-08, 102.000 (wgt'ed) examples reached here.  /* #neg=102 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4202816847886188;  // std dev = 0.023, 57.000 (wgt'ed) examples reached here.  /* #pos=57 */
%   | else if ( genre(A, E) )
%   | | then return -0.09665306287374036;  // std dev = 1.86e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( actor(B) )
%   | | | then return -0.10159632948783635;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | | else return 0.41678047798558737;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.10159632948783623;  // std dev = 4.83e-08, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14897466469185355;  // std dev = 0.148, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.32259250187786837;  // std dev = 0.021, 57.000 (wgt'ed) examples reached here.  /* #pos=57 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.3202148793921252;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.10774496450768699;  // std dev = 0.580, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.09269127618926098;  // std dev = 4.59e-08, 99.000 (wgt'ed) examples reached here.  /* #neg=99 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.25371836762588446;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | else return 0.243441689389349;  // std dev = 0.086, 33.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   | else if ( actor(B) )
%   | | then return -0.08237998484636767;  // std dev = 0.016, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | else return 0.2548331074224866;  // std dev = 1.83e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.08518475138839682;  // std dev = 5.58e-08, 98.000 (wgt'ed) examples reached here.  /* #neg=98 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11501957161050855;  // std dev = 0.194, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(B, E) )
%   | | then return 0.21209186616513245;  // std dev = 0.022, 57.000 (wgt'ed) examples reached here.  /* #pos=57 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.20951812654475344;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.09597900988430891;  // std dev = 0.624, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   else return -0.0787767547310916;  // std dev = 5.67e-08, 98.000 (wgt'ed) examples reached here.  /* #neg=98 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.0706064481856871;  // std dev = 0.013, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | else return 0.17852644647186675;  // std dev = 0.020, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   else return -0.07324622576333707;  // std dev = 0.000, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.1538286885531116;  // std dev = 0.018, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else if ( actor(B) )
%   | | then return -0.06655497329556073;  // std dev = 0.006, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | | else return -0.30208081563450206;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.06842697784420265;  // std dev = 4.47e-08, 93.000 (wgt'ed) examples reached here.  /* #neg=93 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13507826753588192;  // std dev = 0.016, 57.000 (wgt'ed) examples reached here.  /* #pos=57 */
%   | else if ( genre(A, E) )
%   | | then return -0.05651003506358185;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.13357577581491284;  // std dev = 7.45e-09, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.08417790218003775;  // std dev = 0.590, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   else return -0.06419184008202626;  // std dev = 0.000, 110.000 (wgt'ed) examples reached here.  /* #neg=110 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063546
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.334 seconds
Total inference time: 0.824 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.066544
   Precision = 0.930556 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.964029


Total scoring time: 0.912 seconds
Refined model CLL: -0.066544


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063546
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 4.245 seconds
Total inference time: 0.824 seconds
AUC ROC: 1.0
Total revision time: 4.245
Best scored revision CLL: -0.066544


Dataset: 4_cora_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 00:12:43
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063546, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 4.245, 'Inference time': 0.824, 'parameter_0.2': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.11469, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 0.907, 'Inference time': 0.84}}


Amount of data: 0.4
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;haswordauthor(E, C).;true;true
7;true,true,true;author(F, E), title(F, D).;false;false
7;true,true,false;title(G, D), venue(G, B).;false;false
7;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
7;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
7;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, B).;false;true
8;true,true,false;title(F, D), venue(F, A).;false;false
8;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
8;true,false,false;haswordvenue(A, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
8;false,true;haswordauthor(M, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;true,true;author(F, E), venue(F, B).;true;true
9;true,true,true;samebib(F, G), venue(G, A).;false;false
9;true,true,false;author(H, E), venue(H, A).;false;false
9;true,false;haswordtitle(I, C).;true;true
9;true,false,true;title(J, I), venue(J, A).;false;false
9;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( genre(B, E) )
%   | | then return 0.858148935099511;  // std dev = 5.72e-07, 111.000 (wgt'ed) examples reached here.  /* #pos=111 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.1568502338008104;  // std dev = 4.016, 77.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=23 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048838;  // std dev = 0.000, 194.000 (wgt'ed) examples reached here.  /* #neg=194 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.719473412210955;  // std dev = 0.000, 111.000 (wgt'ed) examples reached here.  /* #pos=111 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.07507647316389882;  // std dev = 4.189, 97.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=23 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839163;  // std dev = 0.000, 199.000 (wgt'ed) examples reached here.  /* #neg=199 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1332621818952548;  // std dev = 0.147, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( movie(E, A) )
%   | | then return 0.3517118042850574;  // std dev = 0.372, 198.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=134 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360664;  // std dev = 0.000, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4558059479590464;  // std dev = 0.943, 113.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=111 */
%   | else if ( genre(A, E) )
%   | | then return -0.09970040201942569;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.02984957155649367;  // std dev = 4.130, 89.000 (wgt'ed) examples reached here.  /* #neg=66 #pos=23 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783655;  // std dev = 0.000, 214.000 (wgt'ed) examples reached here.  /* #neg=214 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.0911015720278653;  // std dev = 4.56e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(B, E) )
%   | | then return 0.357750716407132;  // std dev = 0.000, 111.000 (wgt'ed) examples reached here.  /* #pos=111 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.024543609347330023;  // std dev = 4.130, 89.000 (wgt'ed) examples reached here.  /* #neg=66 #pos=23 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926061;  // std dev = 8.56e-08, 179.000 (wgt'ed) examples reached here.  /* #neg=179 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2705637878365767;  // std dev = 0.772, 113.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=111 */
%   | else if ( movie(E, A) )
%   | | then return 0.03316033849369807;  // std dev = 0.438, 87.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=23 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 7.88e-08, 207.000 (wgt'ed) examples reached here.  /* #neg=207 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11050572475492156;  // std dev = 0.229, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( genre(B, E) )
%   | | then return 0.2290903694616599;  // std dev = 1.60e-07, 111.000 (wgt'ed) examples reached here.  /* #pos=111 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.014381153021396934;  // std dev = 4.208, 100.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=23 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109146;  // std dev = 6.32e-08, 228.000 (wgt'ed) examples reached here.  /* #neg=228 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.178135471701146;  // std dev = 0.845, 114.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=111 */
%   | else if ( movie(E, B) )
%   | | then return 0.03462894075263325;  // std dev = 4.073, 85.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=23 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.07324622576333663;  // std dev = 1.26e-07, 209.000 (wgt'ed) examples reached here.  /* #neg=209 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.15175623496469773;  // std dev = 0.867, 114.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=111 */
%   | else if ( genre(A, E) )
%   | | then return -0.08061084417551237;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.01622840344604536;  // std dev = 4.113, 87.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=23 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420262;  // std dev = 5.59e-09, 221.000 (wgt'ed) examples reached here.  /* #neg=221 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return -0.3773090562221006;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return 0.14523956565401785;  // std dev = 0.000, 111.000 (wgt'ed) examples reached here.  /* #pos=111 */
%   | | else if ( genre(A, G) )
%   | | | then return -0.07483494883186116;  // std dev = 4.56e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.010184192646006538;  // std dev = 4.122, 88.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=23 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.06419184008202626;  // std dev = 0.000, 196.000 (wgt'ed) examples reached here.  /* #neg=196 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.124409
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.22 seconds
Total inference time: 0.866 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.979266
   AUC PR    = 0.867799
   CLL	      = -0.1232
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.828358
   F1        = 0.906122


Total scoring time: 1.16 seconds
Parameter learned model CLL: -0.1232


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 7, 0], 'true,false,true': [5.72e-07, 0, 111], 'true,false,false,true': [4.016, 54, 23], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 194, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 111], 'true,false,true': [0.0, 8, 0], 'true,false,false,true': [4.189, 74, 23], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 199, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.147, 11, 0], 'true,false,true': [0.372, 64, 134], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 206, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.943, 2, 111], 'true,false,true': [0.0, 4, 0], 'true,false,false,true': [4.13, 66, 23], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 214, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [4.56e-09, 6, 0], 'true,false,true': [0.0, 0, 111], 'true,false,false,true': [4.13, 66, 23], 'true,false,false,false': [0.0, 0, 0], 'false,true': [8.56e-08, 179, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.772, 2, 111], 'true,false,true': [0.438, 64, 23], 'true,false,false': [0.0, 0, 0], 'false,true': [7.88e-08, 207, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.229, 10, 0], 'true,false,true': [1.6e-07, 0, 111], 'true,false,false,true': [4.208, 77, 23], 'true,false,false,false': [0.0, 0, 0], 'false,true': [6.32e-08, 228, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.845, 3, 111], 'true,false,true': [4.073, 62, 23], 'true,false,false': [0.0, 0, 0], 'false,true': [1.26e-07, 209, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.867, 3, 111], 'true,false,true': [0.0, 4, 0], 'true,false,false,true': [4.113, 64, 23], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.59e-09, 221, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true,true,false': 'genre(A, G)'}, {'true,true,true,true': [0.0, 2, 0], 'true,true,true,false': [0.0, 0, 111], 'true,true,false,true': [4.56e-09, 8, 0], 'true,true,false,false': [4.122, 65, 23], 'true,false': [0.0, 0, 0], 'false': [0.0, 196, 0]}]]
[{'': [0.21496383957922874, -2.3120108347864086e-16], 'true': [-7.93016446160826e-18, 0.20473064735174745], 'true,false': [2.944591517564379e-15, 0.2094788328554572], 'true,false,false': [0.2094788328554572, nan], 'false': [-2.3120108347864086e-16, nan]}, {'': [0.19131778813661018, -3.3474061043974566e-17], 'true': [-7.681543089298381e-16, 0.16993860297672875], 'true,false': [0.0, 0.1808906366245074], 'true,false,false': [0.1808906366245074, nan], 'false': [-3.3474061043974566e-17, nan]}, {'': [0.14291761884016715, -5.1738548720395646e-17], 'true': [0.001974270117185958, 0.13836886976077353], 'true,false': [0.13836886976077353, nan], 'false': [-5.1738548720395646e-17, nan]}, {'': [0.13353942875746738, -8.300732894393693e-17], 'true': [0.007866634850061456, 0.18409059275682485], 'true,false': [0.0, 0.19164246938517873], 'true,false,false': [0.19164246938517873, nan], 'false': [-8.300732894393693e-17, nan]}, {'': [0.11197398633164471, 4.093559755601136e-17], 'true': [3.469446951953614e-18, 0.11270178632220443], 'true,false': [-1.1202250338560137e-16, 0.19164246938517915], 'true,false,false': [0.19164246938517915, nan], 'false': [4.093559755601136e-17, nan]}, {'': [0.10025420598144123, 3.003501902367573e-17], 'true': [0.00527920886985561, 0.19176891082881575], 'true,false': [0.19176891082881575, nan], 'false': [3.003501902367573e-17, nan]}, {'': [0.09665431763306596, 1.7529837230923523e-17], 'true': [0.005222732188819685, 0.09871296788231142], 'true,false': [2.3204661415588857e-16, 0.1770999999999996], 'true,false,false': [0.1770999999999996, nan], 'false': [1.7529837230923523e-17, nan]}, {'': [0.09198840097815032, 7.543142081185274e-17], 'true': [0.006268480952254672, 0.19515630165982004], 'true,false': [0.19515630165982004, nan], 'false': [7.543142081185274e-17, nan]}, {'': [0.09120240042614693, 3.114652829265145e-17], 'true': [0.006598990023993669, 0.18632310701578944], 'true,false': [0.0, 0.1944774739067253], 'true,false,false': [0.1944774739067253, nan], 'false': [3.114652829265145e-17, nan]}, {'': [0.08849154037647985, -2.2657612747452172e-18], 'true': [0.08849154037647985, nan], 'true,true': [0.00474733086489678, 0.17751712044478155], 'true,true,false': [2.6020852139652106e-18, 0.19305268595041342], 'true,true,true': [0.0, -8.801768123154394e-17]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, E).;true;true
9;true,true;genre(A, F).;true;true
9;true,false;genre(A, G).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( genre(B, E) )
%   | | then return 0.858148935099511;  // std dev = 5.72e-07, 111.000 (wgt'ed) examples reached here.  /* #pos=111 */
%   | | else if ( actor(B) )
%   | | | then return -0.14185106490048766;  // std dev = 6.32e-08, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
%   | | | else return 0.8581489350995121;  // std dev = 8.43e-08, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   else return -0.14185106490048835;  // std dev = 0.000, 190.000 (wgt'ed) examples reached here.  /* #neg=190 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.719473412210955;  // std dev = 0.000, 111.000 (wgt'ed) examples reached here.  /* #pos=111 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 5.27e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( actor(B) )
%   | | | then return -0.1254446385283916;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   | | | else return 0.7194734122109543;  // std dev = 5.96e-08, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   else return -0.12544463852839177;  // std dev = 0.000, 228.000 (wgt'ed) examples reached here.  /* #neg=228 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12117806437507299;  // std dev = 0.111, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( director(B), actor(A) )
%   | | then return 0.5553664367462834;  // std dev = 4.92e-07, 134.000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | | else return -0.11759125414694134;  // std dev = 0.330, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
%   else return -0.11231637819360646;  // std dev = 0.000, 180.000 (wgt'ed) examples reached here.  /* #neg=180 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.4175135841583106;  // std dev = 0.000, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | | else return 0.39941388808691836;  // std dev = 0.105, 69.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=67 */
%   | else if ( genre(A, E) )
%   | | then return -0.10079033424024157;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.41751358415831047;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return -0.10611113491006906;  // std dev = 0.312, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
%   else return -0.10159632948783653;  // std dev = 0.000, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( female(B) )
%   | | then return -0.09201601506264868;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.12335742457813753;  // std dev = 0.172, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(B, E) )
%   | | then return 0.32309961368222295;  // std dev = 0.020, 111.000 (wgt'ed) examples reached here.  /* #pos=111 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.32071184716014955;  // std dev = 2.98e-08, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return -0.0966845011691409;  // std dev = 0.296, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
%   else return -0.09269127618926055;  // std dev = 9.54e-08, 207.000 (wgt'ed) examples reached here.  /* #neg=207 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.25652214950042135;  // std dev = 0.019, 134.000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else if ( actor(B) )
%   | | then return -0.08404425138792507;  // std dev = 0.003, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
%   | | else return -0.2931008698137208;  // std dev = 0.091, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.08518475138839678;  // std dev = 7.74e-08, 201.000 (wgt'ed) examples reached here.  /* #neg=201 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( actor(B) )
%   | | then return -0.07692957217649563;  // std dev = 0.003, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return -0.20414278382428708;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.21095534612899183;  // std dev = 0.016, 111.000 (wgt'ed) examples reached here.  /* #pos=111 */
%   | | else if ( actor(B) )
%   | | | then return -0.07786415494242853;  // std dev = 0.000, 72.000 (wgt'ed) examples reached here.  /* #neg=72 */
%   | | | else return 0.2095340435162338;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   else return -0.07877675473109147;  // std dev = 7.30e-08, 201.000 (wgt'ed) examples reached here.  /* #neg=201 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.1777958712453292;  // std dev = 0.014, 134.000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else if ( actor(B) )
%   | | then return -0.07237389860433431;  // std dev = 0.004, 75.000 (wgt'ed) examples reached here.  /* #neg=75 */
%   | | else return -0.23142570032948798;  // std dev = 0.143, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.07324622576333663;  // std dev = 1.30e-07, 220.000 (wgt'ed) examples reached here.  /* #neg=220 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.15201608255897445;  // std dev = 0.000, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | | else return 0.1500010156849946;  // std dev = 0.036, 68.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=67 */
%   | else if ( genre(A, E) )
%   | | then return -0.06741689725224624;  // std dev = 0.002, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.15250775007813183;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return -0.07133295024472305;  // std dev = 0.228, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
%   else return -0.06842697784420262;  // std dev = 7.88e-08, 189.000 (wgt'ed) examples reached here.  /* #neg=189 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( genre(A, E) )
%   | | then return -0.16162758343548353;  // std dev = 3.73e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0.13485292758205206;  // std dev = 0.012, 111.000 (wgt'ed) examples reached here.  /* #pos=111 */
%   | else if ( genre(A, F) )
%   | | then return -0.0628057858413359;  // std dev = 0.002, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( actor(B) )
%   | | | then return -0.06336999494397547;  // std dev = 1.18e-08, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
%   | | | else return 0.13382267714120671;  // std dev = 2.11e-08, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   else return -0.06419184008202626;  // std dev = 0.000, 184.000 (wgt'ed) examples reached here.  /* #neg=184 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063822
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.715 seconds
Total inference time: 0.855 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.065325
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.175 seconds
Refined model CLL: -0.065325


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063822
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 5.27 seconds
Total inference time: 0.855 seconds
AUC ROC: 1.0
Total revision time: 5.27
Best scored revision CLL: -0.065325


Dataset: 4_cora_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 00:12:51
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063822, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 5.27, 'Inference time': 0.855, 'parameter_0.4': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.124409, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 1.22, 'Inference time': 0.866}}


Amount of data: 0.6
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;haswordauthor(E, C).;true;true
7;true,true,true;author(F, E), title(F, D).;false;false
7;true,true,false;title(G, D), venue(G, B).;false;false
7;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
7;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
7;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, B).;false;true
8;true,true,false;title(F, D), venue(F, A).;false;false
8;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
8;true,false,false;haswordvenue(A, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
8;false,true;haswordauthor(M, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;true,true;author(F, E), venue(F, B).;true;true
9;true,true,true;samebib(F, G), venue(G, A).;false;false
9;true,true,false;author(H, E), venue(H, A).;false;false
9;true,false;haswordtitle(I, C).;true;true
9;true,false,true;title(J, I), venue(J, A).;false;false
9;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995096;  // std dev = 1.05e-06, 168.000 (wgt'ed) examples reached here.  /* #pos=168 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.14628452831984987;  // std dev = 4.920, 118.000 (wgt'ed) examples reached here.  /* #neg=84 #pos=34 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048768;  // std dev = 1.79e-07, 327.000 (wgt'ed) examples reached here.  /* #neg=327 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7144738971178243;  // std dev = 0.842, 169.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=168 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.10923384480681761;  // std dev = 4.983, 126.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=34 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839213;  // std dev = 0.000, 312.000 (wgt'ed) examples reached here.  /* #neg=312 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12990475268250024;  // std dev = 0.149, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( movie(E, A) )
%   | | then return 0.37326752178226363;  // std dev = 0.364, 286.000 (wgt'ed) examples reached here.  /* #neg=84 #pos=202 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360683;  // std dev = 0.000, 302.000 (wgt'ed) examples reached here.  /* #neg=302 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4480506996382861;  // std dev = 1.321, 172.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=168 */
%   | else if ( genre(A, E) )
%   | | then return -0.10000217093118172;  // std dev = 3.73e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.03108093624493112;  // std dev = 4.990, 127.000 (wgt'ed) examples reached here.  /* #neg=93 #pos=34 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783662;  // std dev = 0.000, 287.000 (wgt'ed) examples reached here.  /* #neg=287 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1625557308739812;  // std dev = 0.312, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( genre(B, E) )
%   | | then return 0.35573110539491487;  // std dev = 0.000, 168.000 (wgt'ed) examples reached here.  /* #pos=168 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.017130348960954826;  // std dev = 5.133, 151.000 (wgt'ed) examples reached here.  /* #neg=117 #pos=34 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926042;  // std dev = 1.67e-07, 313.000 (wgt'ed) examples reached here.  /* #neg=313 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2665318242195816;  // std dev = 1.056, 172.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=168 */
%   | else if ( movie(E, A) )
%   | | then return 0.014673227651903568;  // std dev = 0.426, 139.000 (wgt'ed) examples reached here.  /* #neg=105 #pos=34 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 1.05e-07, 303.000 (wgt'ed) examples reached here.  /* #neg=303 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12561947023535602;  // std dev = 0.290, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( genre(B, E) )
%   | | then return 0.22860516883104992;  // std dev = 1.19e-07, 168.000 (wgt'ed) examples reached here.  /* #pos=168 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.0512583501827395;  // std dev = 4.902, 116.000 (wgt'ed) examples reached here.  /* #neg=82 #pos=34 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109143;  // std dev = 2.58e-08, 311.000 (wgt'ed) examples reached here.  /* #neg=311 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18799966301469748;  // std dev = 0.472, 169.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=168 */
%   | else if ( movie(E, B) )
%   | | then return 0.014543018838180209;  // std dev = 4.977, 136.000 (wgt'ed) examples reached here.  /* #neg=102 #pos=34 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.07324622576333692;  // std dev = 1.04e-07, 284.000 (wgt'ed) examples reached here.  /* #neg=284 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.16057126009853506;  // std dev = 0.484, 169.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=168 */
%   | else if ( genre(A, E) )
%   | | then return -0.07201363379988462;  // std dev = 2.63e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.04677079139220109;  // std dev = 4.875, 113.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=34 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420287;  // std dev = 0.000, 275.000 (wgt'ed) examples reached here.  /* #neg=275 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return -0.3584026906079325;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.1426588161424647;  // std dev = 1.40e-07, 168.000 (wgt'ed) examples reached here.  /* #pos=168 */
%   | | else if ( genre(A, G) )
%   | | | then return -0.06734697733954222;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.015607935237142944;  // std dev = 4.952, 122.000 (wgt'ed) examples reached here.  /* #neg=88 #pos=34 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.06419184008202596;  // std dev = 1.17e-07, 301.000 (wgt'ed) examples reached here.  /* #neg=301 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.128713
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.445 seconds
Total inference time: 0.909 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.979662
   AUC PR    = 0.870564
   CLL	      = -0.126633
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.831683
   F1        = 0.908108


Total scoring time: 1.396 seconds
Parameter learned model CLL: -0.126633


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 11, 0], 'true,false,true': [1.05e-06, 0, 168], 'true,false,false,true': [4.92, 84, 34], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.79e-07, 327, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.842, 1, 168], 'true,false,true': [5.27e-09, 12, 0], 'true,false,false,true': [4.983, 92, 34], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 312, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.149, 13, 0], 'true,false,true': [0.364, 84, 202], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 302, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.321, 4, 168], 'true,false,true': [3.73e-09, 10, 0], 'true,false,false,true': [4.99, 93, 34], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 287, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.312, 11, 0], 'true,false,true': [0.0, 0, 168], 'true,false,false,true': [5.133, 117, 34], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.67e-07, 313, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [1.056, 4, 168], 'true,false,true': [0.426, 105, 34], 'true,false,false': [0.0, 0, 0], 'false,true': [1.05e-07, 303, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.29, 10, 0], 'true,false,true': [1.19e-07, 0, 168], 'true,false,false,true': [4.902, 82, 34], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.58e-08, 311, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.472, 1, 168], 'true,false,true': [4.977, 102, 34], 'true,false,false': [0.0, 0, 0], 'false,true': [1.04e-07, 284, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.484, 1, 168], 'true,false,true': [2.63e-09, 8, 0], 'true,false,false,true': [4.875, 79, 34], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 275, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true,true,false': 'genre(A, G)'}, {'true,true,true,true': [0.0, 4, 0], 'true,true,true,false': [1.4e-07, 0, 168], 'true,true,false,true': [0.0, 8, 0], 'true,true,false,false': [4.952, 88, 34], 'true,false': [0.0, 0, 0], 'false': [1.17e-07, 301, 0]}]]
[{'': [0.21755149701278126, 9.778111042570187e-17], 'true': [-1.0092936587501423e-17, 0.20744290674361093], 'true,false': [6.5133084111342514e-15, 0.2051134731399037], 'true,false,false': [0.2051134731399037, nan], 'false': [9.778111042570187e-17, nan]}, {'': [0.18200232361765295, -1.1102230246251565e-16], 'true': [0.004199185395961788, 0.18426678405807648], 'true,false': [2.3129646346357427e-18, 0.19702695893172018], 'true,false,false': [0.19702695893172018, nan], 'false': [-1.1102230246251565e-16, nan]}, {'': [0.13732352230646927, -7.058371547285764e-17], 'true': [0.001701430044388676, 0.1324802351338347], 'true,false': [0.1324802351338347, nan], 'false': [-7.058371547285764e-17, nan]}, {'': [0.13163712579263773, -5.725191903990354e-17], 'true': [0.010144298118872103, 0.18289725130833603], 'true,false': [1.3877787807814458e-18, 0.19604439208878324], 'true,false,false': [0.19604439208878324, nan], 'false': [-5.725191903990354e-17, nan]}, {'': [0.11739384376642427, 8.938536811678577e-17], 'true': [0.008871726214680757, 0.11724194291182631], 'true,false': [-4.863834203119734e-16, 0.1744660321915698], 'true,false,false': [0.1744660321915698, nan], 'false': [8.938536811678577e-17, nan]}, {'': [0.10045063967478489, 3.664102391502167e-17], 'true': [0.006477656714943386, 0.18165197567080796], 'true,false': [0.18165197567080796, nan], 'false': [3.664102391502167e-17, nan]}, {'': [0.09198543089668036, 2.1419093722671832e-18], 'true': [0.008398169070576056, 0.09222782701064357], 'true,false': [8.458842092382145e-17, 0.20719381688466051], 'true,false,false': [0.20719381688466051, nan], 'false': [2.1419093722671832e-18, nan]}, {'': [0.08939033102000148, 3.83105128215723e-17], 'true': [0.0013190637726823295, 0.1821605599297198], 'true,false': [0.1821605599297198, nan], 'false': [3.83105128215723e-17, nan]}, {'': [0.08673632762721373, -3.3912266934004784e-17], 'true': [0.0013883205827382966, 0.1973167472642203], 'true,false': [8.673617379884035e-19, 0.21035319915420062], 'true,false,false': [0.21035319915420062, nan], 'false': [-3.3912266934004784e-17, nan]}, {'': [0.08818636758682649, 4.5736762476252294e-17], 'true': [0.08818636758682649, nan], 'true,true': [0.005702882968617251, 0.1890481113853002], 'true,true,false': [0.0, 0.20102123085192075], 'true,true,true': [0.0, 1.163090787702545e-16]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, E).;true;true
9;true,true;genre(A, F).;true;true
9;true,false;genre(A, G).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995096;  // std dev = 1.05e-06, 168.000 (wgt'ed) examples reached here.  /* #pos=168 */
%   | | else if ( actor(B) )
%   | | | then return -0.14185106490048763;  // std dev = 8.56e-08, 94.000 (wgt'ed) examples reached here.  /* #neg=94 */
%   | | | else return 0.8581489350995115;  // std dev = 2.38e-07, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   else return -0.14185106490048802;  // std dev = 0.000, 274.000 (wgt'ed) examples reached here.  /* #neg=274 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.7194734122109544;  // std dev = 1.69e-07, 70.000 (wgt'ed) examples reached here.  /* #pos=70 */
%   | | else return 0.7109388864459105;  // std dev = 0.084, 99.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=98 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 5.27e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.7194734122109548;  // std dev = 0.000, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | | else return -0.1272271896693185;  // std dev = 0.154, 87.000 (wgt'ed) examples reached here.  /* #neg=87 */
%   else return -0.1254446385283921;  // std dev = 0.000, 342.000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12265323590731182;  // std dev = 0.108, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( director(B), actor(A) )
%   | | then return 0.5563883832693793;  // std dev = 0.015, 202.000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | | else return -0.11364866901893975;  // std dev = 0.143, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
%   else return -0.11231637819360682;  // std dev = 0.000, 301.000 (wgt'ed) examples reached here.  /* #neg=301 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.41726507183107103;  // std dev = 0.000, 70.000 (wgt'ed) examples reached here.  /* #pos=70 */
%   | | else return 0.4130323454843567;  // std dev = 0.062, 99.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=98 */
%   | else if ( genre(A, E) )
%   | | then return -0.10065671573345103;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.41726507183106964;  // std dev = 1.03e-07, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | | else return -0.10452321654708127;  // std dev = 0.186, 83.000 (wgt'ed) examples reached here.  /* #neg=83 */
%   else return -0.1015963294878365;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #neg=326 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.15486688650315109;  // std dev = 0.218, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(B, E) )
%   | | then return 0.3221691207341085;  // std dev = 0.018, 168.000 (wgt'ed) examples reached here.  /* #pos=168 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.3205433734371977;  // std dev = 0.000, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | | else return -0.09362783893304863;  // std dev = 0.123, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */
%   else return -0.09269127618926042;  // std dev = 1.69e-07, 314.000 (wgt'ed) examples reached here.  /* #neg=314 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.25598010070368993;  // std dev = 0.017, 202.000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else if ( actor(B) )
%   | | then return -0.08429091088611947;  // std dev = 0.012, 97.000 (wgt'ed) examples reached here.  /* #neg=97 */
%   | | else return -0.25060279606850294;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.08518475138839678;  // std dev = 1.10e-07, 321.000 (wgt'ed) examples reached here.  /* #neg=321 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( female(B) )
%   | | then return -0.07379781339815085;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return -0.08854523872941887;  // std dev = 0.042, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( genre(B, E) )
%   | | then return 0.21049138989989552;  // std dev = 0.014, 168.000 (wgt'ed) examples reached here.  /* #pos=168 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.2095236236754082;  // std dev = 4.71e-08, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | | else return -0.07921562183432573;  // std dev = 0.085, 97.000 (wgt'ed) examples reached here.  /* #neg=97 */
%   else return -0.07877675473109141;  // std dev = 3.33e-08, 313.000 (wgt'ed) examples reached here.  /* #neg=313 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.1765474260887848;  // std dev = 0.000, 70.000 (wgt'ed) examples reached here.  /* #pos=70 */
%   | | else return 0.17099513595081597;  // std dev = 0.052, 100.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=98 */
%   | else if ( director(B), actor(A) )
%   | | then return 0.17692478336444525;  // std dev = 3.94e-08, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | else return -0.07433744992049199;  // std dev = 0.139, 121.000 (wgt'ed) examples reached here.  /* #neg=121 */
%   else return -0.07324622576333693;  // std dev = 1.03e-07, 287.000 (wgt'ed) examples reached here.  /* #neg=287 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.1523272043392671;  // std dev = 5.58e-08, 70.000 (wgt'ed) examples reached here.  /* #pos=70 */
%   | | else return 0.14720637231196615;  // std dev = 0.053, 100.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=98 */
%   | else if ( genre(A, E) )
%   | | then return -0.06367991218316595;  // std dev = 0.001, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.15261358300882963;  // std dev = 0.000, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | | else return -0.06883423587830588;  // std dev = 0.075, 85.000 (wgt'ed) examples reached here.  /* #neg=85 */
%   else return -0.0684269778442031;  // std dev = 0.000, 323.000 (wgt'ed) examples reached here.  /* #neg=323 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( genre(A, E) )
%   | | then return -0.24668960233403245;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0.13527885819232116;  // std dev = 0.017, 168.000 (wgt'ed) examples reached here.  /* #pos=168 */
%   | else if ( genre(A, F) )
%   | | then return -0.06014719722772093;  // std dev = 0.001, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( actor(B) )
%   | | | then return -0.06371164184491367;  // std dev = 0.000, 94.000 (wgt'ed) examples reached here.  /* #neg=94 */
%   | | | else return 0.13390531805039174;  // std dev = 0.000, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   else return -0.06419184008202612;  // std dev = 7.45e-08, 269.000 (wgt'ed) examples reached here.  /* #neg=269 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064015
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.156 seconds
Total inference time: 0.864 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.065144
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.451 seconds
Refined model CLL: -0.065144


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064015
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 6.448 seconds
Total inference time: 0.864 seconds
AUC ROC: 1.0
Total revision time: 6.448
Best scored revision CLL: -0.065144


Dataset: 4_cora_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 00:12:59
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.064015, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 6.448, 'Inference time': 0.864, 'parameter_0.6': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.128713, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 1.445, 'Inference time': 0.909}}


Amount of data: 0.8
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;haswordauthor(E, C).;true;true
7;true,true,true;author(F, E), title(F, D).;false;false
7;true,true,false;title(G, D), venue(G, B).;false;false
7;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
7;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
7;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, B).;false;true
8;true,true,false;title(F, D), venue(F, A).;false;false
8;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
8;true,false,false;haswordvenue(A, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
8;false,true;haswordauthor(M, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;true,true;author(F, E), venue(F, B).;true;true
9;true,true,true;samebib(F, G), venue(G, A).;false;false
9;true,true,false;author(H, E), venue(H, A).;false;false
9;true,false;haswordtitle(I, C).;true;true
9;true,false,true;title(J, I), venue(J, A).;false;false
9;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else if ( genre(B, E) )
%   | | then return 0.858148935099509;  // std dev = 1.08e-06, 220.000 (wgt'ed) examples reached here.  /* #pos=220 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.13037115732173465;  // std dev = 5.972, 180.000 (wgt'ed) examples reached here.  /* #neg=131 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.1418510649004873;  // std dev = 3.01e-07, 410.000 (wgt'ed) examples reached here.  /* #neg=410 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7043855898763259;  // std dev = 1.675, 224.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=220 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 5.27e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.1297616240932102;  // std dev = 5.906, 170.000 (wgt'ed) examples reached here.  /* #neg=121 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839224;  // std dev = 0.000, 384.000 (wgt'ed) examples reached here.  /* #neg=384 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1404566497929128;  // std dev = 0.218, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else if ( movie(E, A) )
%   | | then return 0.3558736508069599;  // std dev = 0.375, 396.000 (wgt'ed) examples reached here.  /* #neg=127 #pos=269 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360613;  // std dev = 0.000, 420.000 (wgt'ed) examples reached here.  /* #neg=420 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.46139515646330737;  // std dev = 1.156, 223.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=220 */
%   | else if ( genre(A, E) )
%   | | then return -0.09905648214259438;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.05390039208292184;  // std dev = 5.906, 170.000 (wgt'ed) examples reached here.  /* #neg=121 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783587;  // std dev = 1.16e-08, 409.000 (wgt'ed) examples reached here.  /* #neg=409 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.13558495916348962;  // std dev = 0.296, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( genre(B, E) )
%   | | then return 0.35897784816813927;  // std dev = 6.11e-07, 220.000 (wgt'ed) examples reached here.  /* #pos=220 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.04926926758207832;  // std dev = 5.884, 167.000 (wgt'ed) examples reached here.  /* #neg=118 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.0926912761892608;  // std dev = 1.65e-07, 389.000 (wgt'ed) examples reached here.  /* #neg=389 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2787033174809018;  // std dev = 0.539, 221.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=220 */
%   | else if ( movie(E, A) )
%   | | then return 0.020197475114964024;  // std dev = 0.434, 188.000 (wgt'ed) examples reached here.  /* #neg=139 #pos=49 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 1.33e-07, 408.000 (wgt'ed) examples reached here.  /* #neg=408 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.13081075675124515;  // std dev = 0.416, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else if ( genre(B, E) )
%   | | then return 0.22837943515301792;  // std dev = 2.83e-07, 220.000 (wgt'ed) examples reached here.  /* #pos=220 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.0415907270664715;  // std dev = 5.862, 164.000 (wgt'ed) examples reached here.  /* #neg=115 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109143;  // std dev = 2.09e-07, 363.000 (wgt'ed) examples reached here.  /* #neg=363 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17999841335428318;  // std dev = 1.059, 225.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=220 */
%   | else if ( movie(E, B) )
%   | | then return 6.701468533580274E-4;  // std dev = 5.984, 193.000 (wgt'ed) examples reached here.  /* #neg=144 #pos=49 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.07324622576333772;  // std dev = 0.000, 419.000 (wgt'ed) examples reached here.  /* #neg=419 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.15997578549648855;  // std dev = 0.691, 222.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=220 */
%   | else if ( genre(A, E) )
%   | | then return -0.07226964515906605;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( movie(F, B) )
%   | | | then return 9.584557691732698E-4;  // std dev = 5.996, 184.000 (wgt'ed) examples reached here.  /* #neg=135 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420328;  // std dev = 0.000, 375.000 (wgt'ed) examples reached here.  /* #neg=375 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return -0.3625657798975514;  // std dev = 7.45e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.1435837390268444;  // std dev = 0.000, 220.000 (wgt'ed) examples reached here.  /* #pos=220 */
%   | | else if ( genre(A, G) )
%   | | | then return -0.06757147492293746;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | | else return 0.03324771480848307;  // std dev = 5.862, 164.000 (wgt'ed) examples reached here.  /* #neg=115 #pos=49 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.06419184008202557;  // std dev = 2.02e-07, 410.000 (wgt'ed) examples reached here.  /* #neg=410 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.130856
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.688 seconds
Total inference time: 0.854 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.977894
   AUC PR    = 0.859342
   CLL	      = -0.129012
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.817844
   F1        = 0.899796


Total scoring time: 1.607 seconds
Parameter learned model CLL: -0.129012


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 17, 0], 'true,false,true': [1.08e-06, 0, 220], 'true,false,false,true': [5.972, 131, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [3.01e-07, 410, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.675, 4, 220], 'true,false,true': [5.27e-09, 11, 0], 'true,false,false,true': [5.906, 121, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 384, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.218, 20, 0], 'true,false,true': [0.375, 127, 269], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 420, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.156, 3, 220], 'true,false,true': [0.0, 8, 0], 'true,false,false,true': [5.906, 121, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.16e-08, 409, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.296, 13, 0], 'true,false,true': [6.11e-07, 0, 220], 'true,false,false,true': [5.884, 118, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.65e-07, 389, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.539, 1, 220], 'true,false,true': [0.434, 139, 49], 'true,false,false': [0.0, 0, 0], 'false,true': [1.33e-07, 408, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.416, 19, 0], 'true,false,true': [2.83e-07, 0, 220], 'true,false,false,true': [5.862, 115, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.09e-07, 363, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [1.059, 5, 220], 'true,false,true': [5.984, 144, 49], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 419, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.691, 2, 220], 'true,false,true': [0.0, 9, 0], 'true,false,false,true': [5.996, 135, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 375, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true,true,false': 'genre(A, G)'}, {'true,true,true,true': [7.45e-09, 3, 0], 'true,true,true,false': [0.0, 0, 220], 'true,true,false,true': [0.0, 13, 0], 'true,true,false,false': [5.862, 115, 49], 'true,false': [0.0, 0, 0], 'false': [2.02e-07, 410, 0]}]]
[{'': [0.2289506524277015, 2.2096146051076286e-16], 'true': [-3.2653618371328133e-18, 0.2202437500000035], 'true,false': [5.296773121120747e-15, 0.1981172839506182], 'true,false,false': [0.1981172839506182, nan], 'false': [2.2096146051076286e-16, nan]}, {'': [0.18078403854462083, -1.249000902703301e-16], 'true': [0.012520331054072782, 0.19640532092093063], 'true,false': [2.523234146875356e-18, 0.20515570934256097], 'true,false,false': [0.20515570934256097, nan], 'false': [-1.249000902703301e-16, nan]}, {'': [0.14552216889097244, -1.4802973661668754e-17], 'true': [0.0023756246570481726, 0.14090834198647828], 'true,false': [0.14090834198647828, nan], 'false': [-1.4802973661668754e-17, nan]}, {'': [0.13313516622100222, 1.3463829345087473e-16], 'true': [0.005989387662235044, 0.19693946660815934], 'true,false': [0.0, 0.20515570934255983], 'true,false,false': [0.20515570934255983, nan], 'false': [1.3463829345087473e-16, nan]}, {'': [0.11363773944023321, 6.963866786851881e-17], 'true': [0.0067573025458642095, 0.11299457780737297], 'true,false': [1.6956133467002392e-15, 0.20732188317974826], 'true,false,false': [0.20732188317974826, nan], 'false': [6.963866786851881e-17, nan]}, {'': [0.10374485956256045, 4.353815782843751e-17], 'true': [0.0013133229899315658, 0.1880478796293879], 'true,false': [0.1880478796293879, nan], 'false': [4.353815782843751e-17, nan]}, {'': [0.09733175463340048, 1.198918527969866e-16], 'true': [0.009119905344199887, 0.09801553219978955], 'true,false': [3.6334571715005125e-16, 0.2095107079119573], 'true,false,false': [0.2095107079119573, nan], 'false': [1.198918527969866e-16, nan]}, {'': [0.09632670475889044, -6.465260572996138e-17], 'true': [0.004981703380494026, 0.18550672552077951], 'true,false': [0.18550672552077951, nan], 'false': [-6.465260572996138e-17, nan]}, {'': [0.09445455525358744, -1.0125233984581428e-16], 'true': [0.002151125803296651, 0.1865134592096549], 'true,false': [0.0, 0.1953863421550088], 'true,false,false': [0.1953863421550088, nan], 'false': [-1.0125233984581428e-16, nan]}, {'': [0.09113680144869761, 9.910771390556276e-17], 'true': [0.09113680144869761, nan], 'true,true': [0.0034001013781671248, 0.1948146306136445], 'true,true,false': [-3.2025664171879517e-18, 0.20951070791195656], 'true,true,true': [1.850371707708594e-17, -1.9378438248002731e-16]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, E).;true;true
9;true,true;genre(A, F).;true;true
9;true,false;genre(A, G).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048774;  // std dev = 1.49e-08, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | else if ( genre(B, E) )
%   | | then return 0.858148935099509;  // std dev = 1.08e-06, 220.000 (wgt'ed) examples reached here.  /* #pos=220 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.8581489350995122;  // std dev = 1.69e-07, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.14185106490048793;  // std dev = 0.000, 137.000 (wgt'ed) examples reached here.  /* #neg=137 */
%   else return -0.1418510649004873;  // std dev = 3.01e-07, 410.000 (wgt'ed) examples reached here.  /* #neg=410 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( actor(A) )
%   | | then return 0.7194734122109572;  // std dev = 0.000, 220.000 (wgt'ed) examples reached here.  /* #pos=220 */
%   | | else return -0.12544463852839138;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.7194734122109547;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.12544463852839108;  // std dev = 7.74e-08, 107.000 (wgt'ed) examples reached here.  /* #neg=107 */
%   else return -0.12544463852839227;  // std dev = 0.000, 405.000 (wgt'ed) examples reached here.  /* #neg=405 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360635;  // std dev = 1.39e-08, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else if ( director(B), actor(A) )
%   | | then return 0.5553664367462832;  // std dev = 3.37e-07, 269.000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | | else return -0.1123163781936062;  // std dev = 8.16e-08, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
%   else return -0.11231637819360632;  // std dev = 0.000, 379.000 (wgt'ed) examples reached here.  /* #neg=379 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.41751358415831014;  // std dev = 1.74e-07, 89.000 (wgt'ed) examples reached here.  /* #pos=89 */
%   | | else if ( director(A) )
%   | | | then return -0.10159632948783633;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.41751358415830914;  // std dev = 3.86e-07, 131.000 (wgt'ed) examples reached here.  /* #pos=131 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783635;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.41751358415831047;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.10159632948783637;  // std dev = 0.000, 124.000 (wgt'ed) examples reached here.  /* #neg=124 */
%   else return -0.10159632948783566;  // std dev = 2.86e-07, 445.000 (wgt'ed) examples reached here.  /* #neg=445 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.092691276189261;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( genre(B, E) )
%   | | then return 0.3207118471601495;  // std dev = 3.77e-07, 220.000 (wgt'ed) examples reached here.  /* #pos=220 */
%   | | else if ( actor(B) )
%   | | | then return -0.0926912761892608;  // std dev = 7.60e-08, 126.000 (wgt'ed) examples reached here.  /* #neg=126 */
%   | | | else return 0.32071184716014944;  // std dev = 2.98e-08, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   else return -0.09269127618926082;  // std dev = 1.63e-07, 391.000 (wgt'ed) examples reached here.  /* #neg=391 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.2551722425694897;  // std dev = 0.000, 89.000 (wgt'ed) examples reached here.  /* #pos=89 */
%   | | else return 0.24755230986894028;  // std dev = 0.050, 134.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=131 */
%   | else if ( actor(A), director(B) )
%   | | then return 0.2551722425694896;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | else return -0.085457812578507;  // std dev = 0.038, 140.000 (wgt'ed) examples reached here.  /* #neg=140 */
%   else return -0.08518475138839678;  // std dev = 1.30e-07, 391.000 (wgt'ed) examples reached here.  /* #neg=391 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08493589754367568;  // std dev = 0.049, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else if ( genre(B, E) )
%   | | then return 0.2105114831432778;  // std dev = 0.009, 220.000 (wgt'ed) examples reached here.  /* #pos=220 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.20975771563253554;  // std dev = 4.21e-08, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.07924604846046339;  // std dev = 0.050, 146.000 (wgt'ed) examples reached here.  /* #neg=146 */
%   else return -0.07877675473109143;  // std dev = 2.20e-07, 390.000 (wgt'ed) examples reached here.  /* #neg=390 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.17754853856102376;  // std dev = 0.009, 269.000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.07401183953419967;  // std dev = 0.059, 139.000 (wgt'ed) examples reached here.  /* #neg=139 */
%   else return -0.0732462257633377;  // std dev = 0.000, 394.000 (wgt'ed) examples reached here.  /* #neg=394 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.15258787594584952;  // std dev = 0.000, 89.000 (wgt'ed) examples reached here.  /* #pos=89 */
%   | | else if ( actor(A) )
%   | | | then return 0.15357578039898445;  // std dev = 0.000, 131.000 (wgt'ed) examples reached here.  /* #pos=131 */
%   | | | else return -0.09234815766927228;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(A, E) )
%   | | then return -0.06796957775356824;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.15268536724040951;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.06857314867413015;  // std dev = 0.031, 130.000 (wgt'ed) examples reached here.  /* #neg=130 */
%   else return -0.06842697784420333;  // std dev = 0.000, 393.000 (wgt'ed) examples reached here.  /* #neg=393 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( genre(A, E) )
%   | | then return -0.08489347281283298;  // std dev = 1.86e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0.13434429256531577;  // std dev = 0.006, 220.000 (wgt'ed) examples reached here.  /* #pos=220 */
%   | else if ( genre(A, F) )
%   | | then return -0.06378812224285169;  // std dev = 4.56e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.1339613654489427;  // std dev = 4.21e-08, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.06476831337347327;  // std dev = 0.051, 132.000 (wgt'ed) examples reached here.  /* #neg=132 */
%   else return -0.06419184008202555;  // std dev = 2.05e-07, 414.000 (wgt'ed) examples reached here.  /* #neg=414 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063853
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.623 seconds
Total inference time: 0.907 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064258
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.609 seconds
Refined model CLL: -0.064258


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063853
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 7.527 seconds
Total inference time: 0.907 seconds
AUC ROC: 1.0
Total revision time: 7.527
Best scored revision CLL: -0.064258


Dataset: 4_cora_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 00:13:09
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063853, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 7.527, 'Inference time': 0.907, 'parameter_0.8': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.130856, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 1.688, 'Inference time': 0.854}}


Amount of data: 1.0
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;haswordauthor(E, C).;true;true
7;true,true,true;author(F, E), title(F, D).;false;false
7;true,true,false;title(G, D), venue(G, B).;false;false
7;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
7;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
7;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, B).;false;true
8;true,true,false;title(F, D), venue(F, A).;false;false
8;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
8;true,false,false;haswordvenue(A, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
8;false,true;haswordauthor(M, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;true,true;author(F, E), venue(F, B).;true;true
9;true,true,true;samebib(F, G), venue(G, A).;false;false
9;true,true,false;author(H, E), venue(H, A).;false;false
9;true,false;haswordtitle(I, C).;true;true
9;true,false,true;title(J, I), venue(J, A).;false;false
9;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048774;  // std dev = 1.49e-08, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995086;  // std dev = 1.07e-06, 278.000 (wgt'ed) examples reached here.  /* #pos=278 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.11692086492407455;  // std dev = 6.613, 228.000 (wgt'ed) examples reached here.  /* #neg=169 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048754;  // std dev = 1.52e-07, 482.000 (wgt'ed) examples reached here.  /* #neg=482 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7134382832771051;  // std dev = 1.191, 280.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=278 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.1164599771317201;  // std dev = 6.549, 216.000 (wgt'ed) examples reached here.  /* #neg=157 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839235;  // std dev = 0.000, 514.000 (wgt'ed) examples reached here.  /* #neg=514 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12373067505402797;  // std dev = 0.153, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else if ( movie(E, A) )
%   | | then return 0.3562229669278575;  // std dev = 0.372, 495.000 (wgt'ed) examples reached here.  /* #neg=158 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.1123163781936058;  // std dev = 0.000, 504.000 (wgt'ed) examples reached here.  /* #neg=504 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4608993023493206;  // std dev = 1.160, 281.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=278 */
%   | else if ( genre(A, E) )
%   | | then return -0.10055922257555422;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.04101124480967554;  // std dev = 6.560, 218.000 (wgt'ed) examples reached here.  /* #neg=159 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783542;  // std dev = 1.54e-08, 492.000 (wgt'ed) examples reached here.  /* #neg=492 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12025522600149555;  // std dev = 0.319, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else if ( genre(B, E) )
%   | | then return 0.3569310125152182;  // std dev = 0.000, 278.000 (wgt'ed) examples reached here.  /* #pos=278 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.03000214966167338;  // std dev = 6.576, 221.000 (wgt'ed) examples reached here.  /* #neg=162 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926153;  // std dev = 0.000, 515.000 (wgt'ed) examples reached here.  /* #neg=515 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.27201134865857146;  // std dev = 1.085, 282.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=278 */
%   | else if ( movie(E, A) )
%   | | then return 0.018524205721997294;  // std dev = 0.434, 231.000 (wgt'ed) examples reached here.  /* #neg=172 #pos=59 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 1.38e-07, 467.000 (wgt'ed) examples reached here.  /* #neg=467 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.10078606991803331;  // std dev = 0.231, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else if ( genre(B, E) )
%   | | then return 0.22834994553257276;  // std dev = 2.60e-07, 278.000 (wgt'ed) examples reached here.  /* #pos=278 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.018721932529556097;  // std dev = 6.587, 223.000 (wgt'ed) examples reached here.  /* #neg=164 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109212;  // std dev = 0.000, 510.000 (wgt'ed) examples reached here.  /* #neg=510 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18192340362022208;  // std dev = 1.091, 283.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=278 */
%   | else if ( movie(E, B) )
%   | | then return 0.014243816099495602;  // std dev = 6.571, 235.000 (wgt'ed) examples reached here.  /* #neg=176 #pos=59 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.0732462257633369;  // std dev = 1.56e-07, 501.000 (wgt'ed) examples reached here.  /* #neg=501 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1551885500377319;  // std dev = 1.120, 283.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=278 */
%   | else if ( genre(A, E) )
%   | | then return -0.07728226510892336;  // std dev = 3.73e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.022403327069558932;  // std dev = 6.543, 215.000 (wgt'ed) examples reached here.  /* #neg=156 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420355;  // std dev = 0.000, 505.000 (wgt'ed) examples reached here.  /* #neg=505 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.1439190749712553;  // std dev = 0.000, 278.000 (wgt'ed) examples reached here.  /* #pos=278 */
%   | | else if ( genre(A, G) )
%   | | | then return -0.07194819961814727;  // std dev = 3.73e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | | else return 0.043230586188858736;  // std dev = 6.429, 197.000 (wgt'ed) examples reached here.  /* #neg=138 #pos=59 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.0641918400820254;  // std dev = 2.45e-07, 488.000 (wgt'ed) examples reached here.  /* #neg=488 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.128596
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.825 seconds
Total inference time: 0.872 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.978805
   AUC PR    = 0.865091
   CLL	      = -0.127339
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.824926
   F1        = 0.904065


Total scoring time: 1.992 seconds
Parameter learned model CLL: -0.127339


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [1.49e-08, 24, 0], 'true,false,true': [1.07e-06, 0, 278], 'true,false,false,true': [6.613, 169, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.52e-07, 482, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.191, 2, 278], 'true,false,true': [0.0, 23, 0], 'true,false,false,true': [6.549, 157, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 514, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.153, 20, 0], 'true,false,true': [0.372, 158, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 504, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.16, 3, 278], 'true,false,true': [0.0, 17, 0], 'true,false,false,true': [6.56, 159, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.54e-08, 492, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.319, 21, 0], 'true,false,true': [0.0, 0, 278], 'true,false,false,true': [6.576, 162, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 515, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [1.085, 4, 278], 'true,false,true': [0.434, 172, 59], 'true,false,false': [0.0, 0, 0], 'false,true': [1.38e-07, 467, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.231, 14, 0], 'true,false,true': [2.6e-07, 0, 278], 'true,false,false,true': [6.587, 164, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 510, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [1.091, 5, 278], 'true,false,true': [6.571, 176, 59], 'true,false,false': [0.0, 0, 0], 'false,true': [1.56e-07, 501, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [1.12, 5, 278], 'true,false,true': [3.73e-09, 16, 0], 'true,false,false,true': [6.543, 156, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 505, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true,true,false': 'genre(A, G)'}, {'true,true,true,true': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 278], 'true,true,false,true': [3.73e-09, 13, 0], 'true,true,false,false': [6.429, 138, 59], 'true,false': [0.0, 0, 0], 'false': [2.45e-07, 488, 0]}]]
[{'': [0.2315450338198673, 4.791003923693622e-17], 'true': [9.25185853854297e-18, 0.22244137543158254], 'true,false': [4.089454594302735e-15, 0.19180901815943432], 'true,false,false': [0.19180901815943432, nan], 'false': [4.791003923693622e-17, nan]}, {'': [0.18328341650317215, -1.5206167496811483e-16], 'true': [0.005062766593498529, 0.18452153511620817], 'true,false': [-2.413528314402514e-18, 0.19853823731138756], 'true,false,false': [0.19853823731138756, nan], 'false': [-1.5206167496811483e-16, nan]}, {'': [0.1416251499917365, -8.8112938462314e-18], 'true': [0.001172575555360464, 0.13835415688405], 'true,false': [0.13835415688405, nan], 'false': [-8.8112938462314e-18, nan]}, {'': [0.13250325481768813, 2.38291771139058e-16], 'true': [0.0047926068868714075, 0.18446033960189914], 'true,false': [0.0, 0.1973950004208372], 'true,false,false': [0.1973950004208372, nan], 'false': [2.38291771139058e-16, nan]}, {'': [0.11295547041425501, -3.966622068563666e-17], 'true': [0.004850608293563811, 0.11304304565270716], 'true,false': [-1.5591045640779176e-15, 0.1956962388157485], 'true,false,false': [0.1956962388157485, nan], 'false': [-3.966622068563666e-17, nan]}, {'': [0.10294574498502078, 4.0890441163924396e-17], 'true': [0.0041754733240361944, 0.188200576086311], 'true,false': [0.188200576086311, nan], 'false': [4.0890441163924396e-17, nan]}, {'': [0.09638534804798207, -4.6150447298143765e-17], 'true': [0.003802357347258141, 0.09746063072851184], 'true,false': [2.428113665367249e-16, 0.1945745943011136], 'true,false,false': [0.1945745943011136, nan], 'false': [-4.6150447298143765e-17, nan]}, {'': [0.0926283119593519, 4.875230846657374e-17], 'true': [0.004202805871657795, 0.18375428358893922], 'true,false': [0.18375428358893922, nan], 'false': [4.875230846657374e-17, nan]}, {'': [0.09084199941262514, -1.1959630205863073e-16], 'true': [0.004430080052287204, 0.1859622732834836], 'true,false': [8.673617379884035e-19, 0.19911303407247222], 'true,false,false': [0.19911303407247222, nan], 'false': [-1.1959630205863073e-16, nan]}, {'': [0.08787382672336469, 1.2285254780688208e-16], 'true': [0.08787382672336469, nan], 'true,true': [-1.5974432008995057e-16, 0.19757968156839162], 'true,true,false': [1.0675221390626506e-18, 0.20979669664252923], 'true,true,true': [nan, -1.5974432008995057e-16]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, E).;true;true
9;true,false;genre(A, G).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995086;  // std dev = 1.07e-06, 278.000 (wgt'ed) examples reached here.  /* #pos=278 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.8581489350995125;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.14185106490048813;  // std dev = 0.000, 159.000 (wgt'ed) examples reached here.  /* #neg=159 */
%   else return -0.14185106490048785;  // std dev = 0.000, 511.000 (wgt'ed) examples reached here.  /* #neg=511 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.7194734122109551;  // std dev = 0.000, 111.000 (wgt'ed) examples reached here.  /* #pos=111 */
%   | | else return 0.6997092472813811;  // std dev = 0.128, 171.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=167 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.7194734122109543;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.1254446385283913;  // std dev = 4.71e-08, 152.000 (wgt'ed) examples reached here.  /* #neg=152 */
%   else return -0.1254446385283923;  // std dev = 0.000, 505.000 (wgt'ed) examples reached here.  /* #neg=505 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14025313150122787;  // std dev = 0.237, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | else if ( director(B), actor(A) )
%   | | then return 0.5577822191545396;  // std dev = 0.045, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | | else return -0.11231637819360629;  // std dev = 8.82e-08, 158.000 (wgt'ed) examples reached here.  /* #neg=158 */
%   else return -0.11231637819360576;  // std dev = 0.000, 517.000 (wgt'ed) examples reached here.  /* #neg=517 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.41692619289568184;  // std dev = 1.79e-07, 111.000 (wgt'ed) examples reached here.  /* #pos=111 */
%   | | else return 0.4143733360995086;  // std dev = 0.067, 169.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=167 */
%   | else if ( genre(A, E) )
%   | | then return -0.09907464647128926;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.4169261928956809;  // std dev = 1.03e-07, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.10159632948783646;  // std dev = 0.000, 162.000 (wgt'ed) examples reached here.  /* #neg=162 */
%   else return -0.10159632948783541;  // std dev = 3.45e-07, 496.000 (wgt'ed) examples reached here.  /* #neg=496 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( actor(B) )
%   | | then return -0.09057589072324003;  // std dev = 9.13e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return -0.2752750122757523;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.3232439979787634;  // std dev = 0.040, 278.000 (wgt'ed) examples reached here.  /* #pos=278 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.32031365226348985;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.09269127618926067;  // std dev = 8.02e-08, 170.000 (wgt'ed) examples reached here.  /* #neg=170 */
%   else return -0.09269127618926143;  // std dev = 0.000, 495.000 (wgt'ed) examples reached here.  /* #neg=495 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.25655061682497843;  // std dev = 0.037, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.0879333871586539;  // std dev = 0.275, 192.000 (wgt'ed) examples reached here.  /* #neg=192 */
%   else return -0.08518475138839678;  // std dev = 1.38e-07, 470.000 (wgt'ed) examples reached here.  /* #neg=470 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( female(B) )
%   | | then return -0.07690702334676626;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return -0.12092334206958867;  // std dev = 0.152, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(B, E) )
%   | | then return 0.21103722727333418;  // std dev = 0.030, 278.000 (wgt'ed) examples reached here.  /* #pos=278 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.20929254811937292;  // std dev = 2.11e-08, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.07857751434986988;  // std dev = 0.000, 184.000 (wgt'ed) examples reached here.  /* #neg=184 */
%   else return -0.07877675473109214;  // std dev = 0.000, 512.000 (wgt'ed) examples reached here.  /* #neg=512 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.17781092036864252;  // std dev = 0.028, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.07362218796211656;  // std dev = 0.117, 173.000 (wgt'ed) examples reached here.  /* #neg=173 */
%   else return -0.073246225763337;  // std dev = 1.28e-07, 482.000 (wgt'ed) examples reached here.  /* #neg=482 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.1517458103953544;  // std dev = 0.000, 111.000 (wgt'ed) examples reached here.  /* #pos=111 */
%   | | else if ( actor(A) )
%   | | | then return 0.15464081536262864;  // std dev = 0.000, 167.000 (wgt'ed) examples reached here.  /* #pos=167 */
%   | | | else return -0.17861261534407907;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(A, E) )
%   | | then return -0.06517610914953197;  // std dev = 0.006, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.15234855524158164;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.06824073698762058;  // std dev = 4.71e-08, 168.000 (wgt'ed) examples reached here.  /* #neg=168 */
%   else return -0.06842697784420354;  // std dev = 0.000, 495.000 (wgt'ed) examples reached here.  /* #neg=495 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.13322738657938163;  // std dev = 2.98e-08, 111.000 (wgt'ed) examples reached here.  /* #pos=111 */
%   | | else return 0.12871711413382197;  // std dev = 0.044, 171.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=167 */
%   | else if ( genre(A, E) )
%   | | then return -0.061566050113982466;  // std dev = 0.005, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.13369834749796977;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.06402749420950843;  // std dev = 6.32e-08, 155.000 (wgt'ed) examples reached here.  /* #neg=155 */
%   else return -0.06419184008202536;  // std dev = 2.45e-07, 516.000 (wgt'ed) examples reached here.  /* #neg=516 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064029
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.807 seconds
Total inference time: 0.867 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064644
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.892 seconds
Refined model CLL: -0.064644


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064029
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 8.516 seconds
Total inference time: 0.867 seconds
AUC ROC: 1.0
Total revision time: 8.516
Best scored revision CLL: -0.064644


Dataset: 4_cora_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 00:13:20
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.064029, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 8.516, 'Inference time': 0.867, 'parameter_1.0': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.128596, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 1.825, 'Inference time': 0.872}}


Starting fold 5

Target train facts examples: 915
Target train pos examples: 337
Target train neg examples: 12165

Target test facts examples: 163
Target test pos	 examples: 45
Target test neg examples: 2071

Amount of data: 0.2
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;haswordauthor(E, C).;true;true
7;true,true,true;author(F, E), title(F, D).;false;false
7;true,true,false;title(G, D), venue(G, B).;false;false
7;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
7;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
7;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, B).;false;true
8;true,true,false;title(F, D), venue(F, A).;false;false
8;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
8;true,false,false;haswordvenue(A, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
8;false,true;haswordauthor(M, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;true,true;author(F, E), venue(F, B).;true;true
9;true,true,true;samebib(F, G), venue(G, A).;false;false
9;true,true,false;author(H, E), venue(H, A).;false;false
9;true,false;haswordtitle(I, C).;true;true
9;true,false,true;title(J, I), venue(J, A).;false;false
9;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995125;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.14847151574467365;  // std dev = 2.527, 31.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=9 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048763;  // std dev = 8.94e-08, 100.000 (wgt'ed) examples reached here.  /* #neg=100 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109544;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.09624037958807818;  // std dev = 2.586, 35.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=9 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( movie(E, A) )
%   | | then return 0.3547693258728017;  // std dev = 0.362, 97.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=67 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.1123163781936062;  // std dev = 8.02e-08, 100.000 (wgt'ed) examples reached here.  /* #neg=100 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.46695034091830684;  // std dev = 1.93e-07, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else if ( genre(A, E) )
%   | | then return -0.1015963294878363;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.02575991564889618;  // std dev = 2.586, 35.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=9 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.1015963294878363;  // std dev = 2.28e-09, 104.000 (wgt'ed) examples reached here.  /* #neg=104 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926096;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.35449424500157406;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.026693549267468274;  // std dev = 2.668, 43.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=9 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926093;  // std dev = 5.58e-08, 104.000 (wgt'ed) examples reached here.  /* #neg=104 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2596171377710185;  // std dev = 0.772, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else if ( movie(E, A) )
%   | | then return 0.014529950078692832;  // std dev = 0.415, 39.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=9 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839682;  // std dev = 5.16e-08, 89.000 (wgt'ed) examples reached here.  /* #neg=89 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.13538529927706935;  // std dev = 0.219, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(B, E) )
%   | | then return 0.22909058261414994;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.05380980271026866;  // std dev = 2.717, 50.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=9 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.0787767547310916;  // std dev = 5.67e-08, 98.000 (wgt'ed) examples reached here.  /* #neg=98 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.19115170786882935;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else if ( movie(E, B) )
%   | | then return 0.011797589357450308;  // std dev = 2.615, 40.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=9 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.07324622576333707;  // std dev = 0.000, 106.000 (wgt'ed) examples reached here.  /* #neg=106 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.16332471788413372;  // std dev = 2.11e-08, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else if ( genre(A, E) )
%   | | then return -0.07706159603247197;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.006855741668238002;  // std dev = 2.650, 41.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=9 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420265;  // std dev = 4.66e-09, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.1422141562049417;  // std dev = 5.37e-08, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else if ( genre(A, G) )
%   | | | then return -0.07175627383886196;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.024830425593585115;  // std dev = 2.598, 36.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=9 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.06419184008202626;  // std dev = 0.000, 109.000 (wgt'ed) examples reached here.  /* #neg=109 */


Results
   AUC ROC   = 0.971565
   AUC PR    = 0.823063
   CLL	      = -0.120033
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.777778
   F1        = 0.875


Total learning time: 0.874 seconds
Total inference time: 0.9 seconds
AUC ROC: 0.971565


Results scoring model
   AUC ROC   = 0.984044
   AUC PR    = 0.898968
   CLL	      = -0.115204
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.865672
   F1        = 0.928


Total scoring time: 0.954 seconds
Parameter learned model CLL: -0.115204


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 2, 0], 'true,false,true': [0.0, 0, 58], 'true,false,false,true': [2.527, 22, 9], 'true,false,false,false': [0.0, 0, 0], 'false,true': [8.94e-08, 100, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 58], 'true,false,true': [0.0, 4, 0], 'true,false,false,true': [2.586, 26, 9], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 95, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [2.63e-09, 3, 0], 'true,false,true': [0.362, 30, 67], 'true,false,false': [0.0, 0, 0], 'false,true': [8.02e-08, 100, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.93e-07, 0, 58], 'true,false,true': [0.0, 3, 0], 'true,false,false,true': [2.586, 26, 9], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.28e-09, 104, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 2, 0], 'true,false,true': [0.0, 0, 58], 'true,false,false,true': [2.668, 34, 9], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.58e-08, 104, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.772, 2, 58], 'true,false,true': [0.415, 30, 9], 'true,false,false': [0.0, 0, 0], 'false,true': [5.16e-08, 89, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.219, 5, 0], 'true,false,true': [0.0, 0, 58], 'true,false,false,true': [2.717, 41, 9], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.67e-08, 98, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 58], 'true,false,true': [2.615, 31, 9], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 106, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [2.11e-08, 0, 58], 'true,false,true': [0.0, 6, 0], 'true,false,false,true': [2.65, 32, 9], 'true,false,false,false': [0.0, 0, 0], 'false,true': [4.66e-09, 92, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true,true,false': 'genre(A, G)'}, {'true,true,true,true': [0.0, 0, 0], 'true,true,true,false': [5.37e-08, 0, 58], 'true,true,false,true': [0.0, 3, 0], 'true,true,false,false': [2.598, 27, 9], 'true,false': [0.0, 0, 0], 'false': [0.0, 109, 0]}]]
[{'': [0.19417944692669875, 7.993605777301127e-17], 'true': [0.0, 0.1860876152001001], 'true,false': [-3.675221047035001e-16, 0.2060353798126952], 'true,false,false': [0.2060353798126952, nan], 'false': [7.993605777301127e-17, nan]}, {'': [0.17106042719900263, -1.402386978473882e-17], 'true': [-1.2250736823450003e-16, 0.17595203928920414], 'true,false': [0.0, 0.1910204081632656], 'true,false,false': [0.1910204081632656, nan], 'false': [-1.402386978473882e-17, nan]}, {'': [0.13362711545053357, 6.439293542825907e-17], 'true': [2.3129646346357427e-18, 0.13121484118730536], 'true,false': [0.13121484118730536, nan], 'false': [6.439293542825907e-17, nan]}, {'': [0.11880574742947884, 4.270088556250602e-18], 'true': [6.431636832311252e-16, 0.1771192536291915], 'true,false': [-1.1564823173178713e-18, 0.19102040816326554], 'true,false,false': [0.19102040816326554, nan], 'false': [4.270088556250602e-18, nan]}, {'': [0.10547053757251673, 2.9890619893754213e-17], 'true': [0.0, 0.10598301122328786], 'true,false': [-1.2250736823450003e-16, 0.16549486208761496], 'true,false,false': [0.16549486208761496, nan], 'false': [2.9890619893754213e-17, nan]}, {'': [0.08833460397204172, 2.993859841685815e-17], 'true': [0.009921855674507112, 0.17256491676441943], 'true,false': [0.17256491676441943, nan], 'false': [2.993859841685815e-17, nan]}, {'': [0.08705948035057126, 3.285353848380565e-17], 'true': [0.009628086864885524, 0.08823170621128629], 'true,false': [-1.4547749977846878e-16, 0.14759999999999987], 'true,false,false': [0.14759999999999987, nan], 'false': [3.285353848380565e-17, nan]}, {'': [0.07752516468745416, -3.142140635731575e-18], 'true': [-3.062684205862501e-17, 0.17089850868869455], 'true,false': [0.17089850868869455, nan], 'false': [-3.142140635731575e-18, nan]}, {'': [0.07507964082254573, 2.1118372751022e-17], 'true': [7.656710514656252e-18, 0.15000400249534598], 'true,false': [-1.1564823173178713e-18, 0.1713265913146933], 'true,false,false': [0.1713265913146933, nan], 'false': [2.1118372751022e-17, nan]}, {'': [0.07359913488748054, -1.6806128354417508e-17], 'true': [0.07359913488748054, nan], 'true,true': [4.976861834526564e-17, 0.17373933660406551], 'true,true,false': [0.0, 0.18750000000000017], 'true,true,true': [nan, 4.976861834526564e-17]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, E).;true;true
9;true,false;genre(A, G).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995125;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.1418510649004877;  // std dev = 3.65e-08, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.14185106490048763;  // std dev = 8.16e-08, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109544;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.7194734122109543;  // std dev = 2.98e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   else return -0.12544463852839147;  // std dev = 0.000, 80.000 (wgt'ed) examples reached here.  /* #neg=80 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( director(B), actor(A) )
%   | | then return 0.5553664367462837;  // std dev = 2.06e-07, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | | else return -0.1123163781936064;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   else return -0.1123163781936062;  // std dev = 8.30e-08, 104.000 (wgt'ed) examples reached here.  /* #neg=104 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4175135841583103;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783627;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( actor(B) )
%   | | | then return -0.10159632948783635;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | | else return 0.4175135841583102;  // std dev = 1.49e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.10159632948783626;  // std dev = 4.71e-08, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926098;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.3207118471601497;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else if ( actor(B) )
%   | | | then return -0.09269127618926098;  // std dev = 0.000, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | | | else return 0.3207118471601497;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.09269127618926083;  // std dev = 7.45e-08, 120.000 (wgt'ed) examples reached here.  /* #neg=120 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.25517224256948967;  // std dev = 0.000, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.08777367719986569;  // std dev = 0.105, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
%   else return -0.08518475138839682;  // std dev = 5.27e-08, 94.000 (wgt'ed) examples reached here.  /* #neg=94 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.25018133542256277;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.20975771563253562;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else if ( actor(B) )
%   | | | then return -0.07858907862247724;  // std dev = 0.000, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | | | else return 0.2097577156325356;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.07877675473109162;  // std dev = 4.94e-08, 87.000 (wgt'ed) examples reached here.  /* #neg=87 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17709649774527733;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else if ( actor(B) )
%   | | then return -0.07188273271849265;  // std dev = 0.020, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | | else return 0.17709649774527736;  // std dev = 7.45e-09, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.07324622576333707;  // std dev = 0.000, 105.000 (wgt'ed) examples reached here.  /* #neg=105 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.15274385809367078;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else if ( genre(A, E) )
%   | | then return -0.05820932711588866;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( actor(B) )
%   | | | then return -0.06836085594961523;  // std dev = 9.86e-09, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | | else return 0.15274385809367097;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.06842697784420265;  // std dev = 4.89e-08, 102.000 (wgt'ed) examples reached here.  /* #neg=102 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13400703000801098;  // std dev = 3.94e-08, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else if ( genre(A, E) )
%   | | then return -0.05509909544063425;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( actor(B) )
%   | | | then return -0.06413349747898398;  // std dev = 0.000, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | | | else return 0.13400703000801117;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.06419184008202626;  // std dev = 0.000, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063969
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.367 seconds
Total inference time: 0.862 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.066289
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.937 seconds
Refined model CLL: -0.066289


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063969
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 4.132 seconds
Total inference time: 0.862 seconds
AUC ROC: 1.0
Total revision time: 4.132
Best scored revision CLL: -0.066289


Dataset: 4_cora_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 00:13:27
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063969, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 4.132, 'Inference time': 0.862, 'parameter_0.2': {'AUC ROC': 0.971565, 'AUC PR': 0.823063, 'CLL': -0.120033, 'Precision': [1.0, 0.5], 'Recall': 0.777778, 'F1': 0.875, 'Learning time': 0.874, 'Inference time': 0.9}}


Amount of data: 0.4
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;haswordauthor(E, C).;true;true
7;true,true,true;author(F, E), title(F, D).;false;false
7;true,true,false;title(G, D), venue(G, B).;false;false
7;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
7;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
7;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, B).;false;true
8;true,true,false;title(F, D), venue(F, A).;false;false
8;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
8;true,false,false;haswordvenue(A, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
8;false,true;haswordauthor(M, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;true,true;author(F, E), venue(F, B).;true;true
9;true,true,true;samebib(F, G), venue(G, A).;false;false
9;true,true,false;author(H, E), venue(H, A).;false;false
9;true,false;haswordtitle(I, C).;true;true
9;true,false,true;title(J, I), venue(J, A).;false;false
9;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995106;  // std dev = 6.64e-07, 121.000 (wgt'ed) examples reached here.  /* #pos=121 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.03148226843284571;  // std dev = 3.278, 75.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=13 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048832;  // std dev = 0.000, 185.000 (wgt'ed) examples reached here.  /* #neg=185 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7125478544180098;  // std dev = 0.841, 122.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=121 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.012809825016420058;  // std dev = 3.307, 82.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=13 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839172;  // std dev = 0.000, 215.000 (wgt'ed) examples reached here.  /* #neg=215 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.16297727831225567;  // std dev = 0.170, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( movie(E, A) )
%   | | then return 0.3924128391683787;  // std dev = 0.332, 182.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=134 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360667;  // std dev = 0.000, 210.000 (wgt'ed) examples reached here.  /* #neg=210 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4539163926347132;  // std dev = 0.656, 122.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=121 */
%   | else if ( genre(A, E) )
%   | | then return -0.09706471337376074;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.03914832735430081;  // std dev = 3.296, 79.000 (wgt'ed) examples reached here.  /* #neg=66 #pos=13 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783655;  // std dev = 0.000, 218.000 (wgt'ed) examples reached here.  /* #neg=218 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1369707494342499;  // std dev = 0.289, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else if ( genre(B, E) )
%   | | then return 0.3504581382549457;  // std dev = 1.33e-07, 121.000 (wgt'ed) examples reached here.  /* #pos=121 */
%   | | else if ( movie(F, A) )
%   | | | then return -4.5897089187212374E-4;  // std dev = 3.231, 66.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=13 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926051;  // std dev = 6.14e-08, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2710398520918665;  // std dev = 0.528, 122.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=121 */
%   | else if ( movie(E, A) )
%   | | then return -0.046302760586872035;  // std dev = 0.350, 90.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=13 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 7.60e-08, 196.000 (wgt'ed) examples reached here.  /* #neg=196 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.13361510838114485;  // std dev = 0.351, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else if ( genre(B, E) )
%   | | then return 0.22469300735528136;  // std dev = 1.79e-07, 121.000 (wgt'ed) examples reached here.  /* #pos=121 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.009568372451702232;  // std dev = 3.264, 72.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=13 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109146;  // std dev = 7.15e-08, 209.000 (wgt'ed) examples reached here.  /* #neg=209 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18412907482963964;  // std dev = 0.467, 122.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=121 */
%   | else if ( movie(E, B) )
%   | | then return -0.021324489832967225;  // std dev = 3.282, 85.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=13 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.07324622576333675;  // std dev = 9.19e-08, 165.000 (wgt'ed) examples reached here.  /* #neg=165 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1575215130490758;  // std dev = 0.479, 122.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=121 */
%   | else if ( genre(A, E) )
%   | | then return -0.06503698870497777;  // std dev = 3.23e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.022912619165233374;  // std dev = 3.300, 80.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=13 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420261;  // std dev = 4.47e-09, 189.000 (wgt'ed) examples reached here.  /* #neg=189 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.1412595666670611;  // std dev = 0.000, 121.000 (wgt'ed) examples reached here.  /* #pos=121 */
%   | | else if ( genre(A, G) )
%   | | | then return -0.06119238670251437;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return -0.00864359825549351;  // std dev = 3.278, 75.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=13 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.06419184008202626;  // std dev = 0.000, 191.000 (wgt'ed) examples reached here.  /* #neg=191 */


Results
   AUC ROC   = 0.971565
   AUC PR    = 0.823063
   CLL	      = -0.105666
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.777778
   F1        = 0.875


Total learning time: 1.129 seconds
Total inference time: 0.938 seconds
AUC ROC: 0.971565


Results scoring model
   AUC ROC   = 0.988038
   AUC PR    = 0.925954
   CLL	      = -0.101789
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.902985
   F1        = 0.94902


Total scoring time: 1.18 seconds
Parameter learned model CLL: -0.101789


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 7, 0], 'true,false,true': [6.64e-07, 0, 121], 'true,false,false,true': [3.278, 62, 13], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 185, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.841, 1, 121], 'true,false,true': [5.27e-09, 12, 0], 'true,false,false,true': [3.307, 69, 13], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 215, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.17, 9, 0], 'true,false,true': [0.332, 48, 134], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 210, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.656, 1, 121], 'true,false,true': [0.0, 8, 0], 'true,false,false,true': [3.296, 66, 13], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 218, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.289, 12, 0], 'true,false,true': [1.33e-07, 0, 121], 'true,false,false,true': [3.231, 53, 13], 'true,false,false,false': [0.0, 0, 0], 'false,true': [6.14e-08, 206, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.528, 1, 121], 'true,false,true': [0.35, 77, 13], 'true,false,false': [0.0, 0, 0], 'false,true': [7.6e-08, 196, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.351, 12, 0], 'true,false,true': [1.79e-07, 0, 121], 'true,false,false,true': [3.264, 59, 13], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.15e-08, 209, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.467, 1, 121], 'true,false,true': [3.282, 72, 13], 'true,false,false': [0.0, 0, 0], 'false,true': [9.19e-08, 165, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.479, 1, 121], 'true,false,true': [3.23e-09, 7, 0], 'true,false,false,true': [3.3, 67, 13], 'true,false,false,false': [0.0, 0, 0], 'false,true': [4.47e-09, 189, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true,true,false': 'genre(A, G)'}, {'true,true,true,true': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 121], 'true,true,false,true': [0.0, 9, 0], 'true,true,false,false': [3.278, 62, 13], 'true,false': [0.0, 0, 0], 'false': [0.0, 191, 0]}]]
[{'': [0.22436846319979092, -2.1124243495570547e-16], 'true': [-7.93016446160826e-18, 0.2162640566430699], 'true,false': [3.640797489018695e-15, 0.14328888888888835], 'true,false,false': [0.14328888888888835, nan], 'false': [-2.1124243495570547e-16, nan]}, {'': [0.181347130490229, -4.337615538070379e-17], 'true': [0.005803565439953474, 0.11850121781642643], 'true,false': [2.3129646346357427e-18, 0.13340273646638848], 'true,false,false': [0.13340273646638848, nan], 'false': [-4.337615538070379e-17, nan]}, {'': [0.11880768642582636, -5.2867763077388404e-17], 'true': [0.0032081585010397015, 0.10998946783690296], 'true,false': [0.10998946783690296, nan], 'false': [-5.2867763077388404e-17, nan]}, {'': [0.11449553218413831, -8.148425868808489e-17], 'true': [0.0035236131830987823, 0.12511639562157764], 'true,false': [-3.469446951953614e-18, 0.13747796827431433], 'true,false,false': [0.13747796827431433, nan], 'false': [-8.148425868808489e-17, nan]}, {'': [0.08679475220645513, 1.832406933847346e-17], 'true': [0.006936997585497188, 0.08394821719687252], 'true,false': [1.4680635036365707e-16, 0.15817263544536297], 'true,false,false': [0.15817263544536297, nan], 'false': [1.832406933847346e-17, nan]}, {'': [0.07788398311490834, 2.945489657168783e-17], 'true': [0.0022816230692236173, 0.1224135373527795], 'true,false': [0.1224135373527795, nan], 'false': [2.945489657168783e-17, nan]}, {'': [0.06869443212155317, 2.4435530685529762e-17], 'true': [0.010265863179043393, 0.0680309989594586], 'true,false': [2.642514306545827e-16, 0.1479552469135805], 'true,false,false': [0.1479552469135805, nan], 'false': [2.4435530685529762e-17, nan]}, {'': [0.06329812029816383, 5.113754537667388e-17], 'true': [0.001790457365238227, 0.1267016278574889], 'true,false': [0.1267016278574889, nan], 'false': [5.113754537667388e-17, nan]}, {'': [0.061458850278342136, 1.997226605145784e-17], 'true': [0.0018845031271382871, 0.12527496353614875], 'true,false': [1.4869058365515489e-18, 0.1360937500000003], 'true,false,false': [0.1360937500000003, nan], 'false': [1.997226605145784e-17, nan]}, {'': [0.058381657692816495, -4.068880194961306e-18], 'true': [0.058381657692816495, nan], 'true,true': [-7.340317518182853e-17, 0.12820067010174233], 'true,true,false': [-7.709882115452476e-19, 0.14328888888888897], 'true,true,true': [nan, -7.340317518182853e-17]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, E).;true;true
9;true,false;genre(A, G).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995106;  // std dev = 6.64e-07, 121.000 (wgt'ed) examples reached here.  /* #pos=121 */
%   | | else if ( actor(B) )
%   | | | then return -0.14185106490048766;  // std dev = 6.66e-08, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else return -0.1418510649004884;  // std dev = 0.000, 202.000 (wgt'ed) examples reached here.  /* #neg=202 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109553;  // std dev = 0.000, 121.000 (wgt'ed) examples reached here.  /* #pos=121 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( actor(B) )
%   | | | then return -0.1254446385283916;  // std dev = 0.000, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   | | | else return 0.7194734122109542;  // std dev = 4.21e-08, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else return -0.12544463852839172;  // std dev = 0.000, 215.000 (wgt'ed) examples reached here.  /* #neg=215 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.5553664367462834;  // std dev = 4.92e-07, 134.000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.12214134842748033;  // std dev = 0.379, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
%   else return -0.11231637819360663;  // std dev = 0.000, 204.000 (wgt'ed) examples reached here.  /* #neg=204 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.4175135841583106;  // std dev = 0.000, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | | else if ( actor(A) )
%   | | | then return 0.4175135841583106;  // std dev = 0.000, 75.000 (wgt'ed) examples reached here.  /* #pos=75 */
%   | | | else return -0.20676789270908968;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(A, E) )
%   | | then return -0.10070306379092427;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( actor(B) )
%   | | | then return -0.10070306379092415;  // std dev = 4.34e-08, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
%   | | | else return 0.41751358415831036;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else return -0.10159632948783653;  // std dev = 0.000, 203.000 (wgt'ed) examples reached here.  /* #neg=203 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1030038680732544;  // std dev = 0.109, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else if ( genre(B, E) )
%   | | then return 0.3207118471601498;  // std dev = 1.33e-07, 121.000 (wgt'ed) examples reached here.  /* #pos=121 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.3207118471601497;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return -0.10664277165674754;  // std dev = 0.592, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
%   else return -0.09269127618926058;  // std dev = 4.47e-08, 168.000 (wgt'ed) examples reached here.  /* #neg=168 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2551722425694897;  // std dev = 0.000, 121.000 (wgt'ed) examples reached here.  /* #pos=121 */
%   | else if ( actor(B) )
%   | | then return -0.08345223668784371;  // std dev = 0.000783, 74.000 (wgt'ed) examples reached here.  /* #neg=74 */
%   | | else return 0.25517224256948967;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else return -0.08518475138839678;  // std dev = 7.88e-08, 207.000 (wgt'ed) examples reached here.  /* #neg=207 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09257034285488407;  // std dev = 0.113, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( genre(B, E) )
%   | | then return 0.20975771563253537;  // std dev = 1.33e-07, 121.000 (wgt'ed) examples reached here.  /* #pos=121 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.20975771563253567;  // std dev = 2.11e-08, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return -0.08418152909963295;  // std dev = 0.474, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
%   else return -0.07877675473109147;  // std dev = 8.56e-08, 166.000 (wgt'ed) examples reached here.  /* #neg=166 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.17709649774527755;  // std dev = 0.000, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | | else if ( actor(A) )
%   | | | then return 0.17709649774527722;  // std dev = 8.43e-08, 75.000 (wgt'ed) examples reached here.  /* #pos=75 */
%   | | | else return -0.18366837375468423;  // std dev = 5.27e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( actor(B) )
%   | | then return -0.07143055076836527;  // std dev = 0.000787, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
%   | | else return 0.1770964977452774;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else return -0.07324622576333666;  // std dev = 1.16e-07, 197.000 (wgt'ed) examples reached here.  /* #neg=197 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( actor(A) )
%   | | then return 0.15274385809367136;  // std dev = 0.000, 121.000 (wgt'ed) examples reached here.  /* #pos=121 */
%   | | else return -0.15771122656707381;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(A, E) )
%   | | then return -0.06657092176227565;  // std dev = 2.63e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.15274385809367091;  // std dev = 1.29e-08, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return -0.08419216788570272;  // std dev = 0.710, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   else return -0.06842697784420261;  // std dev = 5.87e-08, 179.000 (wgt'ed) examples reached here.  /* #neg=179 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.13400703000801104;  // std dev = 2.79e-08, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | | else return 0.1269452074730734;  // std dev = 0.043, 77.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=75 */
%   | else if ( genre(A, E) )
%   | | then return -0.06255170932725639;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.13400703000801117;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return -0.07949788248732838;  // std dev = 0.688, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   else return -0.06419184008202626;  // std dev = 0.000, 196.000 (wgt'ed) examples reached here.  /* #neg=196 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063319
   Precision = 0.978261 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.989011


Total learning time: 1.717 seconds
Total inference time: 0.841 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.066515
   Precision = 0.881579 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.937063


Total scoring time: 1.121 seconds
Refined model CLL: -0.066515


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063319
   Precision = 0.978261 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.989011


Total learning time: 5.147 seconds
Total inference time: 0.841 seconds
AUC ROC: 1.0
Total revision time: 5.147
Best scored revision CLL: -0.066515


Dataset: 4_cora_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 00:13:34
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063319, 'Precision': [0.978261, 0.5], 'Recall': 1.0, 'F1': 0.989011, 'Learning time': 5.147, 'Inference time': 0.841, 'parameter_0.4': {'AUC ROC': 0.971565, 'AUC PR': 0.823063, 'CLL': -0.105666, 'Precision': [1.0, 0.5], 'Recall': 0.777778, 'F1': 0.875, 'Learning time': 1.129, 'Inference time': 0.938}}


Amount of data: 0.6
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;haswordauthor(E, C).;true;true
7;true,true,true;author(F, E), title(F, D).;false;false
7;true,true,false;title(G, D), venue(G, B).;false;false
7;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
7;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
7;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, B).;false;true
8;true,true,false;title(F, D), venue(F, A).;false;false
8;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
8;true,false,false;haswordvenue(A, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
8;false,true;haswordauthor(M, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;true,true;author(F, E), venue(F, B).;true;true
9;true,true,true;samebib(F, G), venue(G, A).;false;false
9;true,true,false;author(H, E), venue(H, A).;false;false
9;true,false;haswordtitle(I, C).;true;true
9;true,false,true;title(J, I), venue(J, A).;false;false
9;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995095;  // std dev = 1.08e-06, 177.000 (wgt'ed) examples reached here.  /* #pos=177 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.050456627407204094;  // std dev = 4.494, 130.000 (wgt'ed) examples reached here.  /* #neg=105 #pos=25 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048777;  // std dev = 1.33e-07, 309.000 (wgt'ed) examples reached here.  /* #neg=309 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109566;  // std dev = 0.000, 177.000 (wgt'ed) examples reached here.  /* #pos=177 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.06375960543039859;  // std dev = 4.439, 118.000 (wgt'ed) examples reached here.  /* #neg=93 #pos=25 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.125444638528392;  // std dev = 0.000, 300.000 (wgt'ed) examples reached here.  /* #neg=300 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.141116858283373;  // std dev = 0.200, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else if ( movie(E, A) )
%   | | then return 0.3419212477876225;  // std dev = 0.361, 303.000 (wgt'ed) examples reached here.  /* #neg=101 #pos=202 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360679;  // std dev = 0.000, 307.000 (wgt'ed) examples reached here.  /* #neg=307 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4516380318680577;  // std dev = 1.486, 182.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=177 */
%   | else if ( genre(A, E) )
%   | | then return -0.09899757789545373;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.01456789393652221;  // std dev = 4.494, 130.000 (wgt'ed) examples reached here.  /* #neg=105 #pos=25 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.1015963294878366;  // std dev = 0.000, 269.000 (wgt'ed) examples reached here.  /* #neg=269 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12511858036780832;  // std dev = 0.308, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else if ( genre(B, E) )
%   | | then return 0.3609642153258648;  // std dev = 0.000, 177.000 (wgt'ed) examples reached here.  /* #pos=177 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.012895784677011612;  // std dev = 4.423, 115.000 (wgt'ed) examples reached here.  /* #neg=90 #pos=25 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926043;  // std dev = 1.84e-07, 315.000 (wgt'ed) examples reached here.  /* #neg=315 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.27640886128845804;  // std dev = 0.765, 179.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=177 */
%   | else if ( movie(E, A) )
%   | | then return -0.020332939429408576;  // std dev = 0.376, 143.000 (wgt'ed) examples reached here.  /* #neg=118 #pos=25 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 1.05e-07, 310.000 (wgt'ed) examples reached here.  /* #neg=310 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.19887644217075814;  // std dev = 0.378, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( genre(B, E) )
%   | | then return 0.22995687940028373;  // std dev = 1.33e-07, 177.000 (wgt'ed) examples reached here.  /* #pos=177 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.005045009811130624;  // std dev = 4.449, 120.000 (wgt'ed) examples reached here.  /* #neg=95 #pos=25 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109143;  // std dev = 2.11e-08, 314.000 (wgt'ed) examples reached here.  /* #neg=314 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1917759442885971;  // std dev = 0.000, 177.000 (wgt'ed) examples reached here.  /* #pos=177 */
%   | else if ( movie(E, B) )
%   | | then return 0.013112268421542568;  // std dev = 4.406, 124.000 (wgt'ed) examples reached here.  /* #neg=99 #pos=25 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.07324622576333693;  // std dev = 1.03e-07, 287.000 (wgt'ed) examples reached here.  /* #neg=287 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.16379097667731649;  // std dev = 2.11e-07, 177.000 (wgt'ed) examples reached here.  /* #pos=177 */
%   | else if ( genre(A, E) )
%   | | then return -0.06669352035609309;  // std dev = 2.63e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.01967779932579165;  // std dev = 4.510, 134.000 (wgt'ed) examples reached here.  /* #neg=109 #pos=25 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420299;  // std dev = 0.000, 298.000 (wgt'ed) examples reached here.  /* #neg=298 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return -0.3534574916483338;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return 0.14257341454073008;  // std dev = 0.000, 177.000 (wgt'ed) examples reached here.  /* #pos=177 */
%   | | else if ( genre(A, G) )
%   | | | then return -0.06266020190208643;  // std dev = 1.86e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return 0.012475073667483304;  // std dev = 4.429, 116.000 (wgt'ed) examples reached here.  /* #neg=91 #pos=25 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.06419184008202584;  // std dev = 1.41e-07, 325.000 (wgt'ed) examples reached here.  /* #neg=325 */


Results
   AUC ROC   = 0.971565
   AUC PR    = 0.823063
   CLL	      = -0.112511
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.777778
   F1        = 0.875


Total learning time: 1.459 seconds
Total inference time: 0.9 seconds
AUC ROC: 0.971565


Results scoring model
   AUC ROC   = 0.984714
   AUC PR    = 0.905074
   CLL	      = -0.108841
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.876238
   F1        = 0.934037


Total scoring time: 1.457 seconds
Parameter learned model CLL: -0.108841


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 15, 0], 'true,false,true': [1.08e-06, 0, 177], 'true,false,false,true': [4.494, 105, 25], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.33e-07, 309, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 177], 'true,false,true': [0.0, 5, 0], 'true,false,false,true': [4.439, 93, 25], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 300, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.2, 16, 0], 'true,false,true': [0.361, 101, 202], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 307, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.486, 5, 177], 'true,false,true': [0.0, 6, 0], 'true,false,false,true': [4.494, 105, 25], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 269, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.308, 17, 0], 'true,false,true': [0.0, 0, 177], 'true,false,false,true': [4.423, 90, 25], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.84e-07, 315, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.765, 2, 177], 'true,false,true': [0.376, 118, 25], 'true,false,false': [0.0, 0, 0], 'false,true': [1.05e-07, 310, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.378, 10, 0], 'true,false,true': [1.33e-07, 0, 177], 'true,false,false,true': [4.449, 95, 25], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.11e-08, 314, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 177], 'true,false,true': [4.406, 99, 25], 'true,false,false': [0.0, 0, 0], 'false,true': [1.03e-07, 287, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [2.11e-07, 0, 177], 'true,false,true': [2.63e-09, 12, 0], 'true,false,false,true': [4.51, 109, 25], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 298, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true,true,false': 'genre(A, G)'}, {'true,true,true,true': [0.0, 2, 0], 'true,true,true,false': [0.0, 0, 177], 'true,true,false,true': [1.86e-09, 7, 0], 'true,true,false,false': [4.429, 91, 25], 'true,false': [0.0, 0, 0], 'false': [1.41e-07, 325, 0]}]]
[{'': [0.23378727672543945, 5.748727635599516e-17], 'true': [-1.4802973661668754e-17, 0.2250421755138032], 'true,false': [6.58355981156251e-15, 0.15532544378698324], 'true,false,false': [0.15532544378698324, nan], 'false': [5.748727635599516e-17, nan]}, {'': [0.17271204993610983, -8.585724723767877e-17], 'true': [-3.2114925910061025e-15, 0.1615862194627818], 'true,false': [0.0, 0.16697787991956284], 'true,false,false': [0.16697787991956284, nan], 'false': [-8.585724723767877e-17, nan]}, {'': [0.13485035332117956, -5.930833095717449e-17], 'true': [0.0024884029602031364, 0.13013690120152455], 'true,false': [0.13013690120152455, nan], 'false': [-5.930833095717449e-17, nan]}, {'': [0.12462270543486814, -6.273379172603116e-17], 'true': [0.012130860717560915, 0.14877346323258617], 'true,false': [-1.1564823173178713e-18, 0.1553254437869829], 'true,false,false': [0.1553254437869829, nan], 'false': [-6.273379172603116e-17, nan]}, {'': [0.0972889707196541, 1.0714533317017384e-16], 'true': [0.005589158369533224, 0.09592659218492101], 'true,false': [0.0, 0.17013232514177756], 'true,false,false': [0.17013232514177756, nan], 'false': [1.0714533317017384e-16, nan]}, {'': [0.0864288350519496, 3.581364595565021e-17], 'true': [0.003272291808299978, 0.14156967641620002], 'true,false': [0.14156967641620002, nan], 'false': [3.581364595565021e-17, nan]}, {'': [0.08031727602422893, 1.4142968466562504e-18], 'true': [0.014315382811909716, 0.07881914333575438], 'true,false': [1.003591434689407e-16, 0.16493055555555586], 'true,false,false': [0.16493055555555586, nan], 'false': [1.4142968466562504e-18, nan]}, {'': [0.07223994120732141, 3.7136379917775274e-17], 'true': [-4.516161456102332e-17, 0.1565859819569494], 'true,false': [0.1565859819569494, nan], 'false': [3.7136379917775274e-17, nan]}, {'': [0.071727177761076, -5.513859316930308e-17], 'true': [2.5089785867235177e-16, 0.13945319475552911], 'true,false': [5.782411586589357e-19, 0.1517598574292715], 'true,false,false': [0.1517598574292715, nan], 'false': [-5.513859316930308e-17, nan]}, {'': [0.07068202328388075, 6.080606104100857e-17], 'true': [0.07068202328388075, nan], 'true,true': [0.0027184082145606516, 0.15975070884937467], 'true,true,false': [4.956352788505163e-19, 0.16906956004756363], 'true,true,true': [0.0, -5.519752890791739e-17]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, E).;true;true
9;true,true;genre(A, F).;true;true
9;true,false;genre(A, G).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995095;  // std dev = 1.08e-06, 177.000 (wgt'ed) examples reached here.  /* #pos=177 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.858148935099512;  // std dev = 1.33e-07, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | | else return -0.14185106490048766;  // std dev = 8.16e-08, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
%   else return -0.14185106490048785;  // std dev = 8.94e-08, 298.000 (wgt'ed) examples reached here.  /* #neg=298 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( director(A) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0.7194734122109566;  // std dev = 0.000, 177.000 (wgt'ed) examples reached here.  /* #pos=177 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.7194734122109544;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 102.000 (wgt'ed) examples reached here.  /* #neg=102 */
%   else return -0.12544463852839202;  // std dev = 0.000, 303.000 (wgt'ed) examples reached here.  /* #neg=303 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360638;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( actor(B) )
%   | | then return -0.11231637819360621;  // std dev = 7.30e-08, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
%   | | else return 0.5553664367462833;  // std dev = 6.36e-07, 202.000 (wgt'ed) examples reached here.  /* #pos=202 */
%   else return -0.11231637819360668;  // std dev = 0.000, 318.000 (wgt'ed) examples reached here.  /* #neg=318 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.4175135841583106;  // std dev = 0.000, 64.000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | | else if ( actor(A) )
%   | | | then return 0.41751358415830947;  // std dev = 3.15e-07, 113.000 (wgt'ed) examples reached here.  /* #pos=113 */
%   | | | else return -0.1015963294878363;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783627;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.41751358415831047;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | | else return -0.10242850551334587;  // std dev = 0.079, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
%   else return -0.10159632948783662;  // std dev = 0.000, 291.000 (wgt'ed) examples reached here.  /* #neg=291 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926097;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( genre(B, E) )
%   | | then return 0.32071184716014917;  // std dev = 3.82e-07, 177.000 (wgt'ed) examples reached here.  /* #pos=177 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.32071184716014955;  // std dev = 2.11e-08, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | | else return -0.09457766513247262;  // std dev = 0.102, 75.000 (wgt'ed) examples reached here.  /* #neg=75 */
%   else return -0.09269127618926046;  // std dev = 1.66e-07, 292.000 (wgt'ed) examples reached here.  /* #neg=292 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.25517224256948995;  // std dev = 7.30e-08, 202.000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.08560028814622757;  // std dev = 0.068, 113.000 (wgt'ed) examples reached here.  /* #neg=113 */
%   else return -0.08518475138839678;  // std dev = 1.05e-07, 308.000 (wgt'ed) examples reached here.  /* #neg=308 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.0787466041001401;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( genre(B, E) )
%   | | then return 0.20975771563253506;  // std dev = 2.89e-07, 177.000 (wgt'ed) examples reached here.  /* #pos=177 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.20975771563253554;  // std dev = 1.49e-08, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | | else return -0.07992526415317117;  // std dev = 0.089, 93.000 (wgt'ed) examples reached here.  /* #neg=93 */
%   else return -0.07877675473109143;  // std dev = 2.11e-08, 320.000 (wgt'ed) examples reached here.  /* #neg=320 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17292455495641593;  // std dev = 0.430, 180.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=177 */
%   | else if ( director(B), actor(A) )
%   | | then return 0.17709649774527747;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | else return -0.074085574006108;  // std dev = 0.084, 108.000 (wgt'ed) examples reached here.  /* #neg=108 */
%   else return -0.07324622576333688;  // std dev = 1.10e-07, 274.000 (wgt'ed) examples reached here.  /* #neg=274 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14929887627132335;  // std dev = 0.411, 180.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=177 */
%   | else if ( genre(A, E) )
%   | | then return -0.06834894873971373;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.15274385809367083;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | | else return -0.0709675666763584;  // std dev = 0.110, 79.000 (wgt'ed) examples reached here.  /* #neg=79 */
%   else return -0.06842697784420296;  // std dev = 0.000, 292.000 (wgt'ed) examples reached here.  /* #neg=292 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( genre(A, E) )
%   | | then return -0.09832080465089647;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0.13489343438376986;  // std dev = 7.30e-08, 177.000 (wgt'ed) examples reached here.  /* #pos=177 */
%   | else if ( genre(A, F) )
%   | | then return -0.06412299048063368;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.13400703000801117;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | | else return -0.06481259397155412;  // std dev = 0.075, 99.000 (wgt'ed) examples reached here.  /* #neg=99 */
%   else return -0.06419184008202593;  // std dev = 1.22e-07, 306.000 (wgt'ed) examples reached here.  /* #neg=306 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063664
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.975 seconds
Total inference time: 0.849 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064401
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.485 seconds
Refined model CLL: -0.064401


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063664
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 6.376 seconds
Total inference time: 0.849 seconds
AUC ROC: 1.0
Total revision time: 6.376
Best scored revision CLL: -0.064401


Dataset: 4_cora_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 00:13:43
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063664, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 6.376, 'Inference time': 0.849, 'parameter_0.6': {'AUC ROC': 0.971565, 'AUC PR': 0.823063, 'CLL': -0.112511, 'Precision': [1.0, 0.5], 'Recall': 0.777778, 'F1': 0.875, 'Learning time': 1.459, 'Inference time': 0.9}}


Amount of data: 0.8
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;haswordauthor(E, C).;true;true
7;true,true,true;author(F, E), title(F, D).;false;false
7;true,true,false;title(G, D), venue(G, B).;false;false
7;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
7;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
7;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, B).;false;true
8;true,true,false;title(F, D), venue(F, A).;false;false
8;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
8;true,false,false;haswordvenue(A, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
8;false,true;haswordauthor(M, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;true,true;author(F, E), venue(F, B).;true;true
9;true,true,true;samebib(F, G), venue(G, A).;false;false
9;true,true,false;author(H, E), venue(H, A).;false;false
9;true,false;haswordtitle(I, C).;true;true
9;true,false,true;title(J, I), venue(J, A).;false;false
9;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 7.45e-09, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995088;  // std dev = 1.08e-06, 235.000 (wgt'ed) examples reached here.  /* #pos=235 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.08633685456259836;  // std dev = 5.123, 149.000 (wgt'ed) examples reached here.  /* #neg=115 #pos=34 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048727;  // std dev = 3.01e-07, 420.000 (wgt'ed) examples reached here.  /* #neg=420 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7123433020781358;  // std dev = 1.190, 237.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=235 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.049691759981900466;  // std dev = 5.208, 168.000 (wgt'ed) examples reached here.  /* #neg=134 #pos=34 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839227;  // std dev = 0.000, 414.000 (wgt'ed) examples reached here.  /* #neg=414 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.13673449508664362;  // std dev = 0.175, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else if ( movie(E, A) )
%   | | then return 0.33070662317360133;  // std dev = 0.366, 413.000 (wgt'ed) examples reached here.  /* #neg=144 #pos=269 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360622;  // std dev = 0.000, 397.000 (wgt'ed) examples reached here.  /* #neg=397 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.46617627254047256;  // std dev = 1.167, 238.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=235 */
%   | else if ( genre(A, E) )
%   | | then return -0.09938915931165705;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.009328869932364169;  // std dev = 5.157, 156.000 (wgt'ed) examples reached here.  /* #neg=122 #pos=34 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783621;  // std dev = 7.33e-09, 361.000 (wgt'ed) examples reached here.  /* #neg=361 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.13488389373394782;  // std dev = 0.247, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( genre(B, E) )
%   | | then return 0.36184271957791786;  // std dev = 0.000, 235.000 (wgt'ed) examples reached here.  /* #pos=235 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.002847135702668478;  // std dev = 5.191, 164.000 (wgt'ed) examples reached here.  /* #neg=130 #pos=34 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926065;  // std dev = 1.79e-07, 371.000 (wgt'ed) examples reached here.  /* #neg=371 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.26950975379699504;  // std dev = 1.319, 241.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=235 */
%   | else if ( movie(E, A) )
%   | | then return 0.022678772256894568;  // std dev = 0.412, 153.000 (wgt'ed) examples reached here.  /* #neg=119 #pos=34 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 1.23e-07, 374.000 (wgt'ed) examples reached here.  /* #neg=374 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.10815313376284749;  // std dev = 0.314, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else if ( genre(B, E) )
%   | | then return 0.23170164560577594;  // std dev = 1.63e-07, 235.000 (wgt'ed) examples reached here.  /* #pos=235 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.019189373494141293;  // std dev = 5.234, 175.000 (wgt'ed) examples reached here.  /* #neg=141 #pos=34 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109143;  // std dev = 1.13e-07, 392.000 (wgt'ed) examples reached here.  /* #neg=392 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18891755762941517;  // std dev = 0.687, 237.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=235 */
%   | else if ( movie(E, B) )
%   | | then return -0.011438265402413222;  // std dev = 5.204, 184.000 (wgt'ed) examples reached here.  /* #neg=150 #pos=34 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.07324622576333772;  // std dev = 0.000, 424.000 (wgt'ed) examples reached here.  /* #neg=424 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.15691817773829161;  // std dev = 0.993, 239.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=235 */
%   | else if ( genre(A, E) )
%   | | then return -0.07342599579650423;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.012401489266345083;  // std dev = 5.147, 154.000 (wgt'ed) examples reached here.  /* #neg=120 #pos=34 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.0684269778442034;  // std dev = 0.000, 423.000 (wgt'ed) examples reached here.  /* #neg=423 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return -0.37104006171818504;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0.14476494548795024;  // std dev = 1.93e-07, 235.000 (wgt'ed) examples reached here.  /* #pos=235 */
%   | | else if ( genre(A, G) )
%   | | | then return -0.06858431066296775;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return -0.009247404078253143;  // std dev = 5.212, 169.000 (wgt'ed) examples reached here.  /* #neg=135 #pos=34 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.06419184008202554;  // std dev = 2.09e-07, 421.000 (wgt'ed) examples reached here.  /* #neg=421 */


Results
   AUC ROC   = 0.971565
   AUC PR    = 0.823063
   CLL	      = -0.113765
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.777778
   F1        = 0.875


Total learning time: 1.548 seconds
Total inference time: 0.877 seconds
AUC ROC: 0.971565


Results scoring model
   AUC ROC   = 0.984279
   AUC PR    = 0.902998
   CLL	      = -0.110587
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.873606
   F1        = 0.93254


Total scoring time: 1.536 seconds
Parameter learned model CLL: -0.110587


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [7.45e-09, 20, 0], 'true,false,true': [1.08e-06, 0, 235], 'true,false,false,true': [5.123, 115, 34], 'true,false,false,false': [0.0, 0, 0], 'false,true': [3.01e-07, 420, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.19, 2, 235], 'true,false,true': [5.27e-09, 12, 0], 'true,false,false,true': [5.208, 134, 34], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 414, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.175, 14, 0], 'true,false,true': [0.366, 144, 269], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 397, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.167, 3, 235], 'true,false,true': [0.0, 7, 0], 'true,false,false,true': [5.157, 122, 34], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.33e-09, 361, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.247, 9, 0], 'true,false,true': [0.0, 0, 235], 'true,false,false,true': [5.191, 130, 34], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.79e-07, 371, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [1.319, 6, 235], 'true,false,true': [0.412, 119, 34], 'true,false,false': [0.0, 0, 0], 'false,true': [1.23e-07, 374, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.314, 18, 0], 'true,false,true': [1.63e-07, 0, 235], 'true,false,false,true': [5.234, 141, 34], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.13e-07, 392, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.687, 2, 235], 'true,false,true': [5.204, 150, 34], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 424, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.993, 4, 235], 'true,false,true': [0.0, 7, 0], 'true,false,false,true': [5.147, 120, 34], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 423, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true,true,false': 'genre(A, G)'}, {'true,true,true,true': [0.0, 1, 0], 'true,true,true,false': [1.93e-07, 0, 235], 'true,true,false,true': [0.0, 10, 0], 'true,true,false,false': [5.212, 135, 34], 'true,false': [0.0, 0, 0], 'false': [2.09e-07, 421, 0]}]]
[{'': [0.22249656896383055, 2.157004733557447e-16], 'true': [2.7755575615628915e-18, 0.20979139539930913], 'true,false': [4.958681219772614e-15, 0.17611819287419606], 'true,false,false': [0.17611819287419606, nan], 'false': [2.157004733557447e-16, nan]}, {'': [0.18080783946429993, -1.2872151010146743e-16], 'true': [0.005973520284470144, 0.15256990283099484], 'true,false': [2.3129646346357427e-18, 0.1614229024943316], 'true,false,false': [0.1614229024943316, nan], 'false': [-1.2872151010146743e-16, nan]}, {'': [0.13688016849892745, -2.0135027146854223e-17], 'true': [0.0021862295862074593, 0.13428209099422786], 'true,false': [0.13428209099422786, nan], 'false': [-2.0135027146854223e-17, nan]}, {'': [0.12128782855049657, 5.4127216713027023e-17], 'true': [0.005720446013567776, 0.16361305352554154], 'true,false': [-1.982541115402065e-18, 0.170447074293228], 'true,false,false': [0.170447074293228, nan], 'false': [5.4127216713027023e-17, nan]}, {'': [0.10028822834899227, 8.618442886578034e-17], 'true': [0.006789474547950456, 0.09974375863815955], 'true,false': [-5.593634302792278e-16, 0.1643367043426535], 'true,false,false': [0.1643367043426535, nan], 'false': [8.618442886578034e-17, nan]}, {'': [0.0847218487868193, 4.0371746350005693e-17], 'true': [0.007216241918808385, 0.16953921051527837], 'true,false': [0.16953921051527837, nan], 'false': [4.0371746350005693e-17, nan]}, {'': [0.08117037074008142, 3.285353848380565e-17], 'true': [0.0054765014066330275, 0.08221489513893565], 'true,false': [1.1338447911065428e-16, 0.15653877551020343], 'true,false,false': [0.15653877551020343, nan], 'false': [3.285353848380565e-17, nan]}, {'': [0.07531313785417543, -7.12218544099157e-17], 'true': [0.0019889316364946246, 0.1471598938990813], 'true,false': [0.1471598938990813, nan], 'false': [-7.12218544099157e-17, nan]}, {'': [0.07410575011915058, -1.2440797013530124e-16], 'true': [0.004122528404165363, 0.16486229229226176], 'true,false': [-9.912705577010326e-19, 0.17203575645133953], 'true,false,false': [0.17203575645133953, nan], 'false': [-1.2440797013530124e-16, nan]}, {'': [0.07206741109779222, 1.0390210729271061e-16], 'true': [0.07206741109779222, nan], 'true,true': [0.001122573960120207, 0.15191622923355774], 'true,true,false': [-6.938893903907229e-19, 0.16070865866041065], 'true,true,true': [0.0, 1.58738270754916e-16]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, E).;true;true
9;true,true;genre(A, F).;true;true
9;true,false;genre(A, G).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995088;  // std dev = 1.08e-06, 235.000 (wgt'ed) examples reached here.  /* #pos=235 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.8581489350995115;  // std dev = 2.38e-07, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | | else return -0.14185106490048802;  // std dev = 0.000, 143.000 (wgt'ed) examples reached here.  /* #neg=143 */
%   else return -0.14185106490048738;  // std dev = 2.92e-07, 392.000 (wgt'ed) examples reached here.  /* #neg=392 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.7194734122109541;  // std dev = 2.80e-07, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   | | else return 0.7029063916082239;  // std dev = 0.117, 153.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=150 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 7.45e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( actor(B) )
%   | | | then return -0.12544463852839105;  // std dev = 8.16e-08, 128.000 (wgt'ed) examples reached here.  /* #neg=128 */
%   | | | else return 0.7194734122109548;  // std dev = 0.000, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   else return -0.12544463852839227;  // std dev = 0.000, 420.000 (wgt'ed) examples reached here.  /* #neg=420 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1283597147428129;  // std dev = 0.147, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else if ( actor(A), director(B) )
%   | | then return 0.557645504113018;  // std dev = 0.033, 269.000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | | else return -0.11320941633592452;  // std dev = 0.115, 129.000 (wgt'ed) examples reached here.  /* #neg=129 */
%   else return -0.11231637819360621;  // std dev = 0.000, 402.000 (wgt'ed) examples reached here.  /* #neg=402 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.41695942852778656;  // std dev = 1.79e-07, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   | | else if ( actor(A) )
%   | | | then return 0.420992397923826;  // std dev = 3.26e-07, 150.000 (wgt'ed) examples reached here.  /* #pos=150 */
%   | | | else return -0.20305571223302957;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(A, E) )
%   | | then return -0.10014131299284278;  // std dev = 5.27e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.41695942852778595;  // std dev = 0.000, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | | else return -0.10381819621230201;  // std dev = 0.183, 139.000 (wgt'ed) examples reached here.  /* #neg=139 */
%   else return -0.10159632948783603;  // std dev = 1.91e-07, 384.000 (wgt'ed) examples reached here.  /* #neg=384 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09723548627667969;  // std dev = 0.078, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else if ( genre(B, E) )
%   | | then return 0.3220819570215873;  // std dev = 0.020, 235.000 (wgt'ed) examples reached here.  /* #pos=235 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.32033618147604176;  // std dev = 0.000, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | | else return -0.0933398095369824;  // std dev = 0.099, 109.000 (wgt'ed) examples reached here.  /* #neg=109 */
%   else return -0.09269127618926094;  // std dev = 1.37e-07, 408.000 (wgt'ed) examples reached here.  /* #neg=408 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.255956775687013;  // std dev = 0.019, 269.000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.08918587122389753;  // std dev = 0.224, 148.000 (wgt'ed) examples reached here.  /* #neg=148 */
%   else return -0.08518475138839678;  // std dev = 1.21e-07, 385.000 (wgt'ed) examples reached here.  /* #neg=385 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.0834850797644184;  // std dev = 0.094, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | else if ( genre(B, E) )
%   | | then return 0.2104433562430612;  // std dev = 0.015, 235.000 (wgt'ed) examples reached here.  /* #pos=235 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.209404240688448;  // std dev = 1.49e-08, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | | else return -0.07948115126719853;  // std dev = 0.122, 137.000 (wgt'ed) examples reached here.  /* #neg=137 */
%   else return -0.07877675473109143;  // std dev = 9.42e-08, 370.000 (wgt'ed) examples reached here.  /* #neg=370 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17363360526405716;  // std dev = 0.542, 238.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=235 */
%   | else if ( director(B), actor(A) )
%   | | then return 0.17683719721689162;  // std dev = 2.11e-08, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | else return -0.07364942877578846;  // std dev = 0.115, 146.000 (wgt'ed) examples reached here.  /* #neg=146 */
%   else return -0.07324622576333722;  // std dev = 2.11e-08, 400.000 (wgt'ed) examples reached here.  /* #neg=400 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.15231613157458304;  // std dev = 0.312, 236.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=235 */
%   | else if ( genre(A, E) )
%   | | then return -0.06664829681160625;  // std dev = 4.56e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.15254712412919336;  // std dev = 0.000, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | | else return -0.06905816568431421;  // std dev = 0.108, 129.000 (wgt'ed) examples reached here.  /* #neg=129 */
%   else return -0.06842697784420339;  // std dev = 0.000, 412.000 (wgt'ed) examples reached here.  /* #neg=412 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( genre(A, E) )
%   | | then return -0.1802999244421745;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return 0.13486101859052366;  // std dev = 0.011, 235.000 (wgt'ed) examples reached here.  /* #pos=235 */
%   | else if ( genre(A, F) )
%   | | then return -0.06262018429882643;  // std dev = 2.63e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.13385342410771536;  // std dev = 0.000, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | | else return -0.06479038467484476;  // std dev = 0.102, 125.000 (wgt'ed) examples reached here.  /* #neg=125 */
%   else return -0.06419184008202558;  // std dev = 1.97e-07, 402.000 (wgt'ed) examples reached here.  /* #neg=402 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063689
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.478 seconds
Total inference time: 0.891 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064811
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.607 seconds
Refined model CLL: -0.064811


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063689
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 7.1690000000000005 seconds
Total inference time: 0.891 seconds
AUC ROC: 1.0
Total revision time: 7.1690000000000005
Best scored revision CLL: -0.064811


Dataset: 4_cora_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 00:13:52
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063689, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 7.1690000000000005, 'Inference time': 0.891, 'parameter_0.8': {'AUC ROC': 0.971565, 'AUC PR': 0.823063, 'CLL': -0.113765, 'Precision': [1.0, 0.5], 'Recall': 0.777778, 'F1': 0.875, 'Learning time': 1.548, 'Inference time': 0.877}}


Amount of data: 1.0
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;haswordauthor(E, C).;true;true
7;true,true,true;author(F, E), title(F, D).;false;false
7;true,true,false;title(G, D), venue(G, B).;false;false
7;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
7;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
7;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, B).;false;true
8;true,true,false;title(F, D), venue(F, A).;false;false
8;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
8;true,false,false;haswordvenue(A, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
8;false,true;haswordauthor(M, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;true,true;author(F, E), venue(F, B).;true;true
9;true,true,true;samebib(F, G), venue(G, A).;false;false
9;true,true,false;author(H, E), venue(H, A).;false;false
9;true,false;haswordtitle(I, C).;true;true
9;true,false,true;title(J, I), venue(J, A).;false;false
9;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995085;  // std dev = 1.08e-06, 288.000 (wgt'ed) examples reached here.  /* #pos=288 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.07212273422614959;  // std dev = 6.206, 229.000 (wgt'ed) examples reached here.  /* #neg=180 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.1418510649004876;  // std dev = 1.03e-07, 488.000 (wgt'ed) examples reached here.  /* #neg=488 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109577;  // std dev = 0.000, 288.000 (wgt'ed) examples reached here.  /* #pos=288 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 7.45e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.0813681859947916;  // std dev = 6.134, 211.000 (wgt'ed) examples reached here.  /* #neg=162 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839235;  // std dev = 0.000, 496.000 (wgt'ed) examples reached here.  /* #neg=496 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.13235149477779196;  // std dev = 0.209, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | else if ( movie(E, A) )
%   | | then return 0.34133394550190177;  // std dev = 0.367, 508.000 (wgt'ed) examples reached here.  /* #neg=171 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360575;  // std dev = 0.000, 522.000 (wgt'ed) examples reached here.  /* #neg=522 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4633331188829539;  // std dev = 1.164, 291.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=288 */
%   | else if ( genre(A, E) )
%   | | then return -0.0997821753108506;  // std dev = 1.29e-08, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.0280839716128483;  // std dev = 6.097, 203.000 (wgt'ed) examples reached here.  /* #neg=154 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783551;  // std dev = 1.48e-08, 473.000 (wgt'ed) examples reached here.  /* #neg=473 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11335374098000724;  // std dev = 0.266, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else if ( genre(B, E) )
%   | | then return 0.3584059703731513;  // std dev = 0.000, 288.000 (wgt'ed) examples reached here.  /* #pos=288 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.023333531499860987;  // std dev = 6.097, 203.000 (wgt'ed) examples reached here.  /* #neg=154 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.0926912761892615;  // std dev = 0.000, 510.000 (wgt'ed) examples reached here.  /* #neg=510 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2695605432012037;  // std dev = 1.330, 294.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=288 */
%   | else if ( movie(E, A) )
%   | | then return 0.02029588927151389;  // std dev = 0.417, 212.000 (wgt'ed) examples reached here.  /* #neg=163 #pos=49 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 1.43e-07, 492.000 (wgt'ed) examples reached here.  /* #neg=492 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.10559371114635105;  // std dev = 0.324, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | else if ( genre(B, E) )
%   | | then return 0.22965577105820634;  // std dev = 4.17e-07, 288.000 (wgt'ed) examples reached here.  /* #pos=288 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.020655041471498166;  // std dev = 6.077, 199.000 (wgt'ed) examples reached here.  /* #neg=150 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109204;  // std dev = 0.000, 494.000 (wgt'ed) examples reached here.  /* #neg=494 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18647728164274935;  // std dev = 0.849, 291.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=288 */
%   | else if ( movie(E, B) )
%   | | then return -0.00867231934657368;  // std dev = 6.166, 234.000 (wgt'ed) examples reached here.  /* #neg=185 #pos=49 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.0732462257633369;  // std dev = 1.59e-07, 502.000 (wgt'ed) examples reached here.  /* #neg=502 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.16432563572059417;  // std dev = 0.000, 288.000 (wgt'ed) examples reached here.  /* #pos=288 */
%   | else if ( genre(A, E) )
%   | | then return -0.07538610567128211;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.019798472169348633;  // std dev = 6.072, 198.000 (wgt'ed) examples reached here.  /* #neg=149 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.0684269778442035;  // std dev = 0.000, 470.000 (wgt'ed) examples reached here.  /* #neg=470 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return -0.3798982744111777;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return 0.14298513210061478;  // std dev = 1.69e-07, 288.000 (wgt'ed) examples reached here.  /* #pos=288 */
%   | | else if ( genre(A, G) )
%   | | | then return -0.07029678401798682;  // std dev = 3.73e-09, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | | else return 0.015054764432193998;  // std dev = 6.077, 199.000 (wgt'ed) examples reached here.  /* #neg=150 #pos=49 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.06419184008202534;  // std dev = 2.45e-07, 520.000 (wgt'ed) examples reached here.  /* #neg=520 */


Results
   AUC ROC   = 0.971565
   AUC PR    = 0.823063
   CLL	      = -0.121211
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.777778
   F1        = 0.875


Total learning time: 1.97 seconds
Total inference time: 0.88 seconds
AUC ROC: 0.971565


Results scoring model
   AUC ROC   = 0.982257
   AUC PR    = 0.888508
   CLL	      = -0.117407
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.854599
   F1        = 0.9216


Total scoring time: 1.847 seconds
Parameter learned model CLL: -0.117407


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 16, 0], 'true,false,true': [1.08e-06, 0, 288], 'true,false,false,true': [6.206, 180, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.03e-07, 488, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 288], 'true,false,true': [7.45e-09, 16, 0], 'true,false,false,true': [6.134, 162, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 496, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.209, 23, 0], 'true,false,true': [0.367, 171, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 522, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.164, 3, 288], 'true,false,true': [1.29e-08, 26, 0], 'true,false,false,true': [6.097, 154, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.48e-08, 473, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.266, 18, 0], 'true,false,true': [0.0, 0, 288], 'true,false,false,true': [6.097, 154, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 510, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [1.33, 6, 288], 'true,false,true': [0.417, 163, 49], 'true,false,false': [0.0, 0, 0], 'false,true': [1.43e-07, 492, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.324, 22, 0], 'true,false,true': [4.17e-07, 0, 288], 'true,false,false,true': [6.077, 150, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 494, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.849, 3, 288], 'true,false,true': [6.166, 185, 49], 'true,false,false': [0.0, 0, 0], 'false,true': [1.59e-07, 502, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 288], 'true,false,true': [0.0, 14, 0], 'true,false,false,true': [6.072, 149, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 470, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true,true,false': 'genre(A, G)'}, {'true,true,true,true': [0.0, 6, 0], 'true,true,true,false': [1.69e-07, 0, 288], 'true,true,false,true': [3.73e-09, 20, 0], 'true,true,false,false': [6.077, 150, 49], 'true,false': [0.0, 0, 0], 'false': [2.45e-07, 520, 0]}]]
[{'': [0.23250460243093082, 2.1840452943445702e-17], 'true': [-6.938893903907228e-18, 0.22694536625151315], 'true,false': [4.046146134189459e-15, 0.16818901241395193], 'true,false,false': [0.16818901241395193, nan], 'false': [2.1840452943445702e-17, nan]}, {'': [0.1792897910154578, -1.3788253692925331e-16], 'true': [-4.736951571734001e-15, 0.1685328724240826], 'true,false': [3.469446951953614e-18, 0.17829788189843138], 'true,false,false': [0.17829788189843138, nan], 'false': [-1.3788253692925331e-16, nan]}, {'': [0.1384779610768047, -5.104473676437501e-18], 'true': [0.0019066780085740325, 0.13494248996805872], 'true,false': [0.13494248996805872, nan], 'false': [-5.104473676437501e-18, nan]}, {'': [0.12466821357658234, 2.178196547256121e-16], 'true': [0.004654172371426305, 0.16397049536033573], 'true,false': [6.4051328343759035e-18, 0.1831153388822835], 'true,false,false': [0.1831153388822835, nan], 'false': [2.178196547256121e-16, nan]}, {'': [0.1032217500147197, -3.657205257588751e-17], 'true': [0.003936864891645621, 0.10293476206590221], 'true,false': [-9.62193288008469e-16, 0.18311533888228163], 'true,false,false': [0.18311533888228163, nan], 'false': [-3.657205257588751e-17, nan]}, {'': [0.09151136900227014, 4.1520535880290405e-17], 'true': [0.006020428503014673, 0.17396864484785277], 'true,false': [0.17396864484785277, nan], 'false': [4.1520535880290405e-17, nan]}, {'': [0.08545031255139639, -3.5059674461847047e-17], 'true': [0.004772621818115206, 0.08639682622923632], 'true,false': [6.044547578514741e-16, 0.185601373702685], 'true,false,false': [0.185601373702685, nan], 'false': [-3.5059674461847047e-17, nan]}, {'': [0.08319906280910941, 5.0424472034768064e-17], 'true': [0.0024791133982673087, 0.1624724978490546], 'true,false': [0.1624724978490546, nan], 'false': [5.0424472034768064e-17, nan]}, {'': [0.07953916806911146, -1.2188831504395336e-16], 'true': [-1.881211236170404e-16, 0.17449152125152617], 'true,false': [-9.912705577010326e-19, 0.18623099683705627], 'true,false,false': [0.18623099683705627, nan], 'false': [-1.2188831504395336e-16, nan]}, {'': [0.079214028659937, 1.1529239101876627e-16], 'true': [0.079214028659937, nan], 'true,true': [0.0054658636929022395, 0.1692560062736722], 'true,true,false': [6.938893903907229e-19, 0.185601373702684], 'true,true,true': [0.0, 9.868649107779169e-17]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, E).;true;true
9;true,true;genre(A, F).;true;true
9;true,false;genre(A, G).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048774;  // std dev = 1.05e-08, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995085;  // std dev = 1.08e-06, 288.000 (wgt'ed) examples reached here.  /* #pos=288 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.8581489350995122;  // std dev = 1.69e-07, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.14185106490048818;  // std dev = 0.000, 163.000 (wgt'ed) examples reached here.  /* #neg=163 */
%   else return -0.1418510649004876;  // std dev = 9.42e-08, 489.000 (wgt'ed) examples reached here.  /* #neg=489 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.7194734122109548;  // std dev = 0.000, 105.000 (wgt'ed) examples reached here.  /* #pos=105 */
%   | | else return 0.7014002988261578;  // std dev = 0.122, 187.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=183 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.7194734122109547;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.1254446385283915;  // std dev = 0.000, 174.000 (wgt'ed) examples reached here.  /* #neg=174 */
%   else return -0.12544463852839235;  // std dev = 0.000, 502.000 (wgt'ed) examples reached here.  /* #neg=502 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.13098990401427127;  // std dev = 0.145, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else if ( actor(B) )
%   | | then return -0.11231637819360626;  // std dev = 8.82e-08, 153.000 (wgt'ed) examples reached here.  /* #neg=153 */
%   | | else return 0.5577874093124621;  // std dev = 0.041, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   else return -0.1123163781936059;  // std dev = 0.000, 472.000 (wgt'ed) examples reached here.  /* #neg=472 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.416924931175361;  // std dev = 1.46e-07, 105.000 (wgt'ed) examples reached here.  /* #pos=105 */
%   | | else if ( actor(A) )
%   | | | then return 0.42132496507904327;  // std dev = 4.04e-07, 183.000 (wgt'ed) examples reached here.  /* #pos=183 */
%   | | | else return -0.20238718422343815;  // std dev = 7.45e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(A, E) )
%   | | then return -0.09990454781038992;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.4169249311753603;  // std dev = 5.96e-08, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.1031534931325903;  // std dev = 0.136, 153.000 (wgt'ed) examples reached here.  /* #neg=153 */
%   else return -0.10159632948783545;  // std dev = 3.36e-07, 487.000 (wgt'ed) examples reached here.  /* #neg=487 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.10634766680764507;  // std dev = 0.126, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else if ( genre(B, E) )
%   | | then return 0.3222089346433059;  // std dev = 0.024, 288.000 (wgt'ed) examples reached here.  /* #pos=288 */
%   | | else if ( actor(B) )
%   | | | then return -0.09256040237682178;  // std dev = 0.000, 151.000 (wgt'ed) examples reached here.  /* #neg=151 */
%   | | | else return 0.3203127969928787;  // std dev = 1.12e-07, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   else return -0.09269127618926147;  // std dev = 0.000, 502.000 (wgt'ed) examples reached here.  /* #neg=502 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.25600589406332924;  // std dev = 0.023, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.08901537506134798;  // std dev = 0.285, 174.000 (wgt'ed) examples reached here.  /* #neg=174 */
%   else return -0.08518475138839678;  // std dev = 1.48e-07, 519.000 (wgt'ed) examples reached here.  /* #neg=519 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.0901776855158715;  // std dev = 0.152, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | else if ( genre(B, E) )
%   | | then return 0.21051085311669748;  // std dev = 0.019, 288.000 (wgt'ed) examples reached here.  /* #pos=288 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.20938219937967983;  // std dev = 2.98e-08, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.08298586916389168;  // std dev = 0.294, 160.000 (wgt'ed) examples reached here.  /* #neg=160 */
%   else return -0.07877675473109218;  // std dev = 0.000, 521.000 (wgt'ed) examples reached here.  /* #neg=521 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17231740469418913;  // std dev = 0.693, 293.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=288 */
%   | else if ( actor(A), director(B) )
%   | | then return 0.17682102537403485;  // std dev = 4.71e-08, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | else return -0.07362095240046558;  // std dev = 0.163, 189.000 (wgt'ed) examples reached here.  /* #neg=189 */
%   else return -0.07324622576333692;  // std dev = 1.50e-07, 497.000 (wgt'ed) examples reached here.  /* #neg=497 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14960886412617758;  // std dev = 0.616, 292.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=288 */
%   | else if ( genre(A, E) )
%   | | then return -0.06553732636239148;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.15253485249837342;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.06989903295102959;  // std dev = 0.187, 156.000 (wgt'ed) examples reached here.  /* #neg=156 */
%   else return -0.06842697784420357;  // std dev = 0.000, 508.000 (wgt'ed) examples reached here.  /* #neg=508 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( genre(A, E) )
%   | | then return -0.17690739487819104;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0.1353708366151338;  // std dev = 0.013, 288.000 (wgt'ed) examples reached here.  /* #pos=288 */
%   | else if ( genre(A, F) )
%   | | then return -0.06163615365060768;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.13384384142406872;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.06429281651791785;  // std dev = 0.103, 133.000 (wgt'ed) examples reached here.  /* #neg=133 */
%   else return -0.06419184008202537;  // std dev = 2.43e-07, 503.000 (wgt'ed) examples reached here.  /* #neg=503 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063675
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.655 seconds
Total inference time: 0.893 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064898
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.695 seconds
Refined model CLL: -0.064898


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063675
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 8.167 seconds
Total inference time: 0.893 seconds
AUC ROC: 1.0
Total revision time: 8.167
Best scored revision CLL: -0.064898


Dataset: 4_cora_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 00:14:03
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063675, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 8.167, 'Inference time': 0.893, 'parameter_1.0': {'AUC ROC': 0.971565, 'AUC PR': 0.823063, 'CLL': -0.121211, 'Precision': [1.0, 0.5], 'Recall': 0.777778, 'F1': 0.875, 'Learning time': 1.97, 'Inference time': 0.88}}


Starting fold 1

Target train facts examples: 863
Target train pos examples: 326
Target train neg examples: 10928

Target test facts examples: 215
Target test pos	 examples: 56
Target test neg examples: 3308

Amount of data: 0.2
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;haswordauthor(E, C).;true;true
7;true,true,true;author(F, E), title(F, D).;false;false
7;true,true,false;title(G, D), venue(G, B).;false;false
7;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
7;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
7;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, B).;false;true
8;true,true,false;title(F, D), venue(F, A).;false;false
8;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
8;true,false,false;haswordvenue(A, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
8;false,true;haswordauthor(M, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;true,true;author(F, E), venue(F, B).;true;true
9;true,true,true;samebib(F, G), venue(G, A).;false;false
9;true,true,false;author(H, E), venue(H, A).;false;false
9;true,false;haswordtitle(I, C).;true;true
9;true,false,true;title(J, I), venue(J, A).;false;false
9;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995121;  // std dev = 2.06e-07, 47.000 (wgt'ed) examples reached here.  /* #pos=47 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.23314893509951237;  // std dev = 3.354, 48.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=18 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048763;  // std dev = 8.69e-08, 96.000 (wgt'ed) examples reached here.  /* #neg=96 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7018709528205518;  // std dev = 0.836, 48.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=47 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.19468117799361753;  // std dev = 3.375, 49.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=18 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839155;  // std dev = 0.000, 70.000 (wgt'ed) examples reached here.  /* #neg=70 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1372326158239703;  // std dev = 0.140, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( movie(E, A) )
%   | | then return 0.382654172832341;  // std dev = 0.387, 92.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=65 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360618;  // std dev = 8.43e-08, 106.000 (wgt'ed) examples reached here.  /* #neg=106 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4643918672582505;  // std dev = 1.52e-07, 47.000 (wgt'ed) examples reached here.  /* #pos=47 */
%   | else if ( genre(A, E) )
%   | | then return -0.09934458094573996;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.08899225619961601;  // std dev = 3.394, 50.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=18 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783624;  // std dev = 5.10e-09, 94.000 (wgt'ed) examples reached here.  /* #neg=94 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09080271661750072;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.3527287895746644;  // std dev = 6.66e-08, 47.000 (wgt'ed) examples reached here.  /* #pos=47 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.1201479705906394;  // std dev = 3.261, 44.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=18 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926094;  // std dev = 5.37e-08, 102.000 (wgt'ed) examples reached here.  /* #neg=102 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2769192977175389;  // std dev = 0.000, 47.000 (wgt'ed) examples reached here.  /* #pos=47 */
%   | else if ( movie(E, A) )
%   | | then return 0.034087802558704076;  // std dev = 0.469, 53.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=18 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 4.08e-08, 99.000 (wgt'ed) examples reached here.  /* #neg=99 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.2460215338184194;  // std dev = 0.196, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.22500847680397662;  // std dev = 0.000, 47.000 (wgt'ed) examples reached here.  /* #pos=47 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.10694069535446113;  // std dev = 3.207, 42.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=18 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.0787767547310916;  // std dev = 5.37e-08, 94.000 (wgt'ed) examples reached here.  /* #neg=94 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18820401589759977;  // std dev = 4.21e-08, 47.000 (wgt'ed) examples reached here.  /* #pos=47 */
%   | else if ( movie(E, B) )
%   | | then return 0.10294011066843023;  // std dev = 3.128, 42.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=18 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.07324622576333707;  // std dev = 0.000, 102.000 (wgt'ed) examples reached here.  /* #neg=102 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1512341942089562;  // std dev = 0.469, 48.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=47 */
%   | else if ( genre(A, E) )
%   | | then return -0.07560135282451277;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.04958082214711946;  // std dev = 3.235, 43.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=18 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420264;  // std dev = 5.02e-09, 113.000 (wgt'ed) examples reached here.  /* #neg=113 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.1417098321127099;  // std dev = 0.000, 47.000 (wgt'ed) examples reached here.  /* #pos=47 */
%   | | else if ( genre(A, G) )
%   | | | then return -0.07048450425416486;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0.058382838109892726;  // std dev = 3.178, 41.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=18 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.06419184008202626;  // std dev = 0.000, 81.000 (wgt'ed) examples reached here.  /* #neg=81 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.179283
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 0.886 seconds
Total inference time: 0.954 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.969583
   AUC PR    = 0.795519
   CLL	      = -0.166592
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.723077
   F1        = 0.839286


Total scoring time: 0.915 seconds
Parameter learned model CLL: -0.166592


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 4, 0], 'true,false,true': [2.06e-07, 0, 47], 'true,false,false,true': [3.354, 30, 18], 'true,false,false,false': [0.0, 0, 0], 'false,true': [8.69e-08, 96, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.836, 1, 47], 'true,false,true': [0.0, 3, 0], 'true,false,false,true': [3.375, 31, 18], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 70, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.14, 9, 0], 'true,false,true': [0.387, 27, 65], 'true,false,false': [0.0, 0, 0], 'false,true': [8.43e-08, 106, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.52e-07, 0, 47], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [3.394, 32, 18], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.1e-09, 94, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 4, 0], 'true,false,true': [6.66e-08, 0, 47], 'true,false,false,true': [3.261, 26, 18], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.37e-08, 102, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 47], 'true,false,true': [0.469, 35, 18], 'true,false,false': [0.0, 0, 0], 'false,true': [4.08e-08, 99, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.196, 3, 0], 'true,false,true': [0.0, 0, 47], 'true,false,false,true': [3.207, 24, 18], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.37e-08, 94, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [4.21e-08, 0, 47], 'true,false,true': [3.128, 24, 18], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 102, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.469, 1, 47], 'true,false,true': [0.0, 3, 0], 'true,false,false,true': [3.235, 25, 18], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.02e-09, 113, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true,true,false': 'genre(A, G)'}, {'true,true,true,true': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 47], 'true,true,false,true': [0.0, 1, 0], 'true,true,false,false': [3.178, 23, 18], 'true,false': [0.0, 0, 0], 'false': [0.0, 81, 0]}]]
[{'': [0.22548719518416419, 7.864079757761526e-17], 'true': [0.0, 0.2160664819944591], 'true,false': [9.070758328852342e-16, 0.23437499999999947], 'true,false,false': [0.23437499999999947, nan], 'false': [7.864079757761526e-17, nan]}, {'': [0.19273344256600558, -3.172065784643304e-17], 'true': [0.014562789099766308, 0.22456653271135132], 'true,false': [0.0, 0.23240316534777214], 'true,false,false': [0.23240316534777214, nan], 'false': [-3.172065784643304e-17, nan]}, {'': [0.15888673974532735, 6.70323335622736e-17], 'true': [0.0021728661417846815, 0.1501328857898369], 'true,false': [0.1501328857898369, nan], 'false': [6.70323335622736e-17, nan]}, {'': [0.15377379433297259, 2.362176648138631e-17], 'true': [4.913327428128353e-16, 0.2265642207655883], 'true,false': [0.0, 0.23039999999999974], 'true,false,false': [0.23039999999999974, nan], 'false': [2.362176648138631e-17, nan]}, {'': [0.12932255202382803, 2.829980258848438e-17], 'true': [0.0, 0.13039187858568832], 'true,false': [9.448706592554524e-17, 0.2417355371900827], 'true,false,false': [0.2417355371900827, nan], 'false': [2.829980258848438e-17, nan]}, {'': [0.13144707328068186, 1.682156097916904e-17], 'true': [-5.669223955532714e-17, 0.22029879234330185], 'true,false': [0.22029879234330185, nan], 'false': [1.682156097916904e-17, nan]}, {'': [0.12101936577203101, 3.0708296425802203e-17], 'true': [0.012767007849376824, 0.11904382444577238], 'true,false': [0.0, 0.24489795918367285], 'true,false,false': [0.24489795918367285, nan], 'false': [3.0708296425802203e-17, nan]}, {'': [0.11178369127976383, -4.353815782843751e-18], 'true': [3.7794826370218094e-17, 0.23303578647112358], 'true,false': [0.23303578647112358, nan], 'false': [-4.353815782843751e-18, nan]}, {'': [0.11715710365795305, 2.5544954548897407e-17], 'true': [0.004592231921403793, 0.22845787016127586], 'true,false': [0.0, 0.24337479718766866], 'true,false,false': [0.24337479718766866, nan], 'false': [2.5544954548897407e-17, nan]}, {'': [0.11549803766553458, -1.0965165675310187e-17], 'true': [0.11549803766553458, nan], 'true,true': [-1.1810883240693155e-17, 0.24080410399356952], 'true,true,false': [0.0, 0.24628197501487206], 'true,true,true': [nan, -1.1810883240693155e-17]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, E).;true;true
9;true,false;genre(A, G).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995121;  // std dev = 2.06e-07, 47.000 (wgt'ed) examples reached here.  /* #pos=47 */
%   | | else if ( actor(B) )
%   | | | then return -0.1418510649004877;  // std dev = 2.36e-08, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else return -0.14185106490048763;  // std dev = 8.69e-08, 104.000 (wgt'ed) examples reached here.  /* #neg=104 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.7194734122109544;  // std dev = 4.21e-08, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | else return 0.6842684934301482;  // std dev = 0.169, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.7194734122109542;  // std dev = 7.30e-08, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return -0.1295257424563033;  // std dev = 0.153, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   else return -0.1254446385283913;  // std dev = 0.000, 115.000 (wgt'ed) examples reached here.  /* #neg=115 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( actor(A), director(B) )
%   | | then return 0.5584362308227613;  // std dev = 0.033, 65.000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | | else return -0.11612281240606338;  // std dev = 0.141, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   else return -0.11231637819360624;  // std dev = 7.15e-08, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.42096671861195845;  // std dev = 0.029, 47.000 (wgt'ed) examples reached here.  /* #pos=47 */
%   | else if ( genre(A, E) )
%   | | then return -0.1015963294878363;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( actor(B) )
%   | | | then return -0.10087865721837934;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | | else return 0.41676721212479717;  // std dev = 4.71e-08, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else return -0.1015963294878363;  // std dev = 2.11e-08, 104.000 (wgt'ed) examples reached here.  /* #neg=104 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926097;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( genre(B, E) )
%   | | then return 0.32306043925406847;  // std dev = 0.026, 47.000 (wgt'ed) examples reached here.  /* #pos=47 */
%   | | else if ( actor(B) )
%   | | | then return -0.09209005167327107;  // std dev = 5.27e-09, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | | else return 0.3202058872805348;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else return -0.09269127618926104;  // std dev = 2.79e-08, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.2534897922633234;  // std dev = 0.000, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | else return 0.23849907732862516;  // std dev = 0.104, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | else if ( actor(B) )
%   | | then return -0.08471565218359692;  // std dev = 0.000848, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | | else return 0.2548269705862468;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else return -0.08518475138839682;  // std dev = 5.27e-08, 94.000 (wgt'ed) examples reached here.  /* #neg=94 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07881080444644241;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.21268255793464538;  // std dev = 0.029, 47.000 (wgt'ed) examples reached here.  /* #pos=47 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.2095137905187694;  // std dev = 1.49e-08, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return -0.09325105757844991;  // std dev = 0.365, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   else return -0.07877675473109162;  // std dev = 5.16e-08, 89.000 (wgt'ed) examples reached here.  /* #neg=89 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.17562737401135742;  // std dev = 0.000, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | else return 0.14495029429386783;  // std dev = 0.129, 25.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=23 */
%   | else if ( actor(B) )
%   | | then return -0.07186185173194795;  // std dev = 0.000, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | | else return 0.17691756957660004;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else return -0.07324622576333707;  // std dev = 0.000, 81.000 (wgt'ed) examples reached here.  /* #neg=81 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.15162846385424636;  // std dev = 1.83e-08, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | else return 0.14207767543844257;  // std dev = 0.097, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | else if ( genre(A, E) )
%   | | then return -0.06854304760660836;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.15260810955503118;  // std dev = 1.29e-08, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return -0.09835284700391218;  // std dev = 0.550, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   else return -0.06842697784420267;  // std dev = 4.01e-08, 85.000 (wgt'ed) examples reached here.  /* #neg=85 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1384140544191226;  // std dev = 0.037, 47.000 (wgt'ed) examples reached here.  /* #pos=47 */
%   | else if ( genre(A, E) )
%   | | then return -0.06429423865698862;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.13390104430471172;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return -0.07509999209021063;  // std dev = 0.379, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   else return -0.06419184008202626;  // std dev = 0.000, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.062951
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.398 seconds
Total inference time: 1.0 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.068282
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.901 seconds
Refined model CLL: -0.068282


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.062951
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 4.1 seconds
Total inference time: 1.0 seconds
AUC ROC: 1.0
Total revision time: 4.1
Best scored revision CLL: -0.068282


Dataset: 4_cora_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 00:14:09
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.062951, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 4.1, 'Inference time': 1.0, 'parameter_0.2': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.179283, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 0.886, 'Inference time': 0.954}}


Amount of data: 0.4
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;haswordauthor(E, C).;true;true
7;true,true,true;author(F, E), title(F, D).;false;false
7;true,true,false;title(G, D), venue(G, B).;false;false
7;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
7;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
7;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, B).;false;true
8;true,true,false;title(F, D), venue(F, A).;false;false
8;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
8;true,false,false;haswordvenue(A, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
8;false,true;haswordauthor(M, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;true,true;author(F, E), venue(F, B).;true;true
9;true,true,true;samebib(F, G), venue(G, A).;false;false
9;true,true,false;author(H, E), venue(H, A).;false;false
9;true,false;haswordtitle(I, C).;true;true
9;true,false,true;title(J, I), venue(J, A).;false;false
9;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995112;  // std dev = 4.77e-07, 105.000 (wgt'ed) examples reached here.  /* #pos=105 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.16302698387999923;  // std dev = 4.169, 82.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=25 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048838;  // std dev = 0.000, 197.000 (wgt'ed) examples reached here.  /* #neg=197 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7115024872039797;  // std dev = 0.841, 106.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=105 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.13124028133844598;  // std dev = 4.201, 85.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=25 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839163;  // std dev = 0.000, 197.000 (wgt'ed) examples reached here.  /* #neg=197 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360638;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( movie(E, A) )
%   | | then return 0.4046286306504125;  // std dev = 0.356, 175.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=130 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360643;  // std dev = 0.000, 176.000 (wgt'ed) examples reached here.  /* #neg=176 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.45027944275683796;  // std dev = 0.660, 106.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=105 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783627;  // std dev = 3.73e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.07941429270648251;  // std dev = 4.096, 76.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=25 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783656;  // std dev = 0.000, 209.000 (wgt'ed) examples reached here.  /* #neg=209 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14924170776003606;  // std dev = 0.335, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else if ( genre(B, E) )
%   | | then return 0.3487451768724268;  // std dev = 0.000, 105.000 (wgt'ed) examples reached here.  /* #pos=105 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.04017967230740785;  // std dev = 4.169, 82.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=25 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926054;  // std dev = 9.54e-08, 212.000 (wgt'ed) examples reached here.  /* #neg=212 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.25935956658375325;  // std dev = 0.914, 108.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=105 */
%   | else if ( movie(E, A) )
%   | | then return 0.03643824876050265;  // std dev = 0.452, 84.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=25 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 7.30e-08, 185.000 (wgt'ed) examples reached here.  /* #neg=185 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11651630512657118;  // std dev = 0.213, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( genre(B, E) )
%   | | then return 0.22571546176888455;  // std dev = 0.000, 105.000 (wgt'ed) examples reached here.  /* #pos=105 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.007479338072469932;  // std dev = 4.221, 87.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=25 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109146;  // std dev = 7.15e-08, 209.000 (wgt'ed) examples reached here.  /* #neg=209 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18420568848446775;  // std dev = 0.476, 106.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=105 */
%   | else if ( movie(E, B) )
%   | | then return 0.007849968263454918;  // std dev = 4.205, 90.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=25 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.07324622576333668;  // std dev = 1.10e-07, 187.000 (wgt'ed) examples reached here.  /* #neg=187 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.15294158307828803;  // std dev = 0.687, 107.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=105 */
%   | else if ( genre(A, E) )
%   | | then return -0.07567064090396557;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.027874900730295218;  // std dev = 4.315, 98.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=25 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420262;  // std dev = 5.74e-09, 192.000 (wgt'ed) examples reached here.  /* #neg=192 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.14239643636857477;  // std dev = 0.000, 105.000 (wgt'ed) examples reached here.  /* #pos=105 */
%   | | else if ( genre(A, G) )
%   | | | then return -0.07054491744432087;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.006735441481409401;  // std dev = 4.231, 88.000 (wgt'ed) examples reached here.  /* #neg=63 #pos=25 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.06419184008202626;  // std dev = 0.000, 189.000 (wgt'ed) examples reached here.  /* #neg=189 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.133386
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.198 seconds
Total inference time: 0.986 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.97721
   AUC PR    = 0.854744
   CLL	      = -0.131022
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.807692
   F1        = 0.893617


Total scoring time: 1.191 seconds
Parameter learned model CLL: -0.131022


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 6, 0], 'true,false,true': [4.77e-07, 0, 105], 'true,false,false,true': [4.169, 57, 25], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 197, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.841, 1, 105], 'true,false,true': [0.0, 4, 0], 'true,false,false,true': [4.201, 60, 25], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 197, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 5, 0], 'true,false,true': [0.356, 45, 130], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 176, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.66, 1, 105], 'true,false,true': [3.73e-09, 8, 0], 'true,false,false,true': [4.096, 51, 25], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 209, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.335, 14, 0], 'true,false,true': [0.0, 0, 105], 'true,false,false,true': [4.169, 57, 25], 'true,false,false,false': [0.0, 0, 0], 'false,true': [9.54e-08, 212, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.914, 3, 105], 'true,false,true': [0.452, 59, 25], 'true,false,false': [0.0, 0, 0], 'false,true': [7.3e-08, 185, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.213, 7, 0], 'true,false,true': [0.0, 0, 105], 'true,false,false,true': [4.221, 62, 25], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.15e-08, 209, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.476, 1, 105], 'true,false,true': [4.205, 65, 25], 'true,false,false': [0.0, 0, 0], 'false,true': [1.1e-07, 187, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.687, 2, 105], 'true,false,true': [0.0, 9, 0], 'true,false,false,true': [4.315, 73, 25], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.74e-09, 192, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true,true,false': 'genre(A, G)'}, {'true,true,true,true': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 105], 'true,true,false,true': [0.0, 4, 0], 'true,true,false,false': [4.231, 63, 25], 'true,false': [0.0, 0, 0], 'false': [0.0, 189, 0]}]]
[{'': [0.219871674407371, -2.366972945901349e-16], 'true': [-6.938893903907228e-18, 0.21190197031657051], 'true,false': [2.1654635756498293e-15, 0.2119274241522914], 'true,false,false': [0.2119274241522914, nan], 'false': [-2.366972945901349e-16, nan]}, {'': [0.18230589106258643, -3.1559639278684655e-17], 'true': [0.006671242774015521, 0.20110969140811866], 'true,false': [0.0, 0.2076124567474041], 'true,false,false': [0.2076124567474041, nan], 'false': [-3.1559639278684655e-17, nan]}, {'': [0.1305093397480683, -1.0092936587501423e-17], 'true': [0.0, 0.1268150629663415], 'true,false': [0.1268150629663415, nan], 'false': [-1.0092936587501423e-17, nan]}, {'': [0.12899187609989396, -8.286832145527484e-17], 'true': [0.004115343955849092, 0.2025413197685473], 'true,false': [1.734723475976807e-18, 0.22074099722991664], 'true,false,false': [0.22074099722991664, nan], 'false': [-8.286832145527484e-17, nan]}, {'': [0.11734867778652075, 4.294258868833153e-17], 'true': [0.007994878277102288, 0.11637382298268432], 'true,false': [-1.6917684184764292e-17, 0.2119274241522905], 'true,false,false': [0.2119274241522905, nan], 'false': [4.294258868833153e-17, nan]}, {'': [0.10596262378203901, 2.880578658486893e-17], 'true': [0.007731530738600943, 0.2043069168180356], 'true,false': [0.2043069168180356, nan], 'false': [2.880578658486893e-17, nan]}, {'': [0.10315301174828712, 2.4435530685529762e-17], 'true': [0.006488871849228893, 0.1045942478329639], 'true,false': [-8.458842092382145e-17, 0.20478266613819554], 'true,false,false': [0.20478266613819554, nan], 'false': [2.4435530685529762e-17, nan]}, {'': [0.09910030669060509, 6.411983243824433e-17], 'true': [0.002135314961179789, 0.19648340669338135], 'true,false': [0.19648340669338135, nan], 'false': [6.411983243824433e-17, nan]}, {'': [0.09785822578873754, 3.2959746043559335e-17], 'true': [0.004416585512650037, 0.17421756577231087], 'true,false': [-1.5419764230904951e-18, 0.19002498958767222], 'true,false,false': [0.19002498958767222, nan], 'false': [3.2959746043559335e-17, nan]}, {'': [0.09577806904821924, -3.52451753849256e-18], 'true': [0.09577806904821924, nan], 'true,true': [-3.8064789415719653e-17, 0.19478888734110966], 'true,true,false': [0.0, 0.20338326446281], 'true,true,true': [nan, -3.8064789415719653e-17]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, E).;true;true
9;true,false;genre(A, G).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995112;  // std dev = 4.77e-07, 105.000 (wgt'ed) examples reached here.  /* #pos=105 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.858148935099512;  // std dev = 1.33e-07, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | | else return -0.14185106490048766;  // std dev = 6.66e-08, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
%   else return -0.14185106490048832;  // std dev = 0.000, 185.000 (wgt'ed) examples reached here.  /* #neg=185 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.7194734122109551;  // std dev = 0.000, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | | else return 0.6926506169493878;  // std dev = 0.148, 63.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=61 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( actor(B) )
%   | | | then return -0.1254446385283916;  // std dev = 0.000, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
%   | | | else return 0.7194734122109544;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.12544463852839163;  // std dev = 0.000, 197.000 (wgt'ed) examples reached here.  /* #neg=197 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( actor(B) )
%   | | then return -0.11231637819360639;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return -0.22283857579869468;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( actor(A), director(B) )
%   | | then return 0.5584695805825217;  // std dev = 0.038, 130.000 (wgt'ed) examples reached here.  /* #pos=130 */
%   | | else return -0.1178021839249904;  // std dev = 0.195, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
%   else return -0.11231637819360663;  // std dev = 0.000, 203.000 (wgt'ed) examples reached here.  /* #neg=203 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.41675910574438985;  // std dev = 0.000, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | | else return 0.413455628617142;  // std dev = 0.077, 62.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=61 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783627;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.41675910574438946;  // std dev = 4.21e-08, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | | else return -0.1039719456686817;  // std dev = 0.105, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   else return -0.10159632948783649;  // std dev = 0.000, 180.000 (wgt'ed) examples reached here.  /* #neg=180 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926098;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.3240305312848442;  // std dev = 0.033, 105.000 (wgt'ed) examples reached here.  /* #pos=105 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.32020039247617205;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | | else return -0.09527391938330787;  // std dev = 0.138, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
%   else return -0.0926912761892606;  // std dev = 8.82e-08, 185.000 (wgt'ed) examples reached here.  /* #neg=185 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.25693538011371636;  // std dev = 0.031, 130.000 (wgt'ed) examples reached here.  /* #pos=130 */
%   | else return -0.0895920923180939;  // std dev = 0.218, 84.000 (wgt'ed) examples reached here.  /* #neg=84 */
%   else return -0.08518475138839678;  // std dev = 7.45e-08, 186.000 (wgt'ed) examples reached here.  /* #neg=186 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( actor(B) )
%   | | then return -0.07845750289067248;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return -0.22428514901043503;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.21144266248848467;  // std dev = 0.025, 105.000 (wgt'ed) examples reached here.  /* #pos=105 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.209161547626147;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | | else return -0.08232672568020673;  // std dev = 0.145, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   else return -0.07877675473109146;  // std dev = 6.66e-08, 218.000 (wgt'ed) examples reached here.  /* #neg=218 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.17577198297327737;  // std dev = 5.58e-08, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | | else return 0.17424605465580298;  // std dev = 0.046, 62.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=61 */
%   | else if ( actor(B) )
%   | | then return -0.07211686464727952;  // std dev = 0.003, 70.000 (wgt'ed) examples reached here.  /* #neg=70 */
%   | | else return 0.17665911317339855;  // std dev = 1.05e-08, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.07324622576333663;  // std dev = 1.25e-07, 208.000 (wgt'ed) examples reached here.  /* #neg=208 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.15173833600150566;  // std dev = 2.58e-08, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | | else return 0.14406201357766144;  // std dev = 0.065, 63.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=61 */
%   | else if ( genre(A, E) )
%   | | then return -0.06823861519764808;  // std dev = 4.56e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( actor(B) )
%   | | | then return -0.06733415116228424;  // std dev = 0.000, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   | | | else return 0.11708470915579286;  // std dev = 0.540, 28.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=25 */
%   else return -0.06842697784420262;  // std dev = 7.81e-08, 187.000 (wgt'ed) examples reached here.  /* #neg=187 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.13322154416710436;  // std dev = 3.16e-08, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | | else return 0.1258004062130281;  // std dev = 0.066, 63.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=61 */
%   | else if ( genre(A, E) )
%   | | then return -0.06402562156999995;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.13789409304627975;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | | else return -0.06500799470933455;  // std dev = 0.131, 74.000 (wgt'ed) examples reached here.  /* #neg=74 */
%   else return -0.06419184008202626;  // std dev = 0.000, 190.000 (wgt'ed) examples reached here.  /* #neg=190 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063406
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.881 seconds
Total inference time: 0.957 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.066008
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.129 seconds
Refined model CLL: -0.066008


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063406
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 5.399000000000001 seconds
Total inference time: 0.957 seconds
AUC ROC: 1.0
Total revision time: 5.399000000000001
Best scored revision CLL: -0.066008


Dataset: 4_cora_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 00:14:17
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063406, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 5.399000000000001, 'Inference time': 0.957, 'parameter_0.4': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.133386, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 1.198, 'Inference time': 0.986}}


Amount of data: 0.6
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;haswordauthor(E, C).;true;true
7;true,true,true;author(F, E), title(F, D).;false;false
7;true,true,false;title(G, D), venue(G, B).;false;false
7;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
7;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
7;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, B).;false;true
8;true,true,false;title(F, D), venue(F, A).;false;false
8;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
8;true,false,false;haswordvenue(A, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
8;false,true;haswordauthor(M, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;true,true;author(F, E), venue(F, B).;true;true
9;true,true,true;samebib(F, G), venue(G, A).;false;false
9;true,true,false;author(H, E), venue(H, A).;false;false
9;true,false;haswordtitle(I, C).;true;true
9;true,false,true;title(J, I), venue(J, A).;false;false
9;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995097;  // std dev = 9.83e-07, 157.000 (wgt'ed) examples reached here.  /* #pos=157 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.13153023006353975;  // std dev = 5.255, 139.000 (wgt'ed) examples reached here.  /* #neg=101 #pos=38 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048793;  // std dev = 0.000, 287.000 (wgt'ed) examples reached here.  /* #neg=287 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7141258296113402;  // std dev = 0.842, 158.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=157 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.1718064777192164;  // std dev = 5.044, 115.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=38 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.125444638528392;  // std dev = 0.000, 298.000 (wgt'ed) examples reached here.  /* #neg=298 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12110587300405365;  // std dev = 0.110, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( movie(E, A) )
%   | | then return 0.35407562876190224;  // std dev = 0.379, 287.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=195 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360696;  // std dev = 0.000, 281.000 (wgt'ed) examples reached here.  /* #neg=281 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4558071847708548;  // std dev = 1.157, 160.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=157 */
%   | else if ( genre(A, E) )
%   | | then return -0.10079687725135388;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.06215442028525129;  // std dev = 5.143, 125.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=38 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783662;  // std dev = 0.000, 288.000 (wgt'ed) examples reached here.  /* #neg=288 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.13171443809069897;  // std dev = 0.307, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else if ( genre(B, E) )
%   | | then return 0.35843628619030266;  // std dev = 0.000, 157.000 (wgt'ed) examples reached here.  /* #pos=157 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.08285914767024234;  // std dev = 5.022, 113.000 (wgt'ed) examples reached here.  /* #neg=75 #pos=38 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926043;  // std dev = 1.48e-07, 292.000 (wgt'ed) examples reached here.  /* #neg=292 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2672428636076691;  // std dev = 1.076, 161.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=157 */
%   | else if ( movie(E, A) )
%   | | then return 0.0018620862073254086;  // std dev = 0.433, 147.000 (wgt'ed) examples reached here.  /* #neg=109 #pos=38 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 9.66e-08, 273.000 (wgt'ed) examples reached here.  /* #neg=273 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.146492957018438;  // std dev = 0.351, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( genre(B, E) )
%   | | then return 0.2300840407978798;  // std dev = 0.000, 157.000 (wgt'ed) examples reached here.  /* #pos=157 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.027089673658682138;  // std dev = 5.169, 128.000 (wgt'ed) examples reached here.  /* #neg=90 #pos=38 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109143;  // std dev = 6.14e-08, 252.000 (wgt'ed) examples reached here.  /* #neg=252 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1828656779094744;  // std dev = 0.824, 160.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=157 */
%   | else if ( movie(E, B) )
%   | | then return 0.0712265040953481;  // std dev = 4.957, 115.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=38 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.07324622576333689;  // std dev = 1.08e-07, 275.000 (wgt'ed) examples reached here.  /* #neg=275 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.15586689639424178;  // std dev = 0.845, 160.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=157 */
%   | else if ( genre(A, E) )
%   | | then return -0.0762575227777088;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.04374738469262732;  // std dev = 5.033, 114.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=38 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420301;  // std dev = 0.000, 302.000 (wgt'ed) examples reached here.  /* #neg=302 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return -0.36233222467363185;  // std dev = 7.45e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.1447168705314503;  // std dev = 0.000, 157.000 (wgt'ed) examples reached here.  /* #pos=157 */
%   | | else if ( genre(A, G) )
%   | | | then return -0.07105635494102248;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return 0.026118251762783564;  // std dev = 5.065, 117.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=38 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.06419184008202597;  // std dev = 1.13e-07, 297.000 (wgt'ed) examples reached here.  /* #neg=297 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.142756
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.34 seconds
Total inference time: 0.961 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.978227
   AUC PR    = 0.856951
   CLL	      = -0.137312
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.805128
   F1        = 0.892045


Total scoring time: 1.327 seconds
Parameter learned model CLL: -0.137312


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 14, 0], 'true,false,true': [9.83e-07, 0, 157], 'true,false,false,true': [5.255, 101, 38], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 287, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.842, 1, 157], 'true,false,true': [0.0, 9, 0], 'true,false,false,true': [5.044, 77, 38], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 298, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.11, 13, 0], 'true,false,true': [0.379, 92, 195], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 281, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.157, 3, 157], 'true,false,true': [0.0, 8, 0], 'true,false,false,true': [5.143, 87, 38], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 288, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.307, 15, 0], 'true,false,true': [0.0, 0, 157], 'true,false,false,true': [5.022, 75, 38], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.48e-07, 292, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [1.076, 4, 157], 'true,false,true': [0.433, 109, 38], 'true,false,false': [0.0, 0, 0], 'false,true': [9.66e-08, 273, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.351, 11, 0], 'true,false,true': [0.0, 0, 157], 'true,false,false,true': [5.169, 90, 38], 'true,false,false,false': [0.0, 0, 0], 'false,true': [6.14e-08, 252, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.824, 3, 157], 'true,false,true': [4.957, 77, 38], 'true,false,false': [0.0, 0, 0], 'false,true': [1.08e-07, 275, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.845, 3, 157], 'true,false,true': [0.0, 13, 0], 'true,false,false,true': [5.033, 76, 38], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 302, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true,true,false': 'genre(A, G)'}, {'true,true,true,true': [7.45e-09, 3, 0], 'true,true,true,false': [0.0, 0, 157], 'true,true,false,true': [0.0, 9, 0], 'true,true,false,false': [5.065, 79, 38], 'true,false': [0.0, 0, 0], 'false': [1.13e-07, 297, 0]}]]
[{'': [0.2333506763787768, -3.0946983264812726e-18], 'true': [-1.1895246692412391e-17, 0.2247877100073094], 'true,false': [6.155019876648002e-15, 0.1986439625278208], 'true,false,false': [0.1986439625278208, nan], 'false': [-3.0946983264812726e-18, nan]}, {'': [0.17369441405758215, -8.345300587786412e-17], 'true': [0.004489672426572971, 0.21113697114803234], 'true,false': [0.0, 0.22124763705103992], 'true,false,false': [0.22124763705103992, nan], 'false': [-8.345300587786412e-17, nan]}, {'': [0.14647061093480251, -1.1378798259503384e-16], 'true': [0.0009270626282745711, 0.14327861925711605], 'true,false': [0.14327861925711605, nan], 'false': [-1.1378798259503384e-16, nan]}, {'': [0.13586696484806335, -5.705312765434832e-17], 'true': [0.008370768245498627, 0.20035825232454377], 'true,false': [-1.734723475976807e-18, 0.2115839999999994], 'true,false,false': [0.2115839999999994, nan], 'false': [-5.705312765434832e-17, nan]}, {'': [0.11334095958651295, 7.452181946114065e-17], 'true': [0.0063021173152277765, 0.11189348430137702], 'true,false': [-9.956649800460002e-16, 0.22319680476153086], 'true,false,false': [0.22319680476153086, nan], 'false': [7.452181946114065e-17, nan]}, {'': [0.11072841333124477, 3.416070845000482e-17], 'true': [0.007193147361080555, 0.18731008965617463], 'true,false': [0.18731008965617463, nan], 'false': [3.416070845000482e-17, nan]}, {'': [0.10341246206648383, 1.497919953859338e-17], 'true': [0.011184135393134155, 0.1039450151586536], 'true,false': [-9.051499818600003e-17, 0.20874023437499983], 'true,false,false': [0.20874023437499983, nan], 'false': [1.497919953859338e-17, nan]}, {'': [0.09486684456897235, 4.279405113100603e-17], 'true': [0.004240750440570223, 0.2137039458261898], 'true,false': [0.2137039458261898, nan], 'false': [4.279405113100603e-17, nan]}, {'': [0.09515819137059463, -5.881976289404803e-17], 'true': [0.004457985725836727, 0.20079830608581375], 'true,false': [-3.2025664171879517e-18, 0.22222222222222346], 'true,false,false': [0.22222222222222346, nan], 'false': [-5.881976289404803e-17, nan]}, {'': [0.09595422442727676, 4.261462114722823e-17], 'true': [0.09595422442727676, nan], 'true,true': [0.004730215926197087, 0.20426218537623447], 'true,true,false': [0.0, 0.21930016801811783], 'true,true,true': [1.850371707708594e-17, -1.9800155853187504e-17]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, E).;true;true
9;true,true;genre(A, F).;true;true
9;true,false;genre(A, G).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995097;  // std dev = 9.83e-07, 157.000 (wgt'ed) examples reached here.  /* #pos=157 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.8581489350995115;  // std dev = 2.60e-07, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | | else return -0.14185106490048763;  // std dev = 7.88e-08, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */
%   else return -0.14185106490048793;  // std dev = 0.000, 288.000 (wgt'ed) examples reached here.  /* #neg=288 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.7194734122109547;  // std dev = 0.000, 61.000 (wgt'ed) examples reached here.  /* #pos=61 */
%   | | else return 0.7107629168425075;  // std dev = 0.085, 97.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=96 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.719473412210955;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | | else return -0.1254446385283915;  // std dev = 0.000, 81.000 (wgt'ed) examples reached here.  /* #neg=81 */
%   else return -0.12544463852839202;  // std dev = 0.000, 304.000 (wgt'ed) examples reached here.  /* #neg=304 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( actor(B) )
%   | | then return -0.11231637819360636;  // std dev = 1.05e-08, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else return -0.22599103111821575;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( actor(B) )
%   | | then return -0.1123163781936062;  // std dev = 7.74e-08, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
%   | | else return 0.5564248352256382;  // std dev = 0.015, 195.000 (wgt'ed) examples reached here.  /* #pos=195 */
%   else return -0.1123163781936069;  // std dev = 0.000, 263.000 (wgt'ed) examples reached here.  /* #neg=263 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.41725620838486943;  // std dev = 0.000, 61.000 (wgt'ed) examples reached here.  /* #pos=61 */
%   | | else return 0.4069616245505857;  // std dev = 0.086, 98.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=96 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783627;  // std dev = 5.27e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.41725620838486854;  // std dev = 5.96e-08, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | | else return -0.10409780644266556;  // std dev = 0.135, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
%   else return -0.10159632948783662;  // std dev = 0.000, 298.000 (wgt'ed) examples reached here.  /* #neg=298 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( actor(B) )
%   | | then return -0.09269127618926098;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return -0.2592025277420373;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.3230769113227172;  // std dev = 0.025, 157.000 (wgt'ed) examples reached here.  /* #pos=157 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.3205373648185925;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | | else return -0.09344715409313147;  // std dev = 0.073, 76.000 (wgt'ed) examples reached here.  /* #neg=76 */
%   else return -0.09269127618926043;  // std dev = 1.44e-07, 288.000 (wgt'ed) examples reached here.  /* #neg=288 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.256448704833685;  // std dev = 0.024, 195.000 (wgt'ed) examples reached here.  /* #pos=195 */
%   | else return -0.08857930355701983;  // std dev = 0.201, 108.000 (wgt'ed) examples reached here.  /* #neg=108 */
%   else return -0.08518475138839678;  // std dev = 1.03e-07, 298.000 (wgt'ed) examples reached here.  /* #neg=298 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( actor(B) )
%   | | then return -0.07853076073578992;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else return -0.19814965877440738;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.2109542091848426;  // std dev = 0.019, 157.000 (wgt'ed) examples reached here.  /* #pos=157 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.20944244925428376;  // std dev = 5.77e-08, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | | else return -0.07962707553153815;  // std dev = 0.089, 96.000 (wgt'ed) examples reached here.  /* #neg=96 */
%   else return -0.07877675473109143;  // std dev = 5.58e-08, 264.000 (wgt'ed) examples reached here.  /* #neg=264 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.17775792053094341;  // std dev = 0.018, 195.000 (wgt'ed) examples reached here.  /* #pos=195 */
%   | else return -0.07699058007725766;  // std dev = 0.196, 105.000 (wgt'ed) examples reached here.  /* #neg=105 */
%   else return -0.07324622576333693;  // std dev = 1.03e-07, 287.000 (wgt'ed) examples reached here.  /* #neg=287 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.15193027757667218;  // std dev = 4.94e-08, 61.000 (wgt'ed) examples reached here.  /* #pos=61 */
%   | | else if ( actor(A) )
%   | | | then return 0.15439526584891017;  // std dev = 6.32e-08, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   | | | else return -0.158019338600547;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(A, E) )
%   | | then return -0.06798889596093678;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.15245301457007293;  // std dev = 1.05e-08, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | | else return -0.06840190883377172;  // std dev = 0.056, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */
%   else return -0.06842697784420292;  // std dev = 0.000, 282.000 (wgt'ed) examples reached here.  /* #neg=282 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( genre(A, E) )
%   | | then return -0.1381121688250239;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return 0.1345476405621382;  // std dev = 0.012, 157.000 (wgt'ed) examples reached here.  /* #pos=157 */
%   | else if ( genre(A, F) )
%   | | then return -0.06380517939888533;  // std dev = 4.56e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.13377993200582808;  // std dev = 2.11e-08, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | | else return -0.0641418488519828;  // std dev = 0.053, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */
%   else return -0.06419184008202605;  // std dev = 9.42e-08, 281.000 (wgt'ed) examples reached here.  /* #neg=281 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063304
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.088 seconds
Total inference time: 1.001 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064699
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.323 seconds
Refined model CLL: -0.064699


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063304
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 6.077999999999999 seconds
Total inference time: 1.001 seconds
AUC ROC: 1.0
Total revision time: 6.077999999999999
Best scored revision CLL: -0.064699


Dataset: 4_cora_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 00:14:26
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063304, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 6.077999999999999, 'Inference time': 1.001, 'parameter_0.6': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.142756, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 1.34, 'Inference time': 0.961}}


Amount of data: 0.8
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;haswordauthor(E, C).;true;true
7;true,true,true;author(F, E), title(F, D).;false;false
7;true,true,false;title(G, D), venue(G, B).;false;false
7;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
7;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
7;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, B).;false;true
8;true,true,false;title(F, D), venue(F, A).;false;false
8;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
8;true,false,false;haswordvenue(A, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
8;false,true;haswordauthor(M, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;true,true;author(F, E), venue(F, B).;true;true
9;true,true,true;samebib(F, G), venue(G, A).;false;false
9;true,true,false;author(H, E), venue(H, A).;false;false
9;true,false;haswordtitle(I, C).;true;true
9;true,false,true;title(J, I), venue(J, A).;false;false
9;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995091;  // std dev = 1.08e-06, 212.000 (wgt'ed) examples reached here.  /* #pos=212 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.16584124279182022;  // std dev = 5.765, 156.000 (wgt'ed) examples reached here.  /* #neg=108 #pos=48 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048727;  // std dev = 3.01e-07, 419.000 (wgt'ed) examples reached here.  /* #neg=419 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.70000525435982;  // std dev = 1.867, 217.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=212 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 7.45e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.1276476415414191;  // std dev = 5.834, 165.000 (wgt'ed) examples reached here.  /* #neg=117 #pos=48 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839224;  // std dev = 0.000, 386.000 (wgt'ed) examples reached here.  /* #neg=386 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12163291827069483;  // std dev = 0.107, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else if ( movie(E, A) )
%   | | then return 0.35719049984088785;  // std dev = 0.377, 381.000 (wgt'ed) examples reached here.  /* #neg=121 #pos=260 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360621;  // std dev = 0.000, 402.000 (wgt'ed) examples reached here.  /* #neg=402 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.46488854786211514;  // std dev = 0.950, 214.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=212 */
%   | else if ( genre(A, E) )
%   | | then return -0.10074911756938286;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.09505113844194826;  // std dev = 5.647, 143.000 (wgt'ed) examples reached here.  /* #neg=95 #pos=48 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.101596329487836;  // std dev = 1.00e-08, 387.000 (wgt'ed) examples reached here.  /* #neg=387 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09198146188961032;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( genre(B, E) )
%   | | then return 0.3588789275631679;  // std dev = 0.000, 212.000 (wgt'ed) examples reached here.  /* #pos=212 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.0097503374329337;  // std dev = 5.927, 179.000 (wgt'ed) examples reached here.  /* #neg=131 #pos=48 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926114;  // std dev = 9.42e-08, 438.000 (wgt'ed) examples reached here.  /* #neg=438 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2810797160525947;  // std dev = 0.000, 212.000 (wgt'ed) examples reached here.  /* #pos=212 */
%   | else if ( movie(E, A) )
%   | | then return 0.037344985193935615;  // std dev = 0.450, 166.000 (wgt'ed) examples reached here.  /* #neg=118 #pos=48 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 1.19e-07, 356.000 (wgt'ed) examples reached here.  /* #neg=356 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1221176775135956;  // std dev = 0.317, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else if ( genre(B, E) )
%   | | then return 0.2279026848832424;  // std dev = 2.63e-07, 212.000 (wgt'ed) examples reached here.  /* #pos=212 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.00233986708425364;  // std dev = 5.939, 181.000 (wgt'ed) examples reached here.  /* #neg=133 #pos=48 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109141;  // std dev = 1.25e-07, 406.000 (wgt'ed) examples reached here.  /* #neg=406 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18340754805124765;  // std dev = 0.849, 215.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=212 */
%   | else if ( movie(E, B) )
%   | | then return 0.01952373054433293;  // std dev = 5.822, 180.000 (wgt'ed) examples reached here.  /* #neg=132 #pos=48 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.07324622576333717;  // std dev = 4.71e-08, 378.000 (wgt'ed) examples reached here.  /* #neg=378 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.15423544051232993;  // std dev = 1.005, 216.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=212 */
%   | else if ( genre(A, E) )
%   | | then return -0.07966494345108936;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.00337171898012387;  // std dev = 5.902, 175.000 (wgt'ed) examples reached here.  /* #neg=127 #pos=48 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420328;  // std dev = 0.000, 375.000 (wgt'ed) examples reached here.  /* #neg=375 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.14359610725019586;  // std dev = 0.000, 212.000 (wgt'ed) examples reached here.  /* #pos=212 */
%   | | else if ( genre(A, G) )
%   | | | then return -0.07401617569265352;  // std dev = 6.45e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.01413379563793267;  // std dev = 5.855, 168.000 (wgt'ed) examples reached here.  /* #neg=120 #pos=48 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.06419184008202564;  // std dev = 1.88e-07, 388.000 (wgt'ed) examples reached here.  /* #neg=388 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.131912
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.536 seconds
Total inference time: 1.043 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.978037
   AUC PR    = 0.860368
   CLL	      = -0.129988
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.815385
   F1        = 0.898305


Total scoring time: 1.535 seconds
Parameter learned model CLL: -0.129988


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 16, 0], 'true,false,true': [1.08e-06, 0, 212], 'true,false,false,true': [5.765, 108, 48], 'true,false,false,false': [0.0, 0, 0], 'false,true': [3.01e-07, 419, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.867, 5, 212], 'true,false,true': [7.45e-09, 15, 0], 'true,false,false,true': [5.834, 117, 48], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 386, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.107, 12, 0], 'true,false,true': [0.377, 121, 260], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 402, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.95, 2, 212], 'true,false,true': [0.0, 11, 0], 'true,false,false,true': [5.647, 95, 48], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1e-08, 387, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 7, 0], 'true,false,true': [0.0, 0, 212], 'true,false,false,true': [5.927, 131, 48], 'true,false,false,false': [0.0, 0, 0], 'false,true': [9.42e-08, 438, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 212], 'true,false,true': [0.45, 118, 48], 'true,false,false': [0.0, 0, 0], 'false,true': [1.19e-07, 356, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.317, 14, 0], 'true,false,true': [2.63e-07, 0, 212], 'true,false,false,true': [5.939, 133, 48], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.25e-07, 406, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.849, 3, 212], 'true,false,true': [5.822, 132, 48], 'true,false,false': [0.0, 0, 0], 'false,true': [4.71e-08, 378, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [1.005, 4, 212], 'true,false,true': [0.0, 17, 0], 'true,false,false,true': [5.902, 127, 48], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 375, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true,true,false': 'genre(A, G)'}, {'true,true,true,true': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 212], 'true,true,false,true': [6.45e-09, 12, 0], 'true,true,false,false': [5.855, 120, 48], 'true,false': [0.0, 0, 0], 'false': [1.88e-07, 388, 0]}]]
[{'': [0.21864149305555916, 2.162152716215102e-16], 'true': [-6.938893903907228e-18, 0.20734877126654433], 'true,false': [5.496651352106436e-15, 0.21301775147929078], 'true,false,false': [0.21301775147929078, nan], 'false': [2.162152716215102e-16, nan]}, {'': [0.1840168698360773, -1.2425293954354083e-16], 'true': [0.016069988812948036, 0.19398405301133004], 'true,false': [3.7007434154171884e-18, 0.20628099173553957], 'true,false,false': [0.20628099173553957, nan], 'false': [-1.2425293954354083e-16, nan]}, {'': [0.1443683579620965, -1.9884591485823698e-17], 'true': [0.0009547771090879694, 0.1418846534826285], 'true,false': [0.1418846534826285, nan], 'false': [-1.9884591485823698e-17, nan]}, {'': [0.12601972461013727, 9.983400841590555e-17], 'true': [0.004216772502528207, 0.20960847091368467], 'true,false': [-6.308085367188389e-18, 0.2229937894273564], 'true,false,false': [0.2229937894273564, nan], 'false': [9.983400841590555e-17, nan]}, {'': [0.11944950051217239, 2.0278046111875004e-17], 'true': [-9.912705577010326e-19, 0.12009831997603895], 'true,false': [-1.2736143376831984e-15, 0.19624855653693796], 'true,false,false': [0.19624855653693796, nan], 'false': [2.0278046111875004e-17, nan]}, {'': [0.10336894303113177, 3.991813122247754e-17], 'true': [-2.681293342490944e-16, 0.2020642939897864], 'true,false': [0.2020642939897864, nan], 'false': [3.991813122247754e-17, nan]}, {'': [0.10160186608405787, 3.828355257328126e-17], 'true': [0.007182505916983136, 0.102917821653481], 'true,false': [3.267826261160838e-16, 0.1948658465858791], 'true,false,false': [0.1948658465858791, nan], 'false': [3.828355257328126e-17, nan]}, {'': [0.09429014864399901, 5.8741958974876004e-18], 'true': [0.003352202040867372, 0.18829161372104927], 'true,false': [0.18829161372104927, nan], 'false': [5.8741958974876004e-18, nan]}, {'': [0.09435003479819296, -1.0125233984581428e-16], 'true': [0.004672374912189669, 0.18198501903980377], 'true,false': [-2.44902137784961e-18, 0.19905306122449024], 'true,false,false': [0.19905306122449024, nan], 'false': [-1.0125233984581428e-16, nan]}, {'': [0.09223421339310532, 9.099250562649479e-17], 'true': [0.09223421339310532, nan], 'true,true': [-2.304236466203155e-16, 0.1909596831172494], 'true,true,false': [3.469446951953614e-18, 0.2040816326530616], 'true,true,true': [nan, -2.304236466203155e-16]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, E).;true;true
9;true,false;genre(A, G).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995091;  // std dev = 1.08e-06, 212.000 (wgt'ed) examples reached here.  /* #pos=212 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.8581489350995121;  // std dev = 1.69e-07, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | | | else return -0.14185106490048763;  // std dev = 8.43e-08, 109.000 (wgt'ed) examples reached here.  /* #neg=109 */
%   else return -0.14185106490048743;  // std dev = 2.72e-07, 378.000 (wgt'ed) examples reached here.  /* #neg=378 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.7194734122109542;  // std dev = 2.38e-07, 81.000 (wgt'ed) examples reached here.  /* #pos=81 */
%   | | else return 0.7005573364481344;  // std dev = 0.125, 134.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=131 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.7194734122109548;  // std dev = 0.000, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | | | else return -0.1254446385283913;  // std dev = 0.000, 120.000 (wgt'ed) examples reached here.  /* #neg=120 */
%   else return -0.12544463852839222;  // std dev = 0.000, 380.000 (wgt'ed) examples reached here.  /* #neg=380 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.13469527732553038;  // std dev = 0.173, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else if ( director(B), actor(A) )
%   | | then return 0.5577173863707886;  // std dev = 0.038, 260.000 (wgt'ed) examples reached here.  /* #pos=260 */
%   | | else return -0.1123163781936062;  // std dev = 9.42e-08, 135.000 (wgt'ed) examples reached here.  /* #neg=135 */
%   else return -0.11231637819360622;  // std dev = 0.000, 398.000 (wgt'ed) examples reached here.  /* #neg=398 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( director(A) )
%   | | then return -0.20165395559723667;  // std dev = 3.73e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0.41978788084334856;  // std dev = 0.033, 212.000 (wgt'ed) examples reached here.  /* #pos=212 */
%   | else if ( genre(A, E) )
%   | | then return -0.09957184081472242;  // std dev = 5.27e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.4169419537487695;  // std dev = 0.000, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | | | else return -0.10159632948783642;  // std dev = 0.000, 140.000 (wgt'ed) examples reached here.  /* #neg=140 */
%   else return -0.10159632948783597;  // std dev = 2.06e-07, 393.000 (wgt'ed) examples reached here.  /* #neg=393 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.10167840398978643;  // std dev = 0.106, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else if ( genre(B, E) )
%   | | then return 0.3222558913541847;  // std dev = 0.029, 212.000 (wgt'ed) examples reached here.  /* #pos=212 */
%   | | else if ( actor(B) )
%   | | | then return -0.09269127618926094;  // std dev = 5.37e-08, 102.000 (wgt'ed) examples reached here.  /* #neg=102 */
%   | | | else return 0.28855390424321786;  // std dev = 0.794, 52.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=48 */
%   else return -0.09269127618926075;  // std dev = 1.67e-07, 382.000 (wgt'ed) examples reached here.  /* #neg=382 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.25428570133792755;  // std dev = 0.413, 213.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=212 */
%   | else if ( director(B), actor(A) )
%   | | then return 0.2609887981197238;  // std dev = 0.000, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | | else return -0.08555036656117336;  // std dev = 0.050, 110.000 (wgt'ed) examples reached here.  /* #neg=110 */
%   else return -0.08518475138839678;  // std dev = 1.26e-07, 403.000 (wgt'ed) examples reached here.  /* #neg=403 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( actor(B) )
%   | | then return -0.07664767603306712;  // std dev = 5.27e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else return -0.19387336395767088;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.2108256021902966;  // std dev = 0.022, 212.000 (wgt'ed) examples reached here.  /* #pos=212 */
%   | | else if ( actor(B) )
%   | | | then return -0.07875022576646634;  // std dev = 4.47e-08, 109.000 (wgt'ed) examples reached here.  /* #neg=109 */
%   | | | else return 0.21385813525885602;  // std dev = 0.000, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   else return -0.07877675473109143;  // std dev = 9.88e-08, 375.000 (wgt'ed) examples reached here.  /* #neg=375 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.1782893062950136;  // std dev = 0.024, 260.000 (wgt'ed) examples reached here.  /* #pos=260 */
%   | else return -0.07647584407062281;  // std dev = 0.161, 117.000 (wgt'ed) examples reached here.  /* #neg=117 */
%   else return -0.0732462257633377;  // std dev = 0.000, 388.000 (wgt'ed) examples reached here.  /* #neg=388 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.15177019217156787;  // std dev = 0.000, 81.000 (wgt'ed) examples reached here.  /* #pos=81 */
%   | | else return 0.14957046179990932;  // std dev = 0.038, 133.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=131 */
%   | else if ( genre(A, E) )
%   | | then return -0.06648906913489804;  // std dev = 3.73e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.15525421951022272;  // std dev = 5.16e-08, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | | | else return -0.06866240369789049;  // std dev = 0.057, 124.000 (wgt'ed) examples reached here.  /* #neg=124 */
%   else return -0.06842697784420329;  // std dev = 0.000, 378.000 (wgt'ed) examples reached here.  /* #neg=378 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.13324644438746058;  // std dev = 8.16e-08, 81.000 (wgt'ed) examples reached here.  /* #pos=81 */
%   | | else return 0.13102144664568482;  // std dev = 0.038, 133.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=131 */
%   | else if ( genre(A, E) )
%   | | then return -0.06247926218115459;  // std dev = 2.63e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.13596379311383913;  // std dev = 3.80e-08, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | | | else return -0.06485299400515394;  // std dev = 0.076, 122.000 (wgt'ed) examples reached here.  /* #neg=122 */
%   else return -0.06419184008202566;  // std dev = 1.79e-07, 374.000 (wgt'ed) examples reached here.  /* #neg=374 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063474
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.215 seconds
Total inference time: 0.997 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.065268
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.475 seconds
Refined model CLL: -0.065268


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063474
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 6.760999999999999 seconds
Total inference time: 0.997 seconds
AUC ROC: 1.0
Total revision time: 6.760999999999999
Best scored revision CLL: -0.065268


Dataset: 4_cora_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 00:14:35
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063474, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 6.760999999999999, 'Inference time': 0.997, 'parameter_0.8': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.131912, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 1.536, 'Inference time': 1.043}}


Amount of data: 1.0
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;haswordauthor(E, C).;true;true
7;true,true,true;author(F, E), title(F, D).;false;false
7;true,true,false;title(G, D), venue(G, B).;false;false
7;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
7;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
7;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, B).;false;true
8;true,true,false;title(F, D), venue(F, A).;false;false
8;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
8;true,false,false;haswordvenue(A, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
8;false,true;haswordauthor(M, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;true,true;author(F, E), venue(F, B).;true;true
9;true,true,true;samebib(F, G), venue(G, A).;false;false
9;true,true,false;author(H, E), venue(H, A).;false;false
9;true,false;haswordtitle(I, C).;true;true
9;true,false,true;title(J, I), venue(J, A).;false;false
9;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995086;  // std dev = 1.08e-06, 267.000 (wgt'ed) examples reached here.  /* #pos=267 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.16704945865972307;  // std dev = 6.386, 191.000 (wgt'ed) examples reached here.  /* #neg=132 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.1418510649004876;  // std dev = 1.12e-07, 487.000 (wgt'ed) examples reached here.  /* #neg=487 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.6978879145643319;  // std dev = 2.207, 274.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=267 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.1391375351132469;  // std dev = 6.415, 195.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839233;  // std dev = 0.000, 492.000 (wgt'ed) examples reached here.  /* #neg=492 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11887111450637076;  // std dev = 0.108, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else if ( movie(E, A) )
%   | | then return 0.3579497424555589;  // std dev = 0.376, 476.000 (wgt'ed) examples reached here.  /* #neg=150 #pos=326 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360576;  // std dev = 0.000, 517.000 (wgt'ed) examples reached here.  /* #neg=517 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4690143373926076;  // std dev = 0.674, 268.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=267 */
%   | else if ( genre(A, E) )
%   | | then return -0.10099960953728628;  // std dev = 1.18e-08, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.04613500614752783;  // std dev = 6.476, 204.000 (wgt'ed) examples reached here.  /* #neg=145 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783556;  // std dev = 1.44e-08, 464.000 (wgt'ed) examples reached here.  /* #neg=464 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14172410739849464;  // std dev = 0.343, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else if ( genre(B, E) )
%   | | then return 0.35824237253547603;  // std dev = 6.14e-07, 267.000 (wgt'ed) examples reached here.  /* #pos=267 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.007102477116615164;  // std dev = 6.613, 228.000 (wgt'ed) examples reached here.  /* #neg=169 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926147;  // std dev = 0.000, 502.000 (wgt'ed) examples reached here.  /* #neg=502 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.27461971468101826;  // std dev = 0.935, 270.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=267 */
%   | else if ( movie(E, A) )
%   | | then return 0.0180394053822169;  // std dev = 0.430, 231.000 (wgt'ed) examples reached here.  /* #neg=172 #pos=59 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 1.40e-07, 478.000 (wgt'ed) examples reached here.  /* #neg=478 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14980516100457836;  // std dev = 0.564, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | else if ( genre(B, E) )
%   | | then return 0.22866530208400382;  // std dev = 7.30e-08, 267.000 (wgt'ed) examples reached here.  /* #pos=267 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.035645239456600884;  // std dev = 6.463, 202.000 (wgt'ed) examples reached here.  /* #neg=143 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109194;  // std dev = 0.000, 478.000 (wgt'ed) examples reached here.  /* #neg=478 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18379423304433587;  // std dev = 0.948, 271.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=267 */
%   | else if ( movie(E, B) )
%   | | then return 0.010606880585478597;  // std dev = 6.524, 228.000 (wgt'ed) examples reached here.  /* #neg=169 #pos=59 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.07324622576333693;  // std dev = 1.48e-07, 494.000 (wgt'ed) examples reached here.  /* #neg=494 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1532926380178044;  // std dev = 1.187, 273.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=267 */
%   | else if ( genre(A, E) )
%   | | then return -0.07242316603007615;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.010348940156699757;  // std dev = 6.537, 214.000 (wgt'ed) examples reached here.  /* #neg=155 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.0684269778442035;  // std dev = 0.000, 466.000 (wgt'ed) examples reached here.  /* #neg=466 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return -0.3603967371380416;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return 0.1441038054266571;  // std dev = 1.46e-07, 267.000 (wgt'ed) examples reached here.  /* #pos=267 */
%   | | else if ( genre(A, G) )
%   | | | then return -0.06770605285600272;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | | else return 0.012246540155111939;  // std dev = 6.519, 211.000 (wgt'ed) examples reached here.  /* #neg=152 #pos=59 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.0641918400820254;  // std dev = 2.45e-07, 488.000 (wgt'ed) examples reached here.  /* #neg=488 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.130031
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.951 seconds
Total inference time: 0.998 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.978388
   AUC PR    = 0.863056
   CLL	      = -0.127774
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.819018
   F1        = 0.900506


Total scoring time: 1.693 seconds
Parameter learned model CLL: -0.127774


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 17, 0], 'true,false,true': [1.08e-06, 0, 267], 'true,false,false,true': [6.386, 132, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.12e-07, 487, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [2.207, 7, 267], 'true,false,true': [0.0, 20, 0], 'true,false,false,true': [6.415, 136, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 492, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.108, 17, 0], 'true,false,true': [0.376, 150, 326], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 517, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.674, 1, 267], 'true,false,true': [1.18e-08, 14, 0], 'true,false,false,true': [6.476, 145, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.44e-08, 464, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.343, 16, 0], 'true,false,true': [6.14e-07, 0, 267], 'true,false,false,true': [6.613, 169, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 502, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.935, 3, 267], 'true,false,true': [0.43, 172, 59], 'true,false,false': [0.0, 0, 0], 'false,true': [1.4e-07, 478, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.564, 28, 0], 'true,false,true': [7.3e-08, 0, 267], 'true,false,false,true': [6.463, 143, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 478, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.948, 4, 267], 'true,false,true': [6.524, 169, 59], 'true,false,false': [0.0, 0, 0], 'false,true': [1.48e-07, 494, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [1.187, 6, 267], 'true,false,true': [0.0, 14, 0], 'true,false,false,true': [6.537, 155, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 466, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true,true,false': 'genre(A, G)'}, {'true,true,true,true': [0.0, 5, 0], 'true,true,true,false': [1.46e-07, 0, 267], 'true,true,false,true': [0.0, 16, 0], 'true,true,false,false': [6.519, 152, 59], 'true,false': [0.0, 0, 0], 'false': [2.45e-07, 488, 0]}]]
[{'': [0.21528642659280056, 2.5532849847642203e-17], 'true': [-3.2653618371328133e-18, 0.20514482942735934], 'true,false': [4.364382346990877e-15, 0.21348099010443827], 'true,false,false': [0.21348099010443827, nan], 'false': [2.5532849847642203e-17, nan]}, {'': [0.18054314707272973, -1.3900353316445049e-16], 'true': [0.017772042887169145, 0.19729559530014565], 'true,false': [0.0, 0.2110190664036824], 'true,false,false': [0.2110190664036824, nan], 'false': [-1.3900353316445049e-16, nan]}, {'': [0.14418446399060644, -5.153839959575195e-18], 'true': [0.0006874330900779798, 0.1414694224467222], 'true,false': [0.1414694224467222, nan], 'false': [-5.153839959575195e-18, nan]}, {'': [0.13403944624089204, 2.067311838957188e-16], 'true': [0.0016953269006395914, 0.19366922461990435], 'true,false': [9.912705577010326e-18, 0.20556997308727515], 'true,false,false': [0.20556997308727515, nan], 'false': [2.067311838957188e-16, nan]}, {'': [0.1189566735188971, -3.18470349693272e-17], 'true': [0.0073604602120724005, 0.11898185687530531], 'true,false': [1.4104406365275398e-15, 0.19180901815943488], 'true,false,false': [0.19180901815943488, nan], 'false': [-3.18470349693272e-17, nan]}, {'': [0.10323287822967206, 4.08785046723907e-17], 'true': [0.0032356425982946746, 0.18463365648295155], 'true,false': [0.18463365648295155, nan], 'false': [4.08785046723907e-17, nan]}, {'': [0.09793754316560833, -2.3226423109312897e-17], 'true': [0.011375841756909902, 0.09819141347612924], 'true,false': [1.995906561123877e-17, 0.206768944221156], 'true,false,false': [0.206768944221156, nan], 'false': [-2.3226423109312897e-17, nan]}, {'': [0.09452804535469768, 4.404933458026937e-17], 'true': [0.003318450123222195, 0.18665020010692204], 'true,false': [0.18665020010692204, nan], 'false': [4.404933458026937e-17, nan]}, {'': [0.09372156113807958, -1.2293456667523192e-16], 'true': [0.005159428285367183, 0.1878231241889602], 'true,false': [-1.982541115402065e-18, 0.19968992925146295], 'true,false,false': [0.19968992925146295, nan], 'false': [-1.2293456667523192e-16, nan]}, {'': [0.09194562710244682, 1.2285254780688208e-16], 'true': [0.09194562710244682, nan], 'true,true': [0.004592685777913954, 0.18765391750121366], 'true,true,false': [0.0, 0.20143303160306203], 'true,true,true': [0.0, 7.983626244495507e-17]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, E).;true;true
9;true,true;genre(A, F).;true;true
9;true,false;genre(A, G).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995086;  // std dev = 1.08e-06, 267.000 (wgt'ed) examples reached here.  /* #pos=267 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.8581489350995125;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.14185106490048804;  // std dev = 0.000, 151.000 (wgt'ed) examples reached here.  /* #neg=151 */
%   else return -0.14185106490048777;  // std dev = 0.000, 505.000 (wgt'ed) examples reached here.  /* #neg=505 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( actor(A) )
%   | | then return 0.7194734122109576;  // std dev = 0.000, 267.000 (wgt'ed) examples reached here.  /* #pos=267 */
%   | | else return -0.12544463852839138;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 5.27e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.7194734122109543;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.12544463852839124;  // std dev = 5.58e-08, 148.000 (wgt'ed) examples reached here.  /* #neg=148 */
%   else return -0.12544463852839227;  // std dev = 0.000, 489.000 (wgt'ed) examples reached here.  /* #neg=489 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360635;  // std dev = 1.67e-08, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else if ( director(B), actor(A) )
%   | | then return 0.5553664367462832;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | | else return -0.11231637819360625;  // std dev = 9.31e-08, 154.000 (wgt'ed) examples reached here.  /* #neg=154 */
%   else return -0.11231637819360583;  // std dev = 0.000, 492.000 (wgt'ed) examples reached here.  /* #neg=492 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.4175135841583099;  // std dev = 2.15e-07, 95.000 (wgt'ed) examples reached here.  /* #pos=95 */
%   | | else return 0.40861455706723265;  // std dev = 0.067, 175.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=172 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783631;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.4175135841583105;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.10159632948783644;  // std dev = 0.000, 146.000 (wgt'ed) examples reached here.  /* #neg=146 */
%   else return -0.10159632948783547;  // std dev = 3.32e-07, 483.000 (wgt'ed) examples reached here.  /* #neg=483 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.10147911697110647;  // std dev = 0.096, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | else if ( genre(B, E) )
%   | | then return 0.3219627378298678;  // std dev = 0.015, 267.000 (wgt'ed) examples reached here.  /* #pos=267 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.3207118471601497;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.09269127618926075;  // std dev = 7.15e-08, 145.000 (wgt'ed) examples reached here.  /* #neg=145 */
%   else return -0.09269127618926133;  // std dev = 0.000, 474.000 (wgt'ed) examples reached here.  /* #neg=474 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2558713477632646;  // std dev = 0.015, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.08598228677212197;  // std dev = 0.083, 162.000 (wgt'ed) examples reached here.  /* #neg=162 */
%   else return -0.08518475138839678;  // std dev = 1.43e-07, 495.000 (wgt'ed) examples reached here.  /* #neg=495 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09083793342883345;  // std dev = 0.102, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | else if ( genre(B, E) )
%   | | then return 0.2103862972677841;  // std dev = 0.012, 267.000 (wgt'ed) examples reached here.  /* #pos=267 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.2096418558774466;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.07871889624865944;  // std dev = 0.000, 165.000 (wgt'ed) examples reached here.  /* #neg=165 */
%   else return -0.07877675473109216;  // std dev = 0.000, 516.000 (wgt'ed) examples reached here.  /* #neg=516 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.17745867233268398;  // std dev = 0.011, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.07401770175384094;  // std dev = 0.081, 177.000 (wgt'ed) examples reached here.  /* #neg=177 */
%   else return -0.073246225763337;  // std dev = 1.26e-07, 481.000 (wgt'ed) examples reached here.  /* #neg=481 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1502179217990219;  // std dev = 0.448, 270.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=267 */
%   | else if ( genre(A, E) )
%   | | then return -0.06701169872009381;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.15262154845302967;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.06833071261622853;  // std dev = 0.000, 152.000 (wgt'ed) examples reached here.  /* #neg=152 */
%   else return -0.06842697784420354;  // std dev = 0.000, 496.000 (wgt'ed) examples reached here.  /* #neg=496 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( genre(A, E) )
%   | | then return -0.12205666575343728;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0.13462614109461749;  // std dev = 0.008, 267.000 (wgt'ed) examples reached here.  /* #pos=267 */
%   | else if ( genre(A, F) )
%   | | then return -0.06294166757720179;  // std dev = 7.45e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.1339115375235363;  // std dev = 4.21e-08, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.06410689840550793;  // std dev = 0.000, 136.000 (wgt'ed) examples reached here.  /* #neg=136 */
%   else return -0.06419184008202541;  // std dev = 2.39e-07, 475.000 (wgt'ed) examples reached here.  /* #neg=475 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063435
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.502 seconds
Total inference time: 1.022 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064503
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.596 seconds
Refined model CLL: -0.064503


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063435
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 7.742 seconds
Total inference time: 1.022 seconds
AUC ROC: 1.0
Total revision time: 7.742
Best scored revision CLL: -0.064503


Dataset: 4_cora_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 00:14:45
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063435, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 7.742, 'Inference time': 1.022, 'parameter_1.0': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.130031, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 1.951, 'Inference time': 0.998}}


Starting fold 2

Target train facts examples: 870
Target train pos examples: 324
Target train neg examples: 10813

Target test facts examples: 208
Target test pos	 examples: 58
Target test neg examples: 3423

Amount of data: 0.2
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;haswordauthor(E, C).;true;true
7;true,true,true;author(F, E), title(F, D).;false;false
7;true,true,false;title(G, D), venue(G, B).;false;false
7;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
7;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
7;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, B).;false;true
8;true,true,false;title(F, D), venue(F, A).;false;false
8;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
8;true,false,false;haswordvenue(A, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
8;false,true;haswordauthor(M, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;true,true;author(F, E), venue(F, B).;true;true
9;true,true,true;samebib(F, G), venue(G, A).;false;false
9;true,true,false;author(H, E), venue(H, A).;false;false
9;true,false;haswordtitle(I, C).;true;true
9;true,false,true;title(J, I), venue(J, A).;false;false
9;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995123;  // std dev = 8.43e-08, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.10814893509951236;  // std dev = 3.000, 48.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=12 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048763;  // std dev = 8.69e-08, 97.000 (wgt'ed) examples reached here.  /* #neg=97 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109546;  // std dev = 0.000, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.14446743783575544;  // std dev = 2.898, 40.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=12 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 98.000 (wgt'ed) examples reached here.  /* #neg=98 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360638;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( movie(E, A) )
%   | | then return 0.380126718455701;  // std dev = 0.365, 90.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=64 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360618;  // std dev = 8.43e-08, 107.000 (wgt'ed) examples reached here.  /* #neg=107 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4606443128243702;  // std dev = 0.000, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.023518396430737065;  // std dev = 2.978, 46.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=12 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783627;  // std dev = 3.95e-09, 98.000 (wgt'ed) examples reached here.  /* #neg=98 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12914147373043347;  // std dev = 0.179, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( genre(B, E) )
%   | | then return 0.3501469405127458;  // std dev = 4.21e-08, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.09169870628024175;  // std dev = 2.828, 36.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=12 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926108;  // std dev = 0.000, 85.000 (wgt'ed) examples reached here.  /* #neg=85 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.27517154316037334;  // std dev = 0.000, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | else if ( movie(E, A) )
%   | | then return 0.053798881165945556;  // std dev = 0.452, 40.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=12 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839682;  // std dev = 5.05e-08, 85.000 (wgt'ed) examples reached here.  /* #neg=85 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1718251113504873;  // std dev = 0.188, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.22379054331379858;  // std dev = 8.16e-08, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.04650205658452928;  // std dev = 2.865, 38.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=12 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109161;  // std dev = 5.27e-08, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1873225328721954;  // std dev = 0.000, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | else if ( movie(E, B) )
%   | | then return 0.0031639252976923093;  // std dev = 2.930, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.07324622576333707;  // std dev = 0.000, 77.000 (wgt'ed) examples reached here.  /* #neg=77 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.16045791115982524;  // std dev = 4.47e-08, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | else if ( genre(A, E) )
%   | | then return -0.08138950523094952;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.07376967370377611;  // std dev = 2.787, 34.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=12 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420265;  // std dev = 4.84e-09, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return -0.3653856046615039;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0.14000085689245975;  // std dev = 0.000, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | | else if ( genre(A, G) )
%   | | | then return -0.07550802939459149;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.08074458986369676;  // std dev = 2.739, 32.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=12 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.06419184008202626;  // std dev = 0.000, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.139045
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 0.893 seconds
Total inference time: 0.995 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.978709
   AUC PR    = 0.862736
   CLL	      = -0.140324
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.8125
   F1        = 0.896552


Total scoring time: 0.912 seconds
Parameter learned model CLL: -0.140324


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 8, 0], 'true,false,true': [8.43e-08, 0, 52], 'true,false,false,true': [3.0, 36, 12], 'true,false,false,false': [0.0, 0, 0], 'false,true': [8.69e-08, 97, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 52], 'true,false,true': [0.0, 2, 0], 'true,false,false,true': [2.898, 28, 12], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 98, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 5, 0], 'true,false,true': [0.365, 26, 64], 'true,false,false': [0.0, 0, 0], 'false,true': [8.43e-08, 107, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 52], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [2.978, 34, 12], 'true,false,false,false': [0.0, 0, 0], 'false,true': [3.95e-09, 98, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.179, 7, 0], 'true,false,true': [4.21e-08, 0, 52], 'true,false,false,true': [2.828, 24, 12], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 85, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 52], 'true,false,true': [0.452, 28, 12], 'true,false,false': [0.0, 0, 0], 'false,true': [5.05e-08, 85, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.188, 3, 0], 'true,false,true': [8.16e-08, 0, 52], 'true,false,false,true': [2.865, 26, 12], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.27e-08, 92, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 52], 'true,false,true': [2.93, 32, 12], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 77, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [4.47e-08, 0, 52], 'true,false,true': [0.0, 4, 0], 'true,false,false,true': [2.787, 22, 12], 'true,false,false,false': [0.0, 0, 0], 'false,true': [4.84e-09, 103, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true,true,false': 'genre(A, G)'}, {'true,true,true,true': [0.0, 1, 0], 'true,true,true,false': [0.0, 0, 52], 'true,true,false,true': [0.0, 4, 0], 'true,true,false,false': [2.739, 20, 12], 'true,false': [0.0, 0, 0], 'false': [0.0, 88, 0]}]]
[{'': [0.2414266117969816, 7.783006770568107e-17], 'true': [-6.938893903907228e-18, 0.23039999999999938], 'true,false': [1.3664283380001927e-16, 0.18749999999999947], 'true,false,false': [0.18749999999999947, nan], 'false': [7.783006770568107e-17, nan]}, {'': [0.17625471824281158, -1.3594567648471304e-17], 'true': [-4.099285014000578e-16, 0.20330396956767344], 'true,false': [0.0, 0.2099999999999998], 'true,false,false': [0.2099999999999998, nan], 'false': [-1.3594567648471304e-17, nan]}, {'': [0.13832907593193178, 6.640586315514955e-17], 'true': [0.0, 0.13325085599284023], 'true,false': [0.13325085599284023, nan], 'false': [6.640586315514955e-17, nan]}, {'': [0.13809647220420812, 1.8126090197961738e-17], 'true': [0.0, 0.19281663516068073], 'true,false': [nan, 0.19281663516068073], 'true,false,false': [0.19281663516068073, nan], 'false': [1.8126090197961738e-17, nan]}, {'': [0.10902778661861456, 0.0], 'true': [0.004552409828072917, 0.10705593451242622], 'true,false': [3.416070845000482e-17, 0.22222222222222215], 'true,false,false': [0.22222222222222215, nan], 'false': [0.0, nan]}, {'': [0.10090766210126727, 3.004132890162188e-17], 'true': [-5.124106267500723e-17, 0.20438866104071968], 'true,false': [0.20438866104071968, nan], 'false': [3.004132890162188e-17, nan]}, {'': [0.09929897517164979, 3.0169103930031426e-17], 'true': [0.011827887638822185, 0.09889573265356998], 'true,false': [1.2810265668751805e-16, 0.2160664819944599], 'true,false,false': [0.2160664819944599, nan], 'false': [3.0169103930031426e-17, nan]}, {'': [0.09786059855055401, -5.767392335715099e-18], 'true': [-2.1350442781253012e-17, 0.19514373713166178], 'true,false': [0.19514373713166178, nan], 'false': [-5.767392335715099e-18, nan]}, {'': [0.08982096981413734, 2.3713501496848002e-17], 'true': [3.843079700625542e-17, 0.20660175758951457], 'true,false': [0.0, 0.22837370242214552], 'true,false,false': [0.22837370242214552, nan], 'false': [2.3713501496848002e-17, nan]}, {'': [0.08914468309876439, -1.2616170734376778e-17], 'true': [0.08914468309876439, nan], 'true,true': [0.0047282323699344335, 0.21074467960741491], 'true,true,false': [0.0, 0.23437500000000003], 'true,true,true': [0.0, -1.2810265668751807e-17]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, E).;true;true
9;true,true;genre(A, F).;true;true
9;true,false;genre(A, G).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995123;  // std dev = 8.43e-08, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.14185106490048768;  // std dev = 3.65e-08, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   else return -0.14185106490048763;  // std dev = 8.69e-08, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109546;  // std dev = 0.000, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.7194734122109542;  // std dev = 4.21e-08, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.1254446385283914;  // std dev = 0.000, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   else return -0.1254446385283914;  // std dev = 0.000, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.15071701831329515;  // std dev = 0.094, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( actor(B) )
%   | | then return -0.11231637819360639;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | else return 0.5553664367462837;  // std dev = 1.88e-07, 64.000 (wgt'ed) examples reached here.  /* #pos=64 */
%   else return -0.11231637819360618;  // std dev = 8.82e-08, 114.000 (wgt'ed) examples reached here.  /* #neg=114 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.41751358415830986;  // std dev = 5.16e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.39873679930844996;  // std dev = 0.106, 33.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   | else if ( actor(B) )
%   | | then return -0.1012264972853355;  // std dev = 0.006, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | else return 0.4175135841583102;  // std dev = 2.11e-08, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else return -0.10159632948783628;  // std dev = 3.65e-08, 100.000 (wgt'ed) examples reached here.  /* #neg=100 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1817774003601418;  // std dev = 0.130, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.3232375869428503;  // std dev = 0.014, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | | else if ( actor(B) )
%   | | | then return -0.09272238361639579;  // std dev = 1.75e-08, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | | else return 0.3207118471601497;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else return -0.09269127618926097;  // std dev = 4.47e-08, 97.000 (wgt'ed) examples reached here.  /* #neg=97 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.25469249897431145;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.24319307204201565;  // std dev = 0.085, 33.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   | else if ( director(B), actor(A) )
%   | | then return 0.2551722425694894;  // std dev = 2.11e-08, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return -0.09182424094996718;  // std dev = 0.228, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   else return -0.08518475138839682;  // std dev = 5.77e-08, 105.000 (wgt'ed) examples reached here.  /* #neg=105 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.06960059404175725;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.21253059419300355;  // std dev = 0.018, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | | else if ( actor(B) )
%   | | | then return -0.07832071392470392;  // std dev = 0.000, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | | else return 0.20975771563253567;  // std dev = 2.11e-08, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else return -0.07877675473109162;  // std dev = 4.94e-08, 87.000 (wgt'ed) examples reached here.  /* #neg=87 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1791286775432227;  // std dev = 0.016, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | else if ( actor(B) )
%   | | then return -0.07173473752588506;  // std dev = 0.017, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
%   | | else return 0.17709649774527736;  // std dev = 1.05e-08, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else return -0.07324622576333707;  // std dev = 0.000, 84.000 (wgt'ed) examples reached here.  /* #neg=84 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.15185934916298338;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.1284415278461437;  // std dev = 0.109, 34.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=32 */
%   | else if ( genre(A, E) )
%   | | then return -0.06098656505502765;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.15274385809367094;  // std dev = 1.05e-08, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.08182144899384969;  // std dev = 0.308, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   else return -0.06842697784420265;  // std dev = 4.83e-08, 101.000 (wgt'ed) examples reached here.  /* #neg=101 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( genre(A, E) )
%   | | then return -0.3373842907746264;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0.1372096773760102;  // std dev = 0.022, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | else if ( genre(A, F) )
%   | | then return -0.05758613181677242;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( actor(B) )
%   | | | then return -0.0631351064805424;  // std dev = 0.000, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | | else return 0.13400703000801117;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else return -0.06419184008202626;  // std dev = 0.000, 112.000 (wgt'ed) examples reached here.  /* #neg=112 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063413
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.324 seconds
Total inference time: 0.969 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.067513
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.878 seconds
Refined model CLL: -0.067513


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063413
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 4.007000000000001 seconds
Total inference time: 0.969 seconds
AUC ROC: 1.0
Total revision time: 4.007000000000001
Best scored revision CLL: -0.067513


Dataset: 4_cora_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 00:14:52
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063413, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 4.007000000000001, 'Inference time': 0.969, 'parameter_0.2': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.139045, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 0.893, 'Inference time': 0.995}}


Amount of data: 0.4
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;haswordauthor(E, C).;true;true
7;true,true,true;author(F, E), title(F, D).;false;false
7;true,true,false;title(G, D), venue(G, B).;false;false
7;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
7;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
7;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, B).;false;true
8;true,true,false;title(F, D), venue(F, A).;false;false
8;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
8;true,false,false;haswordvenue(A, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
8;false,true;haswordauthor(M, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;true,true;author(F, E), venue(F, B).;true;true
9;true,true,true;samebib(F, G), venue(G, A).;false;false
9;true,true,false;author(H, E), venue(H, A).;false;false
9;true,false;haswordtitle(I, C).;true;true
9;true,false,true;title(J, I), venue(J, A).;false;false
9;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( genre(B, E) )
%   | | then return 0.858148935099511;  // std dev = 5.72e-07, 111.000 (wgt'ed) examples reached here.  /* #pos=111 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.06991364098186532;  // std dev = 3.767, 85.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=18 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048843;  // std dev = 0.000, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.6972387266651826;  // std dev = 1.444, 114.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=111 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.07727156745162547;  // std dev = 3.728, 79.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=18 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839144;  // std dev = 0.000, 166.000 (wgt'ed) examples reached here.  /* #neg=166 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1401458241544141;  // std dev = 0.096, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( movie(E, A) )
%   | | then return 0.37531074980087664;  // std dev = 0.356, 183.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=129 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360656;  // std dev = 0.000, 192.000 (wgt'ed) examples reached here.  /* #neg=192 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.46737183029355617;  // std dev = 0.000, 111.000 (wgt'ed) examples reached here.  /* #pos=111 */
%   | else if ( genre(A, E) )
%   | | then return -0.09908422501491304;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.004246831819174919;  // std dev = 3.742, 81.000 (wgt'ed) examples reached here.  /* #neg=63 #pos=18 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.1015963294878365;  // std dev = 0.000, 188.000 (wgt'ed) examples reached here.  /* #neg=188 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09058394115243228;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.3547853160194989;  // std dev = 0.000, 111.000 (wgt'ed) examples reached here.  /* #pos=111 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.031299818642723944;  // std dev = 3.674, 72.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=18 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926058;  // std dev = 8.82e-08, 188.000 (wgt'ed) examples reached here.  /* #neg=188 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.27831090898318656;  // std dev = 0.000, 111.000 (wgt'ed) examples reached here.  /* #pos=111 */
%   | else if ( movie(E, A) )
%   | | then return -0.022572539268349356;  // std dev = 0.384, 97.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=18 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 7.30e-08, 191.000 (wgt'ed) examples reached here.  /* #neg=191 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14258043693336706;  // std dev = 0.211, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.2259773319587053;  // std dev = 0.000, 111.000 (wgt'ed) examples reached here.  /* #pos=111 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.013571158135910536;  // std dev = 3.714, 77.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=18 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109147;  // std dev = 7.60e-08, 191.000 (wgt'ed) examples reached here.  /* #neg=191 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18458587479434224;  // std dev = 0.482, 112.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=111 */
%   | else if ( movie(E, B) )
%   | | then return 0.010012147119026326;  // std dev = 3.710, 80.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=18 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.07324622576333673;  // std dev = 9.94e-08, 174.000 (wgt'ed) examples reached here.  /* #neg=174 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1622298429905449;  // std dev = 0.000, 111.000 (wgt'ed) examples reached here.  /* #pos=111 */
%   | else if ( genre(A, E) )
%   | | then return -0.07227543864611786;  // std dev = 3.73e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.014968929294901108;  // std dev = 3.773, 86.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=18 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420262;  // std dev = 5.67e-09, 182.000 (wgt'ed) examples reached here.  /* #neg=182 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return -0.3715847787938417;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0.1413697587237532;  // std dev = 0.000, 111.000 (wgt'ed) examples reached here.  /* #pos=111 */
%   | | else if ( genre(A, G) )
%   | | | then return -0.06757655416746104;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return 0.003322192000916131;  // std dev = 3.735, 80.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=18 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.06419184008202626;  // std dev = 0.000, 202.000 (wgt'ed) examples reached here.  /* #neg=202 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.109571
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.195 seconds
Total inference time: 1.011 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.983385
   AUC PR    = 0.895439
   CLL	      = -0.113209
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.860465
   F1        = 0.925


Total scoring time: 1.128 seconds
Parameter learned model CLL: -0.113209


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 13, 0], 'true,false,true': [5.72e-07, 0, 111], 'true,false,false,true': [3.767, 67, 18], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 206, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.444, 3, 111], 'true,false,true': [0.0, 5, 0], 'true,false,false,true': [3.728, 61, 18], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 166, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.096, 4, 0], 'true,false,true': [0.356, 54, 129], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 192, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 111], 'true,false,true': [2.63e-09, 6, 0], 'true,false,false,true': [3.742, 63, 18], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 188, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 2, 0], 'true,false,true': [0.0, 0, 111], 'true,false,false,true': [3.674, 54, 18], 'true,false,false,false': [0.0, 0, 0], 'false,true': [8.82e-08, 188, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 111], 'true,false,true': [0.384, 79, 18], 'true,false,false': [0.0, 0, 0], 'false,true': [7.3e-08, 191, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.211, 4, 0], 'true,false,true': [0.0, 0, 111], 'true,false,false,true': [3.714, 59, 18], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.6e-08, 191, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.482, 1, 111], 'true,false,true': [3.71, 62, 18], 'true,false,false': [0.0, 0, 0], 'false,true': [9.94e-08, 174, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 111], 'true,false,true': [3.73e-09, 9, 0], 'true,false,false,true': [3.773, 68, 18], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.67e-09, 182, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true,true,false': 'genre(A, G)'}, {'true,true,true,true': [0.0, 1, 0], 'true,true,true,false': [0.0, 0, 111], 'true,true,false,true': [0.0, 7, 0], 'true,true,false,false': [3.735, 62, 18], 'true,false': [0.0, 0, 0], 'false': [0.0, 202, 0]}]]
[{'': [0.23625832741924824, -2.3713501496848003e-16], 'true': [-1.2810265668751807e-17, 0.22498438150770936], 'true,false': [2.944591517564379e-15, 0.16692041522491297], 'true,false,false': [0.16692041522491297, nan], 'false': [-2.3713501496848003e-16, nan]}, {'': [0.17927739600855955, -2.407712583524436e-17], 'true': [0.018292105928816114, 0.1677615852681421], 'true,false': [0.0, 0.17593334401538166], 'true,false,false': [0.17593334401538166, nan], 'false': [-2.407712583524436e-17, nan]}, {'': [0.1297403205765775, -3.23815048849004e-17], 'true': [0.0023234341874565495, 0.12684206336396456], 'true,false': [0.12684206336396456, nan], 'false': [-3.23815048849004e-17, nan]}, {'': [0.12548012311164047, -9.21248892774066e-17], 'true': [-1.1842378929335002e-15, 0.16160512238749275], 'true,false': [1.1564823173178713e-18, 0.17283950617283916], 'true,false,false': [0.17283950617283916, nan], 'false': [-9.21248892774066e-17, nan]}, {'': [0.09875762001462286, 4.133809134242604e-17], 'true': [0.0, 0.09874304378060517], 'true,false': [-7.361478793910948e-16, 0.18749999999999994], 'true,false,false': [0.18749999999999994, nan], 'false': [4.133809134242604e-17, nan]}, {'': [0.09117659076286493, 2.790089276544896e-17], 'true': [-2.720546510793176e-16, 0.14720055347606678], 'true,false': [0.14720055347606678, nan], 'false': [2.790089276544896e-17, nan]}, {'': [0.08436627656290958, 3.022596716256971e-17], 'true': [0.011125095733439633, 0.08427299648269264], 'true,false': [-2.0004018461714533e-16, 0.17911958171698417], 'true,false,false': [0.17911958171698417, nan], 'false': [3.022596716256971e-17, nan]}, {'': [0.08030715629273948, 5.67872696503672e-17], 'true': [0.002070268041942876, 0.17206114111375573], 'true,false': [0.17206114111375573, nan], 'false': [5.67872696503672e-17, nan]}, {'': [0.07750790070170958, 3.294068314821893e-17], 'true': [-3.600723323108616e-17, 0.1500980462194646], 'true,false': [1.5419764230904951e-18, 0.16549486208761505], 'true,false,false': [0.16549486208761505, nan], 'false': [3.294068314821893e-17, nan]}, {'': [0.07633930669705329, -1.648846076175975e-18], 'true': [0.07633930669705329, nan], 'true,true': [0.0023283308106782363, 0.16071672797418643], 'true,true,false': [-1.982541115402065e-18, 0.1743749999999997], 'true,true,true': [0.0, 0.0]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, E).;true;true
9;true,true;genre(A, F).;true;true
9;true,false;genre(A, G).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(B, E) )
%   | | then return 0.858148935099511;  // std dev = 5.72e-07, 111.000 (wgt'ed) examples reached here.  /* #pos=111 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return -0.14185106490048766;  // std dev = 5.96e-08, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   else return -0.14185106490048827;  // std dev = 0.000, 176.000 (wgt'ed) examples reached here.  /* #neg=176 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( actor(A) )
%   | | then return 0.719473412210955;  // std dev = 0.000, 111.000 (wgt'ed) examples reached here.  /* #pos=111 */
%   | | else return -0.12544463852839138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( actor(B) )
%   | | | then return -0.1254446385283916;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   | | | else return 0.7194734122109542;  // std dev = 7.30e-08, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else return -0.1254446385283915;  // std dev = 0.000, 174.000 (wgt'ed) examples reached here.  /* #neg=174 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( actor(A), director(B) )
%   | | then return 0.5553664367462834;  // std dev = 4.77e-07, 129.000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | | else return -0.1142689531149464;  // std dev = 0.114, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   else return -0.1123163781936067;  // std dev = 0.000, 209.000 (wgt'ed) examples reached here.  /* #neg=209 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4128786742150404;  // std dev = 0.517, 112.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=111 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.4175135841583104;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return -0.10497304161926647;  // std dev = 0.148, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   else return -0.10159632948783653;  // std dev = 0.000, 204.000 (wgt'ed) examples reached here.  /* #neg=204 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.10237450454634649;  // std dev = 0.068, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( genre(B, E) )
%   | | then return 0.3217224269472104;  // std dev = 0.000, 111.000 (wgt'ed) examples reached here.  /* #pos=111 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.3207118471601496;  // std dev = 2.98e-08, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return -0.09367957309835781;  // std dev = 0.098, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
%   else return -0.09269127618926057;  // std dev = 9.31e-08, 200.000 (wgt'ed) examples reached here.  /* #neg=200 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.25586169149129667;  // std dev = 0.000, 111.000 (wgt'ed) examples reached here.  /* #pos=111 */
%   | else if ( actor(B) )
%   | | then return -0.08466165440199581;  // std dev = 0.000690, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
%   | | else return 0.25517224256948967;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else return -0.08518475138839678;  // std dev = 7.74e-08, 201.000 (wgt'ed) examples reached here.  /* #neg=201 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09571932504131808;  // std dev = 0.079, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(B, E) )
%   | | then return 0.21024461423675722;  // std dev = 1.81e-07, 111.000 (wgt'ed) examples reached here.  /* #pos=111 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.20975771563253567;  // std dev = 2.79e-08, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return -0.08351176232849697;  // std dev = 0.193, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
%   else return -0.07877675473109147;  // std dev = 7.30e-08, 202.000 (wgt'ed) examples reached here.  /* #neg=202 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1715995241295533;  // std dev = 0.464, 113.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=111 */
%   | else if ( actor(B) )
%   | | then return -0.0724784200141408;  // std dev = 0.002, 74.000 (wgt'ed) examples reached here.  /* #neg=74 */
%   | | else return 0.17709649774527744;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else return -0.07324622576333666;  // std dev = 1.18e-07, 199.000 (wgt'ed) examples reached here.  /* #neg=199 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14792189894468644;  // std dev = 0.464, 113.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=111 */
%   | else if ( genre(A, E) )
%   | | then return -0.06682956317716215;  // std dev = 3.73e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.15274385809367091;  // std dev = 2.11e-08, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return -0.07276466798404413;  // std dev = 0.231, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
%   else return -0.06842697784420262;  // std dev = 8.09e-08, 197.000 (wgt'ed) examples reached here.  /* #neg=197 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.13549555469961527;  // std dev = 5.16e-08, 111.000 (wgt'ed) examples reached here.  /* #pos=111 */
%   | else if ( genre(A, F) )
%   | | then return -0.06278056584582516;  // std dev = 2.63e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( actor(B) )
%   | | | then return -0.06335005916768113;  // std dev = 0.000, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
%   | | | else return 0.13400703000801117;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else return -0.06419184008202626;  // std dev = 0.000, 213.000 (wgt'ed) examples reached here.  /* #neg=213 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063414
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.566 seconds
Total inference time: 0.98 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.065691
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.132 seconds
Refined model CLL: -0.065691


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063414
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 5.021 seconds
Total inference time: 0.98 seconds
AUC ROC: 1.0
Total revision time: 5.021
Best scored revision CLL: -0.065691


Dataset: 4_cora_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 00:14:59
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063414, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 5.021, 'Inference time': 0.98, 'parameter_0.4': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.109571, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 1.195, 'Inference time': 1.011}}


Amount of data: 0.6
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;haswordauthor(E, C).;true;true
7;true,true,true;author(F, E), title(F, D).;false;false
7;true,true,false;title(G, D), venue(G, B).;false;false
7;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
7;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
7;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, B).;false;true
8;true,true,false;title(F, D), venue(F, A).;false;false
8;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
8;true,false,false;haswordvenue(A, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
8;false,true;haswordauthor(M, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;true,true;author(F, E), venue(F, B).;true;true
9;true,true,true;samebib(F, G), venue(G, A).;false;false
9;true,true,false;author(H, E), venue(H, A).;false;false
9;true,false;haswordtitle(I, C).;true;true
9;true,false,true;title(J, I), venue(J, A).;false;false
9;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995097;  // std dev = 1.00e-06, 160.000 (wgt'ed) examples reached here.  /* #pos=160 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.11378803284387186;  // std dev = 5.031, 133.000 (wgt'ed) examples reached here.  /* #neg=99 #pos=34 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048802;  // std dev = 0.000, 274.000 (wgt'ed) examples reached here.  /* #neg=274 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.6938698349158245;  // std dev = 1.860, 165.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=160 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.12705868021958538;  // std dev = 4.936, 120.000 (wgt'ed) examples reached here.  /* #neg=86 #pos=34 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839197;  // std dev = 0.000, 283.000 (wgt'ed) examples reached here.  /* #neg=283 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1261580550691797;  // std dev = 0.146, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else if ( movie(E, A) )
%   | | then return 0.38180558216685945;  // std dev = 0.365, 273.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=194 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360689;  // std dev = 0.000, 260.000 (wgt'ed) examples reached here.  /* #neg=260 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.46659375300041506;  // std dev = 1.69e-07, 160.000 (wgt'ed) examples reached here.  /* #pos=160 */
%   | else if ( genre(A, E) )
%   | | then return -0.10033988595203622;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.020109676691646747;  // std dev = 5.031, 133.000 (wgt'ed) examples reached here.  /* #neg=99 #pos=34 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783659;  // std dev = 0.000, 258.000 (wgt'ed) examples reached here.  /* #neg=258 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.140604295982914;  // std dev = 0.339, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else if ( genre(B, E) )
%   | | then return 0.3542480437240197;  // std dev = 0.000, 160.000 (wgt'ed) examples reached here.  /* #pos=160 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.05142877856227292;  // std dev = 4.911, 117.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=34 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926043;  // std dev = 1.48e-07, 291.000 (wgt'ed) examples reached here.  /* #neg=291 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2746087078235015;  // std dev = 0.536, 161.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=160 */
%   | else if ( movie(E, A) )
%   | | then return 0.018874805844965644;  // std dev = 0.430, 134.000 (wgt'ed) examples reached here.  /* #neg=100 #pos=34 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 1.03e-07, 295.000 (wgt'ed) examples reached here.  /* #neg=295 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08199661330372644;  // std dev = 3.73e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( genre(B, E) )
%   | | then return 0.22630836796249848;  // std dev = 0.000, 160.000 (wgt'ed) examples reached here.  /* #pos=160 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.011369909407153971;  // std dev = 5.004, 129.000 (wgt'ed) examples reached here.  /* #neg=95 #pos=34 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109143;  // std dev = 5.37e-08, 269.000 (wgt'ed) examples reached here.  /* #neg=269 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1831263043291947;  // std dev = 0.685, 162.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=160 */
%   | else if ( movie(E, B) )
%   | | then return 0.038860168696373376;  // std dev = 4.892, 119.000 (wgt'ed) examples reached here.  /* #neg=85 #pos=34 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.07324622576333695;  // std dev = 1.00e-07, 293.000 (wgt'ed) examples reached here.  /* #neg=293 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1534272767622602;  // std dev = 0.859, 163.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=160 */
%   | else if ( genre(A, E) )
%   | | then return -0.07880759271815406;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.02392789654117064;  // std dev = 4.928, 119.000 (wgt'ed) examples reached here.  /* #neg=85 #pos=34 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.0684269778442029;  // std dev = 0.000, 281.000 (wgt'ed) examples reached here.  /* #neg=281 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return -0.3730898034901043;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.1428109446072599;  // std dev = 1.26e-07, 160.000 (wgt'ed) examples reached here.  /* #pos=160 */
%   | | else if ( genre(A, G) )
%   | | | then return -0.0732729769201961;  // std dev = 5.89e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return 0.012251681627345336;  // std dev = 4.952, 122.000 (wgt'ed) examples reached here.  /* #neg=88 #pos=34 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.06419184008202601;  // std dev = 1.03e-07, 289.000 (wgt'ed) examples reached here.  /* #neg=289 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.124607
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.32 seconds
Total inference time: 1.057 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.978846
   AUC PR    = 0.867167
   CLL	      = -0.128019
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.824742
   F1        = 0.903955


Total scoring time: 1.324 seconds
Parameter learned model CLL: -0.128019


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 7, 0], 'true,false,true': [1e-06, 0, 160], 'true,false,false,true': [5.031, 99, 34], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 274, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.86, 5, 160], 'true,false,true': [0.0, 4, 0], 'true,false,false,true': [4.936, 86, 34], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 283, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.146, 16, 0], 'true,false,true': [0.365, 79, 194], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 260, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.69e-07, 0, 160], 'true,false,true': [0.0, 8, 0], 'true,false,false,true': [5.031, 99, 34], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 258, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.339, 16, 0], 'true,false,true': [0.0, 0, 160], 'true,false,false,true': [4.911, 83, 34], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.48e-07, 291, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.536, 1, 160], 'true,false,true': [0.43, 100, 34], 'true,false,false': [0.0, 0, 0], 'false,true': [1.03e-07, 295, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [3.73e-09, 7, 0], 'true,false,true': [0.0, 0, 160], 'true,false,false,true': [5.004, 95, 34], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.37e-08, 269, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.685, 2, 160], 'true,false,true': [4.892, 85, 34], 'true,false,false': [0.0, 0, 0], 'false,true': [1e-07, 293, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.859, 3, 160], 'true,false,true': [0.0, 7, 0], 'true,false,false,true': [4.928, 85, 34], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 281, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true,true,false': 'genre(A, G)'}, {'true,true,true,true': [0.0, 3, 0], 'true,true,true,false': [1.26e-07, 0, 160], 'true,true,false,true': [5.89e-09, 11, 0], 'true,true,false,false': [4.952, 88, 34], 'true,false': [0.0, 0, 0], 'false': [1.03e-07, 289, 0]}]]
[{'': [0.2284888888888937, -4.2139852029567983e-17], 'true': [-7.93016446160826e-18, 0.2237183892648769], 'true,false': [6.306066779870889e-15, 0.19028774944881127], 'true,false,false': [0.19028774944881127, nan], 'false': [-4.2139852029567983e-17, nan]}, {'': [0.17812480605520883, -7.846099113958704e-17], 'true': [0.020977381449846306, 0.1984957382372829], 'true,false': [0.0, 0.20305555555555538], 'true,false,false': [0.20305555555555538, nan], 'false': [-7.846099113958704e-17, nan]}, {'': [0.13909302368687612, -1.0077408992751421e-16], 'true': [0.001341144131094485, 0.13288115894124794], 'true,false': [0.13288115894124794, nan], 'false': [-1.0077408992751421e-16, nan]}, {'': [0.13561397531093422, -6.712976427966062e-17], 'true': [1.7763568394002506e-16, 0.1802677320442452], 'true,false': [-3.469446951953614e-18, 0.19028774944881124], 'true,false,false': [0.19028774944881124, nan], 'false': [-6.712976427966062e-17, nan]}, {'': [0.11081455190154942, 7.477790818781124e-17], 'true': [0.007193013715332396, 0.10944701581925029], 'true,false': [-5.10702591327572e-16, 0.20615092409964214], 'true,false,false': [0.20615092409964214, nan], 'false': [7.477790818781124e-17, nan]}, {'': [0.10098356680165337, 3.612929164881865e-17], 'true': [0.0017834884721433734, 0.18447893279171115], 'true,false': [0.18447893279171115, nan], 'false': [3.612929164881865e-17, nan]}, {'': [0.09677845004723169, 1.0730780163663224e-17], 'true': [1.982541115402065e-18, 0.09805605100428512], 'true,false': [-1.4432899320127036e-16, 0.19409891232497986], 'true,false,false': [0.19409891232497986, nan], 'false': [1.0730780163663224e-17, nan]}, {'': [0.091906350851049, 3.4102413725687404e-17], 'true': [0.0028968099093850735, 0.20108021212844304], 'true,false': [0.20108021212844304, nan], 'false': [3.4102413725687404e-17, nan]}, {'': [0.09132386140055564, -4.029991050240782e-17], 'true': [0.004527348708628843, 0.1932975539032213], 'true,false': [-2.9738116731030977e-18, 0.20408163265306112], 'true,false,false': [0.20408163265306112, nan], 'false': [-4.029991050240782e-17, nan]}, {'': [0.08981318804310662, 3.6879380748794125e-17], 'true': [0.08981318804310662, nan], 'true,true': [0.00480837514795303, 0.1849503367523357], 'true,true,false': [3.1540426835941946e-18, 0.2010212308519206], 'true,true,true': [0.0, 9.992007221626409e-17]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, E).;true;true
9;true,true;genre(A, F).;true;true
9;true,false;genre(A, G).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995097;  // std dev = 1.00e-06, 160.000 (wgt'ed) examples reached here.  /* #pos=160 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.8581489350995115;  // std dev = 2.38e-07, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | | else return -0.14185106490048766;  // std dev = 6.83e-08, 78.000 (wgt'ed) examples reached here.  /* #neg=78 */
%   else return -0.14185106490048777;  // std dev = 1.43e-07, 313.000 (wgt'ed) examples reached here.  /* #neg=313 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.7194734122109548;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | else return 0.7111899019095884;  // std dev = 0.083, 102.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=101 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.7194734122109548;  // std dev = 0.000, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | | else return -0.12544463852839152;  // std dev = 0.000, 75.000 (wgt'ed) examples reached here.  /* #neg=75 */
%   else return -0.12544463852839194;  // std dev = 0.000, 277.000 (wgt'ed) examples reached here.  /* #neg=277 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( actor(B) )
%   | | then return -0.11231637819360639;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return -0.2260657276936419;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( director(B), actor(A) )
%   | | then return 0.5564308599087602;  // std dev = 0.014, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | | else return -0.11231637819360622;  // std dev = 6.23e-08, 79.000 (wgt'ed) examples reached here.  /* #neg=79 */
%   else return -0.11231637819360685;  // std dev = 0.000, 300.000 (wgt'ed) examples reached here.  /* #neg=300 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.4172547434630227;  // std dev = 1.58e-07, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | else return 0.4074598149717374;  // std dev = 0.084, 103.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=101 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.41725474346302255;  // std dev = 0.000, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | | else return -0.10159632948783619;  // std dev = 5.58e-08, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
%   else return -0.10159632948783659;  // std dev = 0.000, 255.000 (wgt'ed) examples reached here.  /* #neg=255 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( female(B) )
%   | | then return -0.09269127618926094;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.13435992395018406;  // std dev = 0.072, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( genre(B, E) )
%   | | then return 0.32302984837295623;  // std dev = 0.024, 160.000 (wgt'ed) examples reached here.  /* #pos=160 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.3205363717345762;  // std dev = 0.000, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | | else return -0.09269127618926097;  // std dev = 4.71e-08, 100.000 (wgt'ed) examples reached here.  /* #neg=100 */
%   else return -0.09269127618926046;  // std dev = 1.59e-07, 285.000 (wgt'ed) examples reached here.  /* #neg=285 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.2545790303610697;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | else if ( actor(A) )
%   | | | then return 0.25802494451123165;  // std dev = 1.33e-07, 101.000 (wgt'ed) examples reached here.  /* #pos=101 */
%   | | | else return -0.2344006788443964;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( actor(B) )
%   | | then return -0.08496572410582588;  // std dev = 0.008, 102.000 (wgt'ed) examples reached here.  /* #neg=102 */
%   | | else return 0.25505250329849993;  // std dev = 0.000, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   else return -0.08518475138839678;  // std dev = 9.88e-08, 280.000 (wgt'ed) examples reached here.  /* #neg=280 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( female(B) )
%   | | then return -0.07879265122165575;  // std dev = 2.63e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return -0.10560830362546553;  // std dev = 0.052, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( genre(B, E) )
%   | | then return 0.21087392790324952;  // std dev = 0.015, 160.000 (wgt'ed) examples reached here.  /* #pos=160 */
%   | | else if ( actor(B) )
%   | | | then return -0.07879265122165588;  // std dev = 0.000, 84.000 (wgt'ed) examples reached here.  /* #neg=84 */
%   | | | else return 0.20967312990029185;  // std dev = 0.000, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   else return -0.07877675473109144;  // std dev = 4.71e-08, 274.000 (wgt'ed) examples reached here.  /* #neg=274 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.17776067300434573;  // std dev = 0.014, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else return -0.07795798876018722;  // std dev = 0.221, 107.000 (wgt'ed) examples reached here.  /* #neg=107 */
%   else return -0.07324622576333686;  // std dev = 1.12e-07, 268.000 (wgt'ed) examples reached here.  /* #neg=268 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.15218682380610618;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | else if ( actor(A) )
%   | | | then return 0.1540844236074452;  // std dev = 0.000, 101.000 (wgt'ed) examples reached here.  /* #pos=101 */
%   | | | else return -0.16775895333561422;  // std dev = 3.73e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(A, E) )
%   | | then return -0.06476250913003409;  // std dev = 0.005, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( actor(B) )
%   | | | then return -0.06814013494318048;  // std dev = 0.000, 89.000 (wgt'ed) examples reached here.  /* #neg=89 */
%   | | | else return 0.15260285664477646;  // std dev = 3.80e-08, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   else return -0.06842697784420297;  // std dev = 0.000, 295.000 (wgt'ed) examples reached here.  /* #neg=295 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( genre(A, E) )
%   | | then return -0.14562281758236506;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.13450670930581418;  // std dev = 0.009, 160.000 (wgt'ed) examples reached here.  /* #pos=160 */
%   | else if ( genre(A, F) )
%   | | then return -0.06107172946284529;  // std dev = 0.006, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( actor(B) )
%   | | | then return -0.06393869806033434;  // std dev = 2.11e-08, 75.000 (wgt'ed) examples reached here.  /* #neg=75 */
%   | | | else return 0.1338969427350748;  // std dev = 0.000, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   else return -0.06419184008202608;  // std dev = 8.82e-08, 277.000 (wgt'ed) examples reached here.  /* #neg=277 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063417
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.122 seconds
Total inference time: 1.172 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.065013
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.36 seconds
Refined model CLL: -0.065013


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063417
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 6.126 seconds
Total inference time: 1.172 seconds
AUC ROC: 1.0
Total revision time: 6.126
Best scored revision CLL: -0.065013


Dataset: 4_cora_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 00:15:08
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063417, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 6.126, 'Inference time': 1.172, 'parameter_0.6': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.124607, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 1.32, 'Inference time': 1.057}}


Amount of data: 0.8
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;haswordauthor(E, C).;true;true
7;true,true,true;author(F, E), title(F, D).;false;false
7;true,true,false;title(G, D), venue(G, B).;false;false
7;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
7;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
7;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, B).;false;true
8;true,true,false;title(F, D), venue(F, A).;false;false
8;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
8;true,false,false;haswordvenue(A, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
8;false,true;haswordauthor(M, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;true,true;author(F, E), venue(F, B).;true;true
9;true,true,true;samebib(F, G), venue(G, A).;false;false
9;true,true,false;author(H, E), venue(H, A).;false;false
9;true,false;haswordtitle(I, C).;true;true
9;true,false,true;title(J, I), venue(J, A).;false;false
9;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995091;  // std dev = 1.08e-06, 216.000 (wgt'ed) examples reached here.  /* #pos=216 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.11875499570557228;  // std dev = 5.639, 165.000 (wgt'ed) examples reached here.  /* #neg=122 #pos=43 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048743;  // std dev = 2.65e-07, 374.000 (wgt'ed) examples reached here.  /* #neg=374 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7003576192078045;  // std dev = 1.868, 221.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=216 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.12411507146545848;  // std dev = 5.560, 153.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=43 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839227;  // std dev = 0.000, 429.000 (wgt'ed) examples reached here.  /* #neg=429 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1299784453543613;  // std dev = 0.178, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else if ( movie(E, A) )
%   | | then return 0.3563999538883535;  // std dev = 0.372, 380.000 (wgt'ed) examples reached here.  /* #neg=121 #pos=259 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360632;  // std dev = 0.000, 379.000 (wgt'ed) examples reached here.  /* #neg=379 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.47130493895536923;  // std dev = 0.000, 216.000 (wgt'ed) examples reached here.  /* #pos=216 */
%   | else if ( genre(A, E) )
%   | | then return -0.09999553865823109;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.040806515973078016;  // std dev = 5.594, 158.000 (wgt'ed) examples reached here.  /* #neg=115 #pos=43 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783592;  // std dev = 1.10e-08, 399.000 (wgt'ed) examples reached here.  /* #neg=399 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11017475146521218;  // std dev = 0.266, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else if ( genre(B, E) )
%   | | then return 0.3575045956071949;  // std dev = 0.000, 216.000 (wgt'ed) examples reached here.  /* #pos=216 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.05583935533222964;  // std dev = 5.508, 146.000 (wgt'ed) examples reached here.  /* #neg=103 #pos=43 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926082;  // std dev = 1.56e-07, 392.000 (wgt'ed) examples reached here.  /* #neg=392 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2776293016721991;  // std dev = 0.546, 217.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=216 */
%   | else if ( movie(E, A) )
%   | | then return 0.0033306656401109343;  // std dev = 0.423, 179.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=43 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 1.23e-07, 387.000 (wgt'ed) examples reached here.  /* #neg=387 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1312075889022179;  // std dev = 0.375, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else if ( genre(B, E) )
%   | | then return 0.2276997816042137;  // std dev = 0.000, 216.000 (wgt'ed) examples reached here.  /* #pos=216 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.04094179185092935;  // std dev = 5.523, 148.000 (wgt'ed) examples reached here.  /* #neg=105 #pos=43 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109143;  // std dev = 9.19e-08, 366.000 (wgt'ed) examples reached here.  /* #neg=366 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18790584866321194;  // std dev = 0.486, 217.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=216 */
%   | else if ( movie(E, B) )
%   | | then return -0.0032230899855925648;  // std dev = 5.654, 175.000 (wgt'ed) examples reached here.  /* #neg=132 #pos=43 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.07324622576333768;  // std dev = 0.000, 366.000 (wgt'ed) examples reached here.  /* #neg=366 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1605760767882726;  // std dev = 0.499, 217.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=216 */
%   | else if ( genre(A, E) )
%   | | then return -0.07319985885104059;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.012411757357048194;  // std dev = 5.700, 176.000 (wgt'ed) examples reached here.  /* #neg=133 #pos=43 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420339;  // std dev = 0.000, 417.000 (wgt'ed) examples reached here.  /* #neg=417 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return -0.373919583842167;  // std dev = 1.05e-08, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return 0.14215236199207407;  // std dev = 0.000, 216.000 (wgt'ed) examples reached here.  /* #pos=216 */
%   | | else if ( genre(A, G) )
%   | | | then return -0.06838639050652827;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else return 0.04218303261375028;  // std dev = 5.500, 145.000 (wgt'ed) examples reached here.  /* #neg=102 #pos=43 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.06419184008202573;  // std dev = 1.65e-07, 354.000 (wgt'ed) examples reached here.  /* #neg=354 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.12242
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.653 seconds
Total inference time: 0.964 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.98
   AUC PR    = 0.874546
   CLL	      = -0.125762
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.833977
   F1        = 0.909474


Total scoring time: 1.664 seconds
Parameter learned model CLL: -0.125762


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 9, 0], 'true,false,true': [1.08e-06, 0, 216], 'true,false,false,true': [5.639, 122, 43], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.65e-07, 374, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.868, 5, 216], 'true,false,true': [5.27e-09, 12, 0], 'true,false,false,true': [5.56, 110, 43], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 429, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.178, 19, 0], 'true,false,true': [0.372, 121, 259], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 379, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 216], 'true,false,true': [0.0, 14, 0], 'true,false,false,true': [5.594, 115, 43], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.1e-08, 399, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.266, 21, 0], 'true,false,true': [0.0, 0, 216], 'true,false,false,true': [5.508, 103, 43], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.56e-07, 392, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.546, 1, 216], 'true,false,true': [0.423, 136, 43], 'true,false,false': [0.0, 0, 0], 'false,true': [1.23e-07, 387, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.375, 15, 0], 'true,false,true': [0.0, 0, 216], 'true,false,false,true': [5.523, 105, 43], 'true,false,false,false': [0.0, 0, 0], 'false,true': [9.19e-08, 366, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.486, 1, 216], 'true,false,true': [5.654, 132, 43], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 366, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.499, 1, 216], 'true,false,true': [0.0, 17, 0], 'true,false,false,true': [5.7, 133, 43], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 417, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true,true,false': 'genre(A, G)'}, {'true,true,true,true': [1.05e-08, 5, 0], 'true,true,true,false': [0.0, 0, 216], 'true,true,false,true': [0.0, 15, 0], 'true,true,false,false': [5.5, 102, 43], 'true,false': [0.0, 0, 0], 'false': [1.65e-07, 354, 0]}]]
[{'': [0.22307034845496743, 1.8760988009708529e-16], 'true': [-9.25185853854297e-18, 0.21767554646220766], 'true,false': [5.394861512252613e-15, 0.192690541781452], 'true,false,false': [0.192690541781452, nan], 'false': [1.8760988009708529e-16, nan]}, {'': [0.17739066316105612, -1.3250214186668535e-16], 'true': [0.015785865020417275, 0.1915638773865764], 'true,false': [2.3129646346357427e-18, 0.20205903712247456], 'true,false,false': [0.20205903712247456, nan], 'false': [-1.3250214186668535e-16, nan]}, {'': [0.1423590372955492, -2.34347867994756e-17], 'true': [0.0016637259540854266, 0.13812885299357924], 'true,false': [0.13812885299357924, nan], 'false': [-2.34347867994756e-17, nan]}, {'': [0.12952466698458412, 1.2020459815490416e-16], 'true': [-1.4145063721150142e-15, 0.18344435980528562], 'true,false': [-1.982541115402065e-18, 0.19808524274955955], 'true,false,false': [0.19808524274955955, nan], 'false': [1.2020459815490416e-16, nan]}, {'': [0.10629351507368122, 6.230843505549347e-17], 'true': [0.0033667642203434006, 0.10569983830769236], 'true,false': [-3.9474596431116675e-16, 0.20777819478326195], 'true,false,false': [0.20777819478326195, nan], 'false': [6.230843505549347e-17, nan]}, {'': [0.10010862739567361, 3.901558949587113e-17], 'true': [0.0013728069492983726, 0.17857526633557183], 'true,false': [0.17857526633557183, nan], 'false': [3.901558949587113e-17, nan]}, {'': [0.09198880059953446, 2.3053811440303798e-17], 'true': [0.009350136049257758, 0.09222509993915218], 'true,false': [-3.4540271877227093e-16, 0.2061267348429517], 'true,false,false': [0.2061267348429517, nan], 'false': [2.3053811440303798e-17, nan]}, {'': [0.0911838709705929, -6.67347173271952e-17], 'true': [0.0010864322692479623, 0.18268258055205644], 'true,false': [0.18268258055205644, nan], 'false': [-6.67347173271952e-17, nan]}, {'': [0.0879254191866974, -1.2779545607196046e-16], 'true': [0.0011469107654203511, 0.16866115673962792], 'true,false': [0.0, 0.1846268078512405], 'true,false,false': [0.1846268078512405, nan], 'false': [-1.2779545607196046e-16, nan]}, {'': [0.08561511170692106, 7.652384689506728e-17], 'true': [0.08561511170692106, nan], 'true,true': [0.005889246197647526, 0.19009042234851342], 'true,true,false': [-1.8503717077085942e-18, 0.20860879904875157], 'true,true,true': [2.2204460492503132e-17, -1.644774851296528e-16]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, E).;true;true
9;true,true;genre(A, F).;true;true
9;true,false;genre(A, G).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048774;  // std dev = 1.05e-08, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995091;  // std dev = 1.08e-06, 216.000 (wgt'ed) examples reached here.  /* #pos=216 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.8581489350995118;  // std dev = 2.31e-07, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | | | else return -0.14185106490048777;  // std dev = 2.98e-08, 121.000 (wgt'ed) examples reached here.  /* #neg=121 */
%   else return -0.1418510649004873;  // std dev = 3.01e-07, 410.000 (wgt'ed) examples reached here.  /* #neg=410 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( actor(A) )
%   | | then return 0.7194734122109572;  // std dev = 0.000, 216.000 (wgt'ed) examples reached here.  /* #pos=216 */
%   | | else return -0.12544463852839138;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 7.45e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.7194734122109551;  // std dev = 0.000, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | | | else return -0.12544463852839108;  // std dev = 7.60e-08, 106.000 (wgt'ed) examples reached here.  /* #neg=106 */
%   else return -0.12544463852839222;  // std dev = 0.000, 378.000 (wgt'ed) examples reached here.  /* #neg=378 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360638;  // std dev = 7.45e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( actor(A), director(B) )
%   | | then return 0.5553664367462832;  // std dev = 4.13e-07, 259.000 (wgt'ed) examples reached here.  /* #pos=259 */
%   | | else return -0.1123163781936062;  // std dev = 9.42e-08, 136.000 (wgt'ed) examples reached here.  /* #neg=136 */
%   else return -0.11231637819360629;  // std dev = 0.000, 385.000 (wgt'ed) examples reached here.  /* #neg=385 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4127511078863274;  // std dev = 0.731, 218.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=216 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783635;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.41751358415831047;  // std dev = 0.000, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | | | else return -0.10159632948783641;  // std dev = 0.000, 131.000 (wgt'ed) examples reached here.  /* #neg=131 */
%   else return -0.1015963294878363;  // std dev = 1.05e-07, 350.000 (wgt'ed) examples reached here.  /* #neg=350 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11043856145778944;  // std dev = 0.097, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else if ( genre(B, E) )
%   | | then return 0.32175026473546137;  // std dev = 0.000, 216.000 (wgt'ed) examples reached here.  /* #pos=216 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.32071184716014944;  // std dev = 2.98e-08, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | | | else return -0.09269127618926086;  // std dev = 6.91e-08, 116.000 (wgt'ed) examples reached here.  /* #neg=116 */
%   else return -0.0926912761892607;  // std dev = 1.75e-07, 375.000 (wgt'ed) examples reached here.  /* #neg=375 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.2558806799172922;  // std dev = 0.000, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   | | else if ( actor(A) )
%   | | | then return 0.25588067991729246;  // std dev = 0.000, 131.000 (wgt'ed) examples reached here.  /* #pos=131 */
%   | | | else return -0.13269936253207312;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( actor(A), director(B) )
%   | | then return 0.2551722425694896;  // std dev = 0.000, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | | else return -0.08505456515299625;  // std dev = 0.004, 116.000 (wgt'ed) examples reached here.  /* #neg=116 */
%   else return -0.08518475138839678;  // std dev = 1.23e-07, 393.000 (wgt'ed) examples reached here.  /* #neg=393 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.0775077146584565;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else if ( genre(B, E) )
%   | | then return 0.210258020785659;  // std dev = 0.000, 216.000 (wgt'ed) examples reached here.  /* #pos=216 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.20975771563253548;  // std dev = 5.77e-08, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | | | else return -0.07878620299157629;  // std dev = 0.000, 131.000 (wgt'ed) examples reached here.  /* #neg=131 */
%   else return -0.07877675473109143;  // std dev = 7.60e-08, 352.000 (wgt'ed) examples reached here.  /* #neg=352 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.17746336092050366;  // std dev = 5.16e-08, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   | | else return 0.1710205157720475;  // std dev = 0.043, 134.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=131 */
%   | else if ( director(B), actor(A) )
%   | | then return 0.17709649774527753;  // std dev = 0.000, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | | else return -0.07317512134461472;  // std dev = 0.003, 140.000 (wgt'ed) examples reached here.  /* #neg=140 */
%   else return -0.07324622576333721;  // std dev = 2.98e-08, 396.000 (wgt'ed) examples reached here.  /* #neg=396 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.1530221036956138;  // std dev = 0.000, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   | | else return 0.14754304416797345;  // std dev = 0.042, 134.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=131 */
%   | else if ( genre(A, E) )
%   | | then return -0.06739666818582221;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.15274385809367083;  // std dev = 0.000, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | | | else return -0.06843920779765454;  // std dev = 3.49e-08, 112.000 (wgt'ed) examples reached here.  /* #neg=112 */
%   else return -0.06842697784420332;  // std dev = 0.000, 386.000 (wgt'ed) examples reached here.  /* #neg=386 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( genre(A, E) )
%   | | then return -0.1456738199306585;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return 0.13506811716375375;  // std dev = 0.010, 216.000 (wgt'ed) examples reached here.  /* #pos=216 */
%   | else if ( genre(A, F) )
%   | | then return -0.06328201813864097;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.13400703000801106;  // std dev = 2.36e-08, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | | | else return -0.06420263047002514;  // std dev = 0.000, 120.000 (wgt'ed) examples reached here.  /* #neg=120 */
%   else return -0.06419184008202569;  // std dev = 1.74e-07, 367.000 (wgt'ed) examples reached here.  /* #neg=367 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063513
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.287 seconds
Total inference time: 1.04 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064676
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.519 seconds
Refined model CLL: -0.064676


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063513
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 7.123 seconds
Total inference time: 1.04 seconds
AUC ROC: 1.0
Total revision time: 7.123
Best scored revision CLL: -0.064676


Dataset: 4_cora_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 00:15:18
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063513, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 7.123, 'Inference time': 1.04, 'parameter_0.8': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.12242, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 1.653, 'Inference time': 0.964}}


Amount of data: 1.0
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;haswordauthor(E, C).;true;true
7;true,true,true;author(F, E), title(F, D).;false;false
7;true,true,false;title(G, D), venue(G, B).;false;false
7;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
7;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
7;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, B).;false;true
8;true,true,false;title(F, D), venue(F, A).;false;false
8;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
8;true,false,false;haswordvenue(A, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
8;false,true;haswordauthor(M, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;true,true;author(F, E), venue(F, B).;true;true
9;true,true,true;samebib(F, G), venue(G, A).;false;false
9;true,true,false;author(H, E), venue(H, A).;false;false
9;true,false;haswordtitle(I, C).;true;true
9;true,false,true;title(J, I), venue(J, A).;false;false
9;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048774;  // std dev = 1.49e-08, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995086;  // std dev = 1.08e-06, 265.000 (wgt'ed) examples reached here.  /* #pos=265 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.1719787223335562;  // std dev = 6.363, 188.000 (wgt'ed) examples reached here.  /* #neg=129 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048743;  // std dev = 2.02e-07, 473.000 (wgt'ed) examples reached here.  /* #neg=473 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.710015374329547;  // std dev = 1.455, 268.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=265 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.1353907791022044;  // std dev = 6.429, 197.000 (wgt'ed) examples reached here.  /* #neg=138 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839233;  // std dev = 0.000, 483.000 (wgt'ed) examples reached here.  /* #neg=483 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14385635604270725;  // std dev = 0.216, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else if ( movie(E, A) )
%   | | then return 0.3669585556816065;  // std dev = 0.371, 464.000 (wgt'ed) examples reached here.  /* #neg=140 #pos=324 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360588;  // std dev = 0.000, 487.000 (wgt'ed) examples reached here.  /* #neg=487 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.46126704970247273;  // std dev = 0.941, 267.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=265 */
%   | else if ( genre(A, E) )
%   | | then return -0.09875349104948052;  // std dev = 3.73e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.05301908531461531;  // std dev = 6.436, 198.000 (wgt'ed) examples reached here.  /* #neg=139 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783545;  // std dev = 1.52e-08, 486.000 (wgt'ed) examples reached here.  /* #neg=486 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14624570253592836;  // std dev = 0.468, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | else if ( genre(B, E) )
%   | | then return 0.3551700580026704;  // std dev = 0.000, 265.000 (wgt'ed) examples reached here.  /* #pos=265 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.027397739256171883;  // std dev = 6.507, 209.000 (wgt'ed) examples reached here.  /* #neg=150 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.0926912761892614;  // std dev = 0.000, 489.000 (wgt'ed) examples reached here.  /* #neg=489 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2590892975874408;  // std dev = 1.663, 275.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=265 */
%   | else if ( movie(E, A) )
%   | | then return 0.01573472945642316;  // std dev = 0.432, 227.000 (wgt'ed) examples reached here.  /* #neg=168 #pos=59 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 1.46e-07, 472.000 (wgt'ed) examples reached here.  /* #neg=472 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12265056062935507;  // std dev = 0.463, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | else if ( genre(B, E) )
%   | | then return 0.22958619019810741;  // std dev = 3.45e-07, 265.000 (wgt'ed) examples reached here.  /* #pos=265 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.007465104479231859;  // std dev = 6.560, 218.000 (wgt'ed) examples reached here.  /* #neg=159 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109191;  // std dev = 1.60e-07, 474.000 (wgt'ed) examples reached here.  /* #neg=474 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17757173781662203;  // std dev = 1.325, 273.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=265 */
%   | else if ( movie(E, B) )
%   | | then return 0.010103634283916885;  // std dev = 6.522, 226.000 (wgt'ed) examples reached here.  /* #neg=167 #pos=59 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.07324622576333689;  // std dev = 1.60e-07, 503.000 (wgt'ed) examples reached here.  /* #neg=503 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.16550750638297998;  // std dev = 0.000, 265.000 (wgt'ed) examples reached here.  /* #pos=265 */
%   | else if ( genre(A, E) )
%   | | then return -0.07222765024595977;  // std dev = 3.73e-09, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.02988432862551524;  // std dev = 6.443, 199.000 (wgt'ed) examples reached here.  /* #neg=140 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420353;  // std dev = 0.000, 485.000 (wgt'ed) examples reached here.  /* #neg=485 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return -0.35866739635528316;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.14389431758618781;  // std dev = 0.000, 265.000 (wgt'ed) examples reached here.  /* #pos=265 */
%   | | else if ( genre(A, G) )
%   | | | then return -0.06753465585386985;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | | else return -0.006716008774082275;  // std dev = 6.582, 222.000 (wgt'ed) examples reached here.  /* #neg=163 #pos=59 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.06419184008202543;  // std dev = 2.38e-07, 473.000 (wgt'ed) examples reached here.  /* #neg=473 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.125283
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.869 seconds
Total inference time: 1.015 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.977686
   AUC PR    = 0.861626
   CLL	      = -0.129755
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.817901
   F1        = 0.89983


Total scoring time: 1.826 seconds
Parameter learned model CLL: -0.129755


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [1.49e-08, 24, 0], 'true,false,true': [1.08e-06, 0, 265], 'true,false,false,true': [6.363, 129, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.02e-07, 473, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.455, 3, 265], 'true,false,true': [5.27e-09, 12, 0], 'true,false,false,true': [6.429, 138, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 483, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.216, 18, 0], 'true,false,true': [0.371, 140, 324], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 487, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.941, 2, 265], 'true,false,true': [3.73e-09, 7, 0], 'true,false,false,true': [6.436, 139, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.52e-08, 486, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.468, 28, 0], 'true,false,true': [0.0, 0, 265], 'true,false,false,true': [6.507, 150, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 489, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [1.663, 10, 265], 'true,false,true': [0.432, 168, 59], 'true,false,false': [0.0, 0, 0], 'false,true': [1.46e-07, 472, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.463, 27, 0], 'true,false,true': [3.45e-07, 0, 265], 'true,false,false,true': [6.56, 159, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.6e-07, 474, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [1.325, 8, 265], 'true,false,true': [6.522, 167, 59], 'true,false,false': [0.0, 0, 0], 'false,true': [1.6e-07, 503, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 265], 'true,false,true': [3.73e-09, 18, 0], 'true,false,false,true': [6.443, 140, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 485, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true,true,false': 'genre(A, G)'}, {'true,true,true,true': [0.0, 3, 0], 'true,true,true,false': [0.0, 0, 265], 'true,true,false,true': [0.0, 20, 0], 'true,true,false,false': [6.582, 163, 59], 'true,false': [0.0, 0, 0], 'false': [2.38e-07, 473, 0]}]]
[{'': [0.21787112851548868, 8.637675963257032e-17], 'true': [9.25185853854297e-18, 0.2036752774001169], 'true,false': [4.397321081685148e-15, 0.21534065187867846], 'true,false,false': [0.21534065187867846, nan], 'false': [8.637675963257032e-17, nan]}, {'': [0.1782761576132056, -1.3791590368014366e-16], 'true': [0.007901812450009897, 0.20143298923872943], 'true,false': [2.3129646346357427e-18, 0.209796696642531], 'true,false,false': [0.209796696642531, nan], 'false': [-1.3791590368014366e-16, nan]}, {'': [0.1422321057919074, -5.471324967351901e-18], 'true': [0.002586402527076617, 0.137905052160953], 'true,false': [0.137905052160953, nan], 'false': [-5.471324967351901e-18, nan]}, {'': [0.1319528235066031, 2.3209600679406563e-16], 'true': [0.0033171898276243123, 0.20280453862072254], 'true,false': [1.982541115402065e-18, 0.2091878379757155], 'true,false,false': [0.2091878379757155, nan], 'false': [2.3209600679406563e-16, nan]}, {'': [0.11650267489906002, -2.179578944049387e-17], 'true': [0.007823152791020752, 0.11581816631199941], 'true,false': [-8.043880027472832e-16, 0.20260525171127194], 'true,false,false': [0.20260525171127194, nan], 'false': [-2.179578944049387e-17, nan]}, {'': [0.10460287138355523, 4.516161456102332e-17], 'true': [0.010057937135473725, 0.18669765890303894], 'true,false': [0.18669765890303894, nan], 'false': [4.516161456102332e-17, nan]}, {'': [0.09955200380968048, 5.434002989726505e-17], 'true': [0.007950626838552695, 0.10131104567930957], 'true,false': [4.491166348672331e-16, 0.19739500042084118], 'true,false,false': [0.19739500042084118, nan], 'false': [5.434002989726505e-17, nan]}, {'': [0.09571712331983644, 5.120710570835712e-17], 'true': [0.006434338368636196, 0.18822400108365236], 'true,false': [0.18822400108365236, nan], 'false': [5.120710570835712e-17, nan]}, {'': [0.09161155105479296, -1.2178116476300687e-16], 'true': [-2.010970006868208e-17, 0.19207213313946941], 'true,false': [7.709882115452476e-19, 0.20858059139920848], 'true,false,false': [0.20858059139920848, nan], 'false': [-1.2178116476300687e-16, nan]}, {'': [0.09215415643665313, 1.2017636122792393e-16], 'true': [0.09215415643665313, nan], 'true,true': [0.0027956084271861387, 0.1792879507406128], 'true,true,false': [0.0, 0.19513432351270243], 'true,true,true': [0.0, -2.010970006868208e-16]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, E).;true;true
9;true,true;genre(A, F).;true;true
9;true,false;genre(A, G).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995086;  // std dev = 1.08e-06, 265.000 (wgt'ed) examples reached here.  /* #pos=265 */
%   | | else if ( actor(B) )
%   | | | then return -0.1418510649004881;  // std dev = 0.000, 154.000 (wgt'ed) examples reached here.  /* #neg=154 */
%   | | | else return 0.825362049853611;  // std dev = 1.391, 61.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=59 */
%   else return -0.14185106490048724;  // std dev = 2.76e-07, 456.000 (wgt'ed) examples reached here.  /* #neg=456 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.7194734122109546;  // std dev = 0.000, 102.000 (wgt'ed) examples reached here.  /* #pos=102 */
%   | | else if ( actor(A) )
%   | | | then return 0.7194734122109564;  // std dev = 0.000, 163.000 (wgt'ed) examples reached here.  /* #pos=163 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 7.45e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.7260429737826729;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.127521734859705;  // std dev = 0.209, 143.000 (wgt'ed) examples reached here.  /* #neg=143 */
%   else return -0.12544463852839233;  // std dev = 0.000, 485.000 (wgt'ed) examples reached here.  /* #neg=485 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5565435613665007;  // std dev = 0.045, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.1141319998256425;  // std dev = 0.236, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   else return -0.11231637819360576;  // std dev = 0.000, 521.000 (wgt'ed) examples reached here.  /* #neg=521 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.4172273399959705;  // std dev = 2.80e-07, 102.000 (wgt'ed) examples reached here.  /* #pos=102 */
%   | | else return 0.4048043922275448;  // std dev = 0.079, 167.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=163 */
%   | else if ( genre(A, E) )
%   | | then return -0.10143072933577818;  // std dev = 5.27e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else if ( actor(B) )
%   | | | then return -0.10124157417090626;  // std dev = 0.000, 144.000 (wgt'ed) examples reached here.  /* #neg=144 */
%   | | | else return 0.3822056877778017;  // std dev = 1.262, 63.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=59 */
%   else return -0.10159632948783553;  // std dev = 3.14e-07, 468.000 (wgt'ed) examples reached here.  /* #neg=468 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.10678023540169504;  // std dev = 0.109, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | else if ( genre(B, E) )
%   | | then return 0.32218565802937105;  // std dev = 0.021, 265.000 (wgt'ed) examples reached here.  /* #pos=265 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.3339987553787285;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.09497560680670991;  // std dev = 0.296, 163.000 (wgt'ed) examples reached here.  /* #neg=163 */
%   else return -0.09269127618926129;  // std dev = 0.000, 467.000 (wgt'ed) examples reached here.  /* #neg=467 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.25764238126474576;  // std dev = 0.059, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.08857386901118008;  // std dev = 0.296, 163.000 (wgt'ed) examples reached here.  /* #neg=163 */
%   else return -0.08518475138839678;  // std dev = 1.44e-07, 473.000 (wgt'ed) examples reached here.  /* #neg=473 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08682646353402919;  // std dev = 0.080, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else if ( genre(B, E) )
%   | | then return 0.21022504875873227;  // std dev = 0.016, 265.000 (wgt'ed) examples reached here.  /* #pos=265 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.21724476015815897;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.08310759206392468;  // std dev = 0.370, 150.000 (wgt'ed) examples reached here.  /* #neg=150 */
%   else return -0.07877675473109179;  // std dev = 1.83e-07, 455.000 (wgt'ed) examples reached here.  /* #neg=455 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.17837341316725228;  // std dev = 0.038, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.07900480564722427;  // std dev = 0.434, 187.000 (wgt'ed) examples reached here.  /* #neg=187 */
%   else return -0.07324622576333772;  // std dev = 0.000, 438.000 (wgt'ed) examples reached here.  /* #neg=438 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( actor(A) )
%   | | then return 0.15288301434518137;  // std dev = 0.013, 265.000 (wgt'ed) examples reached here.  /* #pos=265 */
%   | | else return -0.10547596317622895;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( genre(A, E) )
%   | | then return -0.06635706664074183;  // std dev = 1.24e-08, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.1574382569858361;  // std dev = 2.58e-08, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.06824965225899614;  // std dev = 0.167, 161.000 (wgt'ed) examples reached here.  /* #neg=161 */
%   else return -0.06842697784420353;  // std dev = 0.000, 489.000 (wgt'ed) examples reached here.  /* #neg=489 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( genre(A, E) )
%   | | then return -0.09593029352034037;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.13411573723389106;  // std dev = 0.011, 265.000 (wgt'ed) examples reached here.  /* #pos=265 */
%   | else if ( genre(A, F) )
%   | | then return -0.06236240689543682;  // std dev = 3.73e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.13766129486052228;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.06527474086805152;  // std dev = 0.225, 144.000 (wgt'ed) examples reached here.  /* #neg=144 */
%   else return -0.06419184008202537;  // std dev = 2.45e-07, 506.000 (wgt'ed) examples reached here.  /* #neg=506 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063137
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.863 seconds
Total inference time: 1.026 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064901
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.617 seconds
Refined model CLL: -0.064901


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063137
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 8.175 seconds
Total inference time: 1.026 seconds
AUC ROC: 1.0
Total revision time: 8.175
Best scored revision CLL: -0.064901


Dataset: 4_cora_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 00:15:29
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063137, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 8.175, 'Inference time': 1.026, 'parameter_1.0': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.125283, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 1.869, 'Inference time': 1.015}}


Starting fold 3

Target train facts examples: 737
Target train pos examples: 204
Target train neg examples: 10693

Target test facts examples: 341
Target test pos	 examples: 178
Target test neg examples: 3543

Amount of data: 0.2
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;haswordauthor(E, C).;true;true
7;true,true,true;author(F, E), title(F, D).;false;false
7;true,true,false;title(G, D), venue(G, B).;false;false
7;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
7;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
7;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, B).;false;true
8;true,true,false;title(F, D), venue(F, A).;false;false
8;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
8;true,false,false;haswordvenue(A, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
8;false,true;haswordauthor(M, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;true,true;author(F, E), venue(F, B).;true;true
9;true,true,true;samebib(F, G), venue(G, A).;false;false
9;true,true,false;author(H, E), venue(H, A).;false;false
9;true,false;haswordtitle(I, C).;true;true
9;true,false,true;title(J, I), venue(J, A).;false;false
9;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995115;  // std dev = 2.60e-07, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.07288554765910848;  // std dev = 1.365, 29.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048768;  // std dev = 5.37e-08, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.719473412210955;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.03320819354583712;  // std dev = 1.342, 20.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.1254446385283916;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.30842181017103965;  // std dev = 0.343, 64.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=40 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360628;  // std dev = 4.21e-08, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4603991321193317;  // std dev = 0.697, 39.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=38 */
%   | else if ( genre(A, E) )
%   | | then return -0.11231637819360639;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.06830724616610705;  // std dev = 1.342, 20.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783623;  // std dev = 4.37e-09, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.3666899859837023;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.08203791852445642;  // std dev = 1.359, 26.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926104;  // std dev = 0.000, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2863591002933034;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | else if ( movie(E, A) )
%   | | then return -0.07696069359753135;  // std dev = 0.249, 30.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839679;  // std dev = 7.45e-09, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09478401676442849;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.23156553231923108;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.043599553835579674;  // std dev = 1.345, 21.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109176;  // std dev = 0.000, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.19293390339834185;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | else if ( movie(E, B) )
%   | | then return -0.05616950059500328;  // std dev = 1.357, 27.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.07324622576333704;  // std dev = 0.000, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1646550860704856;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | else if ( genre(A, E) )
%   | | then return -0.0826005765951463;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.05041008907659902;  // std dev = 1.359, 26.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.0684269778442027;  // std dev = 2.08e-09, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return -0.446996282086255;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0.14323869790986343;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | else if ( genre(A, G) )
%   | | | then return -0.07655322812880805;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return -0.044912982287480245;  // std dev = 1.359, 26.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=2 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.06419184008202625;  // std dev = 0.000, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */


Results
   AUC ROC   = 0.97199
   AUC PR    = 0.81824
   CLL	      = -0.108275
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.840391


Total learning time: 0.793 seconds
Total inference time: 1.009 seconds
AUC ROC: 0.97199


Results scoring model
   AUC ROC   = 0.993183
   AUC PR    = 0.965342
   CLL	      = -0.082772
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.95
   F1        = 0.974359


Total scoring time: 0.898 seconds
Parameter learned model CLL: -0.082772


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [2.6e-07, 0, 38], 'true,false,false,true': [1.365, 27, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.37e-08, 50, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 38], 'true,false,true': [0.0, 3, 0], 'true,false,false,true': [1.342, 18, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 58, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.343, 24, 40], 'true,false,false': [0.0, 0, 0], 'false,true': [4.21e-08, 58, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.697, 1, 38], 'true,false,true': [0.0, 2, 0], 'true,false,false,true': [1.342, 18, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [4.37e-09, 55, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 38], 'true,false,false,true': [1.359, 24, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 63, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 38], 'true,false,true': [0.249, 28, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [7.45e-09, 64, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.0, 0, 38], 'true,false,false,true': [1.345, 19, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 53, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 38], 'true,false,true': [1.357, 25, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 69, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 38], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [1.359, 24, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.08e-09, 53, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true,true,false': 'genre(A, G)'}, {'true,true,true,true': [0.0, 1, 0], 'true,true,true,false': [0.0, 0, 38], 'true,true,false,true': [0.0, 2, 0], 'true,true,false,false': [1.359, 24, 2], 'true,false': [0.0, 0, 0], 'false': [0.0, 54, 0]}]]
[{'': [0.24221453287197328, 5.773159728050814e-17], 'true': [0.0, 0.2405881042548461], 'true,false': [1.7763568394002505e-15, 0.06420927467300835], 'true,false,false': [0.06420927467300835, nan], 'false': [5.773159728050814e-17, nan]}, {'': [0.16722816765867357, -4.0197730201945323e-17], 'true': [-7.47939721852737e-16, 0.07922581041017239], 'true,false': [0.0, 0.09000000000000004], 'true,false,false': [0.09000000000000004, nan], 'false': [-4.0197730201945323e-17, nan]}, {'': [0.11797317871487374, 3.062684205862501e-17], 'true': [nan, 0.11797317871487374], 'true,false': [0.11797317871487374, nan], 'false': [3.062684205862501e-17, nan]}, {'': [0.10296215064474354, 2.0185873175002847e-17], 'true': [0.01245343135322066, 0.0819782482398193], 'true,false': [0.0, 0.08999999999999997], 'true,false,false': [0.08999999999999997, nan], 'false': [2.0185873175002847e-17, nan]}, {'': [0.07741560001238217, -2.114710523095536e-17], 'true': [nan, 0.07741560001238217], 'true,false': [-2.1035804677108228e-16, 0.07100591715976326], 'true,false,false': [0.07100591715976326, nan], 'false': [-2.114710523095536e-17, nan]}, {'': [0.059806432531726725, 8.673617379884035e-19], 'true': [-7.011934892369409e-17, 0.061795830012363925], 'true,false': [0.061795830012363925, nan], 'false': [8.673617379884035e-19, nan]}, {'': [0.048081896260633465, 0.0], 'true': [0.0, 0.048027329165037345], 'true,false': [-3.5059674461847047e-17, 0.08616780045351478], 'true,false,false': [0.08616780045351478, nan], 'false': [0.0, nan]}, {'': [0.043408037997283794, -2.413528314402514e-18], 'true': [-2.921639538487254e-17, 0.06822398262367223], 'true,false': [0.06822398262367223, nan], 'false': [-2.413528314402514e-18, nan]}, {'': [0.039774693231795506, 4.7132109535973624e-18], 'true': [-3.5059674461847047e-17, 0.06841302573498978], 'true,false': [0.0, 0.07100591715976329], 'true,false,false': [0.07100591715976329, nan], 'false': [4.7132109535973624e-18, nan]}, {'': [0.04012214140223354, -3.0839528461809902e-18], 'true': [0.04012214140223354, nan], 'true,true': [0.008703707167139165, 0.06600046576590106], 'true,true,false': [0.0, 0.07100591715976326], 'true,true,true': [0.0, -1.7529837230923523e-17]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, E).;true;true
9;true,true;genre(A, F).;true;true
9;true,false;genre(A, G).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995115;  // std dev = 2.60e-07, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | else if ( actor(B), female(A) )
%   | | | then return -0.1418510649004878;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return -0.016851064900487808;  // std dev = 1.323, 16.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   else return -0.14185106490048766;  // std dev = 6.66e-08, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.719473412210955;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( female(B) )
%   | | | then return -0.12783922367008557;  // std dev = 0.019, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return -0.027104648172982637;  // std dev = 1.331, 18.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   else return -0.1254446385283916;  // std dev = 0.000, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.12905303027448645;  // std dev = 0.039, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else if ( female(A) )
%   | | then return 0.5700354574395496;  // std dev = 0.066, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else return 0.571579564880946;  // std dev = 0.069, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   else return -0.11231637819360636;  // std dev = 1.05e-08, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.41377309690597197;  // std dev = 0.001, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | else if ( genre(A, E) )
%   | | then return -0.10007885354726703;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( female(B) )
%   | | | then return -0.10492557512170156;  // std dev = 0.015, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return 0.04334028487734051;  // std dev = 1.154, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   else return -0.10159632948783623;  // std dev = 3.33e-08, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.31817701058038844;  // std dev = 0.001, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | else if ( actor(A), actor(B) )
%   | | then return -0.1119060446307603;  // std dev = 0.072, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | else return 0.4735941895178906;  // std dev = 0.735, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else return -0.09269127618926101;  // std dev = 0.000, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2534418344183213;  // std dev = 0.000899, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | else if ( actor(A), actor(B) )
%   | | then return -0.1034909478411368;  // std dev = 0.054, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | else return 0.2707184354385126;  // std dev = 0.820, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else return -0.08518475138839679;  // std dev = 1.83e-08, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.17478101178346084;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.20853463242672135;  // std dev = 0.000784, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | else if ( female(A) )
%   | | | then return 0.009799993801889824;  // std dev = 0.652, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | | else return -0.06224989811319113;  // std dev = 0.701, 19.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=1 */
%   else return -0.0787767547310917;  // std dev = 2.98e-08, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17619890591868223;  // std dev = 0.000690, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | else if ( actor(A), actor(B) )
%   | | then return -0.09012999073236551;  // std dev = 0.044, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else return 0.2370940742622804;  // std dev = 0.776, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else return -0.07324622576333704;  // std dev = 1.05e-08, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1520626047253323;  // std dev = 0.000613, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | else if ( genre(A, E) )
%   | | then return -0.18395146303453527;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( female(A), actor(B) )
%   | | | then return -0.07711377033334807;  // std dev = 0.027, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return -0.01601374452061646;  // std dev = 0.874, 19.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=2 */
%   else return -0.06842697784420271;  // std dev = 1.05e-08, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.13347496239698356;  // std dev = 0.000550, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | else if ( genre(A, F) )
%   | | then return -0.15792439947861878;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( female(A), actor(B) )
%   | | | then return -0.07273633561404648;  // std dev = 0.024, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.0019557323463108346;  // std dev = 0.867, 15.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=2 */
%   else return -0.06419184008202625;  // std dev = 0.000, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */


Results
   AUC ROC   = 0.995299
   AUC PR    = 0.922374
   CLL	      = -0.102612
   Precision = 0.693548 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.708791


Total learning time: 1.091 seconds
Total inference time: 1.052 seconds
AUC ROC: 0.995299


Results scoring model
   AUC ROC   = 0.99993
   AUC PR    = 0.996428
   CLL	      = -0.072607
   Precision = 0.926829 at threshold = 0.5
   Recall    = 0.95
   F1        = 0.938272


Total scoring time: 0.921 seconds
Refined model CLL: -0.072607


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.995299
   AUC PR    = 0.922374
   CLL	      = -0.102612
   Precision = 0.693548 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.708791


Total learning time: 3.7030000000000003 seconds
Total inference time: 1.052 seconds
AUC ROC: 0.995299
Total revision time: 3.7030000000000003
Best scored revision CLL: -0.072607


Dataset: 4_cora_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 00:15:35
{'AUC ROC': 0.995299, 'AUC PR': 0.922374, 'CLL': -0.102612, 'Precision': [0.693548, 0.5], 'Recall': 0.724719, 'F1': 0.708791, 'Learning time': 3.7030000000000003, 'Inference time': 1.052, 'parameter_0.2': {'AUC ROC': 0.97199, 'AUC PR': 0.81824, 'CLL': -0.108275, 'Precision': [1.0, 0.5], 'Recall': 0.724719, 'F1': 0.840391, 'Learning time': 0.793, 'Inference time': 1.009}}


Amount of data: 0.4
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;haswordauthor(E, C).;true;true
7;true,true,true;author(F, E), title(F, D).;false;false
7;true,true,false;title(G, D), venue(G, B).;false;false
7;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
7;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
7;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, B).;false;true
8;true,true,false;title(F, D), venue(F, A).;false;false
8;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
8;true,false,false;haswordvenue(A, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
8;false,true;haswordauthor(M, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;true,true;author(F, E), venue(F, B).;true;true
9;true,true,true;samebib(F, G), venue(G, A).;false;false
9;true,true,false;author(H, E), venue(H, A).;false;false
9;true,false;haswordtitle(I, C).;true;true
9;true,false,true;title(J, I), venue(J, A).;false;false
9;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995126;  // std dev = 0.000, 77.000 (wgt'ed) examples reached here.  /* #pos=77 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.04429008929073166;  // std dev = 1.900, 41.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048763;  // std dev = 8.43e-08, 106.000 (wgt'ed) examples reached here.  /* #neg=106 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109538;  // std dev = 2.23e-07, 77.000 (wgt'ed) examples reached here.  /* #pos=77 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.06511612943713516;  // std dev = 1.927, 56.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839127;  // std dev = 0.000, 125.000 (wgt'ed) examples reached here.  /* #neg=125 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360638;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( movie(E, A) )
%   | | then return 0.30377592805573345;  // std dev = 0.344, 131.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=81 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.1123163781936062;  // std dev = 9.06e-08, 124.000 (wgt'ed) examples reached here.  /* #neg=124 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.479661659528589;  // std dev = 2.53e-07, 77.000 (wgt'ed) examples reached here.  /* #pos=77 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783633;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.07830728554897805;  // std dev = 1.909, 45.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.1015963294878363;  // std dev = 2.28e-09, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926098;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.36330224672432804;  // std dev = 1.58e-07, 77.000 (wgt'ed) examples reached here.  /* #pos=77 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.06566568170691639;  // std dev = 1.907, 44.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926087;  // std dev = 6.99e-08, 115.000 (wgt'ed) examples reached here.  /* #neg=115 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.28406990411628535;  // std dev = 0.000, 77.000 (wgt'ed) examples reached here.  /* #pos=77 */
%   | else if ( movie(E, A) )
%   | | then return -0.06719871659736014;  // std dev = 0.268, 51.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=4 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839682;  // std dev = 5.48e-08, 99.000 (wgt'ed) examples reached here.  /* #neg=99 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08009194748399172;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(B, E) )
%   | | then return 0.2299785928841974;  // std dev = 0.000, 77.000 (wgt'ed) examples reached here.  /* #pos=77 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.06838948189421244;  // std dev = 1.927, 56.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109155;  // std dev = 6.75e-08, 118.000 (wgt'ed) examples reached here.  /* #neg=118 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1917915847422761;  // std dev = 0.000, 77.000 (wgt'ed) examples reached here.  /* #pos=77 */
%   | else if ( movie(E, B) )
%   | | then return -0.03907763614072498;  // std dev = 1.903, 45.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=4 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.07324622576333714;  // std dev = 3.80e-08, 120.000 (wgt'ed) examples reached here.  /* #neg=120 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1638026550546511;  // std dev = 8.16e-08, 77.000 (wgt'ed) examples reached here.  /* #pos=77 */
%   | else if ( genre(A, E) )
%   | | then return -0.07173969409284031;  // std dev = 1.86e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.03214816765461415;  // std dev = 1.902, 42.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420265;  // std dev = 4.84e-09, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.14258241033141178;  // std dev = 3.65e-08, 77.000 (wgt'ed) examples reached here.  /* #pos=77 */
%   | | else if ( genre(A, G) )
%   | | | then return -0.06710665370225169;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return -0.05112803280774941;  // std dev = 1.926, 55.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=4 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.06419184008202626;  // std dev = 0.000, 109.000 (wgt'ed) examples reached here.  /* #neg=109 */


Results
   AUC ROC   = 0.97199
   AUC PR    = 0.81824
   CLL	      = -0.10959
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.840391


Total learning time: 1.024 seconds
Total inference time: 1.152 seconds
AUC ROC: 0.97199


Results scoring model
   AUC ROC   = 0.993315
   AUC PR    = 0.961875
   CLL	      = -0.082956
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.950617
   F1        = 0.974684


Total scoring time: 1.078 seconds
Parameter learned model CLL: -0.082956


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 3, 0], 'true,false,true': [0.0, 0, 77], 'true,false,false,true': [1.9, 37, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [8.43e-08, 106, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [2.23e-07, 0, 77], 'true,false,true': [0.0, 3, 0], 'true,false,false,true': [1.927, 52, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 125, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 5, 0], 'true,false,true': [0.344, 50, 81], 'true,false,false': [0.0, 0, 0], 'false,true': [9.06e-08, 124, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [2.53e-07, 0, 77], 'true,false,true': [0.0, 2, 0], 'true,false,false,true': [1.909, 41, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.28e-09, 103, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 4, 0], 'true,false,true': [1.58e-07, 0, 77], 'true,false,false,true': [1.907, 40, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [6.99e-08, 115, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 77], 'true,false,true': [0.268, 47, 4], 'true,false,false': [0.0, 0, 0], 'false,true': [5.48e-08, 99, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 6, 0], 'true,false,true': [0.0, 0, 77], 'true,false,false,true': [1.927, 52, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [6.75e-08, 118, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 77], 'true,false,true': [1.903, 41, 4], 'true,false,false': [0.0, 0, 0], 'false,true': [3.8e-08, 120, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [8.16e-08, 0, 77], 'true,false,true': [1.86e-09, 6, 0], 'true,false,false,true': [1.902, 38, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [4.84e-09, 103, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true,true,false': 'genre(A, G)'}, {'true,true,true,true': [0.0, 0, 0], 'true,true,true,false': [3.65e-08, 0, 77], 'true,true,false,true': [0.0, 3, 0], 'true,true,false,false': [1.926, 51, 4], 'true,false': [0.0, 0, 0], 'false': [0.0, 109, 0]}]]
[{'': [0.2212963595382845, 6.70323335622736e-17], 'true': [0.0, 0.21523987359954205], 'true,false': [-1.107339328457299e-15, 0.08804283164782852], 'true,false,false': [0.08804283164782852, nan], 'false': [6.70323335622736e-17, nan]}, {'': [0.1797711003187447, -1.7763568394002505e-18], 'true': [6.459479416000911e-16, 0.06312964608342386], 'true,false': [0.0, 0.06632653061224493], 'true,false,false': [0.06632653061224493, nan], 'false': [-1.7763568394002505e-18, nan]}, {'': [0.12030392267182123, 6.625524501795289e-17], 'true': [0.0, 0.11853049870585296], 'true,false': [0.11853049870585296, nan], 'false': [6.625524501795289e-17, nan]}, {'': [0.10293617793708529, 6.467318590049456e-18], 'true': [8.305044963429742e-16, 0.07756346901311544], 'true,false': [0.0, 0.08098765432098781], 'true,false,false': [0.08098765432098781, nan], 'false': [6.467318590049456e-18, nan]}, {'': [0.07309786579515588, 4.247809833348425e-17], 'true': [0.0, 0.07263422460988633], 'true,false': [3.2297397080004555e-16, 0.08264462809917357], 'true,false,false': [0.08264462809917357, nan], 'false': [4.247809833348425e-17, nan]}, {'': [0.05827889457917115, 3.027880976250427e-17], 'true': [-2.0762612408574356e-16, 0.0720420155020588], 'true,false': [0.0720420155020588, nan], 'false': [3.027880976250427e-17, nan]}, {'': [0.04889081845110051, 3.8575545770874085e-17], 'true': [-2.3129646346357427e-18, 0.04962798160995834], 'true,false': [-4.6139138685720794e-17, 0.06632653061224476], 'true,false,false': [0.06632653061224476, nan], 'false': [3.8575545770874085e-17, nan]}, {'': [0.04210556664866387, 1.2027416100105863e-17], 'true': [-1.2688263138573217e-16, 0.08051232875593191], 'true,false': [0.08051232875593191, nan], 'false': [1.2027416100105863e-17, nan]}, {'': [0.03856530045316952, 2.3713501496848002e-17], 'true': [8.651088503572649e-17, 0.07556826950244964], 'true,false': [5.782411586589357e-19, 0.08616780045351458], 'true,false,false': [0.08616780045351458, nan], 'false': [2.3713501496848002e-17, nan]}, {'': [0.03675387524170999, -1.6806128354417508e-17], 'true': [0.03675387524170999, nan], 'true,true': [1.7302177007145296e-17, 0.06396236620719745], 'true,true,false': [0.0, 0.0674380165289258], 'true,true,true': [nan, 1.7302177007145296e-17]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, E).;true;true
9;true,false;genre(A, G).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995126;  // std dev = 0.000, 77.000 (wgt'ed) examples reached here.  /* #pos=77 */
%   | | else if ( actor(B) )
%   | | | then return -0.14185106490048768;  // std dev = 4.08e-08, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.14185106490048763;  // std dev = 8.16e-08, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109538;  // std dev = 2.23e-07, 77.000 (wgt'ed) examples reached here.  /* #pos=77 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( actor(B) )
%   | | | then return -0.12544463852839158;  // std dev = 0.000, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
%   | | | else return 0.7194734122109545;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.12544463852839133;  // std dev = 0.000, 108.000 (wgt'ed) examples reached here.  /* #neg=108 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14111685828337292;  // std dev = 0.100, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( actor(B) )
%   | | then return -0.11231637819360638;  // std dev = 0.000, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | | else return 0.5553664367462836;  // std dev = 3.42e-07, 81.000 (wgt'ed) examples reached here.  /* #pos=81 */
%   else return -0.11231637819360617;  // std dev = 1.01e-07, 134.000 (wgt'ed) examples reached here.  /* #neg=134 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4175135841583105;  // std dev = 0.000, 77.000 (wgt'ed) examples reached here.  /* #pos=77 */
%   | else if ( genre(A, E) )
%   | | then return -0.09899757789545378;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( actor(B) )
%   | | | then return -0.1015963294878363;  // std dev = 1.05e-08, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
%   | | | else return 0.4175135841583102;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.1015963294878364;  // std dev = 0.000, 130.000 (wgt'ed) examples reached here.  /* #neg=130 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09051111305984999;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.32071184716015005;  // std dev = 0.000, 77.000 (wgt'ed) examples reached here.  /* #pos=77 */
%   | | else if ( actor(B) )
%   | | | then return -0.092691276189261;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | | | else return 0.32071184716014967;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.09269127618926082;  // std dev = 7.60e-08, 123.000 (wgt'ed) examples reached here.  /* #neg=123 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2551722425694895;  // std dev = 0.000, 77.000 (wgt'ed) examples reached here.  /* #pos=77 */
%   | else if ( actor(B) )
%   | | then return -0.08514062275489867;  // std dev = 0.002, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else return 0.25517224256948945;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.0851847513883968;  // std dev = 6.14e-08, 113.000 (wgt'ed) examples reached here.  /* #neg=113 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07705416909668904;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(B, E) )
%   | | then return 0.20975771563253576;  // std dev = 0.000, 77.000 (wgt'ed) examples reached here.  /* #pos=77 */
%   | | else if ( actor(B) )
%   | | | then return -0.07877995724869481;  // std dev = 0.000, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
%   | | | else return 0.20975771563253576;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.0787767547310916;  // std dev = 5.77e-08, 99.000 (wgt'ed) examples reached here.  /* #neg=99 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17709649774527716;  // std dev = 2.98e-08, 77.000 (wgt'ed) examples reached here.  /* #pos=77 */
%   | else if ( actor(B) )
%   | | then return -0.07313795275467758;  // std dev = 0.003, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
%   | | else return 0.17709649774527736;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.07324622576333707;  // std dev = 4.71e-08, 102.000 (wgt'ed) examples reached here.  /* #neg=102 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.15274385809367058;  // std dev = 7.88e-08, 77.000 (wgt'ed) examples reached here.  /* #pos=77 */
%   | else if ( genre(A, E) )
%   | | then return -0.06702867224869431;  // std dev = 2.63e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( actor(B) )
%   | | | then return -0.06843648911401466;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
%   | | | else return 0.15274385809367097;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.06842697784420267;  // std dev = 4.41e-08, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13400703000801092;  // std dev = 5.37e-08, 77.000 (wgt'ed) examples reached here.  /* #pos=77 */
%   | else if ( genre(A, E) )
%   | | then return -0.06295667843545015;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( actor(B) )
%   | | | then return -0.06420023181660682;  // std dev = 1.05e-08, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   | | | else return 0.13400703000801117;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.06419184008202626;  // std dev = 0.000, 118.000 (wgt'ed) examples reached here.  /* #neg=118 */


Results
   AUC ROC   = 0.993085
   AUC PR    = 0.784141
   CLL	      = -0.09952
   Precision = 0.784141 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.879012


Total learning time: 1.356 seconds
Total inference time: 1.038 seconds
AUC ROC: 0.993085


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064148
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.092 seconds
Refined model CLL: -0.064148


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.993085
   AUC PR    = 0.784141
   CLL	      = -0.09952
   Precision = 0.784141 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.879012


Total learning time: 4.550000000000001 seconds
Total inference time: 1.038 seconds
AUC ROC: 0.993085
Total revision time: 4.550000000000001
Best scored revision CLL: -0.064148


Dataset: 4_cora_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 00:15:42
{'AUC ROC': 0.993085, 'AUC PR': 0.784141, 'CLL': -0.09952, 'Precision': [0.784141, 0.5], 'Recall': 1.0, 'F1': 0.879012, 'Learning time': 4.550000000000001, 'Inference time': 1.038, 'parameter_0.4': {'AUC ROC': 0.97199, 'AUC PR': 0.81824, 'CLL': -0.10959, 'Precision': [1.0, 0.5], 'Recall': 0.724719, 'F1': 0.840391, 'Learning time': 1.024, 'Inference time': 1.152}}


Amount of data: 0.6
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;haswordauthor(E, C).;true;true
7;true,true,true;author(F, E), title(F, D).;false;false
7;true,true,false;title(G, D), venue(G, B).;false;false
7;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
7;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
7;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, B).;false;true
8;true,true,false;title(F, D), venue(F, A).;false;false
8;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
8;true,false,false;haswordvenue(A, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
8;false,true;haswordauthor(M, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;true,true;author(F, E), venue(F, B).;true;true
9;true,true,true;samebib(F, G), venue(G, A).;false;false
9;true,true,false;author(H, E), venue(H, A).;false;false
9;true,false;haswordtitle(I, C).;true;true
9;true,false,true;title(J, I), venue(J, A).;false;false
9;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995107;  // std dev = 6.31e-07, 117.000 (wgt'ed) examples reached here.  /* #pos=117 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.07428349733292013;  // std dev = 2.159, 74.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=5 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048827;  // std dev = 0.000, 178.000 (wgt'ed) examples reached here.  /* #neg=178 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109552;  // std dev = 0.000, 117.000 (wgt'ed) examples reached here.  /* #pos=117 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.05951745198968914;  // std dev = 2.152, 68.000 (wgt'ed) examples reached here.  /* #neg=63 #pos=5 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.1254446385283914;  // std dev = 0.000, 162.000 (wgt'ed) examples reached here.  /* #neg=162 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( movie(E, A) )
%   | | then return 0.3105692112471962;  // std dev = 0.339, 194.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=122 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360644;  // std dev = 4.71e-08, 173.000 (wgt'ed) examples reached here.  /* #neg=173 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.47796638950436693;  // std dev = 3.26e-07, 117.000 (wgt'ed) examples reached here.  /* #pos=117 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783627;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.08411449482028341;  // std dev = 2.144, 62.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=5 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783646;  // std dev = 0.000, 156.000 (wgt'ed) examples reached here.  /* #neg=156 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926098;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.3621238300877396;  // std dev = 1.79e-07, 117.000 (wgt'ed) examples reached here.  /* #pos=117 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.08594067088119609;  // std dev = 2.159, 74.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=5 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926062;  // std dev = 8.56e-08, 181.000 (wgt'ed) examples reached here.  /* #neg=181 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2832734344511173;  // std dev = 0.000, 117.000 (wgt'ed) examples reached here.  /* #pos=117 */
%   | else if ( movie(E, A) )
%   | | then return -0.07293765416190848;  // std dev = 0.249, 75.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=5 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 7.30e-08, 175.000 (wgt'ed) examples reached here.  /* #neg=175 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07967013612555841;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.22942598968619268;  // std dev = 1.52e-07, 117.000 (wgt'ed) examples reached here.  /* #pos=117 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.061515409233978684;  // std dev = 2.154, 69.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=5 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109147;  // std dev = 7.88e-08, 189.000 (wgt'ed) examples reached here.  /* #neg=189 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18704491425259445;  // std dev = 0.511, 118.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=117 */
%   | else if ( movie(E, B) )
%   | | then return -0.047629575297822406;  // std dev = 2.144, 67.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=5 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.07324622576333666;  // std dev = 1.18e-07, 195.000 (wgt'ed) examples reached here.  /* #neg=195 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1641009429264563;  // std dev = 0.000, 117.000 (wgt'ed) examples reached here.  /* #pos=117 */
%   | else if ( genre(A, E) )
%   | | then return -0.07082157782484942;  // std dev = 1.32e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.05602383981725743;  // std dev = 2.161, 76.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=5 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420262;  // std dev = 5.74e-09, 192.000 (wgt'ed) examples reached here.  /* #neg=192 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.14281213771646495;  // std dev = 0.000, 117.000 (wgt'ed) examples reached here.  /* #pos=117 */
%   | | else if ( genre(A, G) )
%   | | | then return -0.06630041225841188;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return -0.03782102039582749;  // std dev = 2.147, 64.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=5 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.06419184008202626;  // std dev = 0.000, 149.000 (wgt'ed) examples reached here.  /* #neg=149 */


Results
   AUC ROC   = 0.97199
   AUC PR    = 0.81824
   CLL	      = -0.10909
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.840391


Total learning time: 1.133 seconds
Total inference time: 1.086 seconds
AUC ROC: 0.97199


Results scoring model
   AUC ROC   = 0.994528
   AUC PR    = 0.967974
   CLL	      = -0.080497
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.959016
   F1        = 0.979079


Total scoring time: 1.28 seconds
Parameter learned model CLL: -0.080497


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 3, 0], 'true,false,true': [6.31e-07, 0, 117], 'true,false,false,true': [2.159, 69, 5], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 178, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 117], 'true,false,true': [0.0, 4, 0], 'true,false,false,true': [2.152, 63, 5], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 162, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 7, 0], 'true,false,true': [0.339, 72, 122], 'true,false,false': [0.0, 0, 0], 'false,true': [4.71e-08, 173, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [3.26e-07, 0, 117], 'true,false,true': [0.0, 6, 0], 'true,false,false,true': [2.144, 57, 5], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 156, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 2, 0], 'true,false,true': [1.79e-07, 0, 117], 'true,false,false,true': [2.159, 69, 5], 'true,false,false,false': [0.0, 0, 0], 'false,true': [8.56e-08, 181, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 117], 'true,false,true': [0.249, 70, 5], 'true,false,false': [0.0, 0, 0], 'false,true': [7.3e-08, 175, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 4, 0], 'true,false,true': [1.52e-07, 0, 117], 'true,false,false,true': [2.154, 64, 5], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.88e-08, 189, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.511, 1, 117], 'true,false,true': [2.144, 62, 5], 'true,false,false': [0.0, 0, 0], 'false,true': [1.18e-07, 195, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 117], 'true,false,true': [1.32e-09, 3, 0], 'true,false,false,true': [2.161, 71, 5], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.74e-09, 192, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true,true,false': 'genre(A, G)'}, {'true,true,true,true': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 117], 'true,true,false,true': [0.0, 2, 0], 'true,true,false,false': [2.147, 59, 5], 'true,false': [0.0, 0, 0], 'false': [0.0, 149, 0]}]]
[{'': [0.23339355935806536, -1.9709577291098283e-16], 'true': [0.0, 0.23075025355664988], 'true,false': [3.4008883079115908e-15, 0.06300219138056992], 'true,false,false': [0.06300219138056992, nan], 'false': [-1.9709577291098283e-16, nan]}, {'': [0.16905208608946634, 0.0], 'true': [-1.1538728187557183e-15, 0.06456628682721485], 'true,false': [0.0, 0.06812283737024236], 'true,false,false': [0.06812283737024236, nan], 'false': [0.0, nan]}, {'': [0.11715621912004474, 1.2834948261562503e-17], 'true': [-1.982541115402065e-18, 0.11515551755458105], 'true,false': [0.11515551755458105, nan], 'false': [1.2834948261562503e-17, nan]}, {'': [0.09870286853043643, -6.547469119584257e-17], 'true': [9.109522253334617e-16, 0.06762420713049615], 'true,false': [0.0, 0.07414151925078044], 'true,false,false': [0.07414151925078044, nan], 'false': [-6.547469119584257e-17, nan]}, {'': [0.07212016878734845, 4.0483270511193555e-17], 'true': [0.0, 0.07205582663978735], 'true,false': [2.7328566760003855e-16, 0.06300219138056963], 'true,false,false': [0.06300219138056963, nan], 'false': [4.0483270511193555e-17, nan]}, {'': [0.05441470485541034, 3.0451831532575724e-17], 'true': [-3.4919835304449367e-16, 0.06198028120509739], 'true,false': [0.06198028120509739, nan], 'false': [3.0451831532575724e-17, nan]}, {'': [0.0445794378628864, 3.289549702593056e-17], 'true': [0.0, 0.044686180483940116], 'true,false': [1.9737298215558337e-16, 0.06721277042638116], 'true,false,false': [0.06721277042638116, nan], 'false': [3.289549702593056e-17, nan]}, {'': [0.03896938594546388, 7.173748774501012e-17], 'true': [0.0022124420361031307, 0.06857841669041327], 'true,false': [0.06857841669041327, nan], 'false': [7.173748774501012e-17, nan]}, {'': [0.03555311811340054, 3.353798720221827e-17], 'true': [-3.7956342722227575e-17, 0.05913524815737349], 'true,false': [5.782411586589357e-19, 0.061461218836564926], 'true,false,false': [0.061461218836564926, nan], 'false': [3.353798720221827e-17, nan]}, {'': [0.03279204520643098, -1.0431625734733015e-17], 'true': [0.03279204520643098, nan], 'true,true': [-4.175197699445033e-17, 0.06986284841537876], 'true,true,false': [0.0, 0.07202148437499988], 'true,true,true': [nan, -4.175197699445033e-17]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, E).;true;true
9;true,false;genre(A, G).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995107;  // std dev = 6.31e-07, 117.000 (wgt'ed) examples reached here.  /* #pos=117 */
%   | | else if ( actor(B) )
%   | | | then return -0.14185106490048766;  // std dev = 6.66e-08, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.14185106490048818;  // std dev = 0.000, 163.000 (wgt'ed) examples reached here.  /* #neg=163 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.7194734122109548;  // std dev = 0.000, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | | else return 0.7068068757828447;  // std dev = 0.104, 68.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=67 */
%   | else if ( genre(A, E) )
%   | | then return -0.14185106490048777;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( actor(B) )
%   | | | then return -0.1254446385283916;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   | | | else return 0.7194734122109545;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.12544463852839136;  // std dev = 3.65e-08, 158.000 (wgt'ed) examples reached here.  /* #neg=158 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( actor(B) )
%   | | then return -0.11231637819360628;  // std dev = 4.21e-08, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
%   | | else return 0.5570829393001793;  // std dev = 0.017, 122.000 (wgt'ed) examples reached here.  /* #pos=122 */
%   else return -0.11231637819360644;  // std dev = 4.71e-08, 172.000 (wgt'ed) examples reached here.  /* #neg=172 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.41886154517439483;  // std dev = 0.016, 117.000 (wgt'ed) examples reached here.  /* #pos=117 */
%   | else if ( genre(A, E) )
%   | | then return -0.11231637819360639;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( actor(B) )
%   | | | then return -0.10159632948783619;  // std dev = 4.47e-08, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
%   | | | else return 0.417096196817896;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.10159632948783644;  // std dev = 0.000, 140.000 (wgt'ed) examples reached here.  /* #neg=140 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.10159632948783627;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(B, E) )
%   | | then return 0.3216266634161548;  // std dev = 0.015, 117.000 (wgt'ed) examples reached here.  /* #pos=117 */
%   | | else if ( actor(B) )
%   | | | then return -0.09269127618926107;  // std dev = 0.000, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
%   | | | else return 0.32042889337451064;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.09269127618926064;  // std dev = 8.16e-08, 167.000 (wgt'ed) examples reached here.  /* #neg=167 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.25579686053310435;  // std dev = 0.013, 117.000 (wgt'ed) examples reached here.  /* #pos=117 */
%   | else if ( actor(B) )
%   | | then return -0.08560178054400036;  // std dev = 0.015, 72.000 (wgt'ed) examples reached here.  /* #neg=72 */
%   | | else return 0.25497915962218054;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.08518475138839678;  // std dev = 6.99e-08, 164.000 (wgt'ed) examples reached here.  /* #neg=164 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1287802487757113;  // std dev = 0.236, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(B, E) )
%   | | then return 0.21019913669987475;  // std dev = 0.011, 117.000 (wgt'ed) examples reached here.  /* #pos=117 */
%   | | else if ( actor(B) )
%   | | | then return -0.07874649583335135;  // std dev = 1.97e-08, 71.000 (wgt'ed) examples reached here.  /* #neg=71 */
%   | | | else return 0.20962131521667268;  // std dev = 5.27e-09, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.07877675473109147;  // std dev = 7.74e-08, 197.000 (wgt'ed) examples reached here.  /* #neg=197 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17742037909707403;  // std dev = 0.010, 117.000 (wgt'ed) examples reached here.  /* #pos=117 */
%   | else if ( actor(B) )
%   | | then return -0.07349209039393512;  // std dev = 0.007, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
%   | | else return 0.176996448053514;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.07324622576333678;  // std dev = 8.75e-08, 156.000 (wgt'ed) examples reached here.  /* #neg=156 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.15298963437298724;  // std dev = 0.009, 117.000 (wgt'ed) examples reached here.  /* #pos=117 */
%   | else if ( genre(A, E) )
%   | | then return -0.071154917508206;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( actor(B) )
%   | | | then return -0.06838666171501637;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   | | | else return 0.15266795611939266;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.06842697784420262;  // std dev = 7.52e-08, 175.000 (wgt'ed) examples reached here.  /* #neg=175 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13419896012109434;  // std dev = 0.008, 117.000 (wgt'ed) examples reached here.  /* #pos=117 */
%   | else if ( genre(A, E) )
%   | | then return -0.06659327459771858;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( actor(B) )
%   | | | then return -0.06415626793863016;  // std dev = 3.07e-08, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
%   | | | else return 0.1339477717236346;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.06419184008202626;  // std dev = 0.000, 161.000 (wgt'ed) examples reached here.  /* #neg=161 */


Results
   AUC ROC   = 0.991725
   AUC PR    = 0.81335
   CLL	      = -0.100183
   Precision = 0.784141 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.879012


Total learning time: 1.385 seconds
Total inference time: 0.988 seconds
AUC ROC: 0.991725


Results scoring model
   AUC ROC   = 0.999911
   AUC PR    = 0.993171
   CLL	      = -0.064425
   Precision = 0.99187 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.995918


Total scoring time: 1.193 seconds
Refined model CLL: -0.064425


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.991725
   AUC PR    = 0.81335
   CLL	      = -0.100183
   Precision = 0.784141 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.879012


Total learning time: 4.991 seconds
Total inference time: 0.988 seconds
AUC ROC: 0.991725
Total revision time: 4.991
Best scored revision CLL: -0.064425


Dataset: 4_cora_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 00:15:50
{'AUC ROC': 0.991725, 'AUC PR': 0.81335, 'CLL': -0.100183, 'Precision': [0.784141, 0.5], 'Recall': 1.0, 'F1': 0.879012, 'Learning time': 4.991, 'Inference time': 0.988, 'parameter_0.6': {'AUC ROC': 0.97199, 'AUC PR': 0.81824, 'CLL': -0.10909, 'Precision': [1.0, 0.5], 'Recall': 0.724719, 'F1': 0.840391, 'Learning time': 1.133, 'Inference time': 1.086}}


Amount of data: 0.8
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;haswordauthor(E, C).;true;true
7;true,true,true;author(F, E), title(F, D).;false;false
7;true,true,false;title(G, D), venue(G, B).;false;false
7;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
7;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
7;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, B).;false;true
8;true,true,false;title(F, D), venue(F, A).;false;false
8;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
8;true,false,false;haswordvenue(A, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
8;false,true;haswordauthor(M, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;true,true;author(F, E), venue(F, B).;true;true
9;true,true,true;samebib(F, G), venue(G, A).;false;false
9;true,true,false;author(H, E), venue(H, A).;false;false
9;true,false;haswordtitle(I, C).;true;true
9;true,false,true;title(J, I), venue(J, A).;false;false
9;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995098;  // std dev = 9.68e-07, 156.000 (wgt'ed) examples reached here.  /* #pos=156 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.058517731567154355;  // std dev = 2.533, 84.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048846;  // std dev = 0.000, 230.000 (wgt'ed) examples reached here.  /* #neg=230 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109563;  // std dev = 0.000, 156.000 (wgt'ed) examples reached here.  /* #pos=156 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.061191705445558416;  // std dev = 2.546, 95.000 (wgt'ed) examples reached here.  /* #neg=88 #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839197;  // std dev = 0.000, 287.000 (wgt'ed) examples reached here.  /* #neg=287 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360636;  // std dev = 9.13e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else if ( movie(E, A) )
%   | | then return 0.33012467244538213;  // std dev = 0.335, 248.000 (wgt'ed) examples reached here.  /* #neg=85 #pos=163 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360679;  // std dev = 0.000, 235.000 (wgt'ed) examples reached here.  /* #neg=235 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4730892748514368;  // std dev = 0.000, 156.000 (wgt'ed) examples reached here.  /* #pos=156 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783627;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.08898255555510935;  // std dev = 2.537, 87.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783656;  // std dev = 0.000, 224.000 (wgt'ed) examples reached here.  /* #neg=224 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926098;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( genre(B, E) )
%   | | then return 0.35874018499744414;  // std dev = 2.46e-07, 156.000 (wgt'ed) examples reached here.  /* #pos=156 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.08865782154788424;  // std dev = 2.553, 102.000 (wgt'ed) examples reached here.  /* #neg=95 #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926049;  // std dev = 7.15e-08, 228.000 (wgt'ed) examples reached here.  /* #neg=228 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2809858996677407;  // std dev = 1.40e-07, 156.000 (wgt'ed) examples reached here.  /* #pos=156 */
%   | else if ( movie(E, A) )
%   | | then return -0.06819078120721318;  // std dev = 0.262, 94.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=7 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 8.82e-08, 240.000 (wgt'ed) examples reached here.  /* #neg=240 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.13156631697394455;  // std dev = 0.231, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(B, E) )
%   | | then return 0.2278374974101449;  // std dev = 0.000, 156.000 (wgt'ed) examples reached here.  /* #pos=156 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.060671268939205006;  // std dev = 2.542, 91.000 (wgt'ed) examples reached here.  /* #neg=84 #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109144;  // std dev = 6.83e-08, 232.000 (wgt'ed) examples reached here.  /* #neg=232 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.19024794870950928;  // std dev = 1.49e-07, 156.000 (wgt'ed) examples reached here.  /* #pos=156 */
%   | else if ( movie(E, B) )
%   | | then return -0.05750400874426912;  // std dev = 2.546, 104.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=7 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.07324622576333661;  // std dev = 1.27e-07, 213.000 (wgt'ed) examples reached here.  /* #neg=213 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.16264913718882099;  // std dev = 0.000, 156.000 (wgt'ed) examples reached here.  /* #pos=156 */
%   | else if ( genre(A, E) )
%   | | then return -0.06715969113150931;  // std dev = 2.63e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.048075345488927584;  // std dev = 2.543, 92.000 (wgt'ed) examples reached here.  /* #neg=85 #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420261;  // std dev = 3.95e-09, 230.000 (wgt'ed) examples reached here.  /* #neg=230 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return -0.38889025780579917;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0.14169325982462058;  // std dev = 1.25e-07, 156.000 (wgt'ed) examples reached here.  /* #pos=156 */
%   | | else if ( genre(A, G) )
%   | | | then return -0.06307253314613283;  // std dev = 3.73e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return -0.04902805639007133;  // std dev = 2.551, 100.000 (wgt'ed) examples reached here.  /* #neg=93 #pos=7 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.06419184008202625;  // std dev = 2.11e-08, 236.000 (wgt'ed) examples reached here.  /* #neg=236 */


Results
   AUC ROC   = 0.97199
   AUC PR    = 0.81824
   CLL	      = -0.106676
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.840391


Total learning time: 1.228 seconds
Total inference time: 1.039 seconds
AUC ROC: 0.97199


Results scoring model
   AUC ROC   = 0.994435
   AUC PR    = 0.966009
   CLL	      = -0.080408
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.957055
   F1        = 0.978056


Total scoring time: 1.604 seconds
Parameter learned model CLL: -0.080408


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 12, 0], 'true,false,true': [9.68e-07, 0, 156], 'true,false,false,true': [2.533, 77, 7], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 230, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 156], 'true,false,true': [0.0, 3, 0], 'true,false,false,true': [2.546, 88, 7], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 287, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [9.13e-09, 12, 0], 'true,false,true': [0.335, 85, 163], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 235, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 156], 'true,false,true': [0.0, 6, 0], 'true,false,false,true': [2.537, 80, 7], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 224, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 8, 0], 'true,false,true': [2.46e-07, 0, 156], 'true,false,false,true': [2.553, 95, 7], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.15e-08, 228, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [1.4e-07, 0, 156], 'true,false,true': [0.262, 87, 7], 'true,false,false': [0.0, 0, 0], 'false,true': [8.82e-08, 240, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.231, 5, 0], 'true,false,true': [0.0, 0, 156], 'true,false,false,true': [2.542, 84, 7], 'true,false,false,false': [0.0, 0, 0], 'false,true': [6.83e-08, 232, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [1.49e-07, 0, 156], 'true,false,true': [2.546, 97, 7], 'true,false,false': [0.0, 0, 0], 'false,true': [1.27e-07, 213, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 156], 'true,false,true': [2.63e-09, 10, 0], 'true,false,false,true': [2.543, 85, 7], 'true,false,false,false': [0.0, 0, 0], 'false,true': [3.95e-09, 230, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true,true,false': 'genre(A, G)'}, {'true,true,true,true': [0.0, 1, 0], 'true,true,true,false': [1.25e-07, 0, 156], 'true,true,false,true': [3.73e-09, 8, 0], 'true,true,false,false': [2.551, 93, 7], 'true,false': [0.0, 0, 0], 'false': [2.11e-08, 236, 0]}]]
[{'': [0.22844230284706993, -2.0852884636437723e-16], 'true': [-1.1564823173178714e-17, 0.21789930555556095], 'true,false': [6.012284687200848e-15, 0.07638888888888913], 'true,false,false': [0.07638888888888913, nan], 'false': [-2.0852884636437723e-16, nan]}, {'': [0.17071945735891642, -9.284094979443818e-17], 'true': [-2.6417614534670392e-15, 0.06628792553214524], 'true,false': [0.0, 0.0682548476454291], 'true,false,false': [0.0682548476454291, nan], 'false': [-9.284094979443818e-17, nan]}, {'': [0.11554888652150963, -8.31486180144798e-17], 'true': [6.938893903907228e-18, 0.11210515783159758], 'true,false': [0.11210515783159758, nan], 'false': [-8.31486180144798e-17, nan]}, {'': [0.09999353167581382, -7.930164461608261e-17], 'true': [-7.743093915334425e-16, 0.06922230820465083], 'true,false': [0.0, 0.07398599550799281], 'true,false,false': [0.07398599550799281, nan], 'false': [-7.930164461608261e-17, nan]}, {'': [0.07311866750945042, 2.2399236461735613e-17], 'true': [0.0, 0.07311886193423235], 'true,false': [3.8715469576672126e-16, 0.06391772395232566], 'true,false,false': [0.06391772395232566, nan], 'false': [2.2399236461735613e-17, nan]}, {'': [0.05441023294065879, 3.23815048849004e-17], 'true': [1.25255930983351e-16, 0.06862726914422436], 'true,false': [0.06862726914422436, nan], 'false': [3.23815048849004e-17, nan]}, {'': [0.046081771744732075, 2.0098865100972662e-17], 'true': [0.010628550825618675, 0.04552831267624437], 'true,false': [-3.416070845000482e-16, 0.07100591715976297], 'true,false,false': [0.07100591715976297, nan], 'false': [2.0098865100972662e-17, nan]}, {'': [0.03965719772532398, 7.609979417618444e-17], 'true': [1.4233628520835341e-16, 0.06231437486000148], 'true,false': [0.06231437486000148, nan], 'false': [7.609979417618444e-17, nan]}, {'': [0.0358843624583592, 1.6411992537937097e-17], 'true': [-1.3094938239168513e-16, 0.06343800349021476], 'true,false': [6.938893903907229e-19, 0.07029773156899802], 'true,false,false': [0.07029773156899802, nan], 'false': [1.6411992537937097e-17, nan]}, {'': [0.03419574423817409, 1.8817339400426382e-18], 'true': [0.03419574423817409, nan], 'true,true': [0.0017816927093289522, 0.06029130640105276], 'true,true,false': [1.734723475976807e-18, 0.06509999999999984], 'true,true,true': [0.0, 9.963539964584739e-17]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, E).;true;true
9;true,true;genre(A, F).;true;true
9;true,false;genre(A, G).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995098;  // std dev = 9.68e-07, 156.000 (wgt'ed) examples reached here.  /* #pos=156 */
%   | | else if ( actor(B) )
%   | | | then return -0.14185106490048766;  // std dev = 7.88e-08, 83.000 (wgt'ed) examples reached here.  /* #neg=83 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.1418510649004883;  // std dev = 0.000, 244.000 (wgt'ed) examples reached here.  /* #neg=244 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109563;  // std dev = 0.000, 156.000 (wgt'ed) examples reached here.  /* #pos=156 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 5.27e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( actor(B) )
%   | | | then return -0.1254446385283914;  // std dev = 0.000, 91.000 (wgt'ed) examples reached here.  /* #neg=91 */
%   | | | else return 0.7194734122109543;  // std dev = 2.11e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.12544463852839183;  // std dev = 0.000, 243.000 (wgt'ed) examples reached here.  /* #neg=243 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( actor(B) )
%   | | then return -0.11231637819360621;  // std dev = 7.15e-08, 87.000 (wgt'ed) examples reached here.  /* #neg=87 */
%   | | else return 0.5553664367462833;  // std dev = 5.53e-07, 163.000 (wgt'ed) examples reached here.  /* #pos=163 */
%   else return -0.11231637819360668;  // std dev = 0.000, 214.000 (wgt'ed) examples reached here.  /* #neg=214 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4175135841583089;  // std dev = 4.58e-07, 156.000 (wgt'ed) examples reached here.  /* #pos=156 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( actor(B) )
%   | | | then return -0.10159632948783617;  // std dev = 5.77e-08, 83.000 (wgt'ed) examples reached here.  /* #neg=83 */
%   | | | else return 0.41751358415831025;  // std dev = 1.49e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.10159632948783656;  // std dev = 0.000, 222.000 (wgt'ed) examples reached here.  /* #neg=222 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.13125957012702621;  // std dev = 0.077, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( genre(B, E) )
%   | | then return 0.3207118471601497;  // std dev = 2.98e-07, 156.000 (wgt'ed) examples reached here.  /* #pos=156 */
%   | | else if ( actor(B) )
%   | | | then return -0.09269127618926108;  // std dev = 0.000, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */
%   | | | else return 0.3207118471601498;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.09269127618926047;  // std dev = 9.42e-08, 246.000 (wgt'ed) examples reached here.  /* #neg=246 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2551722425694905;  // std dev = 0.000, 156.000 (wgt'ed) examples reached here.  /* #pos=156 */
%   | else if ( actor(B) )
%   | | then return -0.08490745078274213;  // std dev = 0.008, 96.000 (wgt'ed) examples reached here.  /* #neg=96 */
%   | | else return 0.25517224256948956;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.08518475138839678;  // std dev = 8.43e-08, 227.000 (wgt'ed) examples reached here.  /* #neg=227 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07604237693120731;  // std dev = 3.73e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( genre(B, E) )
%   | | then return 0.20975771563253517;  // std dev = 2.53e-07, 156.000 (wgt'ed) examples reached here.  /* #pos=156 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.20975771563253587;  // std dev = 7.45e-09, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.08910768400439734;  // std dev = 0.706, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
%   else return -0.07877675473109144;  // std dev = 6.14e-08, 238.000 (wgt'ed) examples reached here.  /* #neg=238 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1770964977452782;  // std dev = 0.000, 156.000 (wgt'ed) examples reached here.  /* #pos=156 */
%   | else if ( actor(B) )
%   | | then return -0.07244026463070596;  // std dev = 0.004, 94.000 (wgt'ed) examples reached here.  /* #neg=94 */
%   | | else return 0.17709649774527736;  // std dev = 5.27e-09, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.07324622576333684;  // std dev = 1.13e-07, 263.000 (wgt'ed) examples reached here.  /* #neg=263 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.15274385809367144;  // std dev = 0.000, 156.000 (wgt'ed) examples reached here.  /* #pos=156 */
%   | else if ( genre(A, E) )
%   | | then return -0.06624475426165365;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( actor(B) )
%   | | | then return -0.06783983530193245;  // std dev = 7.45e-09, 80.000 (wgt'ed) examples reached here.  /* #neg=80 */
%   | | | else return 0.152743858093671;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.06842697784420261;  // std dev = 6.66e-08, 203.000 (wgt'ed) examples reached here.  /* #neg=203 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.1340070300080108;  // std dev = 9.19e-08, 156.000 (wgt'ed) examples reached here.  /* #pos=156 */
%   | else if ( genre(A, F) )
%   | | then return -0.06226296200039943;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( actor(B) )
%   | | | then return -0.06367355097187788;  // std dev = 1.97e-08, 77.000 (wgt'ed) examples reached here.  /* #neg=77 */
%   | | | else return 0.13400703000801117;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.06419184008202625;  // std dev = 3.65e-08, 252.000 (wgt'ed) examples reached here.  /* #neg=252 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.095167
   Precision = 0.784141 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.879012


Total learning time: 1.701 seconds
Total inference time: 0.978 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064015
   Precision = 0.993902 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.996942


Total scoring time: 1.367 seconds
Refined model CLL: -0.064015


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.095167
   Precision = 0.784141 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.879012


Total learning time: 5.8999999999999995 seconds
Total inference time: 0.978 seconds
AUC ROC: 1.0
Total revision time: 5.8999999999999995
Best scored revision CLL: -0.064015


Dataset: 4_cora_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 00:15:58
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.095167, 'Precision': [0.784141, 0.5], 'Recall': 1.0, 'F1': 0.879012, 'Learning time': 5.8999999999999995, 'Inference time': 0.978, 'parameter_0.8': {'AUC ROC': 0.97199, 'AUC PR': 0.81824, 'CLL': -0.106676, 'Precision': [1.0, 0.5], 'Recall': 0.724719, 'F1': 0.840391, 'Learning time': 1.228, 'Inference time': 1.039}}


Amount of data: 1.0
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;haswordauthor(E, C).;true;true
7;true,true,true;author(F, E), title(F, D).;false;false
7;true,true,false;title(G, D), venue(G, B).;false;false
7;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
7;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
7;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, B).;false;true
8;true,true,false;title(F, D), venue(F, A).;false;false
8;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
8;true,false,false;haswordvenue(A, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
8;false,true;haswordauthor(M, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;true,true;author(F, E), venue(F, B).;true;true
9;true,true,true;samebib(F, G), venue(G, A).;false;false
9;true,true,false;author(H, E), venue(H, A).;false;false
9;true,false;haswordtitle(I, C).;true;true
9;true,false,true;title(J, I), venue(J, A).;false;false
9;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995093;  // std dev = 1.09e-06, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.04381184921421317;  // std dev = 3.003, 102.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048807;  // std dev = 0.000, 270.000 (wgt'ed) examples reached here.  /* #neg=270 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7151404991302422;  // std dev = 0.843, 195.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=194 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 5.27e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.043143151364258774;  // std dev = 3.011, 107.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.125444638528392;  // std dev = 0.000, 301.000 (wgt'ed) examples reached here.  /* #neg=301 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360638;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( movie(E, A) )
%   | | then return 0.3238919691790691;  // std dev = 0.340, 315.000 (wgt'ed) examples reached here.  /* #neg=111 #pos=204 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360671;  // std dev = 0.000, 315.000 (wgt'ed) examples reached here.  /* #neg=315 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.47572375200383016;  // std dev = 0.000, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.08773747575338918;  // std dev = 3.024, 117.000 (wgt'ed) examples reached here.  /* #neg=107 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783659;  // std dev = 0.000, 263.000 (wgt'ed) examples reached here.  /* #neg=263 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926097;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(B, E) )
%   | | then return 0.36056674600027394;  // std dev = 1.98e-07, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.08226063061669922;  // std dev = 3.035, 127.000 (wgt'ed) examples reached here.  /* #neg=117 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926042;  // std dev = 1.55e-07, 299.000 (wgt'ed) examples reached here.  /* #neg=299 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2793495810830263;  // std dev = 0.558, 195.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=194 */
%   | else if ( movie(E, A) )
%   | | then return -0.06625288054131048;  // std dev = 0.273, 123.000 (wgt'ed) examples reached here.  /* #neg=113 #pos=10 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 1.07e-07, 311.000 (wgt'ed) examples reached here.  /* #neg=311 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.16577795447654428;  // std dev = 0.297, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(B, E) )
%   | | then return 0.22920220290873267;  // std dev = 0.000, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.03555161079291251;  // std dev = 2.989, 94.000 (wgt'ed) examples reached here.  /* #neg=84 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109141;  // std dev = 3.33e-08, 313.000 (wgt'ed) examples reached here.  /* #neg=313 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.19123216488575445;  // std dev = 1.81e-07, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else if ( movie(E, B) )
%   | | then return -0.05145788840709984;  // std dev = 3.021, 124.000 (wgt'ed) examples reached here.  /* #neg=114 #pos=10 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.07324622576333693;  // std dev = 1.03e-07, 287.000 (wgt'ed) examples reached here.  /* #neg=287 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.15822048243580267;  // std dev = 0.712, 196.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=194 */
%   | else if ( genre(A, E) )
%   | | then return -0.06553508642307004;  // std dev = 2.63e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.03820628429283671;  // std dev = 3.011, 107.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420285;  // std dev = 0.000, 269.000 (wgt'ed) examples reached here.  /* #neg=269 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.1428918161388114;  // std dev = 1.62e-07, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | | else if ( genre(A, G) )
%   | | | then return -0.06163416779919094;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return -0.017467175638196615;  // std dev = 2.983, 91.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=10 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.06419184008202597;  // std dev = 1.13e-07, 297.000 (wgt'ed) examples reached here.  /* #neg=297 */


Results
   AUC ROC   = 0.97199
   AUC PR    = 0.81824
   CLL	      = -0.109337
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.840391


Total learning time: 1.372 seconds
Total inference time: 1.017 seconds
AUC ROC: 0.97199


Results scoring model
   AUC ROC   = 0.993632
   AUC PR    = 0.960741
   CLL	      = -0.084039
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.95098
   F1        = 0.974874


Total scoring time: 1.788 seconds
Parameter learned model CLL: -0.084039


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 8, 0], 'true,false,true': [1.09e-06, 0, 194], 'true,false,false,true': [3.003, 92, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 270, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.843, 1, 194], 'true,false,true': [5.27e-09, 11, 0], 'true,false,false,true': [3.011, 97, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 301, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 5, 0], 'true,false,true': [0.34, 111, 204], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 315, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 194], 'true,false,true': [0.0, 5, 0], 'true,false,false,true': [3.024, 107, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 263, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [2.63e-09, 6, 0], 'true,false,true': [1.98e-07, 0, 194], 'true,false,false,true': [3.035, 117, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.55e-07, 299, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.558, 1, 194], 'true,false,true': [0.273, 113, 10], 'true,false,false': [0.0, 0, 0], 'false,true': [1.07e-07, 311, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.297, 6, 0], 'true,false,true': [0.0, 0, 194], 'true,false,false,true': [2.989, 84, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [3.33e-08, 313, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [1.81e-07, 0, 194], 'true,false,true': [3.021, 114, 10], 'true,false,false': [0.0, 0, 0], 'false,true': [1.03e-07, 287, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.712, 2, 194], 'true,false,true': [2.63e-09, 10, 0], 'true,false,false,true': [3.011, 97, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 269, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true,true,false': 'genre(A, G)'}, {'true,true,true,true': [0.0, 0, 0], 'true,true,true,false': [1.62e-07, 0, 194], 'true,true,false,true': [0.0, 7, 0], 'true,true,false,false': [2.983, 81, 10], 'true,false': [0.0, 0, 0], 'false': [1.13e-07, 297, 0]}]]
[{'': [0.22074099722992158, -5.592234494408195e-17], 'true': [-6.938893903907228e-18, 0.21420745069394193], 'true,false': [6.15315358802561e-15, 0.08842752787389437], 'true,false,false': [0.08842752787389437, nan], 'false': [-5.592234494408195e-17, nan]}, {'': [0.1692435648567527, -8.557200721363333e-17], 'true': [0.003642182338411897, 0.07739816695025684], 'true,false': [2.523234146875356e-18, 0.08472355664250121], 'true,false,false': [0.08472355664250121, nan], 'false': [-8.557200721363333e-17, nan]}, {'': [0.11694089829136975, -5.4982473600483945e-17], 'true': [0.0, 0.11582401361494091], 'true,false': [0.11582401361494091, nan], 'false': [-5.4982473600483945e-17, nan]}, {'': [0.10434707616363803, -6.585353301959103e-17], 'true': [-1.1354033406475827e-15, 0.07496901742845971], 'true,false': [0.0, 0.07816494995982184], 'true,false,false': [0.07816494995982184, nan], 'false': [-6.585353301959103e-17, nan]}, {'': [0.07559365002061354, 8.020340244783739e-17], 'true': [1.1564823173178713e-18, 0.07558796448579444], 'true,false': [2.0144252817940985e-16, 0.07254014508029057], 'true,false,false': [0.07254014508029057, nan], 'false': [8.020340244783739e-17, nan]}, {'': [0.058097730963323164, 3.712642911929784e-17], 'true': [0.0015993966009422804, 0.07442610070802423], 'true,false': [0.07442610070802423, nan], 'false': [3.712642911929784e-17, nan]}, {'': [0.04769423942760564, 3.547038417332768e-18], 'true': [0.014660299162181247, 0.04643930623372418], 'true,false': [-6.409534987526676e-17, 0.0950656405613396], 'true,false,false': [0.0950656405613396, nan], 'false': [3.547038417332768e-18, nan]}, {'': [0.04270943831710308, 3.7136379917775274e-17], 'true': [1.6939485324177645e-16, 0.07359727732028752], 'true,false': [0.07359727732028752, nan], 'false': [3.7136379917775274e-17, nan]}, {'': [0.039852284253505385, -2.7239672723145106e-17], 'true': [0.002587037531778419, 0.07754060555724708], 'true,false': [6.938893903907229e-19, 0.08472355664250104], 'true,false,false': [0.08472355664250104, nan], 'false': [-2.7239672723145106e-17, nan]}, {'': [0.036488348452943166, 4.261462114722823e-17], 'true': [0.036488348452943166, nan], 'true,true': [1.3505805866574068e-16, 0.09095692450894408], 'true,true,false': [-4.956352788505163e-19, 0.09781427363845004], 'true,true,true': [nan, 1.3505805866574068e-16]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, E).;true;true
9;true,false;genre(A, G).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995093;  // std dev = 1.09e-06, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | | else if ( actor(B) )
%   | | | then return -0.14185106490048763;  // std dev = 8.69e-08, 105.000 (wgt'ed) examples reached here.  /* #neg=105 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.1418510649004877;  // std dev = 1.66e-07, 322.000 (wgt'ed) examples reached here.  /* #neg=322 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.7194734122109543;  // std dev = 2.06e-07, 75.000 (wgt'ed) examples reached here.  /* #pos=75 */
%   | | else return 0.7124324284547942;  // std dev = 0.077, 120.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=119 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 5.27e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( actor(B) )
%   | | | then return -0.12544463852839144;  // std dev = 0.000, 84.000 (wgt'ed) examples reached here.  /* #neg=84 */
%   | | | else return 0.7194734122109544;  // std dev = 2.98e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.12544463852839202;  // std dev = 0.000, 310.000 (wgt'ed) examples reached here.  /* #neg=310 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360638;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( actor(B) )
%   | | then return -0.1123163781936062;  // std dev = 8.43e-08, 105.000 (wgt'ed) examples reached here.  /* #neg=105 */
%   | | else return 0.5563802569583239;  // std dev = 0.012, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.11231637819360699;  // std dev = 0.000, 279.000 (wgt'ed) examples reached here.  /* #neg=279 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.41831783191365945;  // std dev = 0.012, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 3.73e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( actor(B) )
%   | | | then return -0.10159632948783637;  // std dev = 0.000, 121.000 (wgt'ed) examples reached here.  /* #neg=121 */
%   | | | else return 0.41726704778500767;  // std dev = 1.49e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.10159632948783662;  // std dev = 0.000, 302.000 (wgt'ed) examples reached here.  /* #neg=302 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( female(B) )
%   | | then return -0.09269127618926094;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.12461975211017301;  // std dev = 0.175, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(B, E) )
%   | | then return 0.32125738210302063;  // std dev = 0.010, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | | else if ( actor(B) )
%   | | | then return -0.0926912761892609;  // std dev = 6.14e-08, 108.000 (wgt'ed) examples reached here.  /* #neg=108 */
%   | | | else return 0.3205447129576675;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.09269127618926042;  // std dev = 1.67e-07, 313.000 (wgt'ed) examples reached here.  /* #neg=313 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.25554460004993573;  // std dev = 0.009, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else if ( actor(B) )
%   | | then return -0.08511654574457071;  // std dev = 0.004, 108.000 (wgt'ed) examples reached here.  /* #neg=108 */
%   | | else return 0.25505819526897033;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.08518475138839678;  // std dev = 1.07e-07, 312.000 (wgt'ed) examples reached here.  /* #neg=312 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07792435266603237;  // std dev = 0.003, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( genre(B, E) )
%   | | then return 0.21002079788641184;  // std dev = 0.008, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | | else if ( actor(B) )
%   | | | then return -0.07878170462355276;  // std dev = 0.000, 120.000 (wgt'ed) examples reached here.  /* #neg=120 */
%   | | | else return 0.20967715096132095;  // std dev = 1.97e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.07877675473109144;  // std dev = 4.94e-08, 271.000 (wgt'ed) examples reached here.  /* #neg=271 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17486663122376797;  // std dev = 0.034, 195.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=194 */
%   | else if ( actor(B) )
%   | | then return -0.07315040360506754;  // std dev = 0.005, 123.000 (wgt'ed) examples reached here.  /* #neg=123 */
%   | | else return 0.1770374051306635;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.07324622576333685;  // std dev = 1.12e-07, 266.000 (wgt'ed) examples reached here.  /* #neg=266 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.1526443431572867;  // std dev = 6.14e-08, 75.000 (wgt'ed) examples reached here.  /* #pos=75 */
%   | | else return 0.14950430771671255;  // std dev = 0.044, 120.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=119 */
%   | else if ( genre(A, E) )
%   | | then return -0.06748719536680198;  // std dev = 0.002, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( actor(B) )
%   | | | then return -0.06843711891825337;  // std dev = 0.000, 121.000 (wgt'ed) examples reached here.  /* #neg=121 */
%   | | | else return 0.1526990289344984;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.06842697784420308;  // std dev = 0.000, 321.000 (wgt'ed) examples reached here.  /* #neg=321 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13465641744267876;  // std dev = 0.008, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else if ( genre(A, E) )
%   | | then return -0.06322674528968947;  // std dev = 0.002, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( actor(B) )
%   | | | then return -0.06420078748431586;  // std dev = 3.57e-08, 93.000 (wgt'ed) examples reached here.  /* #neg=93 */
%   | | | else return 0.1339720316052108;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.06419184008202615;  // std dev = 6.83e-08, 265.000 (wgt'ed) examples reached here.  /* #neg=265 */


Results
   AUC ROC   = 0.991725
   AUC PR    = 0.81335
   CLL	      = -0.099446
   Precision = 0.784141 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.879012


Total learning time: 2.044 seconds
Total inference time: 0.943 seconds
AUC ROC: 0.991725


Results scoring model
   AUC ROC   = 0.999943
   AUC PR    = 0.995444
   CLL	      = -0.064271
   Precision = 0.995122 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.997555


Total scoring time: 1.668 seconds
Refined model CLL: -0.064271


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.991725
   AUC PR    = 0.81335
   CLL	      = -0.099446
   Precision = 0.784141 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.879012


Total learning time: 6.872000000000001 seconds
Total inference time: 0.943 seconds
AUC ROC: 0.991725
Total revision time: 6.872000000000001
Best scored revision CLL: -0.064271


Dataset: 4_cora_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 00:16:08
{'AUC ROC': 0.991725, 'AUC PR': 0.81335, 'CLL': -0.099446, 'Precision': [0.784141, 0.5], 'Recall': 1.0, 'F1': 0.879012, 'Learning time': 6.872000000000001, 'Inference time': 0.943, 'parameter_1.0': {'AUC ROC': 0.97199, 'AUC PR': 0.81824, 'CLL': -0.109337, 'Precision': [1.0, 0.5], 'Recall': 0.724719, 'F1': 0.840391, 'Learning time': 1.372, 'Inference time': 1.017}}


Starting fold 4

Target train facts examples: 927
Target train pos examples: 337
Target train neg examples: 12345

Target test facts examples: 151
Target test pos	 examples: 45
Target test neg examples: 1891

Amount of data: 0.2
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;haswordauthor(E, C).;true;true
7;true,true,true;author(F, E), title(F, D).;false;false
7;true,true,false;title(G, D), venue(G, B).;false;false
7;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
7;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
7;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, B).;false;true
8;true,true,false;title(F, D), venue(F, A).;false;false
8;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
8;true,false,false;haswordvenue(A, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
8;false,true;haswordauthor(M, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;true,true;author(F, E), venue(F, B).;true;true
9;true,true,true;samebib(F, G), venue(G, A).;false;false
9;true,true,false;author(H, E), venue(H, A).;false;false
9;true,false;haswordtitle(I, C).;true;true
9;true,false,true;title(J, I), venue(J, A).;false;false
9;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995125;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.05380110901255586;  // std dev = 2.691, 46.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=9 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048763;  // std dev = 8.94e-08, 100.000 (wgt'ed) examples reached here.  /* #neg=100 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109544;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.13272272936533808;  // std dev = 2.543, 32.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=9 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.1254446385283914;  // std dev = 0.000, 91.000 (wgt'ed) examples reached here.  /* #neg=91 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.16627410253810387;  // std dev = 0.112, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( movie(E, A) )
%   | | then return 0.337313579536567;  // std dev = 0.367, 101.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=67 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360621;  // std dev = 7.60e-08, 94.000 (wgt'ed) examples reached here.  /* #neg=94 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4599260713662645;  // std dev = 0.665, 59.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=58 */
%   | else if ( genre(A, E) )
%   | | then return -0.1083096026031725;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.03179585502736404;  // std dev = 2.598, 36.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=9 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783615;  // std dev = 6.45e-09, 75.000 (wgt'ed) examples reached here.  /* #neg=75 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.22155031769820524;  // std dev = 0.151, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.36011570272896914;  // std dev = 1.26e-07, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.01913135387097489;  // std dev = 2.676, 44.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=9 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926093;  // std dev = 5.58e-08, 105.000 (wgt'ed) examples reached here.  /* #neg=105 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.28191593900127954;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else if ( movie(E, A) )
%   | | then return 0.03422639865962405;  // std dev = 0.424, 37.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=9 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.0851847513883968;  // std dev = 6.05e-08, 111.000 (wgt'ed) examples reached here.  /* #neg=111 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.13606380811384433;  // std dev = 0.184, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.22848357419191737;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.08403590379774296;  // std dev = 2.491, 29.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=9 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109155;  // std dev = 7.07e-08, 122.000 (wgt'ed) examples reached here.  /* #neg=122 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1829379935638365;  // std dev = 0.455, 59.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=58 */
%   | else if ( movie(E, B) )
%   | | then return -0.030143885698837025;  // std dev = 2.660, 45.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=9 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.07324622576333707;  // std dev = 4.83e-08, 110.000 (wgt'ed) examples reached here.  /* #neg=110 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.16406129161557886;  // std dev = 2.98e-08, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else if ( genre(A, E) )
%   | | then return -0.07109652418681532;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.007359281604737314;  // std dev = 2.610, 37.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=9 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420265;  // std dev = 5.02e-09, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return -0.34131837976179424;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.14278160480119229;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else if ( genre(A, G) )
%   | | | then return -0.06654198358179488;  // std dev = 4.56e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return -0.012212995810711353;  // std dev = 2.641, 40.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=9 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.06419184008202626;  // std dev = 2.98e-08, 109.000 (wgt'ed) examples reached here.  /* #neg=109 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.1179
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 0.888 seconds
Total inference time: 0.861 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.984277
   AUC PR    = 0.89854
   CLL	      = -0.115062
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.865672
   F1        = 0.928


Total scoring time: 0.964 seconds
Parameter learned model CLL: -0.115062


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 3, 0], 'true,false,true': [0.0, 0, 58], 'true,false,false,true': [2.691, 37, 9], 'true,false,false,false': [0.0, 0, 0], 'false,true': [8.94e-08, 100, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 58], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [2.543, 23, 9], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 91, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.112, 5, 0], 'true,false,true': [0.367, 34, 67], 'true,false,false': [0.0, 0, 0], 'false,true': [7.6e-08, 94, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.665, 1, 58], 'true,false,true': [0.0, 3, 0], 'true,false,false,true': [2.598, 27, 9], 'true,false,false,false': [0.0, 0, 0], 'false,true': [6.45e-09, 75, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.151, 3, 0], 'true,false,true': [1.26e-07, 0, 58], 'true,false,false,true': [2.676, 35, 9], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.58e-08, 105, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 58], 'true,false,true': [0.424, 28, 9], 'true,false,false': [0.0, 0, 0], 'false,true': [6.05e-08, 111, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.184, 4, 0], 'true,false,true': [0.0, 0, 58], 'true,false,false,true': [2.491, 20, 9], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.07e-08, 122, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.455, 1, 58], 'true,false,true': [2.66, 36, 9], 'true,false,false': [0.0, 0, 0], 'false,true': [4.83e-08, 110, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [2.98e-08, 0, 58], 'true,false,true': [0.0, 8, 0], 'true,false,false,true': [2.61, 28, 9], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.02e-09, 103, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true,true,false': 'genre(A, G)'}, {'true,true,true,true': [0.0, 3, 0], 'true,true,true,false': [0.0, 0, 58], 'true,true,false,true': [4.56e-09, 9, 0], 'true,true,false,false': [2.641, 31, 9], 'true,false': [0.0, 0, 0], 'false': [2.98e-08, 109, 0]}]]
[{'': [0.23408157917722003, 7.993605777301127e-17], 'true': [0.0, 0.22919748520709987], 'true,false': [-3.675221047035001e-16, 0.15737240075614384], 'true,false,false': [0.15737240075614384, nan], 'false': [7.993605777301127e-17, nan]}, {'': [0.15076104089500456, -1.4640303621430636e-17], 'true': [-1.2250736823450003e-16, 0.2021484375000002], 'true,false': [nan, 0.2021484375000002], 'true,false,false': [0.2021484375000002, nan], 'false': [-1.4640303621430636e-17, nan]}, {'': [0.13975876678166957, 6.141659285160441e-17], 'true': [0.0025005676969806156, 0.1345914368712014], 'true,false': [0.1345914368712014, nan], 'false': [6.141659285160441e-17, nan]}, {'': [0.12010172290616233, 4.2928623618839385e-17], 'true': [0.007500087722783296, 0.17447073651535094], 'true,false': [-2.3129646346357427e-18, 0.1874999999999998], 'true,false,false': [0.1874999999999998, nan], 'false': [4.2928623618839385e-17, nan]}, {'': [0.10752167114965347, 2.960594732333751e-17], 'true': [0.00759725323674687, 0.10546685608741291], 'true,false': [2.756415785276251e-16, 0.1627066115702478], 'true,false,false': [0.1627066115702478, nan], 'false': [2.960594732333751e-17, nan]}, {'': [0.0846984288566174, 3.300663046182898e-17], 'true': [-1.9907447338106256e-16, 0.18001308330470217], 'true,false': [0.18001308330470217, nan], 'false': [3.300663046182898e-17, nan]}, {'': [0.0772203598212897, 4.0950849268960694e-17], 'true': [0.00848346988792327, 0.07598033396607713], 'true,false': [-8.422381566121877e-17, 0.2140309155766943], 'true,false,false': [0.2140309155766943, nan], 'false': [4.0950849268960694e-17, nan]}, {'': [0.08118643966391323, 2.119516683375299e-17], 'true': [0.0035070773796798296, 0.15727474014979018], 'true,false': [0.15727474014979018, nan], 'false': [2.119516683375299e-17, nan]}, {'': [0.07368182299172416, 2.4252444712685457e-17], 'true': [1.5313421029312504e-17, 0.1522510909982012], 'true,false': [-1.734723475976807e-18, 0.18407596785975175], 'true,false,false': [0.18407596785975175, nan], 'false': [2.4252444712685457e-17, nan]}, {'': [0.07460595320721859, 8.148425868808489e-18], 'true': [0.07460595320721859, nan], 'true,true': [0.01095871710276152, 0.14278950021174608], 'true,true,false': [2.3129646346357427e-18, 0.17437499999999975], 'true,true,true': [0.0, -4.976861834526564e-17]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, E).;true;true
9;true,true;genre(A, F).;true;true
9;true,false;genre(A, G).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995125;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else if ( actor(B) )
%   | | | then return -0.14185106490048777;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.14185106490048766;  // std dev = 7.88e-08, 83.000 (wgt'ed) examples reached here.  /* #neg=83 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109544;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else if ( director(B), female(A) )
%   | | then return 0.7194734122109543;  // std dev = 2.98e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return -0.13000587233017533;  // std dev = 0.153, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   else return -0.12544463852839138;  // std dev = 0.000, 96.000 (wgt'ed) examples reached here.  /* #neg=96 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5553664367462837;  // std dev = 2.06e-07, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.11817567795293304;  // std dev = 0.180, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
%   else return -0.1123163781936062;  // std dev = 7.88e-08, 99.000 (wgt'ed) examples reached here.  /* #neg=99 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( actor(A) )
%   | | then return 0.4175135841583103;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else return -0.20741907826481867;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( actor(B) )
%   | | | then return -0.10064914123538478;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | | else return 0.4175135841583102;  // std dev = 1.49e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.10159632948783626;  // std dev = 4.59e-08, 96.000 (wgt'ed) examples reached here.  /* #neg=96 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12555919691054265;  // std dev = 0.061, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.3207118471601497;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else if ( director(B), female(A) )
%   | | | then return 0.3207118471601497;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.10123250657589217;  // std dev = 0.219, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   else return -0.09269127618926096;  // std dev = 4.71e-08, 99.000 (wgt'ed) examples reached here.  /* #neg=99 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.25517224256948967;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else if ( actor(B) )
%   | | then return -0.08412738407905636;  // std dev = 0.008, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | | else return 0.2551722425694894;  // std dev = 1.83e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.08518475138839682;  // std dev = 5.05e-08, 87.000 (wgt'ed) examples reached here.  /* #neg=87 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12043571197247623;  // std dev = 0.091, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.20975771563253562;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else if ( actor(B) )
%   | | | then return -0.07755491017346204;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | | else return 0.2097577156325357;  // std dev = 1.67e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.07877675473109162;  // std dev = 5.05e-08, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.17709649774527725;  // std dev = 0.000, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.07828793952420429;  // std dev = 0.143, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   else return -0.07324622576333707;  // std dev = 0.000, 102.000 (wgt'ed) examples reached here.  /* #neg=102 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.1527438580936708;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else return 0.13641814480294392;  // std dev = 0.070, 39.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=37 */
%   | else if ( genre(A, E) )
%   | | then return -0.0692387032801464;  // std dev = 1.32e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( actor(B) )
%   | | | then return -0.06711436589742671;  // std dev = 1.49e-08, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | | else return 0.15274385809367097;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.06842697784420265;  // std dev = 4.83e-08, 100.000 (wgt'ed) examples reached here.  /* #neg=100 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.13522288246109787;  // std dev = 0.007, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else if ( genre(A, F) )
%   | | then return -0.06490754397256762;  // std dev = 1.32e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( actor(B) )
%   | | | then return -0.06303245673378949;  // std dev = 1.12e-08, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | | else return 0.13400703000801117;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.06419184008202626;  // std dev = 0.000, 101.000 (wgt'ed) examples reached here.  /* #neg=101 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063904
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.347 seconds
Total inference time: 0.877 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.067067
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.88 seconds
Refined model CLL: -0.067067


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063904
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 4.079 seconds
Total inference time: 0.877 seconds
AUC ROC: 1.0
Total revision time: 4.079
Best scored revision CLL: -0.067067


Dataset: 4_cora_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 00:16:14
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063904, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 4.079, 'Inference time': 0.877, 'parameter_0.2': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.1179, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 0.888, 'Inference time': 0.861}}


Amount of data: 0.4
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;haswordauthor(E, C).;true;true
7;true,true,true;author(F, E), title(F, D).;false;false
7;true,true,false;title(G, D), venue(G, B).;false;false
7;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
7;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
7;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, B).;false;true
8;true,true,false;title(F, D), venue(F, A).;false;false
8;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
8;true,false,false;haswordvenue(A, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
8;false,true;haswordauthor(M, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;true,true;author(F, E), venue(F, B).;true;true
9;true,true,true;samebib(F, G), venue(G, A).;false;false
9;true,true,false;author(H, E), venue(H, A).;false;false
9;true,false;haswordtitle(I, C).;true;true
9;true,false,true;title(J, I), venue(J, A).;false;false
9;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995107;  // std dev = 6.19e-07, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.07653973969721349;  // std dev = 3.854, 87.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=19 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048838;  // std dev = 0.000, 197.000 (wgt'ed) examples reached here.  /* #neg=197 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7121896359114779;  // std dev = 0.841, 116.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=115 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.07748966566737253;  // std dev = 3.828, 83.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=19 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839166;  // std dev = 0.000, 203.000 (wgt'ed) examples reached here.  /* #neg=203 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14079745591261997;  // std dev = 0.140, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( movie(E, A) )
%   | | then return 0.3651029171365807;  // std dev = 0.359, 193.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=134 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.1123163781936063;  // std dev = 4.71e-08, 162.000 (wgt'ed) examples reached here.  /* #neg=162 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.46619129552560434;  // std dev = 1.98e-07, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   | else if ( genre(A, E) )
%   | | then return -0.09902607129629727;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.0035276706903713912;  // std dev = 3.847, 86.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=19 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783652;  // std dev = 0.000, 182.000 (wgt'ed) examples reached here.  /* #neg=182 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09053506320500393;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( genre(B, E) )
%   | | then return 0.3539702275043836;  // std dev = 0.000, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.016564547791475055;  // std dev = 3.814, 81.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=19 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926055;  // std dev = 9.42e-08, 203.000 (wgt'ed) examples reached here.  /* #neg=203 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.26839660640595797;  // std dev = 0.768, 117.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=115 */
%   | else if ( movie(E, A) )
%   | | then return 0.012394065389702186;  // std dev = 0.413, 85.000 (wgt'ed) examples reached here.  /* #neg=66 #pos=19 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 8.94e-08, 235.000 (wgt'ed) examples reached here.  /* #neg=235 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.16486370060778818;  // std dev = 0.197, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.22723335817849757;  // std dev = 0.000, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.06489833478723953;  // std dev = 3.678, 66.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=19 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109147;  // std dev = 7.88e-08, 190.000 (wgt'ed) examples reached here.  /* #neg=190 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1856682638547883;  // std dev = 0.479, 116.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=115 */
%   | else if ( movie(E, B) )
%   | | then return -0.008914657608532826;  // std dev = 3.825, 90.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=19 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.07324622576333668;  // std dev = 1.10e-07, 187.000 (wgt'ed) examples reached here.  /* #neg=187 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1628871525634957;  // std dev = 9.88e-08, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   | else if ( genre(A, E) )
%   | | then return -0.07182160683653627;  // std dev = 2.63e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.030702720813415248;  // std dev = 3.894, 94.000 (wgt'ed) examples reached here.  /* #neg=75 #pos=19 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420262;  // std dev = 5.67e-09, 172.000 (wgt'ed) examples reached here.  /* #neg=172 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return -0.36755638606068974;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return 0.1418768257330231;  // std dev = 0.000, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   | | else if ( genre(A, G) )
%   | | | then return -0.06717852599672552;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return -0.003861879727888054;  // std dev = 3.841, 85.000 (wgt'ed) examples reached here.  /* #neg=66 #pos=19 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.06419184008202626;  // std dev = 0.000, 216.000 (wgt'ed) examples reached here.  /* #neg=216 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.115149
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.225 seconds
Total inference time: 0.836 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.982829
   AUC PR    = 0.891359
   CLL	      = -0.114724
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.858209
   F1        = 0.923695


Total scoring time: 1.182 seconds
Parameter learned model CLL: -0.114724


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 13, 0], 'true,false,true': [6.19e-07, 0, 115], 'true,false,false,true': [3.854, 68, 19], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 197, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.841, 1, 115], 'true,false,true': [0.0, 6, 0], 'true,false,false,true': [3.828, 64, 19], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 203, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.14, 8, 0], 'true,false,true': [0.359, 59, 134], 'true,false,false': [0.0, 0, 0], 'false,true': [4.71e-08, 162, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.98e-07, 0, 115], 'true,false,true': [0.0, 6, 0], 'true,false,false,true': [3.847, 67, 19], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 182, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 7, 0], 'true,false,true': [0.0, 0, 115], 'true,false,false,true': [3.814, 62, 19], 'true,false,false,false': [0.0, 0, 0], 'false,true': [9.42e-08, 203, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.768, 2, 115], 'true,false,true': [0.413, 66, 19], 'true,false,false': [0.0, 0, 0], 'false,true': [8.94e-08, 235, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.197, 3, 0], 'true,false,true': [0.0, 0, 115], 'true,false,false,true': [3.678, 47, 19], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.88e-08, 190, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.479, 1, 115], 'true,false,true': [3.825, 71, 19], 'true,false,false': [0.0, 0, 0], 'false,true': [1.1e-07, 187, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [9.88e-08, 0, 115], 'true,false,true': [2.63e-09, 9, 0], 'true,false,false,true': [3.894, 75, 19], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.67e-09, 172, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true,true,false': 'genre(A, G)'}, {'true,true,true,true': [0.0, 2, 0], 'true,true,true,false': [0.0, 0, 115], 'true,true,false,true': [0.0, 5, 0], 'true,true,false,false': [3.841, 66, 19], 'true,false': [0.0, 0, 0], 'false': [0.0, 216, 0]}]]
[{'': [0.23480800432666737, -2.366972945901349e-16], 'true': [-1.2810265668751807e-17, 0.22331144005490106], 'true,false': [3.3364615418300357e-15, 0.17069626106486932], 'true,false,false': [0.17069626106486932, nan], 'false': [-2.366972945901349e-16, nan]}, {'': [0.17931910184492528, -3.500210520985715e-17], 'true': [0.006101140675793815, 0.16720267841230937], 'true,false': [-2.3129646346357427e-18, 0.17651328204383815], 'true,false,false': [0.17651328204383815, nan], 'false': [-3.500210520985715e-17, nan]}, {'': [0.13360030626142388, 1.3706457094137734e-17], 'true': [0.0024335153641094863, 0.12885079656477855], 'true,false': [0.12885079656477855, nan], 'false': [1.3706457094137734e-17, nan]}, {'': [0.12618667946424872, -8.540177112501205e-17], 'true': [3.39824786667874e-16, 0.16153601899882267], 'true,false': [0.0, 0.17212006489994602], 'true,false,false': [0.17212006489994602, nan], 'false': [-8.540177112501205e-17, nan]}, {'': [0.10139229097356592, 4.375263151232144e-17], 'true': [-1.982541115402065e-18, 0.10180427131472712], 'true,false': [-4.3250427394093057e-16, 0.17954580094497793], 'true,false,false': [0.17954580094497793, nan], 'false': [4.375263151232144e-17, nan]}, {'': [0.09062318730403514, 3.4015343733196285e-17], 'true': [0.00504056851700189, 0.17046542107807722], 'true,false': [0.17046542107807722, nan], 'false': [3.4015343733196285e-17, nan]}, {'': [0.08152912926039808, 3.272236283105724e-17], 'true': [0.012979857840954748, 0.0808583845582983], 'true,false': [-1.69912393333937e-16, 0.20500459136822757], 'true,false,false': [0.20500459136822757, nan], 'false': [3.272236283105724e-17, nan]}, {'': [0.08146053202775896, 6.411983243824433e-17], 'true': [0.0019745010592203682, 0.16258855559351496], 'true,false': [0.16258855559351496, nan], 'false': [6.411983243824433e-17, nan]}, {'': [0.07929384522666173, 3.162844663176318e-17], 'true': [8.49561966669685e-17, 0.1473151621765694], 'true,false': [7.709882115452476e-19, 0.16127206880941555], 'true,false,false': [0.16127206880941555, nan], 'false': [3.162844663176318e-17, nan]}, {'': [0.07868072030653359, 0.0], 'true': [0.07868072030653359, nan], 'true,true': [0.004360443083793178, 0.16413191727192797], 'true,true,false': [0.0, 0.1735640138408307], 'true,true,true': [0.0, -3.8616453030440226e-17]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, E).;true;true
9;true,true;genre(A, F).;true;true
9;true,false;genre(A, G).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995107;  // std dev = 6.19e-07, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   | | else if ( actor(B) )
%   | | | then return -0.14185106490048766;  // std dev = 5.58e-08, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
%   | | | else return 0.7217852987358758;  // std dev = 1.610, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   else return -0.1418510649004884;  // std dev = 0.000, 204.000 (wgt'ed) examples reached here.  /* #neg=204 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109551;  // std dev = 0.000, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 5.27e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( actor(B) )
%   | | | then return -0.1254446385283916;  // std dev = 0.000, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
%   | | | else return 0.7461559834740239;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   else return -0.12544463852839166;  // std dev = 0.000, 204.000 (wgt'ed) examples reached here.  /* #neg=204 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1287737953877587;  // std dev = 0.107, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( director(B), actor(A) )
%   | | then return 0.5591797329704019;  // std dev = 0.109, 134.000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | | else return -0.11807908407454992;  // std dev = 0.303, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
%   else return -0.11231637819360672;  // std dev = 0.000, 222.000 (wgt'ed) examples reached here.  /* #neg=222 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( actor(A) )
%   | | then return 0.41658649853702906;  // std dev = 1.19e-07, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   | | else return -0.20568218788592238;  // std dev = 5.27e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(A, E) )
%   | | then return -0.1001040051088255;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.4434625728597917;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return -0.10875838640062677;  // std dev = 0.402, 75.000 (wgt'ed) examples reached here.  /* #neg=75 */
%   else return -0.1015963294878365;  // std dev = 0.000, 184.000 (wgt'ed) examples reached here.  /* #neg=184 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.10062493300752526;  // std dev = 0.078, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( genre(B, E) )
%   | | then return 0.3200833951979263;  // std dev = 0.000, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   | | else if ( actor(B) )
%   | | | then return -0.0916100159672366;  // std dev = 2.58e-08, 76.000 (wgt'ed) examples reached here.  /* #neg=76 */
%   | | | else return 0.3383661779905446;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   else return -0.09269127618926055;  // std dev = 4.94e-08, 185.000 (wgt'ed) examples reached here.  /* #neg=185 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2565075445881917;  // std dev = 0.050, 134.000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else if ( actor(B) )
%   | | then return -0.08421189594417998;  // std dev = 0.002, 78.000 (wgt'ed) examples reached here.  /* #neg=78 */
%   | | else return -0.3025966527251569;  // std dev = 0.285, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.08518475138839678;  // std dev = 7.74e-08, 205.000 (wgt'ed) examples reached here.  /* #neg=205 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08876541406476601;  // std dev = 0.040, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.20916275309628762;  // std dev = 0.000, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   | | else if ( actor(B) )
%   | | | then return -0.07799146479309246;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
%   | | | else return 0.2200358772614925;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   else return -0.07877675473109144;  // std dev = 7.60e-08, 202.000 (wgt'ed) examples reached here.  /* #neg=202 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.1766599978283889;  // std dev = 5.37e-08, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | | else return 0.16879968427284553;  // std dev = 0.047, 74.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=72 */
%   | else if ( director(B), actor(A) )
%   | | then return 0.18459913907654807;  // std dev = 1.83e-08, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else if ( actor(B) )
%   | | | then return -0.0725119526911957;  // std dev = 0.002, 83.000 (wgt'ed) examples reached here.  /* #neg=83 */
%   | | | else return -0.4248020893317405;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.07324622576333668;  // std dev = 1.12e-07, 189.000 (wgt'ed) examples reached here.  /* #neg=189 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.15241264834700632;  // std dev = 2.79e-08, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | | else return 0.14951553847683222;  // std dev = 0.033, 73.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=72 */
%   | else if ( genre(A, E) )
%   | | then return -0.06646594701289424;  // std dev = 4.56e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.15841186965314424;  // std dev = 7.45e-09, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return -0.07720871381162113;  // std dev = 0.358, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   else return -0.06842697784420261;  // std dev = 6.41e-08, 197.000 (wgt'ed) examples reached here.  /* #neg=197 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( genre(A, E) )
%   | | then return -0.15052294329813967;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0.13453181066346157;  // std dev = 0.006, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   | else if ( genre(A, F) )
%   | | then return -0.062458795170458506;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( actor(B) )
%   | | | then return -0.0631111486544257;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
%   | | | else return 0.13841656235972957;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   else return -0.06419184008202626;  // std dev = 0.000, 189.000 (wgt'ed) examples reached here.  /* #neg=189 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063723
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.717 seconds
Total inference time: 0.86 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.066013
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.181 seconds
Refined model CLL: -0.066013


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063723
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 5.305000000000001 seconds
Total inference time: 0.86 seconds
AUC ROC: 1.0
Total revision time: 5.305000000000001
Best scored revision CLL: -0.066013


Dataset: 4_cora_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 00:16:22
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063723, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 5.305000000000001, 'Inference time': 0.86, 'parameter_0.4': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.115149, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 1.225, 'Inference time': 0.836}}


Amount of data: 0.6
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;haswordauthor(E, C).;true;true
7;true,true,true;author(F, E), title(F, D).;false;false
7;true,true,false;title(G, D), venue(G, B).;false;false
7;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
7;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
7;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, B).;false;true
8;true,true,false;title(F, D), venue(F, A).;false;false
8;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
8;true,false,false;haswordvenue(A, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
8;false,true;haswordauthor(M, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;true,true;author(F, E), venue(F, B).;true;true
9;true,true,true;samebib(F, G), venue(G, A).;false;false
9;true,true,false;author(H, E), venue(H, A).;false;false
9;true,false;haswordtitle(I, C).;true;true
9;true,false,true;title(J, I), venue(J, A).;false;false
9;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995095;  // std dev = 1.09e-06, 174.000 (wgt'ed) examples reached here.  /* #pos=174 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.059587784020374866;  // std dev = 4.729, 139.000 (wgt'ed) examples reached here.  /* #neg=111 #pos=28 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048782;  // std dev = 1.03e-07, 302.000 (wgt'ed) examples reached here.  /* #neg=302 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.705152767283171;  // std dev = 1.451, 177.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=174 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 5.27e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.07473941698979722;  // std dev = 4.661, 125.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=28 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.125444638528392;  // std dev = 0.000, 300.000 (wgt'ed) examples reached here.  /* #neg=300 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12256136359968925;  // std dev = 0.107, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( movie(E, A) )
%   | | then return 0.403185218845081;  // std dev = 0.341, 272.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=202 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360667;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #neg=324 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.44357897890358505;  // std dev = 1.311, 178.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=174 */
%   | else if ( genre(A, E) )
%   | | then return -0.10066503277384133;  // std dev = 5.27e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.0051613510104483815;  // std dev = 4.687, 130.000 (wgt'ed) examples reached here.  /* #neg=102 #pos=28 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783662;  // std dev = 0.000, 283.000 (wgt'ed) examples reached here.  /* #neg=283 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11961494123061878;  // std dev = 0.254, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else if ( genre(B, E) )
%   | | then return 0.35204416535504457;  // std dev = 0.000, 174.000 (wgt'ed) examples reached here.  /* #pos=174 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.03959927732094185;  // std dev = 4.554, 108.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=28 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926046;  // std dev = 1.59e-07, 285.000 (wgt'ed) examples reached here.  /* #neg=285 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2733786970054254;  // std dev = 0.537, 175.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=174 */
%   | else if ( movie(E, A) )
%   | | then return -0.0022694252140704205;  // std dev = 0.408, 130.000 (wgt'ed) examples reached here.  /* #neg=102 #pos=28 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 1.03e-07, 298.000 (wgt'ed) examples reached here.  /* #neg=298 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14659480378164022;  // std dev = 0.349, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( genre(B, E) )
%   | | then return 0.22522220796182355;  // std dev = 8.43e-08, 174.000 (wgt'ed) examples reached here.  /* #pos=174 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.005279374364014953;  // std dev = 4.639, 121.000 (wgt'ed) examples reached here.  /* #neg=93 #pos=28 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109143;  // std dev = 3.33e-08, 302.000 (wgt'ed) examples reached here.  /* #neg=302 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1829533458575523;  // std dev = 0.669, 176.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=174 */
%   | else if ( movie(E, B) )
%   | | then return 0.011186900708218688;  // std dev = 4.600, 126.000 (wgt'ed) examples reached here.  /* #neg=98 #pos=28 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.07324622576333704;  // std dev = 8.56e-08, 322.000 (wgt'ed) examples reached here.  /* #neg=322 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.16196707493752877;  // std dev = 0.000, 174.000 (wgt'ed) examples reached here.  /* #pos=174 */
%   | else if ( genre(A, E) )
%   | | then return -0.0725734552623389;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.004313281611014485;  // std dev = 4.633, 120.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=28 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420296;  // std dev = 0.000, 290.000 (wgt'ed) examples reached here.  /* #neg=290 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.14116694096051347;  // std dev = 1.41e-07, 174.000 (wgt'ed) examples reached here.  /* #pos=174 */
%   | | else if ( genre(A, G) )
%   | | | then return -0.06783776506744356;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return -0.009310096361350034;  // std dev = 4.672, 127.000 (wgt'ed) examples reached here.  /* #neg=99 #pos=28 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.06419184008202594;  // std dev = 1.18e-07, 302.000 (wgt'ed) examples reached here.  /* #neg=302 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.115859
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.456 seconds
Total inference time: 0.811 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.983616
   AUC PR    = 0.894382
   CLL	      = -0.114477
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.861386
   F1        = 0.925532


Total scoring time: 1.407 seconds
Parameter learned model CLL: -0.114477


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 10, 0], 'true,false,true': [1.09e-06, 0, 174], 'true,false,false,true': [4.729, 111, 28], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.03e-07, 302, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.451, 3, 174], 'true,false,true': [5.27e-09, 10, 0], 'true,false,false,true': [4.661, 97, 28], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 300, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.107, 11, 0], 'true,false,true': [0.341, 70, 202], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 324, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.311, 4, 174], 'true,false,true': [5.27e-09, 8, 0], 'true,false,false,true': [4.687, 102, 28], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 283, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.254, 14, 0], 'true,false,true': [0.0, 0, 174], 'true,false,false,true': [4.554, 80, 28], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.59e-07, 285, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.537, 1, 174], 'true,false,true': [0.408, 102, 28], 'true,false,false': [0.0, 0, 0], 'false,true': [1.03e-07, 298, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.349, 11, 0], 'true,false,true': [8.43e-08, 0, 174], 'true,false,false,true': [4.639, 93, 28], 'true,false,false,false': [0.0, 0, 0], 'false,true': [3.33e-08, 302, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.669, 2, 174], 'true,false,true': [4.6, 98, 28], 'true,false,false': [0.0, 0, 0], 'false,true': [8.56e-08, 322, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 174], 'true,false,true': [0.0, 10, 0], 'true,false,false,true': [4.633, 92, 28], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 290, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true,true,false': 'genre(A, G)'}, {'true,true,true,true': [0.0, 0, 0], 'true,true,true,false': [1.41e-07, 0, 174], 'true,true,false,true': [0.0, 8, 0], 'true,true,false,false': [4.672, 99, 28], 'true,false': [0.0, 0, 0], 'false': [1.18e-07, 302, 0]}]]
[{'': [0.23427810100739457, 3.529185773642882e-17], 'true': [-1.1102230246251566e-17, 0.2288683154875568], 'true,false': [6.860412621132002e-15, 0.16086123906630198], 'true,false,false': [0.16086123906630198, nan], 'false': [3.529185773642882e-17, nan]}, {'': [0.17977634823150968, -8.585724723767877e-17], 'true': [0.011894690526563998, 0.16369668423070782], 'true,false': [2.7755575615628915e-18, 0.17382400000000073], 'true,false,false': [0.17382400000000073, nan], 'false': [-8.585724723767877e-17, nan]}, {'': [0.12241591694571796, -3.8378079863585656e-17], 'true': [0.001049597259708523, 0.11658028274904755], 'true,false': [0.11658028274904755, nan], 'false': [-3.8378079863585656e-17, nan]}, {'': [0.12594201035809102, -5.806113344329441e-17], 'true': [0.009651167050487415, 0.15969542309984475], 'true,false': [3.469446951953614e-18, 0.16899408284023787], 'true,false,false': [0.16899408284023787, nan], 'false': [-5.806113344329441e-17, nan]}, {'': [0.0978485412283104, 8.881784197001253e-17], 'true': [0.004605061975869486, 0.09661734703896922], 'true,false': [-6.942084199955002e-16, 0.19204389574759892], 'true,false,false': [0.19204389574759892, nan], 'false': [8.881784197001253e-17, nan]}, {'': [0.09044049990832534, 3.576557394765605e-17], 'true': [0.0016476622637282036, 0.16637315497992947], 'true,false': [0.16637315497992947, nan], 'false': [3.576557394765605e-17, nan]}, {'': [0.08475690621349703, 3.676235180878002e-18], 'true': [0.01104701924214116, 0.08465474443317252], 'true,false': [4.083578941150001e-17, 0.17785670377706533], 'true,false,false': [0.17785670377706533, nan], 'false': [3.676235180878002e-18, nan]}, {'': [0.07872739465022371, 2.2756124107223705e-17], 'true': [0.0025418669260584155, 0.1679510585679161], 'true,false': [0.1679510585679161, nan], 'false': [2.2756124107223705e-17, nan]}, {'': [0.07734205318664844, -4.8237276242334385e-17], 'true': [-2.3480578911612507e-16, 0.16554796159971066], 'true,false': [-1.3877787807814458e-18, 0.17888888888888924], 'true,false,false': [0.17888888888888924, nan], 'false': [-4.8237276242334385e-17, nan]}, {'': [0.07655064281860095, 4.6320563279062825e-17], 'true': [0.07655064281860095, nan], 'true,true': [1.148506577198438e-16, 0.16187075275942955], 'true,true,false': [0.0, 0.17186434372868858], 'true,true,true': [nan, 1.148506577198438e-16]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, E).;true;true
9;true,false;genre(A, G).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995095;  // std dev = 1.09e-06, 174.000 (wgt'ed) examples reached here.  /* #pos=174 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.8581489350995117;  // std dev = 1.69e-07, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | | else return -0.14185106490048763;  // std dev = 8.30e-08, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */
%   else return -0.1418510649004877;  // std dev = 1.63e-07, 320.000 (wgt'ed) examples reached here.  /* #neg=320 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109566;  // std dev = 0.000, 174.000 (wgt'ed) examples reached here.  /* #pos=174 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 7.45e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.7194734122109546;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | | else return -0.12544463852839144;  // std dev = 0.000, 84.000 (wgt'ed) examples reached here.  /* #neg=84 */
%   else return -0.12544463852839197;  // std dev = 0.000, 284.000 (wgt'ed) examples reached here.  /* #neg=284 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( director(B), actor(A) )
%   | | then return 0.5553664367462833;  // std dev = 6.36e-07, 202.000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | | else return -0.11231637819360622;  // std dev = 7.45e-08, 96.000 (wgt'ed) examples reached here.  /* #neg=96 */
%   else return -0.11231637819360697;  // std dev = 0.000, 277.000 (wgt'ed) examples reached here.  /* #neg=277 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.4175135841583106;  // std dev = 0.000, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | | else if ( actor(A) )
%   | | | then return 0.4175135841583096;  // std dev = 2.86e-07, 107.000 (wgt'ed) examples reached here.  /* #pos=107 */
%   | | | else return -0.20838397746140905;  // std dev = 5.27e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.4175135841583105;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | | else return -0.10159632948783621;  // std dev = 5.37e-08, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */
%   else return -0.10159632948783662;  // std dev = 0.000, 297.000 (wgt'ed) examples reached here.  /* #neg=297 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.10659077488296947;  // std dev = 0.108, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else if ( genre(B, E) )
%   | | then return 0.32071184716014917;  // std dev = 3.42e-07, 174.000 (wgt'ed) examples reached here.  /* #pos=174 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.3207118471601495;  // std dev = 2.11e-08, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | | else return -0.09269127618926105;  // std dev = 1.83e-08, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */
%   else return -0.09269127618926044;  // std dev = 1.74e-07, 302.000 (wgt'ed) examples reached here.  /* #neg=302 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.25517224256948884;  // std dev = 3.24e-07, 174.000 (wgt'ed) examples reached here.  /* #pos=174 */
%   | else if ( actor(B) )
%   | | then return -0.08502769796329723;  // std dev = 0.004, 96.000 (wgt'ed) examples reached here.  /* #neg=96 */
%   | | else return 0.2551722425694897;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   else return -0.08518475138839678;  // std dev = 1.03e-07, 296.000 (wgt'ed) examples reached here.  /* #neg=296 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( female(B) )
%   | | then return -0.07778520735575338;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.12614747637530957;  // std dev = 0.132, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(B, E) )
%   | | then return 0.2097577156325351;  // std dev = 2.90e-07, 174.000 (wgt'ed) examples reached here.  /* #pos=174 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.2097577156325358;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | | else return -0.07935254390403876;  // std dev = 0.040, 101.000 (wgt'ed) examples reached here.  /* #neg=101 */
%   else return -0.07877675473109143;  // std dev = 4.21e-08, 289.000 (wgt'ed) examples reached here.  /* #neg=289 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1770964977452778;  // std dev = 0.000, 202.000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.07696604292723519;  // std dev = 0.181, 83.000 (wgt'ed) examples reached here.  /* #neg=83 */
%   else return -0.07324622576333688;  // std dev = 1.10e-07, 271.000 (wgt'ed) examples reached here.  /* #neg=271 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.1527438580936711;  // std dev = 0.000, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | | else return 0.14685285322862154;  // std dev = 0.043, 109.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=107 */
%   | else if ( genre(A, E) )
%   | | then return -0.06521982412202375;  // std dev = 0.004, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.1527438580936709;  // std dev = 2.98e-08, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | | else return -0.06873943522346233;  // std dev = 0.035, 87.000 (wgt'ed) examples reached here.  /* #neg=87 */
%   else return -0.06842697784420307;  // std dev = 0.000, 315.000 (wgt'ed) examples reached here.  /* #neg=315 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.13400703000801134;  // std dev = 0.000, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | | else return 0.13168680674161415;  // std dev = 0.031, 108.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=107 */
%   | else if ( genre(A, E) )
%   | | then return -0.06129079278853889;  // std dev = 0.004, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.13400703000801117;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | | else return -0.06418189375171415;  // std dev = 0.024, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */
%   else return -0.06419184008202589;  // std dev = 1.31e-07, 315.000 (wgt'ed) examples reached here.  /* #neg=315 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064091
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.046 seconds
Total inference time: 0.889 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064891
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.369 seconds
Refined model CLL: -0.064891


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064091
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 6.278 seconds
Total inference time: 0.889 seconds
AUC ROC: 1.0
Total revision time: 6.278
Best scored revision CLL: -0.064891


Dataset: 4_cora_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 00:16:30
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.064091, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 6.278, 'Inference time': 0.889, 'parameter_0.6': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.115859, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 1.456, 'Inference time': 0.811}}


Amount of data: 0.8
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;haswordauthor(E, C).;true;true
7;true,true,true;author(F, E), title(F, D).;false;false
7;true,true,false;title(G, D), venue(G, B).;false;false
7;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
7;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
7;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, B).;false;true
8;true,true,false;title(F, D), venue(F, A).;false;false
8;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
8;true,false,false;haswordvenue(A, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
8;false,true;haswordauthor(M, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;true,true;author(F, E), venue(F, B).;true;true
9;true,true,true;samebib(F, G), venue(G, A).;false;false
9;true,true,false;author(H, E), venue(H, A).;false;false
9;true,false;haswordtitle(I, C).;true;true
9;true,false,true;title(J, I), venue(J, A).;false;false
9;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else if ( genre(B, E) )
%   | | then return 0.858148935099509;  // std dev = 1.08e-06, 227.000 (wgt'ed) examples reached here.  /* #pos=227 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.1066696451586831;  // std dev = 5.618, 169.000 (wgt'ed) examples reached here.  /* #neg=127 #pos=42 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048732;  // std dev = 3.01e-07, 402.000 (wgt'ed) examples reached here.  /* #neg=402 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7120942152612686;  // std dev = 1.190, 229.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=227 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 5.27e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.10392089127661243;  // std dev = 5.578, 162.000 (wgt'ed) examples reached here.  /* #neg=120 #pos=42 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839224;  // std dev = 0.000, 389.000 (wgt'ed) examples reached here.  /* #neg=389 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12107850183747988;  // std dev = 0.109, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( movie(E, A) )
%   | | then return 0.35846834267030725;  // std dev = 0.366, 392.000 (wgt'ed) examples reached here.  /* #neg=123 #pos=269 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360614;  // std dev = 0.000, 416.000 (wgt'ed) examples reached here.  /* #neg=416 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4505205457780389;  // std dev = 1.629, 233.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=227 */
%   | else if ( genre(A, E) )
%   | | then return -0.1007993581152398;  // std dev = 5.27e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.059697535703066185;  // std dev = 5.477, 147.000 (wgt'ed) examples reached here.  /* #neg=105 #pos=42 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783588;  // std dev = 1.14e-08, 407.000 (wgt'ed) examples reached here.  /* #neg=407 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.15262734260620808;  // std dev = 0.328, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( genre(B, E) )
%   | | then return 0.35910932066202866;  // std dev = 3.32e-07, 227.000 (wgt'ed) examples reached here.  /* #pos=227 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.014866732020041594;  // std dev = 5.607, 167.000 (wgt'ed) examples reached here.  /* #neg=125 #pos=42 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926082;  // std dev = 1.62e-07, 392.000 (wgt'ed) examples reached here.  /* #neg=392 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2812355019639976;  // std dev = 0.000, 227.000 (wgt'ed) examples reached here.  /* #pos=227 */
%   | else if ( movie(E, A) )
%   | | then return 0.01449705669523249;  // std dev = 0.424, 173.000 (wgt'ed) examples reached here.  /* #neg=131 #pos=42 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 1.32e-07, 400.000 (wgt'ed) examples reached here.  /* #neg=400 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09789961448765486;  // std dev = 0.226, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else if ( genre(B, E) )
%   | | then return 0.22801092367313747;  // std dev = 1.46e-07, 227.000 (wgt'ed) examples reached here.  /* #pos=227 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.03507884357443644;  // std dev = 5.772, 203.000 (wgt'ed) examples reached here.  /* #neg=161 #pos=42 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109141;  // std dev = 2.26e-07, 405.000 (wgt'ed) examples reached here.  /* #neg=405 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17786554964028314;  // std dev = 1.174, 233.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=227 */
%   | else if ( movie(E, B) )
%   | | then return -0.007942110735029293;  // std dev = 5.684, 193.000 (wgt'ed) examples reached here.  /* #neg=151 #pos=42 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.0732462257633377;  // std dev = 0.000, 392.000 (wgt'ed) examples reached here.  /* #neg=392 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.16445416115067937;  // std dev = 0.000, 227.000 (wgt'ed) examples reached here.  /* #pos=227 */
%   | else if ( genre(A, E) )
%   | | then return -0.07356697258870283;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.0059113030594640514;  // std dev = 5.693, 184.000 (wgt'ed) examples reached here.  /* #neg=142 #pos=42 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420332;  // std dev = 0.000, 386.000 (wgt'ed) examples reached here.  /* #neg=386 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return -0.3711499792024106;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.1430840651273399;  // std dev = 4.21e-08, 227.000 (wgt'ed) examples reached here.  /* #pos=227 */
%   | | else if ( genre(A, G) )
%   | | | then return -0.06870765968282731;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.03785400988805556;  // std dev = 5.533, 155.000 (wgt'ed) examples reached here.  /* #neg=113 #pos=42 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.06419184008202561;  // std dev = 1.93e-07, 396.000 (wgt'ed) examples reached here.  /* #neg=396 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.119692
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.623 seconds
Total inference time: 0.916 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.98125
   AUC PR    = 0.880267
   CLL	      = -0.118591
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.843866
   F1        = 0.915323


Total scoring time: 1.539 seconds
Parameter learned model CLL: -0.118591


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 18, 0], 'true,false,true': [1.08e-06, 0, 227], 'true,false,false,true': [5.618, 127, 42], 'true,false,false,false': [0.0, 0, 0], 'false,true': [3.01e-07, 402, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.19, 2, 227], 'true,false,true': [5.27e-09, 11, 0], 'true,false,false,true': [5.578, 120, 42], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 389, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.109, 13, 0], 'true,false,true': [0.366, 123, 269], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 416, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.629, 6, 227], 'true,false,true': [5.27e-09, 8, 0], 'true,false,false,true': [5.477, 105, 42], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.14e-08, 407, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.328, 13, 0], 'true,false,true': [3.32e-07, 0, 227], 'true,false,false,true': [5.607, 125, 42], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.62e-07, 392, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 227], 'true,false,true': [0.424, 131, 42], 'true,false,false': [0.0, 0, 0], 'false,true': [1.32e-07, 400, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.226, 14, 0], 'true,false,true': [1.46e-07, 0, 227], 'true,false,false,true': [5.772, 161, 42], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.26e-07, 405, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [1.174, 6, 227], 'true,false,true': [5.684, 151, 42], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 392, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 227], 'true,false,true': [0.0, 12, 0], 'true,false,false,true': [5.693, 142, 42], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 386, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true,true,false': 'genre(A, G)'}, {'true,true,true,true': [0.0, 4, 0], 'true,true,true,false': [4.21e-08, 0, 227], 'true,true,false,true': [0.0, 12, 0], 'true,true,false,false': [5.533, 113, 42], 'true,false': [0.0, 0, 0], 'false': [1.93e-07, 396, 0]}]]
[{'': [0.22757240542370055, 2.2535870350600193e-16], 'true': [-3.0839528461809902e-18, 0.21785404550556414], 'true,false': [5.133436505050944e-15, 0.18675816673085796], 'true,false,false': [0.18675816673085796, nan], 'false': [2.2535870350600193e-16, nan]}, {'': [0.17733464751909941, -1.2786116067662472e-16], 'true': [0.006180364155126291, 0.18296537310509467], 'true,false': [2.523234146875356e-18, 0.19204389574759834], 'true,false,false': [0.19204389574759834, nan], 'false': [-1.2786116067662472e-16, nan]}, {'': [0.137064676086559, -1.708035422500241e-17], 'true': [0.0009212977290063365, 0.13419803681824338], 'true,false': [0.13419803681824338, nan], 'false': [-1.708035422500241e-17, nan]}, {'': [0.1228713855296552, 1.3093539356758603e-16], 'true': [0.01138334307739202, 0.19480927706306658], 'true,false': [3.469446951953614e-18, 0.20408163265306084], 'true,false,false': [0.20408163265306084, nan], 'false': [1.3093539356758603e-16, nan]}, {'': [0.10965752912433456, 6.683995760498391e-17], 'true': [0.008263836159213701, 0.1087283635837858], 'true,false': [4.851723526115222e-16, 0.18824626196708424], 'true,false,false': [0.18824626196708424, nan], 'false': [6.683995760498391e-17, nan]}, {'': [0.0953599735753491, 4.3298697960381107e-17], 'true': [-1.0016461473270136e-15, 0.1801082045658427], 'true,false': [0.1801082045658427, nan], 'false': [4.3298697960381107e-17, nan]}, {'': [0.0930874587191299, 1.2609940526606716e-16], 'true': [0.0036627530641000433, 0.09471606905968608], 'true,false': [9.390432631190752e-17, 0.16409036860879897], 'true,false,false': [0.16409036860879897, nan], 'false': [1.2609940526606716e-16, nan]}, {'': [0.0876376452708279, -6.230843505549347e-17], 'true': [0.005918588494847854, 0.16741018287962275], 'true,false': [0.16741018287962275, nan], 'false': [-6.230843505549347e-17, nan]}, {'': [0.08432082270801956, -1.0699558682916016e-16], 'true': [-1.7607061183482658e-16, 0.16563575534201563], 'true,false': [0.0, 0.17615784499054812], 'true,false,false': [0.17615784499054812, nan], 'false': [-1.0699558682916016e-16, nan]}, {'': [0.08249566267803288, 9.420074148334662e-17], 'true': [0.08249566267803288, nan], 'true,true': [0.004499699786955655, 0.18410675472010393], 'true,true,false': [-1.1564823173178713e-18, 0.19754422476587025], 'true,true,true': [0.0, 7.825360525992294e-18]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, E).;true;true
9;true,true;genre(A, F).;true;true
9;true,false;genre(A, G).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( genre(B, E) )
%   | | then return 0.858148935099509;  // std dev = 1.08e-06, 227.000 (wgt'ed) examples reached here.  /* #pos=227 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.8581489350995118;  // std dev = 2.38e-07, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   | | | else return -0.14185106490048796;  // std dev = 0.000, 140.000 (wgt'ed) examples reached here.  /* #neg=140 */
%   else return -0.14185106490048735;  // std dev = 3.00e-07, 396.000 (wgt'ed) examples reached here.  /* #neg=396 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109573;  // std dev = 0.000, 227.000 (wgt'ed) examples reached here.  /* #pos=227 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 7.45e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.719473412210955;  // std dev = 0.000, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   | | | else return -0.1254446385283911;  // std dev = 7.88e-08, 134.000 (wgt'ed) examples reached here.  /* #neg=134 */
%   else return -0.12544463852839227;  // std dev = 0.000, 407.000 (wgt'ed) examples reached here.  /* #neg=407 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.13003975055653966;  // std dev = 0.150, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( actor(B) )
%   | | then return -0.1123163781936062;  // std dev = 8.43e-08, 105.000 (wgt'ed) examples reached here.  /* #neg=105 */
%   | | else return 0.5553664367462832;  // std dev = 3.58e-07, 269.000 (wgt'ed) examples reached here.  /* #pos=269 */
%   else return -0.1123163781936062;  // std dev = 0.000, 405.000 (wgt'ed) examples reached here.  /* #neg=405 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.41751358415830997;  // std dev = 2.06e-07, 94.000 (wgt'ed) examples reached here.  /* #pos=94 */
%   | | else return 0.40377117928075107;  // std dev = 0.092, 136.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=133 */
%   | else if ( genre(A, E) )
%   | | then return -0.09999002154413338;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.41751358415831047;  // std dev = 0.000, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   | | | else return -0.10219981591854949;  // std dev = 0.079, 131.000 (wgt'ed) examples reached here.  /* #neg=131 */
%   else return -0.10159632948783574;  // std dev = 2.63e-07, 428.000 (wgt'ed) examples reached here.  /* #neg=428 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( actor(B) )
%   | | then return -0.09134470633118029;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else return -0.2791571587533935;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.32247026496334086;  // std dev = 0.022, 227.000 (wgt'ed) examples reached here.  /* #pos=227 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.32071184716014944;  // std dev = 2.98e-08, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   | | | else return -0.09385335549531788;  // std dev = 0.103, 121.000 (wgt'ed) examples reached here.  /* #neg=121 */
%   else return -0.09269127618926043;  // std dev = 2.09e-07, 343.000 (wgt'ed) examples reached here.  /* #neg=343 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.2548381826930634;  // std dev = 0.000, 94.000 (wgt'ed) examples reached here.  /* #pos=94 */
%   | | else return 0.2502858798387801;  // std dev = 0.058, 135.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=133 */
%   | else if ( actor(A), director(B) )
%   | | then return 0.2551722425694896;  // std dev = 0.000, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   | | else return -0.08634003411584748;  // std dev = 0.117, 147.000 (wgt'ed) examples reached here.  /* #neg=147 */
%   else return -0.08518475138839678;  // std dev = 1.33e-07, 406.000 (wgt'ed) examples reached here.  /* #neg=406 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.0776287310637548;  // std dev = 5.27e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else if ( genre(B, E) )
%   | | then return 0.21130644096800474;  // std dev = 0.023, 227.000 (wgt'ed) examples reached here.  /* #pos=227 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.20975771563253545;  // std dev = 5.96e-08, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   | | | else return -0.08084999461006989;  // std dev = 0.126, 112.000 (wgt'ed) examples reached here.  /* #neg=112 */
%   else return -0.07877675473109143;  // std dev = 2.13e-07, 371.000 (wgt'ed) examples reached here.  /* #neg=371 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.17805468952621561;  // std dev = 0.021, 269.000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.0740762088068578;  // std dev = 0.185, 153.000 (wgt'ed) examples reached here.  /* #neg=153 */
%   else return -0.07324622576333772;  // std dev = 0.000, 426.000 (wgt'ed) examples reached here.  /* #neg=426 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.15188267891202234;  // std dev = 0.397, 228.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=227 */
%   | else if ( genre(A, E) )
%   | | then return -0.06743874362489287;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.15261989671214746;  // std dev = 0.000, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   | | | else return -0.07060524368664126;  // std dev = 0.124, 111.000 (wgt'ed) examples reached here.  /* #neg=111 */
%   else return -0.0684269778442034;  // std dev = 0.000, 423.000 (wgt'ed) examples reached here.  /* #neg=423 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( genre(A, E) )
%   | | then return -0.27341995144809444;  // std dev = 7.45e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0.13490061608350346;  // std dev = 0.016, 227.000 (wgt'ed) examples reached here.  /* #pos=227 */
%   | else if ( genre(A, F) )
%   | | then return -0.06331920369782387;  // std dev = 8.33e-09, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.1339102478380446;  // std dev = 3.94e-08, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   | | | else return -0.06494560198023226;  // std dev = 0.091, 130.000 (wgt'ed) examples reached here.  /* #neg=130 */
%   else return -0.06419184008202586;  // std dev = 1.40e-07, 325.000 (wgt'ed) examples reached here.  /* #neg=325 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.06411
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.332 seconds
Total inference time: 0.88 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.065068
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.528 seconds
Refined model CLL: -0.065068


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.06411
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 7.022 seconds
Total inference time: 0.88 seconds
AUC ROC: 1.0
Total revision time: 7.022
Best scored revision CLL: -0.065068


Dataset: 4_cora_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 00:16:39
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.06411, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 7.022, 'Inference time': 0.88, 'parameter_0.8': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.119692, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 1.623, 'Inference time': 0.916}}


Amount of data: 1.0
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;haswordauthor(E, C).;true;true
7;true,true,true;author(F, E), title(F, D).;false;false
7;true,true,false;title(G, D), venue(G, B).;false;false
7;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
7;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
7;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, B).;false;true
8;true,true,false;title(F, D), venue(F, A).;false;false
8;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
8;true,false,false;haswordvenue(A, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
8;false,true;haswordauthor(M, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;true,true;author(F, E), venue(F, B).;true;true
9;true,true,true;samebib(F, G), venue(G, A).;false;false
9;true,true,false;author(H, E), venue(H, A).;false;false
9;true,false;haswordtitle(I, C).;true;true
9;true,false,true;title(J, I), venue(J, A).;false;false
9;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995086;  // std dev = 1.07e-06, 278.000 (wgt'ed) examples reached here.  /* #pos=278 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.12391470086527898;  // std dev = 6.582, 222.000 (wgt'ed) examples reached here.  /* #neg=163 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.1418510649004877;  // std dev = 0.000, 498.000 (wgt'ed) examples reached here.  /* #neg=498 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7164450321007808;  // std dev = 0.843, 279.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=278 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.10460768630155154;  // std dev = 6.598, 225.000 (wgt'ed) examples reached here.  /* #neg=166 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.1254446385283923;  // std dev = 0.000, 524.000 (wgt'ed) examples reached here.  /* #neg=524 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12378338924622975;  // std dev = 0.154, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else if ( movie(E, A) )
%   | | then return 0.3669990009261725;  // std dev = 0.367, 485.000 (wgt'ed) examples reached here.  /* #neg=148 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360592;  // std dev = 0.000, 467.000 (wgt'ed) examples reached here.  /* #neg=467 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4528115979499413;  // std dev = 1.486, 283.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=278 */
%   | else if ( genre(A, E) )
%   | | then return -0.10055445483195996;  // std dev = 5.27e-09, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.010136871861850418;  // std dev = 6.693, 245.000 (wgt'ed) examples reached here.  /* #neg=186 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783548;  // std dev = 1.50e-08, 481.000 (wgt'ed) examples reached here.  /* #neg=481 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1278140927702906;  // std dev = 0.358, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | else if ( genre(B, E) )
%   | | then return 0.3556248817130129;  // std dev = 5.26e-07, 278.000 (wgt'ed) examples reached here.  /* #pos=278 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.05815707559453053;  // std dev = 6.469, 203.000 (wgt'ed) examples reached here.  /* #neg=144 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926153;  // std dev = 0.000, 514.000 (wgt'ed) examples reached here.  /* #neg=514 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.27499968146701975;  // std dev = 0.765, 280.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=278 */
%   | else if ( movie(E, A) )
%   | | then return 0.0420762178621757;  // std dev = 0.440, 216.000 (wgt'ed) examples reached here.  /* #neg=157 #pos=59 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 1.38e-07, 471.000 (wgt'ed) examples reached here.  /* #neg=471 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.121235015792653;  // std dev = 0.307, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( genre(B, E) )
%   | | then return 0.22705262838590726;  // std dev = 2.67e-07, 278.000 (wgt'ed) examples reached here.  /* #pos=278 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.0548540609939067;  // std dev = 6.400, 193.000 (wgt'ed) examples reached here.  /* #neg=134 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109201;  // std dev = 0.000, 490.000 (wgt'ed) examples reached here.  /* #neg=490 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17943814606514105;  // std dev = 1.175, 284.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=278 */
%   | else if ( movie(E, B) )
%   | | then return -9.350322403808737E-4;  // std dev = 6.589, 238.000 (wgt'ed) examples reached here.  /* #neg=179 #pos=59 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.07324622576333698;  // std dev = 1.35e-07, 487.000 (wgt'ed) examples reached here.  /* #neg=487 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.15483364588238885;  // std dev = 1.102, 283.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=278 */
%   | else if ( genre(A, E) )
%   | | then return -0.0758903308991588;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.036866350709505454;  // std dev = 6.436, 198.000 (wgt'ed) examples reached here.  /* #neg=139 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420348;  // std dev = 0.000, 462.000 (wgt'ed) examples reached here.  /* #neg=462 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return -0.36908237276797473;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.1435203710705652;  // std dev = 1.66e-07, 278.000 (wgt'ed) examples reached here.  /* #pos=278 */
%   | | else if ( genre(A, G) )
%   | | | then return -0.0707364230909017;  // std dev = 7.45e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else return -1.0675041261958891E-4;  // std dev = 6.571, 220.000 (wgt'ed) examples reached here.  /* #neg=161 #pos=59 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.06419184008202543;  // std dev = 2.38e-07, 473.000 (wgt'ed) examples reached here.  /* #neg=473 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.129587
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.83 seconds
Total inference time: 0.855 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.978805
   AUC PR    = 0.865091
   CLL	      = -0.127679
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.824926
   F1        = 0.904065


Total scoring time: 1.855 seconds
Parameter learned model CLL: -0.127679


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 19, 0], 'true,false,true': [1.07e-06, 0, 278], 'true,false,false,true': [6.582, 163, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 498, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.843, 1, 278], 'true,false,true': [0.0, 22, 0], 'true,false,false,true': [6.598, 166, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 524, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.154, 20, 0], 'true,false,true': [0.367, 148, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 467, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.486, 5, 278], 'true,false,true': [5.27e-09, 17, 0], 'true,false,false,true': [6.693, 186, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.5e-08, 481, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.358, 22, 0], 'true,false,true': [5.26e-07, 0, 278], 'true,false,false,true': [6.469, 144, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 514, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.765, 2, 278], 'true,false,true': [0.44, 157, 59], 'true,false,false': [0.0, 0, 0], 'false,true': [1.38e-07, 471, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.307, 13, 0], 'true,false,true': [2.67e-07, 0, 278], 'true,false,false,true': [6.4, 134, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 490, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [1.175, 6, 278], 'true,false,true': [6.589, 179, 59], 'true,false,false': [0.0, 0, 0], 'false,true': [1.35e-07, 487, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [1.102, 5, 278], 'true,false,true': [5.27e-09, 12, 0], 'true,false,false,true': [6.436, 139, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 462, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true,true,false': 'genre(A, G)'}, {'true,true,true,true': [0.0, 4, 0], 'true,true,true,false': [1.66e-07, 0, 278], 'true,true,false,true': [7.45e-09, 15, 0], 'true,true,false,false': [6.571, 161, 59], 'true,false': [0.0, 0, 0], 'false': [2.38e-07, 473, 0]}]]
[{'': [0.2277018573587145, -2.140188963132832e-17], 'true': [0.0, 0.2197240000000026], 'true,false': [4.089454594302735e-15, 0.1951343235127025], 'true,false,false': [0.1951343235127025, nan], 'false': [-2.140188963132832e-17, nan]}, {'': [0.1857129360293595, -1.5593972254277007e-16], 'true': [0.0025495619334921274, 0.18052434415816998], 'true,false': [-2.523234146875356e-18, 0.19346172839506004], 'true,false,false': [0.19346172839506004, nan], 'false': [-1.5593972254277007e-16, nan]}, {'': [0.1388695558353238, -1.3313166890580036e-17], 'true': [0.0011834310823288952, 0.13500803300720418], 'true,false': [0.13500803300720418, nan], 'false': [-1.3313166890580036e-17, nan]}, {'': [0.137115564413654, 2.2527602329192367e-16], 'true': [0.007806413183030741, 0.1717046380998845], 'true,false': [1.6326809185664067e-18, 0.18282382340691172], 'true,false,false': [0.18282382340691172, nan], 'false': [2.2527602329192367e-16, nan]}, {'': [0.10945743372428003, -3.801541874202871e-17], 'true': [0.0058306559272610714, 0.10859478051006924], 'true,false': [9.968045573612915e-16, 0.2061685554126528], 'true,false,false': [0.2061685554126528, nan], 'false': [-3.801541874202871e-17, nan]}, {'': [0.09891297341293229, 4.054317627081251e-17], 'true': [0.00209171857712791, 0.19379512203323776], 'true,false': [0.19379512203323776, nan], 'false': [4.054317627081251e-17, nan]}, {'': [0.09382579338514861, -3.172065784643304e-17], 'true': [0.007255451606870313, 0.0941434816087109], 'true,false': [2.555909121439209e-16, 0.2122473086525804], 'true,false,false': [0.2122473086525804, nan], 'false': [-3.172065784643304e-17, nan]}, {'': [0.09388850475577205, 3.7387387276904655e-17], 'true': [0.0048614791346872415, 0.18242168103949488], 'true,false': [0.18242168103949488, nan], 'false': [3.7387387276904655e-17, nan]}, {'': [0.0905562429365225, -1.2399893521787462e-16], 'true': [0.004294525553603597, 0.19791925014880105], 'true,false': [2.3129646346357427e-18, 0.20918783797571694], 'true,false,false': [0.20918783797571694, nan], 'false': [-1.2399893521787462e-16, nan]}, {'': [0.09057436638205374, 1.2017636122792393e-16], 'true': [0.09057436638205374, nan], 'true,true': [0.003674247638018429, 0.18403116900128352], 'true,true,false': [3.7007434154171884e-18, 0.19626033057851383], 'true,true,true': [0.0, 9.904147845576936e-17]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, E).;true;true
9;true,true;genre(A, F).;true;true
9;true,false;genre(A, G).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995086;  // std dev = 1.07e-06, 278.000 (wgt'ed) examples reached here.  /* #pos=278 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.8581489350995125;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.1418510649004882;  // std dev = 0.000, 170.000 (wgt'ed) examples reached here.  /* #neg=170 */
%   else return -0.14185106490048763;  // std dev = 5.96e-08, 491.000 (wgt'ed) examples reached here.  /* #neg=491 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.7194734122109551;  // std dev = 0.000, 111.000 (wgt'ed) examples reached here.  /* #pos=111 */
%   | | else return 0.6997092472813811;  // std dev = 0.128, 171.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=167 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 7.45e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.7194734122109543;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.1254446385283915;  // std dev = 0.000, 178.000 (wgt'ed) examples reached here.  /* #neg=178 */
%   else return -0.12544463852839235;  // std dev = 0.000, 498.000 (wgt'ed) examples reached here.  /* #neg=498 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.13771342665508046;  // std dev = 0.220, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | else if ( actor(A), director(B) )
%   | | then return 0.5577822191545396;  // std dev = 0.045, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | | else return -0.11231637819360628;  // std dev = 8.43e-08, 159.000 (wgt'ed) examples reached here.  /* #neg=159 */
%   else return -0.11231637819360579;  // std dev = 0.000, 506.000 (wgt'ed) examples reached here.  /* #neg=506 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.41692619289568184;  // std dev = 1.79e-07, 111.000 (wgt'ed) examples reached here.  /* #pos=111 */
%   | | else return 0.40717084254888286;  // std dev = 0.094, 171.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=167 */
%   | else if ( genre(A, E) )
%   | | then return -0.09930156857025775;  // std dev = 5.27e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.4169261928956809;  // std dev = 1.03e-07, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.10159632948783642;  // std dev = 0.000, 141.000 (wgt'ed) examples reached here.  /* #neg=141 */
%   else return -0.10159632948783533;  // std dev = 3.65e-07, 514.000 (wgt'ed) examples reached here.  /* #neg=514 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( actor(B) )
%   | | then return -0.09076657950943709;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else return -0.27434576747284234;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.32419464588453223;  // std dev = 0.053, 278.000 (wgt'ed) examples reached here.  /* #pos=278 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.32031365226348985;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.09269127618926072;  // std dev = 7.30e-08, 147.000 (wgt'ed) examples reached here.  /* #neg=147 */
%   else return -0.09269127618926157;  // std dev = 0.000, 526.000 (wgt'ed) examples reached here.  /* #neg=526 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.2541641144389039;  // std dev = 1.07e-07, 111.000 (wgt'ed) examples reached here.  /* #pos=111 */
%   | | else return 0.24850186716922443;  // std dev = 0.073, 171.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=167 */
%   | else if ( actor(A), director(B) )
%   | | then return 0.25490051556459126;  // std dev = 5.58e-08, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | else return -0.0850385255410703;  // std dev = 0.006, 179.000 (wgt'ed) examples reached here.  /* #neg=179 */
%   else return -0.08518475138839678;  // std dev = 1.41e-07, 483.000 (wgt'ed) examples reached here.  /* #neg=483 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( actor(B) )
%   | | then return -0.07726394559671165;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else return -0.26923087312861216;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.2125755761117846;  // std dev = 0.048, 278.000 (wgt'ed) examples reached here.  /* #pos=278 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.2095657530131198;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.07878736713742812;  // std dev = 0.000, 160.000 (wgt'ed) examples reached here.  /* #neg=160 */
%   else return -0.07877675473109197;  // std dev = 0.000, 482.000 (wgt'ed) examples reached here.  /* #neg=482 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.1787757109595988;  // std dev = 0.045, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.07401308052792392;  // std dev = 0.146, 174.000 (wgt'ed) examples reached here.  /* #neg=174 */
%   else return -0.07324622576333664;  // std dev = 2.24e-07, 561.000 (wgt'ed) examples reached here.  /* #neg=561 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.15160848157955797;  // std dev = 0.000, 111.000 (wgt'ed) examples reached here.  /* #pos=111 */
%   | | else return 0.14977626871292896;  // std dev = 0.048, 170.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=167 */
%   | else if ( genre(A, E) )
%   | | then return -0.06714515573089343;  // std dev = 6.45e-09, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.15240178157709017;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.06838675049898427;  // std dev = 2.58e-08, 150.000 (wgt'ed) examples reached here.  /* #neg=150 */
%   else return -0.0684269778442036;  // std dev = 0.000, 531.000 (wgt'ed) examples reached here.  /* #neg=531 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( genre(A, E) )
%   | | then return -0.23290214516686203;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.13572095704162274;  // std dev = 0.035, 278.000 (wgt'ed) examples reached here.  /* #pos=278 */
%   | else if ( genre(A, F) )
%   | | then return -0.06305968132593158;  // std dev = 3.73e-09, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.13373991949156294;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.0641563462780345;  // std dev = 3.33e-08, 159.000 (wgt'ed) examples reached here.  /* #neg=159 */
%   else return -0.06419184008202534;  // std dev = 2.47e-07, 523.000 (wgt'ed) examples reached here.  /* #neg=523 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064182
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.839 seconds
Total inference time: 0.875 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064861
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.851 seconds
Refined model CLL: -0.064861


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064182
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 8.375 seconds
Total inference time: 0.875 seconds
AUC ROC: 1.0
Total revision time: 8.375
Best scored revision CLL: -0.064861


Dataset: 4_cora_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 00:16:50
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.064182, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 8.375, 'Inference time': 0.875, 'parameter_1.0': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.129587, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 1.83, 'Inference time': 0.855}}


Starting fold 5

Target train facts examples: 915
Target train pos examples: 337
Target train neg examples: 12165

Target test facts examples: 163
Target test pos	 examples: 45
Target test neg examples: 2071

Amount of data: 0.2
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;haswordauthor(E, C).;true;true
7;true,true,true;author(F, E), title(F, D).;false;false
7;true,true,false;title(G, D), venue(G, B).;false;false
7;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
7;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
7;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, B).;false;true
8;true,true,false;title(F, D), venue(F, A).;false;false
8;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
8;true,false,false;haswordvenue(A, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
8;false,true;haswordauthor(M, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;true,true;author(F, E), venue(F, B).;true;true
9;true,true,true;samebib(F, G), venue(G, A).;false;false
9;true,true,false;author(H, E), venue(H, A).;false;false
9;true,false;haswordtitle(I, C).;true;true
9;true,false,true;title(J, I), venue(J, A).;false;false
9;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.1914822684328457;  // std dev = 2.944, 39.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=13 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048766;  // std dev = 7.88e-08, 84.000 (wgt'ed) examples reached here.  /* #neg=84 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109545;  // std dev = 0.000, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.11581418688372262;  // std dev = 3.054, 46.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=13 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839136;  // std dev = 0.000, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( movie(E, A) )
%   | | then return 0.37332231392173815;  // std dev = 0.370, 95.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=67 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.1123163781936062;  // std dev = 8.43e-08, 105.000 (wgt'ed) examples reached here.  /* #neg=105 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4501404247950253;  // std dev = 0.665, 55.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=54 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.03648261872367926;  // std dev = 3.054, 46.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=13 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783626;  // std dev = 4.75e-09, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926096;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.35409548244569533;  // std dev = 0.000, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.029650822380837643;  // std dev = 3.054, 46.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=13 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926108;  // std dev = 0.000, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.27784416221398434;  // std dev = 0.000, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | else if ( movie(E, A) )
%   | | then return -0.009626129556025735;  // std dev = 0.420, 55.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=13 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839682;  // std dev = 5.67e-08, 102.000 (wgt'ed) examples reached here.  /* #neg=102 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08443759260814943;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.22565246561934002;  // std dev = 0.000, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.03212826071762921;  // std dev = 3.040, 45.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=13 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109161;  // std dev = 5.16e-08, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17073533654311676;  // std dev = 0.697, 56.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=54 */
%   | else if ( movie(E, B) )
%   | | then return 7.565270254267253E-4;  // std dev = 3.091, 50.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=13 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.07324622576333707;  // std dev = 0.000, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1545424442872559;  // std dev = 0.511, 55.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=54 */
%   | else if ( genre(A, E) )
%   | | then return -0.07818931412395139;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.1192667299132543;  // std dev = 2.834, 34.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=13 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420265;  // std dev = 4.56e-09, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.1438154612243175;  // std dev = 5.58e-08, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | | else if ( genre(A, G) )
%   | | | then return -0.07273638244594142;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.0020368545949613114;  // std dev = 3.040, 45.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=13 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.06419184008202626;  // std dev = 0.000, 91.000 (wgt'ed) examples reached here.  /* #neg=91 */


Results
   AUC ROC   = 0.971565
   AUC PR    = 0.823063
   CLL	      = -0.138383
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.777778
   F1        = 0.875


Total learning time: 0.857 seconds
Total inference time: 0.87 seconds
AUC ROC: 0.971565


Results scoring model
   AUC ROC   = 0.974321
   AUC PR    = 0.84759
   CLL	      = -0.140469
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.80597
   F1        = 0.892562


Total scoring time: 1.033 seconds
Parameter learned model CLL: -0.140469


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 6, 0], 'true,false,true': [0.0, 0, 54], 'true,false,false,true': [2.944, 26, 13], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.88e-08, 84, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 54], 'true,false,true': [0.0, 4, 0], 'true,false,false,true': [3.054, 33, 13], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 103, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 2, 0], 'true,false,true': [0.37, 28, 67], 'true,false,false': [0.0, 0, 0], 'false,true': [8.43e-08, 105, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.665, 1, 54], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [3.054, 33, 13], 'true,false,false,false': [0.0, 0, 0], 'false,true': [4.75e-09, 95, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 2, 0], 'true,false,true': [0.0, 0, 54], 'true,false,false,true': [3.054, 33, 13], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 86, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 54], 'true,false,true': [0.42, 42, 13], 'true,false,false': [0.0, 0, 0], 'false,true': [5.67e-08, 102, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 3, 0], 'true,false,true': [0.0, 0, 54], 'true,false,false,true': [3.04, 32, 13], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.16e-08, 90, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.697, 2, 54], 'true,false,true': [3.091, 37, 13], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 92, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.511, 1, 54], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [2.834, 21, 13], 'true,false,false,false': [0.0, 0, 0], 'false,true': [4.56e-09, 88, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true,true,false': 'genre(A, G)'}, {'true,true,true,true': [0.0, 0, 0], 'true,true,true,false': [5.58e-08, 0, 54], 'true,true,false,true': [0.0, 3, 0], 'true,true,false,false': [3.04, 32, 13], 'true,false': [0.0, 0, 0], 'false': [0.0, 91, 0]}]]
[{'': [0.21875318845015737, 7.401486830834377e-17], 'true': [-6.938893903907228e-18, 0.20141056769568647], 'true,false': [0.0, 0.2222222222222217], 'true,false,false': [0.2222222222222217, nan], 'false': [7.401486830834377e-17, nan]}, {'': [0.18860975227872437, -1.0778864316749092e-17], 'true': [-3.289549702593056e-16, 0.190805687544202], 'true,false': [0.0, 0.20274102079395057], 'true,false,false': [0.20274102079395057, nan], 'false': [-1.0778864316749092e-17, nan]}, {'': [0.13903672574706977, 6.767073673905717e-17], 'true': [0.0, 0.13710103245698038], 'true,false': [0.13710103245698038, nan], 'false': [6.767073673905717e-17, nan]}, {'': [0.1390664977897209, 2.337311630789803e-17], 'true': [0.008030636821614933, 0.19882440632400417], 'true,false': [0.0, 0.20274102079395098], 'true,false,false': [0.20274102079395098, nan], 'false': [2.337311630789803e-17, nan]}, {'': [0.11876905901613637, 0.0], 'true': [0.0, 0.11940853098645608], 'true,false': [-1.3158198810372225e-16, 0.20274102079395087], 'true,false,false': [0.20274102079395087, nan], 'false': [0.0, nan]}, {'': [0.10974889751697241, 3.1565164425617195e-17], 'true': [-1.809252336426181e-16, 0.17656185496374555], 'true,false': [0.17656185496374555, nan], 'false': [3.1565164425617195e-17, nan]}, {'': [0.10105270446969537, 2.960594732333751e-17], 'true': [0.0, 0.10266375180647876], 'true,false': [-1.644774851296528e-16, 0.20543209876543184], 'true,false,false': [0.20543209876543184, nan], 'false': [2.960594732333751e-17, nan]}, {'': [0.10195189145063203, -7.84396702180817e-18], 'true': [0.008684344687624452, 0.19114742535007917], 'true,false': [0.19114742535007917, nan], 'false': [-7.84396702180817e-18, nan]}, {'': [0.09293072040318463, 2.0185873175002847e-17], 'true': [0.004739423659319868, 0.23049390530760663], 'true,false': [0.0, 0.23615916955017321], 'true,false,false': [0.23615916955017321, nan], 'false': [2.0185873175002847e-17, nan]}, {'': [0.09612946136105151, -1.342027831964475e-17], 'true': [0.09612946136105151, nan], 'true,true': [5.756711979537848e-17, 0.1929201924154973], 'true,true,false': [0.0, 0.20543209876543195], 'true,true,true': [nan, 5.756711979537848e-17]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, E).;true;true
9;true,false;genre(A, G).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return -0.14185106490048774;  // std dev = 2.58e-08, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   else return -0.14185106490048763;  // std dev = 8.30e-08, 89.000 (wgt'ed) examples reached here.  /* #neg=89 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109545;  // std dev = 0.000, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( actor(B) )
%   | | | then return -0.12544463852839138;  // std dev = 0.000, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | | | else return 0.7194734122109542;  // std dev = 4.21e-08, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else return -0.12544463852839147;  // std dev = 0.000, 81.000 (wgt'ed) examples reached here.  /* #neg=81 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1583971463372329;  // std dev = 0.126, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( director(B), actor(A) )
%   | | then return 0.5553664367462837;  // std dev = 2.06e-07, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | | else return -0.11889934507126736;  // std dev = 0.158, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   else return -0.1123163781936062;  // std dev = 7.74e-08, 96.000 (wgt'ed) examples reached here.  /* #neg=96 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.4175135841583098;  // std dev = 5.16e-08, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else return 0.3865936753274947;  // std dev = 0.135, 40.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=38 */
%   | else if ( genre(A, E) )
%   | | then return -0.0974668720689669;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( actor(B) )
%   | | | then return -0.1009970462678935;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | | | else return 0.41751358415831025;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else return -0.10159632948783627;  // std dev = 4.21e-08, 98.000 (wgt'ed) examples reached here.  /* #neg=98 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08922295982620519;  // std dev = 1.86e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.3254780940517108;  // std dev = 0.023, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | | else if ( actor(B) )
%   | | | then return -0.09218927574273084;  // std dev = 1.49e-08, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | | | else return 0.3207118471601497;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else return -0.09269127618926101;  // std dev = 3.33e-08, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.2542674302388993;  // std dev = 2.98e-08, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else return 0.2470199400706308;  // std dev = 0.081, 39.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=38 */
%   | else if ( director(B), actor(A) )
%   | | then return 0.2551722425694894;  // std dev = 2.11e-08, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return -0.0926005554313548;  // std dev = 0.265, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   else return -0.0851847513883968;  // std dev = 6.14e-08, 113.000 (wgt'ed) examples reached here.  /* #neg=113 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.18890322267666987;  // std dev = 0.227, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.21360975980312513;  // std dev = 0.021, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.20975771563253567;  // std dev = 2.11e-08, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return -0.08512958663942992;  // std dev = 0.251, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   else return -0.07877675473109158;  // std dev = 6.23e-08, 107.000 (wgt'ed) examples reached here.  /* #neg=107 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.17937068234828757;  // std dev = 0.021, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else if ( actor(A) )
%   | | then return -0.07195017793275717;  // std dev = 1.39e-08, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | else return -0.13858174499566447;  // std dev = 0.263, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.07324622576333707;  // std dev = 0.000, 93.000 (wgt'ed) examples reached here.  /* #neg=93 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.15145580094844918;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else return 0.1463138790030489;  // std dev = 0.062, 39.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=38 */
%   | else if ( genre(A, E) )
%   | | then return -0.05559466532050884;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( actor(B) )
%   | | | then return -0.06696185700517084;  // std dev = 0.007, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | | | else return 0.15244978101732842;  // std dev = 7.45e-09, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else return -0.06842697784420265;  // std dev = 4.71e-08, 99.000 (wgt'ed) examples reached here.  /* #neg=99 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1365711924623889;  // std dev = 0.017, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | else if ( genre(A, E) )
%   | | then return -0.05274682253395859;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( actor(B) )
%   | | | then return -0.06307625032835491;  // std dev = 0.004, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | | else return 0.1337774067050002;  // std dev = 1.49e-08, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else return -0.06419184008202626;  // std dev = 0.000, 91.000 (wgt'ed) examples reached here.  /* #neg=91 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063754
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.334 seconds
Total inference time: 0.867 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.067301
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.912 seconds
Refined model CLL: -0.067301


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063754
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 4.136 seconds
Total inference time: 0.867 seconds
AUC ROC: 1.0
Total revision time: 4.136
Best scored revision CLL: -0.067301


Dataset: 4_cora_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 00:16:57
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063754, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 4.136, 'Inference time': 0.867, 'parameter_0.2': {'AUC ROC': 0.971565, 'AUC PR': 0.823063, 'CLL': -0.138383, 'Precision': [1.0, 0.5], 'Recall': 0.777778, 'F1': 0.875, 'Learning time': 0.857, 'Inference time': 0.87}}


Amount of data: 0.4
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;haswordauthor(E, C).;true;true
7;true,true,true;author(F, E), title(F, D).;false;false
7;true,true,false;title(G, D), venue(G, B).;false;false
7;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
7;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
7;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, B).;false;true
8;true,true,false;title(F, D), venue(F, A).;false;false
8;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
8;true,false,false;haswordvenue(A, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
8;false,true;haswordauthor(M, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;true,true;author(F, E), venue(F, B).;true;true
9;true,true,true;samebib(F, G), venue(G, A).;false;false
9;true,true,false;author(H, E), venue(H, A).;false;false
9;true,false;haswordtitle(I, C).;true;true
9;true,false,true;title(J, I), venue(J, A).;false;false
9;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995108;  // std dev = 5.96e-07, 114.000 (wgt'ed) examples reached here.  /* #pos=114 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.12841920536978244;  // std dev = 3.820, 74.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=20 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048832;  // std dev = 0.000, 184.000 (wgt'ed) examples reached here.  /* #neg=184 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7049058596120008;  // std dev = 1.185, 116.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=114 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.10494436306582562;  // std dev = 3.839, 76.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=20 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839166;  // std dev = 0.000, 201.000 (wgt'ed) examples reached here.  /* #neg=201 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1203629343608794;  // std dev = 0.109, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else if ( movie(E, A) )
%   | | then return 0.3687114968250457;  // std dev = 0.362, 191.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=134 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360653;  // std dev = 0.000, 188.000 (wgt'ed) examples reached here.  /* #neg=188 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4612644051035459;  // std dev = 0.669, 115.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=114 */
%   | else if ( genre(A, E) )
%   | | then return -0.10086423485623773;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.004571837472797879;  // std dev = 3.931, 88.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=20 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.1015963294878365;  // std dev = 0.000, 190.000 (wgt'ed) examples reached here.  /* #neg=190 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.0920779628188355;  // std dev = 3.73e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(B, E) )
%   | | then return 0.3559397743076568;  // std dev = 0.000, 114.000 (wgt'ed) examples reached here.  /* #pos=114 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.009932502999674938;  // std dev = 3.896, 83.000 (wgt'ed) examples reached here.  /* #neg=63 #pos=20 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926062;  // std dev = 8.30e-08, 172.000 (wgt'ed) examples reached here.  /* #neg=172 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.27430604481679133;  // std dev = 0.548, 115.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=114 */
%   | else if ( movie(E, A) )
%   | | then return 0.024226232611603025;  // std dev = 0.421, 83.000 (wgt'ed) examples reached here.  /* #neg=63 #pos=20 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 7.15e-08, 179.000 (wgt'ed) examples reached here.  /* #neg=179 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12692639240510176;  // std dev = 0.313, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else if ( genre(B, E) )
%   | | then return 0.22736035871518115;  // std dev = 0.000, 114.000 (wgt'ed) examples reached here.  /* #pos=114 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.022101759896857396;  // std dev = 3.962, 93.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=20 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109147;  // std dev = 7.45e-08, 193.000 (wgt'ed) examples reached here.  /* #neg=193 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17730659300784302;  // std dev = 0.840, 117.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=114 */
%   | else if ( movie(E, B) )
%   | | then return 0.00567851239109038;  // std dev = 3.893, 87.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=20 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.0732462257633367;  // std dev = 1.05e-07, 181.000 (wgt'ed) examples reached here.  /* #neg=181 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.16411228036237951;  // std dev = 0.000, 114.000 (wgt'ed) examples reached here.  /* #pos=114 */
%   | else if ( genre(A, E) )
%   | | then return -0.07744189244849518;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.028011617877462827;  // std dev = 3.985, 97.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=20 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420262;  // std dev = 5.74e-09, 183.000 (wgt'ed) examples reached here.  /* #neg=183 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return -0.37769973916703303;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return 0.14282086768089597;  // std dev = 0.000, 114.000 (wgt'ed) examples reached here.  /* #pos=114 */
%   | | else if ( genre(A, G) )
%   | | | then return -0.07208699198474626;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.033947109066462054;  // std dev = 3.839, 76.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=20 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.06419184008202626;  // std dev = 0.000, 194.000 (wgt'ed) examples reached here.  /* #neg=194 */


Results
   AUC ROC   = 0.971565
   AUC PR    = 0.823063
   CLL	      = -0.121661
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.777778
   F1        = 0.875


Total learning time: 1.112 seconds
Total inference time: 0.889 seconds
AUC ROC: 0.971565


Results scoring model
   AUC ROC   = 0.981198
   AUC PR    = 0.884731
   CLL	      = -0.119455
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.850746
   F1        = 0.919355


Total scoring time: 1.181 seconds
Parameter learned model CLL: -0.119455


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 9, 0], 'true,false,true': [5.96e-07, 0, 114], 'true,false,false,true': [3.82, 54, 20], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 184, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.185, 2, 114], 'true,false,true': [0.0, 7, 0], 'true,false,false,true': [3.839, 56, 20], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 201, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.109, 14, 0], 'true,false,true': [0.362, 57, 134], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 188, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.669, 1, 114], 'true,false,true': [0.0, 7, 0], 'true,false,false,true': [3.931, 68, 20], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 190, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [3.73e-09, 6, 0], 'true,false,true': [0.0, 0, 114], 'true,false,false,true': [3.896, 63, 20], 'true,false,false,false': [0.0, 0, 0], 'false,true': [8.3e-08, 172, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.548, 1, 114], 'true,false,true': [0.421, 63, 20], 'true,false,false': [0.0, 0, 0], 'false,true': [7.15e-08, 179, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.313, 12, 0], 'true,false,true': [0.0, 0, 114], 'true,false,false,true': [3.962, 73, 20], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.45e-08, 193, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.84, 3, 114], 'true,false,true': [3.893, 67, 20], 'true,false,false': [0.0, 0, 0], 'false,true': [1.05e-07, 181, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 114], 'true,false,true': [0.0, 7, 0], 'true,false,false,true': [3.985, 77, 20], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.74e-09, 183, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true,true,false': 'genre(A, G)'}, {'true,true,true,true': [0.0, 2, 0], 'true,true,true,false': [0.0, 0, 114], 'true,true,false,true': [0.0, 4, 0], 'true,true,false,false': [3.839, 56, 20], 'true,false': [0.0, 0, 0], 'false': [0.0, 194, 0]}]]
[{'': [0.2175268623257537, -2.0756343503861623e-16], 'true': [-9.25185853854297e-18, 0.20473064735174745], 'true,false': [3.1164155077197375e-15, 0.19722425127830484], 'true,false,false': [0.19722425127830484, nan], 'false': [-2.0756343503861623e-16, nan]}, {'': [0.1760892343611987, -3.5350384863686576e-17], 'true': [0.012096174557227125, 0.1816513240978972], 'true,false': [-1.982541115402065e-18, 0.19390581717451577], 'true,false,false': [0.19390581717451577, nan], 'false': [-3.5350384863686576e-17, nan]}, {'': [0.1374250042517421, -2.598394312952494e-17], 'true': [0.0008417118599900543, 0.13110115876577585], 'true,false': [0.13110115876577585, nan], 'false': [-2.598394312952494e-17, nan]}, {'': [0.13141857485491854, -9.349246523159212e-17], 'true': [0.0038901709177805366, 0.16331230019621326], 'true,false': [0.0, 0.1756198347107432], 'true,false,false': [0.1756198347107432, nan], 'false': [-9.349246523159212e-17, nan]}, {'': [0.10572840427625135, 4.0019667166720756e-17], 'true': [2.3129646346357427e-18, 0.10624862306452582], 'true,false': [-6.077010240053489e-16, 0.1829002758020028], 'true,false,false': [0.1829002758020028, nan], 'false': [4.0019667166720756e-17, nan]}, {'': [0.09105773629845132, 2.8530871023886705e-17], 'true': [0.002611119865266354, 0.17728056650612006], 'true,false': [0.17728056650612006, nan], 'false': [2.8530871023886705e-17, nan]}, {'': [0.08972341515499539, 2.8762254523967783e-17], 'true': [0.008147059842695058, 0.09123793268103393], 'true,false': [-4.674623261579606e-17, 0.16880564227078318], 'true,false,false': [0.16880564227078318, nan], 'false': [2.8762254523967783e-17, nan]}, {'': [0.08496829658028911, 6.072490576679034e-17], 'true': [0.006029985290207469, 0.1742327192677848], 'true,false': [0.1742327192677848, nan], 'false': [6.072490576679034e-17, nan]}, {'': [0.08243035916870738, 3.2154000166739505e-17], 'true': [-3.895519384649672e-17, 0.1528100089364414], 'true,false': [-1.982541115402065e-18, 0.16367307896694694], 'true,false,false': [0.16367307896694694, nan], 'false': [3.2154000166739505e-17, nan]}, {'': [0.08079646480209436, -2.8613995480029806e-18], 'true': [0.08079646480209436, nan], 'true,true': [0.00459086712923304, 0.18474457976861194], 'true,true,false': [0.0, 0.1939058171745151], 'true,true,true': [0.0, -6.622382953904442e-17]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, E).;true;true
9;true,true;genre(A, F).;true;true
9;true,false;genre(A, G).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995108;  // std dev = 5.96e-07, 114.000 (wgt'ed) examples reached here.  /* #pos=114 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return -0.14185106490048766;  // std dev = 6.66e-08, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
%   else return -0.1418510649004885;  // std dev = 0.000, 217.000 (wgt'ed) examples reached here.  /* #neg=217 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.7194734122109551;  // std dev = 0.000, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | else return 0.6975274888151268;  // std dev = 0.134, 77.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=75 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( actor(B) )
%   | | | then return -0.1254446385283916;  // std dev = 0.000, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   | | | else return 0.7194734122109543;  // std dev = 7.30e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.1254446385283917;  // std dev = 0.000, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.13706480559008374;  // std dev = 0.139, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( actor(A), director(B) )
%   | | then return 0.5583957724991495;  // std dev = 0.031, 134.000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | | else return -0.11615644220557517;  // std dev = 0.160, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   else return -0.11231637819360656;  // std dev = 0.000, 193.000 (wgt'ed) examples reached here.  /* #neg=193 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.4167770464558096;  // std dev = 0.000, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | else return 0.41392492720610286;  // std dev = 0.071, 76.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=75 */
%   | else if ( genre(A, E) )
%   | | then return -0.09935959681542594;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( actor(B) )
%   | | | then return -0.10124636534498836;  // std dev = 0.000, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   | | | else return 0.4167770464558095;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.10159632948783653;  // std dev = 0.000, 204.000 (wgt'ed) examples reached here.  /* #neg=204 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( female(B) )
%   | | then return -0.090815331739658;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.13695809333872216;  // std dev = 0.160, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.32377955683635307;  // std dev = 0.027, 114.000 (wgt'ed) examples reached here.  /* #pos=114 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.3202125533665618;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return -0.09554902699082476;  // std dev = 0.191, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
%   else return -0.09269127618926055;  // std dev = 4.94e-08, 185.000 (wgt'ed) examples reached here.  /* #neg=185 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2569027754660536;  // std dev = 0.026, 134.000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else if ( actor(B) )
%   | | then return -0.08438491598377097;  // std dev = 0.009, 74.000 (wgt'ed) examples reached here.  /* #neg=74 */
%   | | else return -0.24891234658519001;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.08518475138839678;  // std dev = 7.60e-08, 200.000 (wgt'ed) examples reached here.  /* #neg=200 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12724807909810362;  // std dev = 0.143, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(B, E) )
%   | | then return 0.211297342999123;  // std dev = 0.021, 114.000 (wgt'ed) examples reached here.  /* #pos=114 */
%   | | else if ( actor(B) )
%   | | | then return -0.0783750695888777;  // std dev = 1.05e-08, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   | | | else return 0.20917417075870937;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.07877675473109146;  // std dev = 8.16e-08, 182.000 (wgt'ed) examples reached here.  /* #neg=182 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1779931679628017;  // std dev = 0.019, 134.000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else if ( actor(A) )
%   | | then return -0.07289765292618801;  // std dev = 1.29e-08, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
%   | | else if ( female(B) )
%   | | | then return -0.06957351783356831;  // std dev = 0.004, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return -0.14372691127300935;  // std dev = 0.164, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.07324622576333668;  // std dev = 1.08e-07, 185.000 (wgt'ed) examples reached here.  /* #neg=185 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.15151497001807704;  // std dev = 0.000, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | else return 0.1464359860176443;  // std dev = 0.051, 77.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=75 */
%   | else if ( genre(A, E) )
%   | | then return -0.058685543218001984;  // std dev = 0.006, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( actor(B) )
%   | | | then return -0.06812548606942134;  // std dev = 0.000209, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   | | | else return 0.15224794013217974;  // std dev = 1.49e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.06842697784420261;  // std dev = 5.37e-08, 169.000 (wgt'ed) examples reached here.  /* #neg=169 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( genre(A, E) )
%   | | then return -0.18574892037330992;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return 0.13533910611946592;  // std dev = 0.018, 114.000 (wgt'ed) examples reached here.  /* #pos=114 */
%   | else if ( genre(A, F) )
%   | | then return -0.05740789357152714;  // std dev = 0.011, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.13361975538095644;  // std dev = 1.83e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return -0.06936076423293466;  // std dev = 0.273, 72.000 (wgt'ed) examples reached here.  /* #neg=72 */
%   else return -0.06419184008202626;  // std dev = 0.000, 201.000 (wgt'ed) examples reached here.  /* #neg=201 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063684
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.737 seconds
Total inference time: 0.878 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.065253
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.115 seconds
Refined model CLL: -0.065253


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063684
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 5.1450000000000005 seconds
Total inference time: 0.878 seconds
AUC ROC: 1.0
Total revision time: 5.1450000000000005
Best scored revision CLL: -0.065253


Dataset: 4_cora_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 00:17:04
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063684, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 5.1450000000000005, 'Inference time': 0.878, 'parameter_0.4': {'AUC ROC': 0.971565, 'AUC PR': 0.823063, 'CLL': -0.121661, 'Precision': [1.0, 0.5], 'Recall': 0.777778, 'F1': 0.875, 'Learning time': 1.112, 'Inference time': 0.889}}


Amount of data: 0.6
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;haswordauthor(E, C).;true;true
7;true,true,true;author(F, E), title(F, D).;false;false
7;true,true,false;title(G, D), venue(G, B).;false;false
7;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
7;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
7;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, B).;false;true
8;true,true,false;title(F, D), venue(F, A).;false;false
8;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
8;true,false,false;haswordvenue(A, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
8;false,true;haswordauthor(M, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;true,true;author(F, E), venue(F, B).;true;true
9;true,true,true;samebib(F, G), venue(G, A).;false;false
9;true,true,false;author(H, E), venue(H, A).;false;false
9;true,false;haswordtitle(I, C).;true;true
9;true,false,true;title(J, I), venue(J, A).;false;false
9;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995095;  // std dev = 1.09e-06, 173.000 (wgt'ed) examples reached here.  /* #pos=173 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.09014893509951136;  // std dev = 4.719, 125.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=29 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.1418510649004878;  // std dev = 1.15e-07, 305.000 (wgt'ed) examples reached here.  /* #neg=305 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.705071399982445;  // std dev = 1.451, 176.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=173 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.08848363233738642;  // std dev = 4.690, 120.000 (wgt'ed) examples reached here.  /* #neg=91 #pos=29 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.1254446385283919;  // std dev = 0.000, 269.000 (wgt'ed) examples reached here.  /* #neg=269 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14361655898786307;  // std dev = 0.214, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else if ( movie(E, A) )
%   | | then return 0.34741211495215335;  // std dev = 0.367, 301.000 (wgt'ed) examples reached here.  /* #neg=99 #pos=202 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360697;  // std dev = 0.000, 276.000 (wgt'ed) examples reached here.  /* #neg=276 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4685004342804107;  // std dev = 0.671, 174.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=173 */
%   | else if ( genre(A, E) )
%   | | then return -0.09877483533808017;  // std dev = 3.73e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.04034765259024379;  // std dev = 4.636, 112.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=29 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783655;  // std dev = 0.000, 322.000 (wgt'ed) examples reached here.  /* #neg=322 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.15575325302664;  // std dev = 0.227, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(B, E) )
%   | | then return 0.35913214136954974;  // std dev = 3.21e-07, 173.000 (wgt'ed) examples reached here.  /* #pos=173 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.00247370071668705;  // std dev = 4.747, 130.000 (wgt'ed) examples reached here.  /* #neg=101 #pos=29 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926044;  // std dev = 1.79e-07, 308.000 (wgt'ed) examples reached here.  /* #neg=308 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2720957956617852;  // std dev = 0.922, 176.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=173 */
%   | else if ( movie(E, A) )
%   | | then return 0.017450932840568357;  // std dev = 0.418, 125.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=29 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 1.03e-07, 298.000 (wgt'ed) examples reached here.  /* #neg=298 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14269256397130534;  // std dev = 0.342, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( genre(B, E) )
%   | | then return 0.22963721400026796;  // std dev = 1.40e-07, 173.000 (wgt'ed) examples reached here.  /* #pos=173 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.0019811714135070315;  // std dev = 4.725, 126.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=29 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109143;  // std dev = 2.11e-08, 318.000 (wgt'ed) examples reached here.  /* #neg=318 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1861422188619228;  // std dev = 0.665, 175.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=173 */
%   | else if ( movie(E, B) )
%   | | then return 0.00919331867836927;  // std dev = 4.694, 126.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=29 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.07324622576333698;  // std dev = 9.66e-08, 301.000 (wgt'ed) examples reached here.  /* #neg=301 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.16435979399619527;  // std dev = 1.88e-07, 173.000 (wgt'ed) examples reached here.  /* #pos=173 */
%   | else if ( genre(A, E) )
%   | | then return -0.07033932238364114;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.011515164592406032;  // std dev = 4.690, 120.000 (wgt'ed) examples reached here.  /* #neg=91 #pos=29 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420299;  // std dev = 0.000, 298.000 (wgt'ed) examples reached here.  /* #neg=298 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.14301142705197742;  // std dev = 7.88e-08, 173.000 (wgt'ed) examples reached here.  /* #pos=173 */
%   | | else if ( genre(A, G) )
%   | | | then return -0.06587643193112314;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return -0.014153003677899506;  // std dev = 4.762, 133.000 (wgt'ed) examples reached here.  /* #neg=104 #pos=29 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.06419184008202589;  // std dev = 1.31e-07, 314.000 (wgt'ed) examples reached here.  /* #neg=314 */


Results
   AUC ROC   = 0.971565
   AUC PR    = 0.823063
   CLL	      = -0.119962
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.777778
   F1        = 0.875


Total learning time: 1.426 seconds
Total inference time: 0.888 seconds
AUC ROC: 0.971565


Results scoring model
   AUC ROC   = 0.982022
   AUC PR    = 0.889323
   CLL	      = -0.117803
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.856436
   F1        = 0.922667


Total scoring time: 1.462 seconds
Parameter learned model CLL: -0.117803


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 11, 0], 'true,false,true': [1.09e-06, 0, 173], 'true,false,false,true': [4.719, 96, 29], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.15e-07, 305, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.451, 3, 173], 'true,false,true': [0.0, 9, 0], 'true,false,false,true': [4.69, 91, 29], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 269, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.214, 18, 0], 'true,false,true': [0.367, 99, 202], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 276, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.671, 1, 173], 'true,false,true': [3.73e-09, 12, 0], 'true,false,false,true': [4.636, 83, 29], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 322, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.227, 6, 0], 'true,false,true': [3.21e-07, 0, 173], 'true,false,false,true': [4.747, 101, 29], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.79e-07, 308, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.922, 3, 173], 'true,false,true': [0.418, 96, 29], 'true,false,false': [0.0, 0, 0], 'false,true': [1.03e-07, 298, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.342, 11, 0], 'true,false,true': [1.4e-07, 0, 173], 'true,false,false,true': [4.725, 97, 29], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.11e-08, 318, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.665, 2, 173], 'true,false,true': [4.694, 97, 29], 'true,false,false': [0.0, 0, 0], 'false,true': [9.66e-08, 301, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [1.88e-07, 0, 173], 'true,false,true': [0.0, 6, 0], 'true,false,false,true': [4.69, 91, 29], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 298, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true,true,false': 'genre(A, G)'}, {'true,true,true,true': [0.0, 0, 0], 'true,true,true,false': [7.88e-08, 0, 173], 'true,true,false,true': [0.0, 10, 0], 'true,true,false,false': [4.762, 104, 29], 'true,false': [0.0, 0, 0], 'false': [1.31e-07, 314, 0]}]]
[{'': [0.22636964422241534, 4.3680905886891404e-17], 'true': [-1.0092936587501423e-17, 0.21836854195757424], 'true,false': [6.8179245165420015e-15, 0.1781760000000011], 'true,false,false': [0.1781760000000011, nan], 'false': [4.3680905886891404e-17, nan]}, {'': [0.17759681135575883, -7.263912726172028e-17], 'true': [0.011961102142604929, 0.1734482019999806], 'true,false': [0.0, 0.1832638888888892], 'true,false,false': [0.1832638888888892, nan], 'false': [-7.263912726172028e-17, nan]}, {'': [0.14034464291442308, -9.975917032863725e-17], 'true': [0.002547223426158204, 0.1349801146568625], 'true,false': [0.1349801146568625, nan], 'false': [-9.975917032863725e-17, nan]}, {'': [0.12171788813711162, -3.034149880963161e-17], 'true': [0.002590506864381736, 0.175006898199591], 'true,false': [1.1564823173178713e-18, 0.1918845663265302], 'true,false,false': [0.1918845663265302, nan], 'false': [-3.034149880963161e-17, nan]}, {'': [0.10695482429939515, 1.0381306204287178e-16], 'true': [0.008562013256682502, 0.10639031197668859], 'true,false': [5.955415993365002e-16, 0.17331360946745641], 'true,false,false': [0.17331360946745641, nan], 'false': [1.0381306204287178e-16, nan]}, {'': [0.09112643900167111, 3.576557394765605e-17], 'true': [0.00483341991990755, 0.17471157769478426], 'true,false': [0.17471157769478426, nan], 'false': [3.576557394765605e-17, nan]}, {'': [0.08719708050679685, 1.3965069492140335e-18], 'true': [0.01061993555535175, 0.08730354876879176], 'true,false': [1.1294754470175002e-16, 0.17718568909045035], 'true,false,false': [0.17718568909045035, nan], 'false': [1.3965069492140335e-18, nan]}, {'': [0.08228105201263244, 3.0982968129074136e-17], 'true': [0.0025255490045408024, 0.17484856462170578], 'true,false': [0.17484856462170578, nan], 'false': [3.0982968129074136e-17, nan]}, {'': [0.07966906009330094, -5.513859316930308e-17], 'true': [2.0535917218500005e-16, 0.174840899034231], 'true,false': [-5.782411586589357e-19, 0.1832638888888895], 'true,false,false': [0.1832638888888895, nan], 'false': [-5.513859316930308e-17, nan]}, {'': [0.07824484515116505, 5.445042859626564e-17], 'true': [0.07824484515116505, nan], 'true,true': [3.593785513237501e-17, 0.1587522658136584], 'true,true,false': [-6.938893903907229e-19, 0.1705014415738602], 'true,true,true': [nan, 3.593785513237501e-17]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, E).;true;true
9;true,false;genre(A, G).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995095;  // std dev = 1.09e-06, 173.000 (wgt'ed) examples reached here.  /* #pos=173 */
%   | | else if ( actor(B) )
%   | | | then return -0.1418510649004877;  // std dev = 5.58e-08, 117.000 (wgt'ed) examples reached here.  /* #neg=117 */
%   | | | else return 0.8581489350995117;  // std dev = 1.79e-07, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   else return -0.14185106490048804;  // std dev = 0.000, 273.000 (wgt'ed) examples reached here.  /* #neg=273 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( actor(A) )
%   | | then return 0.7194734122109566;  // std dev = 0.000, 173.000 (wgt'ed) examples reached here.  /* #pos=173 */
%   | | else return -0.12544463852839138;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.7194734122109546;  // std dev = 0.000, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | | else return -0.1270434215104597;  // std dev = 0.154, 97.000 (wgt'ed) examples reached here.  /* #neg=97 */
%   else return -0.125444638528392;  // std dev = 0.000, 291.000 (wgt'ed) examples reached here.  /* #neg=291 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.5553664367462833;  // std dev = 6.36e-07, 202.000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.12042915705639358;  // std dev = 0.311, 87.000 (wgt'ed) examples reached here.  /* #neg=87 */
%   else return -0.11231637819360685;  // std dev = 0.000, 297.000 (wgt'ed) examples reached here.  /* #neg=297 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.4175135841583106;  // std dev = 0.000, 61.000 (wgt'ed) examples reached here.  /* #pos=61 */
%   | | else return 0.40841934181805367;  // std dev = 0.068, 114.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=112 */
%   | else if ( genre(A, E) )
%   | | then return -0.10085822923627576;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.4175135841583105;  // std dev = 0.000, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | | else return -0.10454025556896829;  // std dev = 0.226, 104.000 (wgt'ed) examples reached here.  /* #neg=104 */
%   else return -0.10159632948783662;  // std dev = 0.000, 283.000 (wgt'ed) examples reached here.  /* #neg=283 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.0920729288183648;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(B, E) )
%   | | then return 0.32199658104436973;  // std dev = 0.012, 173.000 (wgt'ed) examples reached here.  /* #pos=173 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.3207118471601495;  // std dev = 2.11e-08, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | | else return -0.09283210739931122;  // std dev = 0.123, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
%   else return -0.09269127618926044;  // std dev = 1.21e-07, 265.000 (wgt'ed) examples reached here.  /* #neg=265 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2559230635643693;  // std dev = 0.012, 202.000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.08885316612791379;  // std dev = 0.232, 111.000 (wgt'ed) examples reached here.  /* #neg=111 */
%   else return -0.08518475138839678;  // std dev = 1.03e-07, 300.000 (wgt'ed) examples reached here.  /* #neg=300 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08559327650941317;  // std dev = 0.059, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else if ( genre(B, E) )
%   | | then return 0.21039785090998783;  // std dev = 0.009, 173.000 (wgt'ed) examples reached here.  /* #pos=173 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.2096332871039402;  // std dev = 3.33e-08, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | | else return -0.07892978479174989;  // std dev = 0.108, 81.000 (wgt'ed) examples reached here.  /* #neg=81 */
%   else return -0.07877675473109141;  // std dev = 3.33e-08, 318.000 (wgt'ed) examples reached here.  /* #neg=318 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.17748545464072157;  // std dev = 0.009, 202.000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.07252213544902317;  // std dev = 0.042, 106.000 (wgt'ed) examples reached here.  /* #neg=106 */
%   else return -0.07324622576333702;  // std dev = 9.19e-08, 312.000 (wgt'ed) examples reached here.  /* #neg=312 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.15161363003362996;  // std dev = 0.260, 174.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=173 */
%   | else if ( genre(A, E) )
%   | | then return -0.06738157069872414;  // std dev = 1.86e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.1526125048368182;  // std dev = 3.33e-08, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | | else return -0.07064812414521077;  // std dev = 0.165, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
%   else return -0.068426977844203;  // std dev = 0.000, 301.000 (wgt'ed) examples reached here.  /* #neg=301 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13008304269367163;  // std dev = 0.442, 176.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=173 */
%   | else if ( genre(A, E) )
%   | | then return -0.06326867460033823;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.1339044762016104;  // std dev = 1.49e-08, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | | else return -0.06408732284397088;  // std dev = 0.091, 94.000 (wgt'ed) examples reached here.  /* #neg=94 */
%   else return -0.06419184008202615;  // std dev = 5.96e-08, 264.000 (wgt'ed) examples reached here.  /* #neg=264 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063576
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.049 seconds
Total inference time: 0.874 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064714
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.325 seconds
Refined model CLL: -0.064714


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063576
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 6.262 seconds
Total inference time: 0.874 seconds
AUC ROC: 1.0
Total revision time: 6.262
Best scored revision CLL: -0.064714


Dataset: 4_cora_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 00:17:12
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063576, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 6.262, 'Inference time': 0.874, 'parameter_0.6': {'AUC ROC': 0.971565, 'AUC PR': 0.823063, 'CLL': -0.119962, 'Precision': [1.0, 0.5], 'Recall': 0.777778, 'F1': 0.875, 'Learning time': 1.426, 'Inference time': 0.888}}


Amount of data: 0.8
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;haswordauthor(E, C).;true;true
7;true,true,true;author(F, E), title(F, D).;false;false
7;true,true,false;title(G, D), venue(G, B).;false;false
7;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
7;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
7;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, B).;false;true
8;true,true,false;title(F, D), venue(F, A).;false;false
8;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
8;true,false,false;haswordvenue(A, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
8;false,true;haswordauthor(M, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;true,true;author(F, E), venue(F, B).;true;true
9;true,true,true;samebib(F, G), venue(G, A).;false;false
9;true,true,false;author(H, E), venue(H, A).;false;false
9;true,false;haswordtitle(I, C).;true;true
9;true,false,true;title(J, I), venue(J, A).;false;false
9;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( genre(B, E) )
%   | | then return 0.858148935099509;  // std dev = 1.08e-06, 230.000 (wgt'ed) examples reached here.  /* #pos=230 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.10343195396743562;  // std dev = 5.425, 159.000 (wgt'ed) examples reached here.  /* #neg=120 #pos=39 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048732;  // std dev = 3.01e-07, 402.000 (wgt'ed) examples reached here.  /* #neg=402 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7121896359114801;  // std dev = 1.190, 232.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=230 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.07183015632025438;  // std dev = 5.492, 172.000 (wgt'ed) examples reached here.  /* #neg=133 #pos=39 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839222;  // std dev = 0.000, 378.000 (wgt'ed) examples reached here.  /* #neg=378 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1502911484856246;  // std dev = 0.228, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else if ( movie(E, A) )
%   | | then return 0.33665745050085916;  // std dev = 0.370, 409.000 (wgt'ed) examples reached here.  /* #neg=140 #pos=269 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360629;  // std dev = 0.000, 383.000 (wgt'ed) examples reached here.  /* #neg=383 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4645945989103709;  // std dev = 1.160, 233.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=230 */
%   | else if ( genre(A, E) )
%   | | then return -0.09818226339443624;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.021626984434962793;  // std dev = 5.452, 164.000 (wgt'ed) examples reached here.  /* #neg=125 #pos=39 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783598;  // std dev = 1.05e-08, 392.000 (wgt'ed) examples reached here.  /* #neg=392 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14142518370145715;  // std dev = 0.376, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else if ( genre(B, E) )
%   | | then return 0.36086987855940866;  // std dev = 8.43e-08, 230.000 (wgt'ed) examples reached here.  /* #pos=230 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.004272964444469116;  // std dev = 5.501, 174.000 (wgt'ed) examples reached here.  /* #neg=135 #pos=39 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926089;  // std dev = 1.52e-07, 400.000 (wgt'ed) examples reached here.  /* #neg=400 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.27318903906733844;  // std dev = 1.071, 234.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=230 */
%   | else if ( movie(E, A) )
%   | | then return -0.026438363648078056;  // std dev = 0.382, 214.000 (wgt'ed) examples reached here.  /* #neg=175 #pos=39 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 1.19e-07, 364.000 (wgt'ed) examples reached here.  /* #neg=364 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07701358631948871;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( genre(B, E) )
%   | | then return 0.23047172010407788;  // std dev = 3.07e-07, 230.000 (wgt'ed) examples reached here.  /* #pos=230 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.03716007738827571;  // std dev = 5.397, 154.000 (wgt'ed) examples reached here.  /* #neg=115 #pos=39 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109141;  // std dev = 1.21e-07, 401.000 (wgt'ed) examples reached here.  /* #neg=401 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1797053794771762;  // std dev = 1.183, 236.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=230 */
%   | else if ( movie(E, B) )
%   | | then return -0.037861855811274985;  // std dev = 5.636, 217.000 (wgt'ed) examples reached here.  /* #neg=178 #pos=39 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.07324622576333771;  // std dev = 0.000, 407.000 (wgt'ed) examples reached here.  /* #neg=407 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.16145501531623818;  // std dev = 0.707, 232.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=230 */
%   | else if ( genre(A, E) )
%   | | then return -0.06923449792253879;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.017565111097507254;  // std dev = 5.467, 167.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=39 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420332;  // std dev = 0.000, 389.000 (wgt'ed) examples reached here.  /* #neg=389 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return -0.37298147906820595;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.14463911953674738;  // std dev = 0.000, 230.000 (wgt'ed) examples reached here.  /* #pos=230 */
%   | | else if ( genre(A, G) )
%   | | | then return -0.0649038385615023;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | | else return 0.026326134964572572;  // std dev = 5.425, 159.000 (wgt'ed) examples reached here.  /* #neg=120 #pos=39 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.06419184008202561;  // std dev = 1.93e-07, 395.000 (wgt'ed) examples reached here.  /* #neg=395 */


Results
   AUC ROC   = 0.971565
   AUC PR    = 0.823063
   CLL	      = -0.118017
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.777778
   F1        = 0.875


Total learning time: 1.553 seconds
Total inference time: 0.905 seconds
AUC ROC: 0.971565


Results scoring model
   AUC ROC   = 0.982332
   AUC PR    = 0.888815
   CLL	      = -0.114323
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.855019
   F1        = 0.921844


Total scoring time: 1.583 seconds
Parameter learned model CLL: -0.114323


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 9, 0], 'true,false,true': [1.08e-06, 0, 230], 'true,false,false,true': [5.425, 120, 39], 'true,false,false,false': [0.0, 0, 0], 'false,true': [3.01e-07, 402, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.19, 2, 230], 'true,false,true': [0.0, 6, 0], 'true,false,false,true': [5.492, 133, 39], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 378, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.228, 18, 0], 'true,false,true': [0.37, 140, 269], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 383, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.16, 3, 230], 'true,false,true': [0.0, 16, 0], 'true,false,false,true': [5.452, 125, 39], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.05e-08, 392, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.376, 19, 0], 'true,false,true': [8.43e-08, 0, 230], 'true,false,false,true': [5.501, 135, 39], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.52e-07, 400, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [1.071, 4, 230], 'true,false,true': [0.382, 175, 39], 'true,false,false': [0.0, 0, 0], 'false,true': [1.19e-07, 364, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 13, 0], 'true,false,true': [3.07e-07, 0, 230], 'true,false,false,true': [5.397, 115, 39], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.21e-07, 401, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [1.183, 6, 230], 'true,false,true': [5.636, 178, 39], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 407, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.707, 2, 230], 'true,false,true': [0.0, 9, 0], 'true,false,false,true': [5.467, 128, 39], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 389, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true,true,false': 'genre(A, G)'}, {'true,true,true,true': [0.0, 3, 0], 'true,true,true,false': [0.0, 0, 230], 'true,true,false,true': [0.0, 16, 0], 'true,true,false,false': [5.425, 120, 39], 'true,false': [0.0, 0, 0], 'false': [1.93e-07, 395, 0]}]]
[{'': [0.21906643771622275, 2.2535870350600193e-16], 'true': [-9.25185853854297e-18, 0.21332134997786517], 'true,false': [5.066478637593758e-15, 0.18511925952296318], 'true,false,false': [0.18511925952296318, nan], 'false': [2.2535870350600193e-16, nan]}, {'': [0.18039606784132764, -1.2453295302673713e-16], 'true': [0.006101140675790752, 0.17068881959908952], 'true,false': [-2.3129646346357427e-18, 0.17533126014061712], 'true,false,false': [0.17533126014061712, nan], 'false': [-1.2453295302673713e-16, nan]}, {'': [0.14097413323993374, -2.3190037067888386e-17], 'true': [0.0028841663574631143, 0.1370557961952112], 'true,false': [0.1370557961952112, nan], 'false': [-2.3190037067888386e-17, nan]}, {'': [0.1263366793316725, 1.0875654118777043e-16], 'true': [0.005778760298861996, 0.1663047939348309], 'true,false': [-1.734723475976807e-18, 0.18125371802498627], 'true,false,false': [0.18125371802498627, nan], 'false': [1.0875654118777043e-16, nan]}, {'': [0.10686385637914587, 5.773159728050814e-17], 'true': [0.007455116180571042, 0.10607710244127877], 'true,false': [3.089316242435218e-17, 0.17390011890606408], 'true,false,false': [0.17390011890606408, nan], 'false': [5.773159728050814e-17, nan]}, {'': [0.09481429076689772, 3.9040809657148365e-17], 'true': [0.004905770064208735, 0.14623324519874675], 'true,false': [0.14623324519874675, nan], 'false': [3.9040809657148365e-17, nan]}, {'': [0.08371601778580556, 3.654599482556625e-17], 'true': [-3.2025664171879517e-18, 0.08481852525510476], 'true,false': [4.093344021226664e-16, 0.189112835216731], 'true,false,false': [0.189112835216731, nan], 'false': [3.654599482556625e-17, nan]}, {'': [0.0850266041089474, -6.983220990271255e-17], 'true': [0.005933492922983692, 0.1463844805176143], 'true,false': [0.1463844805176143, nan], 'false': [-6.983220990271255e-17, nan]}, {'': [0.08004353741358947, -1.0845366307392275e-16], 'true': [0.0021523576730328666, 0.17020770276424324], 'true,false': [-7.709882115452476e-19, 0.17899530280755888], 'true,false,false': [0.17899530280755888, nan], 'false': [-1.0845366307392275e-16, nan]}, {'': [0.07790995145381782, 9.443922437317787e-17], 'true': [0.07790995145381782, nan], 'true,true': [0.0034053389826500667, 0.16888544895854424], 'true,true,false': [0.0, 0.1851192595229626], 'true,true,true': [-3.700743415417188e-17, -2.6645352591003756e-16]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, E).;true;true
9;true,true;genre(A, F).;true;true
9;true,false;genre(A, G).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else if ( genre(B, E) )
%   | | then return 0.858148935099509;  // std dev = 1.08e-06, 230.000 (wgt'ed) examples reached here.  /* #pos=230 */
%   | | else if ( actor(B) )
%   | | | then return -0.14185106490048782;  // std dev = 0.000, 125.000 (wgt'ed) examples reached here.  /* #neg=125 */
%   | | | else return 0.7651256792855584;  // std dev = 1.905, 43.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=39 */
%   else return -0.1418510649004873;  // std dev = 3.01e-07, 409.000 (wgt'ed) examples reached here.  /* #neg=409 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.7194734122109541;  // std dev = 2.67e-07, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   | | else return 0.7023466949662396;  // std dev = 0.119, 148.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=145 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 7.45e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.7378597926892096;  // std dev = 0.000, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | | else return -0.12758050679061606;  // std dev = 0.192, 128.000 (wgt'ed) examples reached here.  /* #neg=128 */
%   else return -0.1254446385283923;  // std dev = 0.000, 449.000 (wgt'ed) examples reached here.  /* #neg=449 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.5603037328783558;  // std dev = 0.096, 269.000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.1168899402172679;  // std dev = 0.287, 150.000 (wgt'ed) examples reached here.  /* #neg=150 */
%   else return -0.11231637819360625;  // std dev = 0.000, 392.000 (wgt'ed) examples reached here.  /* #neg=392 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4135634399467957;  // std dev = 0.058, 232.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=230 */
%   | else if ( genre(A, E) )
%   | | then return -0.10117963981737677;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.4345553213823794;  // std dev = 0.000, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | | else return -0.10195786618480836;  // std dev = 0.116, 120.000 (wgt'ed) examples reached here.  /* #neg=120 */
%   else return -0.10159632948783584;  // std dev = 2.42e-07, 414.000 (wgt'ed) examples reached here.  /* #neg=414 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( female(B) )
%   | | then return -0.09234227627742343;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.11740715608364918;  // std dev = 0.064, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else if ( genre(B, E) )
%   | | then return 0.3228554381907386;  // std dev = 0.027, 230.000 (wgt'ed) examples reached here.  /* #pos=230 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.33229029724016534;  // std dev = 4.21e-08, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | | else return -0.0929475517629521;  // std dev = 0.108, 128.000 (wgt'ed) examples reached here.  /* #neg=128 */
%   else return -0.0926912761892606;  // std dev = 1.91e-07, 364.000 (wgt'ed) examples reached here.  /* #neg=364 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2575664216610748;  // std dev = 0.044, 269.000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else if ( actor(B) )
%   | | then return -0.08453604731413125;  // std dev = 0.004, 132.000 (wgt'ed) examples reached here.  /* #neg=132 */
%   | | else return -0.21671168211697447;  // std dev = 0.035, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else return -0.08518475138839678;  // std dev = 1.32e-07, 397.000 (wgt'ed) examples reached here.  /* #neg=397 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( actor(B) )
%   | | then return -0.07756865556667283;  // std dev = 0.003, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else return -0.2180698980150856;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.2106362836730511;  // std dev = 0.021, 230.000 (wgt'ed) examples reached here.  /* #pos=230 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.21624215307339711;  // std dev = 6.83e-08, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | | else return -0.07950213462359136;  // std dev = 0.109, 128.000 (wgt'ed) examples reached here.  /* #neg=128 */
%   else return -0.07877675473109153;  // std dev = 2.17e-07, 419.000 (wgt'ed) examples reached here.  /* #neg=419 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.17833495920291884;  // std dev = 0.030, 269.000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else if ( actor(B) )
%   | | then return -0.07273026737596396;  // std dev = 0.003, 129.000 (wgt'ed) examples reached here.  /* #neg=129 */
%   | | else return -0.16809555829076228;  // std dev = 0.018, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return -0.07324622576333772;  // std dev = 0.000, 421.000 (wgt'ed) examples reached here.  /* #neg=421 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.1517575111885563;  // std dev = 0.000, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   | | else return 0.1476242851227808;  // std dev = 0.044, 148.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=145 */
%   | else if ( genre(A, E) )
%   | | then return -0.06728314498082627;  // std dev = 0.003, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.15679401245681895;  // std dev = 0.000, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | | else return -0.06886522462348732;  // std dev = 0.081, 132.000 (wgt'ed) examples reached here.  /* #neg=132 */
%   else return -0.06842697784420337;  // std dev = 0.000, 410.000 (wgt'ed) examples reached here.  /* #neg=410 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( genre(A, E) )
%   | | then return -0.18012647026315945;  // std dev = 5.27e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0.13479647762846464;  // std dev = 0.018, 230.000 (wgt'ed) examples reached here.  /* #pos=230 */
%   | else if ( genre(A, F) )
%   | | then return -0.06293355051836878;  // std dev = 0.001, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.1371610386960954;  // std dev = 1.49e-08, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | | else return -0.06497715773569186;  // std dev = 0.094, 134.000 (wgt'ed) examples reached here.  /* #neg=134 */
%   else return -0.06419184008202557;  // std dev = 2.02e-07, 409.000 (wgt'ed) examples reached here.  /* #neg=409 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063734
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.401 seconds
Total inference time: 0.89 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064775
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.555 seconds
Refined model CLL: -0.064775


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063734
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 7.092 seconds
Total inference time: 0.89 seconds
AUC ROC: 1.0
Total revision time: 7.092
Best scored revision CLL: -0.064775


Dataset: 4_cora_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 00:17:22
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063734, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 7.092, 'Inference time': 0.89, 'parameter_0.8': {'AUC ROC': 0.971565, 'AUC PR': 0.823063, 'CLL': -0.118017, 'Precision': [1.0, 0.5], 'Recall': 0.777778, 'F1': 0.875, 'Learning time': 1.553, 'Inference time': 0.905}}


Amount of data: 1.0
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;haswordauthor(E, C).;true;true
7;true,true,true;author(F, E), title(F, D).;false;false
7;true,true,false;title(G, D), venue(G, B).;false;false
7;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
7;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
7;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, B).;false;true
8;true,true,false;title(F, D), venue(F, A).;false;false
8;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
8;true,false,false;haswordvenue(A, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
8;false,true;haswordauthor(M, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;true,true;author(F, E), venue(F, B).;true;true
9;true,true,true;samebib(F, G), venue(G, A).;false;false
9;true,true,false;author(H, E), venue(H, A).;false;false
9;true,false;haswordtitle(I, C).;true;true
9;true,false,true;title(J, I), venue(J, A).;false;false
9;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048774;  // std dev = 1.05e-08, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995085;  // std dev = 1.08e-06, 288.000 (wgt'ed) examples reached here.  /* #pos=288 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.09372585817643525;  // std dev = 6.120, 208.000 (wgt'ed) examples reached here.  /* #neg=159 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048774;  // std dev = 0.000, 500.000 (wgt'ed) examples reached here.  /* #neg=500 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7022301866856648;  // std dev = 2.048, 294.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=288 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 7.45e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.08306737441826473;  // std dev = 6.116, 207.000 (wgt'ed) examples reached here.  /* #neg=158 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.1254446385283923;  // std dev = 0.000, 504.000 (wgt'ed) examples reached here.  /* #neg=504 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1425201952112903;  // std dev = 0.254, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | else if ( movie(E, A) )
%   | | then return 0.3631516484670266;  // std dev = 0.362, 488.000 (wgt'ed) examples reached here.  /* #neg=151 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360583;  // std dev = 0.000, 493.000 (wgt'ed) examples reached here.  /* #neg=493 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.466838796961729;  // std dev = 0.669, 289.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=288 */
%   | else if ( genre(A, E) )
%   | | then return -0.09887247479208973;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.026510343526907832;  // std dev = 6.072, 198.000 (wgt'ed) examples reached here.  /* #neg=149 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783538;  // std dev = 1.57e-08, 501.000 (wgt'ed) examples reached here.  /* #neg=501 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12490772925995183;  // std dev = 0.307, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else if ( genre(B, E) )
%   | | then return 0.35655006291934027;  // std dev = 4.99e-07, 288.000 (wgt'ed) examples reached here.  /* #pos=288 */
%   | | else if ( movie(F, A) )
%   | | | then return 2.4484222744012625E-4;  // std dev = 6.159, 217.000 (wgt'ed) examples reached here.  /* #neg=168 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926146;  // std dev = 0.000, 500.000 (wgt'ed) examples reached here.  /* #neg=500 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2757763571450601;  // std dev = 0.762, 290.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=288 */
%   | else if ( movie(E, A) )
%   | | then return 0.020914512436253262;  // std dev = 0.421, 207.000 (wgt'ed) examples reached here.  /* #neg=158 #pos=49 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 1.40e-07, 472.000 (wgt'ed) examples reached here.  /* #neg=472 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12502415747017737;  // std dev = 0.426, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | else if ( genre(B, E) )
%   | | then return 0.227462354916774;  // std dev = 0.000, 288.000 (wgt'ed) examples reached here.  /* #pos=288 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.0085848272661442;  // std dev = 6.111, 206.000 (wgt'ed) examples reached here.  /* #neg=157 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109191;  // std dev = 0.000, 475.000 (wgt'ed) examples reached here.  /* #neg=475 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18015681190621846;  // std dev = 1.167, 294.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=288 */
%   | else if ( movie(E, B) )
%   | | then return 8.997559131698698E-4;  // std dev = 6.122, 221.000 (wgt'ed) examples reached here.  /* #neg=172 #pos=49 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.07324622576333689;  // std dev = 1.60e-07, 504.000 (wgt'ed) examples reached here.  /* #neg=504 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.16038346521629698;  // std dev = 0.696, 290.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=288 */
%   | else if ( genre(A, E) )
%   | | then return -0.0733178863946096;  // std dev = 6.45e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.003490185122824696;  // std dev = 6.125, 209.000 (wgt'ed) examples reached here.  /* #neg=160 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420354;  // std dev = 0.000, 492.000 (wgt'ed) examples reached here.  /* #neg=492 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return -0.3661155869977111;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return 0.14298709206849222;  // std dev = 0.000, 288.000 (wgt'ed) examples reached here.  /* #pos=288 */
%   | | else if ( genre(A, G) )
%   | | | then return -0.06848970001329888;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | | else return 0.027679184513481316;  // std dev = 6.025, 189.000 (wgt'ed) examples reached here.  /* #neg=140 #pos=49 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.06419184008202536;  // std dev = 2.46e-07, 513.000 (wgt'ed) examples reached here.  /* #neg=513 */


Results
   AUC ROC   = 0.971565
   AUC PR    = 0.823063
   CLL	      = -0.121987
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.777778
   F1        = 0.875


Total learning time: 1.848 seconds
Total inference time: 0.872 seconds
AUC ROC: 0.971565


Results scoring model
   AUC ROC   = 0.982257
   AUC PR    = 0.888508
   CLL	      = -0.118045
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.854599
   F1        = 0.9216


Total scoring time: 1.796 seconds
Parameter learned model CLL: -0.118045


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [1.05e-08, 21, 0], 'true,false,true': [1.08e-06, 0, 288], 'true,false,false,true': [6.12, 159, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 500, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [2.048, 6, 288], 'true,false,true': [7.45e-09, 13, 0], 'true,false,false,true': [6.116, 158, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 504, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.254, 26, 0], 'true,false,true': [0.362, 151, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 493, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.669, 1, 288], 'true,false,true': [0.0, 18, 0], 'true,false,false,true': [6.072, 149, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.57e-08, 501, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.307, 17, 0], 'true,false,true': [4.99e-07, 0, 288], 'true,false,false,true': [6.159, 168, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 500, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.762, 2, 288], 'true,false,true': [0.421, 158, 49], 'true,false,false': [0.0, 0, 0], 'false,true': [1.4e-07, 472, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.426, 22, 0], 'true,false,true': [0.0, 0, 288], 'true,false,false,true': [6.111, 157, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 475, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [1.167, 6, 288], 'true,false,true': [6.122, 172, 49], 'true,false,false': [0.0, 0, 0], 'false,true': [1.6e-07, 504, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.696, 2, 288], 'true,false,true': [6.45e-09, 13, 0], 'true,false,false,true': [6.125, 160, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 492, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true,true,false': 'genre(A, G)'}, {'true,true,true,true': [0.0, 2, 0], 'true,true,true,false': [0.0, 0, 288], 'true,true,false,true': [0.0, 18, 0], 'true,true,false,false': [6.025, 140, 49], 'true,false': [0.0, 0, 0], 'false': [2.46e-07, 513, 0]}]]
[{'': [0.22694536625151315, -2.842170943040401e-17], 'true': [5.28677630773884e-18, 0.21780290712799438], 'true,false': [4.046146134189459e-15, 0.18008043639053356], 'true,false,false': [0.18008043639053356, nan], 'false': [-2.842170943040401e-17, nan]}, {'': [0.17958906840766556, -1.251203726164859e-16], 'true': [0.014271783672768863, 0.17242169144249694], 'true,false': [4.270088556250602e-18, 0.18068099605591692], 'true,false,false': [0.18068099605591692, nan], 'false': [-1.251203726164859e-16, nan]}, {'': [0.13715235424732325, -1.0809473667750003e-17], 'true': [0.0024761629551881205, 0.13139328083276458], 'true,false': [0.13139328083276458, nan], 'false': [-1.0809473667750003e-17, nan]}, {'': [0.12415478230908536, 2.464207591583182e-16], 'true': [0.0015470895544404774, 0.17191264545081614], 'true,false': [-1.5419764230904951e-18, 0.1862309968370589], 'true,false,false': [0.1862309968370589, nan], 'false': [2.464207591583182e-16, nan]}, {'': [0.10634892588886247, -2.842170943040401e-17], 'true': [0.005555074423888009, 0.10623076045276574], 'true,false': [8.635067969306773e-16, 0.1748178980228913], 'true,false,false': [0.1748178980228913, nan], 'false': [-2.842170943040401e-17, nan]}, {'': [0.09082591350540108, 4.139814668093804e-17], 'true': [0.0020017110901058657, 0.17736456633073414], 'true,false': [0.17736456633073414, nan], 'false': [4.139814668093804e-17, nan]}, {'': [0.08666042929921566, -2.150326700326619e-17], 'true': [0.008248441681555042, 0.0872433194630774], 'true,false': [-3.9474596431116675e-16, 0.18128475822415016], 'true,false,false': [0.18128475822415016, nan], 'false': [-2.150326700326619e-17, nan]}, {'': [0.08329734690686384, 5.1105504308142124e-17], 'true': [0.0046291193682990615, 0.16960706710187531], 'true,false': [0.16960706710187531, nan], 'false': [5.1105504308142124e-17, nan]}, {'': [0.08074840686049135, -1.209511262599764e-16], 'true': [0.001668292095001409, 0.16929803565346677], 'true,false': [3.2025664171879517e-18, 0.17948307044252748], 'true,false,false': [0.17948307044252748, nan], 'false': [-1.209511262599764e-16, nan]}, {'': [0.07788131059336939, 1.1773125251385675e-16], 'true': [0.07788131059336939, nan], 'true,true': [0.0017751589749280946, 0.17607870837209386], 'true,true,false': [-3.854941057726238e-18, 0.192043895747599], 'true,true,true': [0.0, -9.25185853854297e-18]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, E).;true;true
9;true,true;genre(A, F).;true;true
9;true,false;genre(A, G).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004877;  // std dev = 2.36e-08, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995085;  // std dev = 1.08e-06, 288.000 (wgt'ed) examples reached here.  /* #pos=288 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.8581489350995122;  // std dev = 1.69e-07, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.1418510649004882;  // std dev = 0.000, 175.000 (wgt'ed) examples reached here.  /* #neg=175 */
%   else return -0.14185106490048727;  // std dev = 2.63e-07, 460.000 (wgt'ed) examples reached here.  /* #neg=460 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.7194734122109548;  // std dev = 0.000, 105.000 (wgt'ed) examples reached here.  /* #pos=105 */
%   | | else return 0.7058457017151608;  // std dev = 0.106, 186.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=183 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.7194734122109547;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.12544463852839144;  // std dev = 0.000, 169.000 (wgt'ed) examples reached here.  /* #neg=169 */
%   else return -0.12544463852839233;  // std dev = 0.000, 464.000 (wgt'ed) examples reached here.  /* #neg=464 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11722140850700287;  // std dev = 0.110, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | else if ( director(B), actor(A) )
%   | | then return 0.5571923985336141;  // std dev = 0.031, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | | else return -0.1123163781936065;  // std dev = 0.000, 183.000 (wgt'ed) examples reached here.  /* #neg=183 */
%   else return -0.11231637819360596;  // std dev = 0.000, 461.000 (wgt'ed) examples reached here.  /* #neg=461 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.4170695845688138;  // std dev = 0.000, 105.000 (wgt'ed) examples reached here.  /* #pos=105 */
%   | | else if ( actor(A) )
%   | | | then return 0.4203864855117045;  // std dev = 2.80e-07, 183.000 (wgt'ed) examples reached here.  /* #pos=183 */
%   | | | else return -0.20534333478149464;  // std dev = 1.05e-08, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( genre(A, E) )
%   | | then return -0.10114949930674119;  // std dev = 5.27e-09, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.41706958456881216;  // std dev = 4.21e-08, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.10159632948783642;  // std dev = 0.000, 141.000 (wgt'ed) examples reached here.  /* #neg=141 */
%   else return -0.10159632948783548;  // std dev = 3.26e-07, 479.000 (wgt'ed) examples reached here.  /* #neg=479 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11377357607689896;  // std dev = 0.157, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else if ( genre(B, E) )
%   | | then return 0.32184009644277933;  // std dev = 0.018, 288.000 (wgt'ed) examples reached here.  /* #pos=288 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.32041085336263775;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.0926912761892607;  // std dev = 7.60e-08, 156.000 (wgt'ed) examples reached here.  /* #neg=156 */
%   else return -0.09269127618926142;  // std dev = 0.000, 490.000 (wgt'ed) examples reached here.  /* #neg=490 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.25469544663355487;  // std dev = 4.21e-08, 105.000 (wgt'ed) examples reached here.  /* #pos=105 */
%   | | else if ( actor(A) )
%   | | | then return 0.2566576486191276;  // std dev = 3.58e-07, 183.000 (wgt'ed) examples reached here.  /* #pos=183 */
%   | | | else return -0.15811195521476348;  // std dev = 5.27e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( actor(B) )
%   | | then return -0.08500389212563995;  // std dev = 0.008, 196.000 (wgt'ed) examples reached here.  /* #neg=196 */
%   | | else if ( female(A) )
%   | | | then return 0.2549668487748959;  // std dev = 0.000, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   | | | else return 0.17937760429416424;  // std dev = 0.424, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   else return -0.08518475138839678;  // std dev = 1.49e-07, 500.000 (wgt'ed) examples reached here.  /* #neg=500 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08307873599447133;  // std dev = 0.082, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else if ( genre(B, E) )
%   | | then return 0.2103012775013581;  // std dev = 0.011, 288.000 (wgt'ed) examples reached here.  /* #pos=288 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.211440916029466;  // std dev = 0.031, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.07949559161081457;  // std dev = 0.047, 152.000 (wgt'ed) examples reached here.  /* #neg=152 */
%   else return -0.07877675473109208;  // std dev = 1.25e-07, 502.000 (wgt'ed) examples reached here.  /* #neg=502 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.17761705623382568;  // std dev = 0.030, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.07401245507342581;  // std dev = 0.085, 179.000 (wgt'ed) examples reached here.  /* #neg=179 */
%   else return -0.0732462257633371;  // std dev = 9.88e-08, 465.000 (wgt'ed) examples reached here.  /* #neg=465 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1511439261610508;  // std dev = 0.386, 290.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=288 */
%   | else if ( genre(A, E) )
%   | | then return -0.06651264913635778;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.15377718843337249;  // std dev = 0.025, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.06857987065144291;  // std dev = 0.027, 160.000 (wgt'ed) examples reached here.  /* #neg=160 */
%   else return -0.06842697784420355;  // std dev = 0.000, 501.000 (wgt'ed) examples reached here.  /* #neg=501 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( genre(A, E) )
%   | | then return -0.13747727061167567;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0.13445015965155596;  // std dev = 0.008, 288.000 (wgt'ed) examples reached here.  /* #pos=288 */
%   | else if ( genre(A, F) )
%   | | then return -0.062500133679008;  // std dev = 3.73e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.13481482653970134;  // std dev = 0.022, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.06453876762122239;  // std dev = 0.035, 164.000 (wgt'ed) examples reached here.  /* #neg=164 */
%   else return -0.06419184008202541;  // std dev = 2.40e-07, 477.000 (wgt'ed) examples reached here.  /* #neg=477 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063758
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.739 seconds
Total inference time: 0.899 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064476
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.917 seconds
Refined model CLL: -0.064476


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063758
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 8.3 seconds
Total inference time: 0.899 seconds
AUC ROC: 1.0
Total revision time: 8.3
Best scored revision CLL: -0.064476


Dataset: 4_cora_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 00:17:33
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063758, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 8.3, 'Inference time': 0.899, 'parameter_1.0': {'AUC ROC': 0.971565, 'AUC PR': 0.823063, 'CLL': -0.121987, 'Precision': [1.0, 0.5], 'Recall': 0.777778, 'F1': 0.875, 'Learning time': 1.848, 'Inference time': 0.872}}


